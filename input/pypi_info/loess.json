{"info":{"author":"Michele Cappellari","author_email":"michele.cappellari@physics.ox.ac.uk","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Intended Audience :: Developers","Intended Audience :: Science/Research","Operating System :: OS Independent","Programming Language :: Python :: 3"],"description":"The LOESS Package\r\n=================\r\n\r\n**Smoothing via robust locally-weighted regression in one or two dimensions**\r\n\r\n.. image:: https://img.shields.io/pypi/v/loess.svg\r\n        :target: https://pypi.org/project/loess/\r\n.. image:: https://img.shields.io/badge/arXiv-1208.3523-orange.svg\r\n    :target: https://arxiv.org/abs/1208.3523\r\n.. image:: https://img.shields.io/badge/DOI-10.1093/mnras/stt644-green.svg\r\n        :target: https://doi.org/10.1093/mnras/stt644\r\n\r\nLOESS is the Python implementation by `Cappellari et al. (2013)\r\n<https://ui.adsabs.harvard.edu/abs/2013MNRAS.432.1862C>`_ of the\r\nalgorithm by `Cleveland (1979) <https://doi.org/10.2307/2286407>`_\r\nfor the one-dimensional case and `Cleveland & Devlin (1988)\r\n<https://doi.org/10.2307/2289282>`_ for the two-dimensional case.\r\n\r\n.. contents:: :depth: 2\r\n\r\nAttribution\r\n-----------\r\n\r\nIf you use this software for your research, please cite the LOESS package of\r\n`Cappellari et al. (2013b) <https://ui.adsabs.harvard.edu/abs/2013MNRAS.432.1862C>`_,\r\nwhere the implementation was described. The BibTeX entry for the paper is::\r\n\r\n    @ARTICLE{Cappellari2013b,\r\n        author = {{Cappellari}, M. and {McDermid}, R.~M. and {Alatalo}, K. and \r\n            {Blitz}, L. and {Bois}, M. and {Bournaud}, F. and {Bureau}, M. and \r\n            {Crocker}, A.~F. and {Davies}, R.~L. and {Davis}, T.~A. and \r\n            {de Zeeuw}, P.~T. and {Duc}, P.-A. and {Emsellem}, E. and {Khochfar}, S. and \r\n            {Krajnovi{\\'c}}, D. and {Kuntschner}, H. and {Morganti}, R. and \r\n            {Naab}, T. and {Oosterloo}, T. and {Sarzi}, M. and {Scott}, N. and \r\n            {Serra}, P. and {Weijmans}, A.-M. and {Young}, L.~M.},\r\n        title = \"{The ATLAS$^{3D}$ project - XX. Mass-size and mass-{$\\sigma$}\r\n            distributions of early-type galaxies: bulge fraction drives kinematics,\r\n            mass-to-light ratio, molecular gas fraction and stellar initial mass\r\n            function}\",\r\n        journal = {MNRAS},\r\n        eprint = {1208.3523},\r\n         year = 2013,\r\n        volume = 432,\r\n        pages = {1862-1893},\r\n          doi = {10.1093/mnras/stt644}\r\n    }\r\n\r\nInstallation\r\n------------\r\n\r\ninstall with::\r\n\r\n    pip install loess\r\n\r\nWithout writing access to the global ``site-packages`` directory, use::\r\n\r\n    pip install --user loess\r\n\r\nTo upgrade ``loess`` to the latest version use::\r\n\r\n    pip install --upgrade loess\r\n\r\nDocumentation\r\n-------------\r\n\r\nFull documentation is contained in the individual files docstrings.\r\n\r\nUsage examples are contained in the directory ``loess/examples`` \r\nwhich is copied by ``pip`` within the global folder\r\n`site-packages <https://stackoverflow.com/a/46071447>`_.\r\n\r\nWhat follows is the documentation of the two main procedures of the \r\n``loess`` package, extracted from their Python docstrings.\r\n\r\n###########################################################################\r\n\r\nloess_1d\r\n========\r\n\r\nPurpose\r\n-------\r\n\r\nOne-dimensional LOESS smoothing via robust locally-weighted regression.\r\n\r\nThis function is the implementation by `Cappellari et al. (2013)\r\n<https://ui.adsabs.harvard.edu/abs/2013MNRAS.432.1862C>`_ of the\r\nalgorithm by `Cleveland (1979) <https://doi.org/10.2307/2286407>`_.\r\n\r\nCalling Sequence\r\n----------------\r\n\r\n.. code-block:: python\r\n\r\n    xout, yout, wout = loess_1d(x, y, xnew=None, degree=1, frac=0.5,\r\n                                npoints=None, rotate=False, sigy=None)\r\n\r\nInput Parameters\r\n----------------\r\n\r\nx: array_like with shape (n,)\r\n    Vector of ``x`` coordinate.\r\ny: array_like with shape (n,)\r\n    Vector of ``y`` coordinate to be LOESS smoothed.\r\n\r\nOptional Keywords\r\n-----------------\r\n\r\nxnew: array_like with shape (m,), optional\r\n    Vector of coordinates at which to compute the smoothed ``y`` values.\r\ndegree: {1, 2}, optional\r\n    degree of the local 1-dim polynomial approximation (default ``degree=1``).\r\nfrac: float, optional\r\n    Fraction of points to consider in the local approximation (default ``frac=0.5``).\r\n    Typical values are between ``frac~0.2-0.8``. Note that the values are\r\n    weighted by a Gaussian function of their distance from the point under \r\n    consideration. This implies that the effective fraction of points \r\n    contributing to a given value is much smaller that ``frac``.\r\nnpoints: int, optional\r\n    Number of points to consider in the local approximation.\r\n    This is an alternative to using ``frac=npoints/x.size``.\r\nrotate: bool, optional\r\n    Rotate the ``(x, y)`` coordinates to have the maximum variance along the\r\n    ``x`` axis. This is useful to give comparable contribution to the\r\n    errors in the ``x`` and ``y`` variables. It can be used to asses the\r\n    sensitivity of the solution to the assumption that errors are only in ``y``.\r\nsigy: array_like with shape (n,)\r\n    1-sigma errors for the ``y`` values. If this keyword is used\r\n    the biweight fit is done assuming those errors. If this keyword\r\n    is *not* used, the biweight fit determines the errors in ``y``\r\n    from the scatter of the neighbouring points.\r\n\r\nOutput Parameters\r\n-----------------\r\n\r\nxout: array_like with shape (n,)\r\n    Vector of ``x`` coordinates for the ``yout`` values.\r\n    If ``rotate=False`` (default) then ``xout=x``.\r\n    \r\n    When passing as input the ``xnew`` coordinates then ``xout=xnew``\r\n    and both have shape ``(m,)``.\r\nyout: array_like with shape (n,)\r\n    Vector of smoothed ``y`` values at the coordinates ``xout``.\r\n    \r\n    When passing as input the ``xnew`` coordinates this contains the\r\n    smoothed values at the coordinates ``xnew`` and has shape ``(m,)``.\r\nwout: array_like with shape (n,)\r\n    Vector of biweights used in the local regressions. This can be used to\r\n    identify outliers: ``wout=0`` for outliers with deviations ``>4sigma``.\r\n    \r\n    When passing as input the ``xnew`` coordinates, this output is\r\n    meaningless and is arbitrarily set to unity.\r\n\r\n###########################################################################\r\n\r\nloess_2d\r\n========\r\n\r\nPurpose\r\n-------\r\n\r\nTwo-dimensional LOESS smoothing via robust locally-weighted regression.\r\n\r\nThis function is the implementation by `Cappellari et al. (2013)\r\n<https://ui.adsabs.harvard.edu/abs/2013MNRAS.432.1862C>`_ of the\r\nalgorithm by `Cleveland (1979) <https://doi.org/10.2307/2286407>`_\r\nfor the one-dimensional case and `Cleveland & Devlin (1988)\r\n<https://doi.org/10.2307/2289282>`_ for the two-dimensional case.\r\n\r\nCalling Sequence\r\n----------------\r\n\r\n.. code-block:: python\r\n\r\n   zout, wout = loess_2d(x, y, z, xnew=None, ynew=None, degree=1, frac=0.5,\r\n                         npoints=None, rescale=False, sigz=None)\r\n\r\nInput Parameters\r\n----------------\r\n\r\nx: array_like with shape (n,)\r\n    vector of ``x`` coordinates.\r\ny: array_like with shape (n,)\r\n    vector of ``y`` coordinates.\r\nz: array_like with shape (n,)\r\n    vector of ``z`` coordinates to be LOESS smoothed.\r\n\r\nOptional Keywords\r\n-----------------\r\n\r\nxnew: array_like with shape (m,), optional\r\n    Vector with the ``x`` coordinates at which to compute the smoothed\r\n    ``z`` values.\r\nynew: array_like with shape (m,), optional\r\n    Vector with the ``y`` coordinates at which to compute the smoothed\r\n    ``z`` values.\r\ndegree: {1, 2}, optional\r\n    degree of the local 2-dim polynomial approximation (default ``degree=1``).\r\nfrac: float, optional\r\n    Fraction of points to consider in the local approximation (default ``frac=0.5``).\r\n    Typical values are between ``frac~0.2-0.8``. Note that the values are\r\n    weighted by a Gaussian function of their distance from the point under\r\n    consideration. This implies that the effective fraction of points\r\n    contributing to a given value is much smaller that ``frac``.\r\nnpoints: int, optional\r\n    Number of points to consider in the local approximation.\r\n    This is an alternative to using ``frac=npoints/x.size``.\r\nrescale: bool, optional\r\n    Rotate the ``(x, y)`` coordinates to make the ``x`` axis the axis of\r\n    maximum variance. Subsequently scale the coordinates to have equal\r\n    variance along both axes. Then perform the local regressions.\r\n    This is recommended when the distribution of points is elongated or\r\n    when the units are very different for the two axes.\r\nsigz: array_like with shape (n,)\r\n    1-sigma errors for the ``z`` values. If this keyword is used\r\n    the biweight fit is done assuming these errors. If this keyword\r\n    is *not* used, the biweight fit determines the errors in ``z``\r\n    from the scatter of the neighbouring points.\r\n\r\nOutput Parameters\r\n-----------------\r\n\r\nzout: array_like with shape (n,)\r\n    Vector of smoothed ``z`` values at the coordinates ``(x, y)``, or at\r\n    ``(xnew, ynew)`` if the latter are given as input. In the latter case\r\n    ``zout`` has shape ``(m,)``.\r\nwout: array_like with shape (n,)\r\n    Vector of biweights used in the local regressions. This can be used to\r\n    identify outliers: ``wout=0`` for outliers with deviations ``>4sigma``.\r\n\r\n    When passing as input the ``(xnew, ynew)`` coordinates, this output is\r\n    meaningless and is arbitrarily set to unity.\r\n\r\n###########################################################################\r\n\r\n\r\nLicense\r\n=======\r\n\r\nOther/Proprietary License\r\n\r\nCopyright (c) 2010-2022 Michele Cappellari\r\n\r\nThis software is provided as is without any warranty whatsoever.\r\nPermission to use, for non-commercial purposes is granted.\r\nPermission to modify for personal or internal use is granted,\r\nprovided this copyright and disclaimer are included in all \r\ncopies of the software. All other rights are reserved.\r\nIn particular, redistribution of the code is not allowed.\r\n\r\nChangelog\r\n=========\r\n\r\nV2.1.2: MC, Oxford, 31 January 2022\r\n    - Fixed incorrect results with integer input coordinates in both\r\n      ``loess_1d`` and ``loess_2d``. Thanks to Peter Weilbacher (aip.de) \r\n      for the report and fix.\r\n\r\nV2.1.0: MC, Oxford, 20 July 2021 \r\n    - Support output coordinates different from the input ones.\r\n    - Updated ``loess_1d_example`` and ``loess_2d_example``.\r\n       \r\nV2.0.6: MC, Oxford, 21 May 2018\r\n    - Dropped support for Python 2.7. \r\n\r\nV2.0.5: MC, Oxford, 18 January 2018\r\n    - Fixed FutureWarning in Numpy 1.14. \r\n\r\nV2.0.4: MC, Oxford, 18 April 2016\r\n    - Fixed deprecation warning in Numpy 1.11. \r\n\r\nV2.0.3: MC, Oxford, 8 December 2014\r\n    - Updated documentation. Minor polishing. \r\n\r\nV2.0.2: MC, Oxford, 3 November 2014\r\n    - Returns weights also when frac=0 for consistency.\r\n\r\nV2.0.1: MC, Oxford, 10 July 2014\r\n    - Removed SciPy dependency. \r\n   \r\nV2.0.0: MC, Oxford, 26 February 2014\r\n    - Translated from IDL into Python. \r\n\r\nV1.3.4: MC, Paranal, 7 November 2013\r\n    - Include SIGZ and WOUT keywords. Updated documentation.\r\n   \r\nV1.3.3: MC, Oxford, 31 October 2013\r\n    - Use CAP_POLYFIT_2D. \r\n    - Removed /QUARTIC keyword and replaced by DEGREE keyword like CAP_LOESS_1D.\r\n\r\nV1.3.2: MC, Oxford, 12 October 2013\r\n    - Test whether input (X,Y,Z) have the same size.\r\n    - Included NPOINTS keyword. \r\n\r\nV1.1.4: MC, Oxford, 16 May 2013\r\n    - Updated documentation. \r\n\r\nV1.1.3: MC, Oxford, 2 December 2011\r\n    - Check when outliers don't change to stop iteration.\r\n   \r\nV1.1.2: MC, Oxford, 25 July 2011\r\n    - Return values unchanged if FRAC=0. \r\n\r\nV1.1.1: MC, Oxford, 07 March 2011 \r\n    - Fix: use ABS() for proper computation of \"r\".\r\n   \r\nV1.1.0: MC, Vicenza, 30 December 2010 \r\n    - Rescale after rotating to axis of maximum variance.\r\n   \r\nV1.0.0: Michele Cappellari, Oxford, 15 December 2010\r\n    - Written and tested.\r\n   \r\n\r\n","description_content_type":"text/x-rst","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://purl.org/cappellari/software","keywords":"","license":"Other/Proprietary License","maintainer":"","maintainer_email":"","name":"loess","package_url":"https://pypi.org/project/loess/","platform":"","project_url":"https://pypi.org/project/loess/","project_urls":{"Homepage":"https://purl.org/cappellari/software"},"provides_extra":null,"release_url":"https://pypi.org/project/loess/2.1.2/","requires_dist":null,"requires_python":"","summary":"LOESS: smoothing via robust locally-weighted regression in one or two dimensions","version":"2.1.2","yanked":false,"yanked_reason":null},"last_serial":23288547,"releases":{"2.0.11":[{"comment_text":"","digests":{"blake2b_256":"beac5bf28c83f8437514d00150f01706d58cf5b1a3919eac5b3679fe2a644333","md5":"32b05a569dfdad3fddffdfbee3e1b1ef","sha256":"3b2e8867fc355da9509411a82f7a74500e8938a9ace27960950fa873d8f22618"},"downloads":-1,"filename":"loess-2.0.11.tar.gz","has_sig":false,"md5_digest":"32b05a569dfdad3fddffdfbee3e1b1ef","packagetype":"sdist","python_version":"source","requires_python":null,"size":7829,"upload_time":"2018-05-21T09:33:15","upload_time_iso_8601":"2018-05-21T09:33:15.759298Z","url":"https://files.pythonhosted.org/packages/be/ac/5bf28c83f8437514d00150f01706d58cf5b1a3919eac5b3679fe2a644333/loess-2.0.11.tar.gz","yanked":false,"yanked_reason":null}],"2.1.1":[{"comment_text":"","digests":{"blake2b_256":"e5f0a250ed5bc34376184be06774f54cd578b7ffb3613899e7ac56eb4700da68","md5":"8a515cfd123037e4970c577f67a5f673","sha256":"fdbc42da467b198d3bc257e00f57a3ba28f0d68ed671a49d3cf9debe46abaf50"},"downloads":-1,"filename":"loess-2.1.1.tar.gz","has_sig":false,"md5_digest":"8a515cfd123037e4970c577f67a5f673","packagetype":"sdist","python_version":"source","requires_python":null,"size":13398,"upload_time":"2021-07-21T09:30:40","upload_time_iso_8601":"2021-07-21T09:30:40.057651Z","url":"https://files.pythonhosted.org/packages/e5/f0/a250ed5bc34376184be06774f54cd578b7ffb3613899e7ac56eb4700da68/loess-2.1.1.tar.gz","yanked":false,"yanked_reason":null}],"2.1.2":[{"comment_text":"","digests":{"blake2b_256":"a791676f1839b94259e30ed85c962be6009c819e61b3fd29c64b34c0894e69b4","md5":"6f81031df074366e7e0e57144eb36847","sha256":"105f12daa0fdff5185855ae57c2d3f25420fb30b475ae3f4078843a5c61699b9"},"downloads":-1,"filename":"loess-2.1.2-py3-none-any.whl","has_sig":false,"md5_digest":"6f81031df074366e7e0e57144eb36847","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":18809,"upload_time":"2024-05-20T11:09:30","upload_time_iso_8601":"2024-05-20T11:09:30.639761Z","url":"https://files.pythonhosted.org/packages/a7/91/676f1839b94259e30ed85c962be6009c819e61b3fd29c64b34c0894e69b4/loess-2.1.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"0f182daac4f54c05aead16729a3e505e227fbedd140746c04eaeecd5e33f6c53","md5":"9eae2204f6d0b70e5b5afbbc7a7ab36d","sha256":"f0c1e83e70c5f9b95da635495c0ec555cf7c225186f7e6d978ed7c20d2f3828a"},"downloads":-1,"filename":"loess-2.1.2.tar.gz","has_sig":false,"md5_digest":"9eae2204f6d0b70e5b5afbbc7a7ab36d","packagetype":"sdist","python_version":"source","requires_python":null,"size":13192,"upload_time":"2022-01-31T17:24:50","upload_time_iso_8601":"2022-01-31T17:24:50.744683Z","url":"https://files.pythonhosted.org/packages/0f/18/2daac4f54c05aead16729a3e505e227fbedd140746c04eaeecd5e33f6c53/loess-2.1.2.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"a791676f1839b94259e30ed85c962be6009c819e61b3fd29c64b34c0894e69b4","md5":"6f81031df074366e7e0e57144eb36847","sha256":"105f12daa0fdff5185855ae57c2d3f25420fb30b475ae3f4078843a5c61699b9"},"downloads":-1,"filename":"loess-2.1.2-py3-none-any.whl","has_sig":false,"md5_digest":"6f81031df074366e7e0e57144eb36847","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":18809,"upload_time":"2024-05-20T11:09:30","upload_time_iso_8601":"2024-05-20T11:09:30.639761Z","url":"https://files.pythonhosted.org/packages/a7/91/676f1839b94259e30ed85c962be6009c819e61b3fd29c64b34c0894e69b4/loess-2.1.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"0f182daac4f54c05aead16729a3e505e227fbedd140746c04eaeecd5e33f6c53","md5":"9eae2204f6d0b70e5b5afbbc7a7ab36d","sha256":"f0c1e83e70c5f9b95da635495c0ec555cf7c225186f7e6d978ed7c20d2f3828a"},"downloads":-1,"filename":"loess-2.1.2.tar.gz","has_sig":false,"md5_digest":"9eae2204f6d0b70e5b5afbbc7a7ab36d","packagetype":"sdist","python_version":"source","requires_python":null,"size":13192,"upload_time":"2022-01-31T17:24:50","upload_time_iso_8601":"2022-01-31T17:24:50.744683Z","url":"https://files.pythonhosted.org/packages/0f/18/2daac4f54c05aead16729a3e505e227fbedd140746c04eaeecd5e33f6c53/loess-2.1.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
