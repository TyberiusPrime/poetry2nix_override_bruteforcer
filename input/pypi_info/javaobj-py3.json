{"info":{"author":"Volodymyr Buell","author_email":"vbuell@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 3 - Alpha","License :: OSI Approved :: Apache Software License","Operating System :: OS Independent","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.4","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Software Development :: Libraries :: Python Modules"],"description":"# javaobj-py3\r\n\r\n[![Latest Version](https://img.shields.io/pypi/v/javaobj-py3.svg)](https://pypi.python.org/pypi/javaobj-py3/)\r\n[![License](https://img.shields.io/pypi/l/javaobj-py3.svg)](https://pypi.python.org/pypi/javaobj-py3/)\r\n[![CI Build](https://github.com/tcalmant/python-javaobj/actions/workflows/build.yml/badge.svg?branch=master)](https://github.com/tcalmant/python-javaobj/actions/workflows/build.yml)\r\n[![Coveralls status](https://coveralls.io/repos/tcalmant/python-javaobj/badge.svg?branch=master)](https://coveralls.io/r/tcalmant/python-javaobj?branch=master)\r\n\r\n*python-javaobj* is a python library that provides functions for reading and\r\nwriting (writing is WIP currently) Java objects serialized or will be\r\ndeserialized by `ObjectOutputStream`. This form of object representation is a\r\nstandard data interchange format in Java world.\r\n\r\nThe `javaobj` module exposes an API familiar to users of the standard library\r\n`marshal`, `pickle` and `json` modules.\r\n\r\n## About this repository\r\n\r\nThis project is a fork of *python-javaobj* by Volodymyr Buell, originally from\r\n[Google Code](http://code.google.com/p/python-javaobj/) and now hosted on\r\n[GitHub](https://github.com/vbuell/python-javaobj).\r\n\r\nThis fork intends to work both on Python 2.7 and Python 3.4+.\r\n\r\n## Compatibility Warnings\r\n\r\n### New implementation of the parser\r\n\r\n| Implementations | Version  |\r\n|-----------------|----------|\r\n| `v1`, `v2`      | `0.4.0+` |\r\n\r\nSince version 0.4.0, two implementations of the parser are available:\r\n\r\n* `v1`: the *classic* implementation of `javaobj`, with a work in progress\r\n  implementation of a writer.\r\n* `v2`: the *new* implementation, which is a port of the Java project\r\n  [`jdeserialize`](https://github.com/frohoff/jdeserialize/),\r\n  with support of the object transformer (with a new API) and of the `numpy`\r\n  arrays loading.\r\n\r\nYou can use the `v1` parser to ensure that the behaviour of your scripts\r\ndoesn't change and to keep the ability to write down files.\r\n\r\nYou can use the `v2` parser for new developments\r\n*which won't require marshalling* and as a *fallback* if the `v1`\r\nfails to parse a file.\r\n\r\n### Object transformers V1\r\n\r\n| Implementations | Version  |\r\n|-----------------|----------|\r\n| `v1`            | `0.2.0+` |\r\n\r\nAs of version 0.2.0, the notion of *object transformer* from the original\r\nproject as been replaced by an *object creator*.\r\n\r\nThe *object creator* is called before the deserialization.\r\nThis allows to store the reference of the converted object before deserializing\r\nit, and avoids a mismatch between the referenced object and the transformed one.\r\n\r\n### Object transformers V2\r\n\r\n| Implementations | Version  |\r\n|-----------------|----------|\r\n| `v2`            | `0.4.0+` |\r\n\r\nThe `v2` implementation provides a new API for the object transformers.\r\nPlease look at the *Usage (V2)* section in this file.\r\n\r\n### Bytes arrays\r\n\r\n| Implementations | Version  |\r\n|-----------------|----------|\r\n| `v1`            | `0.2.3+` |\r\n\r\nAs of version 0.2.3, bytes arrays are loaded as a `bytes` object instead of\r\nan array of integers.\r\n\r\n### Custom Transformer\r\n\r\n| Implementations | Version  |\r\n|-----------------|----------|\r\n| `v2`            | `0.4.2+` |\r\n\r\nA new transformer API has been proposed to handle objects written with a custom\r\nJava writer.\r\nYou can find a sample usage in the *Custom Transformer* section in this file.\r\n\r\n## Features\r\n\r\n* Java object instance un-marshalling\r\n* Java classes un-marshalling\r\n* Primitive values un-marshalling\r\n* Automatic conversion of Java Collections to python ones\r\n  (`HashMap` => `dict`, `ArrayList` => `list`, etc.)\r\n* Basic marshalling of simple Java objects (`v1` implementation only)\r\n* Automatically uncompresses GZipped files\r\n\r\n## Requirements\r\n\r\n* Python >= 2.7 or Python >= 3.4\r\n* `enum34` and `typing` when using Python <= 3.4 (installable with `pip`)\r\n* Maven 2+ (for building test data of serialized objects.\r\n  You can skip it if you do not plan to run `tests.py`)\r\n\r\n## Usage (V1 implementation)\r\n\r\nUn-marshalling of Java serialised object:\r\n\r\n```python\r\nimport javaobj\r\n\r\nwith open(\"obj5.ser\", \"rb\") as fd:\r\n    jobj = fd.read()\r\n\r\npobj = javaobj.loads(jobj)\r\nprint(pobj)\r\n```\r\n\r\nOr, you can use `JavaObjectUnmarshaller` object directly:\r\n\r\n```python\r\nimport javaobj\r\n\r\nwith open(\"objCollections.ser\", \"rb\") as fd:\r\n    marshaller = javaobj.JavaObjectUnmarshaller(fd)\r\n    pobj = marshaller.readObject()\r\n\r\n    print(pobj.value, \"should be\", 17)\r\n    print(pobj.next, \"should be\", True)\r\n\r\n    pobj = marshaller.readObject()\r\n```\r\n\r\n**Note:** The objects and methods provided by `javaobj` module are shortcuts\r\nto the `javaobj.v1` package, for Compatibility purpose.\r\nIt is **recommended** to explicitly import methods and classes from the `v1`\r\n(or `v2`) package when writing new code, in order to be sure that your code\r\nwon't need import updates in the future.\r\n\r\n\r\n## Usage (V2 implementation)\r\n\r\nThe following methods are provided by the `javaobj.v2` package:\r\n\r\n* `load(fd, *transformers, use_numpy_arrays=False)`:\r\n  Parses the content of the given file descriptor, opened in binary mode (`rb`).\r\n  The method accepts a list of custom object transformers. The default object\r\n  transformer is always added to the list.\r\n\r\n  The `use_numpy_arrays` flag indicates that the arrays of primitive type\r\n  elements must be loaded using `numpy` (if available) instead of using the\r\n  standard parsing technic.\r\n\r\n* `loads(bytes, *transformers, use_numpy_arrays=False)`:\r\n  This the a shortcut to the `load()` method, providing it the binary data\r\n  using a `BytesIO` object.\r\n\r\n**Note:** The V2 parser doesn't have the marshalling capability.\r\n\r\nSample usage:\r\n\r\n```python\r\nimport javaobj.v2 as javaobj\r\n\r\nwith open(\"obj5.ser\", \"rb\") as fd:\r\n    pobj = javaobj.load(fd)\r\n\r\nprint(pobj.dump())\r\n```\r\n\r\n### Object Transformer\r\n\r\nAn object transformer can be called during the parsing of a Java object\r\ninstance or while loading an array.\r\n\r\nThe Java object instance parsing works in two main steps:\r\n\r\n1. The transformer is called to create an instance of a bean that inherits\r\n   `JavaInstance`.\r\n1. The latter bean is then called:\r\n\r\n   * When the object is written with a custom block data\r\n   * After the fields and annotations have been parsed, to update the content\r\n   of the Python bean.\r\n\r\nHere is an example for a Java `HashMap` object. You can look at the code of\r\nthe `javaobj.v2.transformer` module to see the whole implementation.\r\n\r\n```python\r\nclass JavaMap(dict, javaobj.v2.beans.JavaInstance):\r\n    \"\"\"\r\n    Inherits from dict for Python usage, JavaInstance for parsing purpose\r\n    \"\"\"\r\n    def __init__(self):\r\n        # Don't forget to call both constructors\r\n        dict.__init__(self)\r\n        JavaInstance.__init__(self)\r\n\r\n    def load_from_blockdata(self, parser, reader, indent=0):\r\n    \"\"\"\r\n    Reads content stored in a block data.\r\n\r\n    This method is called only if the class description has both the\r\n    `SC_EXTERNALIZABLE` and `SC_BLOCK_DATA` flags set.\r\n\r\n    The stream parsing will stop and fail if this method returns False.\r\n\r\n    :param parser: The JavaStreamParser in use\r\n    :param reader: The underlying data stream reader\r\n    :param indent: Indentation to use in logs\r\n    :return: True on success, False on error\r\n    \"\"\"\r\n    # This kind of class is not supposed to have the SC_BLOCK_DATA flag set\r\n    return False\r\n\r\n    def load_from_instance(self, indent=0):\r\n        # type: (int) -> bool\r\n        \"\"\"\r\n        Load content from the parsed instance object.\r\n\r\n        This method is called after the block data (if any), the fields and\r\n        the annotations have been loaded.\r\n\r\n        :param indent: Indentation to use while logging\r\n        :return: True on success (currently ignored)\r\n        \"\"\"\r\n        # Maps have their content in their annotations\r\n        for cd, annotations in self.annotations.items():\r\n            # Annotations are associated to their definition class\r\n            if cd.name == \"java.util.HashMap\":\r\n                # We are in the annotation created by the handled class\r\n                # Group annotation elements 2 by 2\r\n                # (storage is: key, value, key, value, ...)\r\n                args = [iter(annotations[1:])] * 2\r\n                for key, value in zip(*args):\r\n                    self[key] = value\r\n\r\n                # Job done\r\n                return True\r\n\r\n        # Couldn't load the data\r\n        return False\r\n\r\nclass MapObjectTransformer(javaobj.v2.api.ObjectTransformer):\r\n    \"\"\"\r\n    Creates a JavaInstance object with custom loading methods for the\r\n    classes it can handle\r\n    \"\"\"\r\n    def create_instance(self, classdesc):\r\n        # type: (JavaClassDesc) -> Optional[JavaInstance]\r\n        \"\"\"\r\n        Transforms a parsed Java object into a Python object\r\n\r\n        :param classdesc: The description of a Java class\r\n        :return: The Python form of the object, or the original JavaObject\r\n        \"\"\"\r\n        if classdesc.name == \"java.util.HashMap\":\r\n            # We can handle this class description\r\n            return JavaMap()\r\n        else:\r\n            # Return None if the class is not handled\r\n            return None\r\n```\r\n\r\n### Custom Object Transformer\r\n\r\nThe custom transformer is called when the class is not handled by the default\r\nobject transformer.\r\nA custom object transformer still inherits from the `ObjectTransformer` class,\r\nbut it also implements the `load_custom_writeObject` method.\r\n\r\nThe sample given here is used in the unit tests.\r\n\r\n#### Java sample\r\n\r\nOn the Java side, we create various classes and write them as we wish:\r\n\r\n```java\r\nclass CustomClass implements Serializable {\r\n\r\n    private static final long serialVersionUID = 1;\r\n\r\n    public void start(ObjectOutputStream out) throws Exception {\r\n        this.writeObject(out);\r\n    }\r\n\r\n    private void writeObject(ObjectOutputStream out) throws IOException {\r\n        CustomWriter custom = new CustomWriter(42);\r\n        out.writeObject(custom);\r\n        out.flush();\r\n    }\r\n}\r\n\r\nclass RandomChild extends Random {\r\n\r\n    private static final long serialVersionUID = 1;\r\n    private int num = 1;\r\n    private double doub = 4.5;\r\n\r\n    RandomChild(int seed) {\r\n        super(seed);\r\n    }\r\n}\r\n\r\nclass CustomWriter implements Serializable {\r\n    protected RandomChild custom_obj;\r\n\r\n    CustomWriter(int seed) {\r\n        custom_obj = new RandomChild(seed);\r\n    }\r\n\r\n    private static final long serialVersionUID = 1;\r\n    private static final int CURRENT_SERIAL_VERSION = 0;\r\n\r\n    private void writeObject(ObjectOutputStream out) throws IOException {\r\n        out.writeInt(CURRENT_SERIAL_VERSION);\r\n        out.writeObject(custom_obj);\r\n    }\r\n}\r\n```\r\n\r\nAn here is a sample writing of that kind of object:\r\n\r\n```java\r\nObjectOutputStream oos = new ObjectOutputStream(\r\n    new FileOutputStream(\"custom_objects.ser\"));\r\nCustomClass writer = new CustomClass();\r\nwriter.start(oos);\r\noos.flush();\r\noos.close();\r\n```\r\n\r\n#### Python sample\r\n\r\nOn the Python side, the first step is to define the custom transformers.\r\nThey are children of the `javaobj.v2.transformers.ObjectTransformer` class.\r\n\r\n```python\r\nclass BaseTransformer(javaobj.v2.transformers.ObjectTransformer):\r\n    \"\"\"\r\n    Creates a JavaInstance object with custom loading methods for the\r\n    classes it can handle\r\n    \"\"\"\r\n\r\n    def __init__(self, handled_classes=None):\r\n        self.instance = None\r\n        self.handled_classes = handled_classes or {}\r\n\r\n    def create_instance(self, classdesc):\r\n        \"\"\"\r\n        Transforms a parsed Java object into a Python object\r\n\r\n        :param classdesc: The description of a Java class\r\n        :return: The Python form of the object, or the original JavaObject\r\n        \"\"\"\r\n        if classdesc.name in self.handled_classes:\r\n            self.instance = self.handled_classes[classdesc.name]()\r\n            return self.instance\r\n\r\n        return None\r\n\r\nclass RandomChildTransformer(BaseTransformer):\r\n    def __init__(self):\r\n        super(RandomChildTransformer, self).__init__(\r\n            {\"RandomChild\": RandomChildInstance}\r\n        )\r\n\r\nclass CustomWriterTransformer(BaseTransformer):\r\n    def __init__(self):\r\n        super(CustomWriterTransformer, self).__init__(\r\n            {\"CustomWriter\": CustomWriterInstance}\r\n        )\r\n\r\nclass JavaRandomTransformer(BaseTransformer):\r\n    def __init__(self):\r\n        super(JavaRandomTransformer, self).__init__()\r\n        self.name = \"java.util.Random\"\r\n        self.field_names = [\"haveNextNextGaussian\", \"nextNextGaussian\", \"seed\"]\r\n        self.field_types = [\r\n            javaobj.v2.beans.FieldType.BOOLEAN,\r\n            javaobj.v2.beans.FieldType.DOUBLE,\r\n            javaobj.v2.beans.FieldType.LONG,\r\n        ]\r\n\r\n    def load_custom_writeObject(self, parser, reader, name):\r\n        if name != self.name:\r\n            return None\r\n\r\n        fields = []\r\n        values = []\r\n        for f_name, f_type in zip(self.field_names, self.field_types):\r\n            values.append(parser._read_field_value(f_type))\r\n            fields.append(javaobj.beans.JavaField(f_type, f_name))\r\n\r\n        class_desc = javaobj.beans.JavaClassDesc(\r\n            javaobj.beans.ClassDescType.NORMALCLASS\r\n        )\r\n        class_desc.name = self.name\r\n        class_desc.desc_flags = javaobj.beans.ClassDataType.EXTERNAL_CONTENTS\r\n        class_desc.fields = fields\r\n        class_desc.field_data = values\r\n        return class_desc\r\n```\r\n\r\nSecond step is defining the representation of the instances, where the real\r\nobject loading occurs. Those classes inherit from\r\n`javaobj.v2.beans.JavaInstance`.\r\n\r\n```python\r\nclass CustomWriterInstance(javaobj.v2.beans.JavaInstance):\r\n    def __init__(self):\r\n        javaobj.v2.beans.JavaInstance.__init__(self)\r\n\r\n    def load_from_instance(self):\r\n        \"\"\"\r\n        Updates the content of this instance\r\n        from its parsed fields and annotations\r\n        :return: True on success, False on error\r\n        \"\"\"\r\n        if self.classdesc and self.classdesc in self.annotations:\r\n            # Here, we known there is something written before the fields,\r\n            # even if it's not declared in the class description\r\n            fields = [\"int_not_in_fields\"] + self.classdesc.fields_names\r\n            raw_data = self.annotations[self.classdesc]\r\n            int_not_in_fields = struct.unpack(\r\n                \">i\", BytesIO(raw_data[0].data).read(4)\r\n            )[0]\r\n            custom_obj = raw_data[1]\r\n            values = [int_not_in_fields, custom_obj]\r\n            self.field_data = dict(zip(fields, values))\r\n            return True\r\n\r\n        return False\r\n\r\n\r\nclass RandomChildInstance(javaobj.v2.beans.JavaInstance):\r\n    def load_from_instance(self):\r\n        \"\"\"\r\n        Updates the content of this instance\r\n        from its parsed fields and annotations\r\n        :return: True on success, False on error\r\n        \"\"\"\r\n        if self.classdesc and self.classdesc in self.field_data:\r\n            fields = self.classdesc.fields_names\r\n            values = [\r\n                self.field_data[self.classdesc][self.classdesc.fields[i]]\r\n                for i in range(len(fields))\r\n            ]\r\n            self.field_data = dict(zip(fields, values))\r\n            if (\r\n                self.classdesc.super_class\r\n                and self.classdesc.super_class in self.annotations\r\n            ):\r\n                super_class = self.annotations[self.classdesc.super_class][0]\r\n                self.annotations = dict(\r\n                    zip(super_class.fields_names, super_class.field_data)\r\n                )\r\n            return True\r\n\r\n        return False\r\n```\r\n\r\nFinally we can use the transformers in the loading process.\r\nNote that even if it is not explicitly given, the `DefaultObjectTransformer`\r\nwill be also be used, as it is added automatically by `javaobj` if it is\r\nmissing from the given list.\r\n\r\n```python\r\n# Load the object using those transformers\r\ntransformers = [\r\n    CustomWriterTransformer(),\r\n    RandomChildTransformer(),\r\n    JavaRandomTransformer()\r\n]\r\npobj = javaobj.loads(\"custom_objects.ser\", *transformers)\r\n\r\n# Here we show a field that isn't visible from the class description\r\n# The field belongs to the class but it's not serialized by default because\r\n# it's static. See: https://stackoverflow.com/a/16477421/12621168\r\nprint(pobj.field_data[\"int_not_in_fields\"])\r\n```\r\n","description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/tcalmant/python-javaobj","keywords":"python java marshalling serialization","license":"Apache License 2.0","maintainer":"Thomas Calmant","maintainer_email":"thomas.calmant@gmail.com","name":"javaobj-py3","package_url":"https://pypi.org/project/javaobj-py3/","platform":null,"project_url":"https://pypi.org/project/javaobj-py3/","project_urls":{"Homepage":"https://github.com/tcalmant/python-javaobj"},"provides_extra":null,"release_url":"https://pypi.org/project/javaobj-py3/0.4.4/","requires_dist":["enum34; python_version <= \"3.4\"","typing; python_version <= \"3.4\""],"requires_python":null,"summary":"Module for serializing and de-serializing Java objects.","version":"0.4.4","yanked":false,"yanked_reason":null},"last_serial":22658634,"releases":{"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"862b0fe0ad140ec0e69e8e2d55658a717751f0d9025be868e07c6bf069de2d72","md5":"e89f987fd2f0eddb6d646c0a5d8a1624","sha256":"320193e7e1e976b16a6899df8b804e349030999ea9e0c7c327025d46bd03c5a6"},"downloads":-1,"filename":"javaobj-py3-0.1.1.tar.gz","has_sig":false,"md5_digest":"e89f987fd2f0eddb6d646c0a5d8a1624","packagetype":"sdist","python_version":"source","requires_python":null,"size":9767,"upload_time":"2013-12-25T16:09:02","upload_time_iso_8601":"2013-12-25T16:09:02.291160Z","url":"https://files.pythonhosted.org/packages/86/2b/0fe0ad140ec0e69e8e2d55658a717751f0d9025be868e07c6bf069de2d72/javaobj-py3-0.1.1.tar.gz","yanked":false,"yanked_reason":null}],"0.1.2":[],"0.1.3":[{"comment_text":"","digests":{"blake2b_256":"607ec2560f9d76d09e4d550082fcc1034b04b6b97001d720e7179b2d1d7e9c24","md5":"da95e4f7c636378969c01424fc0adaa1","sha256":"27446ed293fa4ddc4c35a1d6c1f8586cf4f6e5cac865d7cb01b67711f926d4c6"},"downloads":-1,"filename":"javaobj_py3-0.1.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"da95e4f7c636378969c01424fc0adaa1","packagetype":"bdist_wheel","python_version":"3.5","requires_python":null,"size":13984,"upload_time":"2016-04-22T18:10:44","upload_time_iso_8601":"2016-04-22T18:10:44.768657Z","url":"https://files.pythonhosted.org/packages/60/7e/c2560f9d76d09e4d550082fcc1034b04b6b97001d720e7179b2d1d7e9c24/javaobj_py3-0.1.3-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3ab7edfe2338af7fc3185cd8d036ffdc4bb567effee9ec660ee20fbd1a177f83","md5":"544153a03b5beff18de41337b42fa372","sha256":"3555b09f42f3a6cdaa975094d97534be086a1b2b264b8900c3c694d58f2f42e0"},"downloads":-1,"filename":"javaobj-py3-0.1.3.zip","has_sig":false,"md5_digest":"544153a03b5beff18de41337b42fa372","packagetype":"sdist","python_version":"source","requires_python":null,"size":16016,"upload_time":"2016-04-22T18:10:14","upload_time_iso_8601":"2016-04-22T18:10:14.803825Z","url":"https://files.pythonhosted.org/packages/3a/b7/edfe2338af7fc3185cd8d036ffdc4bb567effee9ec660ee20fbd1a177f83/javaobj-py3-0.1.3.zip","yanked":false,"yanked_reason":null}],"0.1.4":[{"comment_text":"","digests":{"blake2b_256":"7c5ed0397c97988781f9f37630a3d8d811e5f7cd6164c8bc2a90a7ff009df2d0","md5":"a992006e226432a5d6520a7a9a1f59d4","sha256":"7a956964f94941e530ea2f849abbaab22d5ff861a8604397966458d667fb79cb"},"downloads":-1,"filename":"javaobj_py3-0.1.4-py2.py3-none-any.whl","has_sig":false,"md5_digest":"a992006e226432a5d6520a7a9a1f59d4","packagetype":"bdist_wheel","python_version":"3.5","requires_python":null,"size":14583,"upload_time":"2016-04-23T15:33:43","upload_time_iso_8601":"2016-04-23T15:33:43.822801Z","url":"https://files.pythonhosted.org/packages/7c/5e/d0397c97988781f9f37630a3d8d811e5f7cd6164c8bc2a90a7ff009df2d0/javaobj_py3-0.1.4-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"7e7146d0ab57bed696be911c850308d2a6d19536a3624050e083d685e5040499","md5":"ae0a194c3a7e10a3239fc0e55919d32f","sha256":"c91235dac4791534e8c40e6967cfd705bd67954950ab397e4ae2b964fcd2dcbe"},"downloads":-1,"filename":"javaobj-py3-0.1.4.zip","has_sig":false,"md5_digest":"ae0a194c3a7e10a3239fc0e55919d32f","packagetype":"sdist","python_version":"source","requires_python":null,"size":16759,"upload_time":"2016-04-23T15:33:00","upload_time_iso_8601":"2016-04-23T15:33:00.713005Z","url":"https://files.pythonhosted.org/packages/7e/71/46d0ab57bed696be911c850308d2a6d19536a3624050e083d685e5040499/javaobj-py3-0.1.4.zip","yanked":false,"yanked_reason":null}],"0.2.0":[{"comment_text":"","digests":{"blake2b_256":"0eb6cb81c152a2240aa6bfc0bd5fc69650838f31151e54c0a94e5a5f78800df1","md5":"abf696b323db44a61eded7b646226125","sha256":"b3162c51ed990fdd40adc78388a5684a7de7e7c6d9cafa62c3c70244aa825521"},"downloads":-1,"filename":"javaobj_py3-0.2.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"abf696b323db44a61eded7b646226125","packagetype":"bdist_wheel","python_version":"3.5","requires_python":null,"size":14672,"upload_time":"2016-05-16T11:43:20","upload_time_iso_8601":"2016-05-16T11:43:20.642241Z","url":"https://files.pythonhosted.org/packages/0e/b6/cb81c152a2240aa6bfc0bd5fc69650838f31151e54c0a94e5a5f78800df1/javaobj_py3-0.2.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b72f71df16eb359ce3ce5645dd4cb233cb187cc2fe97aa0702e5e06003229fdc","md5":"335b372ed6db124849fbd67bebfae37c","sha256":"813ef56ceb2047229bb088a71c0a612ed26ae603f90e9a94fdc493a392cbfe2b"},"downloads":-1,"filename":"javaobj-py3-0.2.0.zip","has_sig":false,"md5_digest":"335b372ed6db124849fbd67bebfae37c","packagetype":"sdist","python_version":"source","requires_python":null,"size":17042,"upload_time":"2016-05-16T11:42:13","upload_time_iso_8601":"2016-05-16T11:42:13.484569Z","url":"https://files.pythonhosted.org/packages/b7/2f/71df16eb359ce3ce5645dd4cb233cb187cc2fe97aa0702e5e06003229fdc/javaobj-py3-0.2.0.zip","yanked":false,"yanked_reason":null}],"0.2.1":[{"comment_text":"","digests":{"blake2b_256":"6f9a8ba1897b01f4059658390bb660e1fd6a72a81083e2c6dd1fe189ce08e46b","md5":"c46347808a80a6111381bb208cce6eae","sha256":"8290c977f08eb840f7663d252d760a81189f253ac365ca15346319d975e57cd3"},"downloads":-1,"filename":"javaobj_py3-0.2.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"c46347808a80a6111381bb208cce6eae","packagetype":"bdist_wheel","python_version":"3.5","requires_python":null,"size":14681,"upload_time":"2016-08-23T17:21:30","upload_time_iso_8601":"2016-08-23T17:21:30.111430Z","url":"https://files.pythonhosted.org/packages/6f/9a/8ba1897b01f4059658390bb660e1fd6a72a81083e2c6dd1fe189ce08e46b/javaobj_py3-0.2.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"5dbdced9750f85041b9f305495aeee47dc350c7ec9b45b1984a8212f2d75d3e4","md5":"c7e6956846386c890208acc98ae07671","sha256":"ad61da349d599afecda190aca4718aa1bb9a20823ed70587da5b7a0691e94f4c"},"downloads":-1,"filename":"javaobj-py3-0.2.1.zip","has_sig":false,"md5_digest":"c7e6956846386c890208acc98ae07671","packagetype":"sdist","python_version":"source","requires_python":null,"size":17056,"upload_time":"2016-08-23T17:21:27","upload_time_iso_8601":"2016-08-23T17:21:27.533830Z","url":"https://files.pythonhosted.org/packages/5d/bd/ced9750f85041b9f305495aeee47dc350c7ec9b45b1984a8212f2d75d3e4/javaobj-py3-0.2.1.zip","yanked":false,"yanked_reason":null}],"0.2.2":[{"comment_text":"","digests":{"blake2b_256":"4e3f733fa59dcb386d8e9aef91da2b45e24fa2385304d91d84d3b0041eecf35e","md5":"dc2f0baa98382f9c336158ee2ce9faab","sha256":"f8a72748c3c8c980072178df1e9046438660efd7d3e884cfb6392835289b100d"},"downloads":-1,"filename":"javaobj_py3-0.2.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"dc2f0baa98382f9c336158ee2ce9faab","packagetype":"bdist_wheel","python_version":"3.5","requires_python":null,"size":15431,"upload_time":"2016-09-09T12:01:37","upload_time_iso_8601":"2016-09-09T12:01:37.409568Z","url":"https://files.pythonhosted.org/packages/4e/3f/733fa59dcb386d8e9aef91da2b45e24fa2385304d91d84d3b0041eecf35e/javaobj_py3-0.2.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"9596c8cb5ba643390df23a24adb9ae5713d7e6966fdc8a96d7be03664527f677","md5":"462eb89b01efb26dc0debd1f42d99058","sha256":"870c53eee0c2f40aee834d43a4ff444285bf534c032c8ddaab7bfa62a65630f9"},"downloads":-1,"filename":"javaobj-py3-0.2.2.tar.gz","has_sig":false,"md5_digest":"462eb89b01efb26dc0debd1f42d99058","packagetype":"sdist","python_version":"source","requires_python":null,"size":13870,"upload_time":"2016-09-09T12:01:34","upload_time_iso_8601":"2016-09-09T12:01:34.876332Z","url":"https://files.pythonhosted.org/packages/95/96/c8cb5ba643390df23a24adb9ae5713d7e6966fdc8a96d7be03664527f677/javaobj-py3-0.2.2.tar.gz","yanked":false,"yanked_reason":null}],"0.2.3":[{"comment_text":"","digests":{"blake2b_256":"d16ea1f034c3b2c3a2086c8d1240de955ecd8fabd6e43e1eccf263ccc5cdb1b6","md5":"0f9303258050d3536865832fa181e9a9","sha256":"66131ee6bc197eb06fe0a3018eef502a6264e7852a6146392fed5f8f8e703470"},"downloads":-1,"filename":"javaobj_py3-0.2.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"0f9303258050d3536865832fa181e9a9","packagetype":"bdist_wheel","python_version":"3.5","requires_python":null,"size":15986,"upload_time":"2016-11-15T16:16:23","upload_time_iso_8601":"2016-11-15T16:16:23.779116Z","url":"https://files.pythonhosted.org/packages/d1/6e/a1f034c3b2c3a2086c8d1240de955ecd8fabd6e43e1eccf263ccc5cdb1b6/javaobj_py3-0.2.3-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"bc15965a6cb0695562ef9173a98c2f2f29977cb723783227d575e75329707e48","md5":"1e3f02b5c4c0853d653b7b8590d9ed2b","sha256":"1dea6be0848c58013d92d8249ef6bc8688bbff7f13c78e02dbf08a449b4c0885"},"downloads":-1,"filename":"javaobj-py3-0.2.3.tar.gz","has_sig":false,"md5_digest":"1e3f02b5c4c0853d653b7b8590d9ed2b","packagetype":"sdist","python_version":"source","requires_python":null,"size":14345,"upload_time":"2016-11-15T16:16:21","upload_time_iso_8601":"2016-11-15T16:16:21.087624Z","url":"https://files.pythonhosted.org/packages/bc/15/965a6cb0695562ef9173a98c2f2f29977cb723783227d575e75329707e48/javaobj-py3-0.2.3.tar.gz","yanked":false,"yanked_reason":null}],"0.2.4":[{"comment_text":"","digests":{"blake2b_256":"6a7d1979d67bb8f6c5babb8dda0cb79d6d4663ef9a039c193b5adcc787a86285","md5":"86abf14d06c518cbdba88e6166501fc1","sha256":"33212878868c163ff5931b509a9fde033e0e931188bab6be70d698c2613e9dc1"},"downloads":-1,"filename":"javaobj_py3-0.2.4-py2.py3-none-any.whl","has_sig":false,"md5_digest":"86abf14d06c518cbdba88e6166501fc1","packagetype":"bdist_wheel","python_version":"3.6","requires_python":null,"size":16207,"upload_time":"2018-01-21T14:39:19","upload_time_iso_8601":"2018-01-21T14:39:19.932651Z","url":"https://files.pythonhosted.org/packages/6a/7d/1979d67bb8f6c5babb8dda0cb79d6d4663ef9a039c193b5adcc787a86285/javaobj_py3-0.2.4-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"119aa247aefa0383c3fff8c7f96b3b61a82e96c171ef4443e7940bd875a2e362","md5":"f669bb8099380e3dd84db3d542aa5b68","sha256":"b8b0d310fd97e1c7914d7911ee9d3f4b3d84d2a674aa95a4b0da3d8f155fc1bb"},"downloads":-1,"filename":"javaobj-py3-0.2.4.tar.gz","has_sig":false,"md5_digest":"f669bb8099380e3dd84db3d542aa5b68","packagetype":"sdist","python_version":"source","requires_python":null,"size":14565,"upload_time":"2018-01-21T14:39:18","upload_time_iso_8601":"2018-01-21T14:39:18.122792Z","url":"https://files.pythonhosted.org/packages/11/9a/a247aefa0383c3fff8c7f96b3b61a82e96c171ef4443e7940bd875a2e362/javaobj-py3-0.2.4.tar.gz","yanked":false,"yanked_reason":null}],"0.3.0":[{"comment_text":"","digests":{"blake2b_256":"4168145045d3a54029865ed1f33bd106e08fda165bae6eec0887d65331d792cb","md5":"cb83b4f3999540ceb1b91b3e2d6db4d7","sha256":"24c12f7af6bdc4a88f4f64cc2211cec610b1f97b583fa849856da98d33a0c80a"},"downloads":-1,"filename":"javaobj_py3-0.3.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"cb83b4f3999540ceb1b91b3e2d6db4d7","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":36704,"upload_time":"2019-04-26T13:23:11","upload_time_iso_8601":"2019-04-26T13:23:11.370872Z","url":"https://files.pythonhosted.org/packages/41/68/145045d3a54029865ed1f33bd106e08fda165bae6eec0887d65331d792cb/javaobj_py3-0.3.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f1d85bc6c1939d2df26c8986c2446a21943cdb7c1ab621f690d6786893156010","md5":"1c6189a0d9aef51d74bfc52cd2953991","sha256":"a57469e4f0d0eeba7482ad9839595db6e99ca4ac6630a4c8064dda75a2182549"},"downloads":-1,"filename":"javaobj-py3-0.3.0.tar.gz","has_sig":false,"md5_digest":"1c6189a0d9aef51d74bfc52cd2953991","packagetype":"sdist","python_version":"source","requires_python":null,"size":20224,"upload_time":"2019-04-26T13:23:14","upload_time_iso_8601":"2019-04-26T13:23:14.142779Z","url":"https://files.pythonhosted.org/packages/f1/d8/5bc6c1939d2df26c8986c2446a21943cdb7c1ab621f690d6786893156010/javaobj-py3-0.3.0.tar.gz","yanked":false,"yanked_reason":null}],"0.4.0":[{"comment_text":"","digests":{"blake2b_256":"f407878d2832327825849b0b55882c1b31b6d01ac9fd23d69af3116a027d2335","md5":"3a37f50e50e49609f017ae45eaf70c58","sha256":"bc58364ef78be2c1c4dcff6eed405836540c5151c45e1df7c345328a9d205181"},"downloads":-1,"filename":"javaobj_py3-0.4.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"3a37f50e50e49609f017ae45eaf70c58","packagetype":"bdist_wheel","python_version":"3.7","requires_python":null,"size":53258,"upload_time":"2019-12-30T15:29:22","upload_time_iso_8601":"2019-12-30T15:29:22.468345Z","url":"https://files.pythonhosted.org/packages/f4/07/878d2832327825849b0b55882c1b31b6d01ac9fd23d69af3116a027d2335/javaobj_py3-0.4.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"818d0c6ba1ebdd47e9b59d14853a3980efad11d81accd21a4734ffea6b37dda3","md5":"aa0f3e299e39dce771a682944a8190b2","sha256":"10567a00a5715dba390b24c40a76ac9b4eb88f729be3ec8dbf265475d9e62bea"},"downloads":-1,"filename":"javaobj-py3-0.4.0.tar.gz","has_sig":false,"md5_digest":"aa0f3e299e39dce771a682944a8190b2","packagetype":"sdist","python_version":"source","requires_python":null,"size":38508,"upload_time":"2019-12-30T15:29:19","upload_time_iso_8601":"2019-12-30T15:29:19.958944Z","url":"https://files.pythonhosted.org/packages/81/8d/0c6ba1ebdd47e9b59d14853a3980efad11d81accd21a4734ffea6b37dda3/javaobj-py3-0.4.0.tar.gz","yanked":false,"yanked_reason":null}],"0.4.0.1":[{"comment_text":"","digests":{"blake2b_256":"5e7abfbd6573cb01087e3482ef6cdae9a712e8dd9702a09ddbcf9761a2871619","md5":"15bea612f857ef336aeb9b302b99e23d","sha256":"8cd8f08f3ee717fab0a255cafee278e8294db1dc90ab0528d5e1fa190b8c1dda"},"downloads":-1,"filename":"javaobj_py3-0.4.0.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"15bea612f857ef336aeb9b302b99e23d","packagetype":"bdist_wheel","python_version":"3.7","requires_python":null,"size":53302,"upload_time":"2020-01-01T18:02:19","upload_time_iso_8601":"2020-01-01T18:02:19.769699Z","url":"https://files.pythonhosted.org/packages/5e/7a/bfbd6573cb01087e3482ef6cdae9a712e8dd9702a09ddbcf9761a2871619/javaobj_py3-0.4.0.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"19b3724201d30a5503bdf3c8a4f699298e513580007b8095a63e7b37f057577f","md5":"352fe0df9336b8699ad0799ef152da6b","sha256":"18c44cfaa214813784a823432b4ab9829c9626b2b00072011627b4008b0067cd"},"downloads":-1,"filename":"javaobj-py3-0.4.0.1.tar.gz","has_sig":false,"md5_digest":"352fe0df9336b8699ad0799ef152da6b","packagetype":"sdist","python_version":"source","requires_python":null,"size":42505,"upload_time":"2020-01-01T18:02:17","upload_time_iso_8601":"2020-01-01T18:02:17.191806Z","url":"https://files.pythonhosted.org/packages/19/b3/724201d30a5503bdf3c8a4f699298e513580007b8095a63e7b37f057577f/javaobj-py3-0.4.0.1.tar.gz","yanked":false,"yanked_reason":null}],"0.4.1":[{"comment_text":"","digests":{"blake2b_256":"c7b272cb750ae637b6844cc38d318ecd500b8666188de98d4c4ebae90d29f9e3","md5":"92a8e48461f27758e963d3b9a5d46785","sha256":"4f6331b175196f6f37d43dd67cf8eab3a2bf5f8e0fbc4ded59948081189afce8"},"downloads":-1,"filename":"javaobj_py3-0.4.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"92a8e48461f27758e963d3b9a5d46785","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":67716,"upload_time":"2020-04-16T19:56:13","upload_time_iso_8601":"2020-04-16T19:56:13.626216Z","url":"https://files.pythonhosted.org/packages/c7/b2/72cb750ae637b6844cc38d318ecd500b8666188de98d4c4ebae90d29f9e3/javaobj_py3-0.4.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"cab0dec8bf1496a3d6a3138a24657cf8832f5fbde4191f58740c95040169ca1c","md5":"47632071c3c3ca14b6c42f2a4e2e1309","sha256":"419ff99543469e68149f875abb0db5251cecd350c03d2bfb4c94a5796f1cbc14"},"downloads":-1,"filename":"javaobj-py3-0.4.1.tar.gz","has_sig":false,"md5_digest":"47632071c3c3ca14b6c42f2a4e2e1309","packagetype":"sdist","python_version":"source","requires_python":null,"size":47553,"upload_time":"2020-04-16T19:56:15","upload_time_iso_8601":"2020-04-16T19:56:15.142477Z","url":"https://files.pythonhosted.org/packages/ca/b0/dec8bf1496a3d6a3138a24657cf8832f5fbde4191f58740c95040169ca1c/javaobj-py3-0.4.1.tar.gz","yanked":false,"yanked_reason":null}],"0.4.2":[{"comment_text":"","digests":{"blake2b_256":"676302c0b62e9a123ca7243c5d451793c900fb0f583f2a044eec8fc08e9c95b5","md5":"74b1cb78371d78a72a15411c44d26c0f","sha256":"0ad81b9fc149feca2789b4706ca13e263b5da17407aa18a376ccc3f1dc348e96"},"downloads":-1,"filename":"javaobj_py3-0.4.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"74b1cb78371d78a72a15411c44d26c0f","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":56756,"upload_time":"2021-02-02T19:50:26","upload_time_iso_8601":"2021-02-02T19:50:26.933490Z","url":"https://files.pythonhosted.org/packages/67/63/02c0b62e9a123ca7243c5d451793c900fb0f583f2a044eec8fc08e9c95b5/javaobj_py3-0.4.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e42798fd5d64374e3b6f5e4db3dea41add31534d85a87227e48f113037fc6a9f","md5":"3ee511c46217f36f3aa2dad43f1173fe","sha256":"ed3b1ffcfd39f165729cb53587cca02ab0bfa4c332c837a92d5ffe6aef5c8010"},"downloads":-1,"filename":"javaobj-py3-0.4.2.tar.gz","has_sig":false,"md5_digest":"3ee511c46217f36f3aa2dad43f1173fe","packagetype":"sdist","python_version":"source","requires_python":null,"size":48377,"upload_time":"2021-02-02T19:50:28","upload_time_iso_8601":"2021-02-02T19:50:28.580736Z","url":"https://files.pythonhosted.org/packages/e4/27/98fd5d64374e3b6f5e4db3dea41add31534d85a87227e48f113037fc6a9f/javaobj-py3-0.4.2.tar.gz","yanked":false,"yanked_reason":null}],"0.4.3":[{"comment_text":"","digests":{"blake2b_256":"4aab756d5965665633b3c7dc252397e4c111da30235eaca68af204fe53f36d1b","md5":"25b2e91b88c7b1b5589d1bdf167e18cd","sha256":"f6ac64cab49e282cf8171d4c479de413dedbbb1a69c64499648185f974080db3"},"downloads":-1,"filename":"javaobj_py3-0.4.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"25b2e91b88c7b1b5589d1bdf167e18cd","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":57319,"upload_time":"2021-05-14T14:27:45","upload_time_iso_8601":"2021-05-14T14:27:45.710374Z","url":"https://files.pythonhosted.org/packages/4a/ab/756d5965665633b3c7dc252397e4c111da30235eaca68af204fe53f36d1b/javaobj_py3-0.4.3-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"66d30e4fa237161b3a00eea031575f46ac052a79b0908982b52794d113f43813","md5":"8db231191fd047885a401233f4fd78f5","sha256":"38f74db3a57e9998a9774e3614afb95cb396f139f29b3fdb130c5af554435259"},"downloads":-1,"filename":"javaobj-py3-0.4.3.tar.gz","has_sig":false,"md5_digest":"8db231191fd047885a401233f4fd78f5","packagetype":"sdist","python_version":"source","requires_python":null,"size":50125,"upload_time":"2021-05-14T14:27:47","upload_time_iso_8601":"2021-05-14T14:27:47.713899Z","url":"https://files.pythonhosted.org/packages/66/d3/0e4fa237161b3a00eea031575f46ac052a79b0908982b52794d113f43813/javaobj-py3-0.4.3.tar.gz","yanked":false,"yanked_reason":null}],"0.4.4":[{"comment_text":"","digests":{"blake2b_256":"685e94afe8aaae8d5d1be025acb4810788e58318f7cde266eaba77fe5016a1a6","md5":"413e206c7aed75ad5fc7a14fd7ab9889","sha256":"d7d676fe71825f6c17024df6791b80b7cc30ef40b61100f4ea3961af063f79b6"},"downloads":-1,"filename":"javaobj_py3-0.4.4-py2.py3-none-any.whl","has_sig":false,"md5_digest":"413e206c7aed75ad5fc7a14fd7ab9889","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":57149,"upload_time":"2024-04-07T19:25:55","upload_time_iso_8601":"2024-04-07T19:25:55.782639Z","url":"https://files.pythonhosted.org/packages/68/5e/94afe8aaae8d5d1be025acb4810788e58318f7cde266eaba77fe5016a1a6/javaobj_py3-0.4.4-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"285638cbec76b6ed625f9b5e9ce7ada7d1a63f02954bab9b2a44151ba17bd578","md5":"4a3e482299ef06c5f02100be119844ab","sha256":"e4e3257ef2cf81a3339787a4d5cf924e54c91f095a723f6d2584dae61d4396ed"},"downloads":-1,"filename":"javaobj-py3-0.4.4.tar.gz","has_sig":false,"md5_digest":"4a3e482299ef06c5f02100be119844ab","packagetype":"sdist","python_version":"source","requires_python":null,"size":82052,"upload_time":"2024-04-07T19:25:57","upload_time_iso_8601":"2024-04-07T19:25:57.724211Z","url":"https://files.pythonhosted.org/packages/28/56/38cbec76b6ed625f9b5e9ce7ada7d1a63f02954bab9b2a44151ba17bd578/javaobj-py3-0.4.4.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"685e94afe8aaae8d5d1be025acb4810788e58318f7cde266eaba77fe5016a1a6","md5":"413e206c7aed75ad5fc7a14fd7ab9889","sha256":"d7d676fe71825f6c17024df6791b80b7cc30ef40b61100f4ea3961af063f79b6"},"downloads":-1,"filename":"javaobj_py3-0.4.4-py2.py3-none-any.whl","has_sig":false,"md5_digest":"413e206c7aed75ad5fc7a14fd7ab9889","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":57149,"upload_time":"2024-04-07T19:25:55","upload_time_iso_8601":"2024-04-07T19:25:55.782639Z","url":"https://files.pythonhosted.org/packages/68/5e/94afe8aaae8d5d1be025acb4810788e58318f7cde266eaba77fe5016a1a6/javaobj_py3-0.4.4-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"285638cbec76b6ed625f9b5e9ce7ada7d1a63f02954bab9b2a44151ba17bd578","md5":"4a3e482299ef06c5f02100be119844ab","sha256":"e4e3257ef2cf81a3339787a4d5cf924e54c91f095a723f6d2584dae61d4396ed"},"downloads":-1,"filename":"javaobj-py3-0.4.4.tar.gz","has_sig":false,"md5_digest":"4a3e482299ef06c5f02100be119844ab","packagetype":"sdist","python_version":"source","requires_python":null,"size":82052,"upload_time":"2024-04-07T19:25:57","upload_time_iso_8601":"2024-04-07T19:25:57.724211Z","url":"https://files.pythonhosted.org/packages/28/56/38cbec76b6ed625f9b5e9ce7ada7d1a63f02954bab9b2a44151ba17bd578/javaobj-py3-0.4.4.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
