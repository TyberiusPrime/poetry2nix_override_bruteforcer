{"info":{"author":"OtoSense","author_email":"thorwhalen1@gmail.com","bugtrack_url":null,"classifiers":["Intended Audience :: Developers","Programming Language :: Python :: 3.8","Topic :: Software Development"],"description":"**Note: The core of py2store has now been moved to [`dol`](https://github.com/i2mint/dol),**\nand many of the specialized data object layers moved to separate packages. \n`py2store`'s functionality remains the same for now, forwarding to these packages. \nIt's advised to use `dol` (and/or its specialized spin-off packages) directly when sufficient, though.\n\n# py2store\n\nStorage CRUD how and where you want it.\n\n[PyBay video about py2store](https://www.youtube.com/watch?v=6lx0A6oVM5E&t=1s).\n\n[Documentation here](https://i2mint.github.io/py2store/)\n\nInstall it (e.g. `pip install py2store`).\n\nThe main idea comes in many names such as \n[Data Access Object (DAO)](https://en.wikipedia.org/wiki/Data_access_object),\n[Repository Pattern](https://www.cosmicpython.com/book/chapter_02_repository.html),\n[Hexagonal architecture, or ports and adapters architecture](https://en.wikipedia.org/wiki/Hexagonal_architecture_(software))\nfor data. \nBut simply put, what `dol` provides is tools to make your interface with data be domain-oriented, simple, and isolated from the underlying data infrastucture. This makes the business logic code simple and stable, enables you to develop and test it without the need of any data infrastructure, and allows you to change this infrastructure independently.\n\nList, read, write, and delete data in a structured data source/target, \nas if manipulating simple python builtins (dicts, lists), or through the interface **you** want to interact with, \nwith configuration or physical particularities out of the way. \nAlso, being able to change these particularities without having to change the business-logic code. \n\nIf you're not a \"read from top to bottom\" kinda person, here are some tips: \n[Quick peek](#quick-peek) will show you a simple example of how it looks and feels. \n[Use cases](#use-cases) will give you an idea of how py2store can be useful to you, if at all. \n\nThe section with the best bang for the buck is probably \n[remove (much of the) data access entropy](#remove--much-of-the--data-access-entropy). \nIt will give you simple (but real) examples of how to use `py2store` tooling \nto bend your interface with data to your will. \n\n[How it works](#how-it-works) will give you a sense of how it works.\n[More examples](#more-examples) will give you a taste of how you can adapt the three main aspects of \nstorage (persistence, serialization, and indexing) to your needs.\n\n# Contents\n\n- [py2store](#py2store)\n- [Contents](#contents)\n- [Quick peek](#quick-peek)\n- [A list of stores for various uses](#a-list-of-stores-for-various-uses)\n- [Use cases](#use-cases)\n  * [Interfacing reads](#interfacing-reads)\n  * [Changing where and how things are stored](#changing-where-and-how-things-are-stored)\n  * [Adapters: When the learning curve is in the way of learning](#adapters--when-the-learning-curve-is-in-the-way-of-learning)\n  * [Thinking about storage later, if ever](#thinking-about-storage-later--if-ever)\n- [Remove data access entropy](#remove-data-access-entropy)\n  * [Get a key-value view of files](#get-a-key-value-view-of-files)\n    + [LocalBinaryStore: A base store for local files](#localbinarystore--a-base-store-for-local-files)\n    + [key filtering](#key-filtering)\n    + [value transformation (a.k.a. serialization and deserialization)](#value-transformation--aka-serialization-and-deserialization-)\n    + [key transformation](#key-transformation)\n    + [caching](#caching)\n    + [Aggregating these transformations to be able to apply them to other situations (DRY!)](#aggregating-these-transformations-to-be-able-to-apply-them-to-other-situations--dry--)\n  * [Other key-value views and tools](#other-key-value-views-and-tools)\n  * [Graze](#graze)\n    + [Example using baby names data](#example-using-baby-names-data)\n    + [Example using emoji image urls data](#example-using-emoji-image-urls-data)\n    + [A little py2store exercise: A store to get image objects of emojis](#a-little-py2store-exercise--a-store-to-get-image-objects-of-emojis)\n  * [Grub](#grub)\n    + [search your code](#search-your-code)\n    + [search jokes (and download them automatically](#search-jokes--and-download-them-automatically)\n- [More examples](#more-examples)\n  * [Looks like a dict](#looks-like-a-dict)\n  * [Converting keys: Relative paths and absolute paths](#converting-keys--relative-paths-and-absolute-paths)\n  * [Serialization/Deserialization](#serialization-deserialization)\n  * [A pickle store](#a-pickle-store)\n  * [But how do you change the persister?](#but-how-do-you-change-the-persister-)\n  * [Talk your own CRUD dialect](#talk-your-own-crud-dialect)\n  * [Transforming keys](#transforming-keys)\n- [How it works](#how-it-works)\n- [A few persisters you can use](#a-few-persisters-you-can-use)\n  * [Local Files](#local-files)\n  * [MongoDB](#mongodb)\n  * [S3, SQL, Zips, Dropbox](#s3--sql--zips--dropbox)\n- [Miscellenous](#miscellenous)\n  * [Caching](#caching)\n- [Philosophical FAQs](#philosophical-faqs)\n  * [Is a store an ORM? A DAO?](#is-a-store-an-orm--a-dao-)\n  * [Should storage transform the data?](#should-storage-transform-the-data-)\n- [Some links](#some-links)\n\n<small><i><a href='http://ecotrust-canada.github.io/markdown-toc/'>Table of contents generated with markdown-toc</a></i></small>\n\n\n# Quick peek\n\nThink of type of storage you want to use and just go ahead, like you're using a dict.\nHere's an example for local storage (you must you string keys only here).\n\n```pydocstring\n>>> from py2store import QuickStore\n>>>\n>>> store = QuickStore()  # will print what (tmp) rootdir it is choosing\n>>> # Write something and then read it out again\n>>> store['foo'] = 'baz'\n>>> 'foo' in store  # do you have the key 'foo' in your store?\nTrue\n>>> store['foo']  # what is the value for 'foo'?\n'baz'\n>>>\n>>> # Okay, it behaves like a dict, but go have a look in your file system,  \n>>> # and see that there is now a file in the rootdir, named 'foo'!\n>>> \n>>> # Write something more complicated\n>>> store['hello/world'] = [1, 'flew', {'over': 'a', \"cuckoo's\": map}]\n>>> stored_val = store['hello/world']\n>>> stored_val == [1, 'flew', {'over': 'a', \"cuckoo's\": map}]  # was it retrieved correctly?\nTrue\n>>>\n>>> # how many items do you have now?\n>>> assert len(store) >= 2  # can't be sure there were no elements before, so can't assert == 2\n>>> \n>>> # delete the stuff you've written\n>>> del store['foo']\n>>> del store['hello/world']\n```\n\n`QuickStore` will by default store things in local files, using pickle as the serializer.\nIf a root directory is not specified, \nit will use a tmp directory it will create (the first time you try to store something) \nIt will create any directories that need to be created to satisfy any/key/that/contains/slashes.\nOf course, everything is configurable.\n\n# A list of stores for various uses\n\n`py2store` provides tools to create the dict-like interface to data you need. \nIf you want to just use existing interfaces, build on it, or find examples of how to make such \ninterfaces, check out the ever-growing list of `py2store`-using projects:\n\n- [mongodol](https://github.com/i2mint/mongodol): For MongoDB\n- [hear](https://github.com/otosense/hear): Read/write audio data flexibly. \n- [tabled](https://github.com/i2mint/tabled): Data as `pandas.DataFrame` from various sources\n- [msword](https://pypi.org/project/msword/): Simple mapping view to docx (Word Doc) elements\n- [sshdol](https://github.com/i2mint/sshdol): Remote (ssh) files access\n- [haggle](https://github.com/otosense/haggle): Easily search, download, and use kaggle datasets.\n- [pyckup](https://github.com/i2mint/pyckup): Grab data simply and define protocols for others to do the same.\n- [hubcap](https://pypi.org/project/hubcap/): Dict-like interface to github.\n- [graze](https://github.com/thorwhalen/graze): Cache the internet.\n- [grub](https://github.com/thorwhalen/grub): A ridiculously simple search engine maker. \n\nJust for fun projects:\n- [cult](https://github.com/thorwhalen/cult): Religious texts search engine. 18mn application of `grub`.\n- [laugh](https://github.com/thorwhalen/laugh): A (py2store-based) joke finder.\n\n\n\n# Use cases\n\n## Interfacing reads\n\nHow many times did someone share some data with you in the form of a zip of some nested folders \nwhose structure and naming choices are fascinatingly obscure? And how much time do you then spend to write code \nto interface with that freak of nature? Well, one of the intents of py2store is to make that easier to do. \nYou still need to understand the structure of the data store and how to deserialize these datas into python \nobjects you can manipulate. But with the proper tool, you shouldn't have to do much more than that.\n\n## Changing where and how things are stored\n\nEver have to switch where you persist things (say from file system to S3), or change the way key into your data, \nor the way that data is serialized? If you use py2store tools to separate the different storage concerns, \nit'll be quite easy to change, since change will be localized. And if you're dealing with code that was already \nwritten, with concerns all mixed up, py2store should still be able to help since you'll be able to\nmore easily give the new system a facade that makes it look like the old one. \n\nAll of this can also be applied to data bases as well, in-so-far as the CRUD operations you're using \nare covered by the base methods.\n\n## Adapters: When the learning curve is in the way of learning\n\nShinny new storage mechanisms (DBs etc.) are born constantly, and some folks start using them, and we are eventually lead to use them \nas well if we need to work with those folks' systems. And though we'd love to learn the wonderful new \ncapabilities the new kid on the block has, sometimes we just don't have time for that. \n\nWouldn't it be nice if someone wrote an adapter to the new system that had an interface we were familiar with? \nTalking to SQL as if it were mongo (or visa versa). Talking to S3 as if it were a file system. \nNow it's not a long term solution: If we're really going to be using the new system intensively, we \nshould learn it. But when you just got to get stuff done, having a familiar facade to something new \nis a life saver. \n\npy2store would like to make it easier for you roll out an adapter to be able to talk \nto the new system in the way **you** are familiar with.\n \n## Thinking about storage later, if ever\n\nYou have a new project or need to write a new app. You'll need to store stuff and read stuff back. \nStuff: Different kinds of resources that your app will need to function. Some people enjoy thinking \nof how to optimize that aspect. I don't. I'll leave it to the experts to do so when the time comes. \nOften though, the time is later, if ever. Few proof of concepts and MVPs ever make it to prod. \n\nSo instead, I'd like to just get on with the business logic and write my program. \nSo what I need is an easy way to get some minimal storage functionality. \nBut when the time comes to optimize, I shouldn't have to change my code, but instead just change the way my \nDAO does things. What I need is py2store.\n\n\n# Remove data access entropy\n\nData comes from many different sources, organization, and formats. \n\nData is needed in many different contexts, which comes with its own natural data organization and formats. \n\nIn between both: A entropic mess of ad-hoc connections and annoying time-consuming and error prone boilerplate. \n\n`py2store` (and it's now many extensions) is there to mitigate this. \n\nThe design gods say SOC, DRY, SOLID* and such. That's good design, yes. But it can take more work to achieve these principles. \nWe'd like to make it _easier_ to do it right than do it wrong.\n\n_(*) Separation (Of) Concerns, Don't Repeat Yourself, https://en.wikipedia.org/wiki/SOLID))_\n\nWe need to determine what are the most common operations we want to do on data, and decide on a common way to express these operations, no matter what the implementation details are. \n- get/read some data\n- set/write some data\n- list/see what data we have\n- filter\n- cache\n...\n\nLooking at this, we see that the base operations for complex data systems such as data bases and file systems overlap significantly with the base operations on python (or any programming language) objects. \n\nSo we'll reflect this in our choice of a common \"language\" for these operations. For examples, once projected to a `py2store` object, iterating over the contents of a data base, or over files, or over the elements of a python (iterable) object should look the same, in code. Achieving this, we achieve SOC, but also set ourselves up for tooling that can assume this consistency, therefore be DRY, and many of the SOLID principles of design.\n\nAlso mentionable: So far, `py2store` core tools are all pure python -- no dependencies on anything else. \n\nNow, when you want to specialize a store (say talk to data bases, web services, acquire special formats (audio, etc.)), then you'll need to pull in a few helpful packages. But the core tooling is pure.\n\n## Get a key-value view of files\n\nLet's get an object that gives you access to local files as if they were a dictionary (a `Mapping`). \n\n### LocalBinaryStore: A base store for local files\n\n\n```python\nimport os\nimport py2store\nrootdir = os.path.dirname(py2store.__file__)\nrootdir\n```\n\n\n\n\n    '/Users/Thor.Whalen/Dropbox/dev/p3/proj/i/py2store/py2store'\n\n\n\n\n```python\nfrom py2store import LocalBinaryStore\n\ns = LocalBinaryStore(rootdir)\nlen(s)\n```\n\n\n\n\n    213\n\n\n\n\n```python\nlist(s)[:10]\n```\n\n\n\n\n    ['filesys.py',\n     'misc.py',\n     'mixins.py',\n     'test/trans_test.py',\n     'test/quick_test.py',\n     'test/util.py',\n     'test/__init__.py',\n     'test/__pycache__/simple_test.cpython-38.pyc',\n     'test/__pycache__/__init__.cpython-38.pyc',\n     'test/__pycache__/quick_test.cpython-38.pyc']\n\n\n\n\n```python\nv = s['filesys.py']\ntype(v), len(v)\n```\n\n\n\n\n    (bytes, 9470)\n\n\n\nAnd really, it's an actual `Mapping`, so you can interact with it as you would with a `dict`. \n\n\n```python\nlen(s)\ns.items()\ns.keys()\ns.values()\n'filesys.py' in s\n```\n\n\n\n\n    True\n\n\n\nIn fact more, it's a subclass of `collections.abc.MutableMapping`, so can write data to a key by doing this:\n\n```python\ns[key] = data\n```\n\nand delete a key by doing\n\n```python\ndel s[key]\n```\n\n(We're not demoing this here because we don't want you to write stuff in py2store files, which we're using as a demo folder.)\n\nAlso, note that by default `py2store` \"persisters\" (as these mutable mappings are called) have their `clear()` method removed to avoid mistakingly deleting a whole data base or file system. \n\n### key filtering\n\nSay you only want `.py` files...\n\n\n```python\nfrom py2store import filt_iter\n\ns = filt_iter(s, filt=lambda k: k.endswith('.py'))\nlen(s)\n```\n\n\n\n\n    102\n\n\n\nWhat's the value of a key?\n\n\n```python\nk = 'filesys.py'\nv = s[k]\nprint(f\"{type(v)=}, {len(v)=}\")\n```\n\n    type(v)=<class 'bytes'>, len(v)=9470\n\n\n### value transformation (a.k.a. serialization and deserialization)\n\nFor `.py` files, it makes sense to get data as text, not bytes. \nSo let's tell our reader/store that's what we want...\n\n\n```python\nfrom py2store import wrap_kvs\n\ns = wrap_kvs(s, obj_of_data=lambda v: v.decode())\n\nv = s[k]  # let's get the value of that key again\nprint(f\"{type(v)=}, {len(v)=}\")  # and see what v is like now...\n```\n\n    type(v)=<class 'str'>, len(v)=9470\n\n\n\n```python\nprint(v[:300])\n```\n\n    import os\n    from os import stat as os_stat\n    from functools import wraps\n    \n    from py2store.base import Collection, KvReader, KvPersister\n    from py2store.key_mappers.naming import (\n        mk_pattern_from_template_and_format_dict,\n    )\n    from py2store.key_mappers.paths import mk_relative_path_store\n    \n    file_sep = os.pat\n\n\n### key transformation\n\nThat was \"value transformation\" (in many some cases, known as \"(de)serialization\"). \n\nAnd yes, if you were interested in transforming data on writes (a.k.a. serialization), you can specify that too.\n\nOften it's useful to transform keys too. Our current keys betray that a file system is under the hood; We have extensions (`.py`) and file separators. \nThat's not pure `SOC`. \n\nNo problem, let's transform keys too, using tuples instead...\n\n\n```python\ns = wrap_kvs(s, \n             key_of_id=lambda _id: tuple(_id[:-len('.py')].split(os.path.sep)),\n             id_of_key=lambda k: k + '.py' if isinstance(k, str) else os.path.sep.join(k) + '.py'\n            )\nlist(s)[:10]\n```\n\n\n\n\n    [('filesys',),\n     ('misc',),\n     ('mixins',),\n     ('test', 'trans_test'),\n     ('test', 'quick_test'),\n     ('test', 'util'),\n     ('test', '__init__'),\n     ('test', 'local_files_test'),\n     ('test', 'simple_test'),\n     ('test', 'scrap')]\n\n\n\nNote that we made it so that when there's only one element, you can specify as string itself: both `s['filesys']` or `s[('filesys',)]` are valid\n\n\n```python\nprint(s['filesys'][:300])\n```\n\n    import os\n    from os import stat as os_stat\n    from functools import wraps\n    \n    from py2store.base import Collection, KvReader, KvPersister\n    from py2store.key_mappers.naming import (\n        mk_pattern_from_template_and_format_dict,\n    )\n    from py2store.key_mappers.paths import mk_relative_path_store\n    \n    file_sep = os.pat\n\n\n### caching\n\nAs of now, every time you iterate over keys, you ask the file system to list files, then filter them (to get only `.py` files). \n\nThat's not a big deal for a few hundred files, but if you're dealing with lots of files you'll feel the slow-down (and your file system will feel it too). \n\nIf you're not deleting or creating files in the root folder often (or don't care about freshness), your simplest solution is to cache the keys.\n\nThe simplest would be to do this:\n    \n```python\nfrom py2store import cached_keys\ns = cached_keys(s)\n```\n\nOnly, you won't really see the difference if we just do that (unless your rootdir has many many files). \n\nBut `cached_keys` (as the other functions we've introduced above) has more too it, and we'll demo that here so you can actually observe a difference. \n\n`cached_keys` has a (keyword-only) argument called `keys_cache` that specifies what to cache the keys into (more specifically, what function to call on the first key iteration (when and if it happens)). The default is `keys_cache`. But say we wanted to always get our keys in sorted order. \n\nWell then...\n\n\n```python\nfrom py2store import cached_keys\n\ns = cached_keys(s, keys_cache=sorted)\nlist(s)[:10]\n```\n\n\n\n\n    [('__init__',),\n     ('access',),\n     ('appendable',),\n     ('base',),\n     ('caching',),\n     ('core',),\n     ('dig',),\n     ('errors',),\n     ('examples', '__init__'),\n     ('examples', 'code_navig')]\n\n\n\nNote that there's a lot more too caching. We'll just mention two useful things to remember here:\n\n- You can use `keys_cache` to specify a \"precomputed/explicit\" collection of keys to use in the store. This allows you to have full flexibility on defining sub-sets of stores.\n\n- Here we talked about caching keys, but caching values is arguably more important. If it takes a long time to fetch remote data, you want to cache it locally. Further, if loading data from local storage to RAM is creating lag, you can cache in RAM. And you can do all this easily (and separate from the concern of both source and cache stores) using tools you an find in `py2store.caching`. \n\n### Aggregating these transformations to be able to apply them to other situations (DRY!)\n\n\n```python\nfrom lined import Line  # Line just makes a function by composing/chaining several functions\nfrom py2store import LocalBinaryStore, filt_iter, wrap_kvs, cached_keys\n\nkey_filter_wrapper = filt_iter(filt=lambda k: k.endswith('.py'))\n\nkey_and_value_wrapper = wrap_kvs(\n    obj_of_data=lambda v: v.decode(),\n    key_of_id=lambda _id: tuple(_id[:-len('.py')].split(os.path.sep)),\n    id_of_key=lambda k: k + '.py' if isinstance(k, str) else os.path.sep.join(k) + '.py'\n)\n\ncaching_wrapper = cached_keys(keys_cache=sorted)\n\n# my_cls_wrapper is basically the pipeline: input -> key_filter_wrapper -> key_and_value_wrapper -> caching_wrapper\nmy_cls_wrapper = Line(key_filter_wrapper, key_and_value_wrapper, caching_wrapper)  \n\n@my_cls_wrapper\nclass PyFilesReader(LocalBinaryStore):\n    \"\"\"Access to local .py files\"\"\"\n\n    \ns = PyFilesReader(rootdir)\nlen(s)\n```\n\n\n\n\n    102\n\n\n\n\n```python\nlist(s)[:10]\n```\n\n\n\n\n    [('__init__',),\n     ('access',),\n     ('appendable',),\n     ('base',),\n     ('caching',),\n     ('core',),\n     ('dig',),\n     ('errors',),\n     ('examples', '__init__'),\n     ('examples', 'code_navig')]\n\n\n\n\n```python\nprint(s['caching'][:300])\n```\n\n    \"\"\"Tools to add caching layers to stores.\"\"\"\n    \n    from functools import wraps, partial\n    from typing import Iterable, Union, Callable, Hashable, Any\n    \n    from py2store.trans import store_decorator\n    \n    \n    ###############################################################################################################\n\n\n## Other key-value views and tools\n\nNow that you've seen a few tools (key/value transformation, filtering and caching) you can use to change one mapping to another, what about getting a mapping (i.e. \"`dict`-like\") view of a data source in the first place? \n\nIf you're advanced, you can just make your own by sub-classing `KvReader` or `KvPersister`, and adding the required `__iter__` and `__getitem__` methods (as well as `__setitem__` and `__delitem__` for `KvPersister`, if you want to be able to write/delete data too). \n\nBut we (and others) are offer an ever growing slew of mapping views of all kinds of data sources. \n\nHere are a few you can check out:\n\nThe classics (data bases and storage systems):\n\n```python\nfrom py2store import (\n    S3BinaryStore,  # to talk to AWS S3  (uses boto)\n    SQLAlchemyStore,  # to talk to sql (uses alchemy)\n)\n# from py2store.stores.mongo_store import MongoStore  # moved to mongodol\n```\n\nTo access configs and customized store specifications:\n\n```python\nfrom py2store import (\n    myconfigs,\n    mystores\n)\n```\n\nTo access contents of zip files:    \n    \n```python\nfrom py2store import (\n    FilesOfZip, \n    FlatZipFilesReader,   \n)\n```\n\nTo customize the format you want your data in (depending on the context... like a file extension):\n\n```python\nfrom py2store.misc import (\n    get_obj,\n    MiscReaderMixin,\n    MiscStoreMixin,\n    MiscGetterAndSetter,\n    \n)\n```\n\nTo define string, tuple, or dict formats for keys, and move between them:\n\n```python\nfrom py2store.key_mappers.naming import StrTupleDict\n```\n\nBut probably the best way to learn the way of `py2store` is to see how easily powerful functionalities can be made with it.\n\nWe'll demo a few of these now.\n\n## Graze\n\n[graze](https://github.com/thorwhalen/graze)'s jingle is _\"Cache the internet\"_. \n\nThat's (sort of) what it does. \n\nGraze is a mapping that uses urls as keys, pulling content from the internet and caching to local files. \n\nQuite simply:\n\n```python\nfrom graze import Graze\ng = Graze()\nlist(g)  # lists the urls you already have locally\ndel g[url]  # deletes that local file you have cached\nb = g[url]  # gets the contents of the url (taken locally if there, or downloading from the internet (and caching locally) if not. \n```\n\nMain use case: Include the data acquisition code in your usage code. \n\nSuppose you want to write some code that uses some data. You need that data to run the analyses. What do you do? \n- write some instructions on where and how to get the data, where to put it in the file system, and/or what config file or environment variable to tinker with to tell it where that data is, or...\n- use graze\n\nSince it's implemented as a mapping, you can easily transform it to do all kinds of things (namely, using [py2store tools](https://github.com/i2mint/py2store)). Things like\n- getting your content in a more ready-to-use object than bytes, or\n- putting an expiry date on some cached items, so that it will automatically re-fresh the data\n\nThe [original code](https://github.com/thorwhalen/graze/blob/ed8b6d4b5334996f91c508dfe6049d2243fa6740/graze/__init__.py) \nof Graze was effectively 57 lines (47 without imports). [Check it out](https://github.com/thorwhalen/graze/blob/ed8b6d4b5334996f91c508dfe6049d2243fa6740/graze/__init__.py). That's because it it had to do is:\n- define url data fetching as `internet[url]`\n- define a local files (py2)store\n- connect both through caching logic\n- do some key mapping to get from url to local path and visa-versa\n\nAnd all those things are made easy with [py2store](https://github.com/i2mint/py2store).\n\n\n```python\nfrom graze import Graze\n\ng = Graze()  # uses a default directory to store stuff, but is customizable\nlen(g)  # how many grazed files do we have?\n```\n\n\n\n\n    52\n\n\n\n\n```python\nsorted(g)[:3]  # first (in sorted order) 3 keys\n```\n\n\n\n\n    ['http://www.ssa.gov/oact/babynames/state/namesbystate.zip',\n     'https://api.nasdaq.com/api/ipo/calendar?date=2020-12',\n     'https://en.wikipedia.org/wiki/List_of_chemical_elements']\n\n\n\n### Example using baby names data\n\n\n```python\nfrom io import BytesIO\nimport pandas as pd\nfrom py2store import FilesOfZip\n\n# getting the raw data\nurl = 'http://www.ssa.gov/oact/babynames/state/namesbystate.zip'  # this specifies both where to get the data from, and where to put it locally!\nb = g[url]\nprint(f\"b is an array of {len(b)} {type(b)} of a zip. We'll give these to FilesOfZip to be able to read them\")\n\n# formatting it to be useful\nz = FilesOfZip(b)\nprint(f\"First 4 file names in the zip: {list(z)[:4]}\")\nv = z['AK.TXT']  # bytes of that (zipped) file\ndf = pd.read_csv(BytesIO(v), header=None)\ndf.columns = ['state', 'gender', 'year', 'name', 'number']\ndf\n```\n\n    b is an array of 22148032 <class 'bytes'> of a zip. We'll give these to FilesOfZip to be able to read them\n    First 4 file names in the zip: ['AK.TXT', 'AL.TXT', 'AR.TXT', 'AZ.TXT']\n\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>state</th>\n      <th>gender</th>\n      <th>year</th>\n      <th>name</th>\n      <th>number</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AK</td>\n      <td>F</td>\n      <td>1910</td>\n      <td>Mary</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>AK</td>\n      <td>F</td>\n      <td>1910</td>\n      <td>Annie</td>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>AK</td>\n      <td>F</td>\n      <td>1910</td>\n      <td>Anna</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>AK</td>\n      <td>F</td>\n      <td>1910</td>\n      <td>Margaret</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>AK</td>\n      <td>F</td>\n      <td>1910</td>\n      <td>Helen</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>28957</th>\n      <td>AK</td>\n      <td>M</td>\n      <td>2019</td>\n      <td>Patrick</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>28958</th>\n      <td>AK</td>\n      <td>M</td>\n      <td>2019</td>\n      <td>Ronin</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>28959</th>\n      <td>AK</td>\n      <td>M</td>\n      <td>2019</td>\n      <td>Sterling</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>28960</th>\n      <td>AK</td>\n      <td>M</td>\n      <td>2019</td>\n      <td>Titus</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>28961</th>\n      <td>AK</td>\n      <td>M</td>\n      <td>2019</td>\n      <td>Tucker</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n<p>28962 rows × 5 columns</p>\n</div>\n\n\n\n### Example using emoji image urls data\n\n\n```python\nurl = 'https://raw.githubusercontent.com/thorwhalen/my_sources/master/github_emojis.json'\nif url in g:  # if we've cached this already\n    del g[url]  # remove it from cache\nassert url not in g\n```\n\n\n```python\nimport json\nd = json.loads(g[url].decode())\nlen(d)\n```\n\n\n\n\n    1510\n\n\n\n\n```python\nlist(d)[330:340]\n```\n\n\n\n\n    ['couple_with_heart_woman_man',\n     'couple_with_heart_woman_woman',\n     'couplekiss_man_man',\n     'couplekiss_man_woman',\n     'couplekiss_woman_woman',\n     'cow',\n     'cow2',\n     'cowboy_hat_face',\n     'crab',\n     'crayon']\n\n\n\n\n```python\nd['cow']\n```\n\n\n\n\n    'https://github.githubassets.com/images/icons/emoji/unicode/1f42e.png?v8'\n\n\n\n### A little py2store exercise: A store to get image objects of emojis\n\nAs a demo of py2store, let's make a store that allows you to get (displayable) image objects of emojis, taking care of downloading and caching \nthe name:url information for you.\n\n\n```python\nfrom functools import cached_property\nimport json\n\nfrom py2store import KvReader\nfrom graze import graze\n\nclass EmojiUrls(KvReader):\n    \"\"\"A store of emoji urls. Will automatically download and cache emoji (name, url) map to a local file when first used.\"\"\"\n    data_source_url = 'https://raw.githubusercontent.com/thorwhalen/my_sources/master/github_emojis.json'\n    \n    @cached_property\n    def data(self):\n        b = graze(self.data_source_url)  # does the same thing as Graze()[url]\n        return json.loads(b.decode())\n        \n    def __iter__(self):\n        yield from self.data\n        \n    def __getitem__(self, k):\n        return self.data[k]\n        \n    # note, normally you would define an explicit __len__ and __contains__ to make these more efficient\n\nemojis = EmojiUrls()\nlen(emojis), emojis['cow']\n```\n\n\n\n\n    (1510,\n     'https://github.githubassets.com/images/icons/emoji/unicode/1f42e.png?v8')\n\n\n\n\n```python\nfrom IPython.display import Image\nimport requests\nfrom py2store import wrap_kvs, add_ipython_key_completions\n\n@add_ipython_key_completions  # this enables tab-completion of keys in jupyter notebooks\n@wrap_kvs(obj_of_data=lambda url: Image(requests.get(url).content))\nclass EmojiImages(EmojiUrls):\n    \"\"\"An emoji reader returning Image objects (displayable in jupyter notebooks)\"\"\"\n    \n    \nemojis = EmojiImages()\nlen(emojis)\n```\n\n\n\n\n    1510\n\n\n\n\n```python\nemojis['cow']\n```\n\n    \n![png](https://github.githubassets.com/images/icons/emoji/unicode/1f42e.png?v8)\n    \n\n## Grub\n\nQuick and easy search engine of anything (that can be expressed as a key-value store of text).\n\n### search your code\n\n```python\n# Make a store to search in (only requirements is that it provide text values)\nimport os\nimport py2store\nrootdir = os.path.dirname(py2store.__file__)\nstore_to_search = LocalBinaryStore(os.path.join(rootdir) + '{}.py')  # The '{}.py' is a short-hand of LocalBinaryStore to filter for .py files only\n\n# make a search object for that store\nfrom grub import SearchStore\nsearch = SearchStore(store_to_search)\n```\n\n\n```python\nsearch('cache key-value pairs')\n```\n\n    array(['py2store/caching.py', 'py2store/utils/cumul_aggreg_write.py',\n           'py2store/trans.py', 'py2store/examples/write_caches.py',\n           'py2store/utils/cache_descriptors.py',\n           'py2store/utils/explicit.py',\n           'py2store/persisters/arangodb_w_pyarango.py',\n           'py2store/persisters/dynamodb_w_boto3.py',\n           'py2store/stores/delegation_stores.py', 'py2store/util.py'],\n          dtype=object)\n### search jokes (and download them automatically\n\nSome code that acquires and locally caches a joke data, makes a mapping view of it (here just a `dict` in memory), and builds a search engine to find jokes. All that, in a few lines.\n\n\n```python\nimport json\nfrom graze.base import graze\nfrom grub import SearchStore\n\n# reddit jokes (194553 at the time of writing this)\njokes_url = 'https://raw.githubusercontent.com/taivop/joke-dataset/master/reddit_jokes.json'\nraw_data = json.loads(graze(jokes_url).decode())\njoke_store = {x['id']: f\"{x['title']}\\n--> {x['body']}\\n(score: {x['score']})\" for x in raw_data}\nsearch_joke = SearchStore(joke_store)\n```\n\n\n```python\nresults_idx = search_joke('searching for something funny')\nprint(joke_store[results_idx[0]])  # top joke (not by score, but by relevance to search terms)\n```\n\n    want to hear me say something funny?\n    --> well alright then....\"something funny\" there\n    (score: 0)\n\n\n\n# More examples\n\n## Looks like a dict\nBelow, we make a default store and demo a few basic operations on it.\nThe default store uses a dict as it's backend persister. \nA dict is neither really a backend, nor a persister. But it helps to try things out with no\nfootprint.\n\n```python\nfrom py2store.base import Store\n\ns = Store()\nassert list(s) == []\ns['foo'] = 'bar'  # put 'bar' in 'foo'\nassert 'foo' in s  # check that 'foo' is in (i.e. a key of) s\nassert s['foo'] == 'bar'  # see that the value that 'foo' contains is 'bar'\nassert list(s) == ['foo']  # list all the keys (there's only one)\nassert list(s.items()) == [('foo', 'bar')]  # list all the (key, value) pairs\nassert list(s.values()) == ['bar']  # list all the values\nassert len(s) == 1  # Number of items in my store\ns['another'] = 'item'  # store another item\nassert len(s) == 2  # Now I have two!\nassert list(s) == ['foo', 'another']  # here they are\n```\n\nThere's nothing fantastic in the above code. \nI've just demoed some operations on a dict.\nBut it's exactly this simplicity that py2store aims for. \nYou can now replace the `s = Store()` with `s = AnotherStore(...)` where `AnotherStore` \nnow uses some other backend that could be remote or local, could be a database, or any \nsystem that can store `something` (the value) `somewhere` (the key).\n\nYou can choose from an existing store (e.g. local files, for AWS S3, for MongoDB) or \nquite easily make your own (more on that later).\n\nAnd yet, it will still look like you're talking to a dict. This not only means that you can \ntalk to various storage systems without having to actually learn how to, but also means \nthat the same business logic code you've written can be reused with no modification. \n\nBut py2store offers more than just a simple consistent facade to **where** you store things, \nbut also provides means to define **how** you do it.\n\nIn the case of key-value storage, the \"how\" is defined on the basis of the keys (how you reference) \nthe objects you're storing and the values (how you serialize and deserialize those objects).\n \n\n## Converting keys: Relative paths and absolute paths\nTake a look at the following example, that adds a layer of key conversion to a store.\n\n```python\n# defining the store\nfrom py2store.base import Store\n\nclass PrefixedKeyStore(Store):\n    prefix = ''\n    def _id_of_key(self, key):\n        return self.prefix + key  # prepend prefix before passing on to store\n    def _key_of_id(self, _id):\n        if not _id.startswith(self.prefix):\n            raise ValueError(f\"_id {_id} wasn't prefixed with {self.prefix}\")\n        else:\n            return _id[len(self.prefix):]  # don't show the user the prefix\n            \n# trying the store out            \ns = PrefixedKeyStore()\ns.prefix = '/ROOT/'\nassert list(s) == []\ns['foo'] = 'bar'  # put 'bar' in 'foo'\nassert 'foo' in s  # check that 'foo' is in (i.e. a key of) s\nassert s['foo'] == 'bar'  # see that the value that 'foo' contains is 'bar'\nassert list(s) == ['foo']  # list all the keys (there's only one)\nassert list(s.items()) == [('foo', 'bar')]  # list all the (key, value) pairs\nassert list(s.values()) == ['bar']  # list all the values\nassert len(s) == 1  # Number of items in my store\ns['another'] = 'item'  # store another item\nassert len(s) == 2  # Now I have two!\nassert list(s) == ['foo', 'another']  # here they are      \n```\n\n\nQ: That wasn't impressive! It's just the same as the first Store. What's this prefix all about?\n\nA: The prefix thing is hidden, and that's the point. You want to talk the \"relative\" (i.e \"prefix-free\")\nlanguage, but may have the need for this prefix to be prepended to the key before persisting the data\nand that prefix to be removed before being displayed to the user. \nThink of working with files. Do you want to have to specify the root folder every time you store something\nor retrieve something?\n\nQ: Prove it!\n\nA: Okay, let's look under the hood at what the underlying store (a dict) is dealing with:\n\n```python\nassert list(s.store.items()) == [('/ROOT/foo', 'bar'), ('/ROOT/another', 'item')]\n```\n\nYou see? The keys that the \"backend\" is using are actually prefixed with `\"/ROOT/\"`\n\n## Serialization/Deserialization\n\nLet's now demo serialization and deserialization. \n\nSay we want to deserialize any text we stored by appending `\"hello \"` to everything stored.\n\n```python\n# defining the store\nfrom py2store.base import Store\n\nclass MyFunnyStore(Store):\n    def _obj_of_data(self, data):\n        return f'hello {data}'\n    \n# trying the store out            \ns = MyFunnyStore()\nassert list(s) == []\ns['foo'] = 'bar'  # put 'bar' in 'foo'\nassert 'foo' in s  # check that 'foo' is in (i.e. a key of) s\nassert s['foo'] == 'hello bar'  # the value that 'foo' contains SEEMS to be 'hello bar'\nassert list(s) == ['foo']  # list all the keys (there's only one)\nassert list(s.items()) == [('foo', 'hello bar')]  # list all the (key, value) pairs\nassert list(s.values()) == ['hello bar']  # list all the values    \n```\n\nNote: This is an easy example to demo on-load transformation of data (i.e. deserialization), \nbut wouldn't be considered \"deserialization\" by all. \nSee the [Should storage transform the data?](#should-storage-transform-the-data) discussion below.\n \nIn the following, we want to serialize our text by upper-casing it (and see it as such) \nwhen we retrieve the text.\n\n```python\n# defining the store\nfrom py2store.base import Store\n\nclass MyOtherFunnyStore(Store):\n    def _data_of_obj(self, obj):\n        return obj.upper()\n      \n# trying the store out              \ns = MyOtherFunnyStore()\nassert list(s) == []\ns['foo'] = 'bar'  # put 'bar' in 'foo'\nassert 'foo' in s  # check that 'foo' is in (i.e. a key of) s\nassert s['foo'] == 'BAR'  # see that the value that 'foo' contains is 'bar'\nassert list(s) == ['foo']  # list all the keys (there's only one)\nassert list(s.items()) == [('foo', 'BAR')]  # list all the (key, value) pairs\nassert list(s.values()) == ['BAR']  # list all the values\n``` \n\nIn the last to serialization examples, we only implemented one way transformations. \nThat's all fine if you just want to have a writer (so only need a serializer) or a reader (so only \nneed a deserializer). \nIn most cases though, you will need two way transformations, specifying how the object \nshould be serialized to be stored, and how it should be deserialized to get your object back. \n\n\n## A pickle store\n\nSay you wanted the store to pickle as your serializer. Here's how this could look like.\n\n```python\n# defining the store\nimport pickle\nfrom py2store.base import Store\n\n\nclass PickleStore(Store):\n    protocol = None\n    fix_imports = True\n    encoding = 'ASCII'\n    def _data_of_obj(self, obj):  # serializer\n        return pickle.dumps(obj, protocol=self.protocol, fix_imports=self.fix_imports)\n    def _obj_of_data(self, data):  # deserializer\n        return pickle.loads(data, fix_imports=self.fix_imports, encoding=self.encoding)\n\n# trying the store out              \ns = PickleStore()\nassert list(s) == []\ns['foo'] = 'bar'  # put 'bar' in 'foo'\nassert s['foo'] == 'bar'  # I can get 'bar' back\n# behind the scenes though, it's really a pickle that is stored:\nassert s.store['foo'] == b'\\x80\\x03X\\x03\\x00\\x00\\x00barq\\x00.'\n``` \n\nAgain, it doesn't seem that impressive that you can get back a string that you stored in a dict. \nFor two reasons: (1) you don't really need to serialize strings to store them and (2) you don't need to serialize python \nobjects to store them in a dict. \nBut if you (1) were trying to store more complex types and (2) were actually persisting them in a file system or database, \nthen you'll need to serialize.\nThe point here is that the serialization and persisting concerns are separated from the storage and retrieval concern. \nThe code still looks like you're working with a dict.\n\n## But how do you change the persister?\n\nBy using a persister that persists where you want. \nYou can also write your own. All a persister needs to work with py2store is that it follows the interface \npython's `collections.MutableMapping` (or a subset thereof). More on how to make your own persister later\nYou just need to follow the collections.MutableMapping interface. \n\nBelow a simple example of how to persist in files under a given folder.\n(Warning: If you want a local file store, don't use this, but one of the easier to use, robust and safe stores in the \nstores folder!)\n\n```python\nimport os\nfrom collections.abc import MutableMapping\n\nclass SimpleFilePersister(MutableMapping):\n    \"\"\"Read/write (text or binary) data to files under a given rootdir.\n    Keys must be absolute file paths.\n    Paths that don't start with rootdir will be raise a KeyValidationError\n    \"\"\"\n\n    def __init__(self, rootdir, mode='t'):\n        if not rootdir.endswith(os.path.sep):\n            rootdir = rootdir + os.path.sep\n        self.rootdir = rootdir\n        assert mode in {'t', 'b', ''}, f\"mode ({mode}) not valid: Must be 't' or 'b'\"\n        self.mode = mode\n\n    def __getitem__(self, k):\n        with open(k, 'r' + self.mode) as fp:\n            data = fp.read()\n        return data\n\n    def __setitem__(self, k, v):\n        with open(k, 'w' + self.mode) as fp:\n            fp.write(v)\n\n    def __delitem__(self, k):\n        os.remove(k)\n\n    def __contains__(self, k):\n        \"\"\" Implementation of \"k in self\" check.\n        Note: MutableMapping gives you this for free, using a try/except on __getitem__,\n        but the following uses faster os functionality.\"\"\"\n        return os.path.isfile(k)\n\n    def __iter__(self):\n        yield from filter(os.path.isfile, \n                          map(lambda x: os.path.join(self.rootdir, x), \n                              os.listdir(self.rootdir)))\n        \n    def __len__(self):\n        \"\"\"Note: There's system-specific faster ways to do this.\"\"\"\n        count = 0\n        for _ in self.__iter__():\n            count += 1\n        return count\n    \n    def clear(self):\n        \"\"\"MutableMapping creates a 'delete all' functionality by default. Better disable it!\"\"\"\n        raise NotImplementedError(\"If you really want to do that, loop on all keys and remove them one by one.\")\n```\n\nNow try this out:\n```python\nimport os\n# What folder you want to use. Defaulting to the home folder. You can choose another place, but make sure \nrootdir = os.path.expanduser('~/')  # Defaulting to the home folder. You can choose another place\n\npersister = SimpleFilePersister(rootdir)\nfoo_fullpath = os.path.join(rootdir, 'foo')\npersister[foo_fullpath] = 'bar'  # write 'bar' to a file named foo_fullpath\nassert persister[foo_fullpath] == 'bar'  # see that you can read the contents of that file to get your 'bar' back\nassert foo_fullpath in persister  # the full filepath indeed exists in (i.e. \"is a key of\") the persister\nassert foo_fullpath in list(persister)  # you can list all the contents of the rootdir and file foo_fullpath in it\n```\n\n## Talk your own CRUD dialect\n\nDon't like this dict-like interface? Want to talk **your own** CRUD words? \nWe got you covered! Just subclass `SimpleFilePersister` and make the changes you want to make:\n\n```python\nclass MySimpleFilePersister(SimpleFilePersister):    \n    # If it's just renaming, it's easy\n    read = SimpleFilePersister.__getitem__\n    exists = SimpleFilePersister.__contains__\n    n_files = SimpleFilePersister.__len__\n    \n    # here we want a new method that gives us an actual list of the filepaths in the rootdir\n    list_files = lambda self: list(self.__iter__())\n\n    # And for write we want val and key to be swapped in our interface, \n    def write(self, val, key):  # note that we wanted val to come first here (as with json.dump and pickle.dump interface)\n        return self.__setitem__(key, val)  \n\nmy_persister = MySimpleFilePersister(rootdir)\n\nfoo_fullpath = os.path.join(rootdir, 'foo1')\nmy_persister.write('bar1', foo_fullpath)  # write 'bar1' to a file named foo_fullpath\nassert my_persister.read(foo_fullpath) == 'bar1'  # see that you can read the contents of that file to get your 'bar1' back\nassert my_persister.exists(foo_fullpath)  # the full filepath indeed exists in (i.e. \"is a key of\") the persister\nassert foo_fullpath in my_persister.list_files()  # you can list all the contents of the rootdir and file foo_fullpath in it\n```\n\n## Transforming keys\n\nBut dealing with full paths can be annoying, and might couple code too tightly with a particular local system.\nWe'd like to use relative paths instead. \nEasy: Wrap the persister in the `PrefixedKeyStore` defined earlier. \n\n```python\ns = PrefixedKeyStore(store=persister)  # wrap your persister with the PrefixedKeyStore defined earlier\nif not rootdir.endswith(os.path.sep): \n    rootdir = rootdir + os.path.sep  # make sure the rootdir ends with slash\ns.prefix = rootdir  # use rootdir as prefix in keys\n\ns['foo2'] = 'bar2'  # write 'bar2' to a file \nassert s['foo2'] == 'bar2'  # see that you can read the contents of that file to get your 'bar2' back\nassert 'foo2' in s  \nassert 'foo2' in list(s)  \n```\n\n# How it works\n\npy2store offers three aspects that you can define or modify to store things where you like and how you like it:\n* **Persistence**: Where things are actually stored (memory, files, DBs, etc.)\n* **Serialization**: Value transformaton. \nHow python objects should be transformed before it is persisted, \nand how persisted data should be transformed into python objects.\n* **Indexing**: Key transformation. How you name/id/index your data. \nFull or relative paths. Unique combination of parameters (e.g. (country, city)). Etc.\n\nAll of this allows you to do operations such as \"store this (value) in there (persitence) as that (key)\", \nmoving the tedious particularities of the \"in there\" as well how the \"this\" and \"that\" are transformed to fit \nin there, all out of the way of the business logic code. The way it should be.\n\n![alt text](img/py2store_how_it_works.png)\n\nNote: Where data is actually persisted just depends on what the base CRUD methods \n(`__getitem__`, `__setitem__`, `__delitem__`, `__iter__`, etc.) define them to be. \n \n# A few persisters you can use\n\nWe'll go through a few basic persisters that are ready to use.\nThere are more in each category, and we'll be adding new categories, but \nthis should get you started.\n\nHere is a useful function to perform a basic test on a store, given a key and value.\nIt doesn't test all store method (see test modules for that), but demos \nthe basic functionality that pretty much every store should be able to do.\n\n```python\ndef basic_test(store, k='foo', v='bar'):\n    \"\"\" This test performs \n    Warning: Don't use on a key k that you don't want to loose!\"\"\"\n    if k in store:  # deleting all docs in tmp\n        del store[k]\n    assert (k in store) == False  # see that key is not in store (and testing __contains__)\n    orig_length = len(store)  # the length of the store before insertion\n    store[k] = v  # write v to k (testing __setitem__)\n    assert store[k] == v  # see that the value can be retrieved (testing __getitem__, and that __setitem__ worked)\n    assert len(store) == orig_length + 1  # see that the number of items in the store increased by 1\n    assert (k in store) == True  # see that key is in store now (and testing __contains__ again)\n    assert k in list(store)  # testing listing the (key) contents of a store (and seeing if )\n    assert store.get(k) == v  # the get method\n    _ = next(iter(store.keys()))  # get the first key (test keys method)\n    _ = next(iter(store.__iter__()))  # get the first key (through __iter__)\n    k in store.keys()  # test that the __contains__ of store.keys() works\n    \n    try: \n        _ = next(iter(store.values()))  # get the first value (test values method)\n        _ = next(iter(store.items()))  # get the first (key, val) pair (test items method)\n    except Exception:\n        print(\"values() (therefore items()) didn't work: Probably testing a persister that had other data in it that your persister doesn't like\")\n        \n    assert (k in store) == True # testing __contains__ again\n    del store[k]  # clean up (and test delete)\n```\n## Local Files\n\nThere are many choices of local file stores according to what you're trying to do. \nOne general (but not too general) purpose local file store is \n'py2store.stores.local_store.RelativePathFormatStoreEnforcingFormat'.\nIt can do a lot for you, like add a prefix to your keys (so you can talk in relative instead of absolute paths),\nlists all files in subdirectories as well recursively, \nonly show you files that have a given pattern when you list them, \nand not allow you to write to a key that doesn't fit the pattern. \nFurther, it also has what it takes to create parametrized paths or parse out the parameters of a path. \n\n```python\nfrom py2store.stores.local_store import RelativePathFormatStoreEnforcingFormat as LocalFileStore\nimport os\n\nrootdir = os.path.expanduser('~/pystore_tests/')  # or replace by the folder you want to use\nos.makedirs(rootdir, exist_ok=True)  # this will make all directories that don't exist. Don't use if you don't want that.\n\nstore = LocalFileStore(path_format=rootdir)\nbasic_test(store, k='foo', v='bar')\n```\n \nThe signature of LocalFileStore is:\n```python\nLocalFileStore(path_format, mode='',\n                buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)\n```\n\nOften path_format is just used to specify the rootdir, as above. \nBut you can specify the desired format further.\nFor example, the following will only yield .wav files, \nand only allow you to write to keys that end with .wav:\n```python\nstore = LocalFileStore(path_format='/THE/ROOT/DIR/{}.wav')\n```\n\nThe following will additional add the restriction that those .wav files have the format 'SOMESTRING_' \nfollowed by digits:\n```python\nstore = LocalFileStore(path_format='/THE/ROOT/DIR/{:s}_{:d}.wav')\n```\n\nYou get the point...\n\nThe other arguments of LocalFileStore or more or less those of python's `open` function.\nThe slight difference is that here the `mode` argument applies both to read and write. \nIf `mode='b'` for example, the file will be opened with `mode='rb'` when opened to read and\nwith `mode='wb'` when opened to write. For assymetrical read/write modes, the \nuser can specify a `read_mode` and `write_mode` (in this case the `mode` argument is ignored).\n\n## MongoDB\n\nA MongoDB collection is not as naturally a key-value storage as a file system is.\nMongoDB stores \"documents\", which are JSONs of data, having many (possibly nested) fields that are not \nby default enforced by a schema. So in order to talk to mongo as a key-value store, we need to \nspecify what fields should be considered as keys, and what fields should be considered as data. \n\nBy default, the `_id` field (the only field ensured by default to contain unique values) is the single key field, and \nall other fields are considered to be data fields.\n\nNote: py2store mongo tools have now been moved to the mongodol project. Import from there.\nRequires `pymongo`.\n\n```python\nfrom mongodol.stores import MongoStore  # Note: project moved to mongodol now\n# The following makes a default MongoStore, the default pymongo.MongoClient settings, \n# and db_name='py2store', collection_name='test', key_fields=('_id',)\nstore = MongoStore()\nbasic_test(store, k={'_id': 'foo'}, v={'val': 'bar', 'other_val': 3})\n```\n\nBut it can get annoying to specify the key as a dict every time.\nThe key schema is fixed, so you should be able to just specify the tuple of values making the keys.\nAnd you can, with MongoTupleKeyStore\n\n```python\nfrom mongodol.stores import MongoTupleKeyStore  # Note: project moved to mongodol now\nstore = MongoTupleKeyStore(key_fields=('_id', 'name'))\nbasic_test(store, k=(1234, 'bob'), v={'age': 42, 'gender': 'unspecified'})\n```\n\n## S3, SQL, Zips, Dropbox\n\nS3 persister/stores work pretty much like LocalStores, but stores in S3. You'll need to have an account with \nAWS to use this. Find S3 stores in py2store.stores.s3_stores.\n\nSQL give you read and write access to SQL DBs and tables. \n\nZipReader (and other related stores) talks to one or several files, giving you the ability to operate as if the zips were uncompressed. \n\nDropbox will give you access to dropbox files through the same dict-like interface.\n\n\n# Miscellenous\n\n## Caching\n\nThere's some basic caching capabilities in py2store. \nBasic, but covers a lot of use cases. \nBut if you want to bring your own caching tools, you might be able to use them here too. \n\nFor example, the very popular `cachetools` uses a ``dict`` as it's default cache store, but you can \nspecify any mutable mapping (that takes tuples as keys!). \n\nSay you want to use local files as your cache. Try something like this:\n\n```python\nfrom cachetools import cached # there's also LRUCache, TTLCache...\nfrom py2store import QuickPickleStore, wrap_kvs\n\ndef tuple_to_str(k: tuple, sep: str=os.path.sep) -> str:\n    return sep.join(k)\n    if isinstance(k, tuple):\n        return os.path.sep.join(k)\n    else:\n        return k\n    \ndef str_to_tuple(k: str, sep: str=os.path.sep) -> tuple:\n    return k.split(sep)\n\n@wrap_kvs(id_of_key=tuple_to_str, key_of_id=str_to_tuple)\nclass TupledQuickPickleStore(QuickPickleStore):\n    \"\"\"A local pickle store with tuple keys (to work well with cachetools)\"\"\"\n    \n\nlocal_files_cache = TupledQuickPickleStore()  # no rootdir? Fine, will choose a local file\n\n@cached(cache=local_files_cache)\ndef hello(x='world'):\n    return f\"hello {x}!\"\n```\n\n```pydocstring\n>>> hello('QT')\n>>> import pickle\n>>> # Let's now verify that we actually have a file with such content\n>>> with open(os.path.join(local_files_cache._prefix, 'QT'), 'rb') as fp:\n...     file_contents = pickle.load(fp)\n>>> assert file_contents == 'hello QT!'\n```\n\n\n# Philosophical FAQs\n\n## Is a store an ORM? A DAO?\n\nCall it what you want, really.\n\nIt would be tempting to coin py2store as ya(p)orm (yet another (python) object-relational mapping), \nbut that would be misleading. The intent of py2store is not to map objects to db entries, \nbut rather to offer a consistent interface for basic storage operations. \n\nIn that sense, py2store is more akin to an implementation of the data access object (DAO) pattern. \nOf course, the difference between ORM and DAO can be blurry, so all this should be taken with a grain of salt.\n\nAdvantages and disadvantages such abstractions are easy to search and find, but in most cases the \npros probably outweigh the cons. \n\nMost data interaction mechanisms can be satisfied by a subset of the collections.abc interfaces.\nFor example, one can use python's collections.Mapping interface for any key-value storage, making the data access \nobject have the look and feel of a dict, instead of using other popular method name choices such for \nsuch as read/write, load/dump, etc. \nOne of the dangers there is that, since the DAO looks and acts like a dict (but is not) a user might underestimate \nthe running-costs of some operations.\n\n## Should storage transform the data?\n\nWhen does \"storing data\" **not** transform data? The answer is that storage almost always transforms data in some way.\nBut some of these transformations are taken for granted, because there's so often \"attached\" \n(i.e. \"co-occur\") with the raw process of storing. In py2store, the data transformation is attached to (but not entangled with) the store object. \nThis means you have a specific place where you can check or change that aspect of storage.\n\nHaving a consistent and simple interface to storage is useful. Being able to attach key and value \ntransformations to this interface is also very useful. But though you get a lot for cheap, it's \nnot free: Mapping the many (storage systems operations) to the one (consistent interface) means \nthat, through habit, you might project some misaligned expectations. \nThis is one of the known disadvantages of Data Access Objects (DAOs))\n\nHave a look at this surreal behavior:\n\n```python\n# defining the store\nfrom py2store.base import Store\n\nclass MyFunnyStore(Store):\n    def _obj_of_data(self, data):\n        return f'hello {data}'\n    \n# trying the store out            \ns = MyFunnyStore()\ns['foo'] = 'bar'  # put 'bar' in 'foo'\nassert s['foo'] == 'hello bar'  # the value that 'foo' contains SEEMS to be 'hello bar'\n# so look how surreal that can be:\ns['foo'] = s['foo']  # retrieve what's under 'foo' and store it back into 'foo'\nassert s['foo'] == 'hello hello bar'  # what the...\ns['foo'] = s['foo']  # retrieve what's under 'foo' and store it back into 'foo'\nassert s['foo'] == 'hello hello hello bar'  # No no no! I do not like green eggs and ham!\n```\n\nThis happens, because though you've said `s['foo'] = 'bar'`, the value returned by `s['foo']` is \nactually `'hello bar'`. Why? Because though you've stored `'bar'`, you're transforming the data when you\nread it (that's what `_obj_of_data` does). \n\nIs that a desirable behavior? Transforming the stored data before handing it to the user? \nWell, this is such a common pattern that it has it's own acronym and tools named after the acronym: ETL.\nExtract, Transform, Load. \nWhat is happening here is that we composed extraction and transformation. Is that acceptable? \n\nSay I have a big store of tagged audio files of various formats but only want to work with \nfiles containing the 'gunshot' tag and lasting no more than 10s, and further get the data as a \nwaveform (a sequence of samples).   \n\nYou'd probably find this acceptable:\n\n```python\naudio_file_type=type_of(file)\nwith open(file, 'wb') as fp:\n    file_bytes = fp.read()\nwf = convert_to_waveform(file_bytes)\n```\n\nOr this:\n```python\nfilt = mk_file_filter(tag='gunshot', max_size_s=10)\nfor file in filter(filt, audio_source):\n    with open(file, 'wb') as fp:\n        file_bytes = fp.read()\n    wf = convert_to_waveform(file_bytes, audio_file_type=type_of(file))\n    send_wf_for_analysis(wf)\n```\n\nYou might even find it acceptable to put such code in a functions called `get_waveform_from_file`, \nor `generator_of_waveforms_of_filtered_files`. \n\nSo why is it harder to accept something where you make a store that encompasses your needs. \nYou do `s = WfStore(audio_source, filt)` and then\n\n```python\nwf = s[some_file]  # get a waveform\n```\n\nor\n\n```python\nfor wf in s.values():  # iterate over all waveforms\n    send_wf_for_analysis(wf)\n```\n\nIt's harder to accept precisely because of the simplicity and consistency (with dict operations). \nWe're used to `s[some_file]` meaning \"give me THE value stored in s, in the 'some_file' slot\". \nWe're not used to `s[some_file]` meaning \n\"go get the data stored in `some_file` and give it to me in a format more convenient for my use\".\n\nStores allow you to compose extraction and transformation, or transformation and loading, \nand further specifying filter, caching, indexing, and many other aspects related to storage. \nThose, py2store helps you create the perspective you want, or need. \n\nThat said, one needs to be careful that the simplicity thus created doesn't induce misuse. \nFor example, in the `MyFunnyStore` example above, we may want to use a different store to persist \nand to read, and perhaps reflect their function in their names. For example:\n\n```python\n# defining the store\nfrom py2store.base import Store\n\n\nclass ExtractAndTransform(Store):\n    def _obj_of_data(self, data):\n        return f'hello {data}'\n             \nstore = Store()\nextract_and_transform = ExtractAndTransform(store)\nstore['foo'] = 'bar'  # put 'bar' in 'foo'\nassert store['foo'] == 'bar'  # the value that store contains for 'foo' is 'bar'\nassert extract_and_transform['foo'] == 'hello bar'  # the value that extract_and_transform gives you is 'bar'\n```\n\n# Some links\n\nPresentation at PyBay 2019: https://www.youtube.com/watch?v=6lx0A6oVM5E\n\nETL: Extract, Transform, Load: https://en.wikipedia.org/wiki/Extract,_transform,_load\nORM: Object-relational mapping: https://en.wikipedia.org/wiki/Object-relational_mapping\n\nDAO: Data access object: https://en.wikipedia.org/wiki/Data_access_object\n\nDRY: https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\n\nSOC: Separation Of Concerns: https://en.wikipedia.org/wiki/Separation_of_concerns\n\nCOC: Convention Over Configuration: https://en.wikipedia.org/wiki/Convention_over_configuration","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/i2mint/py2store","keywords":"storage,interface","license":"mit","maintainer":"","maintainer_email":"","name":"py2store","package_url":"https://pypi.org/project/py2store/","platform":"any","project_url":"https://pypi.org/project/py2store/","project_urls":{"Homepage":"https://github.com/i2mint/py2store"},"provides_extra":null,"release_url":"https://pypi.org/project/py2store/0.1.20/","requires_dist":null,"requires_python":"","summary":"Tools to create simple and consistent interfaces to complicated and varied data sources.","version":"0.1.20","yanked":false,"yanked_reason":null},"last_serial":21791350,"releases":{"0.0.10":[{"comment_text":"","digests":{"blake2b_256":"7ecc21e51989a61eb63f297077adf34df08493b27d75ed5da7900ba4253d7b0e","md5":"94ded6fbe372630b3c542d8b0c208858","sha256":"8c3f4645e238ee5258c3655ea6424c5573ec5cab691144c4ed304b4f242ad83e"},"downloads":-1,"filename":"py2store-0.0.10-py3-none-any.whl","has_sig":false,"md5_digest":"94ded6fbe372630b3c542d8b0c208858","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":280434,"upload_time":"2020-09-24T19:55:35","upload_time_iso_8601":"2020-09-24T19:55:35.967874Z","url":"https://files.pythonhosted.org/packages/7e/cc/21e51989a61eb63f297077adf34df08493b27d75ed5da7900ba4253d7b0e/py2store-0.0.10-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"dddd405ae364a14847e1c0d62fe0b7300f18b773924ef9c24e66fdd1e67208ee","md5":"5ed8cb2d15891d24ad6e0e88a9f5c27a","sha256":"5f303b2e775a38ae91ba0db5ba31db4306191cc4d90b4d4eeae72f8547c9627b"},"downloads":-1,"filename":"py2store-0.0.10.tar.gz","has_sig":false,"md5_digest":"5ed8cb2d15891d24ad6e0e88a9f5c27a","packagetype":"sdist","python_version":"source","requires_python":null,"size":260996,"upload_time":"2020-09-24T19:55:40","upload_time_iso_8601":"2020-09-24T19:55:40.186779Z","url":"https://files.pythonhosted.org/packages/dd/dd/405ae364a14847e1c0d62fe0b7300f18b773924ef9c24e66fdd1e67208ee/py2store-0.0.10.tar.gz","yanked":false,"yanked_reason":null}],"0.0.11":[{"comment_text":"","digests":{"blake2b_256":"0b3f64cd199230a0fc8cff485ce45639d652a1e583d38705e614e15669ab2356","md5":"456a23fd8d72802fe8fe282a2136e0dd","sha256":"53e09cbe066f5a5ee29838fb16e37651e68a070f45a448b60530eade24f3782e"},"downloads":-1,"filename":"py2store-0.0.11-py3-none-any.whl","has_sig":false,"md5_digest":"456a23fd8d72802fe8fe282a2136e0dd","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":275510,"upload_time":"2020-12-03T21:23:18","upload_time_iso_8601":"2020-12-03T21:23:18.919131Z","url":"https://files.pythonhosted.org/packages/0b/3f/64cd199230a0fc8cff485ce45639d652a1e583d38705e614e15669ab2356/py2store-0.0.11-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1a746ccad5eafa3a7492e1581e79f0e4bdc3df99d3f45d576db2fa4843ee82c0","md5":"70f3309f2aee3874b3cb27268899ba41","sha256":"612b1d27e9b14972a06c8f2a39a809316690c601312cdb19d8c054ff7138be14"},"downloads":-1,"filename":"py2store-0.0.11.tar.gz","has_sig":false,"md5_digest":"70f3309f2aee3874b3cb27268899ba41","packagetype":"sdist","python_version":"source","requires_python":null,"size":243254,"upload_time":"2020-12-03T21:23:20","upload_time_iso_8601":"2020-12-03T21:23:20.362001Z","url":"https://files.pythonhosted.org/packages/1a/74/6ccad5eafa3a7492e1581e79f0e4bdc3df99d3f45d576db2fa4843ee82c0/py2store-0.0.11.tar.gz","yanked":false,"yanked_reason":null}],"0.0.12":[{"comment_text":"","digests":{"blake2b_256":"ecec8c26af7018b6c84a94311882349ac2aad84a25ada09de105752d217b497b","md5":"3302f042ca021607b7e3d776388e1903","sha256":"8360847a94ebe4893ac71289b10b39fb19ecd736b754402e3987ad8a7fb62c69"},"downloads":-1,"filename":"py2store-0.0.12-py3-none-any.whl","has_sig":false,"md5_digest":"3302f042ca021607b7e3d776388e1903","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":275520,"upload_time":"2020-12-04T01:16:09","upload_time_iso_8601":"2020-12-04T01:16:09.871354Z","url":"https://files.pythonhosted.org/packages/ec/ec/8c26af7018b6c84a94311882349ac2aad84a25ada09de105752d217b497b/py2store-0.0.12-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f4bfbca3b03c528b71262bde300292b49dc1ae63daaf123be7101d9e56342fbf","md5":"5f2f37192e485468349be3ec8e099966","sha256":"b5a54e3a644e2eeb3dbb7cf76549f46ac28775b8eece193801585fdb76bc0067"},"downloads":-1,"filename":"py2store-0.0.12.tar.gz","has_sig":false,"md5_digest":"5f2f37192e485468349be3ec8e099966","packagetype":"sdist","python_version":"source","requires_python":null,"size":243324,"upload_time":"2020-12-04T01:16:11","upload_time_iso_8601":"2020-12-04T01:16:11.201028Z","url":"https://files.pythonhosted.org/packages/f4/bf/bca3b03c528b71262bde300292b49dc1ae63daaf123be7101d9e56342fbf/py2store-0.0.12.tar.gz","yanked":false,"yanked_reason":null}],"0.0.13":[{"comment_text":"","digests":{"blake2b_256":"0acca04fe19c8d871b7081db23e3b4fe040f969f6e9b7e62411b7c2ab98bbc5c","md5":"03c3d2a8a8d086d56e91889e52f36ffc","sha256":"bcfa699522ef50436844463bf58ab2d7f2ef14f5c30781adc64459e07d47e7c2"},"downloads":-1,"filename":"py2store-0.0.13-py3-none-any.whl","has_sig":false,"md5_digest":"03c3d2a8a8d086d56e91889e52f36ffc","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":277114,"upload_time":"2021-01-27T01:34:33","upload_time_iso_8601":"2021-01-27T01:34:33.391423Z","url":"https://files.pythonhosted.org/packages/0a/cc/a04fe19c8d871b7081db23e3b4fe040f969f6e9b7e62411b7c2ab98bbc5c/py2store-0.0.13-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f7cb4bf6d3c4225bd0e8464d52729636013c1fc0fe1de86c8bec066b50d3f6f3","md5":"6ec7f3d62ef7e2ea221716e41f0401df","sha256":"2cd29d3746695a6ae850dbbd5279ce2c0ab08a787ec0b928e552311d3c0f8908"},"downloads":-1,"filename":"py2store-0.0.13.tar.gz","has_sig":false,"md5_digest":"6ec7f3d62ef7e2ea221716e41f0401df","packagetype":"sdist","python_version":"source","requires_python":null,"size":252188,"upload_time":"2021-01-27T01:34:35","upload_time_iso_8601":"2021-01-27T01:34:35.553508Z","url":"https://files.pythonhosted.org/packages/f7/cb/4bf6d3c4225bd0e8464d52729636013c1fc0fe1de86c8bec066b50d3f6f3/py2store-0.0.13.tar.gz","yanked":false,"yanked_reason":null}],"0.0.14":[{"comment_text":"","digests":{"blake2b_256":"27a30821fb4fb2c6827bac5e0213a3c715b164cd6ac12a7d3fcfbc09de2bf64c","md5":"8a871f51b205d5f83ae5a7cc62c5cf68","sha256":"fae84793839bbeeeb971b58ce12dc92da2806de23ec40c506fd766ce5a646f6d"},"downloads":-1,"filename":"py2store-0.0.14-py3-none-any.whl","has_sig":false,"md5_digest":"8a871f51b205d5f83ae5a7cc62c5cf68","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":260236,"upload_time":"2021-04-07T05:25:24","upload_time_iso_8601":"2021-04-07T05:25:24.612029Z","url":"https://files.pythonhosted.org/packages/27/a3/0821fb4fb2c6827bac5e0213a3c715b164cd6ac12a7d3fcfbc09de2bf64c/py2store-0.0.14-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"6765a7b6d30d3f01cf854ca54caef7449185f3749d77d2f71a5cade27e564f67","md5":"7b2924037ddd4de6baf3bae4780e1f6d","sha256":"11756893d37252bb61c4db1ac8b1fd37337fe553a89f57c77c9913849980a347"},"downloads":-1,"filename":"py2store-0.0.14.tar.gz","has_sig":false,"md5_digest":"7b2924037ddd4de6baf3bae4780e1f6d","packagetype":"sdist","python_version":"source","requires_python":null,"size":243274,"upload_time":"2021-04-07T05:25:26","upload_time_iso_8601":"2021-04-07T05:25:26.215271Z","url":"https://files.pythonhosted.org/packages/67/65/a7b6d30d3f01cf854ca54caef7449185f3749d77d2f71a5cade27e564f67/py2store-0.0.14.tar.gz","yanked":false,"yanked_reason":null}],"0.0.17":[{"comment_text":"","digests":{"blake2b_256":"1bd261cac8dbadfc6271b93a689991fbdd07ab881172e8f7abd0eec7130ffaee","md5":"9fee9aca9e40a197f4b76573f31335e5","sha256":"3803bdd930f35b678cb920d28465025ca9b2fe46f866cfea068026a119e58e71"},"downloads":-1,"filename":"py2store-0.0.17-py3-none-any.whl","has_sig":false,"md5_digest":"9fee9aca9e40a197f4b76573f31335e5","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":182958,"upload_time":"2021-04-08T12:55:52","upload_time_iso_8601":"2021-04-08T12:55:52.061871Z","url":"https://files.pythonhosted.org/packages/1b/d2/61cac8dbadfc6271b93a689991fbdd07ab881172e8f7abd0eec7130ffaee/py2store-0.0.17-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4651956bf3102f2d8f3d4184308a9b59b881e492a8dfcc9f533c0bd9485fe007","md5":"f61579e84d9387665c4839266fc36aa2","sha256":"ba35b19e715e58263b7494fbb44dc23e25f6ce33fb96b47ac57b28af5d438fdd"},"downloads":-1,"filename":"py2store-0.0.17.tar.gz","has_sig":false,"md5_digest":"f61579e84d9387665c4839266fc36aa2","packagetype":"sdist","python_version":"source","requires_python":null,"size":194750,"upload_time":"2021-04-08T12:55:54","upload_time_iso_8601":"2021-04-08T12:55:54.919960Z","url":"https://files.pythonhosted.org/packages/46/51/956bf3102f2d8f3d4184308a9b59b881e492a8dfcc9f533c0bd9485fe007/py2store-0.0.17.tar.gz","yanked":false,"yanked_reason":null}],"0.0.18":[{"comment_text":"","digests":{"blake2b_256":"2f5f616214f128d3d0ddcc1f5075c8898947aa6111745d32b0c7e1b15bb4f75e","md5":"4b18dcff9c3ebd5e2b855e7348aac697","sha256":"4d009df2e23b6ed0d8192ab7fec341f36efe54696cf1537508c2873ca8896794"},"downloads":-1,"filename":"py2store-0.0.18-py3-none-any.whl","has_sig":false,"md5_digest":"4b18dcff9c3ebd5e2b855e7348aac697","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":145287,"upload_time":"2021-04-19T18:32:25","upload_time_iso_8601":"2021-04-19T18:32:25.216577Z","url":"https://files.pythonhosted.org/packages/2f/5f/616214f128d3d0ddcc1f5075c8898947aa6111745d32b0c7e1b15bb4f75e/py2store-0.0.18-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"38712c2ee8eb130c2d2535a9dd52ec2661ddc9b93ac654051073916d2ca82456","md5":"0951bd2d098727c4201914e154da310c","sha256":"5935108b13b877ec39c3e3e6fc3e29e83b5eca36b4faf0a0188e6deba75b596b"},"downloads":-1,"filename":"py2store-0.0.18.tar.gz","has_sig":false,"md5_digest":"0951bd2d098727c4201914e154da310c","packagetype":"sdist","python_version":"source","requires_python":null,"size":166450,"upload_time":"2021-04-19T18:32:28","upload_time_iso_8601":"2021-04-19T18:32:28.455648Z","url":"https://files.pythonhosted.org/packages/38/71/2c2ee8eb130c2d2535a9dd52ec2661ddc9b93ac654051073916d2ca82456/py2store-0.0.18.tar.gz","yanked":false,"yanked_reason":null}],"0.0.2":[{"comment_text":"","digests":{"blake2b_256":"dacd647550fd4c49692a4d2c600f70d84ff303365460791e6a219a67950d9c4f","md5":"e6d94e54421296894f5db060915eca17","sha256":"5294eaf695758fdb4ee60d3022b2cb750e9967453c618ad7e848da719308aaad"},"downloads":-1,"filename":"py2store-0.0.2.tar.gz","has_sig":false,"md5_digest":"e6d94e54421296894f5db060915eca17","packagetype":"sdist","python_version":"source","requires_python":null,"size":78406,"upload_time":"2019-08-15T17:01:35","upload_time_iso_8601":"2019-08-15T17:01:35.737562Z","url":"https://files.pythonhosted.org/packages/da/cd/647550fd4c49692a4d2c600f70d84ff303365460791e6a219a67950d9c4f/py2store-0.0.2.tar.gz","yanked":false,"yanked_reason":null}],"0.0.3":[{"comment_text":"","digests":{"blake2b_256":"362fb1b35acc5c1d13e75a3ca64ac67bbb06c522bfb77cd9246be23444d69f16","md5":"fa147201e55d5dc606f81c3fdedcbf87","sha256":"d894c9cbb1a5dba1d72a89f951119fb5adf63c1b14e327edfe318ee7646e5cb0"},"downloads":-1,"filename":"py2store-0.0.3.tar.gz","has_sig":false,"md5_digest":"fa147201e55d5dc606f81c3fdedcbf87","packagetype":"sdist","python_version":"source","requires_python":null,"size":82655,"upload_time":"2019-08-18T17:56:11","upload_time_iso_8601":"2019-08-18T17:56:11.425513Z","url":"https://files.pythonhosted.org/packages/36/2f/b1b35acc5c1d13e75a3ca64ac67bbb06c522bfb77cd9246be23444d69f16/py2store-0.0.3.tar.gz","yanked":false,"yanked_reason":null}],"0.0.4":[{"comment_text":"","digests":{"blake2b_256":"5f69dc4ee6bb6af8fd5b81fae29d31434961d096436277ec0b462de801b4dd6b","md5":"5935d5e228f263968fc2999fb3ca8a89","sha256":"e994cf758cf17084374b11c967705c4f26c9cd56004f9a40f7112dabe194c504"},"downloads":-1,"filename":"py2store-0.0.4.tar.gz","has_sig":false,"md5_digest":"5935d5e228f263968fc2999fb3ca8a89","packagetype":"sdist","python_version":"source","requires_python":null,"size":126385,"upload_time":"2019-11-01T23:53:21","upload_time_iso_8601":"2019-11-01T23:53:21.284244Z","url":"https://files.pythonhosted.org/packages/5f/69/dc4ee6bb6af8fd5b81fae29d31434961d096436277ec0b462de801b4dd6b/py2store-0.0.4.tar.gz","yanked":false,"yanked_reason":null}],"0.0.5":[{"comment_text":"","digests":{"blake2b_256":"249835332f4deacf0f134bf0661dc057b230fc37dd6687a028081c9c384d0ac9","md5":"29c215e5ea6b24935218500df1b43b3a","sha256":"0f8d664b715bfeffc93fbbb848207b1909d578cbbf7ea4d47bfea435efb72d3a"},"downloads":-1,"filename":"py2store-0.0.5.tar.gz","has_sig":false,"md5_digest":"29c215e5ea6b24935218500df1b43b3a","packagetype":"sdist","python_version":"source","requires_python":null,"size":126471,"upload_time":"2019-11-02T00:16:27","upload_time_iso_8601":"2019-11-02T00:16:27.659287Z","url":"https://files.pythonhosted.org/packages/24/98/35332f4deacf0f134bf0661dc057b230fc37dd6687a028081c9c384d0ac9/py2store-0.0.5.tar.gz","yanked":false,"yanked_reason":null}],"0.0.6":[{"comment_text":"","digests":{"blake2b_256":"d9d8991be1666eb851d853d9eba104ae991f1b382885ed7771d789dd396ad79b","md5":"f1feb50236ee0442aa47a7c9f9b7088c","sha256":"895cc35b018eab531495f563beb42238783b4af6735887e8229031fc17e5ccec"},"downloads":-1,"filename":"py2store-0.0.6.tar.gz","has_sig":false,"md5_digest":"f1feb50236ee0442aa47a7c9f9b7088c","packagetype":"sdist","python_version":"source","requires_python":null,"size":159406,"upload_time":"2020-03-22T23:06:24","upload_time_iso_8601":"2020-03-22T23:06:24.754606Z","url":"https://files.pythonhosted.org/packages/d9/d8/991be1666eb851d853d9eba104ae991f1b382885ed7771d789dd396ad79b/py2store-0.0.6.tar.gz","yanked":false,"yanked_reason":null}],"0.0.7":[{"comment_text":"","digests":{"blake2b_256":"0642b43181997328f785c8c34a30c94376d3dbce7c5a31de61f269a7b29f1611","md5":"2f6dd8ffba77a6837d0940e359fe4cfc","sha256":"97ff745a1c7ce66d0261fb53169aa7b7e0e66587bf719861eaeea873598d7827"},"downloads":-1,"filename":"py2store-0.0.7.tar.gz","has_sig":false,"md5_digest":"2f6dd8ffba77a6837d0940e359fe4cfc","packagetype":"sdist","python_version":"source","requires_python":null,"size":207859,"upload_time":"2020-05-01T23:09:22","upload_time_iso_8601":"2020-05-01T23:09:22.876155Z","url":"https://files.pythonhosted.org/packages/06/42/b43181997328f785c8c34a30c94376d3dbce7c5a31de61f269a7b29f1611/py2store-0.0.7.tar.gz","yanked":false,"yanked_reason":null}],"0.0.8":[{"comment_text":"","digests":{"blake2b_256":"3e2e17a85c91d689b0fed42a103ce3af2a3ef9bc263a1f477b539cdb66dc5051","md5":"d0fbc2f4d2af01d1ec345f8c6ebda5ab","sha256":"0b993761d42bdb5c2a3bd6ec82007bfc5727157728d3ed0a9e70ce79c09cc111"},"downloads":-1,"filename":"py2store-0.0.8.tar.gz","has_sig":false,"md5_digest":"d0fbc2f4d2af01d1ec345f8c6ebda5ab","packagetype":"sdist","python_version":"source","requires_python":null,"size":213572,"upload_time":"2020-09-10T16:18:53","upload_time_iso_8601":"2020-09-10T16:18:53.537279Z","url":"https://files.pythonhosted.org/packages/3e/2e/17a85c91d689b0fed42a103ce3af2a3ef9bc263a1f477b539cdb66dc5051/py2store-0.0.8.tar.gz","yanked":false,"yanked_reason":null}],"0.0.9":[{"comment_text":"","digests":{"blake2b_256":"fe0ee3a12d32f9ca31502306420b1175d8dae16b90055bcff141f76a68652838","md5":"58a4d4e6be079e77acce185641bc9277","sha256":"02a7c387f700daca542a89fff237ee6eddf6eac590917cefc233770bb9585144"},"downloads":-1,"filename":"py2store-0.0.9-py3-none-any.whl","has_sig":false,"md5_digest":"58a4d4e6be079e77acce185641bc9277","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":278588,"upload_time":"2020-09-23T20:51:48","upload_time_iso_8601":"2020-09-23T20:51:48.530019Z","url":"https://files.pythonhosted.org/packages/fe/0e/e3a12d32f9ca31502306420b1175d8dae16b90055bcff141f76a68652838/py2store-0.0.9-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"fcaedfbf3cd29b48439fb4b9e1fe9f433b6d94e5446373ef95d5072c20cb37ed","md5":"112f1471fac32371e43c8bbe26f1fd2d","sha256":"a71282454943f0b893f73113ae2b07b3f92acbf18d3539a530a2128f590b8e91"},"downloads":-1,"filename":"py2store-0.0.9.tar.gz","has_sig":false,"md5_digest":"112f1471fac32371e43c8bbe26f1fd2d","packagetype":"sdist","python_version":"source","requires_python":null,"size":259164,"upload_time":"2020-09-23T20:53:28","upload_time_iso_8601":"2020-09-23T20:53:28.716140Z","url":"https://files.pythonhosted.org/packages/fc/ae/dfbf3cd29b48439fb4b9e1fe9f433b6d94e5446373ef95d5072c20cb37ed/py2store-0.0.9.tar.gz","yanked":false,"yanked_reason":null}],"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"2431c6a9df703c222efb9f754c0d6ca6c1b55f69452dcbf3e1fc242cf47f50ec","md5":"c14d972bb4df34d4f0c5779e289db519","sha256":"702f5a817fedc59fc3026f78a8f4e07d443ee323d1fe3f6c1b6c27846df4a38a"},"downloads":-1,"filename":"py2store-0.1.0.tar.gz","has_sig":false,"md5_digest":"c14d972bb4df34d4f0c5779e289db519","packagetype":"sdist","python_version":"source","requires_python":null,"size":158509,"upload_time":"2021-04-23T23:18:33","upload_time_iso_8601":"2021-04-23T23:18:33.908077Z","url":"https://files.pythonhosted.org/packages/24/31/c6a9df703c222efb9f754c0d6ca6c1b55f69452dcbf3e1fc242cf47f50ec/py2store-0.1.0.tar.gz","yanked":false,"yanked_reason":null}],"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"94867d139a64c380dab393d3852558ed977c012ca50dcb00068a6bc03e0293ff","md5":"6615df42b44549a78a4c48a24b4b2035","sha256":"a5e2a718c6066719af904607f5c44a4c6879b4456d1371bcebf9be10ead240b8"},"downloads":-1,"filename":"py2store-0.1.1.tar.gz","has_sig":false,"md5_digest":"6615df42b44549a78a4c48a24b4b2035","packagetype":"sdist","python_version":"source","requires_python":null,"size":158531,"upload_time":"2021-04-29T21:01:14","upload_time_iso_8601":"2021-04-29T21:01:14.760550Z","url":"https://files.pythonhosted.org/packages/94/86/7d139a64c380dab393d3852558ed977c012ca50dcb00068a6bc03e0293ff/py2store-0.1.1.tar.gz","yanked":false,"yanked_reason":null}],"0.1.10":[{"comment_text":"","digests":{"blake2b_256":"daf4c8adae075143cccab3641f90eef8d510d0e34ab01b53153a3ce71a0bcdd4","md5":"238c9c5ef91cdd81b3291c631946ff44","sha256":"0df0092ca275b0f65ac19a89e6e213a655a2d48abd6f0384f2ad1594b386fc27"},"downloads":-1,"filename":"py2store-0.1.10.tar.gz","has_sig":false,"md5_digest":"238c9c5ef91cdd81b3291c631946ff44","packagetype":"sdist","python_version":"source","requires_python":null,"size":146221,"upload_time":"2022-01-05T20:21:29","upload_time_iso_8601":"2022-01-05T20:21:29.106388Z","url":"https://files.pythonhosted.org/packages/da/f4/c8adae075143cccab3641f90eef8d510d0e34ab01b53153a3ce71a0bcdd4/py2store-0.1.10.tar.gz","yanked":false,"yanked_reason":null}],"0.1.11":[{"comment_text":"","digests":{"blake2b_256":"2230bd01fbf3715a3a12f726a702352556b4a4566e63b340b4a1b0f99e936096","md5":"70337eb26805d9695d7afc8d6ec71e4a","sha256":"8aa990429274a6fd9cc45cc7698c951a67265e3ac152418c7f43c4cc7e435f88"},"downloads":-1,"filename":"py2store-0.1.11.tar.gz","has_sig":false,"md5_digest":"70337eb26805d9695d7afc8d6ec71e4a","packagetype":"sdist","python_version":"source","requires_python":null,"size":146361,"upload_time":"2022-01-14T19:40:07","upload_time_iso_8601":"2022-01-14T19:40:07.870196Z","url":"https://files.pythonhosted.org/packages/22/30/bd01fbf3715a3a12f726a702352556b4a4566e63b340b4a1b0f99e936096/py2store-0.1.11.tar.gz","yanked":false,"yanked_reason":null}],"0.1.12":[{"comment_text":"","digests":{"blake2b_256":"73e9ebd0b62354053faa44d8aa4ee0a68571407ebab8cab68220024cd3fc00b8","md5":"719268d8b792af3a806aabb35b3e3087","sha256":"89a063fd110f706a4563eef4f9ea3ee444305e1e09e55f67db83bffa435265f8"},"downloads":-1,"filename":"py2store-0.1.12.tar.gz","has_sig":false,"md5_digest":"719268d8b792af3a806aabb35b3e3087","packagetype":"sdist","python_version":"source","requires_python":null,"size":146420,"upload_time":"2022-07-11T22:52:19","upload_time_iso_8601":"2022-07-11T22:52:19.891877Z","url":"https://files.pythonhosted.org/packages/73/e9/ebd0b62354053faa44d8aa4ee0a68571407ebab8cab68220024cd3fc00b8/py2store-0.1.12.tar.gz","yanked":false,"yanked_reason":null}],"0.1.13":[{"comment_text":"","digests":{"blake2b_256":"7a167bd389391ec8a8491e38c83b0a592460dada245b02a47ad3471679b96f37","md5":"c17da2d6ddd0c725661d2dba23f7aadb","sha256":"523921930f24ca638922bad4d40ccca4c35d9d1b2ab05909163f84a04a3c0975"},"downloads":-1,"filename":"py2store-0.1.13.tar.gz","has_sig":false,"md5_digest":"c17da2d6ddd0c725661d2dba23f7aadb","packagetype":"sdist","python_version":"source","requires_python":null,"size":146392,"upload_time":"2022-07-13T23:42:51","upload_time_iso_8601":"2022-07-13T23:42:51.715837Z","url":"https://files.pythonhosted.org/packages/7a/16/7bd389391ec8a8491e38c83b0a592460dada245b02a47ad3471679b96f37/py2store-0.1.13.tar.gz","yanked":false,"yanked_reason":null}],"0.1.14":[{"comment_text":"","digests":{"blake2b_256":"86c28bf7b081febab85f05ad0d4ad3904a15bd4ba9806f95e83dc598c292838f","md5":"9709e5f7a15ae64be13c2c059c02c2a5","sha256":"32f21930fe34d22dbc6ce14798715a50cc83099efbae46882ebd484f06e4bbe6"},"downloads":-1,"filename":"py2store-0.1.14.tar.gz","has_sig":false,"md5_digest":"9709e5f7a15ae64be13c2c059c02c2a5","packagetype":"sdist","python_version":"source","requires_python":null,"size":146412,"upload_time":"2022-09-26T08:12:02","upload_time_iso_8601":"2022-09-26T08:12:02.897384Z","url":"https://files.pythonhosted.org/packages/86/c2/8bf7b081febab85f05ad0d4ad3904a15bd4ba9806f95e83dc598c292838f/py2store-0.1.14.tar.gz","yanked":false,"yanked_reason":null}],"0.1.15":[{"comment_text":"","digests":{"blake2b_256":"c4209adcdfc387074f9bc5c49fa33ff8ffe670899b91b49ade730ae5c579bc49","md5":"9032fb961dfbcdca2e2e366a94cc48d2","sha256":"40c9e818c83ba0fa57f58d273c0f132d700292b35076446458c42f188d4cdcb3"},"downloads":-1,"filename":"py2store-0.1.15.tar.gz","has_sig":false,"md5_digest":"9032fb961dfbcdca2e2e366a94cc48d2","packagetype":"sdist","python_version":"source","requires_python":null,"size":142350,"upload_time":"2022-09-29T13:35:09","upload_time_iso_8601":"2022-09-29T13:35:09.512997Z","url":"https://files.pythonhosted.org/packages/c4/20/9adcdfc387074f9bc5c49fa33ff8ffe670899b91b49ade730ae5c579bc49/py2store-0.1.15.tar.gz","yanked":false,"yanked_reason":null}],"0.1.16":[{"comment_text":"","digests":{"blake2b_256":"b940426b9fb4983c7a33c9dc508712bc642e31d67ba6c5a691e3e82c18803d8b","md5":"0cbedef459efa29b13538f3f3e33b008","sha256":"bf52111c14f832e0ba71f631f70d5a825df1dfd1ea59a6409689d9e63a0db382"},"downloads":-1,"filename":"py2store-0.1.16.tar.gz","has_sig":false,"md5_digest":"0cbedef459efa29b13538f3f3e33b008","packagetype":"sdist","python_version":"source","requires_python":null,"size":142346,"upload_time":"2022-10-26T14:20:24","upload_time_iso_8601":"2022-10-26T14:20:24.383713Z","url":"https://files.pythonhosted.org/packages/b9/40/426b9fb4983c7a33c9dc508712bc642e31d67ba6c5a691e3e82c18803d8b/py2store-0.1.16.tar.gz","yanked":false,"yanked_reason":null}],"0.1.17":[{"comment_text":"","digests":{"blake2b_256":"10c6af523f3562fb9f48ed04da17bbea81883f57b0e74bf5a1be023131f600f7","md5":"68fadfdc2641fc7ce70c7997230d0cad","sha256":"eab25b97cbfd4b468c37f06460eb71422540f8782fbf35aabb3941eb742674cb"},"downloads":-1,"filename":"py2store-0.1.17.tar.gz","has_sig":false,"md5_digest":"68fadfdc2641fc7ce70c7997230d0cad","packagetype":"sdist","python_version":"source","requires_python":null,"size":143145,"upload_time":"2023-02-28T09:22:11","upload_time_iso_8601":"2023-02-28T09:22:11.124249Z","url":"https://files.pythonhosted.org/packages/10/c6/af523f3562fb9f48ed04da17bbea81883f57b0e74bf5a1be023131f600f7/py2store-0.1.17.tar.gz","yanked":false,"yanked_reason":null}],"0.1.18":[{"comment_text":"","digests":{"blake2b_256":"79f1869541dc28cf96a85b7dc434235e7e7dd47ee761a9c915f2daa6cf3256cb","md5":"dcf32df46ba53966f952a7f2c9e8123d","sha256":"bf4905804d461ae1c2517e303a0d386202a17bfe286c56e74760a2bfcb867ce9"},"downloads":-1,"filename":"py2store-0.1.18.tar.gz","has_sig":false,"md5_digest":"dcf32df46ba53966f952a7f2c9e8123d","packagetype":"sdist","python_version":"source","requires_python":null,"size":143141,"upload_time":"2023-02-28T09:25:53","upload_time_iso_8601":"2023-02-28T09:25:53.171525Z","url":"https://files.pythonhosted.org/packages/79/f1/869541dc28cf96a85b7dc434235e7e7dd47ee761a9c915f2daa6cf3256cb/py2store-0.1.18.tar.gz","yanked":false,"yanked_reason":null}],"0.1.19":[{"comment_text":"","digests":{"blake2b_256":"c5a69ef9fc81a60bc325a460ea1e0cab2e985abfb6f212824e2aaa6bcbd6fa91","md5":"fd2d10ee73e2a02daea1ed4e70f26039","sha256":"fdbad752b71434b72aebbe80a6228ba30c9398ef99d367113113dc9328562b3a"},"downloads":-1,"filename":"py2store-0.1.19.tar.gz","has_sig":false,"md5_digest":"fd2d10ee73e2a02daea1ed4e70f26039","packagetype":"sdist","python_version":"source","requires_python":null,"size":143084,"upload_time":"2023-04-03T07:59:03","upload_time_iso_8601":"2023-04-03T07:59:03.970283Z","url":"https://files.pythonhosted.org/packages/c5/a6/9ef9fc81a60bc325a460ea1e0cab2e985abfb6f212824e2aaa6bcbd6fa91/py2store-0.1.19.tar.gz","yanked":false,"yanked_reason":null}],"0.1.2":[{"comment_text":"","digests":{"blake2b_256":"316368d15997bc9017d281c999a35d44a39a1763ebd87a995af6564e13e0e02d","md5":"c257042580122a396cf7a5b5752c2450","sha256":"8c9c96c35c76cfa19cc7a01606468c30f77e6d2444a414a409b4dee45a9effb7"},"downloads":-1,"filename":"py2store-0.1.2.tar.gz","has_sig":false,"md5_digest":"c257042580122a396cf7a5b5752c2450","packagetype":"sdist","python_version":"source","requires_python":null,"size":158534,"upload_time":"2021-04-29T23:08:06","upload_time_iso_8601":"2021-04-29T23:08:06.458211Z","url":"https://files.pythonhosted.org/packages/31/63/68d15997bc9017d281c999a35d44a39a1763ebd87a995af6564e13e0e02d/py2store-0.1.2.tar.gz","yanked":false,"yanked_reason":null}],"0.1.20":[{"comment_text":"","digests":{"blake2b_256":"13583069b3b89c54f633740318f18247f15f18cff44c729fd495422a7cadcbb2","md5":"84447174e83e922f67c0c147511e51cc","sha256":"8fe1e15a9c55ed442ddcda7e8ac529e1baddf1e31ba78bff413be3715ad45134"},"downloads":-1,"filename":"py2store-0.1.20.tar.gz","has_sig":false,"md5_digest":"84447174e83e922f67c0c147511e51cc","packagetype":"sdist","python_version":"source","requires_python":null,"size":143085,"upload_time":"2024-02-08T15:48:10","upload_time_iso_8601":"2024-02-08T15:48:10.022962Z","url":"https://files.pythonhosted.org/packages/13/58/3069b3b89c54f633740318f18247f15f18cff44c729fd495422a7cadcbb2/py2store-0.1.20.tar.gz","yanked":false,"yanked_reason":null}],"0.1.3":[{"comment_text":"","digests":{"blake2b_256":"087955cabe8c2d0fdbc60aed1c00869013e2577a38407a907f64984fd4a2289c","md5":"0cda318de185a3d3b9c4d2469fcff19b","sha256":"f5068829e8971ad5ae22301207c0f6e1f05c15f84daefb52c762221473f335b2"},"downloads":-1,"filename":"py2store-0.1.3.tar.gz","has_sig":false,"md5_digest":"0cda318de185a3d3b9c4d2469fcff19b","packagetype":"sdist","python_version":"source","requires_python":null,"size":154755,"upload_time":"2021-11-10T17:07:14","upload_time_iso_8601":"2021-11-10T17:07:14.503637Z","url":"https://files.pythonhosted.org/packages/08/79/55cabe8c2d0fdbc60aed1c00869013e2577a38407a907f64984fd4a2289c/py2store-0.1.3.tar.gz","yanked":false,"yanked_reason":null}],"0.1.4":[{"comment_text":"","digests":{"blake2b_256":"34fce375704562f363918c1005f36c5035b79edd6f7b7c2a115122ea62e6f017","md5":"d19f7f1ff24678b8cade60aede5aec01","sha256":"d603ad65c1443e54f25f342b312171eeaad8f2d9dc0119caff5519c40e83efd9"},"downloads":-1,"filename":"py2store-0.1.4.tar.gz","has_sig":false,"md5_digest":"d19f7f1ff24678b8cade60aede5aec01","packagetype":"sdist","python_version":"source","requires_python":null,"size":154932,"upload_time":"2021-11-10T17:30:29","upload_time_iso_8601":"2021-11-10T17:30:29.769953Z","url":"https://files.pythonhosted.org/packages/34/fc/e375704562f363918c1005f36c5035b79edd6f7b7c2a115122ea62e6f017/py2store-0.1.4.tar.gz","yanked":false,"yanked_reason":null}],"0.1.5":[{"comment_text":"","digests":{"blake2b_256":"7646fc0d1d40f19cc48b0d399487c2595bf532d1fa46c45282014e9d80568925","md5":"d9a6bbdc8b424b07a07713ba8a2f8fca","sha256":"78a73b230e01c71cf92999e334597002adde262e7450bd6905bf58811efe193f"},"downloads":-1,"filename":"py2store-0.1.5.tar.gz","has_sig":false,"md5_digest":"d9a6bbdc8b424b07a07713ba8a2f8fca","packagetype":"sdist","python_version":"source","requires_python":null,"size":154756,"upload_time":"2021-11-10T17:36:52","upload_time_iso_8601":"2021-11-10T17:36:52.193194Z","url":"https://files.pythonhosted.org/packages/76/46/fc0d1d40f19cc48b0d399487c2595bf532d1fa46c45282014e9d80568925/py2store-0.1.5.tar.gz","yanked":false,"yanked_reason":null}],"0.1.6":[{"comment_text":"","digests":{"blake2b_256":"74f898bcf979707e9f7f0d10718cbd73863e54a546ea64f5ecfbd189bbe1f90c","md5":"f530cffa56fc8ca05ea2f50a59db963e","sha256":"38f4d979284534423c7771fcbf3bcfd3c8a1af7a4b452e031137b9fb00e32b70"},"downloads":-1,"filename":"py2store-0.1.6.tar.gz","has_sig":false,"md5_digest":"f530cffa56fc8ca05ea2f50a59db963e","packagetype":"sdist","python_version":"source","requires_python":null,"size":154747,"upload_time":"2021-11-12T20:20:40","upload_time_iso_8601":"2021-11-12T20:20:40.177203Z","url":"https://files.pythonhosted.org/packages/74/f8/98bcf979707e9f7f0d10718cbd73863e54a546ea64f5ecfbd189bbe1f90c/py2store-0.1.6.tar.gz","yanked":false,"yanked_reason":null}],"0.1.7":[{"comment_text":"","digests":{"blake2b_256":"5cfc5411569cded67041706fff0a7d152bbeb6b7c4f780e89bdaa1dc3e2180db","md5":"3729354a2baa45f4e72c8bb87f19229e","sha256":"1942d251dde8113fb7f1c4f608fba6190dc8a061fce81e1b73a82557d3a4c6f7"},"downloads":-1,"filename":"py2store-0.1.7.tar.gz","has_sig":false,"md5_digest":"3729354a2baa45f4e72c8bb87f19229e","packagetype":"sdist","python_version":"source","requires_python":null,"size":154760,"upload_time":"2021-12-08T00:35:44","upload_time_iso_8601":"2021-12-08T00:35:44.401810Z","url":"https://files.pythonhosted.org/packages/5c/fc/5411569cded67041706fff0a7d152bbeb6b7c4f780e89bdaa1dc3e2180db/py2store-0.1.7.tar.gz","yanked":false,"yanked_reason":null}],"0.1.8":[{"comment_text":"","digests":{"blake2b_256":"7b5df71833178d15684e7e5e10860261c60279a16d0afa16ff4155964f0272c2","md5":"840c8009a0f7aa9c2ecd3c369e710001","sha256":"acde9b1e39d91f9c737f44b519bb55c7f3ba24ee065103a6a63bc1843831d472"},"downloads":-1,"filename":"py2store-0.1.8.tar.gz","has_sig":false,"md5_digest":"840c8009a0f7aa9c2ecd3c369e710001","packagetype":"sdist","python_version":"source","requires_python":null,"size":154882,"upload_time":"2021-12-16T20:57:05","upload_time_iso_8601":"2021-12-16T20:57:05.863688Z","url":"https://files.pythonhosted.org/packages/7b/5d/f71833178d15684e7e5e10860261c60279a16d0afa16ff4155964f0272c2/py2store-0.1.8.tar.gz","yanked":false,"yanked_reason":null}],"0.1.9":[{"comment_text":"","digests":{"blake2b_256":"1d0f25311c13316bb7bd25b3729a2261736f8775322dfe80fed41669a1c6b669","md5":"f5266684aecedcb1274aded2edf78758","sha256":"52457a543d916f0c0a647976b5bc16e811e4d45bdfbe632766b60fe71ec41da7"},"downloads":-1,"filename":"py2store-0.1.9.tar.gz","has_sig":false,"md5_digest":"f5266684aecedcb1274aded2edf78758","packagetype":"sdist","python_version":"source","requires_python":null,"size":146319,"upload_time":"2021-12-23T20:25:24","upload_time_iso_8601":"2021-12-23T20:25:24.856522Z","url":"https://files.pythonhosted.org/packages/1d/0f/25311c13316bb7bd25b3729a2261736f8775322dfe80fed41669a1c6b669/py2store-0.1.9.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"13583069b3b89c54f633740318f18247f15f18cff44c729fd495422a7cadcbb2","md5":"84447174e83e922f67c0c147511e51cc","sha256":"8fe1e15a9c55ed442ddcda7e8ac529e1baddf1e31ba78bff413be3715ad45134"},"downloads":-1,"filename":"py2store-0.1.20.tar.gz","has_sig":false,"md5_digest":"84447174e83e922f67c0c147511e51cc","packagetype":"sdist","python_version":"source","requires_python":null,"size":143085,"upload_time":"2024-02-08T15:48:10","upload_time_iso_8601":"2024-02-08T15:48:10.022962Z","url":"https://files.pythonhosted.org/packages/13/58/3069b3b89c54f633740318f18247f15f18cff44c729fd495422a7cadcbb2/py2store-0.1.20.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
