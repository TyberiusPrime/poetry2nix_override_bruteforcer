{"info":{"author":"Patrick Kidger","author_email":"contact@kidger.site","bugtrack_url":null,"classifiers":["Development Status :: 3 - Alpha","Framework :: Pytest","Intended Audience :: Developers","Intended Audience :: Financial and Insurance Industry","Intended Audience :: Information Technology","Intended Audience :: Science/Research","License :: OSI Approved :: Apache Software License","Natural Language :: English","Programming Language :: Python :: 3","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: Implementation :: CPython","Topic :: Scientific/Engineering :: Artificial Intelligence","Topic :: Scientific/Engineering :: Information Analysis","Topic :: Scientific/Engineering :: Mathematics"],"description":"<h1 align='center'>torchtyping</h1>\n<h2 align='center'>Type annotations for a tensor's shape, dtype, names, ...</h2>\n\nTurn this:\n```python\ndef batch_outer_product(x: torch.Tensor, y: torch.Tensor) -> torch.Tensor:\n    # x has shape (batch, x_channels)\n    # y has shape (batch, y_channels)\n    # return has shape (batch, x_channels, y_channels)\n\n    return x.unsqueeze(-1) * y.unsqueeze(-2)\n```\ninto this:\n```python\ndef batch_outer_product(x:   TensorType[\"batch\", \"x_channels\"],\n                        y:   TensorType[\"batch\", \"y_channels\"]\n                        ) -> TensorType[\"batch\", \"x_channels\", \"y_channels\"]:\n\n    return x.unsqueeze(-1) * y.unsqueeze(-2)\n```\n**with programmatic checking that the shape (dtype, ...) specification is met.**\n\nBye-bye bugs! Say hello to enforced, clear documentation of your code.\n\nIf (like me) you find yourself littering your code with comments like `# x has shape (batch, hidden_state)` or statements like `assert x.shape == y.shape` , just to keep track of what shape everything is, **then this is for you.**\n\n---\n\n## Installation\n\n```bash\npip install torchtyping\n```\n\nRequires Python 3.7+ and PyTorch 1.7.0+.\n\n## Usage\n\n`torchtyping` allows for type annotating:\n\n- **shape**: size, number of dimensions;\n- **dtype** (float, integer, etc.);\n- **layout** (dense, sparse);\n- **names** of dimensions as per [named tensors](https://pytorch.org/docs/stable/named_tensor.html);\n- **arbitrary number of batch dimensions** with `...`;\n- **...plus anything else you like**, as `torchtyping` is highly extensible.\n\nIf [`typeguard`](https://github.com/agronholm/typeguard) is (optionally) installed then **at runtime the types can be checked** to ensure that the tensors really are of the advertised shape, dtype, etc. \n\n```python\n# EXAMPLE\n\nfrom torch import rand\nfrom torchtyping import TensorType, patch_typeguard\nfrom typeguard import typechecked\n\npatch_typeguard()  # use before @typechecked\n\n@typechecked\ndef func(x: TensorType[\"batch\"],\n         y: TensorType[\"batch\"]) -> TensorType[\"batch\"]:\n    return x + y\n\nfunc(rand(3), rand(3))  # works\nfunc(rand(3), rand(1))\n# TypeError: Dimension 'batch' of inconsistent size. Got both 1 and 3.\n```\n\n`typeguard` also has an import hook that can be used to automatically test an entire module, without needing to manually add `@typeguard.typechecked` decorators.\n\nIf you're not using `typeguard` then `torchtyping.patch_typeguard()` can be omitted altogether, and `torchtyping` just used for documentation purposes. If you're not already using `typeguard` for your regular Python programming, then strongly consider using it. It's a great way to squash bugs. Both `typeguard` and `torchtyping` also integrate with `pytest`, so if you're concerned about any performance penalty then they can be enabled during tests only.\n\n## API\n\n```python\ntorchtyping.TensorType[shape, dtype, layout, details]\n```\n\nThe core of the library.\n\nEach of `shape`, `dtype`, `layout`, `details` are optional.\n\n- The `shape` argument can be any of:\n  - An `int`: the dimension must be of exactly this size. If it is `-1` then any size is allowed.\n  - A `str`: the size of the dimension passed at runtime will be bound to this name, and all tensors checked that the sizes are consistent.\n  - A `...`: An arbitrary number of dimensions of any sizes.\n  - A `str: int` pair (technically it's a slice), combining both `str` and `int` behaviour. (Just a `str` on its own is equivalent to `str: -1`.)\n  - A `str: str` pair, in which case the size of the dimension passed at runtime will be bound to _both_ names, and all dimensions with either name must have the same size. (Some people like to use this as a way to associate multiple names with a dimension, for extra documentation purposes.)\n  - A `str: ...` pair, in which case the multiple dimensions corresponding to `...` will be bound to the name specified by `str`, and again checked for consistency between arguments.\n  - `None`, which when used in conjunction with `is_named` below, indicates a dimension that must _not_ have a name in the sense of [named tensors](https://pytorch.org/docs/stable/named_tensor.html).\n  - A `None: int` pair, combining both `None` and `int` behaviour. (Just a `None` on its own is equivalent to `None: -1`.)\n  - A `None: str` pair, combining both `None` and `str` behaviour. (That is, it must not have a named dimension, but must be of a size consistent with other uses of the string.)\n  - A `typing.Any`: Any size is allowed for this dimension (equivalent to `-1`).\n  - Any tuple of the above. For example.`TensorType[\"batch\": ..., \"length\": 10, \"channels\", -1]`. If you just want to specify the number of dimensions then use for example `TensorType[-1, -1, -1]` for a three-dimensional tensor.\n- The `dtype` argument can be any of:\n  - `torch.float32`, `torch.float64` etc.\n  - `int`, `bool`, `float`, which are converted to their corresponding PyTorch types. `float` is specifically interpreted as `torch.get_default_dtype()`, which is usually `float32`.\n- The `layout` argument can be either `torch.strided` or `torch.sparse_coo`, for dense and sparse tensors respectively.\n- The `details` argument offers a way to pass an arbitrary number of additional flags that customise and extend `torchtyping`. Two flags are built-in by default. `torchtyping.is_named` causes the [names of tensor dimensions](https://pytorch.org/docs/stable/named_tensor.html) to be checked, and `torchtyping.is_float` can be used to check that arbitrary floating point types are passed in. (Rather than just a specific one as with e.g. `TensorType[torch.float32]`.) For discussion on how to customise `torchtyping` with your own `details`, see the [further documentation](https://github.com/patrick-kidger/torchtyping/blob/master/FURTHER-DOCUMENTATION.md#custom-extensions).\n- Check multiple things at once by just putting them all together inside a single `[]`. For example `TensorType[\"batch\": ..., \"length\", \"channels\", float, is_named]`.\n\n```python\ntorchtyping.patch_typeguard()\n```\n\n`torchtyping` integrates with `typeguard` to perform runtime type checking. `torchtyping.patch_typeguard()` should be called at the global level, and will patch `typeguard` to check `TensorType`s.\n\nThis function is safe to run multiple times. (It does nothing after the first run). \n\n- If using `@typeguard.typechecked`, then `torchtyping.patch_typeguard()` should be called any time before using `@typeguard.typechecked`. For example you could call it at the start of each file using `torchtyping`.\n- If using `typeguard.importhook.install_import_hook`, then `torchtyping.patch_typeguard()` should be called any time before defining the functions you want checked. For example you could call `torchtyping.patch_typeguard()` just once, at the same time as the `typeguard` import hook. (The order of the hook and the patch doesn't matter.)\n- If you're not using `typeguard` then `torchtyping.patch_typeguard()` can be omitted altogether, and `torchtyping` just used for documentation purposes.\n\n```bash\npytest --torchtyping-patch-typeguard\n```\n\n`torchtyping` offers a `pytest` plugin to automatically run `torchtyping.patch_typeguard()` before your tests. `pytest` will automatically discover the plugin, you just need to pass the `--torchtyping-patch-typeguard` flag to enable it. Packages can then be passed to `typeguard` as normal, either by using `@typeguard.typechecked`, `typeguard`'s import hook, or the `pytest` flag `--typeguard-packages=\"your_package_here\"`.\n\n## Further documentation\n\nSee the [further documentation](https://github.com/patrick-kidger/torchtyping/blob/master/FURTHER-DOCUMENTATION.md) for:\n\n- FAQ;\n  - Including `flake8` and `mypy` compatibility;\n- How to write custom extensions to `torchtyping`;\n- Resources and links to other libraries and materials on this topic;\n- More examples.\n\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/patrick-kidger/torchtyping","keywords":"","license":"Apache-2.0","maintainer":"Patrick Kidger","maintainer_email":"contact@kidger.site","name":"torchtyping","package_url":"https://pypi.org/project/torchtyping/","platform":"","project_url":"https://pypi.org/project/torchtyping/","project_urls":{"Homepage":"https://github.com/patrick-kidger/torchtyping"},"provides_extra":null,"release_url":"https://pypi.org/project/torchtyping/0.1.4/","requires_dist":["torch (>=1.7.0)","typeguard (>=2.11.1)"],"requires_python":">=3.7.0","summary":"Runtime type annotations for the shape, dtype etc. of PyTorch Tensors.","version":"0.1.4","yanked":false,"yanked_reason":null},"last_serial":10757362,"releases":{"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"4a6ac355187a809e09a311234070eb59423275a8ce6d1815870837f5fd3f8433","md5":"603f2a925801c2c3ca33a76aeee7440f","sha256":"26ca817c859c4c87a97eed39b4518d1f017de2dcc07834ef1450d30d52500b2e"},"downloads":-1,"filename":"torchtyping-0.1.0-py3-none-any.whl","has_sig":false,"md5_digest":"603f2a925801c2c3ca33a76aeee7440f","packagetype":"bdist_wheel","python_version":"py3","requires_python":"~=3.9","size":17434,"upload_time":"2021-04-07T20:55:49","upload_time_iso_8601":"2021-04-07T20:55:49.901888Z","url":"https://files.pythonhosted.org/packages/4a/6a/c355187a809e09a311234070eb59423275a8ce6d1815870837f5fd3f8433/torchtyping-0.1.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"81f7e23fbc84be6c586c3d1117219c618a986f97af236ef8244ddb7cc6fb570e","md5":"699164415c1fcb51566b894349054784","sha256":"cbc05776a9c4e644aa707c30ad55713300cb75ca62968d297e3b87be44376c7f"},"downloads":-1,"filename":"torchtyping-0.1.0.tar.gz","has_sig":false,"md5_digest":"699164415c1fcb51566b894349054784","packagetype":"sdist","python_version":"source","requires_python":"~=3.9","size":22633,"upload_time":"2021-04-07T20:55:51","upload_time_iso_8601":"2021-04-07T20:55:51.671741Z","url":"https://files.pythonhosted.org/packages/81/f7/e23fbc84be6c586c3d1117219c618a986f97af236ef8244ddb7cc6fb570e/torchtyping-0.1.0.tar.gz","yanked":false,"yanked_reason":null}],"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"d032b5d731a9ba9b13e23d714f121da6053fcac4c8bedcc1e30c0f3689f6f30a","md5":"1c78fb8322d2976c69b6409adc1662e9","sha256":"981f231be7b48da363d6a1aa79e35765902ef54d629963f80e13b2076fd84b88"},"downloads":-1,"filename":"torchtyping-0.1.1-py3-none-any.whl","has_sig":false,"md5_digest":"1c78fb8322d2976c69b6409adc1662e9","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7.0","size":17631,"upload_time":"2021-04-09T20:48:56","upload_time_iso_8601":"2021-04-09T20:48:56.771909Z","url":"https://files.pythonhosted.org/packages/d0/32/b5d731a9ba9b13e23d714f121da6053fcac4c8bedcc1e30c0f3689f6f30a/torchtyping-0.1.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4ca46780bb0c182511cfe62d6b16d09ee9664d51aafa2fb82dda6da93cdf9c3b","md5":"32c57a495e208d7bd4bf97f3e37f1371","sha256":"0949281bb2dd56beda4dfca2a7392210441f102cd7a7654842de03f1530010c5"},"downloads":-1,"filename":"torchtyping-0.1.1.tar.gz","has_sig":false,"md5_digest":"32c57a495e208d7bd4bf97f3e37f1371","packagetype":"sdist","python_version":"source","requires_python":">=3.7.0","size":22913,"upload_time":"2021-04-09T20:48:58","upload_time_iso_8601":"2021-04-09T20:48:58.225574Z","url":"https://files.pythonhosted.org/packages/4c/a4/6780bb0c182511cfe62d6b16d09ee9664d51aafa2fb82dda6da93cdf9c3b/torchtyping-0.1.1.tar.gz","yanked":false,"yanked_reason":null}],"0.1.2":[{"comment_text":"","digests":{"blake2b_256":"db78e3f01fe421e40c68fc3a2ebb7f961423a96919e81940b73549733fac3b59","md5":"7d42d8720d201f1e08003cc7f7d4aaf0","sha256":"78050896760e443b04d2bf14ba5b3c5ad69a90c58d328a188bdf9549ca253df9"},"downloads":-1,"filename":"torchtyping-0.1.2-py3-none-any.whl","has_sig":false,"md5_digest":"7d42d8720d201f1e08003cc7f7d4aaf0","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7.0","size":17766,"upload_time":"2021-05-20T19:33:03","upload_time_iso_8601":"2021-05-20T19:33:03.241374Z","url":"https://files.pythonhosted.org/packages/db/78/e3f01fe421e40c68fc3a2ebb7f961423a96919e81940b73549733fac3b59/torchtyping-0.1.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3dc83e9ab4d754c0a9f7f09069c772d12bfec6946a9aefcdfc6b6dc9e6155bfb","md5":"39cbd0306acfb685986934894e8aff54","sha256":"1113369e884ed40b78b6e8e4f6414cad474992823ed29fd2a5be549cde34975e"},"downloads":-1,"filename":"torchtyping-0.1.2.tar.gz","has_sig":false,"md5_digest":"39cbd0306acfb685986934894e8aff54","packagetype":"sdist","python_version":"source","requires_python":">=3.7.0","size":23111,"upload_time":"2021-05-20T19:33:04","upload_time_iso_8601":"2021-05-20T19:33:04.482701Z","url":"https://files.pythonhosted.org/packages/3d/c8/3e9ab4d754c0a9f7f09069c772d12bfec6946a9aefcdfc6b6dc9e6155bfb/torchtyping-0.1.2.tar.gz","yanked":false,"yanked_reason":null}],"0.1.3":[{"comment_text":"","digests":{"blake2b_256":"e8ba0a3147dd2f2b01416af8c3391948839b7a96c1a22965a66062ddeb437b68","md5":"83da4ca9634bbb5de532d24e92bd0dec","sha256":"0f5e7ff9a59003eb4a2a827cd2ad0ce031e2ee4ac13c7a19e4912c129e4f043b"},"downloads":-1,"filename":"torchtyping-0.1.3-py3-none-any.whl","has_sig":false,"md5_digest":"83da4ca9634bbb5de532d24e92bd0dec","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7.0","size":17918,"upload_time":"2021-05-26T10:45:44","upload_time_iso_8601":"2021-05-26T10:45:44.090688Z","url":"https://files.pythonhosted.org/packages/e8/ba/0a3147dd2f2b01416af8c3391948839b7a96c1a22965a66062ddeb437b68/torchtyping-0.1.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"9ef623a78657b586a531e7a6e3d087406272abc03c23e7be4faaaefa0391200e","md5":"83ad6b02355ecbe254a73c433d2995da","sha256":"328122c9e810923685ad633688de53a31a49a57827f5ff20c262beff6e4c593a"},"downloads":-1,"filename":"torchtyping-0.1.3.tar.gz","has_sig":false,"md5_digest":"83ad6b02355ecbe254a73c433d2995da","packagetype":"sdist","python_version":"source","requires_python":">=3.7.0","size":23313,"upload_time":"2021-05-26T10:45:45","upload_time_iso_8601":"2021-05-26T10:45:45.621286Z","url":"https://files.pythonhosted.org/packages/9e/f6/23a78657b586a531e7a6e3d087406272abc03c23e7be4faaaefa0391200e/torchtyping-0.1.3.tar.gz","yanked":false,"yanked_reason":null}],"0.1.4":[{"comment_text":"","digests":{"blake2b_256":"9a294eced5b50c3e8a6fd796c166916171e27bd0e52fe80f212c51ee0d17f7ed","md5":"39447ed3b6cc600d4abb57e489fcaa5f","sha256":"485fb6ef3965c39b0de15f00d6f49373e0a3a6993e9733942a63c5e207d35390"},"downloads":-1,"filename":"torchtyping-0.1.4-py3-none-any.whl","has_sig":false,"md5_digest":"39447ed3b6cc600d4abb57e489fcaa5f","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7.0","size":17842,"upload_time":"2021-06-27T21:16:16","upload_time_iso_8601":"2021-06-27T21:16:16.731730Z","url":"https://files.pythonhosted.org/packages/9a/29/4eced5b50c3e8a6fd796c166916171e27bd0e52fe80f212c51ee0d17f7ed/torchtyping-0.1.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4ff35524f68150ff7cbb57186b8659244a2d44e037bb4ab0802d7d9b58468f96","md5":"819a5881fe9754c484fba6ed98773351","sha256":"4763375d17752641bd1bff0faaddade29be3c125fca6355e3cee7700e975fdb5"},"downloads":-1,"filename":"torchtyping-0.1.4.tar.gz","has_sig":false,"md5_digest":"819a5881fe9754c484fba6ed98773351","packagetype":"sdist","python_version":"source","requires_python":">=3.7.0","size":23181,"upload_time":"2021-06-27T21:16:18","upload_time_iso_8601":"2021-06-27T21:16:18.570316Z","url":"https://files.pythonhosted.org/packages/4f/f3/5524f68150ff7cbb57186b8659244a2d44e037bb4ab0802d7d9b58468f96/torchtyping-0.1.4.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"9a294eced5b50c3e8a6fd796c166916171e27bd0e52fe80f212c51ee0d17f7ed","md5":"39447ed3b6cc600d4abb57e489fcaa5f","sha256":"485fb6ef3965c39b0de15f00d6f49373e0a3a6993e9733942a63c5e207d35390"},"downloads":-1,"filename":"torchtyping-0.1.4-py3-none-any.whl","has_sig":false,"md5_digest":"39447ed3b6cc600d4abb57e489fcaa5f","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7.0","size":17842,"upload_time":"2021-06-27T21:16:16","upload_time_iso_8601":"2021-06-27T21:16:16.731730Z","url":"https://files.pythonhosted.org/packages/9a/29/4eced5b50c3e8a6fd796c166916171e27bd0e52fe80f212c51ee0d17f7ed/torchtyping-0.1.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4ff35524f68150ff7cbb57186b8659244a2d44e037bb4ab0802d7d9b58468f96","md5":"819a5881fe9754c484fba6ed98773351","sha256":"4763375d17752641bd1bff0faaddade29be3c125fca6355e3cee7700e975fdb5"},"downloads":-1,"filename":"torchtyping-0.1.4.tar.gz","has_sig":false,"md5_digest":"819a5881fe9754c484fba6ed98773351","packagetype":"sdist","python_version":"source","requires_python":">=3.7.0","size":23181,"upload_time":"2021-06-27T21:16:18","upload_time_iso_8601":"2021-06-27T21:16:18.570316Z","url":"https://files.pythonhosted.org/packages/4f/f3/5524f68150ff7cbb57186b8659244a2d44e037bb4ab0802d7d9b58468f96/torchtyping-0.1.4.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
