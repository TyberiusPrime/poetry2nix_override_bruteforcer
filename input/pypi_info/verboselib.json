{"info":{"author":"Oleksandr Oblovatnyi","author_email":"oblovatniy@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Intended Audience :: Developers","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: MacOS :: MacOS X","Operating System :: Microsoft :: Windows","Operating System :: POSIX","Programming Language :: Python :: 3","Topic :: Software Development :: Libraries"],"description":"verboselib\n==========\n\nA library with CLI tools allowing to add i18n and l10n to Python apps and libs with ease.\n\n|pypi_package| |python_versions| |license|\n\n|linux_build| |windows_build| |codebeat| |codacy| |scrutinizer|\n\n\n**Contents**\n\n.. contents::\n  :local:\n  :depth: 3\n  :backlinks: none\n\n\nSynopsis\n--------\n\n``verboselib`` is a thin abstraction layer on top of `GNU gettext`_ toolset and `Python gettext`_ module.\n\nIn contrast to the raw ``gettext`` API, ``verboselib`` provides a unified and thread-safe way to access translation catalogs and an easier way to set active language dynamically.\n\nAdditionally, it allows definitions of lazy translations, which can be useful for module-level variables or class-level attributes.\n\nBesides, ``verboselib`` comes with a bunch of CLI tools for extracting translatable messages from sources and compiling them. Those tools do not impose code dependencies and can be used as stand-alone utilities.\n\n\nDomains of Use\n--------------\n\nThe primary domain of use is applications & services. However, it can also be used in libraries.\n\nIn such case users of a target library will have to be aware of using ``verboselib`` as well. Hence, ``verboselib`` can be viewed as an i18n & l10n framework.\n\nGenerally, reliance on frameworks is a thing to refrain from in stand-alone public libraries, but it can also be a totally valid design decision for auxiliary libraries at a product-level scale.\n\n\nInstallation\n------------\n\nAvailable as a `PyPI <https://pypi.python.org/pypi/verboselib>`_ package:\n\n.. code-block:: bash\n\n  pip install verboselib\n\n\nQuickstart\n----------\n\nThe following examples provide a quick overview of what usage of ``verboselib`` looks like.\n\n\nBrief Example\n~~~~~~~~~~~~~\n\nThe briefest usage example shows how to get immediate translations:\n\n.. code-block:: python\n\n  from verboselib import Translations  # (1)\n  from verboselib import set_language  # (2)\n\n  translations = Translations(         # (3)\n    domain=\"the_app\",\n    locale_dir_path=\"locale\",\n  )\n  _ = translations.gettext             # (4)\n\n  set_language(\"en\")                   # (5)\n  print(_(\"Hi there!\"))                # (6) 'Hi there!'\n\n  set_language(\"sv\")                   # (7)\n  print(_(\"Hi there!\"))                # (8) 'Hej där!'\n\n\nAnd here is the explanation for the noted lines:\n\n#. Import ``Translations`` class, which is a translations registry.\n#. Import ``set_language()`` function, which allows switching between languages.\n#. Create an instance of ``Translations`` class, specifying the messages domain and location of the translations catalogs directory.\n#. Define ``_`` as a shortcut for ``translations.gettext()`` function.\n#. Set the current language to English.\n#. Print a ``Hi there!`` there message passed as an argument to the ``_`` function. This gives ``Hi there!`` as the output.\n#. Set the current language to Swedish.\n#. Print the same message again and get ``Hej där!`` as the output.\n\n\nThe example is naïve, but calls to ``gettext()`` via the ``_`` shortcut are very common inside functions, where messages are translated when functions are called. For example:\n\n.. code-block:: python\n\n  def print_message():\n    print(_(\"Hi there!\"))\n\n  set_language(\"en\")\n  print_message()          # 'Hi there!'\n\n  set_language(\"sv\")\n  print(_(\"Hi there!\"))    # 'Hej där!'\n\n\nLazy Translations Example\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOftentimes there's a need to have a placeholder or just a message, the definition of which must be separated from its evaluation. This is achieved via lazy translations:\n\n.. code-block:: python\n\n  from verboselib import Translations\n  from verboselib import set_language\n\n  translations = Translations(\n    domain=\"the_app\",\n    locale_dir_path=\"locale\",\n  )\n  L_ = translations.gettext_lazy            # (1)\n\n  class Greeter:\n    greeting_fmt = L_(\"Hi there, {name}!\")  # (2)\n\n    @classmethod\n    def make_greeting(cls, name):\n      return cls.greeting_fmt.format(       # (3)\n        name=name,\n      )\n\n  set_language(\"en\")\n  print(Greeter.make_greeting(\"user\"))      # (4) 'Hi there, user!'\n\n  set_language(\"sv\")\n  print(Greeter.make_greeting(\"user\"))      # 'Hej där, user!'\n\n\nComments for the noted lines:\n\n#. ``gettext_lazy`` is used instead of ``gettext`` and ``L_`` shortcut is used instead of ``_``.\n#. A translatable string is defined as a class-level attribute using ``L_`` shortcut.\n#. The translatable string is accessed as a normal string.\n#. The method is called and a parameterized translated string is returned.\n\n\nThis example is also naïve, but here the value of ``Greeter.greeting_fmt`` is not translated into a solid string during construction of the ``Greeter`` class. This is important, as the class is constructed only once. The actual type of ``greeting_fmt`` is not a string, but ``lazy_string.LazyString``, which is a string's proxy:\n\n.. code-block:: python\n\n  >>> type(Greeter.greeting_fmt)\n  <class 'lazy_string.LazyString'>\n\n\nAPI\n---\n\nThere are several aspects to consider when using ``verboselib``:\n\n#. Active language.\n#. Translations catalogs registry — an instance of ``verboselib.Translations`` class.\n#. Translations catalogs directory — a directory where ``.po`` and ``.mo`` files are located.\n#. Translatable messages themselves.\n#. Tools for extracting messages and compiling translations.\n\n\nThe sections below describe those aspects separately.\n\n\nActive Language\n~~~~~~~~~~~~~~~\n\nActive language is the language which will be used for getting final values of translatable strings.\n\nIts **current value** is a string defined by a user, e.g. \"en\". The value can be missing, i.e. not set.\n\nIn addition to the current value, it is possible to define a **default value**. So, if the current value is not set, it will fallback to the default value.\n\nBy default, both \"current value\" and \"default value\" are not set, i.e. they are ``None``.\n\nFinally, it's possible to **turn** translations **off**, so that translations will be equal to original messages.\n\n\nCurrent Language\n^^^^^^^^^^^^^^^^\n\nThe current language in ``verboselib`` is controlled and queried via the following functions:\n\n``set_language(language)``\n  Sets the current language for the current thread.\n\n  .. code-block:: python\n\n    from verboselib import set_language\n\n    set_language(\"en\")\n\n\n``get_language()``\n  Queries name of the current language in the current thread as a string.\n\n  .. code-block:: python\n\n    from verboselib import get_language\n    from verboselib import set_language\n\n    get_language()      # None\n\n    set_language(\"en\")\n    get_language()      # 'en'\n\n\n``drop_language()``\n  Removes the value of the current language for the current thread. The value will fallback to the default value.\n\n  .. code-block:: python\n\n    from verboselib import drop_language\n    from verboselib import get_language\n    from verboselib import set_language\n\n    set_language(\"en\")\n    get_language()      # 'en'\n\n    drop_language()\n    get_language()      # None\n\n\nDefault Language\n^^^^^^^^^^^^^^^^\n\nThe default language is controlled by functions which are similar to functions used to control the current language:\n\n``set_default_language(language)``\n  Sets the default language for the current thread.\n\n  .. code-block:: python\n\n    from verboselib import set_default_language\n\n    set_default_language(\"en\")\n\n\n``get_default_language``\n  Queries value of the default language for the current thread as a string.\n\n  .. code-block:: python\n\n    from verboselib import get_default_language\n    from verboselib import set_default_language\n\n    get_default_language()      # None\n\n    set_default_language(\"en\")\n    get_default_language()      # 'en'\n\n\n``drop_default_language``\n  Removes the value of the default language for the current thread.\n\n  .. code-block:: python\n\n    from verboselib import drop_default_language\n    from verboselib import get_default_language\n    from verboselib import set_default_language\n\n    set_default_language(\"en\")\n    get_default_language()      # 'en'\n\n    drop_default_language()\n    get_default_language()      # None\n\n\nUsually, only the ``set_default_language(...)`` is used. This can be helpful if ``None`` is a possible value for the current language. In such a case at least a default language will be used:\n\n.. code-block:: python\n\n  def greet_user(user):\n    set_language(user.language)                           # can be None\n    print(_(\"Hi there, {name}!\").format(name=user.name))\n    drop_language()\n\n  set_default_language(\"en\")\n  ...\n  user = get_user()\n  greet_user(user)\n\n\nDisabling Translations\n^^^^^^^^^^^^^^^^^^^^^^\n\nAt certain times it can be useful to disable translations, for example, during debugging.\n\nThis can be done via ``set_language_bypass()`` function. It disables the current language and prevents it from falling back to the default language.\n\n.. code-block:: python\n\n  from verboselib import drop_language\n  from verboselib import get_language\n  from verboselib import set_language\n  from verboselib import set_default_language\n  from verboselib import set_language_bypass\n\n  set_default_language(\"en\")\n\n  set_language(\"fr\")\n  get_language()              # 'fr'\n\n  set_language_bypass()\n  get_language()              # None\n\n  drop_language()\n  get_language()              # 'en'\n\n\nNote that the 2nd call to ``get_language()`` returned ``None``.\n\n\nLocale-to-language Conversions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``verboselib`` comes up with a couple of helper functions for converting languages to locales:\n\n.. code-block:: python\n\n  from verboselib import to_locale\n\n  to_locale(\"en-us\")                  # 'en_US'\n\n\nand vice versa, for converting locales to languages:\n\n.. code-block:: python\n\n  from verboselib import to_language\n\n  to_language(\"en_US\")                # 'en-us'\n\n\nTranslations Catalogs Registry\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTranslations catalogs registry (``verboselib.Translations``) is a facade in front of `gettext.GNUTranslations`_.\n\n\nInstance Creation\n^^^^^^^^^^^^^^^^^\n\nThe ``verboselib.Translations`` class requires the following arguments to be provided:\n\n``domain``\n  A name (``string``) of the domain of translations. Usually, it's the name of the application, of the library, or it can be just ``\"messages\"``.\n\n``locale_dir_path``\n  A path (``string`` or ``pathlib.Path``) to the translations catalogs directory, which is a place where actual translations are stored. Usually, such directory is called ``locale`` and is located inside the top-level directory of the application or library. The path is strongly recommended to be absolute.\n\n\nExample:\n\n.. code-block:: python\n\n  from pathlib import Path\n\n  from verboselib import Translations\n\n  __here__ = Path(__file__).absolute().parent\n\n  translations = Translations(\n    domain=\"messages\",\n    locale_dir_path=(__here__ / \"locale\"),\n  )\n\n\nInstance Location\n^^^^^^^^^^^^^^^^^\n\nAlthough instances of ``Translations`` are just objects which can be passed to functions, it is recommended to create a single instance of ``Translations`` as a global variable in a separate module, say ``translations.py``. Those instances are thread-safe.\n\nAdditionally, it can be handy to make module-level aliases for the methods of a ``Translations`` instance:\n\n.. code-block:: python\n\n  # foo_package/translations.py\n\n  from pathlib import Path\n\n  from verboselib import Translations\n\n  translations = Translations(\n    domain=\"foo_package\",\n    locale_dir_path=(Path(__file__).absolute().parent / \"locale\"),\n  )\n  gettext = translations.gettext\n  gettext_lazy = translations.gettext_lazy\n\n\nThis can look a bit ugly, but in such a case it's convenient to access those methods as functions from other modules, e.g.:\n\n.. code-block:: python\n\n  # foo_package/logic.py\n\n  from .translations import gettext as _\n  from .translations import gettext_lazy as L_\n\n  print(_(\"Hello\"))\n\n  greeting_fmt = L_(\"Hello, {name}\")\n\n\nMethods\n^^^^^^^\n\nThe API of ``verboselib.Translations`` is compatible with ``GNUTranslations`` and includes the following methods:\n\n#. ``gettext(message)``\n#. ``ngettext(singular, plural, n)``\n#. ``pgettext(context, message)``\n#. ``npgettext(context, singular, plural, n)``\n\n\nAdditionally, ``verboselib.Translations`` provides their lazy versions:\n\n#. ``gettext_lazy(message)``\n#. ``ngettext_lazy(singular, plural, n)``\n#. ``pgettext_lazy(context, message)``\n#. ``npgettext_lazy(context, singular, plural, n)``\n\n\nThose lazy methods return an instance of ``lazy_string.LazyString`` which is a string's proxy.\n\nAs for ``ngettext`` and ``npgettext`` methods and their lazy counterparts, not only an ``int`` can be passed as the ``n`` argument, but also a callable accepting no arguments and returning an ``int``. For example, both the following calls are valid and conceptually identical:\n\n.. code-block:: python\n\n  translations.ngettext(\"window\", \"windows\", 1)\n  translations.ngettext(\"window\", \"windows\", lambda: 1)\n\n\nTranslations Catalogs Directory\n-------------------------------\n\nAll translations are stored in a catalogs directory, where each language has its own subdirectory.\n\nThis section describes how to build such a catalog.\n\n\nWorkflow Overview\n~~~~~~~~~~~~~~~~~\n\nFirstly, translatable messages are extracted from source files into ``.po`` files. Those files contain IDs of messages and file locations where those messages are observed, e.g.:\n\n.. code-block::\n\n  #: foo.py:105 foo.py:203\n  msgid \"Hi there, {name}!\"\n  msgstr \"\"\n\n\nTranslators fill in, well, translations for IDs inside ``.po`` files:\n\n.. code-block::\n\n  #: foo.py:105 foo.py:203\n  msgid \"Hi there, {name}!\"\n  msgstr \"Hej där, {name}!\"\n\n\nFinally, those ``.po`` files are compiled into ``.mo`` files.\n\n\nDiscovery of Translatable Messages\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn order to be discovered and extracted, messages in source files have to be marked in a certain way.\n\nThis is achieved by wrapping a message by a pair of parentheses ``()`` prefixed by a `keyword`_. This makes it look like a function call, which it really is:\n\n.. code-block:: python\n\n  gettext(\"a message\")\n\n\nHere, ``gettext`` is used as a keyword. It's also possible to use its shortcut which is ``_``:\n\n.. code-block:: python\n\n  _(\"a message\")\n\n\nBoth of those variants are equal, but the latter is more concise.\n\nBy default ``verboselib`` recognizes the following keywords:\n\n================== ======== ===================================================\nKeyword            Shortcut Example\n================== ======== ===================================================\n``gettext``        ``_``    ``_(\"message\")``\n``gettext_lazy``   ``L_``   ``L_(\"message\")``\n``ngettext``       ``N_``   ``N_(\"single\", \"plural\", 123)``\n``ngettext_lazy``  ``LN_``  ``LN_(\"single\", \"plural\", 123)``\n``pgettext``       ``P_``   ``P_(\"message context\", \"message\")``\n``pgettext_lazy``  ``LP_``  ``LP_(\"message context\", \"message\")``\n``npgettext``      ``NP_``  ``LP_(\"message context\", \"single\", \"plural\", 123)``\n``npgettext_lazy`` ``LNP_`` ``LP_(\"message context\", \"single\", \"plural\", 123)``\n================== ======== ===================================================\n\n\nTechnically, any literal can be used as a keyword. But if a non-default keyword is used, it must be specified during extraction, which is described later.\n\n\n``.po`` files\n~~~~~~~~~~~~~\n\nEvery ``.po`` file includes a header at the beginning.\n\nIt consists of key-value metadata separated from file's body via a blank line. Example:\n\n.. code-block::\n\n  msgid \"\"\n  msgstr \"\"\n  \"Project-Id-Version: foo 1.0.0\\n\"\n  \"PO-Revision-Date: 2020-10-09 21:24+0300\\n\"\n  \"Report-Msgid-Bugs-To: support@foo.com\\n\"\n  \"Last-Translator: Mr Translator <translation-team@foo.com>\\n\"\n  \"Language: de\\n\"\n  \"MIME-Version: 1.0\\n\"\n  \"Content-Type: text/plain; charset=UTF-8\\n\"\n  \"Content-Transfer-Encoding: 8bit\\n\"\n\n  msgid \"Log in\"\n  msgstr \"\"\n\n\nRefer to ``gettext`` docs for more details on `.po files <https://www.gnu.org/software/gettext/manual/html_node/PO-Files.html>`_ and on `.po headers <https://www.gnu.org/software/gettext/manual/html_node/Header-Entry.html>`_.\n\n\nMessage Contexts\n~~~~~~~~~~~~~~~~\n\nFunctions as ``pgettext()``, ``npgettext()``, and their lazy fellows allow to provide a message context.\n\nThis is just a string which will appear in ``.po`` files to give a hint for translators about the meaning of the message.\n\nFor example, the following call to ``pgettext``:\n\n.. code-block:: python\n\n  P_(\"abbrev. month\", \"Jan\")\n\n\nwill add a ``msgctxt`` attribute into ``.po`` files:\n\n.. code-block::\n\n  #: foo.py:90\n  msgctxt \"abbrev. month\"\n  msgid \"Jan\"\n  msgstr \"\"\n\n\nPlural Forms\n~~~~~~~~~~~~\n\nFunctions as ``ngettext()``, ``npgettext()``, and their lazy counterparts allow to get different translations depending on the integer number ``n`` provided to them, e.g.:\n\n.. code-block:: python\n\n  N_(\"window\", \"windows\", 1)\n\n\nIn this trivial example ``n`` is ``1``. However, it can be a variable or a parameterless callable returning an ``int``:\n\n.. code-block:: python\n\n  def get_users_online() -> int:\n    n = ...\n    return n\n\n  N_(\"user online\", \"users online\", get_users_online)\n\n\nThis looks pretty simple, but that is not the end of the story.\n\nDifferent languages can have different number of plural forms and each form can have their own calculation rules.\n\nSo, in order to make plural forms actually work, each ``.po`` file must include a ``Plural-Forms`` metadata in its header.\n\nFor example, languages of the Germanic family, like English, have 2 plural forms defined as:\n\n.. code-block::\n\n  \"Plural-Forms: nplurals=2; plural=n != 1\\n\"\n\n\nExamples of rules for other languages can be found at `Plural-Forms documentation page <https://www.gnu.org/software/gettext/manual/html_node/Plural-forms.html>`_.\n\n\nFinally, every message having plural forms must have as many translations as there are plural forms specified by ``Plural-Forms``. For example:\n\n.. code-block::\n\n  #: foo.py:74\n  msgid \"window\"\n  msgid_plural \"windows\"\n  msgstr[0] \"вікно\"\n  msgstr[1] \"вікна\"\n  msgstr[2] \"вікон\"\n\nRefer to ``gettext`` docs for more info on `translating plural forms <https://www.gnu.org/software/gettext/manual/html_node/Translating-plural-forms.html>`_.\n\n\nUtilities\n---------\n\n``verboselib`` comes with a couple of stand-alone CLI utilities for extracting and compiling translatable messages.\n\nThese utilities are implemented as subcommands of the main command named ``verboselib``.\n\nRun ``verboselib`` with ``-h`` flag to get generic help:\n\n.. code-block::\n\n  verboselib -h\n\n  usage: verboselib [-h] [-V] {extract,x,compile,c} ...\n\n  run a verboselib command\n\n  optional arguments:\n    -h, --help            show this help message and exit\n    -V, --version         show version of verboselib and exit\n\n  subcommands:\n    {extract,x,compile,c}\n      extract (x)         extract translatable strings from sources into '.po' files\n      compile (c)         compile '.po' text files into '.mo' binaries\n\n\n``extract`` or ``x``\n~~~~~~~~~~~~~~~~~~~~\n\nUsed to extract translatable messages from sources. Creates or updates the directory with translations catalogs. Run with ``-h`` flag for help:\n\n.. code-block::\n\n  verboselib x -h\n\n  usage: extract [-h] [-d DOMAIN] [-l LOCALE] [-a] [-o OUTPUT_DIR] [-k KEYWORD] [--no-default-keywords] [-e EXTENSIONS] [-s] [-i PATTERN] [--no-default-ignore] [--no-wrap]\n                [--no-location] [--no-obsolete] [--keep-pot] [--xgettext-extra-args XGETTEXT_EXTRA_ARGS] [--msguniq-extra-args MSGUNIQ_EXTRA_ARGS]\n                [--msgmerge-extra-args MSGMERGE_EXTRA_ARGS] [--msgattrib-extra-args MSGATTRIB_EXTRA_ARGS] [-v]\n\n  extract translatable strings from sources into '.po' files\n\n  optional arguments:\n    -h, --help            show this help message and exit\n    -d DOMAIN, --domain DOMAIN\n                          domain of message files (default: messages)\n    -l LOCALE, --locale LOCALE\n                          create or update '.po' message files for the given locale(s), ex: 'en_US'; can be specified multiple times (default: None)\n    -a, --all             update all '.po' message files for all existing locales (default: False)\n    -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                          path to the directory where locales will be stored, a.k.a. 'locale dir' (default: locale)\n    -k KEYWORD, --keyword KEYWORD\n                          extra keyword to look for, ex: 'L_'; can be specified multiple times (default: None)\n    --no-default-keywords\n                          do not use default keywords as {'_', 'gettext', 'L_', 'gettext_lazy', 'N_:1,2', 'ngettext:1,2', 'LN_:1,2', 'ngettext_lazy:1,2', 'P_:1c,2',\n                          'pgettext:1c,2', 'LP_:1c,2', 'pgettext_lazy:1c,2', 'NP_:1c,2,3', 'npgettext:1c,2,3', 'LNP_:1c,2,3', 'npgettext_lazy:1c,2,3'} (default: False)\n    -e EXTENSIONS, --extension EXTENSIONS\n                          extra file extension(s) to scan in addition to '.py'; separate multiple values with commas or specify the parameter multiple times (default: None)\n    -s, --links           follow links to files and directories when scanning sources for translation strings (default: False)\n    -i PATTERN, --ignore PATTERN\n                          extra glob-style patterns for ignoring files or directories; can be specified multiple times (default: None)\n    --no-default-ignore   do not ignore the common glob-style patterns as {'.*', '*~', 'CVS', '__pycache__', '*.pyc'} (default: False)\n    --no-wrap             do not break long message lines into several lines (default: False)\n    --no-location         do not write location lines, ex: '#: filename:lineno' (default: False)\n    --no-obsolete         remove obsolete message strings (default: False)\n    --keep-pot            keep '.pot' file after creating '.po' files (useful for debugging) (default: False)\n    --xgettext-extra-args XGETTEXT_EXTRA_ARGS\n                          extra arguments for 'xgettext' utility; can be comma-separated or specified multiple times (default: None)\n    --msguniq-extra-args MSGUNIQ_EXTRA_ARGS\n                          extra arguments for 'msguniq' utility; can be comma-separated or specified multiple times (default: None)\n    --msgmerge-extra-args MSGMERGE_EXTRA_ARGS\n                          extra arguments for 'msgmerge' utility; can be comma-separated or specified multiple times (default: None)\n    --msgattrib-extra-args MSGATTRIB_EXTRA_ARGS\n                          extra arguments for 'msgattrib' utility; can be comma-separated or specified multiple times (default: None)\n    -v, --verbose         use verbose output (default: False)\n\n\nThe basic usage example:\n\n.. code-block:: bash\n\n  verboselib x -l 'uk' -l 'en' -l 'it'\n\n\nUse ``-a`` flag to update all existing ``.po`` files:\n\n.. code-block:: bash\n\n  verboselib x -a\n\n\nUse ``--keyword`` (``-k``) argument to specify additional keywords to look for, e.g.:\n\n.. code-block:: bash\n\n  verboselib x -a -k 'FOO_' -k 'BAR_'\n\n\n``compile`` or ``c``\n~~~~~~~~~~~~~~~~~~~~\n\nCompiles all ``.po`` files into ``.mo`` files. Basic usage has no arguments:\n\n.. code-block:: bash\n\n  verboselib c\n\n\nUse ``-h`` flag for help:\n\n.. code-block::\n\n  verboselib c -h\n\n  usage: compile [-h] [-d LOCALES_DIR] [-l LOCALE] [-e EXCLUDE] [-f] [--msgfmt-extra-args MSGFMT_EXTRA_ARGS] [-v]\n\n  compile '.po' text files into '.mo' binaries\n\n  optional arguments:\n    -h, --help            show this help message and exit\n    -d LOCALES_DIR, --locale-dir LOCALES_DIR\n                          path to the directory where locales are stored (default: locale)\n    -l LOCALE, --locale LOCALE\n                          locale(s) to process, ex: 'en_US'; can be specified multiple times; all locales are processed if not specified (default: None)\n    -e EXCLUDE, --exclude EXCLUDE\n                          locale(s) to exclude, ex: 'en_US'; can be specified multiple times (default: None)\n    -f, --use-fuzzy       use fuzzy translations (default: False)\n    --msgfmt-extra-args MSGFMT_EXTRA_ARGS\n                          extra arguments for 'msgfmt' utility; can be comma-separated or specified multiple times (default: None)\n    -v, --verbose         use verbose output (default: False)\n\n\nThread-safety\n-------------\n\nThe current and the default languages are `thread-local`_. Hence, the functions for manipulating and querying them, like ``set_language()``, are thread-safe. However, the values have to be set in each thread separately.\n\nAs for the translations catalog registry, ``verboselib.Translations``, it is also thread-safe, as it relies on `RLocks`__. It's recommended to be used in libraries. However, if the target is an application and it is guaranteed to be single-threaded, it's possible to use a not-thread-safe version:\n\n.. code-block:: python\n\n  from verboselib import NotThreadSafeTranslations\n\n\nChangelog\n---------\n\n* `1.1.0`_ (Nov 18, 2020)\n\n  API changes:\n\n  * ``verboselib.lazy`` is extracted into a standalone lib `lazy-string`_.\n\n  Misc:\n\n  * Annotations using classes from ``typing`` are tidied up and deprecations starting from Python 3.9 are handled.\n\n* `1.0.1`_ (Oct 30, 2020)\n\n  * Fix ``verboselib.utils.export()`` helper which adds objects to ``__all__`` variable of their own modules.\n\n* `1.0.0`_ (Oct 11, 2020)\n\n  API changes:\n\n  * ``verboselib.factory.TranslationsFactory`` is now ``verboselib.translations.Translations``.\n  * ``locale_dir`` argument of ``Translations`` is ``locale_dir_path`` now and instances of ``pathlib.Path`` can be used in addition to strings.\n  * ``verboselib.translations.Translations`` is now thread-safe.\n  * ``verboselib.translations.NotThreadSafeTranslations`` is added.\n  * Methods ``ugettext()`` and ``ugettext_lazy()`` are removed from ``Translations``.\n  * Methods ``ngettext()``, ``ngettext_lazy()``, ``pgettext()``, ``pgettext_lazy()``, ``npgettext()``, and ``npgettext_lazy()`` are added to ``Translations``.\n  * Function ``get_default_language()`` is added.\n  * Function ``verboselib.heplers.to_locale()`` no longer has ``to_lower`` argument.\n  * ``verboselib-manage`` CLI utility is now just ``verboselib``.\n  * ``compile`` and ``extract`` subcommands of ``verboselib`` have ``c`` and ``x`` aliases respectively.\n  * Flags ``--no-default-keywords``, ``--xgettext-extra-args``, ``--msguniq-extra-args``, ``--msgmerge-extra-args``, and ``--msgattrib-extra-args`` are added to the ``extract`` command.\n  * Flags ``--exclude``, ``--use-fuzzy``, and ``--msgfmt-extra-args`` are added to the ``compile`` command.\n\n  Python support:\n\n  * Support of all ``Python`` versions below ``3.7`` is dropped.\n\n  Other:\n\n  * All external dependencies are removed.\n  * The license is switched from ``LGPLv3`` to ``MIT``.\n\n\n* `0.2.1`_ (Jul 16, 2017)\n\n  * Fix ``version`` command.\n  * Rename ``verboselib-manage.py`` executable to simply ``verboselib-manage``.\n\n\n* `0.2.0`_ (Dec 31, 2014)\n\n  * Add ``get_default_language()`` method.\n  * Use default translation classes from ``gettext`` module.\n\n\n* `0.1.0`_ (Jul 17, 2014)\n\n  Initial version.\n\n\n.. |pypi_package| image:: https://img.shields.io/pypi/v/verboselib\n   :target: http://badge.fury.io/py/verboselib/\n   :alt: Version of PyPI package\n\n.. |python_versions| image:: https://img.shields.io/badge/Python-3.7+-brightgreen.svg\n   :alt: Supported versions of Python\n\n.. |license| image:: https://img.shields.io/badge/license-MIT-blue.svg\n   :target: https://github.com/oblalex/verboselib/blob/master/LICENSE\n   :alt: MIT license\n\n.. |linux_build| image:: https://img.shields.io/travis/oblalex/verboselib\n   :target: https://travis-ci.org/oblalex/verboselib\n   :alt: Build status of the master branch on Linux\n\n.. |windows_build| image:: https://ci.appveyor.com/api/projects/status/bdm3jnvuka1qjcm1/branch/master?svg=true\n   :target: https://ci.appveyor.com/project/oblalex/verboselib\n   :alt: Build status of the master branch on Windows\n\n.. |codebeat| image:: https://codebeat.co/badges/6a606844-25df-4518-8e1f-3613907fcdb1\n   :target: https://codebeat.co/projects/github-com-oblalex-verboselib-master\n   :alt: Code quality provided by «Codebeat»\n\n.. |codacy| image:: https://app.codacy.com/project/badge/Grade/2e1b914f5ff741e2bf57605059f36485\n   :target: https://www.codacy.com/gh/oblalex/verboselib/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=oblalex/verboselib&amp;utm_campaign=Badge_Grade\n   :alt: Code quality provided by «Codacy»\n\n.. |scrutinizer| image:: https://scrutinizer-ci.com/g/oblalex/verboselib/badges/quality-score.png?b=master\n   :target: https://scrutinizer-ci.com/g/oblalex/verboselib/?branch=master\n   :alt: Code quality provided by «Scrutinizer CI»\n\n\n.. _GNU gettext: https://www.gnu.org/software/gettext/\n.. _Python gettext: https://docs.python.org/3/library/gettext.html\n.. _gettext.GNUTranslations: https://docs.python.org/3/library/gettext.html#the-gnutranslations-class\n.. _keyword: https://www.gnu.org/software/gettext/manual/html_node/Mark-Keywords.html\n.. _thread-local: https://docs.python.org/3/library/threading.html#thread-local-data\n.. _lazy-string: https://pypi.org/project/lazy-string/\n\n.. _rlock: https://docs.python.org/3/library/threading.html#rlock-objects\n__ rlock_\n\n.. _1.1.0: https://github.com/oblalex/verboselib/compare/v1.0.1...v1.1.0\n.. _1.0.1: https://github.com/oblalex/verboselib/compare/v1.0.0...v1.0.1\n.. _1.0.0: https://github.com/oblalex/verboselib/compare/v0.2.1...v1.0.0\n.. _0.2.1: https://github.com/oblalex/verboselib/compare/v0.2.0...v0.2.1\n.. _0.2.0: https://github.com/oblalex/verboselib/compare/v0.1.0...v0.2.0\n.. _0.1.0: https://github.com/oblalex/verboselib/releases/tag/v0.1.0","description_content_type":"text/x-rst","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/oblalex/verboselib/tree/v1.1.0","keywords":"library,l18n,localization,lazy,string,framework,gettext","license":"MIT","maintainer":"","maintainer_email":"","name":"verboselib","package_url":"https://pypi.org/project/verboselib/","platform":"","project_url":"https://pypi.org/project/verboselib/","project_urls":{"Homepage":"https://github.com/oblalex/verboselib/tree/v1.1.0"},"provides_extra":null,"release_url":"https://pypi.org/project/verboselib/1.1.0/","requires_dist":null,"requires_python":">=3.7","summary":"A little I18N framework for libraries and applications","version":"1.1.0","yanked":false,"yanked_reason":null},"last_serial":8691678,"releases":{"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"3e4d48c100383b5230274906538265d9ab36d32f9253d838a89bbd51a801daae","md5":"980621aa1841a0e9a0d27279f91ae2b2","sha256":"21ac2ad35ad910a789ae9ad6a202f66e4f73af0b5b1088907c72ca6f84413325"},"downloads":-1,"filename":"verboselib-0.1.0.tar.gz","has_sig":false,"md5_digest":"980621aa1841a0e9a0d27279f91ae2b2","packagetype":"sdist","python_version":"source","requires_python":null,"size":18009,"upload_time":"2014-07-17T07:40:23","upload_time_iso_8601":"2014-07-17T07:40:23.514255Z","url":"https://files.pythonhosted.org/packages/3e/4d/48c100383b5230274906538265d9ab36d32f9253d838a89bbd51a801daae/verboselib-0.1.0.tar.gz","yanked":false,"yanked_reason":null}],"0.2.0":[{"comment_text":"","digests":{"blake2b_256":"4c16578858c06746a5aab6f6b71ad77f7ac776032bb6ae97ac585e6bac55aa32","md5":"d24361d1414ff00eafdbcc38b1b0384f","sha256":"cac16dca9ac01c2d1b4107a9b56e6ab4828b99eca8d87fb003a165524659dbb1"},"downloads":-1,"filename":"verboselib-0.2.0.tar.gz","has_sig":false,"md5_digest":"d24361d1414ff00eafdbcc38b1b0384f","packagetype":"sdist","python_version":"source","requires_python":null,"size":18165,"upload_time":"2014-12-31T21:05:38","upload_time_iso_8601":"2014-12-31T21:05:38.162120Z","url":"https://files.pythonhosted.org/packages/4c/16/578858c06746a5aab6f6b71ad77f7ac776032bb6ae97ac585e6bac55aa32/verboselib-0.2.0.tar.gz","yanked":false,"yanked_reason":null}],"0.2.1":[{"comment_text":"","digests":{"blake2b_256":"8c121e70412325eb564e24af5c0717be4cd95d7499c051777e7facf2b3c57fd8","md5":"b3666b86f96f76376bc421437a79bb1d","sha256":"fd3f752064c17703a232a22674d4d989e8ebde817d817de881474f0d52fff41f"},"downloads":-1,"filename":"verboselib-0.2.1.tar.gz","has_sig":false,"md5_digest":"b3666b86f96f76376bc421437a79bb1d","packagetype":"sdist","python_version":"source","requires_python":null,"size":22356,"upload_time":"2017-07-16T18:07:00","upload_time_iso_8601":"2017-07-16T18:07:00.664756Z","url":"https://files.pythonhosted.org/packages/8c/12/1e70412325eb564e24af5c0717be4cd95d7499c051777e7facf2b3c57fd8/verboselib-0.2.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0":[{"comment_text":"","digests":{"blake2b_256":"1b555a92a0a2604c407fa98442c28ed3dcd7572842538696196ed37c5b9cf2c7","md5":"cb3dcbe5a718fc5e514666a23b87dc8f","sha256":"7e603168d69bb38aa03d880c9573c0932dbec1e19ce1e47875827dc03c96f737"},"downloads":-1,"filename":"verboselib-1.0.0.zip","has_sig":false,"md5_digest":"cb3dcbe5a718fc5e514666a23b87dc8f","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":46181,"upload_time":"2020-10-11T21:23:25","upload_time_iso_8601":"2020-10-11T21:23:25.896369Z","url":"https://files.pythonhosted.org/packages/1b/55/5a92a0a2604c407fa98442c28ed3dcd7572842538696196ed37c5b9cf2c7/verboselib-1.0.0.zip","yanked":false,"yanked_reason":null}],"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"a09fa98ca1f34f2813da0dbe77175904a84c18b2e8e1543f8f5e7de28421c4c5","md5":"18fda26d990bd79f317afc2ccde2ea4d","sha256":"36a3029466c52313680d6f2b3eb3a897397f0ef19bd971941e093eb6c3fb9703"},"downloads":-1,"filename":"verboselib-1.0.1.zip","has_sig":false,"md5_digest":"18fda26d990bd79f317afc2ccde2ea4d","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":47062,"upload_time":"2020-10-30T19:30:02","upload_time_iso_8601":"2020-10-30T19:30:02.791326Z","url":"https://files.pythonhosted.org/packages/a0/9f/a98ca1f34f2813da0dbe77175904a84c18b2e8e1543f8f5e7de28421c4c5/verboselib-1.0.1.zip","yanked":false,"yanked_reason":null}],"1.1.0":[{"comment_text":"","digests":{"blake2b_256":"f92b7f65b19615b4d69e9286ffb0f419195f7f49c26e1a1de92730682992861b","md5":"5a9e8a2fed03714e394e6db0f1e104fa","sha256":"8bf44376493066c1bd13620f95c7b120938722cd83235a7f6c153161ad4d5c11"},"downloads":-1,"filename":"verboselib-1.1.0.zip","has_sig":false,"md5_digest":"5a9e8a2fed03714e394e6db0f1e104fa","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":47612,"upload_time":"2020-11-18T17:37:07","upload_time_iso_8601":"2020-11-18T17:37:07.621928Z","url":"https://files.pythonhosted.org/packages/f9/2b/7f65b19615b4d69e9286ffb0f419195f7f49c26e1a1de92730682992861b/verboselib-1.1.0.zip","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"f92b7f65b19615b4d69e9286ffb0f419195f7f49c26e1a1de92730682992861b","md5":"5a9e8a2fed03714e394e6db0f1e104fa","sha256":"8bf44376493066c1bd13620f95c7b120938722cd83235a7f6c153161ad4d5c11"},"downloads":-1,"filename":"verboselib-1.1.0.zip","has_sig":false,"md5_digest":"5a9e8a2fed03714e394e6db0f1e104fa","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":47612,"upload_time":"2020-11-18T17:37:07","upload_time_iso_8601":"2020-11-18T17:37:07.621928Z","url":"https://files.pythonhosted.org/packages/f9/2b/7f65b19615b4d69e9286ffb0f419195f7f49c26e1a1de92730682992861b/verboselib-1.1.0.zip","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
