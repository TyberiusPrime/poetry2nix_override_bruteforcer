{"info":{"author":"Explosion","author_email":"contact@explosion.ai","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Console","Intended Audience :: Developers","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: Microsoft :: Windows","Operating System :: POSIX :: Linux","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Scientific/Engineering"],"description":"<a href=\"https://explosion.ai\"><img src=\"https://explosion.ai/assets/img/logo.svg\" width=\"125\" height=\"125\" align=\"right\" /></a>\n\n# Confection: The sweetest config system for Python\n\n`confection` :candy: is a lightweight library that offers a **configuration\nsystem** letting you conveniently describe arbitrary trees of objects.\n\nConfiguration is a huge challenge for machine-learning code because you may want\nto expose almost any detail of any function as a hyperparameter. The setting you\nwant to expose might be arbitrarily far down in your call stack, so it might\nneed to pass all the way through the CLI or REST API, through any number of\nintermediate functions, affecting the interface of everything along the way. And\nthen once those settings are added, they become hard to remove later. Default\nvalues also become hard to change without breaking backwards compatibility.\n\nTo solve this problem, `confection` offers a config system that lets you easily\ndescribe arbitrary trees of objects. The objects can be created via function\ncalls you register using a simple decorator syntax. You can even version the\nfunctions you create, allowing you to make improvements without breaking\nbackwards compatibility. The most similar config system we’re aware of is\n[Gin](https://github.com/google/gin-config), which uses a similar syntax, and\nalso allows you to link the configuration system to functions in your code using\na decorator. `confection`'s config system is simpler and emphasizes a different\nworkflow via a subset of Gin’s functionality.\n\n[![tests](https://github.com/explosion/confection/actions/workflows/tests.yml/badge.svg)](https://github.com/explosion/confection/actions/workflows/tests.yml)\n[![Current Release Version](https://img.shields.io/github/v/release/explosion/confection.svg?style=flat-square&include_prereleases&logo=github)](https://github.com/explosion/confection/releases)\n[![pypi Version](https://img.shields.io/pypi/v/confection.svg?style=flat-square&logo=pypi&logoColor=white)](https://pypi.org/project/confection/)\n[![conda Version](https://img.shields.io/conda/vn/conda-forge/confection.svg?style=flat-square&logo=conda-forge&logoColor=white)](https://anaconda.org/conda-forge/confection)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg?style=flat-square)](https://github.com/ambv/black)\n\n## ⏳ Installation\n\n```bash\npip install confection\n```\n\n```bash\nconda install -c conda-forge confection\n```\n\n## 👩‍💻 Usage\n\nThe configuration system parses a `.cfg` file like\n\n```ini\n[training]\npatience = 10\ndropout = 0.2\nuse_vectors = false\n\n[training.logging]\nlevel = \"INFO\"\n\n[nlp]\n# This uses the value of training.use_vectors\nuse_vectors = ${training.use_vectors}\nlang = \"en\"\n```\n\nand resolves it to a `Dict`:\n\n```json\n{\n  \"training\": {\n    \"patience\": 10,\n    \"dropout\": 0.2,\n    \"use_vectors\": false,\n    \"logging\": {\n      \"level\": \"INFO\"\n    }\n  },\n  \"nlp\": {\n    \"use_vectors\": false,\n    \"lang\": \"en\"\n  }\n}\n```\n\nThe config is divided into sections, with the section name in square brackets –\nfor example, `[training]`. Within the sections, config values can be assigned to\nkeys using `=`. Values can also be referenced from other sections using the dot\nnotation and placeholders indicated by the dollar sign and curly braces. For\nexample, `${training.use_vectors}` will receive the value of use_vectors in the\ntraining block. This is useful for settings that are shared across components.\n\nThe config format has three main differences from Python’s built-in\n`configparser`:\n\n1. JSON-formatted values. `confection` passes all values through `json.loads` to\n   interpret them. You can use atomic values like strings, floats, integers or\n   booleans, or you can use complex objects such as lists or maps.\n2. Structured sections. `confection` uses a dot notation to build nested\n   sections. If you have a section named `[section.subsection]`, `confection`\n   will parse that into a nested structure, placing subsection within section.\n3. References to registry functions. If a key starts with `@`, `confection` will\n   interpret its value as the name of a function registry, load the function\n   registered for that name and pass in the rest of the block as arguments. If\n   type hints are available on the function, the argument values (and return\n   value of the function) will be validated against them. This lets you express\n   complex configurations, like a training pipeline where `batch_size` is\n   populated by a function that yields floats.\n\nThere’s no pre-defined scheme you have to follow; how you set up the top-level\nsections is up to you. At the end of it, you’ll receive a dictionary with the\nvalues that you can use in your script – whether it’s complete initialized\nfunctions, or just basic settings.\n\nFor instance, let’s say you want to define a new optimizer. You'd define its\narguments in `config.cfg` like so:\n\n```ini\n[optimizer]\n@optimizers = \"my_cool_optimizer.v1\"\nlearn_rate = 0.001\ngamma = 1e-8\n```\n\nTo load and parse this configuration using a `catalogue` registry (install\n[`catalogue`](https://github.com/explosion/catalogue) separately):\n\n```python\nimport dataclasses\nfrom typing import Union, Iterable\nimport catalogue\nfrom confection import registry, Config\n\n# Create a new registry.\nregistry.optimizers = catalogue.create(\"confection\", \"optimizers\", entry_points=False)\n\n\n# Define a dummy optimizer class.\n@dataclasses.dataclass\nclass MyCoolOptimizer:\n    learn_rate: float\n    gamma: float\n\n\n@registry.optimizers.register(\"my_cool_optimizer.v1\")\ndef make_my_optimizer(learn_rate: Union[float, Iterable[float]], gamma: float):\n    return MyCoolOptimizer(learn_rate, gamma)\n\n\n# Load the config file from disk, resolve it and fetch the instantiated optimizer object.\nconfig = Config().from_disk(\"./config.cfg\")\nresolved = registry.resolve(config)\noptimizer = resolved[\"optimizer\"]  # MyCoolOptimizer(learn_rate=0.001, gamma=1e-08)\n```\n\n> ⚠️ Caution: Type-checkers such as `mypy` will mark adding new attributes to `registry` this way - i. e. \n> `registry.new_attr = ...` - as errors. This is because a new attribute is added to the class after initialization. If \n> you are using typecheckers, you can either ignore this (e. g. with `# type: ignore` for `mypy`) or use a typesafe \n> alternative: instead of `registry.new_attr = ...`, use `setattr(registry, \"new_attr\", ...)`. \n\nUnder the hood, `confection` will look up the `\"my_cool_optimizer.v1\"` function\nin the \"optimizers\" registry and then call it with the arguments `learn_rate`\nand `gamma`. If the function has type annotations, it will also validate the\ninput. For instance, if `learn_rate` is annotated as a float and the config\ndefines a string, `confection` will raise an error.\n\nThe Thinc documentation offers further information on the configuration system:\n\n- [recursive blocks](https://thinc.ai/docs/usage-config#registry-recursive)\n- [defining variable positional arguments](https://thinc.ai/docs/usage-config#registries-args)\n- [using interpolation](https://thinc.ai/docs/usage-config#config-interpolation)\n- [using custom registries](https://thinc.ai/docs/usage-config#registries-custom)\n- [advanced type annotations with Pydantic](https://thinc.ai/docs/usage-config#advanced-types)\n- [using base schemas](https://thinc.ai/docs/usage-config#advanced-types-base-schema)\n- [filling a configuration with defaults](https://thinc.ai/docs/usage-config#advanced-types-fill-defaults)\n\n## 🎛 API\n\n### <kbd>class</kbd> `Config`\n\nThis class holds the model and training\n[configuration](https://thinc.ai/docs/usage-config) and can load and save the\nINI-style configuration format from/to a string, file or bytes. The `Config`\nclass is a subclass of `dict` and uses Python’s `ConfigParser` under the hood.\n\n#### <sup><kbd>method</kbd> `Config.__init__`</sup>\n\nInitialize a new `Config` object with optional data.\n\n```python\nfrom confection import Config\nconfig = Config({\"training\": {\"patience\": 10, \"dropout\": 0.2}})\n```\n\n| Argument          | Type                                      | Description                                                                                                                                                 |\n| ----------------- | ----------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `data`            | `Optional[Union[Dict[str, Any], Config]]` | Optional data to initialize the config with.                                                                                                                |\n| `section_order`   | `Optional[List[str]]`                     | Top-level section names, in order, used to sort the saved and loaded config. All other sections will be sorted alphabetically.                              |\n| `is_interpolated` | `Optional[bool]`                          | Whether the config is interpolated or whether it contains variables. Read from the `data` if it’s an instance of `Config` and otherwise defaults to `True`. |\n\n#### <sup><kbd>method</kbd> `Config.from_str`</sup>\n\nLoad the config from a string.\n\n```python\nfrom confection import Config\n\nconfig_str = \"\"\"\n[training]\npatience = 10\ndropout = 0.2\n\"\"\"\nconfig = Config().from_str(config_str)\nprint(config[\"training\"])  # {'patience': 10, 'dropout': 0.2}}\n```\n\n| Argument      | Type             | Description                                                                                                          |\n| ------------- | ---------------- | -------------------------------------------------------------------------------------------------------------------- |\n| `text`        | `str`            | The string config to load.                                                                                           |\n| `interpolate` | `bool`           | Whether to interpolate variables like `${section.key}`. Defaults to `True`.                                          |\n| `overrides`   | `Dict[str, Any]` | Overrides for values and sections. Keys are provided in dot notation, e.g. `\"training.dropout\"` mapped to the value. |\n| **RETURNS**   | `Config`         | The loaded config.                                                                                                   |\n\n#### <sup><kbd>method</kbd> `Config.to_str`</sup>\n\nLoad the config from a string.\n\n```python\nfrom confection import Config\n\nconfig = Config({\"training\": {\"patience\": 10, \"dropout\": 0.2}})\nprint(config.to_str()) # '[training]\\npatience = 10\\n\\ndropout = 0.2'\n```\n\n| Argument      | Type   | Description                                                                 |\n| ------------- | ------ | --------------------------------------------------------------------------- |\n| `interpolate` | `bool` | Whether to interpolate variables like `${section.key}`. Defaults to `True`. |\n| **RETURNS**   | `str`  | The string config.                                                          |\n\n#### <sup><kbd>method</kbd> `Config.to_bytes`</sup>\n\nSerialize the config to a byte string.\n\n```python\nfrom confection import Config\n\nconfig = Config({\"training\": {\"patience\": 10, \"dropout\": 0.2}})\nconfig_bytes = config.to_bytes()\nprint(config_bytes)  # b'[training]\\npatience = 10\\n\\ndropout = 0.2'\n```\n\n| Argument      | Type             | Description                                                                                                          |\n| ------------- | ---------------- | -------------------------------------------------------------------------------------------------------------------- |\n| `interpolate` | `bool`           | Whether to interpolate variables like `${section.key}`. Defaults to `True`.                                          |\n| `overrides`   | `Dict[str, Any]` | Overrides for values and sections. Keys are provided in dot notation, e.g. `\"training.dropout\"` mapped to the value. |\n| **RETURNS**   | `str`            | The serialized config.                                                                                               |\n\n#### <sup><kbd>method</kbd> `Config.from_bytes`</sup>\n\nLoad the config from a byte string.\n\n```python\nfrom confection import Config\n\nconfig = Config({\"training\": {\"patience\": 10, \"dropout\": 0.2}})\nconfig_bytes = config.to_bytes()\nnew_config = Config().from_bytes(config_bytes)\n```\n\n| Argument      | Type     | Description                                                                 |\n| ------------- | -------- | --------------------------------------------------------------------------- |\n| `bytes_data`  | `bool`   | The data to load.                                                           |\n| `interpolate` | `bool`   | Whether to interpolate variables like `${section.key}`. Defaults to `True`. |\n| **RETURNS**   | `Config` | The loaded config.                                                          |\n\n#### <sup><kbd>method</kbd> `Config.to_disk`</sup>\n\nSerialize the config to a file.\n\n```python\nfrom confection import Config\n\nconfig = Config({\"training\": {\"patience\": 10, \"dropout\": 0.2}})\nconfig.to_disk(\"./config.cfg\")\n```\n\n| Argument      | Type               | Description                                                                 |\n| ------------- | ------------------ | --------------------------------------------------------------------------- |\n| `path`        | `Union[Path, str]` | The file path.                                                              |\n| `interpolate` | `bool`             | Whether to interpolate variables like `${section.key}`. Defaults to `True`. |\n\n#### <sup><kbd>method</kbd> `Config.from_disk`</sup>\n\nLoad the config from a file.\n\n```python\nfrom confection import Config\n\nconfig = Config({\"training\": {\"patience\": 10, \"dropout\": 0.2}})\nconfig.to_disk(\"./config.cfg\")\nnew_config = Config().from_disk(\"./config.cfg\")\n```\n\n| Argument      | Type               | Description                                                                                                          |\n| ------------- | ------------------ | -------------------------------------------------------------------------------------------------------------------- |\n| `path`        | `Union[Path, str]` | The file path.                                                                                                       |\n| `interpolate` | `bool`             | Whether to interpolate variables like `${section.key}`. Defaults to `True`.                                          |\n| `overrides`   | `Dict[str, Any]`   | Overrides for values and sections. Keys are provided in dot notation, e.g. `\"training.dropout\"` mapped to the value. |\n| **RETURNS**   | `Config`           | The loaded config.                                                                                                   |\n\n#### <sup><kbd>method</kbd> `Config.copy`</sup>\n\nDeep-copy the config.\n\n| Argument    | Type     | Description        |\n| ----------- | -------- | ------------------ |\n| **RETURNS** | `Config` | The copied config. |\n\n#### <sup><kbd>method</kbd> `Config.interpolate`</sup>\n\nInterpolate variables like `${section.value}` or `${section.subsection}` and\nreturn a copy of the config with interpolated values. Can be used if a config is\nloaded with `interpolate=False`, e.g. via `Config.from_str`.\n\n```python\nfrom confection import Config\n\nconfig_str = \"\"\"\n[hyper_params]\ndropout = 0.2\n\n[training]\ndropout = ${hyper_params.dropout}\n\"\"\"\nconfig = Config().from_str(config_str, interpolate=False)\nprint(config[\"training\"])  # {'dropout': '${hyper_params.dropout}'}}\nconfig = config.interpolate()\nprint(config[\"training\"])  # {'dropout': 0.2}}\n```\n\n| Argument    | Type     | Description                                    |\n| ----------- | -------- | ---------------------------------------------- |\n| **RETURNS** | `Config` | A copy of the config with interpolated values. |\n\n##### <sup><kbd>method</kbd> `Config.merge`</sup>\n\nDeep-merge two config objects, using the current config as the default. Only\nmerges sections and dictionaries and not other values like lists. Values that\nare provided in the updates are overwritten in the base config, and any new\nvalues or sections are added. If a config value is a variable like\n`${section.key}` (e.g. if the config was loaded with `interpolate=False)`, **the\nvariable is preferred**, even if the updates provide a different value. This\nensures that variable references aren’t destroyed by a merge.\n\n> :warning: Note that blocks that refer to registered functions using the `@`\n> syntax are only merged if they are referring to the same functions. Otherwise,\n> merging could easily produce invalid configs, since different functions can\n> take different arguments. If a block refers to a different function, it’s\n> overwritten.\n\n```python\nfrom confection import Config\n\nbase_config_str = \"\"\"\n[training]\npatience = 10\ndropout = 0.2\n\"\"\"\nupdate_config_str = \"\"\"\n[training]\ndropout = 0.1\nmax_epochs = 2000\n\"\"\"\n\nbase_config = Config().from_str(base_config_str)\nupdate_config = Config().from_str(update_config_str)\nmerged = Config(base_config).merge(update_config)\nprint(merged[\"training\"])  # {'patience': 10, 'dropout': 0.1, 'max_epochs': 2000}\n```\n\n| Argument    | Type                            | Description                                         |\n| ----------- | ------------------------------- | --------------------------------------------------- |\n| `overrides` | `Union[Dict[str, Any], Config]` | The updates to merge into the config.               |\n| **RETURNS** | `Config`                        | A new config instance containing the merged config. |\n\n### Config Attributes\n\n| Argument          | Type   | Description                                                                                                                                                              |\n| ----------------- | ------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `is_interpolated` | `bool` | Whether the config values have been interpolated. Defaults to `True` and is set to `False` if a config is loaded with `interpolate=False`, e.g. using `Config.from_str`. |\n","description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/explosion/confection","keywords":null,"license":"MIT","maintainer":null,"maintainer_email":null,"name":"confection","package_url":"https://pypi.org/project/confection/","platform":null,"project_url":"https://pypi.org/project/confection/","project_urls":{"Homepage":"https://github.com/explosion/confection"},"provides_extra":null,"release_url":"https://pypi.org/project/confection/0.1.5/","requires_dist":["pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4","srsly<3.0.0,>=2.4.0","typing-extensions<5.0.0,>=3.7.4.1; python_version < \"3.8\""],"requires_python":">=3.6","summary":"The sweetest config system for Python","version":"0.1.5","yanked":false,"yanked_reason":null},"last_serial":23468745,"releases":{"0.0.1":[{"comment_text":"","digests":{"blake2b_256":"ede632f079bbfc92a60db21b269bee49d442eb94acb54bd8ce30bdb3a8daeaa0","md5":"f29cd924f8a43b922be0a93958db9304","sha256":"e4b43ee84af1c2088726d7b91d4b6b958a6d6d5cc374108742a6db585b93ee44"},"downloads":-1,"filename":"confection-0.0.1-py3-none-any.whl","has_sig":false,"md5_digest":"f29cd924f8a43b922be0a93958db9304","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":32585,"upload_time":"2022-08-24T08:52:49","upload_time_iso_8601":"2022-08-24T08:52:49.683034Z","url":"https://files.pythonhosted.org/packages/ed/e6/32f079bbfc92a60db21b269bee49d442eb94acb54bd8ce30bdb3a8daeaa0/confection-0.0.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ca85a4b61e15eb41e253e19c2192cf0b5a576c20463d7a4c0ccdd38fa1b9ae5d","md5":"df50910d43e45ecd120752cb05fa6f7d","sha256":"5ff894a2bddd418881381612b2581e25edba22d921fa2fa66dc9b5082acf8ad3"},"downloads":-1,"filename":"confection-0.0.1.tar.gz","has_sig":false,"md5_digest":"df50910d43e45ecd120752cb05fa6f7d","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":35813,"upload_time":"2022-08-24T08:52:54","upload_time_iso_8601":"2022-08-24T08:52:54.570888Z","url":"https://files.pythonhosted.org/packages/ca/85/a4b61e15eb41e253e19c2192cf0b5a576c20463d7a4c0ccdd38fa1b9ae5d/confection-0.0.1.tar.gz","yanked":false,"yanked_reason":null}],"0.0.2":[{"comment_text":"","digests":{"blake2b_256":"c941a05cccafe74d2acc64dfdd5908a15dc2f502a5741d984ac3ce1abcfc217f","md5":"3ddfb82f81506ea27e41c6c05fe24c0c","sha256":"20663e54b472d77f2add23c2bc2ecad33b9fcb3c3679d303b74003ad45ff5927"},"downloads":-1,"filename":"confection-0.0.2-py3-none-any.whl","has_sig":false,"md5_digest":"3ddfb82f81506ea27e41c6c05fe24c0c","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":32790,"upload_time":"2022-09-28T09:49:50","upload_time_iso_8601":"2022-09-28T09:49:50.246188Z","url":"https://files.pythonhosted.org/packages/c9/41/a05cccafe74d2acc64dfdd5908a15dc2f502a5741d984ac3ce1abcfc217f/confection-0.0.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1f8e25da8ed76724f265ac14ecc7a48d604d4c21ad7a3340acc414bcfbb3dd7f","md5":"fafd3838910adf633773f168c2429724","sha256":"1833a11052db95f212b447009e3d0dd6f09a9ad38228054cefe0daf540134792"},"downloads":-1,"filename":"confection-0.0.2.tar.gz","has_sig":false,"md5_digest":"fafd3838910adf633773f168c2429724","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":35920,"upload_time":"2022-09-28T09:49:52","upload_time_iso_8601":"2022-09-28T09:49:52.115565Z","url":"https://files.pythonhosted.org/packages/1f/8e/25da8ed76724f265ac14ecc7a48d604d4c21ad7a3340acc414bcfbb3dd7f/confection-0.0.2.tar.gz","yanked":false,"yanked_reason":null}],"0.0.3":[{"comment_text":"","digests":{"blake2b_256":"369f03c9137e34b3064f0eba298340d00a8dd4719c0b7021704187a7ddf1e382","md5":"9d899ccbd7fac74c888cef4e7cd8e0fd","sha256":"51af839c1240430421da2b248541ebc95f9d0ee385bcafa768b8acdbd2b0111d"},"downloads":-1,"filename":"confection-0.0.3-py3-none-any.whl","has_sig":false,"md5_digest":"9d899ccbd7fac74c888cef4e7cd8e0fd","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":32794,"upload_time":"2022-10-07T11:59:38","upload_time_iso_8601":"2022-10-07T11:59:38.109667Z","url":"https://files.pythonhosted.org/packages/36/9f/03c9137e34b3064f0eba298340d00a8dd4719c0b7021704187a7ddf1e382/confection-0.0.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"5bc7aee373825e3c66a75ee039a975c3a27a6f29b399d7b5a6d204d168c683bd","md5":"653981a747bb3861759fa03410b65cd0","sha256":"4fec47190057c43c9acbecb8b1b87a9bf31c469caa0d6888a5b9384432fdba5a"},"downloads":-1,"filename":"confection-0.0.3.tar.gz","has_sig":false,"md5_digest":"653981a747bb3861759fa03410b65cd0","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":35914,"upload_time":"2022-10-07T11:59:39","upload_time_iso_8601":"2022-10-07T11:59:39.357419Z","url":"https://files.pythonhosted.org/packages/5b/c7/aee373825e3c66a75ee039a975c3a27a6f29b399d7b5a6d204d168c683bd/confection-0.0.3.tar.gz","yanked":false,"yanked_reason":null}],"0.0.4":[{"comment_text":"","digests":{"blake2b_256":"b1c407291f4947d20f545eee76ef20d1eacfb1f80d1d6ab4792bfa6797e0578c","md5":"d89d38484905c07762d12f2ef7581e70","sha256":"aeac5919ba770c7b281aa5863bb6b0efed42568a7ad8ea26b6cb632154503fb2"},"downloads":-1,"filename":"confection-0.0.4-py3-none-any.whl","has_sig":false,"md5_digest":"d89d38484905c07762d12f2ef7581e70","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":32798,"upload_time":"2023-01-10T12:08:08","upload_time_iso_8601":"2023-01-10T12:08:08.065619Z","url":"https://files.pythonhosted.org/packages/b1/c4/07291f4947d20f545eee76ef20d1eacfb1f80d1d6ab4792bfa6797e0578c/confection-0.0.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3503540079384d9665d752631724f578505ddf721b11a7d8318b964397a7a3b8","md5":"a5b98b9f4038e9967d59570ddec0efc2","sha256":"b1ddf5885da635f0e260a40b339730806dfb1bd17d30e08764f35af841b04ecf"},"downloads":-1,"filename":"confection-0.0.4.tar.gz","has_sig":false,"md5_digest":"a5b98b9f4038e9967d59570ddec0efc2","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":36218,"upload_time":"2023-01-10T12:08:09","upload_time_iso_8601":"2023-01-10T12:08:09.697367Z","url":"https://files.pythonhosted.org/packages/35/03/540079384d9665d752631724f578505ddf721b11a7d8318b964397a7a3b8/confection-0.0.4.tar.gz","yanked":false,"yanked_reason":null}],"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"63052d7acb83610e0c5171dfcb4a2968d676800da8082fc456e284fa8e0924f4","md5":"e293be20ec903a1f5518d08fc64ae5e2","sha256":"1d6de16297efe937efaad13f83f45467dedc05acafdb0fb16074299a9c683d85"},"downloads":-1,"filename":"confection-0.1.0-py3-none-any.whl","has_sig":false,"md5_digest":"e293be20ec903a1f5518d08fc64ae5e2","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":34228,"upload_time":"2023-06-29T08:41:26","upload_time_iso_8601":"2023-06-29T08:41:26.286907Z","url":"https://files.pythonhosted.org/packages/63/05/2d7acb83610e0c5171dfcb4a2968d676800da8082fc456e284fa8e0924f4/confection-0.1.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1184339d4abb58f432f357c464b8d9c4adcfe581a1c3cdd7d368260ea1422786","md5":"866557e9dcd34d55a7d4d628d065bf15","sha256":"81c8e58fa810f4a3135c3710652c2258c45b1eec35c8557762a0f133449c75a2"},"downloads":-1,"filename":"confection-0.1.0.tar.gz","has_sig":false,"md5_digest":"866557e9dcd34d55a7d4d628d065bf15","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":37348,"upload_time":"2023-06-29T08:41:29","upload_time_iso_8601":"2023-06-29T08:41:29.284800Z","url":"https://files.pythonhosted.org/packages/11/84/339d4abb58f432f357c464b8d9c4adcfe581a1c3cdd7d368260ea1422786/confection-0.1.0.tar.gz","yanked":false,"yanked_reason":null}],"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"055e1a56e81e3335ce18f6742539edd2f6ea98bbf477fefc9a4dc5c0694bace4","md5":"a7229f6d0628f9c0d9f352cfa08612c8","sha256":"d2d9e53a5a61395caae1ab09281bab17b08a23fa94aabd1cc24c134880d41c30"},"downloads":-1,"filename":"confection-0.1.1-py3-none-any.whl","has_sig":false,"md5_digest":"a7229f6d0628f9c0d9f352cfa08612c8","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":34391,"upload_time":"2023-08-04T10:00:29","upload_time_iso_8601":"2023-08-04T10:00:29.586840Z","url":"https://files.pythonhosted.org/packages/05/5e/1a56e81e3335ce18f6742539edd2f6ea98bbf477fefc9a4dc5c0694bace4/confection-0.1.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"abc2b96f3b9865761265c1fb73d81e2c10ff3dd5b8ea08c449c2577174112fdd","md5":"072642b3c5f23d4b6cb87b974394f1d8","sha256":"4678652fb4aab94f40631c853e2dd76a5a420205f877cb6a9f2459a44fd7aa29"},"downloads":-1,"filename":"confection-0.1.1.tar.gz","has_sig":false,"md5_digest":"072642b3c5f23d4b6cb87b974394f1d8","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":37574,"upload_time":"2023-08-04T10:00:31","upload_time_iso_8601":"2023-08-04T10:00:31.266360Z","url":"https://files.pythonhosted.org/packages/ab/c2/b96f3b9865761265c1fb73d81e2c10ff3dd5b8ea08c449c2577174112fdd/confection-0.1.1.tar.gz","yanked":false,"yanked_reason":null}],"0.1.2":[{"comment_text":"","digests":{"blake2b_256":"cea321634c476fd55f06f5c31876985da59024fab75a537b0398aa4039e4e730","md5":"92baf4a311716595ad7d505b8557b5d7","sha256":"8bde19143fe36c38ea6e7241dec7be14b8a16e51c9d7ade93d19f72d9f8f1115"},"downloads":-1,"filename":"confection-0.1.2-py3-none-any.whl","has_sig":false,"md5_digest":"92baf4a311716595ad7d505b8557b5d7","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":34832,"upload_time":"2023-09-06T10:45:16","upload_time_iso_8601":"2023-09-06T10:45:16.036263Z","url":"https://files.pythonhosted.org/packages/ce/a3/21634c476fd55f06f5c31876985da59024fab75a537b0398aa4039e4e730/confection-0.1.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b74c14f93926b63b2f9b3d08ad72e1fe7e97bb47b63a061906cf3264d26deea4","md5":"d6e7e7f8138ec2123b6531fbeb217d4b","sha256":"7163eb9bdde62cc61a71c6284fb0f0b50b2723b7ef8ab79c7061a7bd659a058e"},"downloads":-1,"filename":"confection-0.1.2.tar.gz","has_sig":false,"md5_digest":"d6e7e7f8138ec2123b6531fbeb217d4b","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":37886,"upload_time":"2023-09-06T10:45:18","upload_time_iso_8601":"2023-09-06T10:45:18.134853Z","url":"https://files.pythonhosted.org/packages/b7/4c/14f93926b63b2f9b3d08ad72e1fe7e97bb47b63a061906cf3264d26deea4/confection-0.1.2.tar.gz","yanked":false,"yanked_reason":null}],"0.1.3":[{"comment_text":"","digests":{"blake2b_256":"93f8e89268a1f885048fb2ee6b5c9f93c4e90de768534acfef3652f87d97d4cb","md5":"9093c8b1992b0e4f47a0b30db18bb257","sha256":"58b125c9bc6786f32e37fe4d98bc3a03e5f509a4b9de02541b99c559f2026092"},"downloads":-1,"filename":"confection-0.1.3-py3-none-any.whl","has_sig":false,"md5_digest":"9093c8b1992b0e4f47a0b30db18bb257","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":34854,"upload_time":"2023-09-08T15:43:07","upload_time_iso_8601":"2023-09-08T15:43:07.872527Z","url":"https://files.pythonhosted.org/packages/93/f8/e89268a1f885048fb2ee6b5c9f93c4e90de768534acfef3652f87d97d4cb/confection-0.1.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ffe7b2780eac8da47754b48d3469cc46679a58f23b8593372d2c8a0ca1bf3e9d","md5":"bb0b2809d973b840d6dba305150a1bb6","sha256":"5a876d368a7698eec58791126757a75a3df16e26cc49653b52426e9ffd39f12f"},"downloads":-1,"filename":"confection-0.1.3.tar.gz","has_sig":false,"md5_digest":"bb0b2809d973b840d6dba305150a1bb6","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":38098,"upload_time":"2023-09-08T15:43:09","upload_time_iso_8601":"2023-09-08T15:43:09.658560Z","url":"https://files.pythonhosted.org/packages/ff/e7/b2780eac8da47754b48d3469cc46679a58f23b8593372d2c8a0ca1bf3e9d/confection-0.1.3.tar.gz","yanked":false,"yanked_reason":null}],"0.1.4":[{"comment_text":"","digests":{"blake2b_256":"3978f9d18da7b979a2e6007bfcea2f3c8cc02ed210538ae1ce7e69092aed7b18","md5":"7d04100f5b4437568ab14af357ef1a59","sha256":"a658818d004939069c3e2b3db74a2cb9d956a5e61a1c9ad61788e0ee09a7090f"},"downloads":-1,"filename":"confection-0.1.4-py3-none-any.whl","has_sig":false,"md5_digest":"7d04100f5b4437568ab14af357ef1a59","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":35237,"upload_time":"2023-11-23T10:00:29","upload_time_iso_8601":"2023-11-23T10:00:29.621107Z","url":"https://files.pythonhosted.org/packages/39/78/f9d18da7b979a2e6007bfcea2f3c8cc02ed210538ae1ce7e69092aed7b18/confection-0.1.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"a3fbc1744d131f0a8247a567b7c7dec3a84c16518e80b6af896d756f9c915833","md5":"a715d6d8c5061d384690c61046afb7fa","sha256":"e80f22fd008b5231a2e8852fac6de9e28f2276a04031d0536cff74fe4a990c8f"},"downloads":-1,"filename":"confection-0.1.4.tar.gz","has_sig":false,"md5_digest":"a715d6d8c5061d384690c61046afb7fa","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":38679,"upload_time":"2023-11-23T10:00:30","upload_time_iso_8601":"2023-11-23T10:00:30.947480Z","url":"https://files.pythonhosted.org/packages/a3/fb/c1744d131f0a8247a567b7c7dec3a84c16518e80b6af896d756f9c915833/confection-0.1.4.tar.gz","yanked":false,"yanked_reason":null}],"0.1.5":[{"comment_text":"","digests":{"blake2b_256":"0c003106b1854b45bd0474ced037dfe6b73b90fe68a68968cef47c23de3d43d2","md5":"4477a8c0df3476f136775e020780dcef","sha256":"e29d3c3f8eac06b3f77eb9dfb4bf2fc6bcc9622a98ca00a698e3d019c6430b14"},"downloads":-1,"filename":"confection-0.1.5-py3-none-any.whl","has_sig":false,"md5_digest":"4477a8c0df3476f136775e020780dcef","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":35451,"upload_time":"2024-05-31T16:16:59","upload_time_iso_8601":"2024-05-31T16:16:59.075523Z","url":"https://files.pythonhosted.org/packages/0c/00/3106b1854b45bd0474ced037dfe6b73b90fe68a68968cef47c23de3d43d2/confection-0.1.5-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"51d357c6631159a1b48d273b40865c315cf51f89df7a9d1101094ef12e3a37c2","md5":"2e84d5944dfa5f1291f03c041c9781c3","sha256":"8e72dd3ca6bd4f48913cd220f10b8275978e740411654b6e8ca6d7008c590f0e"},"downloads":-1,"filename":"confection-0.1.5.tar.gz","has_sig":false,"md5_digest":"2e84d5944dfa5f1291f03c041c9781c3","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":38924,"upload_time":"2024-05-31T16:17:01","upload_time_iso_8601":"2024-05-31T16:17:01.559470Z","url":"https://files.pythonhosted.org/packages/51/d3/57c6631159a1b48d273b40865c315cf51f89df7a9d1101094ef12e3a37c2/confection-0.1.5.tar.gz","yanked":false,"yanked_reason":null}],"0.1.5a0":[{"comment_text":"","digests":{"blake2b_256":"a6b400f611b95f1404212a75b59930b93bf696431408438fb44f5bf9d1d37f09","md5":"74c598be60e7637f77ffeb79eb6b0aed","sha256":"e4f81fdcc0b5c513245e47ece99606c54d60e95bfad3148e34c100406126cea0"},"downloads":-1,"filename":"confection-0.1.5a0-py3-none-any.whl","has_sig":false,"md5_digest":"74c598be60e7637f77ffeb79eb6b0aed","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":35475,"upload_time":"2023-12-31T15:53:37","upload_time_iso_8601":"2023-12-31T15:53:37.845507Z","url":"https://files.pythonhosted.org/packages/a6/b4/00f611b95f1404212a75b59930b93bf696431408438fb44f5bf9d1d37f09/confection-0.1.5a0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"a582ef6399f0fb4c247704d70ed5834f910268f4612def4b5e7a12b7681d3b99","md5":"86107d0cac9fc8e45da1629d254400b5","sha256":"d55f6765535a19cf33355e6e48e616b6c0ba88829503be26e57b90eb25c944e9"},"downloads":-1,"filename":"confection-0.1.5a0.tar.gz","has_sig":false,"md5_digest":"86107d0cac9fc8e45da1629d254400b5","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":38904,"upload_time":"2023-12-31T15:53:39","upload_time_iso_8601":"2023-12-31T15:53:39.704875Z","url":"https://files.pythonhosted.org/packages/a5/82/ef6399f0fb4c247704d70ed5834f910268f4612def4b5e7a12b7681d3b99/confection-0.1.5a0.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"0c003106b1854b45bd0474ced037dfe6b73b90fe68a68968cef47c23de3d43d2","md5":"4477a8c0df3476f136775e020780dcef","sha256":"e29d3c3f8eac06b3f77eb9dfb4bf2fc6bcc9622a98ca00a698e3d019c6430b14"},"downloads":-1,"filename":"confection-0.1.5-py3-none-any.whl","has_sig":false,"md5_digest":"4477a8c0df3476f136775e020780dcef","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":35451,"upload_time":"2024-05-31T16:16:59","upload_time_iso_8601":"2024-05-31T16:16:59.075523Z","url":"https://files.pythonhosted.org/packages/0c/00/3106b1854b45bd0474ced037dfe6b73b90fe68a68968cef47c23de3d43d2/confection-0.1.5-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"51d357c6631159a1b48d273b40865c315cf51f89df7a9d1101094ef12e3a37c2","md5":"2e84d5944dfa5f1291f03c041c9781c3","sha256":"8e72dd3ca6bd4f48913cd220f10b8275978e740411654b6e8ca6d7008c590f0e"},"downloads":-1,"filename":"confection-0.1.5.tar.gz","has_sig":false,"md5_digest":"2e84d5944dfa5f1291f03c041c9781c3","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":38924,"upload_time":"2024-05-31T16:17:01","upload_time_iso_8601":"2024-05-31T16:17:01.559470Z","url":"https://files.pythonhosted.org/packages/51/d3/57c6631159a1b48d273b40865c315cf51f89df7a9d1101094ef12e3a37c2/confection-0.1.5.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
