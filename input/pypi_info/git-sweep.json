{"info":{"author":"Arc90, Inc.","author_email":"UNKNOWN","bugtrack_url":null,"classifiers":["Development Status :: 4 - Beta","Environment :: Console","Intended Audience :: Developers","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: POSIX","Programming Language :: Python :: 2.6","Programming Language :: Python :: 2.7","Topic :: Software Development :: Quality Assurance","Topic :: Software Development :: Version Control","Topic :: Text Processing"],"description":"git-sweep\n=========\n\nA command-line tool that helps you clean up Git branches that have been merged\ninto master.\n\nOne of the best features of Git is cheap branches. There are existing branching\nmodels like `GitHub Flow`_ and Vincent Driessen's `git-flow`_ that describe\nmethods for using this feature.\n\nThe problem\n-----------\n\nYour ``master`` branch is typically where all your code lands. All features\nbranches are meant to be short-lived and merged into ``master`` once they are\ncompleted.\n\nAs time marches on, you can build up **a long list of branches that are no\nlonger needed**. They've been merged into ``master``, what do we do with them\nnow?\n\nThe answer\n----------\n\nUsing ``git-sweep`` you can **safely remove remote branches that have been\nmerged into master**.\n\nTo install it run:\n\n::\n\n    pip install git-sweep || easy_install git-sweep\n\nTry it for yourself (safely)\n----------------------------\n\nTo see a list of branches that git-sweep detects are merged into your master branch:\n\nYou need to have your Git repository as your current working directory.\n\n::\n\n    $ cd myrepo\n\nThe ``preview`` command doesn't make any changes to your repo.\n\n::\n\n    $ git-sweep preview\n    Fetching from the remote\n    These branches have been merged into master:\n\n      branch1\n      branch2\n      branch3\n      branch4\n      branch5\n\n    To delete them, run again with `git-sweep cleanup`\n\nIf you are happy with the list, you can run the command that deletes these\nbranches from the remote, ``cleanup``:\n\n::\n\n    $ git-sweep cleanup\n    Fetching from the remote\n    These branches have been merged into master:\n\n      branch1\n      branch2\n      branch3\n      branch4\n      branch5\n\n    Delete these branches? (y/n) y\n      deleting branch1 (done)\n      deleting branch2 (done)\n      deleting branch3 (done)\n      deleting branch4 (done)\n      deleting branch5 (done)\n\n    All done!\n\n    Tell everyone to run `git fetch --prune` to sync with this remote.\n    (you don't have to, yours is synced)\n\n*Note: this can take a little time, it's talking over the tubes to the remote.*\n\nYou can also give it a different name for your remote and master branches.\n\n::\n\n    $ git-sweep preview --master=develop --origin=github\n    ...\n\nTell it to skip the ``git fetch`` that it does by default.\n\n::\n\n    $ git-sweep preview --nofetch\n    These branches have been merged into master:\n\n      branch1\n\n    To delete them, run again with `git-sweep cleanup --nofetch`\n\nMake it skip certain branches.\n\n::\n\n    $ git-sweep preview --skip=develop\n    Fetching from the remote\n    These branches have been merged into master:\n\n      important-upgrade\n      upgrade-libs\n      derp-removal\n\n    To delete them, run again with `git-sweep cleanup --skip=develop`\n\nOnce git-sweep finds the branches, you'll be asked to confirm that you wish to\ndelete them.\n\n::\n\n    Delete these branches? (y/n)\n\nYou can use the ``--force`` option to bypass this and start deleting\nimmediately.\n\n::\n\n    $ git-sweep cleanup --skip=develop --force\n    Fetching from the remote\n    These branches have been merged into master:\n\n      important-upgrade\n      upgrade-libs\n      derp-removal\n\n      deleting important-upgrade (done)\n      deleting upgrade-libs (done)\n      deleting derp-removal (done)\n\n    All done!\n\n    Tell everyone to run `git fetch --prune` to sync with this remote.\n    (you don't have to, yours is synced)\n\nDevelopment\n-----------\n\ngit-sweep uses `git-flow`_ for development and release cylces. If you want to\nhack on this with us, fork the project and put a pull request into the\n``develop`` branch when you get done.\n\nTo run the tests, bootstrap Buildout and run this command:\n\n::\n\n    $ git clone http://github.com/arc90/git-sweep.git\n    $ cd git-sweep\n    $ python2.7 bootstrap.py\n    ...\n    $ ./bin/buildout\n    ...\n    $ ./bin/test\n\nWe also use Tox_. It will run the tests for Python 2.6 and 2.7.\n\n::\n\n    $ ./bin/tox\n\nRequirements\n------------\n\n* Git >= 1.7\n* Python >= 2.6\n\nLicense\n-------\n\nFriendly neighborhood MIT license.\n\n.. _GitHub Flow: http://scottchacon.com/2011/08/31/github-flow.html\n.. _git-flow: http://nvie.com/posts/a-successful-git-branching-model/\n.. _Tox: http://pypi.python.org/pypi/tox\n\n\nNews\n====\n\n0.1.1\n\n*Release date: March 28, 2012*\n\n* Fix issue #1 which makes the git-sweep help menus more useful\n* Fix a minor grammar issue in the help\n* Fix issue #2 which dropped extra options when telling you to use\n  cleanup\n* Added a --force option to skip confirmation prompt\n\n0.1.0\n-----\n\n*Release date: n/a*\n\n* Initial release","description_content_type":null,"docs_url":null,"download_url":"UNKNOWN","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"http://arc90.com","keywords":"git maintenance branches","license":"MIT","maintainer":null,"maintainer_email":null,"name":"git-sweep","package_url":"https://pypi.org/project/git-sweep/","platform":"UNKNOWN","project_url":"https://pypi.org/project/git-sweep/","project_urls":{"Download":"UNKNOWN","Homepage":"http://arc90.com"},"provides_extra":null,"release_url":"https://pypi.org/project/git-sweep/0.1.1/","requires_dist":null,"requires_python":null,"summary":"Clean up branches from your Git remotes","version":"0.1.1","yanked":false,"yanked_reason":null},"last_serial":792446,"releases":{"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"6871a4b06ba2cd275a2cc1c1eef46ae655517c6b8b05326e8bf60b89e01f2a59","md5":"f0353cb40a6815bf45361001462c291d","sha256":"cd29f1c37247b05aeef5f399489657f973aed78e2e2740da20a62502da0757b3"},"downloads":-1,"filename":"git-sweep-0.1.1.tar.gz","has_sig":false,"md5_digest":"f0353cb40a6815bf45361001462c291d","packagetype":"sdist","python_version":"source","requires_python":null,"size":10394,"upload_time":"2012-03-28T15:25:38","upload_time_iso_8601":"2012-03-28T15:25:38.726309Z","url":"https://files.pythonhosted.org/packages/68/71/a4b06ba2cd275a2cc1c1eef46ae655517c6b8b05326e8bf60b89e01f2a59/git-sweep-0.1.1.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"6871a4b06ba2cd275a2cc1c1eef46ae655517c6b8b05326e8bf60b89e01f2a59","md5":"f0353cb40a6815bf45361001462c291d","sha256":"cd29f1c37247b05aeef5f399489657f973aed78e2e2740da20a62502da0757b3"},"downloads":-1,"filename":"git-sweep-0.1.1.tar.gz","has_sig":false,"md5_digest":"f0353cb40a6815bf45361001462c291d","packagetype":"sdist","python_version":"source","requires_python":null,"size":10394,"upload_time":"2012-03-28T15:25:38","upload_time_iso_8601":"2012-03-28T15:25:38.726309Z","url":"https://files.pythonhosted.org/packages/68/71/a4b06ba2cd275a2cc1c1eef46ae655517c6b8b05326e8bf60b89e01f2a59/git-sweep-0.1.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
