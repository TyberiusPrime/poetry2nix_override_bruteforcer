{"info":{"author":"Jonathan Robson","author_email":"jnrbsn@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Intended Audience :: Developers","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Operating System :: MacOS","Operating System :: MacOS :: MacOS X","Operating System :: POSIX","Operating System :: POSIX :: BSD","Operating System :: POSIX :: Linux","Operating System :: Unix","Programming Language :: Python :: 3","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],"description":".. image:: https://img.shields.io/github/workflow/status/jnrbsn/daemonocle/build/master?style=flat-square\n    :target: https://github.com/jnrbsn/daemonocle/actions?query=workflow:build+branch:master\n\n.. image:: https://img.shields.io/coveralls/jnrbsn/daemonocle/master.svg?style=flat-square\n    :target: https://coveralls.io/github/jnrbsn/daemonocle\n\n.. image:: https://img.shields.io/pypi/v/daemonocle.svg?style=flat-square\n    :target: https://pypi.org/project/daemonocle/\n\n.. image:: https://img.shields.io/pypi/pyversions/daemonocle?style=flat-square\n    :target: https://docs.python.org/whatsnew/index.html\n\n.. image:: https://img.shields.io/badge/platform-linux%20%7C%20macos%20%7C%20unix-lightgrey?style=flat-square\n    :target: https://en.wikipedia.org/wiki/Unix-like\n\n.. image:: https://img.shields.io/github/license/jnrbsn/daemonocle?style=flat-square\n    :target: https://github.com/jnrbsn/daemonocle/blob/master/LICENSE\n\n|\n\ndaemonocle is a library for creating your own Unix-style daemons written in Python. It solves many\nproblems that other daemon libraries have and provides some really useful features you don't often\nsee in other daemons.\n\n.. contents:: **Table of Contents**\n  :backlinks: none\n\nInstallation\n------------\n\nTo install via pip::\n\n    pip install daemonocle\n\nOr download the source code and install manually::\n\n    git clone https://github.com/jnrbsn/daemonocle.git\n    cd daemonocle/\n    python setup.py install\n\nBasic Usage\n-----------\n\nHere's a **really really** basic example:\n\n.. code:: python\n\n    import sys\n    import time\n\n    import daemonocle\n\n    # This is your daemon. It sleeps, and then sleeps again.\n    def main():\n        while True:\n            time.sleep(10)\n\n    if __name__ == '__main__':\n        daemon = daemonocle.Daemon(\n            worker=main,\n            pid_file='/var/run/daemonocle_example.pid',\n        )\n        daemon.do_action(sys.argv[1])\n\nAnd here's the same example with logging and a `Shutdown Callback`_:\n\n.. code:: python\n\n    import logging\n    import sys\n    import time\n\n    import daemonocle\n\n    def cb_shutdown(message, code):\n        logging.info('Daemon is stopping')\n        logging.debug(message)\n\n    def main():\n        logging.basicConfig(\n            filename='/var/log/daemonocle_example.log',\n            level=logging.DEBUG, format='%(asctime)s [%(levelname)s] %(message)s',\n        )\n        logging.info('Daemon is starting')\n        while True:\n            logging.debug('Still running')\n            time.sleep(10)\n\n    if __name__ == '__main__':\n        daemon = daemonocle.Daemon(\n            worker=main,\n            shutdown_callback=cb_shutdown,\n            pid_file='/var/run/daemonocle_example.pid',\n        )\n        daemon.do_action(sys.argv[1])\n\nAnd here's what it looks like when you run it::\n\n    user@host:~$ python example.py start\n    Starting example.py ... OK\n    user@host:~$ python example.py status\n    example.py -- pid: 1234, status: running, uptime: 1m, %cpu: 0.0, %mem: 0.0\n    user@host:~$ python example.py stop\n    Stopping example.py ... OK\n    user@host:~$ cat /var/log/daemonocle_example.log\n    2014-05-04 12:39:21,090 [INFO] Daemon is starting\n    2014-05-04 12:39:21,091 [DEBUG] Still running\n    2014-05-04 12:39:31,091 [DEBUG] Still running\n    2014-05-04 12:39:41,091 [DEBUG] Still running\n    2014-05-04 12:39:51,093 [DEBUG] Still running\n    2014-05-04 12:40:01,094 [DEBUG] Still running\n    2014-05-04 12:40:07,113 [INFO] Daemon is stopping\n    2014-05-04 12:40:07,114 [DEBUG] Terminated by SIGTERM (15)\n\nFor more details, see the `Detailed Usage`_ section below.\n\nRationale\n---------\n\nIf you think about it, a lot of Unix daemons don't really know what the hell they're doing. Have you\never found yourself in a situation that looked something like this? ::\n\n    user@host:~$ sudo example start\n    starting example ... ok\n    user@host:~$ ps aux | grep example\n    user      1234  0.0  0.0   1234  1234 pts/1    S+   12:34   0:00 grep example\n    user@host:~$ sudo example start\n    starting example ... ok\n    user@host:~$ echo $?\n    0\n    user@host:~$ tail -f /var/log/example.log\n    ...\n\nOr something like this? ::\n\n    user@host:~$ sudo example stop\n    stopping example ... ok\n    user@host:~$ ps aux | grep example\n    user       123  0.0  0.0   1234  1234 ?        Ss   00:00   0:00 /usr/local/bin/example\n    user      1234  0.0  0.0   1234  1234 pts/1    S+   12:34   0:00 grep example\n    user@host:~$ sudo example stop\n    stopping example ... ok\n    user@host:~$ ps aux | grep example\n    user       123  0.0  0.0   1234  1234 ?        Ss   00:00   0:00 /usr/local/bin/example\n    user      1240  0.0  0.0   1234  1234 pts/1    S+   12:34   0:00 grep example\n    user@host:~$ sudo kill -9 123\n    ...\n\nOr something like this? ::\n\n    user@host:~$ sudo example status\n    Usage: example {start|stop|restart}\n    user@host:~$ ps aux | grep example\n    ...\n\nThese are just a few examples of unnecessarily common problems. It doesn't have to be this way.\n\n    **Note:** You might be thinking, \"Why not just write a smarter start/stop shell script wrapper\n    for your daemon that checks whether or not it actually started, actually stopped, etc.?\"\n    Seriously? **It doesn't have to be this way.** I believe daemons should be more self-aware. They\n    should handle their own problems most of the time, and your start/stop script should only be a\n    very thin wrapper around your daemon or simply a symlink to your daemon.\n\nThe Problem\n~~~~~~~~~~~\n\nIf you've ever dug deep into the nitty-gritty details of how daemonization works, you're probably\nfamiliar with the `standard \"double fork\" paradigm <http://bit.ly/stevens-daemon>`_ first introduced\nby W. Richard Stevens in the book `Advanced Programming in the UNIX Environment\n<http://amzn.com/0321637739>`_. One of the problems with the standard way to implement this is that\nif the final child dies immediately when it gets around to doing real work, the original parent\nprocess (the one that actually had control of your terminal) is long gone. So all you know is that\nthe process got forked, but you have no idea if it actually kept running for more than a fraction of\na second. And let's face it, one of the most likely times for a daemon to die is immediately after\nit starts (due to bad configuration, permissions, etc.).\n\nThe next problem mentioned in the section above is when you try to stop a daemon, it doesn't\nactually stop, and you have no idea that it didn't actually stop. This happens when a process\ndoesn't respond properly to a ``SIGTERM`` signal. It happens more often than it should. The problem\nis not necessarily the fact that it didn't stop. It's the fact that you didn't *know* that it didn't\nstop. The start/stop script knows that it successfully sent the signal and so it assumes success.\nThis also becomes a problem when your ``restart`` command blindly calls ``stop`` and then ``start``,\nbecause it will try to start a new instance of the daemon before the previous one has exited.\n\nThese are the biggest problems most daemons have in my opinion. daemonocle solves these problems and\nprovides many other \"fancy\" features.\n\nThe Solution\n~~~~~~~~~~~~\n\nThe problem with the daemon immediately dying on startup and you not knowing about it is solved by\nhaving the first child (the immediate parent of the final child) sleep for one second and then call\n``os.waitpid(pid, os.WNOHANG)`` to see if the process is still running. This is what daemonocle\ndoes. So if you're daemon dies within one second of starting, you'll know about it.\n\nThis problem with the daemon not stopping and you not knowing about it is solved by simply waiting\nfor the process to finish (with a timeout). This is what daemonocle does. (Note: When a timeout\noccurs, it doesn't try to send a ``SIGKILL``. This is not always what you'd want and often not a\ngood idea.)\n\nOther Useful Features\n~~~~~~~~~~~~~~~~~~~~~\n\nBelow are some other useful features that daemononcle provides that you might not find elsewhere.\n\nThe ``status`` Action\n+++++++++++++++++++++\n\nThere is a ``status`` action that not only displays whether or not the daemon is running and its\nPID, but also the uptime of the daemon and the % CPU and % memory usage of all the processes in the\nsame process group as the daemon (which are probably its children). So if you have a daemon that\nlaunches mulitple worker processes, the ``status`` action will show the % CPU and % memory usage of\nall the workers combined.\n\nIt might look something like this::\n\n    user@host:~$ python example.py status\n    example.py -- pid: 1234, status: running, uptime: 12d 3h 4m, %cpu: 12.4, %mem: 4.5\n\nYou can even get JSON output if you call the action like this:\n\n.. code:: python\n\n    daemon.do_action('status', json=True)\n\nIf you use the `Integration with click`_ described below, this option is available via the\n``--json`` CLI option. You can also just get a ``dict`` directly and programatically without\nprinting it to STDOUT by calling ``Daemon.get_status()``.\n\nSlightly Smarter ``restart`` Action\n+++++++++++++++++++++++++++++++++++\n\nHave you ever tried to restart a daemon only to realize that it's not actually running? Let me\nguess: it just gave you an error and didn't start the daemon. A lot of the time this is not a\nproblem, but if you're trying to restart the daemon in an automated way, it's more annoying to have\nto check if it's running and do either a ``start`` or ``restart`` accordingly. With daemonocle, if\nyou try to restart a daemon that's not running, it will give you a warning saying that it wasn't\nrunning and then start the daemon. This is often what people expect.\n\nSelf-Reload\n+++++++++++\n\nDaemons that use daemonocle have the ability to reload themselves by simply calling\n``daemon.reload()`` where ``daemon`` is your ``daemonocle.Daemon`` instance. The execution of the\ncurrent daemon halts wherever ``daemon.reload()`` was called, and a new daemon is started up to\nreplace the current one. From your code's perspective, it's pretty much the same as a doing a\n``restart`` except that it's initiated from within the daemon itself and there's no signal handling\ninvolved. Here's a basic example of a daemon that watches a config file and reloads itself when the\nconfig file changes:\n\n.. code:: python\n\n    import os\n    import sys\n    import time\n\n    import daemonocle\n\n    class FileWatcher(object):\n\n        def __init__(self, filename, daemon):\n            self._filename = filename\n            self._daemon = daemon\n            self._file_mtime = os.stat(self._filename).st_mtime\n\n        def file_has_changed(self):\n            current_mtime = os.stat(self._filename).st_mtime\n            if current_mtime != self._file_mtime:\n                self._file_mtime = current_mtime\n                return True\n            return False\n\n        def watch(self):\n            while True:\n                if self.file_has_changed():\n                    self._daemon.reload()\n                time.sleep(1)\n\n    if __name__ == '__main__':\n        daemon = daemonocle.Daemon(pid_file='/var/run/daemonocle_example.pid')\n        fw = FileWatcher(filename='/etc/daemonocle_example.conf', daemon=daemon)\n        daemon.worker = fw.watch\n        daemon.do_action(sys.argv[1])\n\nShutdown Callback\n+++++++++++++++++\n\nYou may have noticed from the `Basic Usage`_ section above that a ``shutdown_callback`` was defined.\nThis function gets called whenever the daemon is shutting down in a catchable way, which should be\nmost of the time except for a ``SIGKILL`` or if your server crashes unexpectedly or loses power or\nsomething like that. This function can be used for doing any sort of cleanup that your daemon needs\nto do. Also, if you want to log (to the logger of your choice) the reason for the shutdown and the\nintended exit code, you can use the ``message`` and ``code`` arguments that will be passed to your\ncallback (your callback must take these two arguments).\n\nNon-Detached Mode\n+++++++++++++++++\n\nThis is not particularly interesting per se, but it's worth noting that in non-detached mode, your\ndaemon will do everything else you've configured it to do (i.e. ``setuid``, ``setgid``, ``chroot``,\netc.) except actually detaching from your terminal. So while you're testing, you can get an\nextremely accurate view of how your daemon will behave in the wild. It's also worth noting that\nself-reloading works in non-detached mode, which was a little tricky to figure out initially.\n\nFile Descriptor Handling\n++++++++++++++++++++++++\n\nOne of the things that daemons typically do is close all open file descriptors and establish new\nones for ``STDIN``, ``STDOUT``, ``STDERR`` that just point to ``/dev/null``. This is fine most of\nthe time, but if your worker is an instance method of a class that opens files in its ``__init__()``\nmethod, then you'll run into problems if you're not careful. This is also a problem if you're\nimporting a module that leaves open files behind. For example, importing the\n`random <https://docs.python.org/3/library/random.html>`_ standard library module in Python 3\nresults in an open file descriptor for ``/dev/urandom``.\n\nSince this \"feature\" of daemons often causes more problems than it solves, and the problems it\ncauses sometimes have strange side-effects that make it very difficult to troubleshoot, this feature\nis optional and disabled by default in daemonocle via the ``close_open_files`` option.\n\nDetailed Usage\n--------------\n\nThe ``daemonocle.Daemon`` class is the main class for creating a daemon using daemonocle. Here's the\nconstructor signature for the class:\n\n.. code:: python\n\n    class daemonocle.Daemon(\n        name=None, worker=None, detach=True,\n        pid_file=None, work_dir='/', stdout_file=None, stderr_file=None, chroot_dir=None,\n        uid=None, gid=None, umask=0o22, close_open_files=False,\n        shutdown_callback=None, stop_timeout=10)\n\nAnd here are descriptions of all the arguments:\n\n``name``\n    The name of your program to use in output messages. Default: ``os.path.basename(sys.argv[0])``\n\n``worker``\n    The function that does all the work for your daemon.\n\n``detach``\n    Whether or not to detach from the terminal and go into the background. See `Non-Detached Mode`_\n    for more details. Default: ``True``\n\n``pid_file``\n    The path to a PID file to use. It's not required to use a PID file, but if you don't, you won't\n    be able to use all the features you might expect. Make sure the user your daemon is running as\n    has permission to write to the directory this file is in.\n\n``work_dir``\n    The path to a directory to change to when the daemon starts. Note that a file system cannot be\n    unmounted if a process has its working directory on that file system. So if you change the\n    default, be careful about what you change it to. Default: ``\"/\"``\n\n``stdout_file``\n    If provided when ``detach=True``, the STDOUT stream will be redirected (appended) to the file\n    at the given path. In non-detached mode, this argument is ignored.\n\n    *New in version 1.1.0.*\n\n``stderr_file``\n    If provided when ``detach=True``, the STDERR stream will be redirected (appended) to the file\n    at the given path. In non-detached mode, this argument is ignored.\n\n    *New in version 1.1.0.*\n\n``chroot_dir``\n    The path to a directory to set as the effective root directory when the daemon starts. The\n    default is not to do anything.\n\n``uid``\n    The user ID to switch to when the daemon starts. The default is to not switch users.\n\n``gid``\n    The group ID to switch to when the daemon starts. The default is to not switch groups.\n\n``umask``\n    The file creation mask (\"umask\") for the process. Default: ``0o022``\n\n``close_open_files``\n    Whether or not to close all open files when the daemon detaches. Default: ``False``\n\n``shutdown_callback``\n    This will get called anytime the daemon is shutting down. It should take a ``message`` and a\n    ``code`` argument. The message is a human readable message that explains why the daemon is\n    shutting down. It might useful to log this message. The code is the exit code with which it\n    intends to exit. See `Shutdown Callback`_ for more details.\n\n``stop_timeout``\n    Number of seconds to wait for the daemon to stop before throwing an error. Default: ``10``\n\nActions\n~~~~~~~\n\nThe default actions are ``start``, ``stop``, ``restart``, and ``status``. You can get a list of\navailable actions using the ``daemonocle.Daemon.list_actions()`` method. The recommended way to call\nan action is using the ``daemonocle.Daemon.do_action(action)`` method. The string name of an action\nis the same as the method name except with dashes in place of underscores.\n\nIf you want to create your own actions, simply subclass ``daemonocle.Daemon`` and add the\n``@daemonocle.expose_action`` decorator to your action method, and that's it.\n\nHere's an example:\n\n.. code:: python\n\n    import daemonocle\n\n    class MyDaemon(daemonocle.Daemon):\n\n        @daemonocle.expose_action\n        def full_status(self):\n            \"\"\"Get more detailed status of the daemon.\"\"\"\n            pass\n\nThen, if you did the basic ``daemon.do_action(sys.argv[1])`` like in all the examples above, you can\ncall your action with a command like ``python example.py full-status``.\n\nIntegration with click\n~~~~~~~~~~~~~~~~~~~~~~\n\ndaemonocle also provides an integration with `click <http://click.pocoo.org/>`_, the \"Command Line\nInterface Creation Kit\". The integration is in the form of a custom command class\n``daemonocle.cli.DaemonCLI`` that you can use in conjunction with the ``@click.command()`` decorator\nto automatically generate a command line interface with subcommands for all your actions. It also\nautomatically daemonizes the decorated function. The decorated function becomes the worker, and the\nactions are automatically mapped from click to daemonocle.\n\nHere's an example:\n\n.. code:: python\n\n    import time\n\n    import click\n    from daemonocle.cli import DaemonCLI\n\n    @click.command(cls=DaemonCLI, daemon_params={'pid_file': '/var/run/example.pid'})\n    def main():\n        \"\"\"This is my awesome daemon. It pretends to do work in the background.\"\"\"\n        while True:\n            time.sleep(10)\n\n    if __name__ == '__main__':\n        main()\n\nHere are all the help pages for the default actions::\n\n    user@host:~$ python example.py --help\n    Usage: example.py [OPTIONS] COMMAND [ARGS]...\n\n      This is my awesome daemon. It pretends to do work in the background.\n\n    Options:\n      --help  Show this message and exit.\n\n    Commands:\n      start    Start the daemon.\n      stop     Stop the daemon.\n      restart  Stop then start the daemon.\n      status   Get the status of the daemon.\n\n    user@host:~$ python example.py start --help\n    Usage: example.py start [OPTIONS]\n\n      Start the daemon.\n\n    Options:\n      --debug  Do NOT detach and run in the background.\n      --help   Show this message and exit.\n\n    user@host:~$ python example.py stop --help\n    Usage: example.py stop [OPTIONS]\n\n      Stop the daemon.\n\n    Options:\n      --timeout INTEGER  Number of seconds to wait for the daemon to stop.\n                         Overrides \"stop_timeout\" from daemon definition.\n      --force            Kill the daemon uncleanly if the timeout is reached.\n      --help             Show this message and exit.\n\n    user@host:~$ python example.py restart --help\n    Usage: example.py restart [OPTIONS]\n\n      Stop then start the daemon.\n\n    Options:\n      --timeout INTEGER  Number of seconds to wait for the daemon to stop.\n                         Overrides \"stop_timeout\" from daemon definition.\n      --force            Kill the daemon forcefully after the timeout.\n      --debug            Do NOT detach and run in the background.\n      --help             Show this message and exit.\n\n    user@host:~$ python example.py status --help\n    Usage: example.py status [OPTIONS]\n\n      Get the status of the daemon.\n\n    Options:\n      --json         Show the status in JSON format.\n      --fields TEXT  Comma-separated list of process info fields to display.\n      --help         Show this message and exit.\n\nThe ``daemonocle.cli.DaemonCLI`` class also accepts a ``daemon_class`` argument that can be a\nsubclass of ``daemonocle.Daemon``. It will use your custom class, automatically create subcommands\nfor any custom actions you've defined, and use the docstrings of the action methods as the help text\njust like click usually does.\n\nThis integration is entirely optional. daemonocle doesn't enforce any sort of argument parsing. You\ncan use argparse, optparse, or just plain ``sys.argv`` if you want.\n\nStarting with version 1.1.0, you can also use a couple different shorter ways of invoking the CLI.\n\nLike this:\n\n.. code:: python\n\n    from daemonocle.cli import cli\n\n    @cli(pid_file='/var/run/example.pid')\n    def main():\n        \"\"\"Do stuff\"\"\"\n        ...\n\n    if __name__ == '__main__':\n        main()\n\nOr like this:\n\n.. code:: python\n\n    from daemonocle import Daemon\n\n    def main():\n        \"\"\"Do stuff\"\"\"\n        ...\n\n    if __name__ == '__main__':\n        daemon = Daemon(worker=main, pid_file='/var/run/example.pid')\n        daemon.cli()\n\nThe above two examples are equivalent. Use whichever way works best for you.\n\n\nBugs, Requests, Questions, etc.\n-------------------------------\n\nPlease create an `issue on GitHub <https://github.com/jnrbsn/daemonocle/issues>`_.\n\nRelease History\n---------------\n\nv1.2.3 (2021-04-22)\n~~~~~~~~~~~~~~~~~~~\n\n* Pass args to click from Daemon.cli()\n* Don't run start hook on reload or when the daemon is already running\n\nv1.2.1 and v1.2.2 (2021-02-16)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* Minor tweaks to some undocumented experimental features\n\nv1.2.0 (2021-02-15)\n~~~~~~~~~~~~~~~~~~~\n\n* Dropped support for Python 2.7 and 3.5 (only >= 3.6 is now supported)\n* Deprecated ``shutdown_callback`` argument in favor of new hooks system.\n  Replace ``shutdown_callback=func`` with ``hooks={'shutdown': func}``.\n* Added ``'start'`` hook that gets called before attempting to start the\n  daemon. This can be useful for checking things or setting things up.\n* Improvements to some undocumented experimental features. :)\n\nv1.1.1 (2020-12-31)\n~~~~~~~~~~~~~~~~~~~\n\n* The ``stop`` action will now clean up the PID file if the worker didn't\n  do it for some reason.\n* A few bug fixes to some undocumented experimental features. :)\n\nv1.1.0 (2020-12-16)\n~~~~~~~~~~~~~~~~~~~\n\n* Official support for Python 3.9\n* Added back official support for Python 3.5\n* Increased test coverage to over 95%.\n* All tests now pass on macOS (Intel) and the GitHub Actions build now runs on\n  macOS 10.15 in addition to Ubuntu.\n* Fixed the ``close_open_files`` option to be much more reliable and consistent\n  across different platforms.\n* Fixed a race condition with the self-reload functionality where the PID file\n  of the parent process was being deleted while the child process was trying to\n  read it.\n* Added ``stdout_file`` and ``stderr_file`` arguments to ``Daemon``. If these\n  arguments are provided when ``detach=True``, STDOUT and STDERR will be\n  redirected to these files. In non-detached mode, these arguments are ignored.\n* When ``chrootdir`` is given, all other paths are now always considered\n  relative to the chroot directory, even with a leading slash.\n* Actions can now take arbitrary arguments, and (on Python 3) CLI options are\n  auto-generated from the function signature. The auto-generated CLI options\n  work best when your action's function signature contains type annotations and\n  default values where applicable.\n* Added ``timeout`` and ``force`` arguments to the built-in ``stop`` action,\n  accessible from the CLI as ``--timeout`` and ``--force``.\n* Added ``json`` and ``fields`` arguments to the built-in ``status`` action,\n  accessible from the CLI as ``--json`` and ``--fields``.\n* Added colored output when the output stream is attached to a terminal.\n* Fixed a bug where the daemon wouldn't respond properly to ``docker stop``\n  when running in a docker container.\n* The worker function can now be a method called ``worker`` on a ``Daemon``\n  subclass.\n* Some more secret experimental stuff. :)\n\nv1.0.2 (2020-07-12)\n~~~~~~~~~~~~~~~~~~~\n\n* Official support for Python 2.7, 3.6, 3.7, and 3.8.\n* Fixed bug checking if a stream is a socket on Python 3.8.\n* Closing open files is now more efficient on systems with a very high limit\n  on the number of open files.\n* Improved detection of running inside a container.\n\nv1.0.1 (2016-04-17)\n~~~~~~~~~~~~~~~~~~~\n\n* No changes in this release. Bumped version only to re-upload to PyPI.\n\nv1.0.0 (2016-04-17)\n~~~~~~~~~~~~~~~~~~~\n\n* Added official support for Python 2.7, 3.3, 3.4, and 3.5.\n* Added a comprehensive suite of unit tests with over 90% code coverage.\n* Dependencies (click and psutil) are no longer pinned to specific versions.\n* Fixed bug with ``atexit`` handlers not being called in intermediate processes.\n* Fixed bug when PID file is a relative path.\n* Fixed bug when STDIN doesn't have a file descriptor number.\n* Fixed bug when running in non-detached mode in a Docker container.\n* A TTY is no longer checked for when deciding how to run in non-detached mode.\n  The behavior was inconsistent across different platforms.\n* Fixed bug when a process stopped before having chance to check if it stopped.\n* Fixed bug where an exception could be raised if a PID file is already gone\n  when trying to remove it.\n* Subdirectories created for PID files now respect the ``umask`` setting.\n* The pre-``umask`` mode for PID files is now ``0o666`` instead of ``0o777``,\n  which will result in a default mode of ``0o644`` instead of ``0o755`` when\n  using the default ``umask`` of ``0o22``.\n\nv0.8 (2014-08-01)\n~~~~~~~~~~~~~~~~~\n\n* Upgraded click to version 2.5.\n* Status action now returns exit code 1 if the daemon is not running.\n\nv0.7 (2014-06-23)\n~~~~~~~~~~~~~~~~~\n\n* Fixed bug that was causing an empty PID file on Python 3.\n* Upgraded click to version 2.1.\n* Open file discriptors are no longer closed by default. This functionality is now optional via the\n  ``close_open_files`` argument to ``Daemon()``.\n* Added ``is_worker`` argument to ``DaemonCLI()`` as well as the ``pass_daemon`` decorator.\n\nv0.6 (2014-06-10)\n~~~~~~~~~~~~~~~~~\n\n* Upgraded click to version 2.0.\n\nv0.5 (2014-06-09)\n~~~~~~~~~~~~~~~~~\n\n* Fixed literal octal formatting to work with Python 3.\n\nv0.4 (2014-05-19)\n~~~~~~~~~~~~~~~~~\n\n* Fixed bug with uptime calculation in status action.\n* Upgraded click to version 0.7.\n\nv0.3 (2014-05-14)\n~~~~~~~~~~~~~~~~~\n\n* Reorganized package and cleaned up code.\n\nv0.2 (2014-05-12)\n~~~~~~~~~~~~~~~~~\n\n* Renamed ``Daemon.get_actions()`` to ``Daemon.list_actions()``.\n* Improvements to documentation.\n* Fixed bug with non-detached mode when parent is in the same process group.\n\nv0.1 (2014-05-11)\n~~~~~~~~~~~~~~~~~\n\n* Initial release.","description_content_type":"text/x-rst","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"http://github.com/jnrbsn/daemonocle","keywords":"daemon daemonize fork linux macos bsd unix posix cli","license":"MIT","maintainer":"","maintainer_email":"","name":"daemonocle","package_url":"https://pypi.org/project/daemonocle/","platform":"","project_url":"https://pypi.org/project/daemonocle/","project_urls":{"Homepage":"http://github.com/jnrbsn/daemonocle"},"provides_extra":null,"release_url":"https://pypi.org/project/daemonocle/1.2.3/","requires_dist":null,"requires_python":">=3.6","summary":"A Python library for creating super fancy Unix daemons","version":"1.2.3","yanked":false,"yanked_reason":null},"last_serial":10146238,"releases":{"0.1":[{"comment_text":"","digests":{"blake2b_256":"533102d9f5879ce577ca8f10b53dad8b12842359c1dbc8a4a87664b406b7d419","md5":"73153c087c448f1c55b99e212a3b4616","sha256":"5a278f4e3e8c1039f0fa29a2912bec8e3020f2f78840679c3c4d8a9f4ba13e43"},"downloads":-1,"filename":"daemonocle-0.1.tar.gz","has_sig":false,"md5_digest":"73153c087c448f1c55b99e212a3b4616","packagetype":"sdist","python_version":"source","requires_python":null,"size":15424,"upload_time":"2014-05-12T03:43:32","upload_time_iso_8601":"2014-05-12T03:43:32.731086Z","url":"https://files.pythonhosted.org/packages/53/31/02d9f5879ce577ca8f10b53dad8b12842359c1dbc8a4a87664b406b7d419/daemonocle-0.1.tar.gz","yanked":false,"yanked_reason":null}],"0.2":[{"comment_text":"","digests":{"blake2b_256":"525b90830d55943860de58f756793123a4759cf912987a3bf16970fd14b1e15a","md5":"20b0162543e39946ef5fa553afa95fc7","sha256":"d0ad9398c2387da9b83012517b339aa5da20bdde79675f9a3ecf22bc89a5fdc7"},"downloads":-1,"filename":"daemonocle-0.2.tar.gz","has_sig":false,"md5_digest":"20b0162543e39946ef5fa553afa95fc7","packagetype":"sdist","python_version":"source","requires_python":null,"size":15500,"upload_time":"2014-05-13T00:32:54","upload_time_iso_8601":"2014-05-13T00:32:54.881884Z","url":"https://files.pythonhosted.org/packages/52/5b/90830d55943860de58f756793123a4759cf912987a3bf16970fd14b1e15a/daemonocle-0.2.tar.gz","yanked":false,"yanked_reason":null}],"0.3":[{"comment_text":"","digests":{"blake2b_256":"16c103185cb143b4e750a4866b5cad01713cb5f1f6cb3b74402ac6927b6adfc7","md5":"38422acfb19100b249ce7b47b491bfab","sha256":"2da7d993e19011f1b30c12fa09df6e8184e379e54f124015aff5bb22060491bc"},"downloads":-1,"filename":"daemonocle-0.3.tar.gz","has_sig":false,"md5_digest":"38422acfb19100b249ce7b47b491bfab","packagetype":"sdist","python_version":"source","requires_python":null,"size":15928,"upload_time":"2014-05-15T07:49:49","upload_time_iso_8601":"2014-05-15T07:49:49.875909Z","url":"https://files.pythonhosted.org/packages/16/c1/03185cb143b4e750a4866b5cad01713cb5f1f6cb3b74402ac6927b6adfc7/daemonocle-0.3.tar.gz","yanked":false,"yanked_reason":null}],"0.4":[{"comment_text":"","digests":{"blake2b_256":"4f5cd46ee511c8e2bb1b5033cd5c5ab374990cad05b66259f64c6f97828a8c9c","md5":"79edf0d7c98003432b7f9c4274710025","sha256":"29e2f102806e361dfd7257d0de426d3187f0c578b6b93a2279743aa5cae9a2bf"},"downloads":-1,"filename":"daemonocle-0.4.tar.gz","has_sig":false,"md5_digest":"79edf0d7c98003432b7f9c4274710025","packagetype":"sdist","python_version":"source","requires_python":null,"size":15936,"upload_time":"2014-05-19T21:27:56","upload_time_iso_8601":"2014-05-19T21:27:56.607130Z","url":"https://files.pythonhosted.org/packages/4f/5c/d46ee511c8e2bb1b5033cd5c5ab374990cad05b66259f64c6f97828a8c9c/daemonocle-0.4.tar.gz","yanked":false,"yanked_reason":null}],"0.5":[{"comment_text":"","digests":{"blake2b_256":"fb5aeb5e0a6a4af24946471a4039cb005a8c12202bf4e6fbfd3da4507f946090","md5":"97cfd7541dbab90b5348f94f2efd9ba1","sha256":"f00e84b4487eb7c9039943c386f1f4e3338492eed7ad31a8d1186e450715c047"},"downloads":-1,"filename":"daemonocle-0.5.tar.gz","has_sig":false,"md5_digest":"97cfd7541dbab90b5348f94f2efd9ba1","packagetype":"sdist","python_version":"source","requires_python":null,"size":15937,"upload_time":"2014-06-10T04:27:30","upload_time_iso_8601":"2014-06-10T04:27:30.738130Z","url":"https://files.pythonhosted.org/packages/fb/5a/eb5e0a6a4af24946471a4039cb005a8c12202bf4e6fbfd3da4507f946090/daemonocle-0.5.tar.gz","yanked":false,"yanked_reason":null}],"0.6":[{"comment_text":"","digests":{"blake2b_256":"aa0e62a73e486f5cc388690b43997b8d68338d8bc9b3a3df7156bc68fe835a73","md5":"24b384275afaaa16623c741d1d54a3e3","sha256":"f1d810497fbe5b1a22765fa22b583f841429e37bbb66f7d63956772956d30215"},"downloads":-1,"filename":"daemonocle-0.6.tar.gz","has_sig":false,"md5_digest":"24b384275afaaa16623c741d1d54a3e3","packagetype":"sdist","python_version":"source","requires_python":null,"size":15938,"upload_time":"2014-06-11T05:00:35","upload_time_iso_8601":"2014-06-11T05:00:35.814908Z","url":"https://files.pythonhosted.org/packages/aa/0e/62a73e486f5cc388690b43997b8d68338d8bc9b3a3df7156bc68fe835a73/daemonocle-0.6.tar.gz","yanked":false,"yanked_reason":null}],"0.7":[{"comment_text":"","digests":{"blake2b_256":"0cc3e73098713cbfacd429586f009e1d75570ce3585ea6061da284781d9e21af","md5":"b1eb29b15da3804bc6d091314bffffbe","sha256":"191f451400c3a4c6e2760082c7a7835ecbe201db319202e6c42916c0b596338a"},"downloads":-1,"filename":"daemonocle-0.7.tar.gz","has_sig":false,"md5_digest":"b1eb29b15da3804bc6d091314bffffbe","packagetype":"sdist","python_version":"source","requires_python":null,"size":16004,"upload_time":"2014-06-24T03:38:03","upload_time_iso_8601":"2014-06-24T03:38:03.711826Z","url":"https://files.pythonhosted.org/packages/0c/c3/e73098713cbfacd429586f009e1d75570ce3585ea6061da284781d9e21af/daemonocle-0.7.tar.gz","yanked":false,"yanked_reason":null}],"0.8":[{"comment_text":"","digests":{"blake2b_256":"23b57afd4328fd12b435cd908c922241f92183c0272574fa475f90b29006d25a","md5":"b0912dec23b42adc5aa55f0cb410dde0","sha256":"b5fd390a3cf617c9113be02097892d2a0e967d99cc4ec9926671e20e8c03520c"},"downloads":-1,"filename":"daemonocle-0.8.tar.gz","has_sig":false,"md5_digest":"b0912dec23b42adc5aa55f0cb410dde0","packagetype":"sdist","python_version":"source","requires_python":null,"size":16023,"upload_time":"2014-08-01T18:10:23","upload_time_iso_8601":"2014-08-01T18:10:23.586327Z","url":"https://files.pythonhosted.org/packages/23/b5/7afd4328fd12b435cd908c922241f92183c0272574fa475f90b29006d25a/daemonocle-0.8.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0":[],"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"9a0de7b411174ccff6b342a80283b3dc9728807372b6a27febc279dd0f9057f2","md5":"961dbab6b8d53095695c3ae3287feea3","sha256":"a8fc48d55f6390302a9a1816ad488cba640e70948f750d4c8fe5a401294dab68"},"downloads":-1,"filename":"daemonocle-1.0.1.tar.gz","has_sig":false,"md5_digest":"961dbab6b8d53095695c3ae3287feea3","packagetype":"sdist","python_version":"source","requires_python":null,"size":23399,"upload_time":"2016-04-18T02:36:31","upload_time_iso_8601":"2016-04-18T02:36:31.919425Z","url":"https://files.pythonhosted.org/packages/9a/0d/e7b411174ccff6b342a80283b3dc9728807372b6a27febc279dd0f9057f2/daemonocle-1.0.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.2":[{"comment_text":"","digests":{"blake2b_256":"4dbb1cfdb3a6fe74fcd6d86b54d29f1af043f456896885a571d84f5ca6524f6e","md5":"6d0941a2e4bc015bb9084f12193b9c0f","sha256":"025fb5c53b42618f8cdd592936621c833a871f27eb747e0fdbf3cdb4643a92b3"},"downloads":-1,"filename":"daemonocle-1.0.2.tar.gz","has_sig":false,"md5_digest":"6d0941a2e4bc015bb9084f12193b9c0f","packagetype":"sdist","python_version":"source","requires_python":null,"size":25504,"upload_time":"2020-07-12T17:39:32","upload_time_iso_8601":"2020-07-12T17:39:32.195167Z","url":"https://files.pythonhosted.org/packages/4d/bb/1cfdb3a6fe74fcd6d86b54d29f1af043f456896885a571d84f5ca6524f6e/daemonocle-1.0.2.tar.gz","yanked":false,"yanked_reason":null}],"1.1.0":[{"comment_text":"","digests":{"blake2b_256":"0520d827c34fdd3d015b8c0a5248c3ecbfe8d1370e1f6778d229a5386b97bb2e","md5":"051daf60fce26bf4898131acdf122f52","sha256":"e03763004bb953c88220ae365e2bc9080a62e0aeec3287cb845870477a286965"},"downloads":-1,"filename":"daemonocle-1.1.0.tar.gz","has_sig":false,"md5_digest":"051daf60fce26bf4898131acdf122f52","packagetype":"sdist","python_version":"source","requires_python":null,"size":38381,"upload_time":"2020-12-17T02:41:23","upload_time_iso_8601":"2020-12-17T02:41:23.567787Z","url":"https://files.pythonhosted.org/packages/05/20/d827c34fdd3d015b8c0a5248c3ecbfe8d1370e1f6778d229a5386b97bb2e/daemonocle-1.1.0.tar.gz","yanked":false,"yanked_reason":null}],"1.1.1":[{"comment_text":"","digests":{"blake2b_256":"f3dce4e7c9d1bf0485499c34aea390b7f2be3e66c770bbd9dc9935546559dd92","md5":"c9b691465a1777afdc11592f37c3bce7","sha256":"69a0933635493a0ade73cb9feb1fe469aa4a94efd0133a91a78a3eb6383b3c30"},"downloads":-1,"filename":"daemonocle-1.1.1.tar.gz","has_sig":false,"md5_digest":"c9b691465a1777afdc11592f37c3bce7","packagetype":"sdist","python_version":"source","requires_python":null,"size":38905,"upload_time":"2021-01-01T04:11:58","upload_time_iso_8601":"2021-01-01T04:11:58.120588Z","url":"https://files.pythonhosted.org/packages/f3/dc/e4e7c9d1bf0485499c34aea390b7f2be3e66c770bbd9dc9935546559dd92/daemonocle-1.1.1.tar.gz","yanked":false,"yanked_reason":null}],"1.2.0":[{"comment_text":"","digests":{"blake2b_256":"556445860ab2d02f545bcda0a27e5f5a5bfea6b0b5da9a5422a01e5f189fd5b7","md5":"b404dfdbe433c42de0c26c9d61849dfa","sha256":"12785b96856d1daad2b6c247c5f1c4dcf333e82756dc0d84c5206d034cc40ef7"},"downloads":-1,"filename":"daemonocle-1.2.0.tar.gz","has_sig":false,"md5_digest":"b404dfdbe433c42de0c26c9d61849dfa","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":40255,"upload_time":"2021-02-16T04:59:10","upload_time_iso_8601":"2021-02-16T04:59:10.257341Z","url":"https://files.pythonhosted.org/packages/55/64/45860ab2d02f545bcda0a27e5f5a5bfea6b0b5da9a5422a01e5f189fd5b7/daemonocle-1.2.0.tar.gz","yanked":false,"yanked_reason":null}],"1.2.1":[{"comment_text":"","digests":{"blake2b_256":"840be4c30632e84da348f1b60420236c5c5e8cb1a4f745bf9b00cdb509b4c11b","md5":"d2739fe716b399cc72786591c18f9e1a","sha256":"19a38a8b7fcb8ad79c600490b0a28c2262c2c5529ca159251d13935419e95c18"},"downloads":-1,"filename":"daemonocle-1.2.1.tar.gz","has_sig":false,"md5_digest":"d2739fe716b399cc72786591c18f9e1a","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":40366,"upload_time":"2021-02-16T21:26:47","upload_time_iso_8601":"2021-02-16T21:26:47.652260Z","url":"https://files.pythonhosted.org/packages/84/0b/e4c30632e84da348f1b60420236c5c5e8cb1a4f745bf9b00cdb509b4c11b/daemonocle-1.2.1.tar.gz","yanked":false,"yanked_reason":null}],"1.2.2":[{"comment_text":"","digests":{"blake2b_256":"4e29fb62fb27956a1116dd4977e8a52586ae060a4cf8b72f926475b1fb3130ef","md5":"2dbdb40b01e02562f6e7867462a1353a","sha256":"3bd2f5d649a84aca6a04af6daec6e6dd3c82803f71519c35bf5fc68e58f5c40f"},"downloads":-1,"filename":"daemonocle-1.2.2.tar.gz","has_sig":false,"md5_digest":"2dbdb40b01e02562f6e7867462a1353a","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":41215,"upload_time":"2021-02-17T03:27:35","upload_time_iso_8601":"2021-02-17T03:27:35.443561Z","url":"https://files.pythonhosted.org/packages/4e/29/fb62fb27956a1116dd4977e8a52586ae060a4cf8b72f926475b1fb3130ef/daemonocle-1.2.2.tar.gz","yanked":false,"yanked_reason":null}],"1.2.3":[{"comment_text":"","digests":{"blake2b_256":"addf37c5b547fceba26e623cc41cc8416d9eff1cb8bcb57ed063ef5f004b692d","md5":"fad079afe18263e83d0d146254ebf029","sha256":"741ce6abc37c85ca396379a0d45710ac27ab5f17eeaadbc64a0f5cc4c4f666ea"},"downloads":-1,"filename":"daemonocle-1.2.3.tar.gz","has_sig":false,"md5_digest":"fad079afe18263e83d0d146254ebf029","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":41389,"upload_time":"2021-04-23T03:46:00","upload_time_iso_8601":"2021-04-23T03:46:00.213142Z","url":"https://files.pythonhosted.org/packages/ad/df/37c5b547fceba26e623cc41cc8416d9eff1cb8bcb57ed063ef5f004b692d/daemonocle-1.2.3.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"addf37c5b547fceba26e623cc41cc8416d9eff1cb8bcb57ed063ef5f004b692d","md5":"fad079afe18263e83d0d146254ebf029","sha256":"741ce6abc37c85ca396379a0d45710ac27ab5f17eeaadbc64a0f5cc4c4f666ea"},"downloads":-1,"filename":"daemonocle-1.2.3.tar.gz","has_sig":false,"md5_digest":"fad079afe18263e83d0d146254ebf029","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":41389,"upload_time":"2021-04-23T03:46:00","upload_time_iso_8601":"2021-04-23T03:46:00.213142Z","url":"https://files.pythonhosted.org/packages/ad/df/37c5b547fceba26e623cc41cc8416d9eff1cb8bcb57ed063ef5f004b692d/daemonocle-1.2.3.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
