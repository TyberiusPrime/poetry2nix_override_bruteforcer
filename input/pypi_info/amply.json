{"info":{"author":"Will Usher,Christophe-Marie Duquesne,Stuart Mitchell,Franco Peschiera,Stu,smit023,Q. Lim","author_email":"wusher@kth.se","bugtrack_url":null,"classifiers":["License :: OSI Approved :: Eclipse Public License 1.0 (EPL-1.0)"],"description":"Amply\n======\n\n.. image:: https://travis-ci.com/willu47/amply.svg?branch=master\n    :target: https://travis-ci.com/willu47/amply\n.. image:: https://img.shields.io/pypi/v/amply?style=plastic\n     :alt: PyPI\n     :target: https://pypi.org/project/amply/\n.. image:: https://coveralls.io/repos/github/willu47/amply/badge.svg?branch=master\n    :target: https://coveralls.io/github/willu47/amply?branch=master\n\n\nIntroduction\n------------\n\nAmply allows you to load and manipulate AMPL data as Python data structures.\n\nAmply only supports a specific subset of the AMPL syntax:\n\n* set declarations\n* set data statements\n* parameter declarations\n* parameter data statements\n\nDeclarations and data statements\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTypically, problems expressed in AMPL consist of two parts, a *model* section and a *data* section.\nAmply is only designed to parse the parameter and set statements contained within AMPL data sections.\nHowever, in order to parse these statements correctly, information that would usually be contained\nwithin the model section may be required. For instance, it may not be possible to infer the dimension\nof a set purely from its data statement. Therefore, Amply also supports set and parameter declarations.\nThese do not have to be put in a separate section, they only need to occur before the corresponding\ndata statement.\n\n\nThe declaration syntax supported is extremely limited, and does not include most\nelements of the AMPL programming language. The intention is that this library\nis used as a way of loading data specified in an AMPL-like syntax.\n\nFurthermore, Amply does not perform any validation on data statements.\n\nAbout this document\n^^^^^^^^^^^^^^^^^^^^\n\nThis document is intended as a guide to the syntax supported by Amply, and not as a general\nAMPL reference manual. For more in depth coverage see the `GNU MathProg manual, Chapter 5: Model data\n<http://gusek.sourceforge.net/gmpl.pdf>`_ or the following links:\n\n* `Sets in AMPL <http://twiki.esc.auckland.ac.nz/twiki/bin/view/OpsRes/SetsInAMPL>`_\n* `Parameters in AMPL <http://twiki.esc.auckland.ac.nz/twiki/bin/view/OpsRes/ParametersInAMPL>`_\n\nQuickstart Guide\n----------------\n\n  >>> from amply import Amply\n\nImport the class: ::\n\n  >>> from amply import Amply\n\nA simple set. Sets behave a lot like lists.\n\n  >>> data = Amply(\"set CITIES := Auckland Wellington Christchurch;\")\n  >>> print data.CITIES\n  <SetObject: ['Auckland', 'Wellington', 'Christchurch']>\n  >>> print data['CITIES']\n  <SetObject: ['Auckland', 'Wellington', 'Christchurch']>\n  >>> for c in data.CITIES: print c\n  ...\n  Auckland\n  Wellington\n  Christchurch\n  >>> print data.CITIES[0]\n  Auckland\n  >>> print len(data.CITIES)\n  3\n\n\nData can be integers, reals, symbolic, or quoted strings:\n\n  >>> data = Amply(\"\"\"\n  ...   set BitsNPieces := 0 3.2 -6e4 Hello \"Hello, World!\";\n  ... \"\"\")\n  >>> print data.BitsNPieces\n  <SetObject: [0.0, 3.2000000000000002, -60000.0, 'Hello', 'Hello, World!']>\n\nSets can contain multidimensional data, but we have to declare them to be so first.\n\n  >>> data = Amply(\"\"\"\n  ... set pairs dimen 2;\n  ... set pairs := (1, 2) (2, 3) (3, 4);\n  ... \"\"\")\n  >>> print data.pairs\n  <SetObject: [(1, 2), (2, 3), (3, 4)]>\n\nSets themselves can be multidimensional (i.e. be subscriptable):\n\n  >>> data = Amply(\"\"\"\n  ... set CITIES{COUNTRIES};\n  ... set CITIES[Australia] := Adelaide Melbourne Sydney;\n  ... set CITIES[Italy] := Florence Milan Rome;\n  ... \"\"\")\n  >>> print data.CITIES['Australia']\n  ['Adelaide', 'Melbourne', 'Sydney']\n  >>> print data.CITIES['Italy']\n  ['Florence', 'Milan', 'Rome']\n\nNote that in the above example, the set COUNTRIES didn't actually have to exist itself.\nAmply does not perform any validation on subscripts, it only uses them to figure out\nhow many subscripts a set has. To specify more than one, separate them by commas:\n\n  >>> data = Amply(\"\"\"\n  ... set SUBURBS{COUNTRIES, CITIES};\n  ... set SUBURBS[Australia, Melbourne] := Docklands 'South Wharf' Kensington;\n  ... \"\"\")\n  >>> print data.SUBURBS['Australia', 'Melbourne']\n  ['Docklands', 'South Wharf', 'Kensington']\n\n*Slices* can be used to simplify the entry of multi-dimensional data.\n\n  >>> data=Amply(\"\"\"\n  ... set TRIPLES dimen 3;\n  ... set TRIPLES := (1, 1, *) 2 3 4 (*, 2, *) 6 7 8 9 (*, *, *) (1, 1, 1);\n  ... \"\"\")\n  >>> print data.TRIPLES\n  <SetObject: [(1, 1, 2), (1, 1, 3), (1, 1, 4), (6, 2, 7), (8, 2, 9), (1, 1, 1)]>\n  >\n\nSet data can also be specified using a matrix notation.\nA '+' indicates that the pair is included in the set whereas a '-' indicates a\npair not in the set.\n\n  >>> data=Amply(\"\"\"\n  ... set ROUTES dimen 2;\n  ... set ROUTES : A B C D :=\n  ...            E + - - +\n  ...            F + + - -\n  ... ;\n  ... \"\"\")\n  >>> print data.ROUTES\n  <SetObject: [('E', 'A'), ('E', 'D'), ('F', 'A'), ('F', 'B')]>\n\nMatrices can also be transposed:\n\n  >>> data=Amply(\"\"\"\n  ... set ROUTES dimen 2;\n  ... set ROUTES (tr) : E F :=\n  ...                 A + +\n  ...                 B - +\n  ...                 C - -\n  ...                 D + -\n  ... ;\n  ... \"\"\")\n  >>> print data.ROUTES\n  <SetObject: [('E', 'A'), ('F', 'A'), ('F', 'B'), ('E', 'D')]>\n\nMatrices only specify 2d data, however they can be combined with slices\nto define higher-dimensional data:\n\n  >>> data = Amply(\"\"\"\n  ... set QUADS dimen 2;\n  ... set QUADS :=\n  ... (1, 1, *, *) : 2 3 4 :=\n  ...              2 + - +\n  ...              3 - + +\n  ... (1, 2, *, *) : 2 3 4 :=\n  ...              2 - + -\n  ...              3 + - -\n  ... ;\n  ... \"\"\")\n  >>> print data.QUADS\n  <SetObject: [(1, 1, 2, 2), (1, 1, 2, 4), (1, 1, 3, 3), (1, 1, 3, 4), (1, 2, 2, 3), (1, 2, 3, 2)]>\n\nParameters are also supported:\n\n  >>> data = Amply(\"\"\"\n  ... param T := 30;\n  ... param n := 5;\n  ... \"\"\")\n  >>> print data.T\n  30\n  >>> print data.n\n  5\n\nParameters are commonly indexed over sets. No validation is done by Amply,\nand the sets do not have to exist. Parameter objects are represented\nas a mapping.\n\n  >>> data = Amply(\"\"\"\n  ... param COSTS{PRODUCTS};\n  ... param COSTS :=\n  ...   FISH 8.5\n  ...   CARROTS 2.4\n  ...   POTATOES 1.6\n  ... ;\n  ... \"\"\")\n  >>> print data.COSTS\n  <ParamObject: {'POTATOES': 1.6000000000000001, 'FISH': 8.5, 'CARROTS': 2.3999999999999999}>\n  >>> print data.COSTS['FISH']\n  8.5\n\nParameter data statements can include a *default* clause. If a '.' is included\nin the data, it is replaced with the default value:\n\n  >>> data = Amply(\"\"\"\n  ... param COSTS{P};\n  ... param COSTS default 2 :=\n  ... F 2\n  ... E 1\n  ... D .\n  ... ;\n  ... \"\"\")\n  >>> print data.COSTS['D']\n  2.0\n\nParameter declarations can also have a default clause. For these parameters,\nany attempt to access the parameter for a key that has not been defined\nwill return the default value:\n\n  >>> data = Amply(\"\"\"\n  ... param COSTS{P} default 42;\n  ... param COSTS :=\n  ... F 2\n  ... E 1\n  ... ;\n  ... \"\"\")\n  >>> print data.COSTS['DOES NOT EXIST']\n  42.0\n\nParameters can be indexed over multiple sets. The resulting values can be\naccessed by treating the parameter object as a nested dictionary, or by\nusing a tuple as an index:\n\n  >>> data = Amply(\"\"\"\n  ... param COSTS{CITIES, PRODUCTS};\n  ... param COSTS :=\n  ...  Auckland FISH 5\n  ...  Auckland CHIPS 3\n  ...  Wellington FISH 4\n  ...  Wellington CHIPS 1\n  ... ;\n  ... \"\"\")\n  >>> print data.COSTS\n  <ParamObject: {'Wellington': {'FISH': 4.0, 'CHIPS': 1.0}, 'Auckland': {'FISH': 5.0, 'CHIPS': 3.0}}>\n  >>> print data.COSTS['Wellington']['CHIPS'] # nested dict\n  1.0\n  >>> print data.COSTS['Wellington', 'CHIPS'] # tuple as key\n  1.0\n\nParameters support a slice syntax similar to that of sets:\n\n  >>> data = Amply(\"\"\"\n  ... param COSTS{CITIES, PRODUCTS};\n  ... param COSTS :=\n  ...  [Auckland, * ]\n  ...   FISH 5\n  ...   CHIPS 3\n  ...  [Wellington, * ]\n  ...   FISH 4\n  ...   CHIPS 1\n  ... ;\n  ... \"\"\")\n  >>> print data.COSTS\n  <ParamObject: {'Wellington': {'FISH': 4.0, 'CHIPS': 1.0}, 'Auckland': {'FISH': 5.0, 'CHIPS': 3.0}}>\n\n\n\nParameters indexed over two sets can also be specified in tabular format:\n\n\n  >>> data = Amply(\"\"\"\n  ... param COSTS{CITIES, PRODUCTS};\n  ... param COSTS: FISH CHIPS :=\n  ...  Auckland    5    3\n  ...  Wellington  4    1\n  ... ;\n  ... \"\"\")\n  >>> print data.COSTS\n  <ParamObject: {'Wellington': {'FISH': 4.0, 'CHIPS': 1.0}, 'Auckland': {'FISH': 5.0, 'CHIPS': 3.0}}>\n\nTabular data can also be transposed:\n\n  >>> data = Amply(\"\"\"\n  ... param COSTS{CITIES, PRODUCTS};\n  ... param COSTS (tr): Auckland Wellington :=\n  ...            FISH   5        4\n  ...            CHIPS  3        1\n  ... ;\n  ... \"\"\")\n  >>> print data.COSTS\n  <ParamObject: {'Wellington': {'FISH': 4.0, 'CHIPS': 1.0}, 'Auckland': {'FISH': 5.0, 'CHIPS': 3.0}}>\n\n\nSlices can be combined with tabular data for parameters indexed over more than\n2 sets:\n\n  >>> data = Amply(\"\"\"\n  ... param COSTS{CITIES, PRODUCTS, SIZE};\n  ... param COSTS :=\n  ...  [Auckland, *, *] :   SMALL LARGE :=\n  ...                 FISH  5     9\n  ...                 CHIPS 3     5\n  ...  [Wellington, *, *] : SMALL LARGE :=\n  ...                 FISH  4     7\n  ...                 CHIPS 1     2\n  ... ;\n  ... \"\"\")\n  >>> print data.COSTS\n  <ParamObject: {'Wellington': {'FISH': {'SMALL': 4.0, 'LARGE': 7.0}, 'CHIPS': {'SMALL': 1.0, 'LARGE': 2.0}}, 'Auckland': {'FISH': {'SMALL': 5.0, 'LARGE': 9.0}, '\n\n\nAPI\n---\n\nAll functionality is contained within the ``Amply`` class.\n\n.. class:: Amply(string=\"\")\n\n  load_string(string)\n\n    Parse string data.\n\n  load_file(file)\n\n    Parse contents of file or file-like object (has a read() method).\n\n  from_file(file)\n\n    Alternate constructor. Create Amply object from contents of file or file-like object.\n\n\nThe parsed data structures can then be accessed from an ``Amply`` object via\nattribute lookup (if the name of the symbol is a valid Python name) or item\nlookup. ::\n\n    from pulp import Amply\n\n    data = Amply(\"set CITIES := Auckland Hamilton Wellington\")\n\n    # attribute lookup\n    assert data.CITIES == ['Auckland', 'Hamilton', 'Wellington']\n\n    # item lookup\n    assert data['CITIES'] == data.CITIES\n\nNote that additional data may be loaded into an Amply object simply by calling\none of its methods. A common idiom might be to specify the set and parameter\ndeclarations within your Python script, then load the actual data from\nexternal files. ::\n\n    from pulp import Amply\n\n    data = Amply(\"\"\"\n      set CITIES;\n      set ROUTES dimen 2;\n      param COSTS{ROUTES};\n      param DISTANCES{ROUTES};\n    \"\"\")\n\n    for data_file in ('cities.dat', 'routes.dat', 'costs.dat', 'distances.dat'):\n        data.load_file(open(data_file))\n\n.. Commented out the below, not sure if we need it (incomplete)\n\n    Reference\n    ---------\n\n    Sets\n    ^^^^\n\n    Set declarations\n    ~~~~~~~~~~~~~~~~\n\n    A set declaration is an extremely limited version of set statements which are valid in AMPL models.\n    They determine the *subscript domain* and *data dimension* of the set. If not specified, the default\n    subscript domain is an empty set and the default dimension is 1.\n\n    .. productionlist::\n        set_def_stmt: \"set\" `name` [`subscript_domain`] [\"dimen\" `integer`] \";\"\n        subscript_domain: \"{\" `name` (\",\" `name`)* \"}\"\n\n    The following statment declares a set named \"countries\". ::\n\n        set countries;\n\n    The following statement declares a set named \"cities\" which is indexed over \"countries\". ::\n\n        set cities {countries};\n\n    The following declares a set named \"routes\" with 2d data. ::\n\n        set routes dimen 2;\n\n    Set data statements\n    ~~~~~~~~~~~~~~~~~~~~~\n\n    A set data statement is used to specify the members of a set. It consists of one or more\n    *data records*. There are four types of data records: simple data, slice records, matrix\n    data and transposed matrix data.\n\n    .. productionlist::\n        set_stmt: \"set\" `name` [`set_member`] `data_record`+ \";\"\n        data_record: `simple_data` | `set_slice_record` | `matrix_data` | `tr_matrix_data`\n\n    Simple Data\n    ############\n\n    A simple data record is an optionally comma-separated list of data values.\n\n    .. productionlist::\n        simple_data: `data` ([\",\"] `data`)*\n\n    For instance: ::\n\n        set CITIES := Auckland Hamilton 'Palmerston North' Wellington;\n\n    ::\n\n        set ROUTES dimen 2;\n        set ROUTES := (Auckland, Hamilton) (Auckland, Wellington);\n\n    Slice Records\n    ###############\n\n    Slice records are used to simplify the entry of multi-dimensional sets. They allow you to partially\n    specify the values of elements. A slice affects all data records that follow it (until a new slice\n    is specified).\n\n    .. productionlist::\n        set_slice_record: \"(\" `set_slice_component` (\",\" `set_slice_component`)* \")\"\n        set_slice_component: `number` | `symbol` | \"*\"\n\n    This is best demonstrated by some examples. The sets A and B are identical: ::\n\n        set A dimen 3;\n        set B dimen 3;\n\n        set A := (1, 2, 3) (1, 3, 2) (1, 4, 6) (1, 8, 8) (2, 1, 3) (2, 1, 1) (2, 1, 2);\n        set B := (1, *, *) (2, 3) (3, 2) (4, 6) (8, 8) (2, 1, *) 3 1 2;\n\n    The number of asterisks in a slice is called the *slice dimension*. Any data records that follow\n    are interpreted as being of the same dimension; the value is taken as the value of the slice with\n    the asterisks replaced with the value of the record.\n\n    Matrix records\n    ################\n\n    Matrix records are a convenient way of specifying 2-dimensional data. The data record looks like\n    a matrix with row and column headings, where the values are either '+' if the combination is in\n    the set, and '-' if the combination is not in the set. A common use-case is for defining the\n    set of arcs that exist between a set of nodes.\n\n    .. productionlist::\n        matrix_data: \":\" `matrix_columns` \":=\" `matrix_row`+\n        matrix_columns: `data`+\n        matrix_row: `data` (\"+\"|\"-\")+\n        tr_matrix_data: \"(tr)\" `matrix_data`\n\n    Matrices can also be transposed by including ``(tr)`` immediately preceding the record.\n\n    In the example below the sets A, B and C are identical: ::\n\n        set A dimen 2;\n        set B dimen 2;\n        set C dimen 2;\n\n        set A := (1, 1) (1, 3) (2, 2) (3, 1) (3, 2) (3, 3);\n        set B : 1 2 3 :=\n              1 + - +\n              2 - + -\n              3 + + +\n        ;\n        set C (tr) : 1 2 3 :=\n                   1 + - +\n                   2 - + +\n                   3 + - +\n        ;\n\n\n    Matrices can be used for sets with higher dimensions by placing them after 2 dimensional\n    slice records.\n\n\n    Set examples\n    ~~~~~~~~~~~~\n\n    Parameters\n    ^^^^^^^^^^^^\n\n    Plain Data\n    ~~~~~~~~~~~~~\n\n    Tabular data\n    ~~~~~~~~~~~~~~\n\n    Tabbing Data\n    ~~~~~~~~~~~~~~\n\nDevelopment Notes\n-----------------\n\nMany thanks to Johannes Ragam (@thet), former custodian of the \"amply\" project on PyPi.\nJohannes graciously transferred the project to this. Thanks!\n","description_content_type":"text/x-rst","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"http://github.com/willu47/amply","keywords":"ampl gmpl","license":"Eclipse Public License 1.0 (EPL-1.0)","maintainer":"","maintainer_email":"","name":"amply","package_url":"https://pypi.org/project/amply/","platform":null,"project_url":"https://pypi.org/project/amply/","project_urls":{"Bug Tracker":"http://github.com/willu47/amply/issues","Documentation":"http://github.com/willu47/amply/README.rst","Homepage":"http://github.com/willu47/amply","Source Code":"http://github.com/willu47/amply"},"provides_extra":null,"release_url":"https://pypi.org/project/amply/0.1.6/","requires_dist":["docutils (>=0.3)","pyparsing"],"requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*","summary":"Amply allows you to load and manipulate AMPL/GLPK data as Python data structures","version":"0.1.6","yanked":false,"yanked_reason":null},"last_serial":18577177,"releases":{"0":[],"0.1":[{"comment_text":"","digests":{"blake2b_256":"4eccf3dad7f7c69a75968c2b2e2738f1efcdcb5fdb92fb1f0d99e5bb3bb51c15","md5":"17ad94f0660eeec0155b18c1ebd0ecec","sha256":"52af4823e48dcfae495f4af09920b6fd4289d3957768714681a754bec85ec5d8"},"downloads":-1,"filename":"amply-0.1.tar.gz","has_sig":false,"md5_digest":"17ad94f0660eeec0155b18c1ebd0ecec","packagetype":"sdist","python_version":"source","requires_python":null,"size":14879,"upload_time":"2020-06-15T11:18:47","upload_time_iso_8601":"2020-06-15T11:18:47.591219Z","url":"https://files.pythonhosted.org/packages/4e/cc/f3dad7f7c69a75968c2b2e2738f1efcdcb5fdb92fb1f0d99e5bb3bb51c15/amply-0.1.tar.gz","yanked":false,"yanked_reason":null}],"0.1.0a6":[{"comment_text":"","digests":{"blake2b_256":"d572727ecc280be63bcb40ade2b14613f2d4672bed2f236646e18a9a93aaabf5","md5":"10e4c5965beb153630da28261bdfa036","sha256":"cdb86c8946d566dffec9570d252baf21de1b0aa3cd29f477be21ef6fa1f2ac48"},"downloads":-1,"filename":"amply-0.1.0a6.tar.gz","has_sig":false,"md5_digest":"10e4c5965beb153630da28261bdfa036","packagetype":"sdist","python_version":"source","requires_python":null,"size":27821,"upload_time":"2020-06-15T11:42:10","upload_time_iso_8601":"2020-06-15T11:42:10.003504Z","url":"https://files.pythonhosted.org/packages/d5/72/727ecc280be63bcb40ade2b14613f2d4672bed2f236646e18a9a93aaabf5/amply-0.1.0a6.tar.gz","yanked":false,"yanked_reason":null}],"0.1.0a7":[{"comment_text":"","digests":{"blake2b_256":"3005efabeb0a17d70442cacce221888c4a6b0925e36de2c9fb1eab81bc6dd4b2","md5":"e7f978dbee6f73f96b6e70ca62d25a21","sha256":"afc7b3bffff67685c865b666e08392f3c524262d8de93cbec4de7907aeb43d69"},"downloads":-1,"filename":"amply-0.1.0a7-py3.7.egg","has_sig":false,"md5_digest":"e7f978dbee6f73f96b6e70ca62d25a21","packagetype":"bdist_egg","python_version":"3.7","requires_python":null,"size":21882,"upload_time":"2020-06-15T11:56:53","upload_time_iso_8601":"2020-06-15T11:56:53.164385Z","url":"https://files.pythonhosted.org/packages/30/05/efabeb0a17d70442cacce221888c4a6b0925e36de2c9fb1eab81bc6dd4b2/amply-0.1.0a7-py3.7.egg","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1bcb6651da6833652b5b4b46d5c79af8cf4540cd325b08b5c35a93e73402302a","md5":"23b35774d90b4eb515b48c17596cd7c5","sha256":"88864703ee10c8ac1dfd7b78321f96634d14797c21437ae38e89cc7bad1b2fb2"},"downloads":-1,"filename":"amply-0.1.0a7.tar.gz","has_sig":false,"md5_digest":"23b35774d90b4eb515b48c17596cd7c5","packagetype":"sdist","python_version":"source","requires_python":null,"size":27000,"upload_time":"2020-06-15T11:56:54","upload_time_iso_8601":"2020-06-15T11:56:54.970785Z","url":"https://files.pythonhosted.org/packages/1b/cb/6651da6833652b5b4b46d5c79af8cf4540cd325b08b5c35a93e73402302a/amply-0.1.0a7.tar.gz","yanked":false,"yanked_reason":null}],"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"e1e06a28e5151ac49fad13dc6c742e9d1a63d7c91a73ac34854b5a5b96ec29a2","md5":"31c07d925800d545d27e112bf6cb577e","sha256":"6f27dc189d3d48c263c23a9d1c2c8beec181d528d7e812fb0f4cccc4952fc205"},"downloads":-1,"filename":"amply-0.1.1-py3.7.egg","has_sig":false,"md5_digest":"31c07d925800d545d27e112bf6cb577e","packagetype":"bdist_egg","python_version":"3.7","requires_python":null,"size":21880,"upload_time":"2020-06-15T12:02:25","upload_time_iso_8601":"2020-06-15T12:02:25.858947Z","url":"https://files.pythonhosted.org/packages/e1/e0/6a28e5151ac49fad13dc6c742e9d1a63d7c91a73ac34854b5a5b96ec29a2/amply-0.1.1-py3.7.egg","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"53e2998f54a6dfef76a137abaa417a0501f9969013d755a72faa4fac74eca9c6","md5":"dff6a38e93cbeaa01449bfef499b06f0","sha256":"e37188b4faab2f78f2452026976394a9cb766a0cd109acc46359be02d3c125fb"},"downloads":-1,"filename":"amply-0.1.1.tar.gz","has_sig":false,"md5_digest":"dff6a38e93cbeaa01449bfef499b06f0","packagetype":"sdist","python_version":"source","requires_python":null,"size":26992,"upload_time":"2020-06-15T12:02:26","upload_time_iso_8601":"2020-06-15T12:02:26.827094Z","url":"https://files.pythonhosted.org/packages/53/e2/998f54a6dfef76a137abaa417a0501f9969013d755a72faa4fac74eca9c6/amply-0.1.1.tar.gz","yanked":false,"yanked_reason":null}],"0.1.2":[{"comment_text":"","digests":{"blake2b_256":"b168be705df6cd567b1b407c7416835da194c4fc66964b68f1dd0a51209f188d","md5":"429473e28c6b87cc1e9c3e6b7445c3ec","sha256":"c93da6113cac809487abc6565f41e37b9b8a5d469dcfaf4443d8d35befb181af"},"downloads":-1,"filename":"amply-0.1.2-py3.7.egg","has_sig":false,"md5_digest":"429473e28c6b87cc1e9c3e6b7445c3ec","packagetype":"bdist_egg","python_version":"3.7","requires_python":null,"size":21916,"upload_time":"2020-06-15T14:10:53","upload_time_iso_8601":"2020-06-15T14:10:53.656881Z","url":"https://files.pythonhosted.org/packages/b1/68/be705df6cd567b1b407c7416835da194c4fc66964b68f1dd0a51209f188d/amply-0.1.2-py3.7.egg","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"7f1133cb09557ac838d9488779b79e05a2a3c1f3ce9747cd242ba68332736778","md5":"b6c2231d07d4a9b779ed095f4f840722","sha256":"6e5d53af62772790ba82a989a3de72b8ce5c1cd809613c06f7cb061f7ec34dc8"},"downloads":-1,"filename":"amply-0.1.2.tar.gz","has_sig":false,"md5_digest":"b6c2231d07d4a9b779ed095f4f840722","packagetype":"sdist","python_version":"source","requires_python":null,"size":26997,"upload_time":"2020-06-15T14:10:54","upload_time_iso_8601":"2020-06-15T14:10:54.594491Z","url":"https://files.pythonhosted.org/packages/7f/11/33cb09557ac838d9488779b79e05a2a3c1f3ce9747cd242ba68332736778/amply-0.1.2.tar.gz","yanked":false,"yanked_reason":null}],"0.1.4":[{"comment_text":"","digests":{"blake2b_256":"f1f8d404f74b63a68848a2ac391f4cb196a9f5dafcad2afc03f95880dece6c2d","md5":"721a5f1d59d0025c22246f1609caf736","sha256":"baa05b059759807cdbe897624ed037e1b045e6282cd500ee87ec78b2e504a669"},"downloads":-1,"filename":"amply-0.1.4-py3.7.egg","has_sig":false,"md5_digest":"721a5f1d59d0025c22246f1609caf736","packagetype":"bdist_egg","python_version":"3.7","requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*","size":21926,"upload_time":"2020-10-04T06:39:47","upload_time_iso_8601":"2020-10-04T06:39:47.966013Z","url":"https://files.pythonhosted.org/packages/f1/f8/d404f74b63a68848a2ac391f4cb196a9f5dafcad2afc03f95880dece6c2d/amply-0.1.4-py3.7.egg","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f3c5dfa09dd2595a2ab2ab4e6fa7bebef9565812722e1980d04b0edce5032066","md5":"354d91d13dbf61e83ace601701db88b7","sha256":"f8a846a544750493f45e75e9b44c393144be5728701df4f596b1fa5595d263fd"},"downloads":-1,"filename":"amply-0.1.4-py3-none-any.whl","has_sig":false,"md5_digest":"354d91d13dbf61e83ace601701db88b7","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*","size":16614,"upload_time":"2020-10-04T06:39:46","upload_time_iso_8601":"2020-10-04T06:39:46.834173Z","url":"https://files.pythonhosted.org/packages/f3/c5/dfa09dd2595a2ab2ab4e6fa7bebef9565812722e1980d04b0edce5032066/amply-0.1.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1c52f44d55940bd1c07818c3d45a04a3fe98bb1fb6f7ed3cf2c82b7e6c8467f3","md5":"b4520f793a66f2ca3315d0320eebf843","sha256":"cb12dcb49d16b168c02be128a1527ecde50211e4bd94af76ff4e67707f5a2d38"},"downloads":-1,"filename":"amply-0.1.4.tar.gz","has_sig":false,"md5_digest":"b4520f793a66f2ca3315d0320eebf843","packagetype":"sdist","python_version":"source","requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*","size":28182,"upload_time":"2020-10-04T06:39:48","upload_time_iso_8601":"2020-10-04T06:39:48.967182Z","url":"https://files.pythonhosted.org/packages/1c/52/f44d55940bd1c07818c3d45a04a3fe98bb1fb6f7ed3cf2c82b7e6c8467f3/amply-0.1.4.tar.gz","yanked":false,"yanked_reason":null}],"0.1.5":[{"comment_text":"","digests":{"blake2b_256":"eb97c7e61ca87316e5e498066c53681a4586f9666ef32f027e58b7c2b755fa68","md5":"5f9b4c4e8a58ea4baf19ea15a3d9637b","sha256":"57a1141b2591614c69df35f1df2f7913b8f5d5330aae92ce1b4b73ae8905fe6a"},"downloads":-1,"filename":"amply-0.1.5-py3-none-any.whl","has_sig":false,"md5_digest":"5f9b4c4e8a58ea4baf19ea15a3d9637b","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*","size":16767,"upload_time":"2022-04-25T09:15:14","upload_time_iso_8601":"2022-04-25T09:15:14.779881Z","url":"https://files.pythonhosted.org/packages/eb/97/c7e61ca87316e5e498066c53681a4586f9666ef32f027e58b7c2b755fa68/amply-0.1.5-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"9892cac349e7807d1a4d4b08a5a1864b013afcbe22c1ad37ba006a6515342c89","md5":"be0fc085f3bc0d5f8b8b505a05a8c010","sha256":"ad717b490b6b7055909faa195e82a4432b706f8f95854050172f42931e478426"},"downloads":-1,"filename":"amply-0.1.5.tar.gz","has_sig":false,"md5_digest":"be0fc085f3bc0d5f8b8b505a05a8c010","packagetype":"sdist","python_version":"source","requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*","size":28074,"upload_time":"2022-04-25T09:15:16","upload_time_iso_8601":"2022-04-25T09:15:16.175312Z","url":"https://files.pythonhosted.org/packages/98/92/cac349e7807d1a4d4b08a5a1864b013afcbe22c1ad37ba006a6515342c89/amply-0.1.5.tar.gz","yanked":false,"yanked_reason":null}],"0.1.6":[{"comment_text":"","digests":{"blake2b_256":"43b15ff785027761a1d29d6fabbad15fe5d9327a38bc2a1eb753f9d467bbbb5d","md5":"70f26bca94853261091114e1c49203cc","sha256":"44c372cf60dbdfda06e80cbf201a28d1e6384485b6a2386ca21160dccd0e82a8"},"downloads":-1,"filename":"amply-0.1.6-py3-none-any.whl","has_sig":false,"md5_digest":"70f26bca94853261091114e1c49203cc","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*","size":16768,"upload_time":"2023-06-20T15:43:09","upload_time_iso_8601":"2023-06-20T15:43:09.230188Z","url":"https://files.pythonhosted.org/packages/43/b1/5ff785027761a1d29d6fabbad15fe5d9327a38bc2a1eb753f9d467bbbb5d/amply-0.1.6-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"6a3599243f9aed9848f9ab505b201cc09fd86a8d0c8e35aafeee5b830cc4919d","md5":"3cfd4a231f59b8232c8b6b56625f5b53","sha256":"61421103ccf8e1066717115fe7917610d831d551c68d31a110876a5b6c78aea4"},"downloads":-1,"filename":"amply-0.1.6.tar.gz","has_sig":false,"md5_digest":"3cfd4a231f59b8232c8b6b56625f5b53","packagetype":"sdist","python_version":"source","requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*","size":29153,"upload_time":"2023-06-20T15:43:10","upload_time_iso_8601":"2023-06-20T15:43:10.728132Z","url":"https://files.pythonhosted.org/packages/6a/35/99243f9aed9848f9ab505b201cc09fd86a8d0c8e35aafeee5b830cc4919d/amply-0.1.6.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"43b15ff785027761a1d29d6fabbad15fe5d9327a38bc2a1eb753f9d467bbbb5d","md5":"70f26bca94853261091114e1c49203cc","sha256":"44c372cf60dbdfda06e80cbf201a28d1e6384485b6a2386ca21160dccd0e82a8"},"downloads":-1,"filename":"amply-0.1.6-py3-none-any.whl","has_sig":false,"md5_digest":"70f26bca94853261091114e1c49203cc","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*","size":16768,"upload_time":"2023-06-20T15:43:09","upload_time_iso_8601":"2023-06-20T15:43:09.230188Z","url":"https://files.pythonhosted.org/packages/43/b1/5ff785027761a1d29d6fabbad15fe5d9327a38bc2a1eb753f9d467bbbb5d/amply-0.1.6-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"6a3599243f9aed9848f9ab505b201cc09fd86a8d0c8e35aafeee5b830cc4919d","md5":"3cfd4a231f59b8232c8b6b56625f5b53","sha256":"61421103ccf8e1066717115fe7917610d831d551c68d31a110876a5b6c78aea4"},"downloads":-1,"filename":"amply-0.1.6.tar.gz","has_sig":false,"md5_digest":"3cfd4a231f59b8232c8b6b56625f5b53","packagetype":"sdist","python_version":"source","requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*","size":29153,"upload_time":"2023-06-20T15:43:10","upload_time_iso_8601":"2023-06-20T15:43:10.728132Z","url":"https://files.pythonhosted.org/packages/6a/35/99243f9aed9848f9ab505b201cc09fd86a8d0c8e35aafeee5b830cc4919d/amply-0.1.6.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
