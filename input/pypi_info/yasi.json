{"info":{"author":"Mathew Ng'etich","author_email":"kipkoechmathew@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Console","Intended Audience :: Developers","License :: OSI Approved","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 2","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3","Programming Language :: Python :: 3.4","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Software Development :: Quality Assurance"],"description":"[![Build Status][2]][3]\n[![Latest tag][4]][5]\n[![pypi downloads][6]][7]\n[![Supported versions][8]][5]\n[![Supported implementations][9]][5]\n\n## yasi - yet another s-expression indenter\n\n- [Introduction](#introduction)\n- [Installation](#installation)\n- [Features](#features)\n- [Command Line Arguments](#command-line-arguments)\n- [Hanging Indentation](#hanging-indentation)\n- [Customization](#customization)\n- [About the default indent](#about-the-default-indent)\n- [What yasi does not handle](#what-yasi-does-not-handle)\n- [Modifications to lispindent](#modifications-to-lispindent)\n- [Editor Integration](#editor-integration)\n- [Lispindent2 Issues](#lispindent2-issues)\n- [lispindent2 Command Line Options](#lispindent2-command-line-options)\n\n### Introduction\n\nyasi is a dialect-aware s-expression indenter that tries to improve on [Dorai's\nindenter][0] and *Vim's* built in indenter. It can handle *Common Lisp*, *Clojure*,\n*Scheme* and *newLISP* code and their unique syntaxes.\n\nIt's mainly a batch mode indenter inspired by Dorai's [lispindent.lisp][1]\nthat was written first in *Python* and later translated to *newLISP*.  \n\nIts style of indentation is very close to that of *lispindent.lisp* and tries to\nfollow [these style guidelines][0] where reasonable.\n\nIt should find most use with programmers who use any other editor other than Emacs\nwhich provides excellent indentation for lisp-like forms and s-expressions out of\nthe box.\n\nI made this because there weren't any good enough tools out there that could indent\nthe code I would copy/paste and run from tutorials when I was starting out with Lisp.\n\n### Installation\n\nFrom pypi:\n\n    pip install --upgrade yasi\n\nLocally(latest changes):\n\n    git clone https://github.com/nkmathew/yasi-sexp-indenter.git\n    cd yasi-sexp-indenter\n    make install\n\n### Features\n\n*yasi's* indentation relies heavily on regular expressions that give it an edge\nover its counterpart *lispindent.lisp*. Its features include:\n\n+ Support for the different mainstream Lisps out there giving you the correct\n  indentation of a form according to the dialect's syntax/semantic. e.g.\n  The `do` keyword which is a looping construct in *Common Lisp* and sequential\n  execution in *Clojure*. The keyword should look like this in the two dialects:\n\n```lisp\n;; In Common Lisp\n(do ((j 0 (+ j 1)))\n    (nil)                       ;Do forever.\n  (format t \"~%Input ~D:\" j)\n  (let ((item (read)))\n    (if (null item) (return)   ;Process items until NIL seen.\n      (format t \"~&Output ~D: ~S\" j item))))\n```\n\n```Clojure\n;; In Clojure\n(do\n (println \"LOG: Computing...\")\n (+ 1 1))\n```\n\n+ Ability to trim extraneous whitespace and compact code\n\n+ Issues warnings for possible errors in code like unmatched brackets and unclosed\n  strings\n\n+ Correct indentation of user defined macros\n\n+ Supports additional keywords through a config file in the current or home\n  directory\n\n+ Correct indentation of `flets` and `labels`, something that doesn't come out of\n  the box even in Emacs\n\n+ Indentation from standard input\n\n+ The python version can output a unified diff between the initial and indented code\n\n### Command Line Arguments\n\n    usage: yasi [-h] [-nc] [-nb] [-nm] [--diff] [-nw] [-nr] [--no-output] [-c]\n                [-ne] [-o OUTPUT_FILE] [--tab TAB_SIZE] [--dialect DIALECT] [-v]\n                [-suffix BACKUP_SUFFIX] [-bd BACKUP_DIR] [-is INDENT_SIZE]\n                [-di DEFAULT_INDENT] [-ic] [-uni] [-parallel]\n                [files [files ...]]\n\n    Dialect-aware s-expression indenter\n\n    positional arguments:\n      files                 List of files to be indented. Will indent from\n                            standard input if no files are specified\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -nc, --no-compact, --nc\n                            Do not compact the code, just indent\n      -nb, --no-backup, --nb\n                            Do not create a backup file even if --backup-dir is\n                            specified\n      -nm, --no-modify, --nm\n                            Do not modify the file\n      --diff, -diff         Prints unified diff of the initial and final result\n      -nw, --no-warning, --nw\n                            Do not display warnings\n      -nr, --no-rc, --nr    Ignore any rc files in the current or home folder\n      --no-output, -no-output\n                            Suppress output of the indented code\n      -c, --color, -color   Display diff text in color\n      -ne, --no-exit, --ne  Instructs the program not to exit when a warning is\n                            raised.\n      -o OUTPUT_FILE        Path/name of output file\n      --tab TAB_SIZE, -tab TAB_SIZE\n                            Indent with tabs using the specified tabwidth. A tab\n                            is assumed equal to 4 spaces by default when expanding\n                            the tabs in the input file\n      --dialect DIALECT, -dialect DIALECT\n                            Use Scheme keywords\n      -v, --version         Prints script version\n      -suffix BACKUP_SUFFIX, --suffix BACKUP_SUFFIX\n                            Backup file suffix\n      -bd BACKUP_DIR, --backup-dir BACKUP_DIR, --bd BACKUP_DIR, -backup-dir BACKUP_DIR\n                            The directory where the backup file is to be written\n      -is INDENT_SIZE, --indent-size INDENT_SIZE, --is INDENT_SIZE\n                            The number of spaces per indent\n      -di DEFAULT_INDENT, --default-indent DEFAULT_INDENT, --di DEFAULT_INDENT\n                            The indent level to be used in case a function's\n                            argument is in the next line. Vim uses 2, the most\n                            common being 1.\n      -ic, --indent-comments, --ic\n                            If true, comment lines will be indented possibly\n                            messing with any deliberate comment layout\n      -uni, --uniform, -uniform, --uni\n                            Dictates whether the if-clause and else-clause of an\n                            if-likeblock should have the same indent level.\n      -parallel, --parallel\n                            Process the given files in parallel\n\n\n### Hanging Indentation\nThis is where the indented code block is not flush with the left margin. Lispindent\ndoes this by default although differently to the way it's implemented in yasi.\nThe effect is obtained by passing **--no-compact** to the script.\nHere's how hanging indentation in *lispindent* and yasi differs:\n\nInitial code:\n\n```lisp\n;; Comment\n                    (if (not (empty? macro-name))\n                    (push (list macro-name KEYWORD1) keyword-lst)\n                    nil)\n\n        (if (not (empty? macro-name))\n        (push (list macro-name KEYWORD1) keyword-lst)\n        nil)\n\n                (exit)\n```\n\nCalling yasi on the file with **--no-compact**:\n\n```lisp\n;; Comment\n                    (if (not (empty? macro-name))\n                        (push (list macro-name KEYWORD1) keyword-lst)\n                      nil)\n\n        (if (not (empty? macro-name))\n            (push (list macro-name KEYWORD1) keyword-lst)\n          nil)\n\n                (exit)\n```\n\nHow *lispindent* does it(the number of spaces at the start of first block defines\nwhere the rest of the blocks in the file will start):\n\n```lisp\n;; Comment\n                    (if (not (empty? macro-name))\n                        (push (list macro-name KEYWORD1) keyword-lst)\n                      nil)\n                    \n                    (if (not (empty? macro-name))\n                        (push (list macro-name KEYWORD1) keyword-lst)\n                      nil)\n                    \n                    (exit)\n\n```\n\n### Customization\n\nCustomization is done similarly to the way it's done in *lispindent* - keywords are\nassociated with numbers that determine the next line's indentation level.\n\nThe additional keywords are defined in a **.yasirc.json** file placed in the current\nworking directory of in the home folder. Should there be configuration files in both\ndirectories the one in the current working directory will be preferred.\n\nA typical config file looks like this:\n\n```javascript\n{\n  \"scheme\": {\n    \"do\": 2,\n    \"if\": 2\n  },\n  \"lisp\": {\n    \"do\": 2,\n    \"if\": 2\n  },\n  \"clojure\": {\n    \"do\": 2,\n    \"if\": 2\n  },\n  \"newlisp\": {\n    \"do\": 2,\n    \"if\": 2\n  }\n}\n```\n\n\nThe numbers are described below(assuming standard indentation size of 2 spaces):\n\n  + **0** - Associating a keyword with zero turns it into a normal function i.e\n    removes keywordness\n\n```lisp\n(do-the-boogie (= 12 44)\n               (print \"if clause\")\n               (print \"else clause\"))\n```\n\n  + **1** - Causes the subforms of the function to be indented uniformly by a unit\n    indentation size(which can be changed)\n\n```lisp\n(do-the-boogie (= 12 44)\n  (print \"if clause\")\n  (print \"else clause\"))\n```\n\n  + **2** - Distinguishes the first subform by giving it a greater indentation than\n    the rest of the subforms the same way the standard if expression is indented.\n    The first subform has twice the indentation size as the rest.\n\n```lisp\n(do-the-boogie (= 12 44)\n    (print \"if clause\")\n  (print \"else clause\"))\n```\n\n  + **3** - Subforms will be indented uniformly by twice the indentation size\n\n```lisp\n(do-the-boogie (= 12 44)\n    (print \"if clause\")\n    (print \"else clause\"))\n```\n\n  + **4** - Indents by a unit like a 1-keyword but also its local functions\n\n```lisp\n(letfn [(six-times [y]\n          (* (twice y) 3))\n        (twice [x]\n          (* x 2))]\n  (println \"Twice 15 =\" (twice 15))\n  (println \"Six times 15 =\" (six-times 15)))\n```\n\n  The standard indentation(assuming `letfn` is just another function) would be:\n\n```lisp\n(letfn [(six-times [y]\n                   (* (twice y) 3))\n        (twice [x]\n               (* x 2))]\n  (println \"Twice 15 =\" (twice 15))\n  (println \"Six times 15 =\" (six-times 15)))\n```\n\n\n#### About the default indent\n\nThe *--default-indent* comes in in expressions whose subforms usually start in the\nsubsequent lines. Like in a `cond` expression:\n\n```lisp\n(cond\n ((> this that) 'Yes)\n ((= those these) 'No))\n```\n\nThis above result would be the standard/expected indentation. However one might\nprefer to have the subforms to start two spaces past the head of the expression like\nthis.\n\n```lisp\n(cond\n  ((> newLISP CL) 'Yes)\n  ((= Clojure Lisp) 'No))\n```\n\nThis is *Vim's* default style of indentation.\nThat option enables you to specify the amount you want, for example to achieve the\nstyle above, you pass the parameter like so:\n\n```shell\n    yasi.py test.lisp --lisp --default-indent 2\n```\n\n----------\n\n### What yasi does not handle\n\nThere are some syntaxes used in some dialects of Scheme that didn't seem worth the\neffort implementing. An example is *MzScheme* and *Gauche's* use of `#//` or `#[]`\nfor regular expressions.\n\n#### Modifications to lispindent\n\nI made a couple of modifications to *lispindent.lisp* and renamed it to\n*lispindent2.lisp*. The changes include:\n\n+ Added comments for some sections of the program that took me time to understand\n\n+ It can now indent files from the command line without the need to redirect file\n  contents to the program. The original one was purely intended to be used as a\n  filter script indenting only from standard input.\n\n+ *lispindent2.lisp* indents *Clojure's* *vectors* and *sets* better, i.e with an\n indentation level of 1, without affecting *Lisp's* or *Scheme's indentation*. It\n  uses the file's extension to determine if it's looking at *Clojure* code.\n  e.g.\n\n```Clojure\n;; lispindent2.lisp's indentation\n(print {define \"The keyword does not affect indentation\"\n    })\n```\n\n```Clojure\n;; lispindent.lisp's indentation\n(print {define \"The keyword does not affect indentation\"\n   })\n```\n\n+ *lispindent2.lisp* ignores any code in a multiline comment and won't  be affected\n  by any unclosed brackets inside the comment like the original version.\n  Unfortunately, its method of detecting multiline comments is rather  naive and\n  introduces a bug in the code. Refer to its issues below.\n\n+ *lispindent2.lisp* writes files using *LF* line endings be default. It's less\n  irritating than *CRLF* endings which usually light up in an annoying way in *Vim*.\n\n#### Editor Integration\n\nyasi's ability to format code from standard input makes it a suitable candidate for\nthe `equalprg` setting in *Vim*. Add this in your **.vimrc** and you're good to go.\n\n```vim\nau filetype clojure,lisp,scheme,newlisp setlocal equalprg=yasi.py\\ --indent-comments\n```\n\nYou can then indent a function/block by providing the motion after the `=` sign\ne.g `=%`\n\nYou can also checkout these other projects for proper integration without invoking\nit externally as a filter script for example:\n\n  + *Vim* plugin: https://github.com/nkmathew/vim-newlisp-yasi\n  + Sublime Text 2/3 plugin: https://github.com/nkmathew/sublime-yasi\n\n#### lispindent2 Issues\n\nI inadvertently added a bug in an attempt to prevent it from evaluating brackets\ninside multiline comments in Common Lisp and symbols with whitespace in Scheme.\n\nIt uses the pipe character(|) to track whether the comment it's still in a multiline\ncomment meaning an odd number of pipes in a multiline comment will yield a wrong\nindentation e.g.:\n\n```lisp\n#|*******************************************************************|\n |   This is a multiline comment that will trip the indenter         |\n |   because the odd number of pipes will cause `multiline-commentp` |\n |   to be true after this comment. It means the rest of the code    |\n |   won't be indented because it thinks it's still in a comment.    |\n          Total pipes=11(odd)\n |#\n (print (cons\n    'Hello ;; This line and the one below won't change\n    'World\n        ))\n```\n\nI don't find this to be a major issue because multiline comments are rarely used,\nthe common use case being to comment out regions of code when debugging.\n\n*lispindent2.lisp* uses the *Lisp* reader function `read-from-string` to get lisp\nforms and atoms from the read string.\n\nThe downside of this is that `read-from-string` will fail when the code in the\nstring is 'malformed'. For example, if it finds that the dot operator used for\nconsing in *Common Lisp* comes after the opening bracket, it will raise a fatal\nerror. This means that any *Clojure* code that tries to use the dot operator to\naccess a class method will not be indented because of the error. An example is this\ncode:\n\n```Clojure\n(defmacro chain\n  ([x form] `(. ~x ~form))\n  ([x form & more] `(chain (. ~x ~form) ~@more)))\n```\n\n*lispindent2.lisp* uses the `ignore-errors` macro as a workaround. Doing that means\nthat it can't run in *GNU Common Lisp* because it doesn't have the macro.\n\n#### lispindent2 Command Line Options\n\n    +---------------------------------------------------------------------------+\n    |   Usage:  lispindent2.lisp [[<file>] [--no-modify] [--no-output]]         |\n    |           --no-output ;; Don't output the indented code, false by default |\n    |           --no-modify ;; Don't modify the file, false by default          |\n    +---------------------------------------------------------------------------+\n\n[0]: https://github.com/ds26gte/scmindent\n[1]: https://github.com/ds26gte/scmindent/blob/master/lispindent.lisp\n[2]: https://travis-ci.org/nkmathew/yasi-sexp-indenter.svg?branch=master\n[3]: https://travis-ci.org/nkmathew/yasi-sexp-indenter\n[4]: https://img.shields.io/github/tag/nkmathew/yasi-sexp-indenter.svg\n[5]: https://github.com/nkmathew/yasi-sexp-indenter/releases\n[6]: https://img.shields.io/pypi/dm/yasi.svg\n[7]: https://pypi.python.org/pypi/yasi\n[8]: https://img.shields.io/pypi/pyversions/yasi\n[9]: https://img.shields.io/pypi/implementation/yasi","description_content_type":"text/markdown","docs_url":null,"download_url":"https://github.com/nkmathew/yasi-sexp-indenter/zipball/master","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/nkmathew/yasi-sexp-indenter","keywords":"scheme,formatter,newlisp,beautifier,clojure,lisp,indenter","license":"","maintainer":"","maintainer_email":"","name":"yasi","package_url":"https://pypi.org/project/yasi/","platform":"","project_url":"https://pypi.org/project/yasi/","project_urls":{"Download":"https://github.com/nkmathew/yasi-sexp-indenter/zipball/master","Homepage":"https://github.com/nkmathew/yasi-sexp-indenter"},"provides_extra":null,"release_url":"https://pypi.org/project/yasi/2.1.2/","requires_dist":null,"requires_python":"","summary":"A dialect aware s-expression indenter","version":"2.1.2","yanked":false,"yanked_reason":null},"last_serial":7304072,"releases":{"0.2.1":[{"comment_text":"","digests":{"blake2b_256":"b7c660f27a87bcbbec0d8b4f4e43a2f541bcb3ed21db6b171ba870f383271242","md5":"c5154fed57e95db5aea3f6dcea1052c3","sha256":"854e2f1c530696d22b35fdac471dad14a2caa88894e1175b8f3cd7e9f3657403"},"downloads":-1,"filename":"yasi-0.2.1-py3.4.egg","has_sig":false,"md5_digest":"c5154fed57e95db5aea3f6dcea1052c3","packagetype":"bdist_egg","python_version":"3.4","requires_python":null,"size":26147,"upload_time":"2016-01-03T23:33:45","upload_time_iso_8601":"2016-01-03T23:33:45.424840Z","url":"https://files.pythonhosted.org/packages/b7/c6/60f27a87bcbbec0d8b4f4e43a2f541bcb3ed21db6b171ba870f383271242/yasi-0.2.1-py3.4.egg","yanked":false,"yanked_reason":null}],"1.0.0":[{"comment_text":"","digests":{"blake2b_256":"c4fd17d1e132952cb1a18c023da76ffca7ff9810da51f4ee2944d5619c4aef70","md5":"909066398784ef081fc963932b69f458","sha256":"d2b8b03036b69599ad2fe21648bea6956f8d0cf48a1bbbe98930ba40843cfc86"},"downloads":-1,"filename":"yasi-1.0.0.zip","has_sig":false,"md5_digest":"909066398784ef081fc963932b69f458","packagetype":"sdist","python_version":"source","requires_python":null,"size":15479,"upload_time":"2016-01-04T00:33:42","upload_time_iso_8601":"2016-01-04T00:33:42.815006Z","url":"https://files.pythonhosted.org/packages/c4/fd/17d1e132952cb1a18c023da76ffca7ff9810da51f4ee2944d5619c4aef70/yasi-1.0.0.zip","yanked":false,"yanked_reason":null}],"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"b20676f396e6fd99266d99c628a6749155f21c616ffa241238070755238377b9","md5":"cc484ffe85cdced40559d9d5eb53d804","sha256":"6ee4fec4a36cbb392d95a6bc008d2b69f7fda5223dd42108abc472e56552e7c3"},"downloads":-1,"filename":"yasi-1.0.1.zip","has_sig":false,"md5_digest":"cc484ffe85cdced40559d9d5eb53d804","packagetype":"sdist","python_version":"source","requires_python":null,"size":66011,"upload_time":"2016-01-04T12:36:22","upload_time_iso_8601":"2016-01-04T12:36:22.935161Z","url":"https://files.pythonhosted.org/packages/b2/06/76f396e6fd99266d99c628a6749155f21c616ffa241238070755238377b9/yasi-1.0.1.zip","yanked":false,"yanked_reason":null}],"1.1.1":[{"comment_text":"","digests":{"blake2b_256":"6eabb5a7fe7ea7abea5b1093905a3316cd1098edbe40e9a4db40174b0aea5a32","md5":"32d4a09bf6c53518b09ad79f67dc6f9c","sha256":"71e8add82519735248a039e890c10303e0b2f465bb7fed0e2b2f27c6472efcfa"},"downloads":-1,"filename":"yasi-1.1.1.zip","has_sig":false,"md5_digest":"32d4a09bf6c53518b09ad79f67dc6f9c","packagetype":"sdist","python_version":"source","requires_python":null,"size":66703,"upload_time":"2016-01-04T15:42:35","upload_time_iso_8601":"2016-01-04T15:42:35.386521Z","url":"https://files.pythonhosted.org/packages/6e/ab/b5a7fe7ea7abea5b1093905a3316cd1098edbe40e9a4db40174b0aea5a32/yasi-1.1.1.zip","yanked":false,"yanked_reason":null}],"1.1.2":[{"comment_text":"","digests":{"blake2b_256":"0e197d4e016ec1b924a045c3d83f74d0077b4facf212b3a2cffac7fba823f958","md5":"7bc4ac9c26307c3803522d62d4138319","sha256":"9d470b43d823f99b6f968a827051163ef8a8c021d374592cf0c3e0609c1c5e6c"},"downloads":-1,"filename":"yasi-1.1.2.zip","has_sig":false,"md5_digest":"7bc4ac9c26307c3803522d62d4138319","packagetype":"sdist","python_version":"source","requires_python":null,"size":67018,"upload_time":"2016-01-04T17:33:36","upload_time_iso_8601":"2016-01-04T17:33:36.855021Z","url":"https://files.pythonhosted.org/packages/0e/19/7d4e016ec1b924a045c3d83f74d0077b4facf212b3a2cffac7fba823f958/yasi-1.1.2.zip","yanked":false,"yanked_reason":null}],"1.2.0":[{"comment_text":"","digests":{"blake2b_256":"8e0c55edd2a18a07cec42ab981e80a557634385fde2bd84fe75ae848b575e0e5","md5":"70c3871366f07bfe6b7ba02729b61e55","sha256":"e9982db48bb565ce31e23fb74d09c961a0251a9e451e79528c2b9ef3689a18a3"},"downloads":-1,"filename":"yasi-1.2.0.zip","has_sig":false,"md5_digest":"70c3871366f07bfe6b7ba02729b61e55","packagetype":"sdist","python_version":"source","requires_python":null,"size":71922,"upload_time":"2016-01-09T22:16:53","upload_time_iso_8601":"2016-01-09T22:16:53.324425Z","url":"https://files.pythonhosted.org/packages/8e/0c/55edd2a18a07cec42ab981e80a557634385fde2bd84fe75ae848b575e0e5/yasi-1.2.0.zip","yanked":false,"yanked_reason":null}],"1.2.1":[{"comment_text":"","digests":{"blake2b_256":"930d42b2296339caff07479b74167cad940db9f2e5f3505c3c30c962c13602cf","md5":"6d454a49f348b0fa9160c93017b8d08b","sha256":"5c712327d83e1a649e9df46f69d0acf0ca8ebffd33b27f9e0ca8c9a563ab9b8a"},"downloads":-1,"filename":"yasi-1.2.1.zip","has_sig":false,"md5_digest":"6d454a49f348b0fa9160c93017b8d08b","packagetype":"sdist","python_version":"source","requires_python":null,"size":74282,"upload_time":"2016-01-22T15:47:35","upload_time_iso_8601":"2016-01-22T15:47:35.686398Z","url":"https://files.pythonhosted.org/packages/93/0d/42b2296339caff07479b74167cad940db9f2e5f3505c3c30c962c13602cf/yasi-1.2.1.zip","yanked":false,"yanked_reason":null}],"2.0.0":[{"comment_text":"","digests":{"blake2b_256":"168bc40b705e4089ab6a3e4399eb9f06a6e9462249b1a711cb83a7df18b179a0","md5":"7d65489efea7292147761ebe84584cbb","sha256":"2a9718c95c43ddf4824a1b7c5c0dfa390c871b538159c310fed5634f7c11d9fb"},"downloads":-1,"filename":"yasi-2.0.0.zip","has_sig":false,"md5_digest":"7d65489efea7292147761ebe84584cbb","packagetype":"sdist","python_version":"source","requires_python":null,"size":74403,"upload_time":"2016-01-25T10:30:52","upload_time_iso_8601":"2016-01-25T10:30:52.133237Z","url":"https://files.pythonhosted.org/packages/16/8b/c40b705e4089ab6a3e4399eb9f06a6e9462249b1a711cb83a7df18b179a0/yasi-2.0.0.zip","yanked":false,"yanked_reason":null}],"2.0.1":[{"comment_text":"","digests":{"blake2b_256":"0f2dba8664ba223fed6a8792611b2647c3586fcc594eb4e9fef203019328c678","md5":"a4007bd36b2c65fd5d99fb67e751ae02","sha256":"fcb3c55e403dd74336c10e3d69dfba07a51be769606e700463f156d8260087e4"},"downloads":-1,"filename":"yasi-2.0.1.zip","has_sig":false,"md5_digest":"a4007bd36b2c65fd5d99fb67e751ae02","packagetype":"sdist","python_version":"source","requires_python":null,"size":74614,"upload_time":"2016-01-25T22:42:33","upload_time_iso_8601":"2016-01-25T22:42:33.040580Z","url":"https://files.pythonhosted.org/packages/0f/2d/ba8664ba223fed6a8792611b2647c3586fcc594eb4e9fef203019328c678/yasi-2.0.1.zip","yanked":false,"yanked_reason":null}],"2.1.0":[{"comment_text":"","digests":{"blake2b_256":"3300adfce728a47b4ed34b1c95d69967e18c74b44f1703b749e813cb499becb3","md5":"f0e7af89cf6dc46b9d70e0ae1d0ef062","sha256":"51b09544e528b57266e1d74afd04329d4b15106cf9ff17353063b7d0d434ea2c"},"downloads":-1,"filename":"yasi-2.1.0.tar.gz","has_sig":false,"md5_digest":"f0e7af89cf6dc46b9d70e0ae1d0ef062","packagetype":"sdist","python_version":"source","requires_python":null,"size":30555,"upload_time":"2020-05-21T10:45:20","upload_time_iso_8601":"2020-05-21T10:45:20.395338Z","url":"https://files.pythonhosted.org/packages/33/00/adfce728a47b4ed34b1c95d69967e18c74b44f1703b749e813cb499becb3/yasi-2.1.0.tar.gz","yanked":false,"yanked_reason":null}],"2.1.1":[{"comment_text":"","digests":{"blake2b_256":"2d712a01d77eb1b449f29f3a984af4a4629e18aaa3f8c042ac81c6e58266d227","md5":"5fbac0e5d455e9eedc3ec1a46c4cbffd","sha256":"2b9f95e62433be9603c34203e229ddcdb6a8769b17b3fc360de389ba1ca51a05"},"downloads":-1,"filename":"yasi-2.1.1.tar.gz","has_sig":false,"md5_digest":"5fbac0e5d455e9eedc3ec1a46c4cbffd","packagetype":"sdist","python_version":"source","requires_python":null,"size":30930,"upload_time":"2020-05-21T16:57:45","upload_time_iso_8601":"2020-05-21T16:57:45.318793Z","url":"https://files.pythonhosted.org/packages/2d/71/2a01d77eb1b449f29f3a984af4a4629e18aaa3f8c042ac81c6e58266d227/yasi-2.1.1.tar.gz","yanked":true,"yanked_reason":"PyPI install issues"}],"2.1.2":[{"comment_text":"","digests":{"blake2b_256":"3a58e369cc04c658f6fbf53de6f05163fc6adbb16694ff7ae56886875fe30c07","md5":"5b9558dbdd07a715c272f7b9ea859233","sha256":"de0f8a1391f55549713592c6464dde7e46f29f40e8ff7c9ff19b938cb5963df4"},"downloads":-1,"filename":"yasi-2.1.2.tar.gz","has_sig":false,"md5_digest":"5b9558dbdd07a715c272f7b9ea859233","packagetype":"sdist","python_version":"source","requires_python":null,"size":32730,"upload_time":"2020-05-22T18:03:04","upload_time_iso_8601":"2020-05-22T18:03:04.987132Z","url":"https://files.pythonhosted.org/packages/3a/58/e369cc04c658f6fbf53de6f05163fc6adbb16694ff7ae56886875fe30c07/yasi-2.1.2.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"3a58e369cc04c658f6fbf53de6f05163fc6adbb16694ff7ae56886875fe30c07","md5":"5b9558dbdd07a715c272f7b9ea859233","sha256":"de0f8a1391f55549713592c6464dde7e46f29f40e8ff7c9ff19b938cb5963df4"},"downloads":-1,"filename":"yasi-2.1.2.tar.gz","has_sig":false,"md5_digest":"5b9558dbdd07a715c272f7b9ea859233","packagetype":"sdist","python_version":"source","requires_python":null,"size":32730,"upload_time":"2020-05-22T18:03:04","upload_time_iso_8601":"2020-05-22T18:03:04.987132Z","url":"https://files.pythonhosted.org/packages/3a/58/e369cc04c658f6fbf53de6f05163fc6adbb16694ff7ae56886875fe30c07/yasi-2.1.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
