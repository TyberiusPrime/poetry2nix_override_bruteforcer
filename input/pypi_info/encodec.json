{"info":{"author":"Alexandre Défossez, Jade Copet, Yossi Adi, Gabriel Synnaeve","author_email":"defossez@fb.com","bugtrack_url":null,"classifiers":["Topic :: Multimedia :: Sound/Audio","Topic :: Scientific/Engineering :: Artificial Intelligence"],"description":"# EnCodec: High Fidelity Neural Audio Compression\n![linter badge](https://github.com/facebookresearch/encodec/workflows/linter/badge.svg)\n![tests badge](https://github.com/facebookresearch/encodec/workflows/tests/badge.svg)\n\nThis is the code for the EnCodec neural codec presented in the [High Fidelity Neural Audio Compression](https://arxiv.org/pdf/2210.13438.pdf) [[abs]](https://arxiv.org/abs/2210.13438).\npaper. We provide our two multi-bandwidth models:\n* A causal model operating at 24 kHz on monophonic audio trained on a variety of audio data.\n* A non-causal model operationg at 48 kHz on stereophonic audio trained on music-only data.\n\nThe 24 kHz model can compress to 1.5, 3, 6, 12 or 24 kbps, while the 48 kHz model\nsupport 3, 6, 12 and 24 kbps. We also provide a pre-trained language model for each\nof the models, that can further compress the representation by up to 40% without\nany further loss of quality.\n\nFor reference, we also provide the code for our novel MS-STFT discriminator.\n\n<p align=\"center\">\n<img src=\"./architecture.png\" alt=\"Schema representing the structure of Encodec,\n    with a convolutional+LSTM encoder, a Residual Vector Quantization in the middle,\n    followed by a convolutional+LSTM decoder. A multiscale complex spectrogram discriminator is applied to the output, along with objective reconstruction losses.\n    A small transformer model is trained to predict the RVQ output.\"\nwidth=\"800px\"></p>\n\n\n## Samples\n\nSamples including baselines are provided on [our sample page](https://ai.honu.io/papers/encodec/samples.html).\nYou can also have a quick demo of what we achieve for 48 kHz music with EnCodec, along with\nentropy coding, by clicking the thumbnail (original tracks provided by [Lucille Crew](https://open.spotify.com/artist/5eLv7rNfrf3IjMnK311ByP?si=X_zD9ackRRGjFP5Y6Q7Zng) and [Voyageur I](https://open.spotify.com/artist/21HymveeIhDcM4KDKeNLz0?si=4zXF8VpeQpeKR9QUIuck9Q)).\n\n<p align=\"center\">\n<a href=\"https://ai.honu.io/papers/encodec/final.mp4\">\n<img src=\"./thumbnail.png\" alt=\"Thumbnail for the sample video.\n\tYou will first here the ground truth, then ~3kbps, then 12kbps, for two songs.\"></a></p>\n\n\n## What's up?\n\nSee [the changelog](CHANGELOG.md) for details on releases.\n\n## Installation\n\nEnCodec requires Python 3.8, and a reasonably recent version of PyTorch (1.11.0 ideally).\nTo install EnCodec, you can run from this repository:\n```bash\npip install -U encodec  # stable release\npip install -U git+https://git@github.com/facebookresearch/encodec#egg=encodec  # bleeding edge\n# of if you cloned the repo locally\npip install .\n```\n\n## Usage\n\nYou can then use the EnCodec command, either as\n```bash\npython3 -m encodec [...]\n# or\nencodec [...]\n```\n\nIf you want to directly use the compression API, checkout `encodec.compress`\nand `encodec.model`. See hereafter for instructions on how to extract the discrete\nrepresentation.\n\n### Model storage\n\nThe models will be automatically downloaded on first use using Torch Hub.\nFor more information on where those models are stored, or how to customize\nthe storage location, [checkout their documentation.](https://pytorch.org/docs/stable/hub.html#where-are-my-downloaded-models-saved)\n\n### Compression\n\n```bash\nencodec [-b TARGET_BANDWIDTH] [-f] [--hq] [--lm] INPUT_FILE [OUTPUT_FILE]\n```\nGiven any audio file supported by torchaudio on your platform, compresses\nit with EnCodec to the target bandwidth (default is 6 kbps, can be either 1.5, 3, 6, 12 or 24).\nOUTPUT_FILE must end in `.ecdc`. If not provided it will be the same as `INPUT_FILE`,\nreplacing the extension with `.ecdc`.\nIn order to use the model operating at 48 kHz on stereophonic audio, use the `--hq` flag.\nThe `-f` flag is used to force overwrite an existing output file.\nUse the `--lm` flag to use the pretrained language model with entropy coding (expect it to\nbe much slower).\n\nIf the sample rate or number of channels of the input doesn't match that of the model,\nthe command will automatically resample / reduce channels as needed.\n\n### Decompression\n```bash\nencodec [-f] [-r] ENCODEC_FILE [OUTPUT_WAV_FILE]\n```\nGiven a `.ecdc` file previously generated, this will decode it to the given output wav file.\nIf not provided, the output will default to the input with the `.wav` extension.\nUse the `-f` file to force overwrite the output file (be carefull if compress then decompress,\nnot to overwrite your original file !). Use the `-r` flag if you experience clipping, this will\nrescale the output file to avoid it.\n\n### Compression + Decompression\n```bash\nencodec [-r] [-b TARGET_BANDWIDTH] [-f] [--hq] [--lm] INPUT_FILE OUTPUT_WAV_FILE\n```\nWhen `OUTPUT_WAV_FILE` has the `.wav` extension (as opposed to `.ecdc`), the `encodec`\ncommand will instead compress and immediately decompress without storing the intermediate\n`.ecdc` file.\n\n### Extracting discrete representations\n\nThe EnCodec model can also be used to extract discrete representations from the audio waveform.\n\n```python\nfrom encodec import EncodecModel\nfrom encodec.utils import convert_audio\n\nimport torchaudio\nimport torch\n\n# Instantiate a pretrained EnCodec model\nmodel = EncodecModel.encodec_model_24khz()\nmodel.set_target_bandwidth(6.0)\n\n# Load and pre-process the audio waveform\nwav, sr = torchaudio.load(\"<PATH_TO_AUDIO_FILE>\")\nwav = wav.unsqueeze(0)\nwav = convert_audio(wav, sr, model.sample_rate, model.channels)\n\n# Extract discrete codes from EnCodec\nencoded_frames = model.encode(wav)\ncodes = torch.cat([encoded[0] for encoded in encoded_frames], dim=-1)  # [B, n_q, T]\n```\n\nNote that the 48 kHz model processes the audio by chunks of 1 seconds, with an overlap of 1%,\nand renormalizes the audio to have unit scale. For this model, the output of `model.encode(wav)`\nwould a list (for each frame of 1 second) of a tuple `(codes, scale)` with `scale` a scalar tensor.\n\n## Installation for development\n\nThis will install the dependencies and a `encodec` in developer mode (changes to the files\nwill directly reflect), along with the dependencies to run unit tests.\n```\npip install -e '.[dev]'\n```\n\n### Test\n\nYou can run the unit tests with\n```\nmake tests\n```\n\n## Citation\n\nIf you use this code or results in your paper, please cite our work as:\n\n```\n@article{defossez2022highfi,\n  title={High Fidelity Neural Audio Compression},\n  author={Défossez, Alexandre and Copet, Jade and Synnaeve, Gabriel and Adi, Yossi},\n  journal={arXiv preprint arXiv:2210.13438},\n  year={2022}\n}\n```\n\n## License\n\nThis repository is released under the CC-BY-NC 4.0. license as found in the\n[LICENSE](LICENSE) file.","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/facebookresearch/encodec","keywords":"","license":"Creative Commons Attribution-NonCommercial 4.0 International","maintainer":"","maintainer_email":"","name":"encodec","package_url":"https://pypi.org/project/encodec/","platform":null,"project_url":"https://pypi.org/project/encodec/","project_urls":{"Homepage":"https://github.com/facebookresearch/encodec"},"provides_extra":null,"release_url":"https://pypi.org/project/encodec/0.1.1/","requires_dist":null,"requires_python":">=3.8.0","summary":"High fidelity neural audio codec","version":"0.1.1","yanked":false,"yanked_reason":null},"last_serial":15525158,"releases":{"0.0.0":[{"comment_text":"","digests":{"blake2b_256":"a73ae5148f402fb329550e53a8c3e3a02d953517d51231570f0e9909f528803c","md5":"f958ab2cf723c56fc832283b15b69c56","sha256":"4c7536e31e8a1773ddf7989dc6920bca820cb4384375ae9e82faa5aa421d0d52"},"downloads":-1,"filename":"encodec-0.0.0.tar.gz","has_sig":false,"md5_digest":"f958ab2cf723c56fc832283b15b69c56","packagetype":"sdist","python_version":"source","requires_python":">=3.8.0","size":1512,"upload_time":"2022-07-26T12:41:26","upload_time_iso_8601":"2022-07-26T12:41:26.616906Z","url":"https://files.pythonhosted.org/packages/a7/3a/e5148f402fb329550e53a8c3e3a02d953517d51231570f0e9909f528803c/encodec-0.0.0.tar.gz","yanked":false,"yanked_reason":null}],"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"e4a27d8a9a56cdd0c28d4bbcb00c032a39e864330b403cb8b643ef219868a965","md5":"aae471b53ef522f454f53e71eaf8f9be","sha256":"db30d4b42a6d8a1be8adb76530e6e5a980aabe5030e0394fb78f8465cae0c52c"},"downloads":-1,"filename":"encodec-0.1.0.tar.gz","has_sig":false,"md5_digest":"aae471b53ef522f454f53e71eaf8f9be","packagetype":"sdist","python_version":"source","requires_python":">=3.8.0","size":3735962,"upload_time":"2022-10-25T14:57:48","upload_time_iso_8601":"2022-10-25T14:57:48.993642Z","url":"https://files.pythonhosted.org/packages/e4/a2/7d8a9a56cdd0c28d4bbcb00c032a39e864330b403cb8b643ef219868a965/encodec-0.1.0.tar.gz","yanked":false,"yanked_reason":null}],"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"6259e47bbd0542d0e6f4ce9983d5eb458a01d4b42c81e5c410cb9e159b1061ae","md5":"3b090c97213e6fcb0f90c24e167ef833","sha256":"36dde98ccfe6c51a15576476cadfcb3b35a63507b8b8555abd69889a6fba6772"},"downloads":-1,"filename":"encodec-0.1.1.tar.gz","has_sig":false,"md5_digest":"3b090c97213e6fcb0f90c24e167ef833","packagetype":"sdist","python_version":"source","requires_python":">=3.8.0","size":3736037,"upload_time":"2022-10-25T16:13:21","upload_time_iso_8601":"2022-10-25T16:13:21.471815Z","url":"https://files.pythonhosted.org/packages/62/59/e47bbd0542d0e6f4ce9983d5eb458a01d4b42c81e5c410cb9e159b1061ae/encodec-0.1.1.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"6259e47bbd0542d0e6f4ce9983d5eb458a01d4b42c81e5c410cb9e159b1061ae","md5":"3b090c97213e6fcb0f90c24e167ef833","sha256":"36dde98ccfe6c51a15576476cadfcb3b35a63507b8b8555abd69889a6fba6772"},"downloads":-1,"filename":"encodec-0.1.1.tar.gz","has_sig":false,"md5_digest":"3b090c97213e6fcb0f90c24e167ef833","packagetype":"sdist","python_version":"source","requires_python":">=3.8.0","size":3736037,"upload_time":"2022-10-25T16:13:21","upload_time_iso_8601":"2022-10-25T16:13:21.471815Z","url":"https://files.pythonhosted.org/packages/62/59/e47bbd0542d0e6f4ce9983d5eb458a01d4b42c81e5c410cb9e159b1061ae/encodec-0.1.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
