{"info":{"author":"Andy Babic","author_email":"andyjbabic@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Framework :: Django","Framework :: Django :: 1.11","Framework :: Django :: 2.0","Framework :: Django :: 2.1","Framework :: Django :: 2.2","Intended Audience :: Developers","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.4","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Internet :: WWW/HTTP","Topic :: Software Development :: Libraries :: Python Modules"],"description":".. image:: https://raw.githubusercontent.com/ababic/django-cogwheels/master/docs/source/_static/django-cogwheels-logo.png\n    :alt: Django Cogwheels\n\n.. image:: https://travis-ci.com/ababic/django-cogwheels.svg?branch=master\n    :alt: Build Status\n    :target: https://travis-ci.com/ababic/django-cogwheels\n\n.. image:: https://img.shields.io/pypi/v/django-cogwheels.svg\n    :alt: PyPi Version\n    :target: https://pypi.python.org/pypi/django-cogwheels\n\n.. image:: https://codecov.io/gh/ababic/django-cogwheels/branch/master/graph/badge.svg\n    :alt: Code coverage\n    :target: https://codecov.io/gh/ababic/django-cogwheels\n\n=========================\nWhat is django-cogwheels?\n=========================\n\nThe aim of ``django-cogwheels`` is to create a standardised, well-tested approach for allowing users of an app to override default behaviour, by overriding things in their project's Django settings.\n\nThere are other apps out there that try to solve this problem, but it was important for me to create a solution that would cater well for deprecation of settings, as this is something I find myself having to do regularly in apps I maintain. It was also important for me to create something that:\n\n- Is super easy to set up\n- Properly accounts for different audiences (the 'app developer' and 'app user')\n- Will work as well for 100 apps setting as it will for 5\n- Only makes things complicated when absolutely necessary\n\n**Give your users the flexibility they deserve, and allow them to:**\n\n- Override basic python type values such as: strings, integers, booleans, decimals and floats.\n- Override structured python type values such as: lists, tuples and dictionaries.\n- Use custom Django models in place of the ones you provide.\n- Use custom python classes, objects or entire modules in place of the ones you provide.\n\nGoodness for app developers!\n============================\n\n- A stable, documented, standardised approach for implementing overridable app-specific settings.\n- Clearly define and communicate the deprecation status of app settings, giving you the flexibility to rename, replace or flag settings for removal over your project's lifecycle. User overrides defined using old setting names remain available to you, allowing you to continue to support them during the deprecation period.\n- Helpful, consistent error messages when default values provided for models, modules or other overridable object settings are invalid.\n- Cached imports for speedy access to models, modules and other importable python objects.\n- Plays nicely with Django's test framework (subscribes to Django's ``setting_changed`` signal, so that cached values are cleared when ``override_settings`` is used).\n\n\nGoodness for app users!\n=======================\n\n- Helpful, consistent error messages when their Model, Class, method or module override settings are incorrectly formatted, or cannot be imported.\n- Helpful, consistent deprecation warnings when they are overriding a setting that has been renamed, replaced or flagged for removal.\n\n\nQuick start guide\n=================\n\n1.  Install the package using pip:\n\n    .. code-block:: console\n\n        pip install django-cogwheels\n\n2.  ``cd`` into your project's root app directory:\n\n    .. code-block:: console\n\n        cd your-django-project/yourproject/\n\n3.  Create a ``conf`` app using the cogwheels Django app template:\n\n    .. code-block:: console\n\n        django-admin.py startapp conf --template=https://github.com/ababic/cogwheels-conf-app/zipball/master\n\n4.  Open up ``yourproject/conf/defaults.py``, and add your setting values like so:\n\n    .. code-block:: python\n\n        # You can add settings for any type of value\n        MAX_ITEMS_PER_ORDER = 5\n\n        # For settings that refer to models, use a string in the format 'app_name.Model'\n        ORDER_ITEM_MODEL = 'yourproject.SimpleOrderItem'\n\n        # For settings that refer to a python module, use an 'import path' string, like so:\n        DISCOUNTS_BACKEND = 'yourproject.discount_backends.simple'\n\n        # For settings that refer to classes, methods, or other python objects from a\n        # python module, use an 'object import path' string, like so:\n        ORDER_FORM_CLASS = 'yourproject.forms.OrderForm'\n\n\n5.  To use setting values in your app, simply import the settings helper, and reference the relevant setting as an attribute, like this:\n\n    .. code-block:: console\n\n        >>> from yourproject.conf import settings\n\n        >>> settings.MAX_ITEMS_PER_ORDER\n        5\n\n        >>> settings.ORDER_ITEM_MODEL\n        'yourproject.SimpleOrderItem'\n\n        >>> settings.DISCOUNTS_BACKEND\n        'yourproject.discount_backends.simple'\n\n        >>> settings.ORDER_FORM_CLASS\n        'yourproject.forms.OrderForm'\n\n\n6.  For settings that refer to Django models, you can use the settings helper's special ``models`` attribute to access model classes themselves, rather than just the string value. For example:\n\n    .. code-block:: console\n\n        >>> from yourproject.conf import settings\n\n        >>> model = settings.models.ORDER_ITEM_MODEL\n        yourproject.models.SimpleOrderItem\n\n        >>> obj = model(id=1, product='test product', quantity=15)\n        >>> obj.save()\n\n        >>> print(model.objects.all())\n        <QuerySet [<SimpleOrderItem: SimpleOrderItem object (1)>]>\n\n    Behind the scenes, Django's ``django.apps.apps.get_model()`` method is called, and the result is cached so that repeat requests for the same model are handled quickly and efficiently.\n\n\n7.  For settings that refer to python modules, you can use the settings helper's special ``modules`` attribute to access the modules themselves, instead of an import path string:\n\n    .. code-block:: console\n\n        >>> from yourproject.conf import settings\n\n        >>> module = settings.modules.DISCOUNTS_BACKEND\n        <module 'yourproject.discount_backends.simple' from '/system/path/to/your-django-project/yourproject/discount_backends/simple.py'>\n\n\n    Behind the scenes, python's ``importlib.import_module()`` method is called, and the result is cached so that repeat requests for same module are handled quickly and efficiently.\n\n\n8.  For settings that refer to classes, functions, or other importable python objects, you can use the settings helper's special ``objects`` attribute to access those objects, instead of an import path string:\n\n    .. code-block:: console\n\n        >>> from yourproject.conf import settings\n\n        >>> form_class = settings.objects.ORDER_FORM_CLASS\n        yourproject.formsOrderForm\n\n        >>> form = form_class(data={})\n        >>> form.is_valid()\n        False\n\n    Behind the scenes, python's ``importlib.import_module()`` method is called, and the result is cached so that repeat requests for same object are handled quickly and efficiently.\n\n\n9.  Users of your app can now override any of the default values by adding alternative values to their project's Django settings module. For example:\n\n    .. code-block:: python\n\n        # userproject/settings/base.py\n\n        YOURAPP_MAX_ITEMS_PER_ORDER = 2\n\n        YOURAPP_ORDER_ITEM_MODEL = 'userproject_orders.CustomOrderItem'\n\n        YOURAPP_DISCOUNTS_BACKEND = 'userproject.discounts.custom_discount_backend'\n\n        YOURAPP_ORDER_FORM_CLASS = 'userproject.orders.forms.CustomOrderForm'\n\n10. You may noticed that the above variable names are all prefixed with ``YOURAPP_``. This prefix will differ for your app, depending on the package name.\n\n    This 'namespacing' of settings is important. Not only does it helps users of your app to remember which app their override settings are for, but it also helps to prevent setting name clashes between apps.\n\n    You can find out what the prefix is for your app by doing:\n\n    .. code-block:: console\n\n        >>> from yourproject.conf import settings\n        >>> settings.get_prefix()\n        'YOURPROJECT_'\n\n    You can change this prefix to whatever you like by setting a ``prefix`` attribute on your settings helper class, like so:\n\n    .. code-block:: python\n\n        # yourapp/conf/settings.py\n\n        class MyAppSettingsHelper(BaseAppSettingsHelper):\n            prefix = 'CUSTOM'  # No need for a trailing underscore here\n\n    .. code-block:: console\n\n        >>> from yourproject.conf import settings\n        >>> settings.get_prefix()\n        'CUSTOM_'\n\n\nFrequently asked questions\n==========================\n\n\n1. Are there any example implmentations of ``django-cogwheels`` that I can look at?\n-----------------------------------------------------------------------------------\n\nSure thing.\n\n``wagtailmenus`` uses cogwheels to manage it's app settings. See:\nhttps://github.com/rkhleics/wagtailmenus/tree/master/wagtailmenus\n\nYou might also want to check out the ``tests`` app within cogwheels itself, which includes lots of examples:\nhttps://github.com/ababic/django-cogwheels/tree/master/cogwheels/tests\n\n\n2. Do ``defaults.py`` and ``settings.py`` have to live in a ``conf`` app?\n-------------------------------------------------------------------------\n\nNo. This is just a recommendation. Everyone has their own preferences for how they structure their projects, and that's all well and good. So long as you keep ``defaults.py`` and ``settings.py`` in the same directory, things should work just fine out of the box.\n\nIf you want ``defaults.py`` and ``settings.py`` to live in separate places, ``cogwheels`` supports that too. But, you'll have to set the ``defaults_path`` attribute on your settings helper class, so that it knows where to find the default values. For example:\n\n.. code-block:: python\n\n        # yourapp/some_directory/settings.py\n\n        class MyAppSettingsHelper(BaseAppSettingsHelper):\n            defaults_path = 'yourapp.some_other_place.defaults'\n\n\n3. You mentioned support for setting deprecation. How does that work?\n---------------------------------------------------------------------\n\nMore complete documentation will be added soon. In the meantime, if you're curious about what deprecation definitions look like, you may want to check out the ``tests`` app's setting helper definition: https://github.com/ababic/django-cogwheels/blob/master/cogwheels/tests/conf/settings.py\n\n\n4. How do specify validation rules for certain settings?\n--------------------------------------------------------\n\nThe only validation that ``cogwheels`` performs is on setting values that are supposed to reference Django models and other importables, and this validation is only triggered when you use ``settings.models.SETTING_NAME``, ``settings.modules.SETTING_NAME`` or ``settings.objects.SETTING_NAME`` in your code to import and access the object.\n\n**There's currently no way to configure ``cogwheels`` to apply validation to other setting values.**\n\nI do intend to support such a thing future versions, but I can't make any promises as to when.\n\nIf this puts you off, keep in mind that it's not in anybody's interest for developers to purposefully use inappropriate override values for settings. So long as your documentation explains the rules/boundaries for expected values well enough, issues should be very rare.\n\n\n5. What's that last line in ``settings.py`` all about?\n------------------------------------------------------\n\nAhh, yes. The ``sys.modules[__name__] = MyAppSettingsHelper()`` bit. I understand that some developers might think this dirty/hacky/unpythonic/whatever. I have to admit, I was unsure about it for a while, too.\n\nI'll agree that it is somewhat 'uncommon' to see this code in use. Perhaps because it's not particularly useful in a lot situations, or perhaps because using such features incorrectly can break things in strange, hard-to-debug ways. But, support for this hack is not going anywhere, and in `cogwheels` case, it's useful, as it removes the need to instantiate things in ``__init__.py`` (which I dislike for a number of reasons).\n\nIf you're still not reassured, perhaps Guido van Rossum (Founder of Python) can put your mind at rest?\nhttps://mail.python.org/pipermail/python-ideas/2012-May/014969.html\n\n\nCompatibility\n=============\n\nThe current version is tested for compatiblily with the following:\n\n- Django versions 1.11 to 2.2\n- Python versions 3.4 to 3.8\n\n\n","description_content_type":"text/x-rst","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/ababic/django-cogwheels/","keywords":"","license":"MIT","maintainer":"","maintainer_email":"","name":"django-cogwheels","package_url":"https://pypi.org/project/django-cogwheels/","platform":"","project_url":"https://pypi.org/project/django-cogwheels/","project_urls":{"Homepage":"https://github.com/ababic/django-cogwheels/"},"provides_extra":null,"release_url":"https://pypi.org/project/django-cogwheels/0.3/","requires_dist":["Django (<2.1,>=2.0) ; extra == 'development'","ipdb ; extra == 'development'","werkzeug ; extra == 'development'","django-extensions ; extra == 'development'","pyenchant (>=2.0) ; extra == 'docs'","Sphinx (>=1.7.4) ; extra == 'docs'","sphinxcontrib-spelling (>=1.4) ; extra == 'docs'","sphinx-rtd-theme (>=0.3) ; extra == 'docs'","coverage ; extra == 'testing'"],"requires_python":">=3.4","summary":"A consistent, user-friendly solution for adding app-specific settings your Django package, reusable app or framework.","version":"0.3","yanked":false,"yanked_reason":null},"last_serial":6055097,"releases":{"0.0.1a0":[{"comment_text":"","digests":{"blake2b_256":"81aef2f859a032e2433c5e9634ba5c4a29ff630898187ca9f3bb621ac77065b3","md5":"80aaaa83dd89148ddf8d71ea51587ddc","sha256":"ebe3ca81525860c8fe76eb3d798beda18fe0442a682ecfa9972fd5d60b2168cf"},"downloads":-1,"filename":"django_cogwheels-0.0.1a0-py3-none-any.whl","has_sig":false,"md5_digest":"80aaaa83dd89148ddf8d71ea51587ddc","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.4,<3.7","size":22028,"upload_time":"2018-06-24T14:51:29","upload_time_iso_8601":"2018-06-24T14:51:29.379561Z","url":"https://files.pythonhosted.org/packages/81/ae/f2f859a032e2433c5e9634ba5c4a29ff630898187ca9f3bb621ac77065b3/django_cogwheels-0.0.1a0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3fa9440bba033fe66ffcfdafc55b87c2fa936b601456a591995b7714d12c6d3b","md5":"0a6a5c0635bf33d97cd810cc554a6280","sha256":"f02041f7f82399fea8d43499c478a0429ed728c8becf6311777e0c52e52d322c"},"downloads":-1,"filename":"django-cogwheels-0.0.1a0.tar.gz","has_sig":false,"md5_digest":"0a6a5c0635bf33d97cd810cc554a6280","packagetype":"sdist","python_version":"source","requires_python":">=3.4,<3.7","size":14732,"upload_time":"2018-06-24T14:51:30","upload_time_iso_8601":"2018-06-24T14:51:30.642287Z","url":"https://files.pythonhosted.org/packages/3f/a9/440bba033fe66ffcfdafc55b87c2fa936b601456a591995b7714d12c6d3b/django-cogwheels-0.0.1a0.tar.gz","yanked":false,"yanked_reason":null}],"0.0.1a1":[{"comment_text":"","digests":{"blake2b_256":"006b892eb054bf06a42541c6e19caa985011e2b2b25d22e433f7cf8f5da6a260","md5":"eccbb18612c318dca0a0617a6b362d85","sha256":"f468ff9c5ad59103f2ebdb21f31018ac76466897555915b755fd4a4fb4c97efd"},"downloads":-1,"filename":"django_cogwheels-0.0.1a1-py3-none-any.whl","has_sig":false,"md5_digest":"eccbb18612c318dca0a0617a6b362d85","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.4,<3.7","size":40844,"upload_time":"2018-06-25T15:20:46","upload_time_iso_8601":"2018-06-25T15:20:46.750013Z","url":"https://files.pythonhosted.org/packages/00/6b/892eb054bf06a42541c6e19caa985011e2b2b25d22e433f7cf8f5da6a260/django_cogwheels-0.0.1a1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"77e50412e75b40f7a08fbf3da298585d13650a40f3238abb65e29b6a5b3b4128","md5":"3ac07fef7da0821ccadd5bf2850d6010","sha256":"47314d10a2228ed5feb61836c6bbdc986db72436af4925b9da6cd38f671b1f82"},"downloads":-1,"filename":"django-cogwheels-0.0.1a1.tar.gz","has_sig":false,"md5_digest":"3ac07fef7da0821ccadd5bf2850d6010","packagetype":"sdist","python_version":"source","requires_python":">=3.4,<3.7","size":14725,"upload_time":"2018-06-25T15:20:48","upload_time_iso_8601":"2018-06-25T15:20:48.341023Z","url":"https://files.pythonhosted.org/packages/77/e5/0412e75b40f7a08fbf3da298585d13650a40f3238abb65e29b6a5b3b4128/django-cogwheels-0.0.1a1.tar.gz","yanked":false,"yanked_reason":null}],"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"ed7e92ad53cfacbb4ac1213d24ca41ff20a377740bfafe7514cb268fb7ab358b","md5":"1eeb386585740580654dde1d7091b35b","sha256":"5d41769651f68c252787f70e507b28891e330cf119fd45a962c4fc7d7e90cfef"},"downloads":-1,"filename":"django_cogwheels-0.1.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"1eeb386585740580654dde1d7091b35b","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.4,<3.7","size":44780,"upload_time":"2018-06-27T13:03:52","upload_time_iso_8601":"2018-06-27T13:03:52.457078Z","url":"https://files.pythonhosted.org/packages/ed/7e/92ad53cfacbb4ac1213d24ca41ff20a377740bfafe7514cb268fb7ab358b/django_cogwheels-0.1.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"34c4cf7e2b258d3435991ca5c9ed5ba91a0d70b8289087b2ea0e36fbc463147b","md5":"0402228888a8c2536f7a9b12f1624f74","sha256":"51b7892b1dff0e155f1d258893d6ec1e6de3f3eb5715ea3c3fd0e32bc2972d5b"},"downloads":-1,"filename":"django-cogwheels-0.1.0.tar.gz","has_sig":false,"md5_digest":"0402228888a8c2536f7a9b12f1624f74","packagetype":"sdist","python_version":"source","requires_python":">=3.4,<3.7","size":21637,"upload_time":"2018-06-27T13:03:54","upload_time_iso_8601":"2018-06-27T13:03:54.651421Z","url":"https://files.pythonhosted.org/packages/34/c4/cf7e2b258d3435991ca5c9ed5ba91a0d70b8289087b2ea0e36fbc463147b/django-cogwheels-0.1.0.tar.gz","yanked":false,"yanked_reason":null}],"0.2":[{"comment_text":"","digests":{"blake2b_256":"c53faff8dc1440c39ee9c955bf182d6ab3080603bec9797cc83ac7b0755ed55c","md5":"223e4104fe4b3c4d0282e59649e57321","sha256":"53942daafeac4db35dd2a9772597701f94ac29944026d51c1b03687e2b42be66"},"downloads":-1,"filename":"django_cogwheels-0.2-py3-none-any.whl","has_sig":false,"md5_digest":"223e4104fe4b3c4d0282e59649e57321","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.4,<3.8","size":31730,"upload_time":"2018-08-02T15:19:36","upload_time_iso_8601":"2018-08-02T15:19:36.261805Z","url":"https://files.pythonhosted.org/packages/c5/3f/aff8dc1440c39ee9c955bf182d6ab3080603bec9797cc83ac7b0755ed55c/django_cogwheels-0.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"102649e4ce3b45ade2f7f7d35db26adf166852782f6a1576ff76699764fcf43b","md5":"00d47546562df17ffe6be45c4d87d3be","sha256":"dab05326be02250f3ccbaabfcac4e65333f9f437b250099aaf81e6aed09e9a4c"},"downloads":-1,"filename":"django-cogwheels-0.2.tar.gz","has_sig":false,"md5_digest":"00d47546562df17ffe6be45c4d87d3be","packagetype":"sdist","python_version":"source","requires_python":">=3.4,<3.8","size":27154,"upload_time":"2018-08-02T15:19:37","upload_time_iso_8601":"2018-08-02T15:19:37.256683Z","url":"https://files.pythonhosted.org/packages/10/26/49e4ce3b45ade2f7f7d35db26adf166852782f6a1576ff76699764fcf43b/django-cogwheels-0.2.tar.gz","yanked":false,"yanked_reason":null}],"0.3":[{"comment_text":"","digests":{"blake2b_256":"9a3b2db92c666d39da78cc872da012582dab7bf4f3ff25e8246bd6ebc547e301","md5":"10560646cd2e3313e16f7bce19a6b61e","sha256":"197bd05e7114403d7301214b3f8a371c4fb6039cf21c811f099438b167b5ed21"},"downloads":-1,"filename":"django_cogwheels-0.3-py3-none-any.whl","has_sig":false,"md5_digest":"10560646cd2e3313e16f7bce19a6b61e","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.4","size":35154,"upload_time":"2019-10-30T22:14:18","upload_time_iso_8601":"2019-10-30T22:14:18.342583Z","url":"https://files.pythonhosted.org/packages/9a/3b/2db92c666d39da78cc872da012582dab7bf4f3ff25e8246bd6ebc547e301/django_cogwheels-0.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b6a5d3bf15adaaf3de18f5f588b29f0e0feb251e5bf052271d18af51ec117f86","md5":"dfa2406227e08683d3b65fe83cf2659e","sha256":"848a4d9f2c96c582a4a4f2e7c276dfd95ab3905748cae13bb7c4b365a6717e94"},"downloads":-1,"filename":"django-cogwheels-0.3.tar.gz","has_sig":false,"md5_digest":"dfa2406227e08683d3b65fe83cf2659e","packagetype":"sdist","python_version":"source","requires_python":">=3.4","size":31198,"upload_time":"2019-10-30T22:14:20","upload_time_iso_8601":"2019-10-30T22:14:20.079095Z","url":"https://files.pythonhosted.org/packages/b6/a5/d3bf15adaaf3de18f5f588b29f0e0feb251e5bf052271d18af51ec117f86/django-cogwheels-0.3.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"9a3b2db92c666d39da78cc872da012582dab7bf4f3ff25e8246bd6ebc547e301","md5":"10560646cd2e3313e16f7bce19a6b61e","sha256":"197bd05e7114403d7301214b3f8a371c4fb6039cf21c811f099438b167b5ed21"},"downloads":-1,"filename":"django_cogwheels-0.3-py3-none-any.whl","has_sig":false,"md5_digest":"10560646cd2e3313e16f7bce19a6b61e","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.4","size":35154,"upload_time":"2019-10-30T22:14:18","upload_time_iso_8601":"2019-10-30T22:14:18.342583Z","url":"https://files.pythonhosted.org/packages/9a/3b/2db92c666d39da78cc872da012582dab7bf4f3ff25e8246bd6ebc547e301/django_cogwheels-0.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b6a5d3bf15adaaf3de18f5f588b29f0e0feb251e5bf052271d18af51ec117f86","md5":"dfa2406227e08683d3b65fe83cf2659e","sha256":"848a4d9f2c96c582a4a4f2e7c276dfd95ab3905748cae13bb7c4b365a6717e94"},"downloads":-1,"filename":"django-cogwheels-0.3.tar.gz","has_sig":false,"md5_digest":"dfa2406227e08683d3b65fe83cf2659e","packagetype":"sdist","python_version":"source","requires_python":">=3.4","size":31198,"upload_time":"2019-10-30T22:14:20","upload_time_iso_8601":"2019-10-30T22:14:20.079095Z","url":"https://files.pythonhosted.org/packages/b6/a5/d3bf15adaaf3de18f5f588b29f0e0feb251e5bf052271d18af51ec117f86/django-cogwheels-0.3.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
