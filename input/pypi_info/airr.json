{"info":{"author":"AIRR Community","author_email":null,"bugtrack_url":null,"classifiers":["Intended Audience :: Science/Research","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python :: 3","Topic :: Scientific/Engineering :: Bio-Informatics"],"description":"Installation\n------------------------------------------------------------------------------\n\nInstall in the usual manner from PyPI::\n\n    > pip3 install airr --user\n\nOr from the `downloaded <https://github.com/airr-community/airr-standards>`__\nsource code directory::\n\n    > python3 setup.py install --user\n\n\nQuick Start\n------------------------------------------------------------------------------\n\nDeprecation Notice\n^^^^^^^^^^^^^^^^^^^^\n\nThe ``load_repertoire``, ``write_repertoire``, and ``validate_repertoire`` functions\nhave been deprecated for the new generic ``load_airr_data``, ``write_airr_data``, and\n``validate_airr_data`` functions. These new functions are backwards compatible with\nthe Repertoire metadata format but also support the new AIRR objects such as GermlineSet,\nRepertoireGroup, GenotypeSet, Cell and Clone. This new format is defined by the DataFile\nSchema, which describes a standard set of objects included in a file containing\nAIRR Data Model presentations. Currently, the AIRR DataFile does not completely support\nRearrangement, so users should continue using AIRR TSV files and its specific functions.\nAlso, the ``repertoire_template`` function has been deprecated for the ``Schema.template``\nmethod, which can now be called on any AIRR Schema to create a blank object.\n\nReading AIRR Data Files\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``airr`` package contains functions to read and write AIRR Data\nModel files. The file format is either YAML or JSON, and the package provides a\nlight wrapper over the standard parsers. The file needs a ``json``, ``yaml``, or ``yml``\nfile extension so that the proper parser is utilized. All of the AIRR objects\nare loaded into memory at once and no streaming interface is provided::\n\n    import airr\n\n    # Load the AIRR data\n    data = airr.read_airr('input.airr.json')\n    # loop through the repertoires\n    for rep in data['Repertoire']:\n        print(rep)\n\nWhy are the AIRR objects, such as Repertoire, GermlineSet, and etc., in a list versus in a\ndictionary keyed by their identifier (e.g., ``repertoire_id``)? There are two primary reasons for\nthis. First, the identifier might not have been assigned yet. Some systems might allow MiAIRR\nmetadata to be entered but the identifier is assigned to that data later by another process. Without\nthe identifier, the data could not be stored in a dictionary. Secondly, the list allows the data to\nhave a default ordering. If you know that the data has a unique identifier then you can quickly\ncreate a dictionary object using a comprehension. For example, with repertoires::\n\n    rep_dict = { obj['repertoire_id'] : obj for obj in data['Repertoire'] }\n\nanother example with germline sets::\n\n    germline_dict = { obj['germline_set_id'] : obj for obj in data['GermlineSet'] }\n\nWriting AIRR Data Files\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nWriting an AIRR Data File is also a light wrapper over standard YAML or JSON\nparsers. Multiple AIRR objects, such as Repertoire, GermlineSet, and etc., can be\nwritten together into the same file. In this example, we use the ``airr`` library ``template``\nmethod to create some blank Repertoire objects, and write them to a file.\nAs with the read function, the complete list of repertoires are written at once,\nthere is no streaming interface::\n\n    import airr\n\n    # Create some blank repertoire objects in a list\n    data = { 'Repertoire': [] }\n    for i in range(5):\n        data['Repertoire'].append(airr.schema.RepertoireSchema.template())\n\n    # Write the AIRR Data\n    airr.write_airr('output.airr.json', data)\n\nReading AIRR Rearrangement TSV files\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``airr`` package contains functions to read and write AIRR Rearrangement\nTSV files as either iterables or pandas data frames. The usage is straightforward,\nas the file format is a typical tab delimited file, but the package\nperforms some additional validation and type conversion beyond using a\nstandard CSV reader::\n\n    import airr\n\n    # Create an iteratable that returns a dictionary for each row\n    reader = airr.read_rearrangement('input.tsv')\n    for row in reader: print(row)\n\n    # Load the entire file into a pandas data frame\n    df = airr.load_rearrangement('input.tsv')\n\nWriting AIRR Rearrangement TSV files\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSimilar to the read operations, write functions are provided for either creating\na writer class to perform row-wise output or writing the entire contents of\na pandas data frame to a file. Again, usage is straightforward with the ``airr``\noutput functions simply performing some type conversion and field ordering\noperations::\n\n    import airr\n\n    # Create a writer class for iterative row output\n    writer = airr.create_rearrangement('output.tsv')\n    for row in reader:  writer.write(row)\n\n    # Write an entire pandas data frame to a file\n    airr.dump_rearrangement(df, 'file.tsv')\n\nBy default, ``create_rearrangement`` will only write the ``required`` fields\nin the output file. Additional fields can be included in the output file by\nproviding the ``fields`` parameter with an array of additional field names::\n\n    # Specify additional fields in the output\n    fields = ['new_calc', 'another_field']\n    writer = airr.create_rearrangement('output.tsv', fields=fields)\n\nA common operation is to read an AIRR rearrangement file, and then\nwrite an AIRR rearrangement file with additional fields in it while\nkeeping all of the existing fields from the original file. The\n``derive_rearrangement`` function provides this capability::\n\n    import airr\n\n    # Read rearrangement data and write new file with additional fields\n    reader = airr.read_rearrangement('input.tsv')\n    fields = ['new_calc']\n    writer = airr.derive_rearrangement('output.tsv', 'input.tsv', fields=fields)\n    for row in reader:\n        row['new_calc'] = 'a value'\n        writer.write(row)\n\n\nValidating AIRR data files\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``airr`` package can validate AIRR Data Model JSON/YAML files and Rearrangement\nTSV files to ensure that they contain all required fields and that the fields types\nmatch the AIRR Schema. This can be done using the ``airr-tools`` command\nline program or the validate functions in the library can be called::\n\n    # Validate a rearrangement TSV file\n    airr-tools validate rearrangement -a input.tsv\n\n    # Validate an AIRR DataFile\n    airr-tools validate airr -a input.airr.json\n\nCombining Repertoire metadata and Rearrangement files\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``airr`` package does not currently keep track of which AIRR Data Model files\nare associated with which Rearrangement TSV files, though there is ongoing work to define\na standardized manifest, so users will need to handle those\nassociations themselves. However, in the data, AIRR identifier fields, such as ``repertoire_id``,\nform the link between objects in the AIRR Data Model.\nThe typical usage is that a program is going to perform some\ncomputation on the Rearrangements, and it needs access to the Repertoire metadata\nas part of the computation logic. This example code shows the basic framework\nfor doing that, in this case doing gender specific computation::\n\n    import airr\n\n    # Load AIRR data containing repertoires\n    data = airr.read_airr('input.airr.json')\n\n    # Put repertoires in dictionary keyed by repertoire_id\n    rep_dict = { obj['repertoire_id'] : obj for obj in data['Repertoire'] }\n\n    # Create an iteratable for rearrangement data\n    reader = airr.read_rearrangement('input.tsv')\n    for row in reader:\n        # get repertoire metadata with this rearrangement\n        rep = rep_dict[row['repertoire_id']]\n        \n        # check the gender\n        if rep['subject']['sex'] == 'male':\n            # do male specific computation\n        elif rep['subject']['sex'] == 'female':\n            # do female specific computation\n        else:\n            # do other specific computation\n\n","description_content_type":null,"docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"http://docs.airr-community.org","keywords":"AIRR, bioinformatics, sequencing, immunoglobulin, antibody, adaptive immunity, T cell, B cell, BCR, TCR","license":"CC BY 4.0","maintainer":null,"maintainer_email":null,"name":"airr","package_url":"https://pypi.org/project/airr/","platform":null,"project_url":"https://pypi.org/project/airr/","project_urls":{"Homepage":"http://docs.airr-community.org"},"provides_extra":null,"release_url":"https://pypi.org/project/airr/1.5.1/","requires_dist":null,"requires_python":null,"summary":"AIRR Community Data Representation Standard reference library for antibody and TCR sequencing data.","version":"1.5.1","yanked":false,"yanked_reason":null},"last_serial":23494557,"releases":{"1.1.0":[{"comment_text":"","digests":{"blake2b_256":"11b08fd015f82e0e4e9a2de32ecde43faed6a584bde8f6b8995550f733e09718","md5":"5914cbd8b22e6f24a6363f7afab58f3b","sha256":"7f43b80abcf9c31d714fdea0c9900b8c391c67afe96088d282b651fbbed6e8a2"},"downloads":-1,"filename":"airr-1.1.0.tar.gz","has_sig":false,"md5_digest":"5914cbd8b22e6f24a6363f7afab58f3b","packagetype":"sdist","python_version":"source","requires_python":null,"size":33670,"upload_time":"2018-05-03T18:11:36","upload_time_iso_8601":"2018-05-03T18:11:36.014370Z","url":"https://files.pythonhosted.org/packages/11/b0/8fd015f82e0e4e9a2de32ecde43faed6a584bde8f6b8995550f733e09718/airr-1.1.0.tar.gz","yanked":false,"yanked_reason":null}],"1.2.0":[{"comment_text":"","digests":{"blake2b_256":"44bc4e76698ab4318e7431ada038fb13ed1c50a01135927cf181e6c6b32824f5","md5":"ba9047973c6b2aaf69bfb4744490d5bc","sha256":"187d8ad2a24e4c36ce7fba0a3d9ce7f4f9bfd8f410ff37e466a5f112ec359fb8"},"downloads":-1,"filename":"airr-1.2.0.tar.gz","has_sig":false,"md5_digest":"ba9047973c6b2aaf69bfb4744490d5bc","packagetype":"sdist","python_version":"source","requires_python":null,"size":34923,"upload_time":"2018-08-18T17:54:20","upload_time_iso_8601":"2018-08-18T17:54:20.174148Z","url":"https://files.pythonhosted.org/packages/44/bc/4e76698ab4318e7431ada038fb13ed1c50a01135927cf181e6c6b32824f5/airr-1.2.0.tar.gz","yanked":false,"yanked_reason":null}],"1.2.1":[{"comment_text":"","digests":{"blake2b_256":"7cf8af74bb65a915a717387a7f0c3311dd10cdaa00f9b8e6c13fb4cdb480d7eb","md5":"66f13422ea75f9b40b86acf6fd521fdd","sha256":"b6c523cee7822b327bfcc637e6261bda27a0d4148bc46a73fef745199ee5fcb9"},"downloads":-1,"filename":"airr-1.2.1.tar.gz","has_sig":false,"md5_digest":"66f13422ea75f9b40b86acf6fd521fdd","packagetype":"sdist","python_version":"source","requires_python":null,"size":35287,"upload_time":"2018-10-05T16:41:54","upload_time_iso_8601":"2018-10-05T16:41:54.095699Z","url":"https://files.pythonhosted.org/packages/7c/f8/af74bb65a915a717387a7f0c3311dd10cdaa00f9b8e6c13fb4cdb480d7eb/airr-1.2.1.tar.gz","yanked":false,"yanked_reason":null}],"1.3.0":[{"comment_text":"","digests":{"blake2b_256":"77b239637bc8226d02d464ba6e15fc428c84d3bedf209541c222b27324db2796","md5":"66e6e0ec5797954ebd5a803dca64dd86","sha256":"fe85883a4e8b81871d377edd7ac09aa95b576b9e98996938fda4dab119cbad10"},"downloads":-1,"filename":"airr-1.3.0.tar.gz","has_sig":false,"md5_digest":"66e6e0ec5797954ebd5a803dca64dd86","packagetype":"sdist","python_version":"source","requires_python":null,"size":48240,"upload_time":"2020-06-01T20:54:13","upload_time_iso_8601":"2020-06-01T20:54:13.147240Z","url":"https://files.pythonhosted.org/packages/77/b2/39637bc8226d02d464ba6e15fc428c84d3bedf209541c222b27324db2796/airr-1.3.0.tar.gz","yanked":false,"yanked_reason":null}],"1.3.1":[{"comment_text":"","digests":{"blake2b_256":"0435bc482a3985a030492ecb38311e9e7540a7bd5d733a00554f7d0612141e1d","md5":"9570047e30814b9e6b64ba93d0be5c61","sha256":"f71912de693033516798dbbabef5a855987ce417dbac9054894e88648bacd15a"},"downloads":-1,"filename":"airr-1.3.1.tar.gz","has_sig":false,"md5_digest":"9570047e30814b9e6b64ba93d0be5c61","packagetype":"sdist","python_version":"source","requires_python":null,"size":49011,"upload_time":"2020-10-13T21:51:45","upload_time_iso_8601":"2020-10-13T21:51:45.865044Z","url":"https://files.pythonhosted.org/packages/04/35/bc482a3985a030492ecb38311e9e7540a7bd5d733a00554f7d0612141e1d/airr-1.3.1.tar.gz","yanked":false,"yanked_reason":null}],"1.4.1":[{"comment_text":"","digests":{"blake2b_256":"2a20be5d4c035d6aee0a6f628bcc7bb8fddb1b631a61288bcdf3d341b0a7aca4","md5":"d27e2497829eee93aacef8f0c4404f3d","sha256":"52276f977b31694751f7cc2d56d50843ac7b363883e7daac60130a5abe839ed9"},"downloads":-1,"filename":"airr-1.4.1.tar.gz","has_sig":false,"md5_digest":"d27e2497829eee93aacef8f0c4404f3d","packagetype":"sdist","python_version":"source","requires_python":null,"size":63970,"upload_time":"2022-08-28T17:20:47","upload_time_iso_8601":"2022-08-28T17:20:47.726352Z","url":"https://files.pythonhosted.org/packages/2a/20/be5d4c035d6aee0a6f628bcc7bb8fddb1b631a61288bcdf3d341b0a7aca4/airr-1.4.1.tar.gz","yanked":false,"yanked_reason":null}],"1.5.0":[{"comment_text":"","digests":{"blake2b_256":"3f6172af365d0855bce94245c4cf0676893fcce3acf05e2b23608f1dfaa0c8cb","md5":"071b12cfbbc5984ddcc0a1b25d4e7b6a","sha256":"febc0a881bf46b1a9c29ac6a7089dd733ff9120d114585e75dede26403f68d42"},"downloads":-1,"filename":"airr-1.5.0.tar.gz","has_sig":false,"md5_digest":"071b12cfbbc5984ddcc0a1b25d4e7b6a","packagetype":"sdist","python_version":"source","requires_python":null,"size":64378,"upload_time":"2023-08-31T19:11:16","upload_time_iso_8601":"2023-08-31T19:11:16.961369Z","url":"https://files.pythonhosted.org/packages/3f/61/72af365d0855bce94245c4cf0676893fcce3acf05e2b23608f1dfaa0c8cb/airr-1.5.0.tar.gz","yanked":false,"yanked_reason":null}],"1.5.1":[{"comment_text":"","digests":{"blake2b_256":"b1b45260bdf2028704f86435e4d7e5aacb47bb9a5c8f53a19cd4a0206f1ee356","md5":"02ab845c361da9c1304447e76ad6cc55","sha256":"71f89eaf0c2fb4fe038a6e8aad9c58e1712cb06b92021e73d97d08c59b7b7149"},"downloads":-1,"filename":"airr-1.5.1.tar.gz","has_sig":false,"md5_digest":"02ab845c361da9c1304447e76ad6cc55","packagetype":"sdist","python_version":"source","requires_python":null,"size":82719,"upload_time":"2024-06-02T23:23:30","upload_time_iso_8601":"2024-06-02T23:23:30.243033Z","url":"https://files.pythonhosted.org/packages/b1/b4/5260bdf2028704f86435e4d7e5aacb47bb9a5c8f53a19cd4a0206f1ee356/airr-1.5.1.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"b1b45260bdf2028704f86435e4d7e5aacb47bb9a5c8f53a19cd4a0206f1ee356","md5":"02ab845c361da9c1304447e76ad6cc55","sha256":"71f89eaf0c2fb4fe038a6e8aad9c58e1712cb06b92021e73d97d08c59b7b7149"},"downloads":-1,"filename":"airr-1.5.1.tar.gz","has_sig":false,"md5_digest":"02ab845c361da9c1304447e76ad6cc55","packagetype":"sdist","python_version":"source","requires_python":null,"size":82719,"upload_time":"2024-06-02T23:23:30","upload_time_iso_8601":"2024-06-02T23:23:30.243033Z","url":"https://files.pythonhosted.org/packages/b1/b4/5260bdf2028704f86435e4d7e5aacb47bb9a5c8f53a19cd4a0206f1ee356/airr-1.5.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
