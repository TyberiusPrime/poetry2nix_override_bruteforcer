{"info":{"author":"Egor Dranischnikow","author_email":"","bugtrack_url":null,"classifiers":["Programming Language :: Python :: 3"],"description":"# cykhash\n\ncython wrapper for khash-sets/maps, efficient implementation of `isin` and `unique`\n\n## About:\n\n  * Brings functionality of khash (https://github.com/attractivechaos/klib/blob/master/khash.h) to Python and Cython and can be used seamlessly in numpy or pandas.\n\n  * Numpy's world is lacking the concept of a (hash-)set. This shortcoming is fixed and efficient (memory- and speedwise compared to pandas') `unique` and `isin` are implemented.\n\n  * Python-set/dict have big memory-footprint. For some datatypes the overhead can be reduced by using khash by factor 4-8.\n\n## Installation:\n\nThe recommended way to install the library is via `conda` package manager using the `conda-forge` channel:\n\n    conda install -c conda-forge cykhash\n\nYou can also install the library using `pip`. To install the latest release:\n\n    pip install cykhash\n\nTo install the most recent version of the module:\n\n    pip install https://github.com/realead/cykhash/zipball/master\n\nAttention: On Linux/Mac `python-dev` should be installed for that (see also https://stackoverflow.com/questions/21530577/fatal-error-python-h-no-such-file-or-directory) and MSVC on Windows.\n\n## Dependencies:\n\nTo build the library from source, Cython>=0.28 is required as well as a c-build tool chain.\n\nSee (https://github.com/realead/cykhash/blob/master/doc/README4DEVELOPER.md) for dependencies needed for development.\n\n## Quick start\n\n#### Hash set and isin\n\nCreating a hashset and using it in `isin`:\n\n    # prepare data:\n    >>> import numpy as np \n    >>> a = np.arange(42, dtype=np.int64)\n    >>> b = np.arange(84, dtype=np.int64)\n    >>> result = np.empty(b.size, dtype=np.bool_)\n\n    # actually usage\n    >>> from cykhash import Int64Set_from_buffer, isin_int64\n\n    >>> lookup = Int64Set_from_buffer(a) # create a hashset\n    >>> isin_int64(b, lookup, result)    # running time O(b.size)\n    >>> isin_int64(b, lookup, result)    # lookup is reused and not recreated\n\n\n### `unique`\n\nFinding `unique` in `O(n)` (compared to numpy's  `np.unique` - `O(n*logn)`) and smaller memory-footprint than pandas' `pd.unique`:\n\n    # prepare input\n    >>> import numpy as np\n    >>> a = np.array([1,2,3,3,2,1], dtype=np.int64)\n    \n    # actual usage:\n    >>> from cykhash import unique_int64\n    >>> unique_buffer = unique_int64(a) # unique element are exposed via buffer-protocol\n\n    # can be converted to a numpy-array without copying via\n    >>> unique_array = np.ctypeslib.as_array(unique_buffer)\n    >>> unique_array.shape\n    (3,)\n\n\n### Hash map\n\nMaps and sets handle `nan`-correctly (try it out with Python's dict/set):\n\n    >>> from cykhash import Float64toInt64Map\n    >>> my_map = Float64toInt64Map() # values are 64bit integers\n    >>> my_map[float(\"nan\")] = 1\n    >>> my_map[float(\"nan\")]\n    1\n\n\n\n## Functionality overview\n\n### Hash sets\n\n`Int64Set`, `Int32Set`, `Float64Set`, `Float32Set` ( and `PyObjectSet`) are implemented. They are more or less drop-in replacements for Python's `set`. Furthermore, given the Cython-interface, efficient extensions of functionality are easily done.\n\n\nThe biggest advantage of these sets is that they need about 4-8 times less memory than the usual Python-sets and are somewhat faster for integers or floats. \n\nAs `PyObjectSet` is somewhat slower than the usual `set` and needs about the same amount of memory, it should be used only if all `nan`s should be treated as equivalent.\n\nThe most efficient way to create such sets is to use `XXXXSet_from_buffer(...)`, e.g. `Int64Set_from_buffer`, if the data container at hand supports buffer protocol (e.g. numpy-arrays, `array.array` or `ctypes`-arrays). Or `XXXXSet_from(...)` for any iterator.\n\n\n### Hash maps\n\n`Int64toInt64Map`, `Int32toInt32Map`, `Float64toInt64Map`, `Float32toInt32Map` ( and `PyObjectMap`) are implemented. They are more or less drop-in replacements for Python's `dict` (however, not every piece of `dict`'s functionality makes sense, for example `setdefault(x, default)` without `default`-argument, because `None` cannot be inserted, also the khash-maps don't preserve the insertion order, so there is also no `reversed`). Furthermore, given the Cython-interface, efficient extensions of functionality are easily done.\n\nBiggest advantage of these sets is that they need about 4-8 times less memory than the usual Python-dictionaries and are somewhat faster for integers or floats.\n\n\nAs `PyObjectMap` is somewhat slower than the usual `dict` and needs about the same amount of memory, it should be used only if all `nan`s should be treated as equivalent.\n\n### isin\n\n  * implemented are `isin_int64`, `isin_int32`, `isin_float64`, `isin_float32`\n  * using hash set instead of arrays in `isin` function has the advantage, that the look-up data structure doesn't have to be reconstructed for every call, thus reducing the running time from `O(n+m)`to `O(n)`, where `n` is the number of queries and `m`-number of elements in the look up array.\n  * Thus cykash's `isin` can be order of magnitude faster than the numpy's or pandas' versions.\n\n#### all, none, any, and count_if\n\n  * siblings functions of `isin_XXX` are:\n      * `all_XXX`/`all_XXX_from_iterator` which return `True` if all elements of the query array can be found in the set.\n      * `any_XXX`/`any_XXX_from_iterator` which return `True` if at least one element of the query array can be found in the set.\n      * `none_XXX`/`none_XXX_from_iterator` which return `True` if none of  elements from the query array can be found in the set.\n      * `count_if_XXX`/`count_if_XXX_from_iterator` which return the number of elements from the query array can be found in the set.\n  * `all_XXX`, `any_XXX`, `none_XXX` and `count_if_XXX` are faster than using `isin_XXX` and applying numpy's versions of these function on the resulting array.\n  * `from_iterator` version works with any iterable, but the version for buffers are more efficient.\n\n### unique\n\n  * implemented are `unique_int64`, `unique_int32`, `unique_float64`, `unique_float32`\n  * returns an object which implements the buffer protocol, so `np.ctypeslib.as_array` (recommended) or `np.frombuffer` (less safe, as memory can get reinterpreted) can be used to create numpy arrays.\n  * differently as pandas, the returned uniques aren't in the order of the appearance. If order of appearence is important use `unique_stable_xxx`-versions, which needs somewhat more memory.\n  * the signature is `unique_xxx(buffer, size_hint=0.0)` the initial memory-consumption of the hash-set will be `len(buffer)*size_hint` unless `size_hint<=0.0`, in this case it will be ensured, that no rehashing is needed even if all elements are unique in the buffer.\n\nAs pandas uses maps instead of sets internally for `unique`, it needs about 4 times more peak memory and is 1.6-3 times slower.\n\n\n### Floating-point numbers as keys\n\nThere is a problem with floating-point sets or maps, i.e. `Float64Set`, `Float32Set`, `Float64toInt64Map` and `Float32toInt32Map`: The standard definition of \"equal\" and hash-function based on the bit representation don't define a meaningful or desired behavior for the hash set:\n\n   * `NAN != NAN` and thus it is not equivalence relation\n   * `-0.0 == 0.0` but `hash(-0.0)!=hash(0.0)`, but `x==y => hash(x)==hash(y)` is neccessary for set to work properly.\n\nThis problem is resolved through following special case handling:\n\n   * `hash(-0.0):=hash(0.0)`\n   * `hash(x):=hash(NAN)` for any not a number `x`.\n   * `x is equal y <=> x==y || (x!=x && y!=y)`\n\nA consequence of the above rule, that the equivalence classes of `{0.0, -0.0}` and `e{x | x is not a number}` have more than one element. In the set these classes are represented by the first seen element from the class.\n\nThe above holds also for `PyObjectSet` (this behavior is not the same as fro Python-`set` which shows a different behavior for nans).\n\n### Examples:\n\n#### Hash sets\n\nPython: Creates a set from a numpy-array and looks up whether an element is in the resulting set:\n\n    >>> import numpy as np\n    >>> from cykhash import Int64Set_from_buffer\n    >>> a =  np.arange(42, dtype=np.int64)\n    >>> my_set = Int64Set_from_buffer(a) # no reallocation will be needed\n    >>> 41 in my_set \n    True\n    >>> 42 not in my_set\n    True\n\nPython: Create a set from an iterable and looks up whether an element is in the resulting set:\n\n    >>> from cykhash import Int64Set_from\n    >>> my_set = Int64Set_from(range(42)) # no reallocation will be needed\n    >>> assert 41 in my_set and 42 not in my_set\n\nCython: Create a set and put some values into it:\n\n    from cykhash.khashsets cimport Int64Set\n    my_set = Int64Set(number_of_elements_hint=12)  # reserve place for at least 12 integers\n    cdef Py_ssize_t i\n    for i in range(12):\n       my_set.add(i)\n    assert 11 in my_set and 12 not in my_set\n\n#### Hash maps\n\nPython: Creating `int64->float64` map using `Int64toFloat64Map_from_buffers`:\n\n    >>> import numpy as np\n    >>> from cykhash import Int64toFloat64Map_from_buffers\n    >>> keys = np.array([1, 2, 3, 4], dtype=np.int64)\n    >>> vals = np.array([5, 6, 7, 8], dtype=np.float64)\n    >>> my_map = Int64toFloat64Map_from_buffers(keys, vals) # there will be no reallocation\n    >>> assert my_map[4] == 8.0\n\nPython: Creating `int64->int64` map from scratch:\n\n    >>> import numpy as np\n    >>> from cykhash import Int64toInt64Map\n\n    # my_map will not need reallocation for at least 12 elements\n    >>> my_map = Int64toInt64Map(number_of_elements_hint=12)\n    >>> for i in range(12):  my_map[i] = i+1\n    >>> assert my_map[5] == 6\n\n\n#### isin\n\nPython: Creating look-up data structure from a numpy-array, performing `isin`-query\n\n    >>> import numpy as np\n    >>> from cykhash import Int64Set_from_buffer, isin_int64\n    >>> a = np.arange(42, dtype=np.int64)\n    >>> lookup = Int64Set_from_buffer(a)\n\n    >>> b = np.arange(84, dtype=np.int64)\n    >>> result = np.empty(b.size, dtype=np.bool_)\n\n    >>> isin_int64(b, lookup, result)    # running time O(b.size)\n    >>> assert np.sum(result.astype(np.int_)) == 42\n\n\n#### unique\n\nPython: using `unique_int64`:\n\n    >>> import numpy as np\n    >>> from cykhash import unique_int64\n    >>> a = np.array([1,2,3,3,2,1], dtype=np.int64)\n    >>> u = np.ctypeslib.as_array(unique_int64(a)) # there will be no reallocation\n    >>> assert set(u) == {1,2,3}\n\nPython: using `unique_stable_int64`: \n\n    >>> import numpy as np\n    >>> from cykhash import unique_stable_int64\n    >>> a = np.array([3,2,1,1,2,3], dtype=np.int64)\n    >>> u = np.ctypeslib.as_array(unique_stable_int64(a)) # there will be no reallocation\n    >>> assert list(u) == [3,2,1] \n\n\n\n## API\n\nSee (https://github.com/realead/cykhash/blob/master/doc/README_API.md) for a more detailed API description.\n\n## Performance\n\nSee (https://github.com/realead/cykhash/blob/master/doc/README_PERFORMANCE.md) for results of performance tests.\n\n## Trivia\n\n* This project was inspired by the following stackoverflow question: https://stackoverflow.com/questions/50779617/pandas-pd-series-isin-performance-with-set-versus-array.\n\n* pandas also uses `khash` (and thus was a source of inspiration), but wraps only maps and doesn't wrap sets. Thus, pandas' `unique` needs more memory as it should. Those maps are also never exposed, so there is no way to reuse the look-up structure for multiple calls to `isin`.\n\n* `khash` is a good choice, but there are other alternatives, e.g. https://github.com/sparsehash/sparsehash. See also https://stackoverflow.com/questions/48129713/fastest-way-to-find-all-unique-elements-in-an-array-with-cython/48142655#48142655 for a comparison for different `unique` implementations.\n\n* A similar approach for sets/maps in pure Cython: https://github.com/realead/tighthash, which is quite slower than khash.\n\n* There is no dependency on `numpy`: this library uses buffer protocol, thus it works for `array.array`, `numpy.ndarray`, `ctypes`-arrays and anything else. However, some interfaces are somewhat cumbersome (which type should be created as answer?) and for convenient usage it might be a good idea to wrap the functionality so objects of right types are created.\n\n## Compatibility between cykhash-versions:\n\nThere are different levels of compatibility: \n\n * for code using only pure python interface\n * for code using cython/cdef-interface and built against a particular cykash version\n\nTher rules are as follows:\n \n * there is no warranty for major versions mismatch: i.e. code written with cykhash `1.x.y` might not run with cykhash `2.z.w` and vice versa.\n * if only pure python interface is used, code for the same major version will ran for version with higher minor version, i.e. code for cykhash `2.0.x` will run with cykhash `2.1.y` (but not the other way around: that means new functions could be added to pure python interface)\n * if cython's `cdef` interface is used, i.e. a cython-extension was build using pxi-files from cykhash, then versions are compartible only if the the minor versions are the same, e.g. `2.0.x` could be replaced by `2.0.y` in the installation, but when replacing with `2.1.z` the dependent cython-extension must be rebuilt.\n\n## History:\n### Release 2.0.1 (05.02.2022):\n\n  * Tests work for Python 3.11\n  * Tests work for numpy 1.24\n  * Drops support for Python 3.6 and Python 3.7\n\n#### Release 2.0.0 (09.11.2021):\n\n  * Implementation of `any`, `all`, `none` and `count_if`\n  * Hash-sets are now (almost) drop-in replacements of Python's sets\n  * Breaking change: iterator from maps doesn't no longer returns items but only keys. However there are following new methods `keys()`, `values()` and `items()`which return so called mapvies, which correspond more or less to dictviews (but for mapsview doesn't hold that \"Dictionary order is guaranteed to be insertion order.\").\n  * Hash-Maps are now (almost) drop-in replacements of Python's dicts. Differences: insertion order isn't preserved, thus there is also no `reversed()`-method, `setdefault(key, default)` isn't possible without `default` because `None` cannot be inserted in the map\n  * Better hash-functions for float64, float32, int64 and int32 (gh-issue #4).\n  * Breaking change: different names/signatures for maps\n  * supports tracemalloc for Py3.6+\n  * supports Python 3.10\n\n#### Release 1.0.2 (30.05.2020):\n\n  * can be installed via conda-forge to all operating systems\n  * can be installed via pip in a clean environment (Cython>=0.28 is now fetched automatically)\n\n#### Release 1.0.1 (27.05.2020):\n\n  * released on PyPi\n\n#### Older:\n\n  * 0.4.0: uniques_stable, preparing for release\n  * 0.3.0: PyObjectSet, Maps for Int64/32 and also Float64/32, unique-versions\n  * 0.2.0: Int32Set, Float64Set, Float32Set\n  * 0.1.0: Int64Set\n\n\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/realead/cykhash","keywords":"","license":"MIT","maintainer":"","maintainer_email":"","name":"cykhash","package_url":"https://pypi.org/project/cykhash/","platform":null,"project_url":"https://pypi.org/project/cykhash/","project_urls":{"Homepage":"https://github.com/realead/cykhash"},"provides_extra":null,"release_url":"https://pypi.org/project/cykhash/2.0.1/","requires_dist":null,"requires_python":"","summary":"cython wrapper for khash-sets/maps, efficient implementation of isin and unique","version":"2.0.1","yanked":false,"yanked_reason":null},"last_serial":16701549,"releases":{"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"4b39a25f9211cf7d7551245784d5d798d39aa013431d1bccec7040b1fc2c1dd0","md5":"4497b35d45cd4e6cca0eb053733a0297","sha256":"89b4a3c6e24bded5cb9f28b72b5c5d0d221ba04b9afa8114e2fc2d9abec7e6cc"},"downloads":-1,"filename":"cykhash-1.0.1.tar.gz","has_sig":false,"md5_digest":"4497b35d45cd4e6cca0eb053733a0297","packagetype":"sdist","python_version":"source","requires_python":null,"size":25948,"upload_time":"2020-05-27T21:36:17","upload_time_iso_8601":"2020-05-27T21:36:17.773707Z","url":"https://files.pythonhosted.org/packages/4b/39/a25f9211cf7d7551245784d5d798d39aa013431d1bccec7040b1fc2c1dd0/cykhash-1.0.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.2":[{"comment_text":"","digests":{"blake2b_256":"b92fa211abb2925297e4f3038e86fea15724b6304c03c954e29137efa4152cf0","md5":"9c0c95e6443bc69b3339034ca08eb020","sha256":"2ed17bffaccce3564407f41fce96ed79cc00a72427b3957674ea89148c1844e1"},"downloads":-1,"filename":"cykhash-1.0.2.tar.gz","has_sig":false,"md5_digest":"9c0c95e6443bc69b3339034ca08eb020","packagetype":"sdist","python_version":"source","requires_python":null,"size":26945,"upload_time":"2020-05-30T12:00:00","upload_time_iso_8601":"2020-05-30T12:00:00.705226Z","url":"https://files.pythonhosted.org/packages/b9/2f/a211abb2925297e4f3038e86fea15724b6304c03c954e29137efa4152cf0/cykhash-1.0.2.tar.gz","yanked":false,"yanked_reason":null}],"2.0.0":[{"comment_text":"","digests":{"blake2b_256":"95806a62475ea880b08208612f086fa5d1e661a3412cfed5efaa8af3935059b0","md5":"aaef5823fae28be56aab0f5fa76af012","sha256":"ab2e7b3a701291f71df626d8fe597a50b097c1b33e25b4c37681415639d270fd"},"downloads":-1,"filename":"cykhash-2.0.0.tar.gz","has_sig":false,"md5_digest":"aaef5823fae28be56aab0f5fa76af012","packagetype":"sdist","python_version":"source","requires_python":null,"size":43335,"upload_time":"2021-11-09T20:29:29","upload_time_iso_8601":"2021-11-09T20:29:29.101083Z","url":"https://files.pythonhosted.org/packages/95/80/6a62475ea880b08208612f086fa5d1e661a3412cfed5efaa8af3935059b0/cykhash-2.0.0.tar.gz","yanked":false,"yanked_reason":null}],"2.0.1":[{"comment_text":"","digests":{"blake2b_256":"a524bc570e0f3bb769ebdc178dce52b5be3575ced0c8135a32f0299dff2c138e","md5":"6ad6a480531dc3cf1083cbc45b8ddd35","sha256":"b4794bc9f549114d8cf1d856d9f64e08ff5f246bf043cf369fdb414e9ceb97f7"},"downloads":-1,"filename":"cykhash-2.0.1.tar.gz","has_sig":false,"md5_digest":"6ad6a480531dc3cf1083cbc45b8ddd35","packagetype":"sdist","python_version":"source","requires_python":null,"size":44895,"upload_time":"2023-02-05T15:31:14","upload_time_iso_8601":"2023-02-05T15:31:14.722610Z","url":"https://files.pythonhosted.org/packages/a5/24/bc570e0f3bb769ebdc178dce52b5be3575ced0c8135a32f0299dff2c138e/cykhash-2.0.1.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"a524bc570e0f3bb769ebdc178dce52b5be3575ced0c8135a32f0299dff2c138e","md5":"6ad6a480531dc3cf1083cbc45b8ddd35","sha256":"b4794bc9f549114d8cf1d856d9f64e08ff5f246bf043cf369fdb414e9ceb97f7"},"downloads":-1,"filename":"cykhash-2.0.1.tar.gz","has_sig":false,"md5_digest":"6ad6a480531dc3cf1083cbc45b8ddd35","packagetype":"sdist","python_version":"source","requires_python":null,"size":44895,"upload_time":"2023-02-05T15:31:14","upload_time_iso_8601":"2023-02-05T15:31:14.722610Z","url":"https://files.pythonhosted.org/packages/a5/24/bc570e0f3bb769ebdc178dce52b5be3575ced0c8135a32f0299dff2c138e/cykhash-2.0.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
