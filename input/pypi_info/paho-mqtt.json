{"info":{"author":null,"author_email":"Roger Light <roger@atchoo.org>","bugtrack_url":null,"classifiers":["Development Status :: 4 - Beta","Intended Audience :: Developers","License :: OSI Approved","Natural Language :: English","Operating System :: MacOS :: MacOS X","Operating System :: Microsoft :: Windows","Operating System :: POSIX","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Communications","Topic :: Internet"],"description":"Eclipse Pahoâ„¢ MQTT Python Client\n================================\n\nThe `full documentation is available here <documentation_>`_.\n\n**Warning breaking change** - Release 2.0 contains a breaking change; see the `release notes <https://github.com/eclipse/paho.mqtt.python/releases/tag/v2.0.0>`_ and `migration details <https://eclipse.dev/paho/files/paho.mqtt.python/html/migrations.html>`_.\n\nThis document describes the source code for the `Eclipse Paho <http://eclipse.org/paho/>`_ MQTT Python client library, which implements versions 5.0, 3.1.1, and 3.1 of the MQTT protocol.\n\nThis code provides a client class which enables applications to connect to an `MQTT <http://mqtt.org/>`_ broker to publish messages, and to subscribe to topics and receive published messages. It also provides some helper functions to make publishing one off messages to an MQTT server very straightforward.\n\nIt supports Python 3.7+.\n\nThe MQTT protocol is a machine-to-machine (M2M)/\"Internet of Things\" connectivity protocol. Designed as an extremely lightweight publish/subscribe messaging transport, it is useful for connections with remote locations where a small code footprint is required and/or network bandwidth is at a premium.\n\nPaho is an `Eclipse Foundation <https://www.eclipse.org/org/foundation/>`_ project.\n\nContents\n--------\n\n* Installation_\n* `Known limitations`_\n* `Usage and API`_\n    * `Getting Started`_\n    * `Client`_\n        * `Network loop`_\n        * `Callbacks`_\n        * `Logger`_\n        * `External event loop support`_\n        * `Global helper functions`_\n    * `Publish`_\n        * `Single`_\n        * `Multiple`_\n    * `Subscribe`_\n        * `Simple`_\n        * `Using Callback`_\n* `Reporting bugs`_\n* `More information`_\n\n\nInstallation\n------------\n\nThe latest stable version is available in the Python Package Index (PyPi) and can be installed using\n\n::\n\n    pip install paho-mqtt\n\nOr with ``virtualenv``:\n\n::\n\n    virtualenv paho-mqtt\n    source paho-mqtt/bin/activate\n    pip install paho-mqtt\n\nTo obtain the full code, including examples and tests, you can clone the git repository:\n\n::\n\n    git clone https://github.com/eclipse/paho.mqtt.python\n\n\nOnce you have the code, it can be installed from your repository as well:\n\n::\n\n    cd paho.mqtt.python\n    pip install -e .\n\nTo perform all tests (including MQTT v5 tests), you also need to clone paho.mqtt.testing in paho.mqtt.python folder::\n\n    git clone https://github.com/eclipse/paho.mqtt.testing.git\n    cd paho.mqtt.testing\n    git checkout a4dc694010217b291ee78ee13a6d1db812f9babd\n\nKnown limitations\n-----------------\n\nThe following are the known unimplemented MQTT features.\n\nWhen ``clean_session`` is False, the session is only stored in memory and not persisted. This means that\nwhen the client is restarted (not just reconnected, the object is recreated usually because the\nprogram was restarted) the session is lost. This results in a possible message loss.\n\nThe following part of the client session is lost:\n\n* QoS 2 messages which have been received from the server, but have not been completely acknowledged.\n\n  Since the client will blindly acknowledge any PUBCOMP (last message of a QoS 2 transaction), it\n  won't hang but will lose this QoS 2 message.\n\n* QoS 1 and QoS 2 messages which have been sent to the server, but have not been completely acknowledged.\n\n  This means that messages passed to ``publish()`` may be lost. This could be mitigated by taking care\n  that all messages passed to ``publish()`` have a corresponding ``on_publish()`` call or use `wait_for_publish`.\n\n  It also means that the broker may have the QoS2 message in the session. Since the client starts\n  with an empty session it don't know it and will reuse the mid. This is not yet fixed.\n\nAlso, when ``clean_session`` is True, this library will republish QoS > 0 message across network\nreconnection. This means that QoS > 0 message won't be lost. But the standard says that\nwe should discard any message for which the publish packet was sent. Our choice means that\nwe are not compliant with the standard and it's possible for QoS 2 to be received twice.\n\nYou should set ``clean_session = False`` if you need the QoS 2 guarantee of only one delivery.\n\nUsage and API\n-------------\n\nDetailed API documentation `is available online <documentation_>`_ or could be built from ``docs/`` and samples are available in the `examples`_ directory.\n\nThe package provides two modules, a full `Client` and few `helpers` for simple publishing or subscribing.\n\nGetting Started\n***************\n\nHere is a very simple example that subscribes to the broker $SYS topic tree and prints out the resulting messages:\n\n.. code:: python\n\n    import paho.mqtt.client as mqtt\n\n    # The callback for when the client receives a CONNACK response from the server.\n    def on_connect(client, userdata, flags, reason_code, properties):\n        print(f\"Connected with result code {reason_code}\")\n        # Subscribing in on_connect() means that if we lose the connection and\n        # reconnect then subscriptions will be renewed.\n        client.subscribe(\"$SYS/#\")\n\n    # The callback for when a PUBLISH message is received from the server.\n    def on_message(client, userdata, msg):\n        print(msg.topic+\" \"+str(msg.payload))\n\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\n    mqttc.on_connect = on_connect\n    mqttc.on_message = on_message\n\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 1883, 60)\n\n    # Blocking call that processes network traffic, dispatches callbacks and\n    # handles reconnecting.\n    # Other loop*() functions are available that give a threaded interface and a\n    # manual interface.\n    mqttc.loop_forever()\n\nClient\n******\n\nYou can use the client class as an instance, within a class or by subclassing. The general usage flow is as follows:\n\n* Create a client instance\n* Connect to a broker using one of the ``connect*()`` functions\n* Call one of the ``loop*()`` functions to maintain network traffic flow with the broker\n* Use ``subscribe()`` to subscribe to a topic and receive messages\n* Use ``publish()`` to publish messages to the broker\n* Use ``disconnect()`` to disconnect from the broker\n\nCallbacks will be called to allow the application to process events as necessary. These callbacks are described below.\n\nNetwork loop\n````````````\n\nThese functions are the driving force behind the client. If they are not\ncalled, incoming network data will not be processed and outgoing network data\nwill not be sent. There are four options for managing the\nnetwork loop. Three are described here, the fourth in \"External event loop\nsupport\" below. Do not mix the different loop functions.\n\nloop_start() / loop_stop()\n''''''''''''''''''''''''''\n\n.. code:: python\n\n    mqttc.loop_start()\n\n    while True:\n        temperature = sensor.blocking_read()\n        mqttc.publish(\"paho/temperature\", temperature)\n\n    mqttc.loop_stop()\n\nThese functions implement a threaded interface to the network loop. Calling\n`loop_start()` once, before or after ``connect*()``, runs a thread in the\nbackground to call `loop()` automatically. This frees up the main thread for\nother work that may be blocking. This call also handles reconnecting to the\nbroker. Call `loop_stop()` to stop the background thread.\nThe loop is also stopped if you call `disconnect()`.\n\nloop_forever()\n''''''''''''''\n\n.. code:: python\n\n    mqttc.loop_forever(retry_first_connection=False)\n\nThis is a blocking form of the network loop and will not return until the\nclient calls `disconnect()`. It automatically handles reconnecting.\n\nExcept for the first connection attempt when using `connect_async`, use\n``retry_first_connection=True`` to make it retry the first connection.\n\n*Warning*: This might lead to situations where the client keeps connecting to an\nnon existing host without failing.\n\nloop()\n''''''\n\n.. code:: python\n\n    run = True\n    while run:\n        rc = mqttc.loop(timeout=1.0)\n        if rc != 0:\n            # need to handle error, possible reconnecting or stopping the application\n\nCall regularly to process network events. This call waits in ``select()`` until\nthe network socket is available for reading or writing, if appropriate, then\nhandles the incoming/outgoing data. This function blocks for up to ``timeout``\nseconds. ``timeout`` must not exceed the ``keepalive`` value for the client or\nyour client will be regularly disconnected by the broker.\n\nUsing this kind of loop, require you to handle reconnection strategie.\n\n\nCallbacks\n`````````\n\nThe interface to interact with paho-mqtt include various callback that are called by\nthe library when some events occur.\n\nThe callbacks are functions defined in your code, to implement the require action on those events. This could\nbe simply printing received message or much more complex behaviour.\n\nCallbacks API is versioned, and the selected version is the `CallbackAPIVersion` you provided to `Client`\nconstructor. Currently two version are supported:\n\n* ``CallbackAPIVersion.VERSION1``: it's the historical version used in paho-mqtt before version 2.0.\n  It's the API used before the introduction of `CallbackAPIVersion`.\n  This version is deprecated and will be removed in paho-mqtt version 3.0.\n* ``CallbackAPIVersion.VERSION2``: This version is more consistent between protocol MQTT 3.x and MQTT 5.x. It's also\n  much more usable with MQTT 5.x since reason code and properties are always provided when available.\n  It's recommended for all user to upgrade to this version. It's highly recommended for MQTT 5.x user.\n\nThe following callbacks exists:\n\n* `on_connect()`: called when the CONNACK from the broker is received. The call could be for a refused connection,\n  check the reason_code to see if the connection is successful or rejected.\n* `on_connect_fail()`: called by `loop_forever()` and `loop_start()` when the TCP connection failed to establish.\n  This callback is not called when using `connect()` or `reconnect()` directly. It's only called following\n  an automatic (re)connection made by `loop_start()` and `loop_forever()`\n* `on_disconnect()`: called when the connection is closed.\n* `on_message()`: called when a MQTT message is received from the broker.\n* `on_publish()`: called when an MQTT message was sent to the broker. Depending on QoS level the callback is called\n  at different moment:\n\n  * For QoS == 0, it's called as soon as the message is sent over the network. This could be before the corresponding ``publish()`` return.\n  * For QoS == 1, it's called when the corresponding PUBACK is received from the broker\n  * For QoS == 2, it's called when the corresponding PUBCOMP is received from the broker\n* `on_subscribe()`: called when the SUBACK is received from the broker\n* `on_unsubscribe()`: called when the UNSUBACK is received from the broker\n* `on_log()`: called when the library log a message\n* `on_socket_open`, `on_socket_close`, `on_socket_register_write`, `on_socket_unregister_write`: callbacks used for external loop support. See below for details.\n\nFor the signature of each callback, see the `online documentation <documentation_>`_.\n\nSubscriber example\n''''''''''''''''''\n\n.. code:: python\n\n    import paho.mqtt.client as mqtt\n\n    def on_subscribe(client, userdata, mid, reason_code_list, properties):\n        # Since we subscribed only for a single channel, reason_code_list contains\n        # a single entry\n        if reason_code_list[0].is_failure:\n            print(f\"Broker rejected you subscription: {reason_code_list[0]}\")\n        else:\n            print(f\"Broker granted the following QoS: {reason_code_list[0].value}\")\n\n    def on_unsubscribe(client, userdata, mid, reason_code_list, properties):\n        # Be careful, the reason_code_list is only present in MQTTv5.\n        # In MQTTv3 it will always be empty\n        if len(reason_code_list) == 0 or not reason_code_list[0].is_failure:\n            print(\"unsubscribe succeeded (if SUBACK is received in MQTTv3 it success)\")\n        else:\n            print(f\"Broker replied with failure: {reason_code_list[0]}\")\n        client.disconnect()\n\n    def on_message(client, userdata, message):\n        # userdata is the structure we choose to provide, here it's a list()\n        userdata.append(message.payload)\n        # We only want to process 10 messages\n        if len(userdata) >= 10:\n            client.unsubscribe(\"$SYS/#\")\n\n    def on_connect(client, userdata, flags, reason_code, properties):\n        if reason_code.is_failure:\n            print(f\"Failed to connect: {reason_code}. loop_forever() will retry connection\")\n        else:\n            # we should always subscribe from on_connect callback to be sure\n            # our subscribed is persisted across reconnections.\n            client.subscribe(\"$SYS/#\")\n\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\n    mqttc.on_connect = on_connect\n    mqttc.on_message = on_message\n    mqttc.on_subscribe = on_subscribe\n    mqttc.on_unsubscribe = on_unsubscribe\n    \n    mqttc.user_data_set([])\n    mqttc.connect(\"mqtt.eclipseprojects.io\")\n    mqttc.loop_forever()\n    print(f\"Received the following message: {mqttc.user_data_get()}\")\n\npublisher example\n'''''''''''''''''\n\n.. code:: python\n\n    import time\n    import paho.mqtt.client as mqtt\n\n    def on_publish(client, userdata, mid, reason_code, properties):\n        # reason_code and properties will only be present in MQTTv5. It's always unset in MQTTv3\n        try:\n            userdata.remove(mid)\n        except KeyError:\n            print(\"on_publish() is called with a mid not present in unacked_publish\")\n            print(\"This is due to an unavoidable race-condition:\")\n            print(\"* publish() return the mid of the message sent.\")\n            print(\"* mid from publish() is added to unacked_publish by the main thread\")\n            print(\"* on_publish() is called by the loop_start thread\")\n            print(\"While unlikely (because on_publish() will be called after a network round-trip),\")\n            print(\" this is a race-condition that COULD happen\")\n            print(\"\")\n            print(\"The best solution to avoid race-condition is using the msg_info from publish()\")\n            print(\"We could also try using a list of acknowledged mid rather than removing from pending list,\")\n            print(\"but remember that mid could be re-used !\")\n\n    unacked_publish = set()\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\n    mqttc.on_publish = on_publish\n    \n    mqttc.user_data_set(unacked_publish)\n    mqttc.connect(\"mqtt.eclipseprojects.io\")\n    mqttc.loop_start()\n\n    # Our application produce some messages\n    msg_info = mqttc.publish(\"paho/test/topic\", \"my message\", qos=1)\n    unacked_publish.add(msg_info.mid)\n\n    msg_info2 = mqttc.publish(\"paho/test/topic\", \"my message2\", qos=1)\n    unacked_publish.add(msg_info2.mid)\n    \n    # Wait for all message to be published\n    while len(unacked_publish):\n        time.sleep(0.1)\n\n    # Due to race-condition described above, the following way to wait for all publish is safer\n    msg_info.wait_for_publish()\n    msg_info2.wait_for_publish()\n\n    mqttc.disconnect()\n    mqttc.loop_stop()\n\n\nLogger\n``````\n\nThe Client emit some log message that could be useful during troubleshooting. The easiest way to\nenable logs is the call `enable_logger()`. It's possible to provide a custom logger or let the\ndefault logger being used.\n\nExample:\n\n.. code:: python\n\n    import logging\n    import paho.mqtt.client as mqtt\n\n    logging.basicConfig(level=logging.DEBUG)\n\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\n    mqttc.enable_logger()\n\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 1883, 60)\n    mqttc.loop_start()\n\n    # Do additional action needed, publish, subscribe, ...\n    [...]\n\nIt's also possible to define a on_log callback that will receive a copy of all log messages. Example:\n\n.. code:: python\n\n    import paho.mqtt.client as mqtt\n\n    def on_log(client, userdata, paho_log_level, messages):\n        if paho_log_level == mqtt.LogLevel.MQTT_LOG_ERR:\n            print(message)\n\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\n    mqttc.on_log = on_log\n\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 1883, 60)\n    mqttc.loop_start()\n\n    # Do additional action needed, publish, subscribe, ...\n    [...]\n\n\nThe correspondence with Paho logging levels and standard ones is the following:\n\n====================  ===============\nPaho                  logging\n====================  ===============\n``MQTT_LOG_ERR``      ``logging.ERROR``\n``MQTT_LOG_WARNING``  ``logging.WARNING``\n``MQTT_LOG_NOTICE``   ``logging.INFO`` *(no direct equivalent)*\n``MQTT_LOG_INFO``     ``logging.INFO``\n``MQTT_LOG_DEBUG``    ``logging.DEBUG``\n====================  ===============\n\n\nExternal event loop support\n```````````````````````````\n\nTo support other network loop like asyncio (see examples_), the library expose some\nmethod and callback to support those use-case.\n\nThe following loop method exists:\n\n* `loop_read`: should be called when the socket is ready for reading.\n* `loop_write`: should be called when the socket is ready for writing AND the library want to write data.\n* `loop_misc`: should be called every few seconds to handle message retrying and pings.\n\nIn pseudo code, it give the following:\n\n.. code:: python\n\n    while run:\n        if need_read:\n            mqttc.loop_read()\n        if need_write:\n            mqttc.loop_write()\n        mqttc.loop_misc()\n\n        if not need_read and not need_write:\n            # But don't wait more than few seconds, loop_misc() need to be called regularly\n            wait_for_change_in_need_read_or_write()\n        updated_need_read_and_write()\n\nThe tricky part is implementing the update of need_read / need_write and wait for condition change. To support\nthis, the following method exists:\n\n* `socket()`: which return the socket object when the TCP connection is open.\n  This call is particularly useful for select_ based loops. See ``examples/loop_select.py``.\n* `want_write()`: return true if there is data  waiting to be written. This is close to the\n  ``need_writew`` of above pseudo-code, but you should also check whether the socket is ready for writing.\n* callbacks ``on_socket_*``:\n\n    * `on_socket_open`: called when the socket is opened.\n    * `on_socket_close`: called when the socket is about to be closed.\n    * `on_socket_register_write`: called when there is data the client want to write on the socket\n    * `on_socket_unregister_write`: called when there is no more data to write on the socket.\n\n  Callbacks are particularly useful for event loops where you register or unregister a socket\n  for reading+writing. See ``examples/loop_asyncio.py`` for an example.\n\n.. _select: https://docs.python.org/3/library/select.html#select.select\n\nThe callbacks are always called in this order:\n\n- `on_socket_open`\n- Zero or more times:\n\n  - `on_socket_register_write`\n  - `on_socket_unregister_write`\n\n- `on_socket_close`\n\nGlobal helper functions\n```````````````````````\n\nThe client module also offers some global helper functions.\n\n``topic_matches_sub(sub, topic)`` can be used to check whether a ``topic``\nmatches a ``subscription``.\n\nFor example:\n\n    the topic ``foo/bar`` would match the subscription ``foo/#`` or ``+/bar``\n\n    the topic ``non/matching`` would not match the subscription ``non/+/+``\n\n\nPublish\n*******\n\nThis module provides some helper functions to allow straightforward publishing\nof messages in a one-shot manner. In other words, they are useful for the\nsituation where you have a single/multiple messages you want to publish to a\nbroker, then disconnect with nothing else required.\n\nThe two functions provided are `single()` and `multiple()`.\n\nBoth functions include support for MQTT v5.0, but do not currently let you\nset any properties on connection or when sending messages.\n\nSingle\n``````\n\nPublish a single message to a broker, then disconnect cleanly.\n\nExample:\n\n.. code:: python\n\n    import paho.mqtt.publish as publish\n\n    publish.single(\"paho/test/topic\", \"payload\", hostname=\"mqtt.eclipseprojects.io\")\n\nMultiple\n````````\n\nPublish multiple messages to a broker, then disconnect cleanly.\n\nExample:\n\n.. code:: python\n\n    from paho.mqtt.enums import MQTTProtocolVersion\n    import paho.mqtt.publish as publish\n\n    msgs = [{'topic':\"paho/test/topic\", 'payload':\"multiple 1\"},\n        (\"paho/test/topic\", \"multiple 2\", 0, False)]\n    publish.multiple(msgs, hostname=\"mqtt.eclipseprojects.io\", protocol=MQTTProtocolVersion.MQTTv5)\n\n\nSubscribe\n*********\n\nThis module provides some helper functions to allow straightforward subscribing\nand processing of messages.\n\nThe two functions provided are `simple()` and `callback()`.\n\nBoth functions include support for MQTT v5.0, but do not currently let you\nset any properties on connection or when subscribing.\n\nSimple\n``````\n\nSubscribe to a set of topics and return the messages received. This is a\nblocking function.\n\nExample:\n\n.. code:: python\n\n    import paho.mqtt.subscribe as subscribe\n\n    msg = subscribe.simple(\"paho/test/topic\", hostname=\"mqtt.eclipseprojects.io\")\n    print(\"%s %s\" % (msg.topic, msg.payload))\n\nUsing Callback\n``````````````\n\nSubscribe to a set of topics and process the messages received using a user\nprovided callback.\n\nExample:\n\n.. code:: python\n\n    import paho.mqtt.subscribe as subscribe\n\n    def on_message_print(client, userdata, message):\n        print(\"%s %s\" % (message.topic, message.payload))\n        userdata[\"message_count\"] += 1\n        if userdata[\"message_count\"] >= 5:\n            # it's possible to stop the program by disconnecting\n            client.disconnect()\n\n    subscribe.callback(on_message_print, \"paho/test/topic\", hostname=\"mqtt.eclipseprojects.io\", userdata={\"message_count\": 0})\n\n\nReporting bugs\n--------------\n\nPlease report bugs in the issues tracker at https://github.com/eclipse/paho.mqtt.python/issues.\n\nMore information\n----------------\n\nDiscussion of the Paho clients takes place on the `Eclipse paho-dev mailing list <https://dev.eclipse.org/mailman/listinfo/paho-dev>`_.\n\nGeneral questions about the MQTT protocol itself (not this library) are discussed in the `MQTT Google Group <https://groups.google.com/forum/?fromgroups#!forum/mqtt>`_.\n\nThere is much more information available via the `MQTT community site <http://mqtt.org/>`_.\n\n.. _examples: https://github.com/eclipse/paho.mqtt.python/tree/master/examples\n.. _documentation: https://eclipse.dev/paho/files/paho.mqtt.python/html/client.html\n","description_content_type":"text/x-rst","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"paho","license":"EPL-2.0 OR BSD-3-Clause","maintainer":null,"maintainer_email":null,"name":"paho-mqtt","package_url":"https://pypi.org/project/paho-mqtt/","platform":null,"project_url":"https://pypi.org/project/paho-mqtt/","project_urls":{"Homepage":"http://eclipse.org/paho"},"provides_extra":null,"release_url":"https://pypi.org/project/paho-mqtt/2.1.0/","requires_dist":["pysocks; extra == \"proxy\""],"requires_python":">=3.7","summary":"MQTT version 5.0/3.1.1 client class","version":"2.1.0","yanked":false,"yanked_reason":null},"last_serial":22990275,"releases":{"0.4.90":[{"comment_text":"","digests":{"blake2b_256":"4f4a7cacf78295fe9e9c8ee4edce2b817c9f506b218c44cae28d727807f935b3","md5":"18e944342ff26cadc06aff3d82441126","sha256":"6cbb955c504eefe02526aed063e51b646ad0e7a02642a0f6637690ae27941e9c"},"downloads":-1,"filename":"paho-mqtt-0.4.90.tar.gz","has_sig":false,"md5_digest":"18e944342ff26cadc06aff3d82441126","packagetype":"sdist","python_version":"source","requires_python":null,"size":17213,"upload_time":"2013-12-21T21:40:55","upload_time_iso_8601":"2013-12-21T21:40:55.091226Z","url":"https://files.pythonhosted.org/packages/4f/4a/7cacf78295fe9e9c8ee4edce2b817c9f506b218c44cae28d727807f935b3/paho-mqtt-0.4.90.tar.gz","yanked":false,"yanked_reason":null}],"0.4.91":[{"comment_text":"","digests":{"blake2b_256":"91273764e239991acc8a202064e113be776fbd941320bde357b9e40b29fbcea7","md5":"92971c87e75b1f43c04b8d94a9b52679","sha256":"b7fb297d1cb44ebab320d6ef44ff4d9ed32999a92b7caa9158d45a44d782c2e9"},"downloads":-1,"filename":"paho-mqtt-0.4.91.tar.gz","has_sig":false,"md5_digest":"92971c87e75b1f43c04b8d94a9b52679","packagetype":"sdist","python_version":"source","requires_python":null,"size":17210,"upload_time":"2013-12-31T21:41:19","upload_time_iso_8601":"2013-12-31T21:41:19.621683Z","url":"https://files.pythonhosted.org/packages/91/27/3764e239991acc8a202064e113be776fbd941320bde357b9e40b29fbcea7/paho-mqtt-0.4.91.tar.gz","yanked":false,"yanked_reason":null}],"0.4.92":[{"comment_text":"","digests":{"blake2b_256":"02594d183f02e06e9150be4d6f7fc76576301bd188227e0cb451979fdc1a0c6d","md5":"70944f12aaf212b36e9e8eaf5c80ac07","sha256":"337967543be5d6555151114acf4d94cb9001de35b23d3dc9e3f8ad4d07cc62d5"},"downloads":-1,"filename":"paho-mqtt-0.4.92.tar.gz","has_sig":false,"md5_digest":"70944f12aaf212b36e9e8eaf5c80ac07","packagetype":"sdist","python_version":"source","requires_python":null,"size":18474,"upload_time":"2014-02-04T18:54:07","upload_time_iso_8601":"2014-02-04T18:54:07.778156Z","url":"https://files.pythonhosted.org/packages/02/59/4d183f02e06e9150be4d6f7fc76576301bd188227e0cb451979fdc1a0c6d/paho-mqtt-0.4.92.tar.gz","yanked":false,"yanked_reason":null}],"0.4.94":[{"comment_text":"","digests":{"blake2b_256":"9cfbd1cdca82dc88edd7562bfa0f6795600e5352c10f5c1c5abf0e9963e8fe2f","md5":"c910a3d74baf5758532eb8a226cb2c03","sha256":"70e4e2d43e714c23fbc70ba97b9ca31279a2dc2a893374c696237c547c4a2dad"},"downloads":-1,"filename":"paho-mqtt-0.4.94.tar.gz","has_sig":false,"md5_digest":"c910a3d74baf5758532eb8a226cb2c03","packagetype":"sdist","python_version":"source","requires_python":null,"size":19967,"upload_time":"2014-03-16T20:40:18","upload_time_iso_8601":"2014-03-16T20:40:18.920923Z","url":"https://files.pythonhosted.org/packages/9c/fb/d1cdca82dc88edd7562bfa0f6795600e5352c10f5c1c5abf0e9963e8fe2f/paho-mqtt-0.4.94.tar.gz","yanked":false,"yanked_reason":null}],"0.9":[{"comment_text":"","digests":{"blake2b_256":"e8dc4acbf85f11f1545eddadefa13f5ab858aa9a7f2a508413e6091ec316d307","md5":"adb67effaf10bfd837da2a08c96f6400","sha256":"e4592f205cbb63f1c67fb22307519dadd9af1c9453c1a9ddebca1ccfa7579c33"},"downloads":-1,"filename":"paho-mqtt-0.9.tar.gz","has_sig":false,"md5_digest":"adb67effaf10bfd837da2a08c96f6400","packagetype":"sdist","python_version":"source","requires_python":null,"size":39266,"upload_time":"2014-05-01T06:23:13","upload_time_iso_8601":"2014-05-01T06:23:13.324976Z","url":"https://files.pythonhosted.org/packages/e8/dc/4acbf85f11f1545eddadefa13f5ab858aa9a7f2a508413e6091ec316d307/paho-mqtt-0.9.tar.gz","yanked":false,"yanked_reason":null}],"0.9.1":[{"comment_text":"","digests":{"blake2b_256":"51ea6c65fd07f5e77b9303fe4948caf81f6618a9e3e68a5f98c7dc0269d4dce0","md5":"da0682aa71429fbd0c2f16dfb567f463","sha256":"97808e4bc0af628e7d8608bbc9d256726a12d5290c6a155064d54bdfa4041636"},"downloads":-1,"filename":"paho-mqtt-0.9.1.tar.gz","has_sig":false,"md5_digest":"da0682aa71429fbd0c2f16dfb567f463","packagetype":"sdist","python_version":"source","requires_python":null,"size":40792,"upload_time":"2014-05-29T20:17:46","upload_time_iso_8601":"2014-05-29T20:17:46.674309Z","url":"https://files.pythonhosted.org/packages/51/ea/6c65fd07f5e77b9303fe4948caf81f6618a9e3e68a5f98c7dc0269d4dce0/paho-mqtt-0.9.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0":[{"comment_text":"","digests":{"blake2b_256":"ec4d834faa69313deec0d3414bdc276ec2e49d8b34e2305b6dbc70cf47d41f9a","md5":"4d6e74bd2281559bf972f6e230eb882e","sha256":"b9d936ad11770c3168becddc4fce706eb369d4cab8273fbc435cc2d4052b3e8a"},"downloads":-1,"filename":"paho-mqtt-1.0.tar.gz","has_sig":false,"md5_digest":"4d6e74bd2281559bf972f6e230eb882e","packagetype":"sdist","python_version":"source","requires_python":null,"size":40768,"upload_time":"2014-06-24T22:23:27","upload_time_iso_8601":"2014-06-24T22:23:27.114748Z","url":"https://files.pythonhosted.org/packages/ec/4d/834faa69313deec0d3414bdc276ec2e49d8b34e2305b6dbc70cf47d41f9a/paho-mqtt-1.0.tar.gz","yanked":false,"yanked_reason":null}],"1.1":[{"comment_text":"","digests":{"blake2b_256":"8396dacc2b78bc9c5cd83eed178e9ce35d7bceecf2dd38db079c0190423efd4a","md5":"a6407b74eb5e5411e157be1de5c11366","sha256":"0f7a629efe6e3a2c61b59d3550aa9f2c4529b5689a65fde45e6f1ac36b9a261e"},"downloads":-1,"filename":"paho-mqtt-1.1.tar.gz","has_sig":false,"md5_digest":"a6407b74eb5e5411e157be1de5c11366","packagetype":"sdist","python_version":"source","requires_python":null,"size":41788,"upload_time":"2015-02-01T15:48:06","upload_time_iso_8601":"2015-02-01T15:48:06.153849Z","url":"https://files.pythonhosted.org/packages/83/96/dacc2b78bc9c5cd83eed178e9ce35d7bceecf2dd38db079c0190423efd4a/paho-mqtt-1.1.tar.gz","yanked":false,"yanked_reason":null}],"1.2":[{"comment_text":"","digests":{"blake2b_256":"82d97064d3a0a1d62756a1a809c85b99f864c641b66de84c15458f72193b7708","md5":"241150b3fcb920ddca4d33181f3238b1","sha256":"9100a6aa706ab699d414ec02705a21eb66f436184691d0bf1f2a85a6213c6c1f"},"downloads":-1,"filename":"paho-mqtt-1.2.tar.gz","has_sig":false,"md5_digest":"241150b3fcb920ddca4d33181f3238b1","packagetype":"sdist","python_version":"source","requires_python":null,"size":49238,"upload_time":"2016-06-03T12:17:47","upload_time_iso_8601":"2016-06-03T12:17:47.321550Z","url":"https://files.pythonhosted.org/packages/82/d9/7064d3a0a1d62756a1a809c85b99f864c641b66de84c15458f72193b7708/paho-mqtt-1.2.tar.gz","yanked":false,"yanked_reason":null}],"1.2.1":[{"comment_text":"","digests":{"blake2b_256":"e0fb13680584b3781faf9da3eb5c4728e171d89357cb00cdf1cad6b4e30c8cc8","md5":"b85a8315b11c5b1d59859ac88d901ec7","sha256":"94f35ffc38ca1668b5c57dc47612284bf95b105d43d0cecd4c06896e2508779a"},"downloads":-1,"filename":"paho-mqtt-1.2.1.tar.gz","has_sig":false,"md5_digest":"b85a8315b11c5b1d59859ac88d901ec7","packagetype":"sdist","python_version":"source","requires_python":null,"size":51688,"upload_time":"2017-04-03T12:59:58","upload_time_iso_8601":"2017-04-03T12:59:58.634620Z","url":"https://files.pythonhosted.org/packages/e0/fb/13680584b3781faf9da3eb5c4728e171d89357cb00cdf1cad6b4e30c8cc8/paho-mqtt-1.2.1.tar.gz","yanked":false,"yanked_reason":null}],"1.2.2":[{"comment_text":"","digests":{"blake2b_256":"310f53f71dc9033b492ba6546c452c35722621f9120cee6b905808d893fa0d97","md5":"e48a835a02d0f6c2cdec10d3a6c99e5e","sha256":"cf297194d2a716010b5ff975f735d025ac3cdb4a317e9330abde4f73a006f1b0"},"downloads":-1,"filename":"paho-mqtt-1.2.2.tar.gz","has_sig":false,"md5_digest":"e48a835a02d0f6c2cdec10d3a6c99e5e","packagetype":"sdist","python_version":"source","requires_python":null,"size":72553,"upload_time":"2017-04-11T09:05:58","upload_time_iso_8601":"2017-04-11T09:05:58.028579Z","url":"https://files.pythonhosted.org/packages/31/0f/53f71dc9033b492ba6546c452c35722621f9120cee6b905808d893fa0d97/paho-mqtt-1.2.2.tar.gz","yanked":false,"yanked_reason":null}],"1.2.3":[{"comment_text":"","digests":{"blake2b_256":"ce2728ac0859fb8d63754ec51659be265bf3b89d1568c5f6736d21026e11ea85","md5":"4bd192ea24e7aa347f6d240101ef82f6","sha256":"0fd746d8650563290f1bd0fec01e74cb57c3ab7406bdb58e5d9252bb5fa5ca44"},"downloads":-1,"filename":"paho-mqtt-1.2.3.tar.gz","has_sig":false,"md5_digest":"4bd192ea24e7aa347f6d240101ef82f6","packagetype":"sdist","python_version":"source","requires_python":null,"size":72705,"upload_time":"2017-04-20T19:30:00","upload_time_iso_8601":"2017-04-20T19:30:00.043590Z","url":"https://files.pythonhosted.org/packages/ce/27/28ac0859fb8d63754ec51659be265bf3b89d1568c5f6736d21026e11ea85/paho-mqtt-1.2.3.tar.gz","yanked":false,"yanked_reason":null}],"1.3.0":[{"comment_text":"","digests":{"blake2b_256":"337f3ce1ffebaa0343d509aac003800b305d821e89dac3c11666f92e12feca14","md5":"b9338236e2836e8579ef140956189cc4","sha256":"2c9ef5494cfc1e41a9fff6544c5a2cd59ea5d401d9119a06ecf7fad6a2ffeb93"},"downloads":-1,"filename":"paho-mqtt-1.3.0.tar.gz","has_sig":false,"md5_digest":"b9338236e2836e8579ef140956189cc4","packagetype":"sdist","python_version":"source","requires_python":null,"size":79467,"upload_time":"2017-06-20T12:07:09","upload_time_iso_8601":"2017-06-20T12:07:09.907052Z","url":"https://files.pythonhosted.org/packages/33/7f/3ce1ffebaa0343d509aac003800b305d821e89dac3c11666f92e12feca14/paho-mqtt-1.3.0.tar.gz","yanked":false,"yanked_reason":null}],"1.3.1":[{"comment_text":"","digests":{"blake2b_256":"2a5fcf14b8f9f8ed1891cda893a2a7d1d6fa23de2a9fb4832f05cef02b79d01f","md5":"2cc27d8b369700b1fc99325add0dadd2","sha256":"31911f6031de306c27ed79dc77b690d7c55b0dcb0f0434ca34ec6361d0371122"},"downloads":-1,"filename":"paho-mqtt-1.3.1.tar.gz","has_sig":false,"md5_digest":"2cc27d8b369700b1fc99325add0dadd2","packagetype":"sdist","python_version":"source","requires_python":null,"size":80861,"upload_time":"2017-10-09T08:59:10","upload_time_iso_8601":"2017-10-09T08:59:10.926434Z","url":"https://files.pythonhosted.org/packages/2a/5f/cf14b8f9f8ed1891cda893a2a7d1d6fa23de2a9fb4832f05cef02b79d01f/paho-mqtt-1.3.1.tar.gz","yanked":false,"yanked_reason":null}],"1.4.0":[{"comment_text":"","digests":{"blake2b_256":"2563db25e62979c2a716a74950c9ed658dce431b5cb01fde29eb6cba9489a904","md5":"e3ac29cd5dc247a01083a2a8f3fddd08","sha256":"e440a052b46d222e184be3be38676378722072fcd4dfd2c8f509fb861a7b0b79"},"downloads":-1,"filename":"paho-mqtt-1.4.0.tar.gz","has_sig":false,"md5_digest":"e3ac29cd5dc247a01083a2a8f3fddd08","packagetype":"sdist","python_version":"source","requires_python":null,"size":88626,"upload_time":"2018-09-02T11:56:04","upload_time_iso_8601":"2018-09-02T11:56:04.016934Z","url":"https://files.pythonhosted.org/packages/25/63/db25e62979c2a716a74950c9ed658dce431b5cb01fde29eb6cba9489a904/paho-mqtt-1.4.0.tar.gz","yanked":false,"yanked_reason":null}],"1.5.0":[{"comment_text":"","digests":{"blake2b_256":"59111dd5c70f0f27a88a3a05772cd95f6087ac479fac66d9c7752ee5e16ddbbc","md5":"45e80d9b8066a8d0ba1ecfffe271bd3d","sha256":"e3d286198baaea195c8b3bc221941d25a3ab0e1507fc1779bdb7473806394be4"},"downloads":-1,"filename":"paho-mqtt-1.5.0.tar.gz","has_sig":false,"md5_digest":"45e80d9b8066a8d0ba1ecfffe271bd3d","packagetype":"sdist","python_version":"source","requires_python":null,"size":99525,"upload_time":"2019-10-30T21:29:55","upload_time_iso_8601":"2019-10-30T21:29:55.744575Z","url":"https://files.pythonhosted.org/packages/59/11/1dd5c70f0f27a88a3a05772cd95f6087ac479fac66d9c7752ee5e16ddbbc/paho-mqtt-1.5.0.tar.gz","yanked":false,"yanked_reason":null}],"1.5.1":[{"comment_text":"","digests":{"blake2b_256":"32d36dcb8fd14746fcde6a556f932b5de8bea8fedcb85b3a092e0e986372c0e7","md5":"32f93c0ed92c7439f7a715ed258fd35d","sha256":"9feb068e822be7b3a116324e01fb6028eb1d66412bf98595ae72698965cb1cae"},"downloads":-1,"filename":"paho-mqtt-1.5.1.tar.gz","has_sig":false,"md5_digest":"32f93c0ed92c7439f7a715ed258fd35d","packagetype":"sdist","python_version":"source","requires_python":null,"size":101757,"upload_time":"2020-09-22T18:48:38","upload_time_iso_8601":"2020-09-22T18:48:38.282848Z","url":"https://files.pythonhosted.org/packages/32/d3/6dcb8fd14746fcde6a556f932b5de8bea8fedcb85b3a092e0e986372c0e7/paho-mqtt-1.5.1.tar.gz","yanked":false,"yanked_reason":null}],"1.6.0":[{"comment_text":"","digests":{"blake2b_256":"afc015d9a53948cfee06410d2a2340ea5d1e633d5db753a4eeedf7b6638bae43","md5":"8467be250c8de104dcc0f225eeefd621","sha256":"4b34b07ee45925ecbdddecc862ff68d9a9999d78d8876e23f8f54985dd9ed5d1"},"downloads":-1,"filename":"paho-mqtt-1.6.0.tar.gz","has_sig":false,"md5_digest":"8467be250c8de104dcc0f225eeefd621","packagetype":"sdist","python_version":"source","requires_python":null,"size":99326,"upload_time":"2021-10-19T23:56:16","upload_time_iso_8601":"2021-10-19T23:56:16.461417Z","url":"https://files.pythonhosted.org/packages/af/c0/15d9a53948cfee06410d2a2340ea5d1e633d5db753a4eeedf7b6638bae43/paho-mqtt-1.6.0.tar.gz","yanked":false,"yanked_reason":null}],"1.6.1":[{"comment_text":"","digests":{"blake2b_256":"f8dd4b75dcba025f8647bc9862ac17299e0d7d12d3beadbf026d8c8d74215c12","md5":"bdb20f88db291fdb4a0fe804c0f29316","sha256":"2a8291c81623aec00372b5a85558a372c747cbca8e9934dfe218638b8eefc26f"},"downloads":-1,"filename":"paho-mqtt-1.6.1.tar.gz","has_sig":false,"md5_digest":"bdb20f88db291fdb4a0fe804c0f29316","packagetype":"sdist","python_version":"source","requires_python":null,"size":99373,"upload_time":"2021-10-21T10:33:59","upload_time_iso_8601":"2021-10-21T10:33:59.864987Z","url":"https://files.pythonhosted.org/packages/f8/dd/4b75dcba025f8647bc9862ac17299e0d7d12d3beadbf026d8c8d74215c12/paho-mqtt-1.6.1.tar.gz","yanked":false,"yanked_reason":null}],"2.0.0":[{"comment_text":"","digests":{"blake2b_256":"5c14665ea683e6328af4418e55aec6ea9572adf4e0000ef70988db7fc99142c9","md5":"ca91e5d5fde613891499277288cfb16a","sha256":"2ef745073dfc9aa68bfec30d0b9b6f0304ea75182bae85a7c77a80cefce1eff5"},"downloads":-1,"filename":"paho_mqtt-2.0.0-py3-none-any.whl","has_sig":false,"md5_digest":"ca91e5d5fde613891499277288cfb16a","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":66890,"upload_time":"2024-02-10T14:03:59","upload_time_iso_8601":"2024-02-10T14:03:59.894461Z","url":"https://files.pythonhosted.org/packages/5c/14/665ea683e6328af4418e55aec6ea9572adf4e0000ef70988db7fc99142c9/paho_mqtt-2.0.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"73b7a4df0f93bbdae237e16ba402752151eceee576cbe80c235a2475fbf81eea","md5":"191a6cf0572959a41c9c1943a3fedb24","sha256":"13b205f29251e4f2c66a6c923c31fc4fd780561e03b2d775cff8e4f2915cf947"},"downloads":-1,"filename":"paho_mqtt-2.0.0.tar.gz","has_sig":false,"md5_digest":"191a6cf0572959a41c9c1943a3fedb24","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":147711,"upload_time":"2024-02-10T14:04:02","upload_time_iso_8601":"2024-02-10T14:04:02.603856Z","url":"https://files.pythonhosted.org/packages/73/b7/a4df0f93bbdae237e16ba402752151eceee576cbe80c235a2475fbf81eea/paho_mqtt-2.0.0.tar.gz","yanked":false,"yanked_reason":null}],"2.0.0rc2":[{"comment_text":"","digests":{"blake2b_256":"720b982858f5006398371f6e9a512362f571616f8d30e31f14b99d5b0a759268","md5":"ac844a003148ea490c7e961b00c7faaa","sha256":"0bdc1af123b0871bc2f44df8b51db4148f8c8c7160cffd63aaa66a274dbdbb1a"},"downloads":-1,"filename":"paho_mqtt-2.0.0rc2-py3-none-any.whl","has_sig":false,"md5_digest":"ac844a003148ea490c7e961b00c7faaa","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":71437,"upload_time":"2024-01-21T18:39:57","upload_time_iso_8601":"2024-01-21T18:39:57.430515Z","url":"https://files.pythonhosted.org/packages/72/0b/982858f5006398371f6e9a512362f571616f8d30e31f14b99d5b0a759268/paho_mqtt-2.0.0rc2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"28adc451949224b8f5edf441a82a40da31f7e3eee6dbe93eabf2ad43bfbfbbff","md5":"c1a93a55b9d68b0129f0490d7974be4c","sha256":"c17239a06826609bfaba4553ae943bba2d3fe6f2cda66973e450d1f88ec7fe4f"},"downloads":-1,"filename":"paho_mqtt-2.0.0rc2.tar.gz","has_sig":false,"md5_digest":"c1a93a55b9d68b0129f0490d7974be4c","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":164270,"upload_time":"2024-01-21T18:39:59","upload_time_iso_8601":"2024-01-21T18:39:59.462958Z","url":"https://files.pythonhosted.org/packages/28/ad/c451949224b8f5edf441a82a40da31f7e3eee6dbe93eabf2ad43bfbfbbff/paho_mqtt-2.0.0rc2.tar.gz","yanked":false,"yanked_reason":null}],"2.1.0":[{"comment_text":"","digests":{"blake2b_256":"c4cb00451c3cf31790287768bb12c6bec834f5d292eaf3022afc88e14b8afc94","md5":"55e71d5e16ed6b67074f1e79f2841e2c","sha256":"6db9ba9b34ed5bc6b6e3812718c7e06e2fd7444540df2455d2c51bd58808feee"},"downloads":-1,"filename":"paho_mqtt-2.1.0-py3-none-any.whl","has_sig":false,"md5_digest":"55e71d5e16ed6b67074f1e79f2841e2c","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":67219,"upload_time":"2024-04-29T19:52:48","upload_time_iso_8601":"2024-04-29T19:52:48.345637Z","url":"https://files.pythonhosted.org/packages/c4/cb/00451c3cf31790287768bb12c6bec834f5d292eaf3022afc88e14b8afc94/paho_mqtt-2.1.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"39150a6214e76d4d32e7f663b109cf71fb22561c2be0f701d67f93950cd40542","md5":"fb97ff447db4ad2634e824672aac9f78","sha256":"12d6e7511d4137555a3f6ea167ae846af2c7357b10bc6fa4f7c3968fc1723834"},"downloads":-1,"filename":"paho_mqtt-2.1.0.tar.gz","has_sig":false,"md5_digest":"fb97ff447db4ad2634e824672aac9f78","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":148848,"upload_time":"2024-04-29T19:52:55","upload_time_iso_8601":"2024-04-29T19:52:55.591462Z","url":"https://files.pythonhosted.org/packages/39/15/0a6214e76d4d32e7f663b109cf71fb22561c2be0f701d67f93950cd40542/paho_mqtt-2.1.0.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"c4cb00451c3cf31790287768bb12c6bec834f5d292eaf3022afc88e14b8afc94","md5":"55e71d5e16ed6b67074f1e79f2841e2c","sha256":"6db9ba9b34ed5bc6b6e3812718c7e06e2fd7444540df2455d2c51bd58808feee"},"downloads":-1,"filename":"paho_mqtt-2.1.0-py3-none-any.whl","has_sig":false,"md5_digest":"55e71d5e16ed6b67074f1e79f2841e2c","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":67219,"upload_time":"2024-04-29T19:52:48","upload_time_iso_8601":"2024-04-29T19:52:48.345637Z","url":"https://files.pythonhosted.org/packages/c4/cb/00451c3cf31790287768bb12c6bec834f5d292eaf3022afc88e14b8afc94/paho_mqtt-2.1.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"39150a6214e76d4d32e7f663b109cf71fb22561c2be0f701d67f93950cd40542","md5":"fb97ff447db4ad2634e824672aac9f78","sha256":"12d6e7511d4137555a3f6ea167ae846af2c7357b10bc6fa4f7c3968fc1723834"},"downloads":-1,"filename":"paho_mqtt-2.1.0.tar.gz","has_sig":false,"md5_digest":"fb97ff447db4ad2634e824672aac9f78","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":148848,"upload_time":"2024-04-29T19:52:55","upload_time_iso_8601":"2024-04-29T19:52:55.591462Z","url":"https://files.pythonhosted.org/packages/39/15/0a6214e76d4d32e7f663b109cf71fb22561c2be0f701d67f93950cd40542/paho_mqtt-2.1.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
