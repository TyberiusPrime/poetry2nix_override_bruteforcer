{"info":{"author":null,"author_email":"\"D. Brown\" <dorianstuartbrown@gmail.com>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Intended Audience :: Science/Research","License :: Freely Distributable","License :: OSI Approved :: Apache Software License","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],"description":"# Rank-BM25: A two line search engine\n\n[![Anaconda-Server Badge](https://anaconda.org/conda-forge/haystack-bm25/badges/version.svg)](https://anaconda.org/conda-forge/haystack-bm25)\n[![Test](https://github.com/deepset-ai/rank_bm25/actions/workflows/test.yml/badge.svg)](https://github.com/deepset-ai/rank_bm25/actions/workflows/test.yml)\n[![PyPI - Version](https://img.shields.io/pypi/v/haystack-bm25.svg)](https://pypi.org/project/haystack-bm25)\n[![GitHub](https://img.shields.io/github/license/deepset-ai/rank_bm25?color=blue)](LICENSE)\n\nA collection of algorithms for querying a set of documents and returning the ones most relevant to the query. The most common use case for these algorithms is, as you might have guessed, to create search engines.\n\nSo far the algorithms that have been implemented are:\n- [x] Okapi BM25\n- [x] BM25L\n- [x] BM25+\n- [ ] BM25-Adpt\n- [ ] BM25T\n\nThese algorithms were taken from [this paper](http://www.cs.otago.ac.nz/homepages/andrew/papers/2014-2.pdf), which gives a nice overview of each method, and also benchmarks them against each other. A nice inclusion is that they compare different kinds of preprocessing like stemming vs no-stemming, stopword removal or not, etc. Great read if you're new to the topic.\n\n## Installation\nThe easiest way to install this package is through `pip`, using\n```bash\npip install rank_bm25\n```\nIf you want to be sure you're getting the newest version, you can install it directly from github with\n```bash\npip install git+ssh://git@github.com/dorianbrown/rank_bm25.git\n```\n\n## Usage\nFor this example we'll be using the `BM25Okapi` algorithm, but the others are used in pretty much the same way.\n\n### Initalizing\n\nFirst thing to do is create an instance of the BM25 class, which reads in a corpus of text and does some indexing on it:\n```python\nfrom rank_bm25 import BM25Okapi\n\ncorpus = [\n    \"Hello there good man!\",\n    \"It is quite windy in London\",\n    \"How is the weather today?\"\n]\n\ntokenized_corpus = [doc.split(\" \") for doc in corpus]\n\nbm25 = BM25Okapi(tokenized_corpus)\n# <rank_bm25.BM25Okapi at 0x1047881d0>\n```\nNote that this package doesn't do any text preprocessing. If you want to do things like lowercasing, stopword removal, stemming, etc, you need to do it yourself.\n\nThe only requirements is that the class receives a list of lists of strings, which are the document tokens.\n\n### Ranking of documents\n\nNow that we've created our document indexes, we can give it queries and see which documents are the most relevant:\n```python\nquery = \"windy London\"\ntokenized_query = query.split(\" \")\n\ndoc_scores = bm25.get_scores(tokenized_query)\n# array([0.        , 0.93729472, 0.        ])\n```\nGood to note that we also need to tokenize our query, and apply the same preprocessing steps we did to the documents in order to have an apples-to-apples comparison\n\nInstead of getting the document scores, you can also just retrieve the best documents with\n```python\nbm25.get_top_n(tokenized_query, corpus, n=1)\n# ['It is quite windy in London']\n```\nAnd that's pretty much it!\n","description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":null,"license":"Apache-2.0","maintainer":null,"maintainer_email":null,"name":"haystack-bm25","package_url":"https://pypi.org/project/haystack-bm25/","platform":null,"project_url":"https://pypi.org/project/haystack-bm25/","project_urls":{"Homepage":"https://github.com/deepset-ai/haystack-bm25"},"provides_extra":null,"release_url":"https://pypi.org/project/haystack-bm25/1.0.2/","requires_dist":["numpy"],"requires_python":null,"summary":"Various BM25 algorithms for document ranking","version":"1.0.2","yanked":false,"yanked_reason":null},"last_serial":21105327,"releases":{"1.0.0":[{"comment_text":null,"digests":{"blake2b_256":"6280923b970385eaaf8df3fec29ab04b9135aec1f69cf5752731b2739b011492","md5":"3e2fe88a9aebd3b82ac01caa9d75940a","sha256":"0775a4a6bf5c721263a0a93370665e0d38463fcbffd0db83f1846f35d84eb7fc"},"downloads":-1,"filename":"haystack_bm25-1.0.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"3e2fe88a9aebd3b82ac01caa9d75940a","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":8666,"upload_time":"2023-12-13T17:27:45","upload_time_iso_8601":"2023-12-13T17:27:45.286737Z","url":"https://files.pythonhosted.org/packages/62/80/923b970385eaaf8df3fec29ab04b9135aec1f69cf5752731b2739b011492/haystack_bm25-1.0.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":null,"digests":{"blake2b_256":"e8400687b3c562f6ecdf96cefcb38c625fa39dee6adc83f955e5156087a37ddd","md5":"d1dc9de2dfe45a951b6216a7e825db85","sha256":"eeb6c60f9f8bca430236ff7a98f9f0cb6fb13bed5df5630dbe9e0f88c264a706"},"downloads":-1,"filename":"haystack_bm25-1.0.0.tar.gz","has_sig":false,"md5_digest":"d1dc9de2dfe45a951b6216a7e825db85","packagetype":"sdist","python_version":"source","requires_python":null,"size":8441,"upload_time":"2023-12-13T17:27:47","upload_time_iso_8601":"2023-12-13T17:27:47.006572Z","url":"https://files.pythonhosted.org/packages/e8/40/0687b3c562f6ecdf96cefcb38c625fa39dee6adc83f955e5156087a37ddd/haystack_bm25-1.0.0.tar.gz","yanked":false,"yanked_reason":null}],"1.0.1":[{"comment_text":null,"digests":{"blake2b_256":"d75663df9143e38e33b381c6ad0a31aabf8d4e0eb387385f94b679cf4d5157a0","md5":"06d8f55d674f55ef78432fc9f734a795","sha256":"9e9c73f2d47d5782c0cb2f640340bf33787f4e14b5cb93aebd2739ba114cfa18"},"downloads":-1,"filename":"haystack_bm25-1.0.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"06d8f55d674f55ef78432fc9f734a795","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":8834,"upload_time":"2023-12-18T08:28:44","upload_time_iso_8601":"2023-12-18T08:28:44.787685Z","url":"https://files.pythonhosted.org/packages/d7/56/63df9143e38e33b381c6ad0a31aabf8d4e0eb387385f94b679cf4d5157a0/haystack_bm25-1.0.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":null,"digests":{"blake2b_256":"003e5995e4d4d12ea7d2b33dba7a61885073187f63f562b053e346d853792d9d","md5":"bf89216ba2714e5bfcbe174ce736c57b","sha256":"68a9f94013696b3cbe5b3386269aa4ae0d30b1e22a80ac012285a197747133d2"},"downloads":-1,"filename":"haystack_bm25-1.0.1.tar.gz","has_sig":false,"md5_digest":"bf89216ba2714e5bfcbe174ce736c57b","packagetype":"sdist","python_version":"source","requires_python":null,"size":8653,"upload_time":"2023-12-18T08:28:46","upload_time_iso_8601":"2023-12-18T08:28:46.384937Z","url":"https://files.pythonhosted.org/packages/00/3e/5995e4d4d12ea7d2b33dba7a61885073187f63f562b053e346d853792d9d/haystack_bm25-1.0.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.2":[{"comment_text":null,"digests":{"blake2b_256":"c0273acaed8945b9d3d1633afed40c489edac9396ca44ea24cecf3d6cae9ae03","md5":"95140b94196635a7b88dd8594d4dd80d","sha256":"64c159a87133351cd73715297fda73b9f88bdcfdaaad668e020d3c6b5582827a"},"downloads":-1,"filename":"haystack_bm25-1.0.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"95140b94196635a7b88dd8594d4dd80d","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":8830,"upload_time":"2023-12-18T08:51:57","upload_time_iso_8601":"2023-12-18T08:51:57.675053Z","url":"https://files.pythonhosted.org/packages/c0/27/3acaed8945b9d3d1633afed40c489edac9396ca44ea24cecf3d6cae9ae03/haystack_bm25-1.0.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":null,"digests":{"blake2b_256":"6b875786810987af0a77b3c2a23e6bc200559388f20622e5a9f67d2bc38ed14c","md5":"a679b5e30d1c72b300483cc2847a2614","sha256":"57741c85203739d05e14de1a2c7657a675000a22dc7bd25f009eb9e0875ace2a"},"downloads":-1,"filename":"haystack_bm25-1.0.2.tar.gz","has_sig":false,"md5_digest":"a679b5e30d1c72b300483cc2847a2614","packagetype":"sdist","python_version":"source","requires_python":null,"size":8656,"upload_time":"2023-12-18T08:51:59","upload_time_iso_8601":"2023-12-18T08:51:59.166170Z","url":"https://files.pythonhosted.org/packages/6b/87/5786810987af0a77b3c2a23e6bc200559388f20622e5a9f67d2bc38ed14c/haystack_bm25-1.0.2.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":null,"digests":{"blake2b_256":"c0273acaed8945b9d3d1633afed40c489edac9396ca44ea24cecf3d6cae9ae03","md5":"95140b94196635a7b88dd8594d4dd80d","sha256":"64c159a87133351cd73715297fda73b9f88bdcfdaaad668e020d3c6b5582827a"},"downloads":-1,"filename":"haystack_bm25-1.0.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"95140b94196635a7b88dd8594d4dd80d","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":8830,"upload_time":"2023-12-18T08:51:57","upload_time_iso_8601":"2023-12-18T08:51:57.675053Z","url":"https://files.pythonhosted.org/packages/c0/27/3acaed8945b9d3d1633afed40c489edac9396ca44ea24cecf3d6cae9ae03/haystack_bm25-1.0.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":null,"digests":{"blake2b_256":"6b875786810987af0a77b3c2a23e6bc200559388f20622e5a9f67d2bc38ed14c","md5":"a679b5e30d1c72b300483cc2847a2614","sha256":"57741c85203739d05e14de1a2c7657a675000a22dc7bd25f009eb9e0875ace2a"},"downloads":-1,"filename":"haystack_bm25-1.0.2.tar.gz","has_sig":false,"md5_digest":"a679b5e30d1c72b300483cc2847a2614","packagetype":"sdist","python_version":"source","requires_python":null,"size":8656,"upload_time":"2023-12-18T08:51:59","upload_time_iso_8601":"2023-12-18T08:51:59.166170Z","url":"https://files.pythonhosted.org/packages/6b/87/5786810987af0a77b3c2a23e6bc200559388f20622e5a9f67d2bc38ed14c/haystack_bm25-1.0.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
