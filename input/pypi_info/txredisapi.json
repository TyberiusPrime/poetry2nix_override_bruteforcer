{"info":{"author":"Alexandre Fiori","author_email":"fiorix@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Intended Audience :: Developers","License :: OSI Approved :: Apache Software License","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: Implementation :: PyPy"],"description":"txredisapi\n==========\n\n[![Build Status](https://secure.travis-ci.org/IlyaSkriblovsky/txredisapi.png)](http://travis-ci.org/IlyaSkriblovsky/txredisapi)\n\n\n*For the latest source code, see <http://github.com/IlyaSkriblovsky/txredisapi>*\n\n\n``txredisapi`` is a non-blocking client driver for the [redis](http://redis.io)\ndatabase, written in Python. It uses [Twisted](http://twistedmatrix.com) for\nthe asynchronous communication with redis.\n\nIt started as a fork of the original\n[redis protocol for twisted](http://pypi.python.org/pypi/txredis/), and evolved\ninto a more robust, reliable, and complete solution for applications like web\nservers. These types of applications often need a fault-tolerant pool of\nconnections with multiple redis servers, making it possible to easily develop\nand maintain distributed systems.\n\nMost of the [redis commands](http://redis.io/commands) are supported, as well\nas other features such as silent reconnection, connection pools, and automatic\nsharding.\n\nThis driver is distributed as part of the [cyclone](http://cyclone.io) web\nframework.\n\n### Changelog ###\n\nSee [CHANGELOG.md](CHANGELOG.md)\n\n### Features ###\n\n- Connection Pools\n- Lazy Connections\n- Automatic Sharding\n- Automatic Reconnection\n- Connection using Redis Sentinel\n- Publish/Subscribe (PubSub)\n- Transactions\n- Unix Socket Connections\n\n\nInstall\n-------\n\nBear in mind that ``txredisapi.py`` is pure-python, in a single file.\nThus, there's absolutely no need to install it. Instead, just copy it to your\nproject directory and start using.\n\nLatest source code is at <https://github.com/IlyaSkriblovsky/txredisapi>.\n\nIf you have [cyclone](http://cyclone.io), you probably already have it too.\nTry the following:\n\n    $ python\n    >>> import cyclone.redis\n    >>> cyclone.redis.version\n    '1.0'\n\nHowever, if you really really insist in installing, get it from pypi:\n\n    pip install txredisapi\n\n\n### Unit Tests ###\n\n[Twisted Trial](http://twistedmatrix.com/trac/wiki/TwistedTrial) unit tests\nare available. Just start redis, and run ``trial ./tests``.\nIf *unix sockets* are disabled in redis, it will silently skip those tests.\n\nMake sure you run `redis-cli flushall` to clean up redis after the tests.\n\nUsage\n-----\n\nFirst thing to do is choose what type of connection you want. The driver\nsupports single connection, connection pools, sharded connections (with\nautomatic distribution based on a built-in consistent hashing algorithm),\nsharded connection pools, and all of these different types can be *lazy*,\nwhich is explained later (because I'm lazy now).\n\nBasically, you want normal connections for simple batch clients that connect\nto redis, execute a couple of commands and disconnect - like crawlers, etc.\n\nExample:\n\n    #!/usr/bin/env python\n    # coding: utf-8\n\n    import txredisapi as redis\n\n    from twisted.internet import defer\n    from twisted.internet import reactor\n\n\n    @defer.inlineCallbacks\n    def main():\n        rc = yield redis.Connection()\n        print rc\n\n        yield rc.set(\"foo\", \"bar\")\n        v = yield rc.get(\"foo\")\n        print \"foo:\", repr(v)\n\n        yield rc.disconnect()\n\n\n    if __name__ == \"__main__\":\n        main().addCallback(lambda ign: reactor.stop())\n        reactor.run()\n\n\nEasily switch between ``redis.Connection()`` and ``redis.ConnectionPool()``\nwith absolutely no changes to the logic of your program.\n\nThese are all the supported methods for connecting to Redis::\n\n    Connection(host, port, dbid, reconnect, charset)\n    lazyConnection(host, port, dbid, reconnect, charset)\n\n    ConnectionPool(host, port, dbid, poolsize, reconnect, charset)\n    lazyConnectionPool(host, port, dbid, poolsize, reconnect, charset)\n\n    ShardedConnection(hosts, dbid, reconnect, charset)\n    lazyShardedConnection(hosts, dbid, reconnect, charset)\n\n    ShardedConnectionPool(hosts, dbid, poolsize, reconnect, charset)\n    lazyShardedConnectionPool(hosts, dbid, poolsize, reconnect, charset)\n\n    UnixConnection(path, dbid, reconnect, charset)\n    lazyUnixConnection(path, dbid, reconnect, charset)\n\n    UnixConnectionPool(unix, dbid, poolsize, reconnect, charset)\n    lazyUnixConnectionPool(unix, dbid, poolsize, reconnect, charset)\n\n    ShardedUnixConnection(paths, dbid, reconnect, charset)\n    lazyShardedUnixConnection(paths, dbid, reconnect, charset)\n\n    ShardedUnixConnectionPool(paths, dbid, poolsize, reconnect, charset)\n    lazyShardedUnixConnectionPool(paths, dbid, poolsize, reconnect, charset)\n\n\nThe arguments are:\n\n- host: the IP address or hostname of the redis server. [default: localhost]\n- port: port number of the redis server. [default: 6379]\n- path: path of redis server's socket [default: /tmp/redis.sock]\n- dbid: database id of redis server. [default: 0]\n- poolsize: how many connections to make. [default: 10]\n- reconnect: auto-reconnect if connection is lost. [default: True]\n- charset: string encoding. Do not decode/encode strings if None.\n  [default: utf-8]\n- hosts (for sharded): list of ``host:port`` pairs. [default: None]\n- paths (for sharded): list of ``pathnames``. [default: None]\n- password: password for the redis server. [default: None]\n- ssl_context_factory: Either a boolean indicating wether to use SSL/TLS or a specific `ClientContextFactory`. [default: False]\n\n\n### Connection Handlers ###\n\nAll connection methods return a connection handler object at some point.\n\nNormal connections (not lazy) return a deferred, which is fired with the\nconnection handler after the connection is established.\n\nIn case of connection pools, it will only fire the callback after all\nconnections are set up, and ready.\n\nConnection handler is the client interface with redis. It accepts all the\ncommands supported by redis, such as ``get``, ``set``, etc. It is the ``rc``\nobject in the example below.\n\nConnection handlers will automatically select one of the available connections\nin connection pools, and automatically reconnect to redis when necessary.\n\nIf the connection with redis is lost, all commands will raise the\n``ConnectionError`` exception, to indicate that there's no active connection.\nHowever, if the ``reconnect`` argument was set to ``True`` during the\ninitialization, it will continuosly try to reconnect, in background.\n\nExample:\n\n    #!/usr/bin/env python\n    # coding: utf-8\n\n    import txredisapi as redis\n\n    from twisted.internet import defer\n    from twisted.internet import reactor\n\n\n    def sleep(n):\n        d = defer.Deferred()\n        reactor.callLater(5, lambda *ign: d.callback(None))\n        return d\n\n\n    @defer.inlineCallbacks\n    def main():\n        rc = yield redis.ConnectionPool()\n        print rc\n\n        # set\n        yield rc.set(\"foo\", \"bar\")\n\n        # sleep, so you can kill redis\n        print \"sleeping for 5s, kill redis now...\"\n        yield sleep(5)\n\n        try:\n          v = yield rc.get(\"foo\")\n          print \"foo:\", v\n\n          yield rc.disconnect()\n        except redis.ConnectionError, e:\n          print str(e)\n\n\n    if __name__ == \"__main__\":\n        main().addCallback(lambda ign: reactor.stop())\n        reactor.run()\n\n\n### Lazy Connections ###\n\nThis type of connection will immediately return the connection handler object,\neven before the connection is made.\n\nIt will start the connection, (or connections, in case of connection pools) in\nbackground, and automatically reconnect if necessary.\n\nYou want lazy connections when you're writing servers, like web servers, or\nany other type of server that should not wait for the redis connection during\nthe initialization of the program.\n\nThe example below is a web application, which will expose redis set, get and\ndelete commands over HTTP.\n\nIf the database connection is down (either because redis is not running, or\nwhatever reason), the web application will start normally. If connection is\nlost during the operation, nothing will change.\n\nWhen there's no connection, all commands will fail, therefore the web\napplication will respond with HTTP 503 (Service Unavailable). It will resume to\nnormal once the connection with redis is re-established.\n\nTry killing redis server after the application is running, and make a couple\nof requests. Then, start redis again and give it another try.\n\nExample:\n\n    #!/usr/bin/env python\n    # coding: utf-8\n\n    import sys\n\n    import cyclone.web\n    import cyclone.redis\n    from twisted.internet import defer\n    from twisted.internet import reactor\n    from twisted.python import log\n\n\n    class Application(cyclone.web.Application):\n        def __init__(self):\n          handlers = [ (r\"/text/(.+)\", TextHandler) ]\n\n          RedisMixin.setup()\n          cyclone.web.Application.__init__(self, handlers, debug=True)\n\n\n    class RedisMixin(object):\n        redis_conn = None\n\n        @classmethod\n        def setup(self):\n            RedisMixin.redis_conn = cyclone.redis.lazyConnectionPool()\n\n\n    # Provide GET, SET and DELETE redis operations via HTTP\n    class TextHandler(cyclone.web.RequestHandler, RedisMixin):\n        @defer.inlineCallbacks\n        def get(self, key):\n          try:\n              value = yield self.redis_conn.get(key)\n          except Exception, e:\n              log.msg(\"Redis failed to get('%s'): %s\" % (key, str(e)))\n              raise cyclone.web.HTTPError(503)\n\n          self.set_header(\"Content-Type\", \"text/plain\")\n          self.write(\"%s=%s\\r\\n\" % (key, value))\n\n        @defer.inlineCallbacks\n        def post(self, key):\n            value = self.get_argument(\"value\")\n            try:\n                yield self.redis_conn.set(key, value)\n            except Exception, e:\n                log.msg(\"Redis failed to set('%s', '%s'): %s\" % (key, value, str(e)))\n                raise cyclone.web.HTTPError(503)\n\n            self.set_header(\"Content-Type\", \"text/plain\")\n            self.write(\"%s=%s\\r\\n\" % (key, value))\n\n        @defer.inlineCallbacks\n        def delete(self, key):\n            try:\n                n = yield self.redis_conn.delete(key)\n            except Exception, e:\n                log.msg(\"Redis failed to del('%s'): %s\" % (key, str(e)))\n                raise cyclone.web.HTTPError(503)\n\n            self.set_header(\"Content-Type\", \"text/plain\")\n            self.write(\"DEL %s=%d\\r\\n\" % (key, n))\n\n\n    def main():\n        log.startLogging(sys.stdout)\n        reactor.listenTCP(8888, Application(), interface=\"127.0.0.1\")\n        reactor.run()\n\n\n    if __name__ == \"__main__\":\n        main()\n\n\nThis is the server running in one terminal::\n\n    $ ./helloworld.py\n    2012-02-17 15:40:25-0500 [-] Log opened.\n    2012-02-17 15:40:25-0500 [-] Starting factory <redis.Factory instance at 0x1012f0560>\n    2012-02-17 15:40:25-0500 [-] __main__.Application starting on 8888\n    2012-02-17 15:40:25-0500 [-] Starting factory <__main__.Application instance at 0x100f42290>\n    2012-02-17 15:40:53-0500 [RedisProtocol,client] 200 POST /text/foo (127.0.0.1) 1.20ms\n    2012-02-17 15:41:01-0500 [RedisProtocol,client] 200 GET /text/foo (127.0.0.1) 0.97ms\n    2012-02-17 15:41:09-0500 [RedisProtocol,client] 200 DELETE /text/foo (127.0.0.1) 0.65ms\n    (killed redis-server)\n    2012-02-17 15:48:48-0500 [HTTPConnection,0,127.0.0.1] Redis failed to get('foo'): Not connected\n    2012-02-17 15:48:48-0500 [HTTPConnection,0,127.0.0.1] 503 GET /text/foo (127.0.0.1) 2.99ms\n\n\nAnd these are the requests, from ``curl`` in another terminal.\n\nSet:\n\n    $ curl -D - -d \"value=bar\" http://localhost:8888/text/foo\n    HTTP/1.1 200 OK\n    Content-Length: 9\n    Content-Type: text/plain\n\n    foo=bar\n\nGet:\n\n    $ curl -D - http://localhost:8888/text/foo\n    HTTP/1.1 200 OK\n    Content-Length: 9\n    Etag: \"b63729aa7fa0e438eed735880951dcc21d733676\"\n    Content-Type: text/plain\n\n    foo=bar\n\nDelete:\n\n    $ curl -D - -X DELETE http://localhost:8888/text/foo\n    HTTP/1.1 200 OK\n    Content-Length: 11\n    Content-Type: text/plain\n\n    DEL foo=1\n\nWhen redis is not running:\n\n    $ curl -D - http://localhost:8888/text/foo\n    HTTP/1.1 503 Service Unavailable\n    Content-Length: 89\n    Content-Type: text/html; charset=UTF-8\n\n    <html><title>503: Service Unavailable</title>\n    <body>503: Service Unavailable</body></html>\n\n\n### Sharded Connections ###\n\nThey can be normal, or lazy connections. They can be sharded connection pools.\nNot all commands are supported on sharded connections.\n\nIf the command you're trying to run is not supported on sharded connections,\nthe connection handler will raise the ``NotImplementedError`` exception.\n\nSimple example with automatic sharding of keys between two redis servers:\n\n    #!/usr/bin/env python\n    # coding: utf-8\n\n    import txredisapi as redis\n\n    from twisted.internet import defer\n    from twisted.internet import reactor\n\n\n    @defer.inlineCallbacks\n    def main():\n        rc = yield redis.ShardedConnection([\"localhost:6379\", \"localhost:6380\"])\n        print rc\n        print \"Supported methods on sharded connections:\", rc.ShardedMethods\n\n        keys = []\n        for x in xrange(100):\n            key = \"foo%02d\" % x\n            yield rc.set(key, \"bar%02d\" % x)\n            keys.append(key)\n\n        # yey! mget is supported!\n        response = yield rc.mget(keys)\n        for val in response:\n            print val\n\n        yield rc.disconnect()\n\n\n    if __name__ == \"__main__\":\n        main().addCallback(lambda ign: reactor.stop())\n        reactor.run()\n\n\n### Transactions ###\n\nFor obvious reasons, transactions are NOT supported on sharded connections.\nBut they work pretty good on normal or lazy connections, and connection pools.\n\nNOTE: redis uses the following methods for transactions:\n\n- WATCH: synchronization\n- MULTI: start the transaction\n- EXEC: commit the transaction\n- DISCARD: you got it.\n\nBecause ``exec`` is a reserved word in Python, the command to commit is\n``commit``.\n\nExample:\n\n    #!/usr/bin/env python\n    # coding: utf-8\n\n    import txredisapi as redis\n\n    from twisted.internet import defer\n    from twisted.internet import reactor\n\n\n    @defer.inlineCallbacks\n    def main():\n        rc = yield redis.ConnectionPool()\n\n        # Remove the keys\n        yield rc.delete([\"a1\", \"a2\", \"a3\"])\n\n        # Start transaction\n        t = yield rc.multi()\n\n        # These will return \"QUEUED\" - even t.get(key)\n        yield t.set(\"a1\", \"1\")\n        yield t.set(\"a2\", \"2\")\n        yield t.set(\"a3\", \"3\")\n        yield t.get(\"a1\")\n\n        # Try to call get() while in a transaction.\n        # It will fail if it's not a connection pool, or if all connections\n        # in the pool are in a transaction.\n        # Note that it's rc.get(), not the transaction object t.get().\n        try:\n            v = yield rc.get(\"foo\")\n        print \"foo=\", v\n            except Exception, e:\n            print \"can't get foo:\", e\n\n        # Commit, and get all responses from transaction.\n        r = yield t.commit()\n        print \"commit=\", repr(r)\n\n        yield rc.disconnect()\n\n\n    if __name__ == \"__main__\":\n        main().addCallback(lambda ign: reactor.stop())\n        reactor.run()\n\nA \"COUNTER\" example, using WATCH/MULTI:\n\n     #!/usr/bin/env python\n     # coding: utf-8\n\n     import txredisapi as redis\n\n     from twisted.internet import defer\n     from twisted.internet import reactor\n\n\n     @defer.inlineCallbacks\n     def main():\n         rc = yield redis.ConnectionPool()\n\n         # Reset keys\n         yield rc.set(\"a1\", 0)\n\n         # Synchronize and start transaction\n         t = yield rc.watch(\"a1\")\n\n         # Load previous value\n         a1 = yield t.get(\"a1\")\n\n         # start the transactional pipeline\n         yield t.multi()\n\n         # modify and retrieve the new a1 value\n         yield t.set(\"a1\", a1 + 1)\n         yield t.get(\"a1\")\n\n         print \"simulating concurrency, this will abort the transaction\"\n         yield rc.set(\"a1\", 2)\n\n         try:\n             r = yield t.commit()\n             print \"commit=\", repr(r)\n         except redis.WatchError, e:\n             a1 = yield rc.get(\"a1\")\n             print \"transaction has failed.\"\n             print \"current a1 value: \", a1\n\n         yield rc.disconnect()\n\n\n     if __name__ == \"__main__\":\n         main().addCallback(lambda ign: reactor.stop())\n         reactor.run()\n\n\nCalling ``commit`` will cause it to return a list with the return of all\ncommands executed in the transaction. ``discard``, on the other hand, will\nnormally return just an ``OK``.\n\n### Pipelining ###\n\ntxredisapi automatically [pipelines](http://redis.io/topics/pipelining) all commands\nby sending next commands without waiting for the previous one to receive reply from\nserver. This works even on single connections and increases performance by reducing\nnumber of round-trip delays and. There are two exceptions, though:\n - no commands will be sent after blocking `blpop`, `brpop` or `brpoplpush` until\n   response is received;\n - transaction by `multi`/`commit` are also blocking connection making all other\n   commands to wait until transaction is executed.\n\nWhen you need to load tons of data to Redis it might be more effective to sent\ncommands in batches grouping them together offline to save on TCP packets and network\nstack overhead. You can do this using `pipeline` method to explicitly accumulate\ncommands and send them to server in a single batch. Be careful to not accumulate too\nmany commands: unreasonable batch size may eat up unexpected amount of memory on both\nclient and server side. Group commands in batches of, for example, 10k commands instead\nof sending all your data at once. The speed will be nearly the same, but the additional\nmemory used will be at max the amount needed to queue this 10k commands\n\nTo send commands in a batch:\n\n    #!/usr/bin/env python\n    # coding: utf-8\n\n    import txredisapi as redis\n\n    from twisted.internet import defer\n    from twisted.internet import reactor\n\n    @defer.inlineCallbacks\n    def main():\n        rc = yield redis.ConnectionPool()\n\n        # Start grouping commands\n        pipeline = yield rc.pipeline()\n\n        pipeline.set(\"foo\", 123)\n        pipeline.set(\"bar\", 987)\n        pipeline.get(\"foo\")\n        pipeline.get(\"bar\")\n\n        # Write those 2 sets and 2 gets to redis all at once, and wait\n        # for all replies before continuing.\n        results = yield pipeline.execute_pipeline()\n\n        print \"foo:\", results[2] # should be 123\n        print \"bar:\", results[3] # should be 987\n\n        yield rc.disconnect()\n\n    if __name__ == \"__main__\":\n        main().addCallback(lambda ign: reactor.stop())\n        reactor.run()\n\n### Authentication ###\n\nThis is how to authenticate::\n\n    #!/usr/bin/env python\n\n    import txredisapi\n    from twisted.internet import defer\n    from twisted.internet import reactor\n\n\n    @defer.inlineCallbacks\n    def main():\n        redis = yield txredisapi.Connection(password=\"foobared\")\n        yield redis.set(\"foo\", \"bar\")\n        print (yield redis.get(\"foo\"))\n        reactor.stop()\n\n\n    if __name__ == \"__main__\":\n        main()\n        reactor.run()\n        \n### Connection using Redis Sentinel ###\n\n`txredisapi` can discover Redis master and slaves addresses using \n[Redis Sentinel](http://redis.io/topics/sentinel) and automatically failover\nin case of server failure.\n\n    #!/usr/bin/env python\n    \n    from twisted.internet.task import react\n    import txredisapi\n    \n    @defer.inlineCallbacks\n    def main(reactor):\n        sentinel = txredisapi.Sentinel([(\"sentinel-a\", 26379), (\"sentinel-b\", 26379), (\"sentinel-c\", 26379)])\n        redis = sentinel.master_for(\"service_name\")\n        yield redis.set(\"foo\", \"bar\")\n        print (yield redis.get(\"foo\"))\n        yield redis.disconnect()\n        yield sentinel.disconnect()\n        \n    react(main)\n    \nUsual connection arguments like `dbid=N` or `poolsize=N` can be specified in\n`master_for()` call. Use `sentinel.slave_for()` to connect to one of the slaves \ninstead of master.\n\nAdd `min_other_sentinels=N` to `Sentinel` constructor call to make it obey information\nonly from sentinels that currently connected to specified number of other sentinels\nto minimize a risk of split-brain in case of network partitioning.\n\n\nCredits\n=======\nThanks to (in no particular order):\n\n- Alexandre Fiori\n\n  - Author of txredisapi\n\n- Gleicon Moraes\n\n  - Bug fixes, testing, and [RestMQ](http://github.com/gleicon/restmq>).\n  - For writing the Consistent Hashing algorithm used for sharding.\n\n- Dorian Raymer and Ludovico Magnocavallo\n\n  - Authors of the original *redis protocol for twisted*.\n\n- Vanderson Mota\n\n  - Initial pypi setup, and patches.\n\n- Jeethu Rao\n\n  - Contributed with test cases, and other ideas like support for travis-ci\n\n- Jeremy Archer\n\n  - Minor bugfixes.\n\n- Christoph Tavan (@ctavan)\n\n  - Idea and test case for nested multi bulk replies, minor command enhancements.\n\n- dgvncsz0f\n\n  - WATCH/UNWATCH commands\n\n- Ilia Glazkov\n\n  - Free connection selection algorithm for pools.\n  - Non-unicode charset fixes.\n  - SCAN commands\n\n- Matt Pizzimenti (mjpizz)\n\n  - pipelining support\n\n- Nickolai Novik (jettify)\n\n  - update of SET command\n\n- Evgeny Tataurov (etataurov)\n\n  - Ability to use hiredis protocol parser\n\n- Ilya Skriblovsky (IlyaSkriblovsky)\n\n  - Sentinel support\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"http://github.com/IlyaSkriblovsky/txredisapi","keywords":"","license":"http://www.apache.org/licenses/LICENSE-2.0","maintainer":"","maintainer_email":"","name":"txredisapi","package_url":"https://pypi.org/project/txredisapi/","platform":null,"project_url":"https://pypi.org/project/txredisapi/","project_urls":{"Homepage":"http://github.com/IlyaSkriblovsky/txredisapi"},"provides_extra":null,"release_url":"https://pypi.org/project/txredisapi/1.4.10/","requires_dist":["twisted","six"],"requires_python":"","summary":"non-blocking redis client for python","version":"1.4.10","yanked":false,"yanked_reason":null},"last_serial":18796123,"releases":{"0.2":[{"comment_text":"","digests":{"blake2b_256":"4862651157cb02b4c77d0489fe7caa8d36e592e9606df8f7bc042481ace58221","md5":"a1da96c18866b24c034b6b3a76ded6bd","sha256":"059c799d3a76e38edc5b7e9e16ee8fc525fb794049e0df58ca5880353d570029"},"downloads":-1,"filename":"txredisapi-0.2.tar.gz","has_sig":false,"md5_digest":"a1da96c18866b24c034b6b3a76ded6bd","packagetype":"sdist","python_version":"source","requires_python":null,"size":10009,"upload_time":"2010-10-28T18:10:20","upload_time_iso_8601":"2010-10-28T18:10:20.213057Z","url":"https://files.pythonhosted.org/packages/48/62/651157cb02b4c77d0489fe7caa8d36e592e9606df8f7bc042481ace58221/txredisapi-0.2.tar.gz","yanked":false,"yanked_reason":null}],"0.3":[{"comment_text":"","digests":{"blake2b_256":"22164f3f1bffbaaddcf7e2c519d0a26183d016642bf89e19ebab0d1256dbc07b","md5":"7bb4890e5214a54f1ed79a486514fde8","sha256":"1a35ef30d9ce09d4447480ee94ddb2f9edfc4aab13a3d1eb063efc4d709f9177"},"downloads":-1,"filename":"txredisapi-0.3.tar.gz","has_sig":false,"md5_digest":"7bb4890e5214a54f1ed79a486514fde8","packagetype":"sdist","python_version":"source","requires_python":null,"size":18730,"upload_time":"2012-02-18T00:47:38","upload_time_iso_8601":"2012-02-18T00:47:38.649387Z","url":"https://files.pythonhosted.org/packages/22/16/4f3f1bffbaaddcf7e2c519d0a26183d016642bf89e19ebab0d1256dbc07b/txredisapi-0.3.tar.gz","yanked":false,"yanked_reason":null}],"0.5":[{"comment_text":"","digests":{"blake2b_256":"467e90c2da8c857e6c5e707173c283cc50bb14bbb1be44891368bd16b6365ef1","md5":"31b32a65239dcd3be383984da3575866","sha256":"2eea02084b645a270ff58701d8c11a7da85b3fa949ce3e22e37e40ff7b4e16b7"},"downloads":-1,"filename":"txredisapi-0.5.tar.gz","has_sig":false,"md5_digest":"31b32a65239dcd3be383984da3575866","packagetype":"sdist","python_version":"source","requires_python":null,"size":11474,"upload_time":"2012-06-23T23:06:20","upload_time_iso_8601":"2012-06-23T23:06:20.756634Z","url":"https://files.pythonhosted.org/packages/46/7e/90c2da8c857e6c5e707173c283cc50bb14bbb1be44891368bd16b6365ef1/txredisapi-0.5.tar.gz","yanked":false,"yanked_reason":null}],"0.6":[{"comment_text":"","digests":{"blake2b_256":"0f4d138f33122c214c8a09de8b5f3918ccf7c2844efb75d49dfd3c1e4d3426ff","md5":"174e146939f813aee35aa742828ba9a2","sha256":"525c407f09962df809456d34189e16f75376eefc896e5058c7d10acb7a7987d7"},"downloads":-1,"filename":"txredisapi-0.6.tar.gz","has_sig":false,"md5_digest":"174e146939f813aee35aa742828ba9a2","packagetype":"sdist","python_version":"source","requires_python":null,"size":11739,"upload_time":"2012-07-13T14:37:20","upload_time_iso_8601":"2012-07-13T14:37:20.342063Z","url":"https://files.pythonhosted.org/packages/0f/4d/138f33122c214c8a09de8b5f3918ccf7c2844efb75d49dfd3c1e4d3426ff/txredisapi-0.6.tar.gz","yanked":false,"yanked_reason":null}],"0.8":[{"comment_text":"","digests":{"blake2b_256":"d54b16e7481513fb20b37f3c2e0443046d91b83a42df38e22c7b2e0dc9e957a4","md5":"3decbb1d5f2b7a86bd610eeab0f54716","sha256":"7dfdd5f3fad2e067abfea378d41ff2755b27d43c87aab8936a3a3f9ba6af1bc8"},"downloads":-1,"filename":"txredisapi-0.8.tar.gz","has_sig":false,"md5_digest":"3decbb1d5f2b7a86bd610eeab0f54716","packagetype":"sdist","python_version":"source","requires_python":null,"size":11910,"upload_time":"2012-08-03T08:39:21","upload_time_iso_8601":"2012-08-03T08:39:21.983210Z","url":"https://files.pythonhosted.org/packages/d5/4b/16e7481513fb20b37f3c2e0443046d91b83a42df38e22c7b2e0dc9e957a4/txredisapi-0.8.tar.gz","yanked":false,"yanked_reason":null}],"0.9":[{"comment_text":"","digests":{"blake2b_256":"e7511621fe93f0a9d0d09510258372cce5b2672cefc92ca842a7ceea18e1d71c","md5":"74c7383b39c39a50566703dfe80bcf9f","sha256":"6b8109b63a805ad0e99408c0523e3e9f2ebe254b24af819daa770eac86f279e9"},"downloads":-1,"filename":"txredisapi-0.9.tar.gz","has_sig":false,"md5_digest":"74c7383b39c39a50566703dfe80bcf9f","packagetype":"sdist","python_version":"source","requires_python":null,"size":12363,"upload_time":"2012-09-18T17:37:15","upload_time_iso_8601":"2012-09-18T17:37:15.102950Z","url":"https://files.pythonhosted.org/packages/e7/51/1621fe93f0a9d0d09510258372cce5b2672cefc92ca842a7ceea18e1d71c/txredisapi-0.9.tar.gz","yanked":false,"yanked_reason":null}],"1.0":[{"comment_text":"","digests":{"blake2b_256":"9cf3d7376a826ccd317e0846ad36bb4768f6beff209f7c318fe1644c0cf6ecde","md5":"f79ed1fd836251ac20db0f1cc0828691","sha256":"0d22327c2baa75e07fb625fe70f8bd539ea7863b7bac2b0a8de03d47a0132429"},"downloads":-1,"filename":"txredisapi-1.0.tar.gz","has_sig":false,"md5_digest":"f79ed1fd836251ac20db0f1cc0828691","packagetype":"sdist","python_version":"source","requires_python":null,"size":13173,"upload_time":"2012-12-31T15:02:35","upload_time_iso_8601":"2012-12-31T15:02:35.382548Z","url":"https://files.pythonhosted.org/packages/9c/f3/d7376a826ccd317e0846ad36bb4768f6beff209f7c318fe1644c0cf6ecde/txredisapi-1.0.tar.gz","yanked":false,"yanked_reason":null}],"1.1":[{"comment_text":"","digests":{"blake2b_256":"4dbb33890944a6d0dcefdb1bdee5202034a30a7380df98f4ce71c281b0f78287","md5":"7cb971bf78611c60f45c3ccf477c158d","sha256":"6bb4bc888ac7600dd8610f67d380c77e4428ce7510f8fc0e8fad21e139b69be1"},"downloads":-1,"filename":"txredisapi-1.1.tar.gz","has_sig":false,"md5_digest":"7cb971bf78611c60f45c3ccf477c158d","packagetype":"sdist","python_version":"source","requires_python":null,"size":14810,"upload_time":"2014-03-02T23:56:28","upload_time_iso_8601":"2014-03-02T23:56:28.609293Z","url":"https://files.pythonhosted.org/packages/4d/bb/33890944a6d0dcefdb1bdee5202034a30a7380df98f4ce71c281b0f78287/txredisapi-1.1.tar.gz","yanked":false,"yanked_reason":null}],"1.2":[{"comment_text":"","digests":{"blake2b_256":"4ad048530fcd760390f0db082bbf55b70d8d393ac590fcaa54b916c4b7147c3b","md5":"d8b2fb3b447e93bfffc126c6c06d7383","sha256":"93bd4e7727629f9934e1a65a53bfb82e1cb40265cbb06b82f414376c97d130bd"},"downloads":-1,"filename":"txredisapi-1.2.tar.gz","has_sig":false,"md5_digest":"d8b2fb3b447e93bfffc126c6c06d7383","packagetype":"sdist","python_version":"source","requires_python":null,"size":15424,"upload_time":"2014-07-28T11:09:03","upload_time_iso_8601":"2014-07-28T11:09:03.337550Z","url":"https://files.pythonhosted.org/packages/4a/d0/48530fcd760390f0db082bbf55b70d8d393ac590fcaa54b916c4b7147c3b/txredisapi-1.2.tar.gz","yanked":false,"yanked_reason":null}],"1.3":[{"comment_text":"","digests":{"blake2b_256":"8c7f19d56605436b8f5513acdcdbdaa31a8a17a6d5711814b83697d5ed146b39","md5":"17c932e02a7fed3d585a0a3220d933f4","sha256":"efd5e38875440079b475a5bca7e02c6fcf497bc71e6cc56c89f44b9ab53152f3"},"downloads":-1,"filename":"txredisapi-1.3.tar.gz","has_sig":false,"md5_digest":"17c932e02a7fed3d585a0a3220d933f4","packagetype":"sdist","python_version":"source","requires_python":null,"size":16095,"upload_time":"2015-06-30T02:39:12","upload_time_iso_8601":"2015-06-30T02:39:12.659468Z","url":"https://files.pythonhosted.org/packages/8c/7f/19d56605436b8f5513acdcdbdaa31a8a17a6d5711814b83697d5ed146b39/txredisapi-1.3.tar.gz","yanked":false,"yanked_reason":null}],"1.4":[{"comment_text":"","digests":{"blake2b_256":"fae6241001ad85b4f8d9c2021fa27719336f6f4c0880ca2db5b834ff2c515d02","md5":"a99594b2d6bea351c83f533c96e63288","sha256":"eb1a32c9213328fd96f7fda297be5bcbdd032f6569166766f1e1b16f24f903ac"},"downloads":-1,"filename":"txredisapi-1.4.zip","has_sig":false,"md5_digest":"a99594b2d6bea351c83f533c96e63288","packagetype":"sdist","python_version":"source","requires_python":null,"size":18987,"upload_time":"2016-01-12T14:16:34","upload_time_iso_8601":"2016-01-12T14:16:34.668517Z","url":"https://files.pythonhosted.org/packages/fa/e6/241001ad85b4f8d9c2021fa27719336f6f4c0880ca2db5b834ff2c515d02/txredisapi-1.4.zip","yanked":false,"yanked_reason":null}],"1.4.1":[{"comment_text":"","digests":{"blake2b_256":"da7aeb2ff9f1144e21565767bac21e44c6b1f074fd7b3b19f2431d74a05eb3b4","md5":"9484202a0a1d25eb0db7a2fcff431d37","sha256":"535e48b8698a151ca847deec2fd8501f1dde159104910b5f4884a34916e484dc"},"downloads":-1,"filename":"txredisapi-1.4.1.tar.gz","has_sig":false,"md5_digest":"9484202a0a1d25eb0db7a2fcff431d37","packagetype":"sdist","python_version":"source","requires_python":null,"size":16941,"upload_time":"2016-01-13T10:02:41","upload_time_iso_8601":"2016-01-13T10:02:41.597036Z","url":"https://files.pythonhosted.org/packages/da/7a/eb2ff9f1144e21565767bac21e44c6b1f074fd7b3b19f2431d74a05eb3b4/txredisapi-1.4.1.tar.gz","yanked":false,"yanked_reason":null}],"1.4.10":[{"comment_text":"","digests":{"blake2b_256":"b8a17a737e5bb288099c67e5c02e7928700882fd81882d7c223e1f714401f3bb","md5":"8d3c61ab10bf95091cdfbaecadfe2d06","sha256":"0a6ea77f27f8cf092f907654f08302a97b48fa35f24e0ad99dfb74115f018161"},"downloads":-1,"filename":"txredisapi-1.4.10-py3-none-any.whl","has_sig":false,"md5_digest":"8d3c61ab10bf95091cdfbaecadfe2d06","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":31003,"upload_time":"2023-07-07T05:34:35","upload_time_iso_8601":"2023-07-07T05:34:35.362784Z","url":"https://files.pythonhosted.org/packages/b8/a1/7a737e5bb288099c67e5c02e7928700882fd81882d7c223e1f714401f3bb/txredisapi-1.4.10-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"809a3ecb0d5fb8fc37c977673c3f2b43ff799ed46517549da768edb4fb5c750e","md5":"878c127a289a8f62a2b4aff914780eca","sha256":"7609a6af6ff4619a3189c0adfb86aeda789afba69eb59fc1e19ac0199e725395"},"downloads":-1,"filename":"txredisapi-1.4.10.tar.gz","has_sig":false,"md5_digest":"878c127a289a8f62a2b4aff914780eca","packagetype":"sdist","python_version":"source","requires_python":null,"size":31217,"upload_time":"2023-07-07T05:34:37","upload_time_iso_8601":"2023-07-07T05:34:37.307547Z","url":"https://files.pythonhosted.org/packages/80/9a/3ecb0d5fb8fc37c977673c3f2b43ff799ed46517549da768edb4fb5c750e/txredisapi-1.4.10.tar.gz","yanked":false,"yanked_reason":null}],"1.4.2":[{"comment_text":"","digests":{"blake2b_256":"eb7786ddb8e5e2ae1f472a4a152c23a383288af6744a1068ae8193474764300d","md5":"7754b470e386c09b15c28327ab9e9e1b","sha256":"0aa470994be5b3fea72199dee7bcb54017807aee1997726e6332ca7d29a8f5e0"},"downloads":-1,"filename":"txredisapi-1.4.2.tar.gz","has_sig":false,"md5_digest":"7754b470e386c09b15c28327ab9e9e1b","packagetype":"sdist","python_version":"source","requires_python":null,"size":16981,"upload_time":"2016-02-21T16:26:56","upload_time_iso_8601":"2016-02-21T16:26:56.669724Z","url":"https://files.pythonhosted.org/packages/eb/77/86ddb8e5e2ae1f472a4a152c23a383288af6744a1068ae8193474764300d/txredisapi-1.4.2.tar.gz","yanked":false,"yanked_reason":null}],"1.4.3":[{"comment_text":"","digests":{"blake2b_256":"4d6d9e373eac4d5c92fec5503c3164d401022636f4eeaa2fe8d204e841fb0cc4","md5":"4c341f2e33ccc4a8e4acba0ed1fc19dd","sha256":"b408b32011612e30ccbc3702a56261d8770f87ba52b5dcc0a2b122a34c308082"},"downloads":-1,"filename":"txredisapi-1.4.3.tar.gz","has_sig":false,"md5_digest":"4c341f2e33ccc4a8e4acba0ed1fc19dd","packagetype":"sdist","python_version":"source","requires_python":null,"size":17296,"upload_time":"2016-04-09T09:45:24","upload_time_iso_8601":"2016-04-09T09:45:24.928688Z","url":"https://files.pythonhosted.org/packages/4d/6d/9e373eac4d5c92fec5503c3164d401022636f4eeaa2fe8d204e841fb0cc4/txredisapi-1.4.3.tar.gz","yanked":false,"yanked_reason":null}],"1.4.4":[{"comment_text":"","digests":{"blake2b_256":"13e3d126637374793ceaeb9fab84e6be16308537790e137eed77f4bc2ad34266","md5":"5e0f184a643d1906941b5724b58b3309","sha256":"725caa2dc16b5aaeedf0d92c6dbc9eedd96a85320bf82dd68835edeae4c46f2c"},"downloads":-1,"filename":"txredisapi-1.4.4.tar.gz","has_sig":false,"md5_digest":"5e0f184a643d1906941b5724b58b3309","packagetype":"sdist","python_version":"source","requires_python":null,"size":19043,"upload_time":"2016-11-16T08:30:50","upload_time_iso_8601":"2016-11-16T08:30:50.543190Z","url":"https://files.pythonhosted.org/packages/13/e3/d126637374793ceaeb9fab84e6be16308537790e137eed77f4bc2ad34266/txredisapi-1.4.4.tar.gz","yanked":false,"yanked_reason":null}],"1.4.7":[{"comment_text":"","digests":{"blake2b_256":"fd86a7ddbd3ea9676fa608637c7b9c7ddab38557c831752cd5f8d384d126e803","md5":"752e3dd05f6a23ff89d6ed407cf97f8c","sha256":"34c9eba8d34f452d30661f073b67b8cd42b695e3d31678ec1bbf628a65a0f059"},"downloads":-1,"filename":"txredisapi-1.4.7-py3-none-any.whl","has_sig":false,"md5_digest":"752e3dd05f6a23ff89d6ed407cf97f8c","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":24264,"upload_time":"2019-12-03T07:51:58","upload_time_iso_8601":"2019-12-03T07:51:58.009764Z","url":"https://files.pythonhosted.org/packages/fd/86/a7ddbd3ea9676fa608637c7b9c7ddab38557c831752cd5f8d384d126e803/txredisapi-1.4.7-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f2f673f70a74627f1016bd7753a9c948c85dc986793d4dac55d7872e6d0b939e","md5":"ade251ba842331629532fd7b9a6af7bc","sha256":"e6cc43f51e35d608abdca8f8c7d20e148fe1d82679f6e584baea613ebec812bb"},"downloads":-1,"filename":"txredisapi-1.4.7.tar.gz","has_sig":false,"md5_digest":"ade251ba842331629532fd7b9a6af7bc","packagetype":"sdist","python_version":"source","requires_python":null,"size":25799,"upload_time":"2019-12-03T07:51:59","upload_time_iso_8601":"2019-12-03T07:51:59.646636Z","url":"https://files.pythonhosted.org/packages/f2/f6/73f70a74627f1016bd7753a9c948c85dc986793d4dac55d7872e6d0b939e/txredisapi-1.4.7.tar.gz","yanked":false,"yanked_reason":null}],"1.4.9":[{"comment_text":"","digests":{"blake2b_256":"9b416db8af81ac83a94c5ea23476ebf23a56d9899e04952c8d57ab2c1bc5ea45","md5":"f109ac5c781f5e0501ef0687ff0f5fd2","sha256":"72e6ad09cc5fffe3bec2e55e5bfb74407bd357565fc212e6003f7e26ef7d8f78"},"downloads":-1,"filename":"txredisapi-1.4.9-py3-none-any.whl","has_sig":false,"md5_digest":"f109ac5c781f5e0501ef0687ff0f5fd2","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":30967,"upload_time":"2023-03-18T09:13:09","upload_time_iso_8601":"2023-03-18T09:13:09.634501Z","url":"https://files.pythonhosted.org/packages/9b/41/6db8af81ac83a94c5ea23476ebf23a56d9899e04952c8d57ab2c1bc5ea45/txredisapi-1.4.9-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"626fb7ab3edd861c48266c2981a8dc8fc5b93184c53c2da902cf0b28b67a1a05","md5":"14ef45e3afdeacf9a4d70a1b612adb88","sha256":"c9607062d05e4d0b8ef84719eb76a3fe7d5ccd606a2acf024429da51d6e84559"},"downloads":-1,"filename":"txredisapi-1.4.9.tar.gz","has_sig":false,"md5_digest":"14ef45e3afdeacf9a4d70a1b612adb88","packagetype":"sdist","python_version":"source","requires_python":null,"size":55637,"upload_time":"2023-03-18T09:13:12","upload_time_iso_8601":"2023-03-18T09:13:12.103944Z","url":"https://files.pythonhosted.org/packages/62/6f/b7ab3edd861c48266c2981a8dc8fc5b93184c53c2da902cf0b28b67a1a05/txredisapi-1.4.9.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"b8a17a737e5bb288099c67e5c02e7928700882fd81882d7c223e1f714401f3bb","md5":"8d3c61ab10bf95091cdfbaecadfe2d06","sha256":"0a6ea77f27f8cf092f907654f08302a97b48fa35f24e0ad99dfb74115f018161"},"downloads":-1,"filename":"txredisapi-1.4.10-py3-none-any.whl","has_sig":false,"md5_digest":"8d3c61ab10bf95091cdfbaecadfe2d06","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":31003,"upload_time":"2023-07-07T05:34:35","upload_time_iso_8601":"2023-07-07T05:34:35.362784Z","url":"https://files.pythonhosted.org/packages/b8/a1/7a737e5bb288099c67e5c02e7928700882fd81882d7c223e1f714401f3bb/txredisapi-1.4.10-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"809a3ecb0d5fb8fc37c977673c3f2b43ff799ed46517549da768edb4fb5c750e","md5":"878c127a289a8f62a2b4aff914780eca","sha256":"7609a6af6ff4619a3189c0adfb86aeda789afba69eb59fc1e19ac0199e725395"},"downloads":-1,"filename":"txredisapi-1.4.10.tar.gz","has_sig":false,"md5_digest":"878c127a289a8f62a2b4aff914780eca","packagetype":"sdist","python_version":"source","requires_python":null,"size":31217,"upload_time":"2023-07-07T05:34:37","upload_time_iso_8601":"2023-07-07T05:34:37.307547Z","url":"https://files.pythonhosted.org/packages/80/9a/3ecb0d5fb8fc37c977673c3f2b43ff799ed46517549da768edb4fb5c750e/txredisapi-1.4.10.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
