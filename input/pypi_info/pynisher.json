{"info":{"author":"('Stefan Falkner, Christina Hernandez-Wunsch, Samuel Mueller,Matthias Feurer, Francisco Rivera, Eddie Bergman and Rene Sass',)","author_email":"feurerm@informatik.uni-freiburg.de","bugtrack_url":null,"classifiers":["License :: OSI Approved :: BSD License","Natural Language :: English","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],"description":"Pynisher is a library to limit resources of a function call in a synchronous manner.\nYou can use this to ensure that your function doesn't use up more resources than it\nshould.\n\n## Usage\n\nLimit the time a process can take\n```python\nimport pynisher\n\n\ndef sleepy(x: int) -> int:\n    time.sleep(x)\n    return x\n\n# You can also use `cpu_time` instead\nwith pynisher.limit(sleepy, wall_time=7) as limited_sleep:\n    x = limited_sleep(10)  # Will raise a TimeoutException\n```\n\nLimit the memory usage in a sequential manner\n```python\nfrom pynisher import limit, MemoryLimitException, WallTimeoutException\n\n\ndef train_memory_hungry_model(X, y) -> Model:\n    # ... do some thing\n    return model\n\nmodel_trainer = limit(\n    train_memory_hungry_model,\n    memory=(500, \"MB\"),\n    wall_time=(1.5, \"h\")  # 1h30m\n)\n\ntry:\n    model = model_trainer(X, y)\nexcept (WallTimeoutException, MemoryLimitException):\n    model = None\n```\n\nPassing `raises=False` means it will hide all errors and will return `EMPTY` if\nthere is no result to give back.\n\n```python\nfrom pynisher import limit, EMPTY\n\ndef f():\n    raise ValueError()\n\nlimited_f = limit(f, wall_time=(2, \"m\"), raises=False)\nresult = limited_f()\n\nif result is not EMPTY:\n    # ...\n```\n\n\nYou can even use the decorator, in which case it will always be limited.\nPlease note in [Details](#details) that support for this is limited and mostly\nfor Linux.\n```python\nfrom pynisher import restricted\n\n@restricted(wall_time=1, raises=False)\ndef notify_remote_server() -> Response:\n    \"\"\"We don't care that this fails, just give it a second to try\"\"\"\n    server = block_until_access(...)\n    response = server.notify()\n\nnotify_remote_server()\n# ... continue on even if it failed\n```\n\nYou can safely raise errors from inside your function and the same kind of error will be reraised\nwith a traceback.\n```python\nfrom pynisher import limit\n\n\ndef f():\n    raise ValueError()\n\nlimited_f = limit(f)\n\ntry:\n    limited_f()\nexcept ValueError as e:\n    ... # do what you need\n```\n\nIf returning very large items, prefer to save them to file first and then read the result as\nsending large objects through pipes can be very slow.\n\n```python\nfrom pathlib import Path\nimport pickle\n\nfrom pynisher import limit\n\ndef train_gpt3(save_path: Path) -> bool:\n    gpt3 = ...\n    gpt3.train()\n    with save_path.open('wb') as f:\n        pickle.dump(gpt3, f)\n\n    return True\n\npath = Path('gpt3.model')\ntrainer = limit(train_gpt3, memory=(1_000_000, \"gb\")):\n\ntry:\n    trainer(save_path=path)\n\n    with path.open(\"rb\") as f:\n        gpt3 = pickle.load(f)\n\nexcept MemoryLimitException as e:\n    ...\n```\n\n\n## Details\nPynisher works by running your function inside of a subprocess.\nOnce in the subprocess, the resources will be limited for that process before running your\nfunction. The methods for limiting specific resources can be found within the respective\n`pynisher/limiters/<platform>.py`.\n\n#### Features\nTo check if a feature is supported on your system:\n```python\nfrom pynisher import limit\n\n\nfor limit in [\"cpu_time\", \"wall_time\", \"memory\", \"decorator\"]:\n    print(f\"Supports {limit} - {supports(limit)}\")\n\n\nlimited_f = limit(f, ...)\nif not limited_f.supports(\"memory\"):\n    ...\n```\n\nCurrently we mainly support Linux with partial support for Mac and Windows:\n\n| OS      | `wall_time`        | `cpu_time`              | `memory`                | `@restricted`      |\n| --      | -----------        | ----------              | --------                | -------------      |\n| Linux   | :heavy_check_mark: | :heavy_check_mark:      | :heavy_check_mark:      | :heavy_check_mark: |\n| Windows | :heavy_check_mark: | :heavy_check_mark: (1.) | :heavy_check_mark: (1.) | :x:  (3.)          |\n| Mac     | :heavy_check_mark: | :heavy_check_mark: (4.) | :x: (2.)                | :x:  (3.)          |\n\n1. Limiting memory and cputime on Windows is done with the library `pywin32`. There seem\nto be installation issues when instead of using `conda install <x>`, you use `pip install <x>`\ninside a conda environment, specifically only with `Python 3.8` and `Python 3.9`.\nThe workaround is to instead install `pywin32` with conda, which can be done with\n`pip uninstall pywin32; conda install pywin32`.\nPlease see this [issue](https://github.com/mhammond/pywin32/issues/1865) for updates.\n\n2. Mac doesn't seem to allow for limiting a processes memory. No workaround has been found\nincluding trying `launchctl` which seems global and ignores memory limiting. Possibly `ulimit`\ncould work but needs to be tested. Using `setrlimit(RLIMIT_AS, (soft, hard))` does nothing\nand will either fail explicitly or silently, hence we advertise it is not supported.\nHowever, passing a memory limit on mac is still possible but may not do anything useful or\neven raise an error. If you are aware of a solution, please let us know.\n\n3. This is something due to how multiprocessing pickling protocols work, hence `@restricted(...)` does\nnot work for your Mac/Windows. Please use the `limit` method of limiting resources in this case.\n(Technically this is supported for Mac Python 3.7 though). This is likely due to the default\n`spawn` context for Windows and Mac but using other available methods on Mac also seems to not work.\nFor Linux, the `fork` and `forkserver` context seems to work.\n\n4. For unknown reasons, using `time.process_time()` to query the cpu time usage within a pynished function\nwill cause the `cpu_time` limits to be ignored on Mac, leading to a function that will hang indefinitly\nunless using some other limit. Please let us know if this is some known issue or any workarounds are\navailable.\n\n\n#### Parameters\nThe full list of options available with both `limit` and `@restricted` are:\n```python\n# The name given to the multiprocessing.Process\nname: str | None = None\n\n\n# The memory limit to place. Specify the amount of bytes or (int, unit) where unit\n# can be \"B\", \"KB\", \"MB\" or \"GB\"\nmemory: int | tuple[int, str] | None = None\n\n\n# The cpu time in seconds to limit the process to. This time is only counted while the\n# process is active.\n# Can provide in (time, units) such as (1.5, \"h\") to indicate one and a half hours.\n# Units available are \"s\", \"m\", \"h\"\ncpu_time: int | tuple[float, str] | None = None\n\n\n# The wall time in seconds to limit the process to\n# Can provide in (time, units) such as (1.5, \"h\") to indicate one and a half hours.\n# Units available are \"s\", \"m\", \"h\"\nwall_time: int | tuple[float, str] | None = None\n\n\n# Whether to throw any errors that occured in the subprocess or to silently\n# throw them away. If `True` and an Error was raised, `None` will be returned.\n# The errors raised in the subprocess will be the same type that are raised in\n# the controlling process. The exception to this are MemoryErrors which occur\n# in the subprocess, we convert these to MemoryLimitException.\nraises: bool = True\n\n\n# This is the multiprocess context used, please refer to their documentation\n# https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods\ncontext: \"fork\" | \"spawn\" | \"forkserver\" | BaseContext | None = None\n\n\n# Whether to emit warnings from  limit or not. The current warnings:\n# * When the memory limit is lower than the starting memory of a process\n# * When trying to remove the memory limit for sending back information\n#   from the subprocess to the main process\nwarnings: bool = True\n\n\n# How to handle errors. If `bool` then this decides whether or not to wrap them in\n# a pynisher exception. If `list`, you can specify which errors get wrapped in a\n# pynisher exception and if `dict`, you can specify what kind of errors get wrapped\n# and how. See `pynisher::Pynisher::__init__` for more details on `dict`\n#\n# * wrap_errors={ \"memory\": [ImportError, (OSError, 22)], \"pynisher\": [ValueError] }\n#\n# We check that the exception is explicitly of the same type and not just a subclass.\n# This is to prevent accidentally wrapping to eagerly.\nwrap_errors: bool | list[Exception] | dict = False\n\n\n# Whether to terminate child processes of your limited function.\n# By default, pynisher will kill any subprocesses your function may spawn. If this\n# is not desired behaviour, please use `daemon=True` with your spawned subprocesses\n# and set `terminate_child_processes` to `False`\nterminate_child_processes: bool = True\n\n# Whether keyboard interrupts should forceably kill any subprocess or the\n# pynished function. If True, it will temrinate the process tree of\n# the pynished function and then reraise the KeyboardInterrupt.\nforceful_keyboard_interrupt: bool = True\n```\n\n#### Exceptions\nPynisher will let all subprocess `Exceptions` buble up to the controlling process.\nIf a subprocess exceeds a limit, one of `CpuTimeoutException`, `WallTimeoutException` or `MemoryLimitException` are raised, but you can use their base classes to cover them more generally.\n\n```python\nclass PynisherException(Exception): ...\n    \"\"\"When a subprocess exceeds a limit\"\"\"\n\nclass TimeoutException(PynisherException): ...\n    \"\"\"When a subprocess exceeds a time limit (walltime or cputime)\"\"\"\n\nclass CpuTimeoutException(TimeoutException): ...\n    \"\"\"When a subprocess exceeds its cpu time limit\"\"\"\n\nclass WallTimeoutException(TimeoutException):\n    \"\"\"When a subprocess exceeds its wall time limit\"\"\"\n\nclass MemoryLimitException(PynisherException, MemoryError):\n    \"\"\"When a subprocess tries to allocate memory that would take it over the limit\n\n    This also inherits from MemoryError as it is technically a MemoryError that we\n    catch and convert.\n    \"\"\"\n```\n\n## Changes from v0.6.0\nFor simplicity, pynisher will no longer try to control `stdout`, `stderr`, instead\nusers can use the builtins `redirect_stdout` and `redirect_stderr` of Python to\nsend things as needed.\n\nPynisher issues warnings through `stderr`. Depending on how you set up the `context`\nto spawn a new process, using objects may now work as intended. The safest option\nis to write to a file if needed.\n\n```python\nfrom contextlib import redirect_stderr\n\n# You can always disable warnings\nlimited_f = limit(func, warnings=False)\n\n# Capture warnings in a file\n# Only seems to work properly on Linux\nwith open(\"stderr.txt\", \"w\") as stderr, redirect_stderr(stderr):\n    limited_f()\n\nwith open(\"stderr.txt\", \"r\") as stderr:\n    print(stderr.readlines())\n```\n\nThe support for passing a `logger` to `Pynisher` has also been removed. The only diagnostics\ninformation that would have been sent to the logger is not communicated with prints to `stderr`.\nThese diagnostic messages only occur when an attempt to limit resources failed\nThis can be captured or disabled as above.\n\nAny other kind of issue will raise an exception with relevant information.\n\nThe support for checking `exit_status` was removed and the success of a pynisher process can\nbe handled in the usual Python manner of checking for errors, with a `try: except:`. If you\ndon't care for the `exit_status` then use `f = limit(func, raises=False)` and you can\ncheck for output `output = f(...)`. This will be `None` if an error was raised and was `raises=False`.\n\nPynisher no longer times your function for you with `self.wall_clock_time`. If you need to measure\nthe duration it ran, please do so outside of `Pynisher`.\n\nThe exceptions were also changed, please see [Exceptions](#Exceptions)\n\n## Controlling namespace pollution\nAs an advanced use case, sometimes you might want to keep the modules imported for your\nlimited function to be local only, preventing this from leaking to the main process that\nruns created the limited function. You have three ways to control that the locally imported\nerror does not pollute the main namespace.\n\n```python\nimport sys\nfrom pynisher import PynisherException, limit\n\ndef import_sklearn() -> None:\n    \"\"\"Imports sklearn into a local namespace and has an sklearn object in its args\"\"\"\n    from sklearn.exceptions import NotFittedError\n    from sklearn.svm import SVR\n\n    assert \"sklearn\" in sys.modules.keys()\n    raise NotFittedError(SVR())\n\n\nif __name__ == \"__main__\":\n    # Wrapping all errors\n    lf = limit(import_sklearn, wrap_errors=True)\n    try:\n        lf()\n    except PynisherException:\n        assert \"sklearn\" not in sys.modules.keys()\n\n    # Wrapping only specific errors\n    lf = limit(import_sklearn, wrap_errors=[\"NotFittedError\"])\n    try:\n        lf()\n    except PynisherException:\n        assert \"sklearn\" not in sys.modules.keys()\n\n    # Wrapping that error specifically as a PynisherException\n    lf = limit(import_sklearn, wrap_errors={\"pynisher\": [\"NotFittedError\"]})\n    try:\n        lf()\n    except PynisherException:\n        assert \"sklearn\" not in sys.modules.keys()\n```\n\n\n## Pynisher and Multithreading\nWhen Pynisher is used together with the Python Threading library, it is possible to run into\na deadlock when using the standard ``fork`` method to start new processes as described in\n\n* https://github.com/Delgan/loguru/issues/231\n* https://gist.github.com/mfm24/e62ec5d50c672524107ca00a391e6104\n* https://github.com/dask/dask/issues/3759\n\nOne way of solving this would be to change the forking behavior as described\n`here <https://github.com/google/python-atfork/blob/main/atfork/stdlib_fixer.py>`_, but this is\nalso makes very strong assumptions on how the code is executed. An alternative is passing a\n`Context <https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods>`_\nwhich uses either ``spawn`` or ``forkserver`` as the process startup method.\n\n\n## Nested Pynisher and Multiprocessing contexts\nBe careful when using multiple contexts for multiprocessing while using `pynisher`. If your\npynished function spawns subprocess using `\"forkserver\"` while you set `pynisher` to use\nthe context `\"fork\"`, then issues can begin to occur when terminate processes.\n\n## Project origin\nThis repository is based on Stefan Falkner's https://github.com/sfalkner/pynisher.\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/automl/pynisher","keywords":"resources","license":"MIT","maintainer":"","maintainer_email":"","name":"pynisher","package_url":"https://pypi.org/project/pynisher/","platform":null,"project_url":"https://pypi.org/project/pynisher/","project_urls":{"Homepage":"https://github.com/automl/pynisher"},"provides_extra":null,"release_url":"https://pypi.org/project/pynisher/1.0.10/","requires_dist":["psutil","typing_extensions","pywin32; platform_system == \"Windows\"","pytest; extra == \"test\"","pre-commit; extra == \"test\"","pytest-cov; extra == \"test\"","pytest-forked; extra == \"test\"","pydocstyle[toml]; extra == \"test\"","isort; extra == \"test\"","black; extra == \"test\"","flake8; extra == \"test\"","mypy; extra == \"test\"","scikit-learn; extra == \"test\""],"requires_python":">=3.7","summary":"A library to limit the resources used by functions using subprocesses","version":"1.0.10","yanked":false,"yanked_reason":null},"last_serial":20611379,"releases":{"0.2":[{"comment_text":"","digests":{"blake2b_256":"8ae3b4cb9c1a75d78af036ec630a01f23922f87f505a2437482932bda01bd6f6","md5":"1fc5ca28ad028810c3a18d3788a2e433","sha256":"4bae0deba1f7de427e787bb98a5bbd106181d2a5d7d062585dcc8aff98759295"},"downloads":-1,"filename":"pynisher-0.2.tar.gz","has_sig":false,"md5_digest":"1fc5ca28ad028810c3a18d3788a2e433","packagetype":"sdist","python_version":"source","requires_python":null,"size":2933,"upload_time":"2015-07-21T13:50:57","upload_time_iso_8601":"2015-07-21T13:50:57.407081Z","url":"https://files.pythonhosted.org/packages/8a/e3/b4cb9c1a75d78af036ec630a01f23922f87f505a2437482932bda01bd6f6/pynisher-0.2.tar.gz","yanked":false,"yanked_reason":null}],"0.3.1":[{"comment_text":"built for Linux-4.1.12-gentoo-x86_64-Intel-R-_Core-TM-_i5-4690_CPU_@_3.50GHz-with-glibc2.3.4","digests":{"blake2b_256":"aba43c908aa2bd1f21f05ac8b8eda66f935b6a1ba434df2408f30efb52031c3e","md5":"c632ec3649d417f8696b50e357e8b992","sha256":"530b3d1e3a71d09261164f21b92ffffd1b0d3b9a7ab1bea847a1a3980fae14e4"},"downloads":-1,"filename":"pynisher-0.3.1.linux-x86_64.tar.gz","has_sig":false,"md5_digest":"c632ec3649d417f8696b50e357e8b992","packagetype":"bdist_dumb","python_version":"any","requires_python":null,"size":4560,"upload_time":"2016-01-14T13:50:26","upload_time_iso_8601":"2016-01-14T13:50:26.589327Z","url":"https://files.pythonhosted.org/packages/ab/a4/3c908aa2bd1f21f05ac8b8eda66f935b6a1ba434df2408f30efb52031c3e/pynisher-0.3.1.linux-x86_64.tar.gz","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"aa876e068b6420484fa3e2a35479667b6bca1785c2ff0ce4a83a8152d0510325","md5":"2496c2631ef14d20a224623b2bea59b2","sha256":"603c4499359abc0a9159036cdc8a233d04e3f9f8e4ebed1552df46a2f3b7e02f"},"downloads":-1,"filename":"pynisher-0.3.1.tar.gz","has_sig":false,"md5_digest":"2496c2631ef14d20a224623b2bea59b2","packagetype":"sdist","python_version":"source","requires_python":null,"size":3309,"upload_time":"2016-01-14T13:49:33","upload_time_iso_8601":"2016-01-14T13:49:33.399641Z","url":"https://files.pythonhosted.org/packages/aa/87/6e068b6420484fa3e2a35479667b6bca1785c2ff0ce4a83a8152d0510325/pynisher-0.3.1.tar.gz","yanked":false,"yanked_reason":null}],"0.4":[{"comment_text":"","digests":{"blake2b_256":"e01c6300893f6fc1d9ae72626978e7a3307d810e8419d8427aef5188bfc19c62","md5":"997727f1c8723ddbfc81246b2c8a6335","sha256":"724e738e2e5d1d0a4053f73185957cda3097e100ee98ae02c6f779742ced5767"},"downloads":-1,"filename":"pynisher-0.4.tar.gz","has_sig":false,"md5_digest":"997727f1c8723ddbfc81246b2c8a6335","packagetype":"sdist","python_version":"source","requires_python":null,"size":4656,"upload_time":"2016-02-17T15:34:38","upload_time_iso_8601":"2016-02-17T15:34:38.670983Z","url":"https://files.pythonhosted.org/packages/e0/1c/6300893f6fc1d9ae72626978e7a3307d810e8419d8427aef5188bfc19c62/pynisher-0.4.tar.gz","yanked":false,"yanked_reason":null}],"0.4.1":[{"comment_text":"","digests":{"blake2b_256":"abb9b338b32f175e8be5a2b73be9c7ebcfdb8aaa3a47c187c87db77d818c8112","md5":"947863c769368ed479785caafaab8b48","sha256":"0ead86900968fc123c7365ad76965306ccb3798a241cb39736513470ff35efa6"},"downloads":-1,"filename":"pynisher-0.4.1.tar.gz","has_sig":false,"md5_digest":"947863c769368ed479785caafaab8b48","packagetype":"sdist","python_version":"source","requires_python":null,"size":4887,"upload_time":"2016-03-07T19:31:43","upload_time_iso_8601":"2016-03-07T19:31:43.033529Z","url":"https://files.pythonhosted.org/packages/ab/b9/b338b32f175e8be5a2b73be9c7ebcfdb8aaa3a47c187c87db77d818c8112/pynisher-0.4.1.tar.gz","yanked":false,"yanked_reason":null}],"0.4.2":[{"comment_text":"","digests":{"blake2b_256":"d2cd4e0469a55fd280df177af2d5e94d72541d3bb0115280e31a23c8922987e6","md5":"5cd1e003ecda082200942f44108dc3b8","sha256":"b4cfd460143c6651db61ef494515a9c2fc83820fdc290b7da19b6486ff1f0a6b"},"downloads":-1,"filename":"pynisher-0.4.2.tar.gz","has_sig":false,"md5_digest":"5cd1e003ecda082200942f44108dc3b8","packagetype":"sdist","python_version":"source","requires_python":null,"size":4897,"upload_time":"2016-04-18T13:36:09","upload_time_iso_8601":"2016-04-18T13:36:09.974848Z","url":"https://files.pythonhosted.org/packages/d2/cd/4e0469a55fd280df177af2d5e94d72541d3bb0115280e31a23c8922987e6/pynisher-0.4.2.tar.gz","yanked":false,"yanked_reason":null}],"0.5.0":[{"comment_text":"","digests":{"blake2b_256":"b221c86c64c305da6d43fb89780d33cbc839c07736b71955a8bdb642a02b7538","md5":"0efbb037bcbb900be15dbc1e3004ab15","sha256":"1b1079315ad1009de108c9ad701f6ae5274264e64503fc22c2de366d99953f34"},"downloads":-1,"filename":"pynisher-0.5.0.tar.gz","has_sig":false,"md5_digest":"0efbb037bcbb900be15dbc1e3004ab15","packagetype":"sdist","python_version":"source","requires_python":null,"size":4980,"upload_time":"2018-09-10T20:57:39","upload_time_iso_8601":"2018-09-10T20:57:39.926456Z","url":"https://files.pythonhosted.org/packages/b2/21/c86c64c305da6d43fb89780d33cbc839c07736b71955a8bdb642a02b7538/pynisher-0.5.0.tar.gz","yanked":false,"yanked_reason":null}],"0.6.0":[{"comment_text":"","digests":{"blake2b_256":"e64f6efff11a0a4d15fb168e22f14aec8fcb76332a97691338e79acd0fb9ab01","md5":"20677783150c1f8146a2a7ffb1a6dfc3","sha256":"82245ccd65a9f0e161f7f1b121a9a232a361f37d18be7caf6985d1cc56b54fb3"},"downloads":-1,"filename":"pynisher-0.6.0.tar.gz","has_sig":false,"md5_digest":"20677783150c1f8146a2a7ffb1a6dfc3","packagetype":"sdist","python_version":"source","requires_python":null,"size":5481,"upload_time":"2020-09-07T12:53:07","upload_time_iso_8601":"2020-09-07T12:53:07.368713Z","url":"https://files.pythonhosted.org/packages/e6/4f/6efff11a0a4d15fb168e22f14aec8fcb76332a97691338e79acd0fb9ab01/pynisher-0.6.0.tar.gz","yanked":false,"yanked_reason":null}],"0.6.1":[{"comment_text":"","digests":{"blake2b_256":"102323480e4e6ad55bc5f31bcc3c4ad48a3aeb33a02aff46c174670be91be104","md5":"79e970e024744a56ebdae1f14017d713","sha256":"d82fb94c9ff2ed8f34d1cc9a2c6feb61f794cf931bd33a7f0628896bf450916f"},"downloads":-1,"filename":"pynisher-0.6.1.tar.gz","has_sig":false,"md5_digest":"79e970e024744a56ebdae1f14017d713","packagetype":"sdist","python_version":"source","requires_python":null,"size":5578,"upload_time":"2020-09-29T14:51:22","upload_time_iso_8601":"2020-09-29T14:51:22.737297Z","url":"https://files.pythonhosted.org/packages/10/23/23480e4e6ad55bc5f31bcc3c4ad48a3aeb33a02aff46c174670be91be104/pynisher-0.6.1.tar.gz","yanked":false,"yanked_reason":null}],"0.6.2":[{"comment_text":"","digests":{"blake2b_256":"db5900101d6e1153a4d5cc05ac2439c3737963d133c7d0cc4b4ad71827875a69","md5":"085665053fe789c295d8afe4d957eb65","sha256":"fa43a9e65a2a24601c1e269df0828e24cace9f5bed0a4d48ba3e3fb2861e8a30"},"downloads":-1,"filename":"pynisher-0.6.2.tar.gz","has_sig":false,"md5_digest":"085665053fe789c295d8afe4d957eb65","packagetype":"sdist","python_version":"source","requires_python":null,"size":6026,"upload_time":"2020-11-20T09:51:18","upload_time_iso_8601":"2020-11-20T09:51:18.290562Z","url":"https://files.pythonhosted.org/packages/db/59/00101d6e1153a4d5cc05ac2439c3737963d133c7d0cc4b4ad71827875a69/pynisher-0.6.2.tar.gz","yanked":false,"yanked_reason":null}],"0.6.3":[{"comment_text":"","digests":{"blake2b_256":"be35b8dc446bee0358f59e4abdc781004b80c7d3b9eb9bc3564116c1bfd47e5f","md5":"1ed9cd1e19191df021a20eeee94ccab0","sha256":"e4e1d9366fc4ca60b4b2354b6d12e65600600a8c7bf4392c84f2f4ff4abc85ff"},"downloads":-1,"filename":"pynisher-0.6.3.tar.gz","has_sig":false,"md5_digest":"1ed9cd1e19191df021a20eeee94ccab0","packagetype":"sdist","python_version":"source","requires_python":null,"size":6049,"upload_time":"2020-11-24T12:18:04","upload_time_iso_8601":"2020-11-24T12:18:04.627005Z","url":"https://files.pythonhosted.org/packages/be/35/b8dc446bee0358f59e4abdc781004b80c7d3b9eb9bc3564116c1bfd47e5f/pynisher-0.6.3.tar.gz","yanked":false,"yanked_reason":null}],"0.6.4":[{"comment_text":"","digests":{"blake2b_256":"8d39edac9acf3bd245ecf475151014cce3652c25ca3c2352eac725502cfce6ea","md5":"2c8db94267bf9543c7263468a05a7449","sha256":"111d91aad471375c0509a912415ff90053ef909100facf412511383af107c124"},"downloads":-1,"filename":"pynisher-0.6.4.tar.gz","has_sig":false,"md5_digest":"2c8db94267bf9543c7263468a05a7449","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":11594,"upload_time":"2021-02-24T19:58:20","upload_time_iso_8601":"2021-02-24T19:58:20.089542Z","url":"https://files.pythonhosted.org/packages/8d/39/edac9acf3bd245ecf475151014cce3652c25ca3c2352eac725502cfce6ea/pynisher-0.6.4.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0":[{"comment_text":"","digests":{"blake2b_256":"43db19c7617fb5d4f2225449a8ce80a4d02de64e8f68d71ce0fc0322c2426b4d","md5":"87d6ca227f8f5067517fabe9eaadb858","sha256":"e4525008dfb23b5821ec72b8ecc451fd202bf10ce2c776dfae3cb3b1a9014170"},"downloads":-1,"filename":"pynisher-1.0.0.tar.gz","has_sig":false,"md5_digest":"87d6ca227f8f5067517fabe9eaadb858","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":30183,"upload_time":"2022-08-15T06:52:24","upload_time_iso_8601":"2022-08-15T06:52:24.850755Z","url":"https://files.pythonhosted.org/packages/43/db/19c7617fb5d4f2225449a8ce80a4d02de64e8f68d71ce0fc0322c2426b4d/pynisher-1.0.0.tar.gz","yanked":false,"yanked_reason":null}],"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"03f9f6779c9e5c72d0dbd51e633e22a1f2158a625de4c63115f8a83d340d7f74","md5":"001e4b7fae3659f125dde64228158f99","sha256":"cef15ca67bd082e655ef099006a38bbc6bf19fe9ba4a7994b4c23c441c53b51b"},"downloads":-1,"filename":"pynisher-1.0.1.tar.gz","has_sig":false,"md5_digest":"001e4b7fae3659f125dde64228158f99","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":28815,"upload_time":"2023-03-13T21:05:24","upload_time_iso_8601":"2023-03-13T21:05:24.575356Z","url":"https://files.pythonhosted.org/packages/03/f9/f6779c9e5c72d0dbd51e633e22a1f2158a625de4c63115f8a83d340d7f74/pynisher-1.0.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.10":[{"comment_text":"","digests":{"blake2b_256":"eb561d5ed36041e11c943833a93137ff2562db97da48851d68431f1feaa8f82f","md5":"f207633c8023c5a63d59d8932573e8fc","sha256":"2722b795d22129ddd5247038bba727ae06ecdb3a5942070817be7c8d4a680e31"},"downloads":-1,"filename":"pynisher-1.0.10.tar.gz","has_sig":false,"md5_digest":"f207633c8023c5a63d59d8932573e8fc","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":30841,"upload_time":"2023-11-13T17:58:47","upload_time_iso_8601":"2023-11-13T17:58:47.159991Z","url":"https://files.pythonhosted.org/packages/eb/56/1d5ed36041e11c943833a93137ff2562db97da48851d68431f1feaa8f82f/pynisher-1.0.10.tar.gz","yanked":false,"yanked_reason":null}],"1.0.2":[{"comment_text":"","digests":{"blake2b_256":"ac01b7b6899686c440cc3ec2d08672fe6989d7ae465c74eadcd61379a0bda2e1","md5":"e52ddd356ded30f9a88ec78e34621b45","sha256":"0642911415809ec90836b06908ef7412a85c20cc9e0818919fb59b6254ec407e"},"downloads":-1,"filename":"pynisher-1.0.2.tar.gz","has_sig":false,"md5_digest":"e52ddd356ded30f9a88ec78e34621b45","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":28843,"upload_time":"2023-03-14T15:32:35","upload_time_iso_8601":"2023-03-14T15:32:35.134714Z","url":"https://files.pythonhosted.org/packages/ac/01/b7b6899686c440cc3ec2d08672fe6989d7ae465c74eadcd61379a0bda2e1/pynisher-1.0.2.tar.gz","yanked":false,"yanked_reason":null}],"1.0.3":[{"comment_text":"","digests":{"blake2b_256":"65dcb1a3858d80c9c6cc8c04e834b223557e63f9e0551d3b197121e355ef7b74","md5":"9638cdb630667eb6bd4da34619a2ed4c","sha256":"2156f60967045b5ef12feb237201e17c1f8d3054879114c87aea7debd2279003"},"downloads":-1,"filename":"pynisher-1.0.3.tar.gz","has_sig":false,"md5_digest":"9638cdb630667eb6bd4da34619a2ed4c","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":28895,"upload_time":"2023-03-19T12:58:02","upload_time_iso_8601":"2023-03-19T12:58:02.805005Z","url":"https://files.pythonhosted.org/packages/65/dc/b1a3858d80c9c6cc8c04e834b223557e63f9e0551d3b197121e355ef7b74/pynisher-1.0.3.tar.gz","yanked":false,"yanked_reason":null}],"1.0.4":[{"comment_text":"","digests":{"blake2b_256":"0a16d053c45db6297062129988531c617d1ce4ebd47896940b6200c8d3d8292e","md5":"14ee8d476d5d03ad282877baacf316d0","sha256":"e6ebcd4dfd62fd01a86f65229a1ed7c73962617af477f06e53628e4e60abf96b"},"downloads":-1,"filename":"pynisher-1.0.4.tar.gz","has_sig":false,"md5_digest":"14ee8d476d5d03ad282877baacf316d0","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":28889,"upload_time":"2023-03-19T12:59:55","upload_time_iso_8601":"2023-03-19T12:59:55.058404Z","url":"https://files.pythonhosted.org/packages/0a/16/d053c45db6297062129988531c617d1ce4ebd47896940b6200c8d3d8292e/pynisher-1.0.4.tar.gz","yanked":false,"yanked_reason":null}],"1.0.5":[{"comment_text":"","digests":{"blake2b_256":"06c9ae65927f382f80e99841d05b3ef19fc5dd6fa0684f00812ed055c0909821","md5":"cba30d588a25def55416e31e1fb93371","sha256":"bac4a8c200b0193013897d5d6cfa5270ef7f148f84e7aeddbc6671002fb34b5e"},"downloads":-1,"filename":"pynisher-1.0.5.tar.gz","has_sig":false,"md5_digest":"cba30d588a25def55416e31e1fb93371","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":28899,"upload_time":"2023-03-19T16:43:22","upload_time_iso_8601":"2023-03-19T16:43:22.226435Z","url":"https://files.pythonhosted.org/packages/06/c9/ae65927f382f80e99841d05b3ef19fc5dd6fa0684f00812ed055c0909821/pynisher-1.0.5.tar.gz","yanked":false,"yanked_reason":null}],"1.0.6":[{"comment_text":"","digests":{"blake2b_256":"b7338e9a0cbf2bd7aeb6a2b2a003d8ebe6c19fda10150d4efdae1dacd78d4fac","md5":"42e7db553117a04189b6716a8d650aea","sha256":"2b259b5c10d230b6bf9b575e8da520001d119bbbadb0c7c0faacf7a167c87ad3"},"downloads":-1,"filename":"pynisher-1.0.6.tar.gz","has_sig":false,"md5_digest":"42e7db553117a04189b6716a8d650aea","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":28967,"upload_time":"2023-07-17T09:43:37","upload_time_iso_8601":"2023-07-17T09:43:37.042845Z","url":"https://files.pythonhosted.org/packages/b7/33/8e9a0cbf2bd7aeb6a2b2a003d8ebe6c19fda10150d4efdae1dacd78d4fac/pynisher-1.0.6.tar.gz","yanked":false,"yanked_reason":null}],"1.0.7":[{"comment_text":"","digests":{"blake2b_256":"6f05bcb70c171ee9a85b245034e428e4f88f34a34637cfa620233eef90b0fb33","md5":"7427935d192647811b284cc7e9ce25aa","sha256":"72a811a15dc0267f7acc024319b449e5edf1393bae8e606ef07c198b6450e866"},"downloads":-1,"filename":"pynisher-1.0.7.tar.gz","has_sig":false,"md5_digest":"7427935d192647811b284cc7e9ce25aa","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":29056,"upload_time":"2023-07-19T09:31:05","upload_time_iso_8601":"2023-07-19T09:31:05.521439Z","url":"https://files.pythonhosted.org/packages/6f/05/bcb70c171ee9a85b245034e428e4f88f34a34637cfa620233eef90b0fb33/pynisher-1.0.7.tar.gz","yanked":false,"yanked_reason":null}],"1.0.8":[{"comment_text":"","digests":{"blake2b_256":"6b7ed0858a7b8d2c2fdc9a886f1259e08052635a323a42673a804392022efcc2","md5":"4cf900275e8c33d10a2564747736bbe8","sha256":"0531f7e33bfb38069529cdb454049fbf741ac40b7f635e0391dfcf068fd5eafa"},"downloads":-1,"filename":"pynisher-1.0.8.tar.gz","has_sig":false,"md5_digest":"4cf900275e8c33d10a2564747736bbe8","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":29479,"upload_time":"2023-07-24T09:35:07","upload_time_iso_8601":"2023-07-24T09:35:07.462382Z","url":"https://files.pythonhosted.org/packages/6b/7e/d0858a7b8d2c2fdc9a886f1259e08052635a323a42673a804392022efcc2/pynisher-1.0.8.tar.gz","yanked":false,"yanked_reason":null}],"1.0.9":[{"comment_text":"","digests":{"blake2b_256":"e2b4f3bedf863f036956cb7e8a0e209fe8a7dfa644256c2c03b9709d2c62d79f","md5":"28d1f76dea87ccd58e2cfbbd12c4e7fd","sha256":"865379b9496099c8a942a9abdb6ac1db8e681173947b9581f635a8ecc5d75621"},"downloads":-1,"filename":"pynisher-1.0.9.tar.gz","has_sig":false,"md5_digest":"28d1f76dea87ccd58e2cfbbd12c4e7fd","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":30397,"upload_time":"2023-08-16T11:38:25","upload_time_iso_8601":"2023-08-16T11:38:25.883161Z","url":"https://files.pythonhosted.org/packages/e2/b4/f3bedf863f036956cb7e8a0e209fe8a7dfa644256c2c03b9709d2c62d79f/pynisher-1.0.9.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"eb561d5ed36041e11c943833a93137ff2562db97da48851d68431f1feaa8f82f","md5":"f207633c8023c5a63d59d8932573e8fc","sha256":"2722b795d22129ddd5247038bba727ae06ecdb3a5942070817be7c8d4a680e31"},"downloads":-1,"filename":"pynisher-1.0.10.tar.gz","has_sig":false,"md5_digest":"f207633c8023c5a63d59d8932573e8fc","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":30841,"upload_time":"2023-11-13T17:58:47","upload_time_iso_8601":"2023-11-13T17:58:47.159991Z","url":"https://files.pythonhosted.org/packages/eb/56/1d5ed36041e11c943833a93137ff2562db97da48851d68431f1feaa8f82f/pynisher-1.0.10.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
