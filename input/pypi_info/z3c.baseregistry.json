{"info":{"author":"Stephan Richter, Roger Ineichen and the Zope Community","author_email":"zope-dev@zope.dev","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Framework :: Zope :: 3","Intended Audience :: Developers","License :: OSI Approved :: Zope Public License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: Implementation :: CPython","Programming Language :: Python :: Implementation :: PyPy","Topic :: Internet :: WWW/HTTP"],"description":"The purpose of this package is to define, populate and use multiple IComponents\ninstances using filesystem-based development in other words, Python code and\nZCML.\n\n\nDetailed Documentation\n======================\n\n===============\nBase Components\n===============\n\nThe purpose of this package is to define, populate and use multiple\n``IComponents`` instances using filesystem-based development -- in other\nwords, Python code and ZCML.\n\n\nMotivation\n----------\n\nThe current state of the component architecture allows us to\n\n1.  create a global components registry, populate it using ZCML, and use it\n    via the ``zope.component`` API functions.\n\n2.  define local sites (local components registries), populate them with local\n    (persistent) components, and use them selectively based on location --\n    commonly defined by the path of the URL.\n\nUnfortunately, it is impossible to populate local sites with ZCML. The main\nreason is the lack of addressability of local sites during the initial startup\nprocess.\n\nHowever, on the other hand we have a very advanced UI configuration system\nthat involves views, resources, layers and skins. So let's compare the two.\n\n1.  Views/Resources in the UI are like registered components in the component\n    architecture.\n\n2.  Skin Layers in the UI behave very much like registries. The default skin\n    is like the global base registry. Skins, like local sites, are activated\n    during traversal, but can be populated using ZCML.\n\n3.  Layers are really base layers to the skin layer. The equivalent in the\n    component architecture is to specify bases for a components registry,\n    which is possible since the Great Component Architecture refactoring for\n    Zope 3.3 in 2006.\n\nBut layers can be defined and configured via ZCML. The purpose of this package\nis to be able to create base components registries and then populate them\nusing ZCML. (As a side note: As skin layers and layers are practically the\nsame components, there is no difference between the concept of global, local\nand base components registries.)\n\nThe second feature is specific to the Zope application server. It provides an\nUI to set the bases on a local site manager. The user can select among all\nregistries that have been registered as ``IComponents`` utilities.\n\nThere are also a few options that could be considered in the future. For\nexample, it would be simple to integrate the ``zope:registerIn`` directive\n(see below for documentation) into the ``zope:configure`` directive.\n\nIf the above text is too dry and theoretical for you, here is the\nsummary. This package\n\n1.  implements Steve Alexander's long dream (at least 3 years) of defining\n    local sites via ZCML.\n\n2.  solves all of my (Stephan Richter) problems I am having with a complex\n    Application Service Provider (ASP) setup.\n\n3.  implements a missing feature that you and everyone else really wanted,\n    even if you did not know it yet.\n\nThanks goes to Jim Fulton, whose outstanding design of the\n``zope.configuration`` and ``zope.component`` packages made the implementation\nof the feature such a breeze. I also want to thank Fred Drake for helping with\nthe initial design ideas.\n\n\n\"Base Components\" Registries\n----------------------------\n\nBase registries are global component registries implementing the\n``IComponents`` interface. In comparison to the base global registry (also\nknown as ``globalSiteManager``), these registries are not necessarily\navailable via module globals and *must* be registered with a parent registry,\nmost commonly the base global registry:\n\n  >>> from z3c.baseregistry import baseregistry\n  >>> import zope.component\n  >>> myRegistry = baseregistry.BaseComponents(\n  ...     zope.component.globalSiteManager, 'myRegistry')\n\n  >>> myRegistry\n  <BaseComponents myRegistry>\n\nAnother *VERY IMPORTANT* requirement is that ``zope.component`` hooks are in\nplace. Install the hooks now:\n\n  >>> import zope.component.hooks\n  >>> zope.component.hooks.setHooks()\n\n\nSince this registry does not implement any of the ``IComponents`` API itself,\nit is not necessary to demonstrate those features here. Please see the\ncorresponding documentation in the ``zope.component`` package.\n\nOne feature of global registries must be that they pickle efficiently, since\nthey can be referenced in persisted objects. As you can see, the base registry\npickles quite well:\n\n  >>> import pickle\n  >>> jar = pickle.dumps(myRegistry, 2)\n  >>> len(jar) <= 100\n  True\n\nHowever, when reading the jar, we get an error:\n\n  >>> pickle.loads(jar)\n  Traceback (most recent call last):\n  ...\n  zope.interface.interfaces.ComponentLookupError: (<InterfaceClass zope.interface.interfaces.IComponents>, 'myRegistry')\n\nThis is because we have not registered the registry in its parent as an\n``IComponents`` utility, yet:\n\n  >>> from zope.interface.interfaces import IComponents\n  >>> zope.component.provideUtility(myRegistry, IComponents, 'myRegistry')\n\n  >>> pickle.loads(jar)\n  <BaseComponents myRegistry>\n\nThus it is very important that you *always* register your base registry with\nits parent!\n\nLike any other components registry, a base registry can also have bases:\n\n  >>> myOtherRegistry = baseregistry.BaseComponents(\n  ...     zope.component.globalSiteManager, 'myRegistry', (myRegistry,))\n  >>> myOtherRegistry.__bases__\n  (<BaseComponents myRegistry>,)\n\nLet's now have a look at how base registries can be defined and used\nvia ZCML, which is the usual mode of operation.\n\n\nDefining Base Registries\n------------------------\n\nThe above tasks are more commonly done in ZCML. Base components registries --\nor any ``IComponents`` implementation for that matter -- can be seen as\nutilities providing the aforementioned interface and are distinguishable by\nname. So let's define a \"custom\" registry:\n\n  >>> custom = baseregistry.BaseComponents(\n  ...     zope.component.globalSiteManager, 'custom')\n\nLet's make sure that the parent of the custom registry is the base registry:\n\n  >>> custom.__parent__\n  <BaseGlobalComponents base>\n\nThe registry is then registered using the standard utility directive. After\nloading the meta directives for this package,\n\n  >>> from zope.configuration import xmlconfig\n  >>> from zope.configuration.config import ConfigurationConflictError\n  >>> context = xmlconfig.string('''\n  ... <configure i18n_domain=\"zope\">\n  ...   <include package=\"z3c.baseregistry\" file=\"meta.zcml\" />\n  ...   <include package=\"zope.component\" file=\"meta.zcml\" />\n  ... </configure>\n  ... ''')\n\nwe can register the registry:\n\n  >>> context = xmlconfig.string('''\n  ... <configure xmlns=\"http://namespaces.zope.org/zope\" i18n_domain=\"zope\">\n  ...\n  ...   <utility\n  ...       component=\"README.custom\"\n  ...       provides=\"zope.interface.interfaces.IComponents\"\n  ...       name=\"custom\" />\n  ...\n  ... </configure>\n  ... ''', context=context)\n\nThe new registry can now be accessed as follows:\n\n  >>> custom = zope.component.getUtility(IComponents, name='custom')\n  >>> custom\n  <BaseComponents custom>\n\n\nPopulating Different Registries\n-------------------------------\n\nNow to the interesting part. Let's register components for both the global\nbase and the \"custom\" registry. Let's first create some utilities we can\nregister:\n\n  >>> import zope.interface\n\n  >>> class IExample(zope.interface.Interface):\n  ...     name = zope.interface.Attribute('Name of Example')\n\n  >>> @zope.interface.implementer(IExample)\n  ... class Example(object):\n  ...     def __init__(self, name):\n  ...         self.name = name\n  ...     def __repr__(self):\n  ...         return '<%s %r>' %(self.__class__.__name__, self.name)\n\n  >>> example1 = Example('example1')\n  >>> example2 = Example('example2')\n\nCreate some adapters we can register:\n\n  >>> class IToAdapt1(zope.interface.Interface):\n  ...     pass\n\n  >>> class IToAdapt2(zope.interface.Interface):\n  ...     pass\n\n  >>> class IAdapted(zope.interface.Interface):\n  ...     pass\n\n  >>> @zope.component.adapter(IToAdapt1)\n  ... @zope.interface.implementer(IAdapted)\n  ... def adapter1(context):\n  ...     return \"adapted1\"\n\n  >>> @zope.component.adapter(IToAdapt2)\n  ... @zope.interface.implementer(IAdapted)\n  ... def adapter2(context):\n  ...     return \"adapted2\"\n\n  >>> @zope.interface.implementer(IToAdapt1)\n  ... class ToAdapt1(object):\n  ...     def __init__(self, name):\n  ...         self.name = name\n  ...     def __repr__(self):\n  ...         return '<%s %r>' %(self.__class__.__name__, self.name)\n  >>> toAdapt1 = ToAdapt1('toAdapt1')\n\n  >>> @zope.interface.implementer(IToAdapt2)\n  ... class ToAdapt2(object):\n  ...     def __init__(self, name):\n  ...         self.name = name\n  ...     def __repr__(self):\n  ...         return '<%s %r>' %(self.__class__.__name__, self.name)\n  >>> toAdapt2 = ToAdapt2('toAdapt2')\n\nLet' now register \"example1\", adapter1 in the global registry\nand \"example2\", \"adapter2\" in our custom registry:\n\n  >>> context = xmlconfig.string('''\n  ... <configure xmlns=\"http://namespaces.zope.org/zope\" i18n_domain=\"zope\">\n  ...\n  ...   <utility component=\"README.example1\"\n  ...            name=\"example1\" />\n  ...   <adapter\n  ...         factory=\"README.adapter1\"\n  ...         name=\"adapter1\"/>\n  ...\n  ...   <registerIn registry=\"README.custom\">\n  ...     <utility component=\"README.example2\"\n  ...              name=\"example2\" />\n  ...     <adapter\n  ...         factory=\"README.adapter2\"\n  ...         name=\"adapter2\"/>\n  ...   </registerIn>\n  ...\n  ... </configure>\n  ... ''', context=context)\n\nLet's now make sure that the utilities have been registered in the right\nregistry:\n\n  >>> zope.component.getUtility(IExample, name=\"example1\")\n  <Example 'example1'>\n\n  >>> zope.component.getUtility(IExample, name=\"example2\")\n  Traceback (most recent call last):\n  ...\n  zope.interface.interfaces.ComponentLookupError: (<InterfaceClass README.IExample>, 'example2')\n\nLet's now make sure that the adapters have been registered in the right\nregistry:\n\n  >>> zope.component.getAdapter(toAdapt1, IAdapted, name=\"adapter1\")\n  'adapted1'\n\n  >>> zope.component.getAdapter(toAdapt2, IAdapted, name=\"adapter2\")\n  Traceback (most recent call last):\n  ...\n  zope.interface.interfaces.ComponentLookupError: (<ToAdapt2 'toAdapt2'>, <InterfaceClass README.IAdapted>, 'adapter2')\n\n\n  >>> custom = zope.component.getUtility(IComponents, name='custom')\n\n  >>> custom.getUtility(IExample, name=\"example1\")\n  Traceback (most recent call last):\n  ...\n  zope.interface.interfaces.ComponentLookupError: (<InterfaceClass README.IExample>, 'example1')\n\n  >>> custom.getUtility(IExample, name=\"example2\")\n  <Example 'example2'>\n\n\n  >>> custom.getAdapter(toAdapt1, IAdapted, name=\"adapter1\")\n  Traceback (most recent call last):\n  ...\n  zope.interface.interfaces.ComponentLookupError: (<ToAdapt1 'toAdapt1'>, <InterfaceClass README.IAdapted>, 'adapter1')\n\n  >>> custom.getAdapter(toAdapt2, IAdapted, name=\"adapter2\")\n  'adapted2'\n\n\nLet's now register other instances of the ``Example`` class without a\nname. This should *not* cause a conflict error:\n\n  >>> example3 = Example('example3')\n  >>> example4 = Example('example4')\n\n  >>> context = xmlconfig.string('''\n  ... <configure xmlns=\"http://namespaces.zope.org/zope\" i18n_domain=\"zope\">\n  ...\n  ...   <utility component=\"README.example3\" />\n  ...\n  ...   <registerIn registry=\"README.custom\">\n  ...     <utility component=\"README.example4\" />\n  ...   </registerIn>\n  ...\n  ... </configure>\n  ... ''', context=context)\n\n  >>> zope.component.getUtility(IExample)\n  <Example 'example3'>\n\n  >>> custom.getUtility(IExample)\n  <Example 'example4'>\n\n\nUsing Base Registries\n---------------------\n\nMost commonly base registries will be used in local site managers. So let's\ncreate a local site:\n\n  >>> from zope.site.folder import Folder\n  >>> site = Folder()\n\n  >>> from zope.site.site import LocalSiteManager\n  >>> site.setSiteManager(LocalSiteManager(site))\n  >>> sm = site.getSiteManager()\n\nInitially only the base global registry is a base of the local site manager:\n\n  >>> sm.__bases__\n  (<BaseGlobalComponents base>,)\n\nNow only registrations from the base site are available:\n\n  >>> sm.getUtility(IExample)\n  <Example 'example3'>\n\n  >>> sm.getUtility(IExample, name=\"example1\")\n  <Example 'example1'>\n\n  >>> sm.getUtility(IExample, name=\"example2\")\n  Traceback (most recent call last):\n  ...\n  zope.interface.interfaces.ComponentLookupError: (<InterfaceClass README.IExample>, 'example2')\n\n  >>> sm.getAdapter(toAdapt1, IAdapted, name=\"adapter1\")\n  'adapted1'\n\n  >>> sm.getAdapter(toAdapt2, IAdapted, name=\"adapter2\")\n  Traceback (most recent call last):\n  ...\n  zope.interface.interfaces.ComponentLookupError: (<ToAdapt2 'toAdapt2'>, <InterfaceClass README.IAdapted>, 'adapter2')\n\nBut if we add the \"custom\" registry, then things look more interesting:\n\n  >>> sm.__bases__ += (custom,)\n  >>> sm.__bases__\n  (<BaseGlobalComponents base>, <BaseComponents custom>)\n\n  >>> sm.getUtility(IExample)\n  <Example 'example3'>\n\n  >>> sm.getUtility(IExample, name=\"example1\")\n  <Example 'example1'>\n\n  >>> sm.getUtility(IExample, name=\"example2\")\n  <Example 'example2'>\n\n  >>> sm.getAdapter(toAdapt1, IAdapted, name=\"adapter1\")\n  'adapted1'\n\n  >>> sm.getAdapter(toAdapt2, IAdapted, name=\"adapter2\")\n  'adapted2'\n\nBut where is the registration for example 4? Well, the order of the bases\nmatters, like the order of base classes in Python matters. The bases run from\nmust specific to most generic. Thus, if we reverse the order,\n\n  >>> bases = list(sm.__bases__)\n  >>> bases.reverse()\n  >>> sm.__bases__ = bases\n  >>> sm.__bases__\n  (<BaseComponents custom>, <BaseGlobalComponents base>)\n\nthen our \"custom\" registry effectively overrides the global one:\n\n  >>> sm.getUtility(IExample)\n  <Example 'example4'>\n\n  >>> sm.getUtility(IExample, name=\"example1\")\n  <Example 'example1'>\n\n  >>> sm.getUtility(IExample, name=\"example2\")\n  <Example 'example2'>\n\n\nEdge Cases and Food for Thought\n-------------------------------\n\nDuplicate Registrations\n~~~~~~~~~~~~~~~~~~~~~~~\n\nLike before, duplicate registrations are detected and reported:\n\n  >>> try:\n  ...    xmlconfig.string('''\n  ... <configure xmlns=\"http://namespaces.zope.org/zope\" i18n_domain=\"zope\">\n  ...\n  ...   <registerIn registry=\"README.custom\">\n  ...     <utility component=\"README.example3\" name=\"default\" />\n  ...     <utility component=\"README.example4\" name=\"default\" />\n  ...   </registerIn>\n  ...\n  ... </configure>\n  ... ''', context=context)\n  ... except ConfigurationConflictError as e:\n  ...    print(e)\n  Conflicting configuration actions\n    For: (<BaseComponents custom>, ('utility', <InterfaceClass README.IExample>, ...'default'))\n  ...\n\nBut as we have seen before, no duplication error is raised, if the same\nregistration is made for different sites:\n\n  >>> context = xmlconfig.string('''\n  ... <configure xmlns=\"http://namespaces.zope.org/zope\" i18n_domain=\"zope\">\n  ...\n  ...   <utility component=\"README.example3\" name=\"default\" />\n  ...\n  ...   <registerIn registry=\"README.custom\">\n  ...     <utility component=\"README.example4\" name=\"default\" />\n  ...   </registerIn>\n  ...\n  ... </configure>\n  ... ''', context=context)\n\n\nOverriding ZCML\n~~~~~~~~~~~~~~~\n\nOverriding should behave as usual. If I define something within a particular\nsite, then it should be only overridable in that site.\n\nIn the following example, ``base-overrides.zcml`` overrides only the global\nregistration of the following snippet to \"example3\":\n\n  >>> context.includepath = ('base.zcml', 'original.zcml')\n  >>> context = xmlconfig.string('''\n  ... <configure xmlns=\"http://namespaces.zope.org/zope\" i18n_domain=\"zope\">\n  ...\n  ...   <utility component=\"README.example1\" />\n  ...\n  ...   <registerIn registry=\"README.custom\">\n  ...     <utility component=\"README.example2\" />\n  ...   </registerIn>\n  ...\n  ... </configure>\n  ... ''', context=context, execute=False)\n\n  >>> context.includepath = ('base.zcml',)\n  >>> context = xmlconfig.string('''\n  ...   <includeOverrides package=\"z3c.baseregistry.tests\"\n  ...                     file=\"base-overrides.zcml\" />\n  ... ''', context=context)\n\n  >>> zope.component.getUtility(IExample)\n  <Example 'example3'>\n\n  >>> custom.getUtility(IExample)\n  <Example 'example2'>\n\nIn the next example, ``custom-overrides.zcml`` overrides only the custom\nregistration of the following snippet to \"example3\":\n\n  >>> context.includepath = ('base.zcml', 'original.zcml')\n  >>> context = xmlconfig.string('''\n  ... <configure xmlns=\"http://namespaces.zope.org/zope\" i18n_domain=\"zope\">\n  ...\n  ...   <utility component=\"README.example1\" />\n  ...\n  ...   <registerIn registry=\"README.custom\">\n  ...     <utility component=\"README.example4\" />\n  ...   </registerIn>\n  ...\n  ... </configure>\n  ... ''', context=context, execute=False)\n\n  >>> context.includepath = ('base.zcml',)\n  >>> context = xmlconfig.string('''\n  ... <configure xmlns=\"http://namespaces.zope.org/zope\" i18n_domain=\"zope\">\n  ...\n  ...   <includeOverrides package=\"z3c.baseregistry.tests\"\n  ...                     file=\"custom-overrides.zcml\" />\n  ...\n  ... </configure>\n  ... ''', context=context)\n\n  >>> zope.component.getUtility(IExample)\n  <Example 'example1'>\n\n  >>> custom.getUtility(IExample)\n  <Example 'example3'>\n\nNote: Sorry for the convoluted test sequence; this is just how it works. :-(\n\n\nNested Registry Usage\n~~~~~~~~~~~~~~~~~~~~~\n\nI thought about this one for a long time, but I think it is better not\nallowing to nest ``zope:registerIn`` directives, because the logic of\nmanipulating the discriminator would be very complex for very little added\nbenefit.\n\n  >>> try:\n  ...    xmlconfig.string('''\n  ... <configure xmlns=\"http://namespaces.zope.org/zope\" i18n_domain=\"zope\">\n  ...\n  ...   <registerIn registry=\"README.custom\">\n  ...     <registerIn registry=\"zope.component.globalregistry.base\">\n  ...       <utility component=\"README.example4\" />\n  ...     </registerIn>\n  ...   </registerIn>\n  ...\n  ... </configure>\n  ... ''', context=context)\n  ... except Exception as e:\n  ...     print(e)\n  Nested ``registerIn`` directives are not permitted.\n      File...\n\nCleanup\n~~~~~~~\n\nJust unregister the ``zope.component`` hooks:\n\n  >>> zope.component.hooks.resetHooks()\n\n\nGlobal Non-Component-Registration Actions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nZCML is not only responsible for populating the components registries, but also\nto do other global configuration, such as defining security and assigning\ninterfaces to classes. On the other hand, the ``registerIn`` directive works\nby manipulating the discriminator by prefixing it with the current\nregistry. While I assert that this is the right approach for component\nregistrations, it does not work for those other global configurations.\n\nIn order to address the issue, I need somehow more information. A balance must\nbe struck between the need to change existing directives and making the\nsolution non-monolithic. Here are some design ideas:\n\n1. A Special Discriminator Prefix\n\n   All directives that globally manipulate the state of the system and do not\n   register a component have as their first discriminator entry a special\n   string, like \"StateChange\". The directive can then look for those entries and\n   not change the discriminator at this point.\n\n   Advantages include the ability to use those directives inside the\n   ``registerIn`` directive and allow gradual upgrading. In the other hand, util\n   directives are adjusted, conflict resolution will not be available for those\n   scenarios.\n\n2. A Registry of Global Action Callables\n\n   Here this package provides a registry of callables that change the state of\n   the system. Directive authors can then subscribe their callables to this\n   registry.\n\n   The big advantage of this approach is that you can make it work now for all\n   built-in directives without changing any implementation. The disadvantage is\n   that the solution hides the problem to directive authors, so that detailed\n   documentation must be provided to ensure integrity and avoid\n   surprises. Another disadvantage is the complexity of yet another registry.\n\n3. Autodetection with False-Positives\n\n   As far as I can tell, all actions that manipulate the components registries\n   use the ``zope.component.zcml.handler`` function. Okay, so that allows me to\n   detect those. Unfortunately, there might be directives that do *not*\n   manipulate the state, for example ensuring the existence of something. There\n   are a bunch of those directives in the core.\n\n   The advantage here is that for the core it should just work. However, 3rd\n   party directive developers might be tripped by this feature. Also, we could\n   only issue warnings with this solution and probably need to be able to turn\n   them off.\n\nI have not implemented any of those suggestions, waiting for input from the\ncommunity.\n\n\n=========\n CHANGES\n=========\n\n3.0 (2023-02-09)\n================\n\n- Drop support for Python 2.7, 3.4, 3.5, 3.6.\n\n- Add support for Python 3.8, 3.9, 3.10, 3.11.\n\n- Make tests compatible with ``zope.component >= 5``.\n\n\n2.2.0 (2018-10-19)\n==================\n\n- Add support for Python 3.7.\n\n- Drop support for Python 3.3.\n\n\n2.1.0 (2017-05-03)\n==================\n\n- Add support for Python 3.4, 3.5, 3.6 and PyPy.\n\n- Remove test dependency on ``zope.app.testing`` and\n  ``zope.app.zcmlfiles``, among others.\n\n\n2.0.0 (2012-11-17)\n==================\n\n- zope.configuration changed action tuples to action dicts. This version works\n  with the new action dict given from zope.configuration since version 3.8.0.\n  This version is not compatible with zope.configuration version less then\n  3.8.0\n\n\n1.3.0 (2010-10-28)\n==================\n\n- Fundamental change in the way how baseregistry hooks into ZCA.\n  Now it uses hooks.setSite, which requires that zope.component hooks\n  are in place. Usually they are installed by zope.app.appsetup.\n  Unless you use zope.app.appsetup, install the hooks with\n  zope.component.hooks.setHooks().\n  This applies to zope.component versions >= 3.9.4.\n\n\n1.2.0 (2009-12-27)\n==================\n\n- Moved browser dependencies to zmi extras\n\n\n1.1.0 (2009-03-19)\n==================\n\n- Fix base registry management form failure in case, when a site has its\n  parent's local site manager (that isn't registered as utility) in its\n  __bases__.\n\n- Use zope.site instead of zope.app.component.\n\n- Drop unused dependencies on zope.app.i18n and zope.app.pagetemplate.\n\n\n1.0.0 (2008-01-24)\n==================\n\n- Initial Release\n","description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/zopefoundation/z3c.baseregistry","keywords":"zope3 z3c component global registry baseregistry","license":"ZPL 2.1","maintainer":"","maintainer_email":"","name":"z3c.baseregistry","package_url":"https://pypi.org/project/z3c.baseregistry/","platform":null,"project_url":"https://pypi.org/project/z3c.baseregistry/","project_urls":{"Homepage":"https://github.com/zopefoundation/z3c.baseregistry"},"provides_extra":null,"release_url":"https://pypi.org/project/z3c.baseregistry/3.0/","requires_dist":["setuptools","zope.component[hook,zcml] (>=4.5.0)","zope.configuration (>=4.3.0)","zope.i18nmessageid (>=2.2)","zope.interface","zope.schema (>=4.9.0)","zope.site","zope.app.appsetup ; extra == 'test'","zope.app.authentication ; extra == 'test'","zope.app.basicskin (>=4.0.0) ; extra == 'test'","zope.app.container (>=4.0.0) ; extra == 'test'","zope.app.form (>=5.0.0) ; extra == 'test'","zope.app.publisher ; extra == 'test'","zope.app.publication ; extra == 'test'","zope.app.rotterdam (>=4.0.0) ; extra == 'test'","zope.app.schema (>=4.0.0) ; extra == 'test'","zope.app.wsgi ; extra == 'test'","zope.browserpage ; extra == 'test'","zope.browserresource ; extra == 'test'","zope.container ; extra == 'test'","zope.formlib ; extra == 'test'","zope.login ; extra == 'test'","zope.principalannotation ; extra == 'test'","zope.principalregistry ; extra == 'test'","zope.publisher ; extra == 'test'","zope.securitypolicy ; extra == 'test'","zope.testbrowser (>=5.2) ; extra == 'test'","zope.testing ; extra == 'test'","zope.testrunner ; extra == 'test'","zope.traversing (>=4.1.0) ; extra == 'test'","webtest ; extra == 'test'","zope.formlib ; extra == 'zmi'"],"requires_python":">=3.7","summary":"Manage IComponents instances using Python code and ZCML.","version":"3.0","yanked":false,"yanked_reason":null},"last_serial":23498718,"releases":{"1.0.0":[{"comment_text":"","digests":{"blake2b_256":"447ba58054f509d36dec7c9dfda888c4eba54bd356838e0f6d4320ea936d66fd","md5":"e64b76d4975938e08a61154e4a2a9f90","sha256":"dd291984f2580ce3e0aba7650345c15785d1e902f2a1676836e2d20b5a7817a7"},"downloads":-1,"filename":"z3c.baseregistry-1.0.0.tar.gz","has_sig":false,"md5_digest":"e64b76d4975938e08a61154e4a2a9f90","packagetype":"sdist","python_version":"source","requires_python":null,"size":21396,"upload_time":"2008-01-24T17:45:36","upload_time_iso_8601":"2008-01-24T17:45:36Z","url":"https://files.pythonhosted.org/packages/44/7b/a58054f509d36dec7c9dfda888c4eba54bd356838e0f6d4320ea936d66fd/z3c.baseregistry-1.0.0.tar.gz","yanked":false,"yanked_reason":null}],"1.1.0":[{"comment_text":"","digests":{"blake2b_256":"dd1862aba07e4fc1eddc639f07e4e1284d222a5b3b48b5dda996e10978ae00ae","md5":"5f4e486fc2f86449c4aed6cb23327dc1","sha256":"42049b22a84f879176bbd3310d95217db486b0e5368e7704c0d1abe58e00ad84"},"downloads":-1,"filename":"z3c.baseregistry-1.1.0.tar.gz","has_sig":false,"md5_digest":"5f4e486fc2f86449c4aed6cb23327dc1","packagetype":"sdist","python_version":"source","requires_python":null,"size":16970,"upload_time":"2009-03-19T10:49:34","upload_time_iso_8601":"2009-03-19T10:49:34.132745Z","url":"https://files.pythonhosted.org/packages/dd/18/62aba07e4fc1eddc639f07e4e1284d222a5b3b48b5dda996e10978ae00ae/z3c.baseregistry-1.1.0.tar.gz","yanked":false,"yanked_reason":null}],"1.2.0":[{"comment_text":"","digests":{"blake2b_256":"528070d28c213a7bff1eac8717ff15796a90d7fc036f8ebb03a9c1153f007208","md5":"02b970ad0db04ef143af0793a7badc55","sha256":"59407b8356900caf2ec96e3607adfcc29db61bc29de0d4d160d8a1579e46f857"},"downloads":-1,"filename":"z3c.baseregistry-1.2.0.tar.gz","has_sig":false,"md5_digest":"02b970ad0db04ef143af0793a7badc55","packagetype":"sdist","python_version":"source","requires_python":null,"size":19104,"upload_time":"2009-12-27T10:03:54","upload_time_iso_8601":"2009-12-27T10:03:54.369864Z","url":"https://files.pythonhosted.org/packages/52/80/70d28c213a7bff1eac8717ff15796a90d7fc036f8ebb03a9c1153f007208/z3c.baseregistry-1.2.0.tar.gz","yanked":false,"yanked_reason":null}],"1.3.0":[{"comment_text":"","digests":{"blake2b_256":"0d78b561ad2db0e6bfee5ad3da634ae43b55fb7896a1ef8d298b110a26a0ff0c","md5":"a68a80d2d7f4a76e9958910f76f9e128","sha256":"7c46184eab5f34776fb89219876e0497e11a8875a3bf3761adcffb6c64efa820"},"downloads":-1,"filename":"z3c.baseregistry-1.3.0.tar.gz","has_sig":false,"md5_digest":"a68a80d2d7f4a76e9958910f76f9e128","packagetype":"sdist","python_version":"source","requires_python":null,"size":24466,"upload_time":"2010-10-28T15:41:15","upload_time_iso_8601":"2010-10-28T15:41:15.646345Z","url":"https://files.pythonhosted.org/packages/0d/78/b561ad2db0e6bfee5ad3da634ae43b55fb7896a1ef8d298b110a26a0ff0c/z3c.baseregistry-1.3.0.tar.gz","yanked":false,"yanked_reason":null}],"2.0.0":[{"comment_text":"","digests":{"blake2b_256":"6c6fa70d219f0a206ad2538e198cd3dfa9cffc8c32fd3252222595b1f42c1b83","md5":"d187b7f1d8a763640c6bd67a9b0ff4f0","sha256":"ac7122b976a85ad6a51f7f736731fe7e04c05f400bbd46ee2e474378cfe773e7"},"downloads":-1,"filename":"z3c.baseregistry-2.0.0.zip","has_sig":false,"md5_digest":"d187b7f1d8a763640c6bd67a9b0ff4f0","packagetype":"sdist","python_version":"source","requires_python":null,"size":36340,"upload_time":"2012-11-17T03:05:28","upload_time_iso_8601":"2012-11-17T03:05:28.874611Z","url":"https://files.pythonhosted.org/packages/6c/6f/a70d219f0a206ad2538e198cd3dfa9cffc8c32fd3252222595b1f42c1b83/z3c.baseregistry-2.0.0.zip","yanked":false,"yanked_reason":null}],"2.1.0":[{"comment_text":"","digests":{"blake2b_256":"cf5d59c10b9724c3f4a4726fd556b4c152d10768b5eefdb57e6661fdd624db80","md5":"ea83e49d65193608e74109f08dc7bf3e","sha256":"ca289bbdcb7bdc2d9007680153fa82aeb95fe14e51d3ea23963ea74266c0326f"},"downloads":-1,"filename":"z3c.baseregistry-2.1.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"ea83e49d65193608e74109f08dc7bf3e","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":34268,"upload_time":"2017-05-03T15:33:40","upload_time_iso_8601":"2017-05-03T15:33:40.154517Z","url":"https://files.pythonhosted.org/packages/cf/5d/59c10b9724c3f4a4726fd556b4c152d10768b5eefdb57e6661fdd624db80/z3c.baseregistry-2.1.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"8fe690926da55481058ff193d690ced22ecb7cf263bd2bb2868b565c158f0678","md5":"d15dc1c3358cd7a62b18352cebd8eb2a","sha256":"341c02834f622884848cf7f91668ce44a68631e26ef0772c4a2fe75d6e0dabfc"},"downloads":-1,"filename":"z3c.baseregistry-2.1.0.tar.gz","has_sig":false,"md5_digest":"d15dc1c3358cd7a62b18352cebd8eb2a","packagetype":"sdist","python_version":"source","requires_python":null,"size":31034,"upload_time":"2017-05-03T15:33:41","upload_time_iso_8601":"2017-05-03T15:33:41.917846Z","url":"https://files.pythonhosted.org/packages/8f/e6/90926da55481058ff193d690ced22ecb7cf263bd2bb2868b565c158f0678/z3c.baseregistry-2.1.0.tar.gz","yanked":false,"yanked_reason":null}],"2.2.0":[{"comment_text":"","digests":{"blake2b_256":"2611fc78ee185ae7437cc8b1cb1a060f6c23fe43a7f98c2e2e4eb56ad93ec31d","md5":"7e81e801937f3606bf069c57a9eb75e1","sha256":"80792c1b0d46fb3ca5d4aabd54d4639481def1dc1a52f65ca4fc2ff24d44f1e2"},"downloads":-1,"filename":"z3c.baseregistry-2.2.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"7e81e801937f3606bf069c57a9eb75e1","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":28181,"upload_time":"2018-10-19T13:37:42","upload_time_iso_8601":"2018-10-19T13:37:42.342241Z","url":"https://files.pythonhosted.org/packages/26/11/fc78ee185ae7437cc8b1cb1a060f6c23fe43a7f98c2e2e4eb56ad93ec31d/z3c.baseregistry-2.2.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"521338869b3a68d49ee68a68aab06b3e64cf7f0d624f7be646611a39da497d70","md5":"c9d99488d81c547efb59bf1c43b3e628","sha256":"7b8a74cf964ea2f5acf7a6ea4a9959e3a49567ceb44610454eff1b12e91caef5"},"downloads":-1,"filename":"z3c.baseregistry-2.2.0.tar.gz","has_sig":false,"md5_digest":"c9d99488d81c547efb59bf1c43b3e628","packagetype":"sdist","python_version":"source","requires_python":null,"size":30939,"upload_time":"2018-10-19T13:37:44","upload_time_iso_8601":"2018-10-19T13:37:44.066760Z","url":"https://files.pythonhosted.org/packages/52/13/38869b3a68d49ee68a68aab06b3e64cf7f0d624f7be646611a39da497d70/z3c.baseregistry-2.2.0.tar.gz","yanked":false,"yanked_reason":null}],"3.0":[{"comment_text":"","digests":{"blake2b_256":"ee4b9cbf7e47a3f5c27d1c9aca20893c597920976261eb191978889f7e9db292","md5":"2620639846b94aa0a041a0ddc54d47cc","sha256":"1223bb656c7798670d83ef5004396b0996637c89db7058e1f23b2aaf00995ff9"},"downloads":-1,"filename":"z3c.baseregistry-3.0-py3-none-any.whl","has_sig":false,"md5_digest":"2620639846b94aa0a041a0ddc54d47cc","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":28058,"upload_time":"2023-02-09T10:54:12","upload_time_iso_8601":"2023-02-09T10:54:12.386899Z","url":"https://files.pythonhosted.org/packages/ee/4b/9cbf7e47a3f5c27d1c9aca20893c597920976261eb191978889f7e9db292/z3c.baseregistry-3.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"eb8d17d3169c9eec5d82130a26c87cc7a5c228ae1357589c8e2a69ae359e776f","md5":"c39e60ec945fa7460467f6487b6f3ef1","sha256":"4ce608c049e38b466c3e646ea18c8a79186728fcb784dc2bf3f0c24a0e23786e"},"downloads":-1,"filename":"z3c.baseregistry-3.0.tar.gz","has_sig":false,"md5_digest":"c39e60ec945fa7460467f6487b6f3ef1","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":30457,"upload_time":"2023-02-09T10:54:14","upload_time_iso_8601":"2023-02-09T10:54:14.091996Z","url":"https://files.pythonhosted.org/packages/eb/8d/17d3169c9eec5d82130a26c87cc7a5c228ae1357589c8e2a69ae359e776f/z3c.baseregistry-3.0.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"ee4b9cbf7e47a3f5c27d1c9aca20893c597920976261eb191978889f7e9db292","md5":"2620639846b94aa0a041a0ddc54d47cc","sha256":"1223bb656c7798670d83ef5004396b0996637c89db7058e1f23b2aaf00995ff9"},"downloads":-1,"filename":"z3c.baseregistry-3.0-py3-none-any.whl","has_sig":false,"md5_digest":"2620639846b94aa0a041a0ddc54d47cc","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":28058,"upload_time":"2023-02-09T10:54:12","upload_time_iso_8601":"2023-02-09T10:54:12.386899Z","url":"https://files.pythonhosted.org/packages/ee/4b/9cbf7e47a3f5c27d1c9aca20893c597920976261eb191978889f7e9db292/z3c.baseregistry-3.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"eb8d17d3169c9eec5d82130a26c87cc7a5c228ae1357589c8e2a69ae359e776f","md5":"c39e60ec945fa7460467f6487b6f3ef1","sha256":"4ce608c049e38b466c3e646ea18c8a79186728fcb784dc2bf3f0c24a0e23786e"},"downloads":-1,"filename":"z3c.baseregistry-3.0.tar.gz","has_sig":false,"md5_digest":"c39e60ec945fa7460467f6487b6f3ef1","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":30457,"upload_time":"2023-02-09T10:54:14","upload_time_iso_8601":"2023-02-09T10:54:14.091996Z","url":"https://files.pythonhosted.org/packages/eb/8d/17d3169c9eec5d82130a26c87cc7a5c228ae1357589c8e2a69ae359e776f/z3c.baseregistry-3.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
