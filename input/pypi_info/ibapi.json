{"info":{"author":"IBG LLC","author_email":"dnastase@interactivebrokers.com","bugtrack_url":null,"classifiers":["Development Status :: 6 - Mature","Intended Audience :: Developers","License :: Other/Proprietary License","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3 :: Only","Programming Language :: Python :: 3.3","Programming Language :: Python :: 3.4","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],"description":"A couple of things/definitions/conventions:\n\n-  a *low level message* is some data prefixed with its size\n-  a *high level message* is a list of fields separated by the NULL\n   character; the fields are all strings; the message ID is the first\n   field, the come others whose number and semantics depend on the\n   message itself\n-  a *request* is a message from client to TWS/IBGW (IB Gateway)\n-  an *answer* is a message from TWS/IBGW to client\n\nHow the code is organized:\n\n-  *comm* module: has tools that know how to handle (eg: encode/decode)\n   low and high level messages\n-  *Connection*: glorified socket\n-  *Reader*: thread that uses Connection to read packets, transform to\n   low level messages and put in a Queue\n-  *Decoder*: knows how to take a low level message and decode into high\n   level message\n-  *Client*:\n-  knows to send requests\n-  has the message loop which takes low level messages from Queue and\n   uses Decoder to tranform into high level message with which it then\n   calls the corresponding Wrapper method\n-  *Wrapper*: class that needs to be subclassed by the user so that it\n   can get the incoming messages\n\nThe info/data flow is:\n\n-  receiving:\n-  *Connection.recv\\_msg()* (which is essentially a socket) receives the\n   packets\n\n   -  uses *Connection.\\ *recv*\\ all\\_msgs()* which tries to combine\n      smaller packets into bigger ones based on some trivial heuristic\n\n-  *Reader.run()* uses *Connection.recv\\_msg()* to get a packet and then\n   uses *comm.read\\_msg()* to try to make it a low level message. If\n   that can't be done yet (size prefix says so) then it waits for more\n   packets\n-  if a full low level message is received then it is placed in the\n   Queue (remember this is a standalone thread)\n-  the main thread runs the *Client.run()* loop which:\n\n   -  gets a low level message from Queue\n   -  uses *comm.py* to translate into high level message (fields)\n   -  uses *Decoder.interpret()* to act based on that message\n\n-  *Decoder.interpret()* will translate the fields into function\n   parameters of the correct type and call with the\n   correct/corresponding method of *Wrapper* class\n\n-  sending:\n-  *Client* class has methods that implement the *requests*. The user\n   will call those request methods with the needed parameters and\n   *Client* will send them to the TWS/IBGW.\n\nImplementation notes:\n\n-  the *Decoder* has two ways of handling a message (esentially decoding\n   the fields)\n\n   -  some message very neatly map to a function call; meaning that the\n      number of fields and order are the same as the method parameters.\n      For example: Wrapper.tickSize(). In this case a simple mapping is\n      made between the incoming msg id and the Wrapper method:\n\n   IN.TICK\\_SIZE: HandleInfo(wrap=Wrapper.tickSize),\n\n   -  other messages are more complex, depend on version number heavily\n      or need field massaging. In this case the incoming message id is\n      mapped to a processing function that will do all that and call the\n      Wrapper method at the end. For example:\n\n   IN.TICK\\_PRICE: HandleInfo(proc=processTickPriceMsg),\n\nInstalation notes:\n\n-  you can use this to build a source distribution\n\npython3 setup.py sdist\n\n-  you can use this to build a wheel\n\npython3 setup.py bdist\\_wheel\n\n-  you can use this to install the wheel\n\npython3 -m pip install --user --upgrade\ndist/ibapi-9.75.1-py3-none-any.whl","description_content_type":"text/x-rst","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://interactivebrokers.github.io/tws-api","keywords":"ib,interactive brokers,ibpy,tws","license":"IB API Non-Commercial License or the IB API Commercial License","maintainer":"","maintainer_email":"","name":"ibapi","package_url":"https://pypi.org/project/ibapi/","platform":"","project_url":"https://pypi.org/project/ibapi/","project_urls":{"Homepage":"https://interactivebrokers.github.io/tws-api"},"provides_extra":null,"release_url":"https://pypi.org/project/ibapi/9.81.1.post1/","requires_dist":null,"requires_python":">=3.1","summary":"Official Interactive Brokers API","version":"9.81.1.post1","yanked":false,"yanked_reason":null},"last_serial":8831107,"releases":{"9.81.1":[{"comment_text":"","digests":{"blake2b_256":"aec6cae6553bbab09e53017092bce5893b8558df22a88e6097732acbd149cf90","md5":"0d98281171fa0a1d7ad10c7226b14edb","sha256":"7965b0f898220ca78dc681afc3a1579c959d23ef96e6ef52c91eabbe0b65e857"},"downloads":-1,"filename":"ibapi-9.81.1.linux-x86_64.tar.gz","has_sig":false,"md5_digest":"0d98281171fa0a1d7ad10c7226b14edb","packagetype":"sdist","python_version":"source","requires_python":">=3.1","size":136874,"upload_time":"2020-12-06T02:35:48","upload_time_iso_8601":"2020-12-06T02:35:48.335526Z","url":"https://files.pythonhosted.org/packages/ae/c6/cae6553bbab09e53017092bce5893b8558df22a88e6097732acbd149cf90/ibapi-9.81.1.linux-x86_64.tar.gz","yanked":false,"yanked_reason":null}],"9.81.1.post1":[{"comment_text":"","digests":{"blake2b_256":"cc788f1322aa1be1fe7d747d06d445ede80141e873525120bde809ccae5484fa","md5":"fa8f7acfcde1002664c315bef1b8f252","sha256":"49f6678bf4cced996920f32ad4b48e6897749ac30ba14a661082285f4ec09cd6"},"downloads":-1,"filename":"ibapi-9.81.1.post1.tar.gz","has_sig":false,"md5_digest":"fa8f7acfcde1002664c315bef1b8f252","packagetype":"sdist","python_version":"source","requires_python":">=3.1","size":61109,"upload_time":"2020-12-06T03:18:39","upload_time_iso_8601":"2020-12-06T03:18:39.916478Z","url":"https://files.pythonhosted.org/packages/cc/78/8f1322aa1be1fe7d747d06d445ede80141e873525120bde809ccae5484fa/ibapi-9.81.1.post1.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"cc788f1322aa1be1fe7d747d06d445ede80141e873525120bde809ccae5484fa","md5":"fa8f7acfcde1002664c315bef1b8f252","sha256":"49f6678bf4cced996920f32ad4b48e6897749ac30ba14a661082285f4ec09cd6"},"downloads":-1,"filename":"ibapi-9.81.1.post1.tar.gz","has_sig":false,"md5_digest":"fa8f7acfcde1002664c315bef1b8f252","packagetype":"sdist","python_version":"source","requires_python":">=3.1","size":61109,"upload_time":"2020-12-06T03:18:39","upload_time_iso_8601":"2020-12-06T03:18:39.916478Z","url":"https://files.pythonhosted.org/packages/cc/78/8f1322aa1be1fe7d747d06d445ede80141e873525120bde809ccae5484fa/ibapi-9.81.1.post1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
