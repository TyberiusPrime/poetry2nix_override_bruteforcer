{"info":{"author":null,"author_email":"Wichert Akkerman <wichert@wiggy.net>","bugtrack_url":null,"classifiers":["Intended Audience :: Developers","License :: DFSG approved","License :: OSI Approved :: BSD License","Operating System :: OS Independent","Programming Language :: Python :: 3","Topic :: Software Development :: Libraries :: Python Modules"],"description":"What is lingva?\n===============\n\n**This is a fork of https://github.com/wichert/lingua**\n\nLingva is a package with tools to extract translatable texts from\nyour code, and to check existing translations. It replaces the use\nof the ``xgettext`` command from gettext, or ``pybabel`` from Babel.\n\n\nMessage extraction\n==================\n\nThe simplest way to extract all translatable messages is to point the\n``pot-create`` tool at the root of your source tree.\n\n::\n\n     $ pot-create src\n\nThis will create a ``messages.pot`` file containing all found messages.\n\n\nSpecifying input files\n----------------------\n\nThere are three ways to tell lingva which files you want it to scan:\n\n1. Specify filenames directly on the command line. For example::\n\n   $ pot-create main.py utils.py\n\n2. Specify a directory on the command line. lingva will recursively scan that\n   directory for all files it knows how to handle.\n\n   ::\n\n       $ pot-create src\n\n3. Use the ``--files-from`` parameter to point to a file with a list of\n   files to scan. Lines starting with ``#`` and empty lines will be ignored.\n\n   ::\n\n       $ pot-create --files-from=POTFILES.in\n\nYou can also use the ``--directory=PATH`` parameter to add the given path to the\nlist of directories to check for files. This may sound confusing, but can be\nuseful. For example this command will look for ``main.py`` and ``utils.py`` in\nthe current directory, and if they are not found there in the ``../src``\ndirectory::\n\n\n    $ pot-create --directory=../src main.py utils.py\n\n\nConfiguration\n-------------\n\nIn its default configuration lingva will use its python extractor for ``.py``\nfiles, its XML extractor for ``.pt`` and ``.zpt`` files and its ZCML extractor\nfor ``.zcml`` files. If you use different extensions you setup a configuration\nfile which tells lingva how to process files. This file uses a simple ini-style\nformat.\n\nThere are two types of configuration that can be set in the configuration file:\nwhich extractor to use for a file extension, and the configuration for a single\nextractor.\n\nFile extensions are configured in the ``extensions`` section. Each entry in\nthis section maps a file extension to an extractor name. For example to\ntell lingva to use its XML extractor for files with a ``.html`` extension\nyou can use this configuration::\n\n    [extensions]\n    .html = xml\n\nTo find out which extractors are available use the ``-list-extractors`` option.\n\n::\n\n    $ bin/pot-create --list-extractors\n    chameleon         Chameleon templates (defaults to Python expressions)\n    python            Python sources\n    xml               Chameleon templates (defaults to Python expressions)\n    zcml              Zope Configuration Markup Language (ZCML)\n    zope              Zope templates (defaults to TALES expressions)\n\nA section named `extractor:<name>` can be used to configure a specific\nextractor. For example to tell the XML extractor that the default language\nused for expressions is TALES instead of Python::\n\n    [extractor:xml]\n    default-engine = tales\n\nEither place a global configuration file named ``.config/lingva`` to your\nhome folder or use the ``--config`` option to point lingva to your\nconfiguration file.\n\n::\n\n    $ pot-create -c lingva.cfg src\n\n\nDomain filtering\n----------------\n\nWhen working with large systems you may use multiple translation domains\nin a single source tree. lingva can support that by filtering messages by\ndomain when scanning sources. To enable domain filtering use the ``-d`` option:\n\n::\n\n    $ pot-create -d mydomain src\n\nlingva will always include messages for which it can not determine the domain.\nFor example, take this Python code:\n\n::\n\n     print(gettext(u'Hello, World'))\n     print(dgettext('mydomain', u'Bye bye'))\n\nThe first hello-message does not specify its domain and will always be\nincluded. The second line uses `dgettext\n<http://docs.python.org/2/library/gettext#gettext.dgettext>`_ to explicitly\nspecify the domain. lingva will use this information when filtering domains.\n\n\nIncluding comments\n------------------\n\nYou can add comments to messages to help translators, for example to explain\nhow a text is used, or provide hints on how it should be translated. For\nchameleon templates this can be done using the ``i18n:comment`` attribute:\n\n::\n\n   <label i18n:comment=\"This is a form label\" i18n:translate=\"\">Password</label>\n\nComments are inherited, so you can put them on a parent element as well.\n\n::\n\n   <form i18n:comment=\"This is used in the password reset form\">\n     <label i18n:translate=\"\">Password</label>\n     <button i18n:translate=\"\">Change</button>\n   </form>\n\n\nFor Python code you can tell lingva to include comments by using the\n``--add-comments`` option. This will make Linua include all comments on the\nline(s) *immediately preceeding* (there may be no empty line in between) a\ntranslation call.\n\n::\n\n    # This text should address the user directly.\n    return _('Thank you for using our service.')\n\nAlternatively you can also put a comment at the end of the line starting your\ntranslation function call.\n\n::\n\n    return _('Thank you for using our service.')  # Address the user directly\n\nIf you do not want all comments to be included but only specific ones you can\nadd a keyword to the ``--add-comments`` option, for example ``--add-comments=I18N``.\n\n::\n\n    # I18N This text should address the user directly, and use formal addressing.\n    return _('Thank you for using our service')\n\n\nSetting message flags in comments\n---------------------------------\n\nMessages can have *flags*. These are to indicate what format a message has, and\nare typically used by validation tools to check if a translation does not break\nvariable references or template syntax. lingva does a reasonable job to detect\nstrings using C and Python formatting, but sometimes you may need to set flags\nyourself. This can be done with a ``[flag, flag]`` marker in a comment.\n\n::\n\n    # I18N [markdown,c-format]\n    header =  _(u'# Hello *%s*')\n\n\n\nSpecifying keywords\n-------------------\n\nWhen looking for messages a lingva parser uses a default list of keywords\nto identify translation calls. You can add extra keywords via the ``--keyword``\noption. If you have your own ``mygettext`` function which takes a string\nto translate as its first parameter you can use this:\n\n::\n\n    $ pot-create --keyword=mygettext\n\nIf your function takes more parameters you will need to tell lingva about them.\nThis can be done in several ways:\n\n* If the translatable text is not the first parameter you can specify the\n  parameter number with ``<keyword>:<parameter number>``. For example if\n  you use ``i18n_log(level, msg)`` the keyword specifier would be ``i18n_log:2``\n* If you support plurals you can specify the parameter used for the plural message\n  by specifying the parameter number for both the singular and plural text. For\n  example if your function signature is ``show_result(single, plural)`` the\n  keyword specifier is ``show_result:1,2``\n* If you use message contexts you can specify the parameter used for the context\n  by adding a ``c`` to the parameter number. For example the keyword specifier for\n  ``pgettext`` is ``pgettext:1c,2``.\n* If your function takes the domain as a parameter you can specify which parameter\n  is used for the domain by adding a ``d`` to the parameter number. For example\n  the keyword specifier for ``dgettext`` is ``dgettext:1d,2``. This is a\n  lingva-specified extension.\n* You can specify the exact number of parameters a function call must have\n  using the ``t`` postfix. For example if a function *must* have four parameters\n  to be a valid call, the specifier could be ``myfunc:1,4t``.\n\n\nExtractors\n==========\n\nlingva includes a number of extractors:\n\n* `python`: handles Python source code.\n* `chameleon`: handles `Chameleon <http://www.pagetemplates.org/>`_ files,\n  using the `Zope i18n syntax\n  <https://chameleon.readthedocs.org/en/latest/reference.html#id51>`_\n* `zcml`: handles Zope Configuration Markup Language (ZCML) files.\n* `zope`: a variant of the chameleon extractor, which assumes the default\n   expression language is `TALES\n   <https://chameleon.readthedocs.org/en/latest/reference.html#expressions-tales>`_\n   instead of Python.\n* `xml`: old name for the `chameleon` extractor. This name should not be used\n  anymore and is only supported for backwards compatibility.\n\nBabel extractors\n----------------\n\nThere are several packages with plugins for `Babel\n<http://babel.edgewall.org/>`_'s message extraction tool. lingva can use those\nplugins as well. The plugin names will be prefixed with ``babel-`` to\ndistinguish them from lingva extractors.\n\nFor example, if you have the `PyBabel-json\n<https://pypi.python.org/pypi/PyBabel-json>`_ package installed you can\ninstruct lingva to use it for .json files by adding this to your configuration\nfile::\n\n     [extensions]\n     .json = babel-json\n\nSome Babel plugins require you to specify comment tags. This can be set with\nthe ``comment-tags`` option.\n\n::\n\n    [extractor:babel-mako]\n    comment-tags = TRANSLATOR:\n\n\nComparison to other tools\n=========================\n\nDifferences compared to `GNU gettext <https://www.gnu.org/software/gettext/>`_:\n\n* Support for file formats such as Zope Page Templates (popular in\n  `Pyramid <http://docs.pylonsproject.org/projects/pyramid/en/latest/>`_,\n  `Chameleon`_,\n  `Plone <http://plone.org/>`_ and `Zope <http://www.zope.org>`_).\n* Better support for detecting format strings used in Python.\n* No direct support for C, C++, Perl, and many other languages. lingva focuses\n  on languages commonly used in Python projects, although support for other\n  languages can be added via plugins.\n\n\nDifferences compared to `Babel`_:\n\n* More reliable detection of Python format strings.\n* lingva includes plural support.\n* Support for only extracting texts for a given translation domain. This is\n  often useful for extensible software where you use multiple translation\n  domains in a single application.\n\n\nValidating translations\n=======================\n\nlingva includes a simple ``polint`` tool which performs a few basic checks on\nPO files. Currently implemented tests are:\n\n* duplicated message ids (can also be checked with GNU gettext's ``msgfmt``).\n  These should never happen and are usually a result of a bug in the message\n  extraction logic.\n\n* identical translations used for multiple canonical texts. This can happen\n  for valid reasons, for example when the original text is not spelled\n  consistently.\n\nTo check a po file simply run ``polint`` with the po file as argument::\n\n    $ polint nl.po\n\n    Translation:\n        ${val} ist keine Zeichenkette\n    Used for 2 canonical texts:\n    1       ${val} is not a string\n    2       \"${val}\" is not a string\n\n\nWriting custom extractors\n=========================\n\nFirst we need to create the custom extractor::\n\n    from lingva.extractors import Extractor\n    from lingva.extractors import Message\n\n    class MyExtractor(Extractor):\n        '''One-line description for --list-extractors'''\n        extensions = ['.txt']\n\n        def __call__(self, filename, options):\n            return [Message(None, 'msgid', None, [], u'', u'', (filename, 1))]\n\nHooking up extractors to lingva is done by ``lingva.extractors`` entry points\nin ``setup.py``::\n\n    setup(name='mypackage',\n          ...\n          install_requires=[\n              'lingva',\n          ],\n          ...\n          entry_points='''\n          [lingva.extractors]\n          my_extractor = mypackage.extractor:MyExtractor\n          '''\n          ...)\n\nNote - the registered extractor must be a class derived from the ``Extractor``\nbase class.\n\nAfter installing ``mypackage`` lingva will automatically detect the new custom\nextractor.\n\n\nHelper Script\n=============\n\nThere exists a helper shell script for managing translations of packages in\n``docs/examples`` named ``i18n.sh``. Copy it to package root where you want to\nwork on translations, edit the configuration params inside the script and use::\n\n    ./i18n.sh lang\n\nfor initial catalog creation and::\n\n    ./i18n.sh\n\nfor updating translation and compiling the catalog.\n","description_content_type":"text/x-rst","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"translation, po, gettext, Babel","license":"Copyright (c) 2010-2022, Wichert Akkerman All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of the University of Manchester or HITS gGmbH, nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ","maintainer":null,"maintainer_email":"Arkadii Yakovets <ark@cho.red>","name":"lingva","package_url":"https://pypi.org/project/lingva/","platform":null,"project_url":"https://pypi.org/project/lingva/","project_urls":{"homepage":"https://github.com/vacanza/lingva","tracker":"https://github.com/vacanza/lingva/issues"},"provides_extra":null,"release_url":"https://pypi.org/project/lingva/5.0.3/","requires_dist":["chameleon","click>=8.0.3","polib>=1.1.1","black>=22.1.0; extra == \"dev\"","flake8>=4.0.1; extra == \"dev\"","pytest>=7.0.1; extra == \"dev\""],"requires_python":null,"summary":"Translation toolset","version":"5.0.3","yanked":false,"yanked_reason":null},"last_serial":23559092,"releases":{"5.0":[{"comment_text":"","digests":{"blake2b_256":"9af1e479e91279a4c2c47d6b277498b507a5c40bc9c62c2a432ebb5a3bd4bca4","md5":"517e8de681e99702320c1384ab1be25e","sha256":"16ce32d972f376c33c7d75c085135f9ac2b12476c6d80fdc647a7e694a5ee33a"},"downloads":-1,"filename":"lingva-5.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"517e8de681e99702320c1384ab1be25e","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":24240,"upload_time":"2024-03-06T17:53:38","upload_time_iso_8601":"2024-03-06T17:53:38.339423Z","url":"https://files.pythonhosted.org/packages/9a/f1/e479e91279a4c2c47d6b277498b507a5c40bc9c62c2a432ebb5a3bd4bca4/lingva-5.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d84f8d3ad31455351583ca2168bcfb96803da1b2c156b292da2027ea19ea04d4","md5":"00c68baff3c5a7f777908ec7336e464b","sha256":"97740f7c1fe610c9e9a2a11a5fba200535581aa31fcaf2c5837e9cd846397f01"},"downloads":-1,"filename":"lingva-5.0.tar.gz","has_sig":false,"md5_digest":"00c68baff3c5a7f777908ec7336e464b","packagetype":"sdist","python_version":"source","requires_python":null,"size":36705,"upload_time":"2024-03-06T17:53:40","upload_time_iso_8601":"2024-03-06T17:53:40.116910Z","url":"https://files.pythonhosted.org/packages/d8/4f/8d3ad31455351583ca2168bcfb96803da1b2c156b292da2027ea19ea04d4/lingva-5.0.tar.gz","yanked":false,"yanked_reason":null}],"5.0.1":[{"comment_text":"","digests":{"blake2b_256":"16962db94d2698e0712647449814a8e9311d6aaf3fac3c46150e2017befaa3f1","md5":"3eba556759e52cbf30fcee2477d88c85","sha256":"7d63431f91315832d06a1c873f30bad9388ddbeb2af0e10aa5bde766a2a977be"},"downloads":-1,"filename":"lingva-5.0.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"3eba556759e52cbf30fcee2477d88c85","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":24080,"upload_time":"2024-03-08T17:21:45","upload_time_iso_8601":"2024-03-08T17:21:45.898276Z","url":"https://files.pythonhosted.org/packages/16/96/2db94d2698e0712647449814a8e9311d6aaf3fac3c46150e2017befaa3f1/lingva-5.0.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e4a91c91367221b07d7d1e5142a560c2b9479da7bf75b41b27c0da4af233b4e5","md5":"e98fda5ad04a6996628e1ad30c87b56d","sha256":"2b9dd4a493ce3e9b49d3e15d5414266bb4614cef0ac54eeb3d4df8539e7b35a9"},"downloads":-1,"filename":"lingva-5.0.1.tar.gz","has_sig":false,"md5_digest":"e98fda5ad04a6996628e1ad30c87b56d","packagetype":"sdist","python_version":"source","requires_python":null,"size":36837,"upload_time":"2024-03-08T17:21:48","upload_time_iso_8601":"2024-03-08T17:21:48.929649Z","url":"https://files.pythonhosted.org/packages/e4/a9/1c91367221b07d7d1e5142a560c2b9479da7bf75b41b27c0da4af233b4e5/lingva-5.0.1.tar.gz","yanked":false,"yanked_reason":null}],"5.0.2":[{"comment_text":"","digests":{"blake2b_256":"5dccdefd317640621742b8aa9fdc18e50f670dbe20790552141af52664c5c7bd","md5":"fd70aef79c1c2689fd30ae85a9edaf47","sha256":"8287c97ab2e49e722fcc79f85a8b441a1b87da03a04edf9c0f783b6c37e4dd6e"},"downloads":-1,"filename":"lingva-5.0.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"fd70aef79c1c2689fd30ae85a9edaf47","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":25108,"upload_time":"2024-03-09T16:31:37","upload_time_iso_8601":"2024-03-09T16:31:37.655819Z","url":"https://files.pythonhosted.org/packages/5d/cc/defd317640621742b8aa9fdc18e50f670dbe20790552141af52664c5c7bd/lingva-5.0.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b176b65a4e86e693d63d735e2fe95364bd30c0756f488afe21d66cccb91b17f6","md5":"3c25afa183827c083980333d1c102970","sha256":"5f9ce7ff3061dad66a4bbac1ff90c227d389b6d45f0ba6253b80874bc3e5c275"},"downloads":-1,"filename":"lingva-5.0.2.tar.gz","has_sig":false,"md5_digest":"3c25afa183827c083980333d1c102970","packagetype":"sdist","python_version":"source","requires_python":null,"size":37705,"upload_time":"2024-03-09T16:31:39","upload_time_iso_8601":"2024-03-09T16:31:39.298453Z","url":"https://files.pythonhosted.org/packages/b1/76/b65a4e86e693d63d735e2fe95364bd30c0756f488afe21d66cccb91b17f6/lingva-5.0.2.tar.gz","yanked":false,"yanked_reason":null}],"5.0.3":[{"comment_text":"","digests":{"blake2b_256":"41f4e77c0ac75f66f6c888d81bc83cd67df0cd19af9b5bf8c17e7879be6f7b93","md5":"e4951c8deba2ff3e3c03930a410dc107","sha256":"b8f28d1bc8c7c25b5389c3b8f07648f9888e822b90b56a1dda24bc8878203078"},"downloads":-1,"filename":"lingva-5.0.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"e4951c8deba2ff3e3c03930a410dc107","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":25145,"upload_time":"2024-06-06T15:28:59","upload_time_iso_8601":"2024-06-06T15:28:59.751206Z","url":"https://files.pythonhosted.org/packages/41/f4/e77c0ac75f66f6c888d81bc83cd67df0cd19af9b5bf8c17e7879be6f7b93/lingva-5.0.3-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c184381a90f882e25b99fc2f9a662d641f59b8a59bdfc3ac4de30020f6e71a6d","md5":"2eb82bdee63dbfbf2894f77f82a163dd","sha256":"0d266905748d6b3c75f5644ecca7efc5314214020103a258326dc38d5a820755"},"downloads":-1,"filename":"lingva-5.0.3.tar.gz","has_sig":false,"md5_digest":"2eb82bdee63dbfbf2894f77f82a163dd","packagetype":"sdist","python_version":"source","requires_python":null,"size":37998,"upload_time":"2024-06-06T15:29:09","upload_time_iso_8601":"2024-06-06T15:29:09.437421Z","url":"https://files.pythonhosted.org/packages/c1/84/381a90f882e25b99fc2f9a662d641f59b8a59bdfc3ac4de30020f6e71a6d/lingva-5.0.3.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"41f4e77c0ac75f66f6c888d81bc83cd67df0cd19af9b5bf8c17e7879be6f7b93","md5":"e4951c8deba2ff3e3c03930a410dc107","sha256":"b8f28d1bc8c7c25b5389c3b8f07648f9888e822b90b56a1dda24bc8878203078"},"downloads":-1,"filename":"lingva-5.0.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"e4951c8deba2ff3e3c03930a410dc107","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":25145,"upload_time":"2024-06-06T15:28:59","upload_time_iso_8601":"2024-06-06T15:28:59.751206Z","url":"https://files.pythonhosted.org/packages/41/f4/e77c0ac75f66f6c888d81bc83cd67df0cd19af9b5bf8c17e7879be6f7b93/lingva-5.0.3-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c184381a90f882e25b99fc2f9a662d641f59b8a59bdfc3ac4de30020f6e71a6d","md5":"2eb82bdee63dbfbf2894f77f82a163dd","sha256":"0d266905748d6b3c75f5644ecca7efc5314214020103a258326dc38d5a820755"},"downloads":-1,"filename":"lingva-5.0.3.tar.gz","has_sig":false,"md5_digest":"2eb82bdee63dbfbf2894f77f82a163dd","packagetype":"sdist","python_version":"source","requires_python":null,"size":37998,"upload_time":"2024-06-06T15:29:09","upload_time_iso_8601":"2024-06-06T15:29:09.437421Z","url":"https://files.pythonhosted.org/packages/c1/84/381a90f882e25b99fc2f9a662d641f59b8a59bdfc3ac4de30020f6e71a6d/lingva-5.0.3.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
