{"info":{"author":"","author_email":"\"beda.software\" <fhirpy@beda.software>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Intended Audience :: Developers","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Internet :: WWW/HTTP","Topic :: Software Development :: Libraries :: Python Modules"],"description":"[![build status](https://github.com/beda-software/fhir-py/actions/workflows/build.yaml/badge.svg)](https://github.com/beda-software/fhir-py/actions/workflows/build.yaml)\n[![codecov](https://codecov.io/gh/beda-software/fhir-py/branch/master/graph/badge.svg)](https://codecov.io/gh/beda-software/fhir-py)\n[![pypi](https://img.shields.io/pypi/v/fhirpy.svg)](https://pypi.org/project/fhirpy)\n[![Supported Python version](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/release/python-380/)\n\n# fhir-py\nasync/sync FHIR client for python3.\nThis package provides an API for CRUD operations over FHIR resources\n\n```pip install fhirpy```\n\nor to install the latest dev version:\n\n```pip install git+https://github.com/beda-software/fhir-py.git```\n\nYou can test this library by interactive FHIR course in the repository [Aidbox/jupyter-course](https://github.com/Aidbox/jupyter-course).\n\n<!-- To regenerate table of contents: doctoc README.md --maxlevel=3 -->\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Getting started](#getting-started)\n  - [Async example](#async-example)\n  - [Searchset examples](#searchset-examples)\n    - [Chained parameters](#chained-parameters)\n    - [Reference](#reference)\n    - [Date](#date)\n    - [Modifiers](#modifiers)\n    - [Raw parameters](#raw-parameters)\n  - [Get resource by id](#get-resource-by-id)\n  - [Get exactly one resource](#get-exactly-one-resource)\n  - [Get first result](#get-first-result)\n  - [Get total count](#get-total-count)\n  - [Fetch one page](#fetch-one-page)\n  - [Fetch all resources on all pages](#fetch-all-resources-on-all-pages)\n  - [Page count (_count)](#page-count-_count)\n  - [Sort (_sort)](#sort-_sort)\n  - [Elements (_elements)](#elements-_elements)\n  - [Include](#include)\n    - [Modifier :iterate (or :recurse in some previous versions of FHIR)](#modifier-iterate-or-recurse-in-some-previous-versions-of-fhir)\n    - [Wild card (any search parameter of type=reference be included)](#wild-card-any-search-parameter-of-typereference-be-included)\n  - [Revinclude](#revinclude)\n    - [Wild card (any search parameter of type=reference be included)](#wild-card-any-search-parameter-of-typereference-be-included-1)\n  - [Conditional operations](#conditional-operations)\n    - [Conditional create](#conditional-create)\n    - [Conditional update](#conditional-update)\n    - [Conditional patch](#conditional-patch)\n- [Resource and helper methods](#resource-and-helper-methods)\n  - [Validate resource using operation $validate](#validate-resource-using-operation-validate)\n  - [Accessing resource attributes](#accessing-resource-attributes)\n  - [get_by_path(path, default=None)](#get_by_pathpath-defaultnone)\n  - [set_by_path(obj, path, value)](#set_by_pathpath)\n  - [serialize()](#serialize)\n- [Reference](#reference-1)\n  - [Main class structure](#main-class-structure)\n  - [Acync client (based on _aiohttp_) – AsyncFHIRClient](#acync-client-based-on-_aiohttp_--asyncfhirclient)\n    - [AsyncFHIRResource](#asyncfhirresource)\n    - [AsyncFHIRReference](#asyncfhirreference)\n    - [AsyncFHIRSearchSet](#asyncfhirsearchset)\n  - [Sync client (based on _requests_) – SyncFHIRClient](#sync-client-based-on-_requests_--syncfhirclient)\n    - [SyncFHIRResource](#syncfhirresource)\n    - [SyncFHIRReference](#syncfhirreference)\n    - [SyncFHIRSearchSet](#syncfhirsearchset)\n- [Run integration tests](#run-integration-tests)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n# Getting started\n## Async example\n```Python\nimport asyncio\nfrom fhirpy import AsyncFHIRClient\n\n\nasync def main():\n    # Create an instance\n    client = AsyncFHIRClient(\n        'http://fhir-server/',\n        authorization='Bearer TOKEN',\n    )\n\n    # Search for patients\n    resources = client.resources('Patient')  # Return lazy search set\n    resources = resources.search(name='John').limit(10).sort('name')\n    patients = await resources.fetch()  # Returns list of AsyncFHIRResource\n\n    # Create Organization resource\n    organization = client.resource(\n        'Organization',\n        name='beda.software',\n        active=False\n    )\n    await organization.save()\n\n    # Update (PATCH) organization. Resource support accessing its elements\n    # both as attribute and as a dictionary keys\n    if organization['active'] is False:\n        organization.active = True\n    await organization.save(fields=['active'])\n    # `await organization.patch(active=True)` would do the same PATCH operation\n\n    # Get patient resource by reference and delete\n    patient_ref = client.reference('Patient', 'new_patient')\n    # Get resource from this reference\n    # (throw ResourceNotFound if no resource was found)\n    patient_res = await patient_ref.to_resource()\n    await patient_res.delete()\n\n    # Iterate over search set\n    org_resources = client.resources('Organization')\n    # Lazy loading resources page by page with page count = 100\n    async for org_resource in org_resources.limit(100):\n        print(org_resource.serialize())\n\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n```\n\n## Searchset examples\n```Python\npatients = client.resources('Patient')\n\npatients.search(birthdate__gt='1944', birthdate__lt='1964')\n# /Patient?birthdate=gt1944&birthdate=lt1964\n\npatients.search(name__contains='John')\n# /Patient?name:contains=John\n\npatients.search(name=['John', 'Rivera'])\n# /Patient?name=John&name=Rivera\n\npatients.search(name='John,Eva')\n# /Patient?name=John,Eva\n\npatients.search(family__exact='Moore')\n# /Patient?family:exact=Moore\n\npatients.search(address_state='TX')\n# /Patient?address-state=TX\n\npatients.search(active=True, _id='id')\n# /Patient?active=true&_id=id\n\npatients.search(gender__not=['male', 'female'])\n# /Patient?gender:not=male&gender:not=female\n```\n\n### Chained parameters\n```Python\npatients.search(general_practitioner__Organization__name='Hospital')\n# /Patient?general-practitioner:Organization.name=Hospital\n```\n\n```Python\npatients.search(general_practitioner__name='Hospital')\n# /Patient?general-practitioner.name=Hospital\n```\n\n### Reference\n```Python\npractitioner = client.resources('Practitioner').search(_id='john-smith').first()\npatients.search(general_practitioner=practitioner)\n# /Patient?general-practitioner=Practitioner/john-smith\n```\n\n### Date\n```Python\nimport pytz\nimport datetime\n\n\npatients.search(birthdate__lt=datetime.datetime.now(pytz.utc))\n# /Patient?birthdate=lt2019-11-19T20:16:08Z\n\npatients.search(birthdate__gt=datetime.datetime(2013, 10, 27, tzinfo=pytz.utc))\n# /Patient?birthdate=gt2013-10-27T00:00:00Z\n```\n\n### Modifiers\n```Python\nconditions = client.resources('Condition')\n\nconditions.search(code__text='headache')\n# /Condition?code:text=headache\n\nconditions.search(code__in='http://acme.org/fhir/ValueSet/cardiac-conditions')\n# /Condition?code:in=http://acme.org/fhir/ValueSet/cardiac-conditions\n\nconditions.search(code__not_in='http://acme.org/fhir/ValueSet/cardiac-conditions')\n# /Condition?code:not-in=http://acme.org/fhir/ValueSet/cardiac-conditions\n\nconditions.search(code__below='126851005')\n# /Condition?code:below=126851005\n\nconditions.search(code__above='126851005')\n# /Condition?code:above=126851005\n```\n\n### Raw parameters\nSometimes you can find that fhir-py does not implement some search parameters from the FHIR specification. \nIn this case, you can use `Raw()` wrapper without any transformations\n\n```Python\nfrom fhirpy.base.searchset import Raw\n\npatients = client.resources('Patient')\npatients.search(Raw(**{'general-practitioner.name': 'Hospital'}))\n# /Patient?general-practitioner.name=Hospital\n```\n\n## Get resource by id\nUse reference to get resource by id\n```Python\npatient = await client.reference('Patient', '1').to_resource()\n# /Patient/1\n```\n\nOr use FHIR search API with `.first()` or `.get()` as described below.\n\n## Get exactly one resource\n```Python\npractitioners = client.resources('Practitioner')\n\ntry:\n    await practitioners.search(active=True, _id='id').get()\n    # /Practitioner?active=true&_id=id\nexcept ResourceNotFound:\n    pass\nexcept MultipleResourcesFound:\n    pass\n```\n\n## Get first result\n```Python\nawait practitioners.search(name='Jack').first()\n# /Practitioner?name=Jack&_count=1\n\nawait patients.sort('active', '-birthdate').first()\n# /Patient?_sort=active,-birthdate&_count=1\n```\n\n## Get total count\n```Python\nawait practitioners.search(active=True).count()\n\nawait patients.count()\n```\n\n## Fetch one page\n```Python\nawait practitioners.fetch()\n# /Practitioner\n\nawait patients.elements('name', 'telecom').fetch()\n# /Patient?_elements=resourceType,name,id,telecom\n```\n\n## Fetch all resources on all pages\nKeep in mind that this method as well as .fetch() doesn't return any included resources. Use fetch_raw() if you want to get all included resources.\n```Python\n# Returns a list of `Practitioner` resources\nawait practitioners.search(address_city='Krasnoyarsk').fetch_all()\n\nawait patients.fetch_all()\n```\n\n## Page count (_count)\n```Python\n# Get 100 resources\nawait practitioners.limit(100).fetch()\n```\n\n## Sort (_sort)\n```Python\nobservations = client.resources('Observation')\n\nobservations.sort('status', '-date', 'category')\n# /Observation?_sort=status,-date,category\n```\n\n## Elements (_elements)\n```Python\n# Get only specified set of elements for each resource\npatients.elements('identifier', 'active', 'link')\n# /Patient?_elements=identifier,active,link\n\n# Get all elements except specified set\npractitioners.elements('address', 'telecom', exclude=True)\n```\n\n## Include\n```Python\nresult = await client.resources('EpisodeOfCare') \\\n    .include('EpisodeOfCare', 'patient').fetch_raw()\n# /EpisodeOfCare?_include=EpisodeOfCare:patient\nfor entry in result.entry:\n    print(entry.resource)\n\nawait client.resources('MedicationRequest') \\\n    .include('MedicationRequest', 'patient', target_resource_type='Patient') \\\n    .fetch_raw()\n# /MedicationRequest?_include=MedicationRequest:patient:Patient\n```\n### Modifier :iterate (or :recurse in some previous versions of FHIR)\n```Python\n# For FHIR version >= 3.5 we can also use modifier :iterate\nawait client.resources('MedicationRequest') \\\n    .include('MedicationDispense', 'prescription') \\\n    .include('MedicationRequest', 'performer', iterate=True) \\\n    .fetch_raw()\n# /MedicationRequest?_include=MedicationDispense:prescription\n#    &_include:iterate=MedicationRequest:performer\n\n# For FHIR version 3.0-3.3 use modifier :recurse\nawait client.resources('MedicationDispense') \\\n    .include('MedicationRequest', 'prescriber', recursive=True) \\\n    .fetch_raw()\n# /MedicationDispense?_include:recurse=MedicationRequest:prescriber\n```\n### Wild card (any search parameter of type=reference be included)\n```Python\nawait client.resources('Encounter').include('*') \\\n    .fetch_raw()\n# /Encounter?_include=*\n```\n\n## Revinclude\n```Python\nawait practitioners.revinclude('Group', 'member').fetch_raw()\n# /Practitioner?_revinclude=Group:member\n```\nor\n```Python\nawait practitioners.include('Group', 'member', reverse=True).fetch_raw()\n# /Practitioner?_revinclude=Group:member\n```\n\n### Wild card (any search parameter of type=reference be included)\n```Python\nawait client.resources('EpisodeOfCare').revinclude('*') \\\n    .fetch_raw()\n# /EpisodeOfCare?_revinclude=*\n```\n\n## Conditional operations\n### Conditional create\n[FHIR spec: Conditional create](https://build.fhir.org/http.html#ccreate)<br>\n#### For resource\n```Python\n# resource.create(search_params)\n# executes POST /Patient?identifier=fhirpy\n\npatient = client.resource(\"Patient\",\n    identifier=[{\"system\": \"http://example.com/env\", \"value\": \"fhirpy\"}],\n    name=[{\"text\": \"Mr. Smith\"}],\n)\nawait patient.create(identifier=\"other\")\n```\n#### For SearchSet\n```Python\n# searchset.get_or_create(resource)\n# executes POST /Patient?identifier=fhirpy\n\npatient, created = await client.resources(\"Patient\").search(identifier=\"fhirpy\").get_or_create(patient_to_save)\n\n# no match -> created is True\n# one match -> created is False, return existing resource\n# multiple matches -> 412 'MultipleResourcesFound'\n```\n### Conditional update\n[FHIR spec: Conditional update](https://build.fhir.org/http.html#cond-update)<br>\n```Python\n# resource, created: bool = searchset.patch(resource)\n# executes PUT /Patient?identifier=fhirpy\n\npatient_to_update = client.resource(\"Patient\", \n                                    identifier=[{\"system\": \"http://example.com/env\", \"value\": \"fhirpy\"}],\n                                    active=False)\nnew_patient, created = await client.resources(\"Patient\").search(identifier=\"fhirpy\").update(patient_to_update)\n\n# no match -> created is True\n# one match -> created is False, the matched resource is overwritten\n# multiple matches -> 412 'MultipleResourcesFound'\n```\n### Conditional patch\n[FHIR spec: Conditional patch](https://build.fhir.org/http.html#cond-patch)<br>\n```Python\n# patched_resource = searchset.patch(resource)\n# executes PATCH /Patient?identifier=fhirpy\n\npatient_to_patch = client.resource(\"Patient\", \n                                    identifier=[{\"system\": \"http://example.com/env\", \"value\": \"fhirpy\"}], \n                                    name=[{\"text\": \"Mr. Smith\"}])\npatched_patient = await client.resources(\"Patient\").search(identifier=\"fhirpy\").patch(patient_to_patch)\n\n# no match -> 404 'ResourceNotFound'\n# multiple matches -> 412 'MultipleResourcesFound'\n```\n\n### Conditional delete\n[FHIR spec: Conditional delete](https://build.fhir.org/http.html#cdelete)<br>\n```Python\nresponse_data, status_code = await self.client.resources(\"Patient\").search(identifier=\"abc\").delete()\n\n# no match -> status_code = 204 'No Content'\n# one match -> status_code = 200 'OK'\n# multiple matches -> status_code = 412 'MultipleResourcesFound' (implementation specific)\n```\n\n# Resource and helper methods\n\n## Validate resource using operation $validate\n```Python\ntry:\n    await client.resource('Patient', birthDate='date', custom_prop='123', telecom=True) \\\n        .is_valid(raise_exception=True)\nexcept OperationOutcome as e:\n    print('Error: {}'.format(e))\n\npatient = client.resource('Patient', birthDate='1998-01-01')\nif (await patient.is_valid()):\n    pass\n```\n\n## Accessing resource attributes\n```Python\npatient = await client.resources('Patient').first()\n\n# Work with the resource as a dictionary\npatient_family = patient['name'][0]['family']\n\n# Or access value by an attribute\npatient_given_name = patient.name[0].given[0]\n```\n\n## Static type checking with [mypy](https://github.com/python/mypy) and [fhir-py-types](https://github.com/beda-software/fhir-py-types)\n```Python\nfrom fhir_py_types.generated.resources import Patient\n\npatient: Patient = await client.resources('Patient').first()\n\n# Works only with dictionary-like resource access\npatient_family = patient['name'][0]['family1']\n# 'TypedDict \"HumanName\" has no key \"family1\" note: Did you mean \"family\"?'\n```\nCheck [fhir-py-types](https://github.com/beda-software/fhir-py-types) for more details on generating type definitions from FHIR `StructureDefintion`\n\n## get_by_path(path, default=None)\n```Python\npatient_postal = patient.get_by_path(['resource', 'address', 0, 'postalCode'])\n\n# get_by_path can be also used on any nested attribute\npatient_name = patient.name[0]\npatient_fullname = '{} {}'.format(\n    patient_name.get_by_path(['given', 0]),\n    patient_name.get_by_path(['family'])\n)\n\n# Get identifier value by specified system or empty string\nuid = patient.get_by_path([\n        'resource', 'identifier',\n        {'system':'http://example.com/identifier/uid'},\n        'value'\n    ], '')\n\n# Get base value amount or 0\ninvoice = await client.resources('Invoice').first()\nbase_value = invoice.get_by_path([\n    'totalPriceComponent',\n    {'type': 'base'},\n    'amount', 'value'], 0)\n```\n\n## set_by_path(obj, path, value)\n```python\nresource = {\n    \"name\": [{\"given\": [\"Firstname\"], \"family\": \"Lastname\"}],\n}\n\nset_by_path(resource, [\"name\", 0, \"given\", 0], \"FirstnameUpdated\")\n\n# resource\n# {\"name\": [{\"given\": [\"FirstnameUpdated\"], \"family\": \"Lastname\"}]}\n```\n\n## serialize()\n```Python\n# Returns resources as dict\npatient = await client.reference('Patient', '1').to_resource()\npatient.serialize()\n# Or \nawait client.reference('Patient', '1').to_resource().serialize()\n# {'resourceType': 'Patient', 'id': '1', 'meta': {'versionId': '1', 'lastUpdated': '2021-11-13T11:50:24.685719Z'}, ...}\n```\n\n# Reference\n\n## Main class structure\nBoth async and sync clients have identical sets of classes and methods.\n\n|               | Sync                | Async                |\n| ------------- | ------------------- | -------------------- |\n| Client        | SyncFHIRClient      | AsyncFHIRClient      |\n| SearchSet     | SyncFHIRSearchSet   | AsyncFHIRSearchSet   |\n| Resource      | SyncFHIRResource    | AsyncFHIRResource    |\n| Reference     | SyncFHIRReference   | AsyncFHIRReference   |\n\n\n## Acync client (based on _aiohttp_) – AsyncFHIRClient\nImport library:\n\n`from fhirpy import AsyncFHIRClient`\n\nTo create AsyncFHIRClient instance use:\n\n`AsyncFHIRClient(url, authorization='', extra_headers={})`\n\nReturns an instance of the connection to the server which provides:\n* .reference(resource_type, id, reference, **kwargs) - returns `AsyncFHIRReference` to the resource\n* .resource(resource_type, **kwargs) - returns `AsyncFHIRResource` which described below\n* .resources(resource_type) - returns `AsyncFHIRSearchSet`\n* .execute(path, method='post', data=None, params=None) - returns a result of FHIR operation\n\n### Aiohttp request parameters\nSometimes you need more control over the way http request is made and provide additional aiohttp [session's request](https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession.request) parameters like `ssl`, `proxy`, `cookies`, `timeout` etc. It's possible by providing `aiohttp_config` dict for `AsyncFHIRClient`:\n```Python\nclient = AsyncFHIRClient(\n    FHIR_SERVER_URL,\n    aiohttp_config={\n        \"ssl\": ssl.create_default_context(),\n        \"timeout\": aiohttp.ClientTimeout(total=100),\n    }\n)\n```\n\nBe careful and don't override other request values like `params`, `json`, `data`, `auth`, because it'll interfere with the way `fhir-py` works and lead to an incorrect behavior. \n\n### AsyncFHIRResource\n\nprovides:\n* .serialize() - serializes resource\n* .get_by_path(path, default=None) – gets the value at path of resource\n* `async` .save(fields=[]) - creates or updates or patches (with fields=[...]) resource instance\n* `async` .update() - overrides resource instance\n* `async` .patch(**kwargs) - patches resource instance\n* `async` .delete() - deletes resource instance\n* `async` .refresh() - reloads resource from a server\n* `async` .to_reference(**kwargs) - returns `AsyncFHIRReference` for this resource\n* `async` .execute(operation, method='post', data=None, params=None) - returns a result of FHIR operation on the resource\n\n### AsyncFHIRReference\n\nprovides:\n* `async` .to_resource() - returns `AsyncFHIRResource` for this reference\n* `async` .execute(operation, method='post', data=None, params=None) - returns a result of FHIR operation on the resource\n\n### AsyncFHIRSearchSet\n\nprovides:\n* .search(param=value)\n* .limit(count)\n* .sort(*args)\n* .elements(*args, exclude=False)\n* .include(resource_type, attr=None, recursive=False, iterate=False)\n* .revinclude(resource_type, attr=None, recursive=False, iterate=False)\n* .has(*args, **kwargs)\n* `async` .fetch() - makes query to the server and returns a list of `Resource` filtered by resource type\n* `async` .fetch_all() - makes query to the server and returns a full list of `Resource` filtered by resource type\n* `async` .fetch_raw() - makes query to the server and returns a raw Bundle `Resource`\n* `async` .first() - returns `Resource` or None\n* `async` .get(id=None) - returns `Resource` or raises `ResourceNotFound` when no resource found or MultipleResourcesFound when more than one resource found (parameter 'id' is deprecated)\n* `async` .count() - makes query to the server and returns the total number of resources that match the SearchSet\n* `async` .get_or_create(resource) - conditional create\n* `async` .update(resource) - conditional update\n* `async` .patch(resource) - conditional patch\n\n\n## Sync client (based on _requests_) – SyncFHIRClient\nImport library:\n\n`from fhirpy import SyncFHIRClient`\n\nTo create SyncFHIRClient instance use:\n\n`SyncFHIRClient(url, authorization='', extra_headers={})`\n\n\nReturns an instance of the connection to the server which provides:\n* .reference(resource_type, id, reference, **kwargs) - returns `SyncFHIRReference` to the resource\n* .resource(resource_type, **kwargs) - returns `SyncFHIRResource` which described below\n* .resources(resource_type) - returns `SyncFHIRSearchSet`\n\n### Requests request parameters\nPass `requests_config` parameter to `SyncFHIRClient` if you want to provide additional parameters for a [request](https://docs.python-requests.org/en/latest/api/#requests.request) like `verify`, `cert`, `timeout` etc.\n```Python\nclient = SyncFHIRClient(\n    FHIR_SERVER_URL,\n    requests_config={\n        \"verify\": False,\n        \"allow_redirects\": True,\n        \"timeout\": 60,\n    }\n)\n```\n\nBe careful and don't override other request values like `params`, `json`, `data`, `headers`, which may interfere with the way `fhir-py` works and lead to an incorrect behavior. \n\n### SyncFHIRResource\n\nThe same as AsyncFHIRResource but with sync methods\n\n### SyncFHIRReference\n\nprovides:\nThe same as AsyncFHIRReference but with sync methods\n\n### SyncFHIRSearchSet\n\nThe same as AsyncFHIRSearchSet but with sync methods\n\n\n# Run integration tests\n(need some test FHIR server to run with, e.g. https://docs.aidbox.app/installation/setup-aidbox.dev)\n1. Clone this repository:\n`https://github.com/beda-software/fhir-py.git`\n\n2. Go to fhir-py folder and install dev dependencies:\n```\ncd fhir-py\npip install -r requirements.txt\n```\n\nIf you've already installed fhir-py library and want to test the last changes, reinstall it by running `python setup.py install` (or uninstall `pip uninstall fhirpy`)\n\n3. Provide ENV variables `FHIR_SERVER_URL` and `FHIR_SERVER_AUTHORIZATION`, or edit tests/config.py\n\n4. Run `pytest`\n\nIf you've found any bugs or think that some part of fhir-py is not compatible with FHIR spec, feel free to create an issue/pull request.\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"fhir","license":"","maintainer":"","maintainer_email":"","name":"fhirpy","package_url":"https://pypi.org/project/fhirpy/","platform":null,"project_url":"https://pypi.org/project/fhirpy/","project_urls":{"Documentation":"https://github.com/beda-software/fhir-py#readme","Homepage":"https://github.com/beda-software/fhir-py","Source":"https://github.com/beda-software/fhir-py.git"},"provides_extra":null,"release_url":"https://pypi.org/project/fhirpy/1.4.2/","requires_dist":["requests>=2.25.1","aiohttp>=3.6.3","pytz","pytest>=6.2.4 ; extra == \"test\"","pytest-asyncio>=0.15.1 ; extra == \"test\"","responses>=0.13.3 ; extra == \"test\""],"requires_python":">=3.8","summary":"FHIR client for python","version":"1.4.2","yanked":false,"yanked_reason":null},"last_serial":19604247,"releases":{"0.2.0":[{"comment_text":"","digests":{"blake2b_256":"edce55f7ffa9e3ce268b56210a8818ef91288c3e674b8c56123e30d739f594ad","md5":"1f7e5cf51782519a6d220f10b2c33b2d","sha256":"29cb8a0dfd62836451265555b11742b82e20b8628b30bf9a9025708a3301914d"},"downloads":-1,"filename":"fhirpy-0.2.0.tar.gz","has_sig":false,"md5_digest":"1f7e5cf51782519a6d220f10b2c33b2d","packagetype":"sdist","python_version":"source","requires_python":null,"size":144478,"upload_time":"2018-11-20T15:47:37","upload_time_iso_8601":"2018-11-20T15:47:37.341780Z","url":"https://files.pythonhosted.org/packages/ed/ce/55f7ffa9e3ce268b56210a8818ef91288c3e674b8c56123e30d739f594ad/fhirpy-0.2.0.tar.gz","yanked":false,"yanked_reason":null}],"0.2.1":[{"comment_text":"","digests":{"blake2b_256":"f247c5ebc0246c616276ea22c3ffa63919e2b30f2dd3bf63b73a27a3f9d11b40","md5":"9bfc4f44d107197dd6e7a90c5fdbf984","sha256":"1e11bff7afa7af5641bef4df6f3ff4fd240f7dbbb5d27dcea33107e1bf5dab68"},"downloads":-1,"filename":"fhirpy-0.2.1-py3-none-any.whl","has_sig":false,"md5_digest":"9bfc4f44d107197dd6e7a90c5fdbf984","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":182737,"upload_time":"2019-06-17T07:26:18","upload_time_iso_8601":"2019-06-17T07:26:18.528847Z","url":"https://files.pythonhosted.org/packages/f2/47/c5ebc0246c616276ea22c3ffa63919e2b30f2dd3bf63b73a27a3f9d11b40/fhirpy-0.2.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"224876bb0527d60cb05cfe6315410af5faf9a01e42ea5a803ea49eff6cbc94b0","md5":"4c21dc926d88985e960ca8cf0f8c7c6f","sha256":"fd56af1110758f674ada52f52b00a6612f8c04a9441d17a1800bfbde89e5961e"},"downloads":-1,"filename":"fhirpy-0.2.1.tar.gz","has_sig":false,"md5_digest":"4c21dc926d88985e960ca8cf0f8c7c6f","packagetype":"sdist","python_version":"source","requires_python":null,"size":171574,"upload_time":"2019-06-17T07:26:20","upload_time_iso_8601":"2019-06-17T07:26:20.674523Z","url":"https://files.pythonhosted.org/packages/22/48/76bb0527d60cb05cfe6315410af5faf9a01e42ea5a803ea49eff6cbc94b0/fhirpy-0.2.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0":[{"comment_text":"","digests":{"blake2b_256":"72de05bca3a3c9d4fe5ab86d01032473d57bd790c7c5ecec298ac99730ef7934","md5":"ba4bfdc4e8ca1c699c64d7cca0a6bc99","sha256":"e863675b6ebec290f3d41b557a16232e04e57b3783a566d0d8a3e317eaec550e"},"downloads":-1,"filename":"fhirpy-1.0.0-py3-none-any.whl","has_sig":false,"md5_digest":"ba4bfdc4e8ca1c699c64d7cca0a6bc99","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":189800,"upload_time":"2019-11-20T15:08:57","upload_time_iso_8601":"2019-11-20T15:08:57.076163Z","url":"https://files.pythonhosted.org/packages/72/de/05bca3a3c9d4fe5ab86d01032473d57bd790c7c5ecec298ac99730ef7934/fhirpy-1.0.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"a74c6313524bb33f4a1f6f8ff7fe63ee304f0337726505a1164134176f8b635c","md5":"07abaa560db3cc549f57dcb4ee8826d4","sha256":"f1ed5721816de23f4eab9d8b6aa164ed468766a7e88547c6b105d4449b9bc6f7"},"downloads":-1,"filename":"fhirpy-1.0.0.tar.gz","has_sig":false,"md5_digest":"07abaa560db3cc549f57dcb4ee8826d4","packagetype":"sdist","python_version":"source","requires_python":null,"size":179082,"upload_time":"2019-11-20T15:08:59","upload_time_iso_8601":"2019-11-20T15:08:59.360227Z","url":"https://files.pythonhosted.org/packages/a7/4c/6313524bb33f4a1f6f8ff7fe63ee304f0337726505a1164134176f8b635c/fhirpy-1.0.0.tar.gz","yanked":false,"yanked_reason":null}],"1.1.0":[{"comment_text":"","digests":{"blake2b_256":"b1382c1916955b13d62255d66842ed22b4bdbde65df65dd3d017b5befe6ba3e8","md5":"42ab2612d24fa2d090ca224c9dc936a2","sha256":"f189e4c99dd48b8e0c280070055d3a8541f5ae95b530a95129f1588e63afa5c7"},"downloads":-1,"filename":"fhirpy-1.1.0-py3-none-any.whl","has_sig":false,"md5_digest":"42ab2612d24fa2d090ca224c9dc936a2","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":192296,"upload_time":"2019-12-26T04:50:55","upload_time_iso_8601":"2019-12-26T04:50:55.209636Z","url":"https://files.pythonhosted.org/packages/b1/38/2c1916955b13d62255d66842ed22b4bdbde65df65dd3d017b5befe6ba3e8/fhirpy-1.1.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"acd61c8ff8d285638c10785d42b2c71bdd253aac80a6c1f44fbc51aa86131406","md5":"68c3ac67b0a1b84c1578d0509c563b68","sha256":"ea26e82a080b1a7c9d94c995b5fd523d43f9a4ceb23e699f8dafd696113c3dbd"},"downloads":-1,"filename":"fhirpy-1.1.0.tar.gz","has_sig":false,"md5_digest":"68c3ac67b0a1b84c1578d0509c563b68","packagetype":"sdist","python_version":"source","requires_python":null,"size":19201,"upload_time":"2019-12-26T04:50:58","upload_time_iso_8601":"2019-12-26T04:50:58.482594Z","url":"https://files.pythonhosted.org/packages/ac/d6/1c8ff8d285638c10785d42b2c71bdd253aac80a6c1f44fbc51aa86131406/fhirpy-1.1.0.tar.gz","yanked":false,"yanked_reason":null}],"1.2.0":[{"comment_text":"","digests":{"blake2b_256":"3e716de65555ef182bde162a38e2b96170d33a615553092cd9eea89b81ade5b4","md5":"ff8bcb0d38238d90ac446b28dac2a624","sha256":"8b208ebc3beda5e9698e65bad6d20169882da36a7a852f2f487915eb5c2bca45"},"downloads":-1,"filename":"fhirpy-1.2.0-py3-none-any.whl","has_sig":false,"md5_digest":"ff8bcb0d38238d90ac446b28dac2a624","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":17608,"upload_time":"2020-08-12T17:09:16","upload_time_iso_8601":"2020-08-12T17:09:16.191017Z","url":"https://files.pythonhosted.org/packages/3e/71/6de65555ef182bde162a38e2b96170d33a615553092cd9eea89b81ade5b4/fhirpy-1.2.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"45f3d6f827f84b037e848d536de7c2f9132a0e2c869cef64c3572a814e683412","md5":"694c3ccc89fff0665f560666e67e5123","sha256":"19cdc9d5fe58ece52d4aecaf28e5eb4ccd94688fc10826b0889b4d237a552855"},"downloads":-1,"filename":"fhirpy-1.2.0.tar.gz","has_sig":false,"md5_digest":"694c3ccc89fff0665f560666e67e5123","packagetype":"sdist","python_version":"source","requires_python":null,"size":21576,"upload_time":"2020-08-12T17:09:18","upload_time_iso_8601":"2020-08-12T17:09:18.780459Z","url":"https://files.pythonhosted.org/packages/45/f3/d6f827f84b037e848d536de7c2f9132a0e2c869cef64c3572a814e683412/fhirpy-1.2.0.tar.gz","yanked":false,"yanked_reason":null}],"1.2.1":[{"comment_text":"","digests":{"blake2b_256":"543b1456ccb54fceb13666edce019234870396e42724bb90ab5d7f04f542211c","md5":"dd5efc50d1acebe40fc2131f574eddc8","sha256":"6195351e06a641276c81fcfed654ad8b06587d111089dc22d09a37a85f786cb8"},"downloads":-1,"filename":"fhirpy-1.2.1.tar.gz","has_sig":false,"md5_digest":"dd5efc50d1acebe40fc2131f574eddc8","packagetype":"sdist","python_version":"source","requires_python":null,"size":22232,"upload_time":"2021-03-18T09:05:45","upload_time_iso_8601":"2021-03-18T09:05:45.367935Z","url":"https://files.pythonhosted.org/packages/54/3b/1456ccb54fceb13666edce019234870396e42724bb90ab5d7f04f542211c/fhirpy-1.2.1.tar.gz","yanked":false,"yanked_reason":null}],"1.3.0":[{"comment_text":"","digests":{"blake2b_256":"5690d4f01204a2f7250882c85d255d191863dcb171f601eb7b14ab1e8d3f19b1","md5":"f30840139acbd8511c3b5d7afd010e5c","sha256":"cde72d241af4432bf20df4787c7d708098777ab4062206e5451d6bd53e8559f5"},"downloads":-1,"filename":"fhirpy-1.3.0-py3-none-any.whl","has_sig":false,"md5_digest":"f30840139acbd8511c3b5d7afd010e5c","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":18600,"upload_time":"2021-11-16T11:04:39","upload_time_iso_8601":"2021-11-16T11:04:39.749823Z","url":"https://files.pythonhosted.org/packages/56/90/d4f01204a2f7250882c85d255d191863dcb171f601eb7b14ab1e8d3f19b1/fhirpy-1.3.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"da6a914a675ee6137a4e7fbc7dc4616d8263c0596b2e1dd3b331cc479898b3dd","md5":"f401327746a2683ca244a2acc15666cf","sha256":"e03f49a4862e565b80f1344990abd60f3ae2c5002e96ce8518ed4b9bbf936b3c"},"downloads":-1,"filename":"fhirpy-1.3.0.tar.gz","has_sig":false,"md5_digest":"f401327746a2683ca244a2acc15666cf","packagetype":"sdist","python_version":"source","requires_python":null,"size":21882,"upload_time":"2021-11-16T11:04:41","upload_time_iso_8601":"2021-11-16T11:04:41.699452Z","url":"https://files.pythonhosted.org/packages/da/6a/914a675ee6137a4e7fbc7dc4616d8263c0596b2e1dd3b331cc479898b3dd/fhirpy-1.3.0.tar.gz","yanked":false,"yanked_reason":null}],"1.3.1":[{"comment_text":"","digests":{"blake2b_256":"574f80c70375eac584aca83f4f36bee77fdddfeaf45b7fc9c8b2fc5ec4c1cef7","md5":"6ed7c419c43909bb2142c232e901d57e","sha256":"f2b4c252c436d0e2c984a9ff0bd8a89d0c5a132cf35997ca81d63135277d5069"},"downloads":-1,"filename":"fhirpy-1.3.1-py3-none-any.whl","has_sig":false,"md5_digest":"6ed7c419c43909bb2142c232e901d57e","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":19029,"upload_time":"2023-01-09T09:23:29","upload_time_iso_8601":"2023-01-09T09:23:29.386001Z","url":"https://files.pythonhosted.org/packages/57/4f/80c70375eac584aca83f4f36bee77fdddfeaf45b7fc9c8b2fc5ec4c1cef7/fhirpy-1.3.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"336f5d2f4ad0e35c180defc996a10be3e5fe6875158b3d06eefe31f0b300e637","md5":"2672442a485512abbad6d31c1dd042ac","sha256":"f48c5383f0d4ed38384b93c6fb83190d173c6c81566d59168b17c617fe9701e9"},"downloads":-1,"filename":"fhirpy-1.3.1.tar.gz","has_sig":false,"md5_digest":"2672442a485512abbad6d31c1dd042ac","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":21580,"upload_time":"2023-01-09T09:23:31","upload_time_iso_8601":"2023-01-09T09:23:31.090951Z","url":"https://files.pythonhosted.org/packages/33/6f/5d2f4ad0e35c180defc996a10be3e5fe6875158b3d06eefe31f0b300e637/fhirpy-1.3.1.tar.gz","yanked":false,"yanked_reason":null}],"1.3.2":[{"comment_text":"","digests":{"blake2b_256":"b4fee43de5e2357ecaf10daadbdebc29c276d382ca36c7073218596cf3fd682b","md5":"984c3ad132eb657d94e9cc578ad1e6f4","sha256":"b95675cea7925671b3548cdc35dce3d17820fda278589fd87f46b1dbbbd33b52"},"downloads":-1,"filename":"fhirpy-1.3.2-py3-none-any.whl","has_sig":false,"md5_digest":"984c3ad132eb657d94e9cc578ad1e6f4","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":19478,"upload_time":"2023-07-04T11:18:45","upload_time_iso_8601":"2023-07-04T11:18:45.517774Z","url":"https://files.pythonhosted.org/packages/b4/fe/e43de5e2357ecaf10daadbdebc29c276d382ca36c7073218596cf3fd682b/fhirpy-1.3.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"595aef92200b428170a64b43e62904204891b606bd911ec1df8deb5bc354372c","md5":"cd9ed7004ba047e197d53c849ca69304","sha256":"f8397a8c41937bd58b4018f339cf1441f78ade64485c868649d5ea26b5c879ec"},"downloads":-1,"filename":"fhirpy-1.3.2.tar.gz","has_sig":false,"md5_digest":"cd9ed7004ba047e197d53c849ca69304","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":22301,"upload_time":"2023-07-04T11:18:47","upload_time_iso_8601":"2023-07-04T11:18:47.806384Z","url":"https://files.pythonhosted.org/packages/59/5a/ef92200b428170a64b43e62904204891b606bd911ec1df8deb5bc354372c/fhirpy-1.3.2.tar.gz","yanked":false,"yanked_reason":null}],"1.4.1":[{"comment_text":"","digests":{"blake2b_256":"6dedbc73525d5cf9d41cf9c72f2b63949d19e73acaf2d21a2b801faff3a06762","md5":"71e92eda40bfcb233ff4223fd8a33522","sha256":"fdf04465d114609610f6fdd0e1dc211721ef74077ee18db1a2a45d8d9cd0d774"},"downloads":-1,"filename":"fhirpy-1.4.1-py3-none-any.whl","has_sig":false,"md5_digest":"71e92eda40bfcb233ff4223fd8a33522","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":19950,"upload_time":"2023-08-18T07:44:35","upload_time_iso_8601":"2023-08-18T07:44:35.807755Z","url":"https://files.pythonhosted.org/packages/6d/ed/bc73525d5cf9d41cf9c72f2b63949d19e73acaf2d21a2b801faff3a06762/fhirpy-1.4.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"7c285f4f782aea35b2de68d6d8a2caf123f7c7aa31a0e5caf533856e68f0a1be","md5":"6fabd0b2f1e91f624f43e3df34d139d6","sha256":"a5b1488a4715f2029a5ac31f8ba650a47388e425dcc1f34aa963a9275fe63952"},"downloads":-1,"filename":"fhirpy-1.4.1.tar.gz","has_sig":false,"md5_digest":"6fabd0b2f1e91f624f43e3df34d139d6","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":22695,"upload_time":"2023-08-18T07:44:37","upload_time_iso_8601":"2023-08-18T07:44:37.109403Z","url":"https://files.pythonhosted.org/packages/7c/28/5f4f782aea35b2de68d6d8a2caf123f7c7aa31a0e5caf533856e68f0a1be/fhirpy-1.4.1.tar.gz","yanked":false,"yanked_reason":null}],"1.4.2":[{"comment_text":"","digests":{"blake2b_256":"676f2a61fcc29973e1e91f6f4ce668f3eb3a440c28ea99a9d122499e3a145038","md5":"10af4919fbabd247dde493fd9b98f8af","sha256":"cc41da118a0248f60021ccc59f2ce7cd5af59b7926a60928a88563770bf1f59f"},"downloads":-1,"filename":"fhirpy-1.4.2-py3-none-any.whl","has_sig":false,"md5_digest":"10af4919fbabd247dde493fd9b98f8af","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":20579,"upload_time":"2023-09-04T11:16:35","upload_time_iso_8601":"2023-09-04T11:16:35.525172Z","url":"https://files.pythonhosted.org/packages/67/6f/2a61fcc29973e1e91f6f4ce668f3eb3a440c28ea99a9d122499e3a145038/fhirpy-1.4.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4ea34b59fce80d36711023f3d236c71a4e371a33c73ce6d3ba5d782ff82b8d3d","md5":"2e6166c617453cca45448f148b399982","sha256":"30712451405047426582bc22598f395913b53f3b3cda8426a390692239030fc6"},"downloads":-1,"filename":"fhirpy-1.4.2.tar.gz","has_sig":false,"md5_digest":"2e6166c617453cca45448f148b399982","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":23889,"upload_time":"2023-09-04T11:16:36","upload_time_iso_8601":"2023-09-04T11:16:36.895493Z","url":"https://files.pythonhosted.org/packages/4e/a3/4b59fce80d36711023f3d236c71a4e371a33c73ce6d3ba5d782ff82b8d3d/fhirpy-1.4.2.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"676f2a61fcc29973e1e91f6f4ce668f3eb3a440c28ea99a9d122499e3a145038","md5":"10af4919fbabd247dde493fd9b98f8af","sha256":"cc41da118a0248f60021ccc59f2ce7cd5af59b7926a60928a88563770bf1f59f"},"downloads":-1,"filename":"fhirpy-1.4.2-py3-none-any.whl","has_sig":false,"md5_digest":"10af4919fbabd247dde493fd9b98f8af","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":20579,"upload_time":"2023-09-04T11:16:35","upload_time_iso_8601":"2023-09-04T11:16:35.525172Z","url":"https://files.pythonhosted.org/packages/67/6f/2a61fcc29973e1e91f6f4ce668f3eb3a440c28ea99a9d122499e3a145038/fhirpy-1.4.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4ea34b59fce80d36711023f3d236c71a4e371a33c73ce6d3ba5d782ff82b8d3d","md5":"2e6166c617453cca45448f148b399982","sha256":"30712451405047426582bc22598f395913b53f3b3cda8426a390692239030fc6"},"downloads":-1,"filename":"fhirpy-1.4.2.tar.gz","has_sig":false,"md5_digest":"2e6166c617453cca45448f148b399982","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":23889,"upload_time":"2023-09-04T11:16:36","upload_time_iso_8601":"2023-09-04T11:16:36.895493Z","url":"https://files.pythonhosted.org/packages/4e/a3/4b59fce80d36711023f3d236c71a4e371a33c73ce6d3ba5d782ff82b8d3d/fhirpy-1.4.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
