{"info":{"author":"Akis Kesoglou","author_email":"akiskesoglou@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Framework :: Django","Intended Audience :: Developers","License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],"description":"rules\n^^^^^\n\n``rules`` is a tiny but powerful app providing object-level permissions to\nDjango, without requiring a database. At its core, it is a generic framework\nfor building rule-based systems, similar to `decision trees`_. It can also be\nused as a standalone library in other contexts and frameworks.\n\n.. image:: https://img.shields.io/github/workflow/status/dfunckt/django-rules/CI/master\n    :target: https://github.com/dfunckt/django-rules/actions\n.. image:: https://coveralls.io/repos/dfunckt/django-rules/badge.svg\n    :target: https://coveralls.io/r/dfunckt/django-rules\n.. image:: https://img.shields.io/pypi/v/rules.svg\n    :target: https://pypi.org/project/rules/\n.. image:: https://img.shields.io/pypi/pyversions/rules.svg\n    :target: https://pypi.org/project/rules/\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white\n    :target: https://github.com/pre-commit/pre-commit\n\n.. _decision trees: http://wikipedia.org/wiki/Decision_tree\n\n\nFeatures\n========\n\n``rules`` has got you covered. ``rules`` is:\n\n-   **Documented**, **tested**, **reliable** and **easy to use**.\n-   **Versatile**. Decorate callables to build complex graphs of predicates.\n    Predicates can be any type of callable -- simple functions, lambdas,\n    methods, callable class objects, partial functions, decorated functions,\n    anything really.\n-   **A good Django citizen**. Seamless integration with Django views,\n    templates and the Admin for testing for object-level permissions.\n-   **Efficient** and **smart**. No need to mess around with a database to figure\n    out whether John really wrote that book.\n-   **Simple**. Dive in the code. You'll need 10 minutes to figure out how it\n    works.\n-   **Powerful**. ``rules`` comes complete with advanced features, such as\n    invocation context and storage for arbitrary data, skipping evaluation of\n    predicates under specific conditions, logging of evaluated predicates and more!\n\n\nTable of Contents\n=================\n\n- `Requirements`_\n- `Upgrading from 2.x`_\n- `Upgrading from 1.x`_\n- `How to install`_\n\n  - `Configuring Django`_\n\n- `Using Rules`_\n\n  - `Creating predicates`_\n  - `Dynamic predicates`_\n  - `Setting up rules`_\n  - `Combining predicates`_\n\n- `Using Rules with Django`_\n\n  - `Permissions`_\n  - `Permissions in models`_\n  - `Permissions in views`_\n  - `Permissions and rules in templates`_\n  - `Permissions in the Admin`_\n  - `Permissions in Django Rest Framework`_\n\n- `Advanced features`_\n\n  - `Custom rule sets`_\n  - `Invocation context`_\n  - `Binding \"self\"`_\n  - `Skipping predicates`_\n  - `Logging predicate evaluation`_\n\n- `Best practices`_\n- `API Reference`_\n- `Licence`_\n\n\nRequirements\n============\n\n``rules`` requires Python 3.8 or newer. The last version to support Python 2.7\nis ``rules`` 2.2. It can optionally integrate with Django, in which case\nrequires Django 3.2 or newer.\n\n*Note*: At any given moment in time, ``rules`` will maintain support for all\ncurrently supported Django versions, while dropping support for those versions\nthat reached end-of-life in minor releases. See the `Supported Versions`_\nsection on Django Project website for the current state and timeline.\n\n.. _Supported Versions: https://www.djangoproject.com/download/#supported-versions\n\n\nUpgrading from 2.x\n==================\n\nThe are no significant changes between ``rules`` 2.x and 3.x except dropping\nsupport for Python 2, so before upgrading to 3.x you just need to make sure\nyou're running a supported Python 3 version.\n\n\nUpgrading from 1.x\n==================\n\n*   Support for Python 2.6 and 3.3, and Django versions before 1.11 has been\n    dropped.\n\n*   The ``SkipPredicate`` exception and ``skip()`` method of ``Predicate``,\n    that were used to signify that a predicate should be skipped, have been\n    removed. You may return ``None`` from your predicate to achieve this.\n\n*   The APIs to replace a rule's predicate have been renamed and their\n    behaviour changed. ``replace_rule`` and ``replace_perm`` functions and\n    ``replace_rule`` method of ``RuleSet`` have been renamed to ``set_rule``,\n    ``set_perm`` and ``RuleSet.set_perm`` respectively. The old behaviour was\n    to raise a ``KeyError`` if a rule by the given name did not exist. Since\n    version 2.0 this has changed and you can safely use ``set_*`` to set a\n    rule's predicate without having to ensure the rule exists first.\n\n\nHow to install\n==============\n\nUsing pip:\n\n.. code:: bash\n\n    $ pip install rules\n\nManually:\n\n.. code:: bash\n\n    $ git clone https://github.com/dfunckt/django-rules.git\n    $ cd django-rules\n    $ python setup.py install\n\nRun tests with:\n\n.. code:: bash\n\n    $ ./runtests.sh\n\nYou may also want to read `Best practices`_ for general advice on how to\nuse ``rules``.\n\n\nConfiguring Django\n------------------\n\nAdd ``rules`` to ``INSTALLED_APPS``:\n\n.. code:: python\n\n    INSTALLED_APPS = (\n        # ...\n        'rules',\n    )\n\nAdd the authentication backend:\n\n.. code:: python\n\n    AUTHENTICATION_BACKENDS = (\n        'rules.permissions.ObjectPermissionBackend',\n        'django.contrib.auth.backends.ModelBackend',\n    )\n\n\nUsing Rules\n===========\n\n``rules`` is based on the idea that you maintain a dict-like object that maps\nstring keys used as identifiers of some kind, to callables, called\n*predicates*. This dict-like object is actually an instance of ``RuleSet`` and\nthe predicates are instances of ``Predicate``.\n\n\nCreating predicates\n-------------------\n\nLet's ignore rule sets for a moment and go ahead and define a predicate. The\neasiest way is with the ``@predicate`` decorator:\n\n.. code:: python\n\n    >>> @rules.predicate\n    >>> def is_book_author(user, book):\n    ...     return book.author == user\n    ...\n    >>> is_book_author\n    <Predicate:is_book_author object at 0x10eeaa490>\n\nThis predicate will return ``True`` if the book's author is the given user,\n``False`` otherwise.\n\nPredicates can be created from any callable that accepts anything from zero to\ntwo positional arguments:\n\n*   ``fn(obj, target)``\n*   ``fn(obj)``\n*   ``fn()``\n\nThis is their generic form. If seen from the perspective of authorization in\nDjango, the equivalent signatures are:\n\n*   ``fn(user, obj)``\n*   ``fn(user)``\n*   ``fn()``\n\nPredicates can do pretty much anything with the given arguments, but must\nalways return ``True`` if the condition they check is true, ``False``\notherwise. ``rules`` comes with several predefined predicates that you may\nread about later on in `API Reference`_, that are mostly useful when dealing\nwith `authorization in Django`_.\n\n\nDynamic predicates\n-------------------\n\nIf needed predicates can be created dynamically depending on parameters:\n\n.. code:: python\n\n    import rules\n\n\n    def role_is(role_id):\n        @rules.predicate\n        def user_has_role(user):\n            return user.role.id == role_id\n\n        return user_has_role\n\n\n    rules.add_perm(\"reports.view_report_abc\", role_is(12))\n    rules.add_perm(\"reports.view_report_xyz\", role_is(13))\n\n\nSetting up rules\n----------------\n\nLet's pretend that we want to let authors edit or delete their books, but not\nbooks written by other authors. So, essentially, what determines whether an\nauthor *can edit* or *can delete* a given book is *whether they are its\nauthor*.\n\nIn ``rules``, such requirements are modelled as *rules*. A *rule* is a map of\na unique identifier (eg. \"can edit\") to a predicate. Rules are grouped\ntogether into a *rule set*. ``rules`` has two predefined rule sets:\n\n*   A default rule set storing shared rules.\n*   Another rule set storing rules that serve as permissions in a Django\n    context.\n\nSo, let's define our first couple of rules, adding them to the shared rule\nset. We can use the ``is_book_author`` predicate we defined earlier:\n\n.. code:: python\n\n    >>> rules.add_rule('can_edit_book', is_book_author)\n    >>> rules.add_rule('can_delete_book', is_book_author)\n\nAssuming we've got some data, we can now test our rules:\n\n.. code:: python\n\n    >>> from django.contrib.auth.models import User\n    >>> from books.models import Book\n    >>> guidetodjango = Book.objects.get(isbn='978-1-4302-1936-1')\n    >>> guidetodjango.author\n    <User: adrian>\n    >>> adrian = User.objects.get(username='adrian')\n    >>> rules.test_rule('can_edit_book', adrian, guidetodjango)\n    True\n    >>> rules.test_rule('can_delete_book', adrian, guidetodjango)\n    True\n\nNice... but not awesome.\n\n\nCombining predicates\n--------------------\n\nPredicates by themselves are not so useful -- not more useful than any other\nfunction would be. Predicates, however, can be combined using binary operators\nto create more complex ones. Predicates support the following operators:\n\n*   ``P1 & P2``: Returns a new predicate that returns ``True`` if *both*\n    predicates return ``True``, otherwise ``False``. If P1 returns ``False``,\n    P2 will not be evaluated.\n*   ``P1 | P2``: Returns a new predicate that returns ``True`` if *any* of the\n    predicates returns ``True``, otherwise ``False``. If P1 returns ``True``,\n    P2 will not be evaluated.\n*   ``P1 ^ P2``: Returns a new predicate that returns ``True`` if one of the\n    predicates returns ``True`` and the other returns ``False``, otherwise\n    ``False``.\n*   ``~P``: Returns a new predicate that returns the negated result of the\n    original predicate.\n\nSuppose the requirement for allowing a user to edit a given book was for them\nto be either the book's author, or a member of the \"editors\" group. Allowing\nusers to delete a book should still be determined by whether the user is the\nbook's author.\n\nWith ``rules`` that's easy to implement. We'd have to define another\npredicate, that would return ``True`` if the given user is a member of the\n\"editors\" group, ``False`` otherwise. The built-in ``is_group_member`` factory\nwill come in handy:\n\n.. code:: python\n\n    >>> is_editor = rules.is_group_member('editors')\n    >>> is_editor\n    <Predicate:is_group_member:editors object at 0x10eee1350>\n\nWe could combine it with the ``is_book_author`` predicate to create a new one\nthat checks for either condition:\n\n.. code:: python\n\n    >>> is_book_author_or_editor = is_book_author | is_editor\n    >>> is_book_author_or_editor\n    <Predicate:(is_book_author | is_group_member:editors) object at 0x10eee1390>\n\nWe can now update our ``can_edit_book`` rule:\n\n.. code:: python\n\n    >>> rules.set_rule('can_edit_book', is_book_author_or_editor)\n    >>> rules.test_rule('can_edit_book', adrian, guidetodjango)\n    True\n    >>> rules.test_rule('can_delete_book', adrian, guidetodjango)\n    True\n\nLet's see what happens with another user:\n\n.. code:: python\n\n    >>> martin = User.objects.get(username='martin')\n    >>> list(martin.groups.values_list('name', flat=True))\n    ['editors']\n    >>> rules.test_rule('can_edit_book', martin, guidetodjango)\n    True\n    >>> rules.test_rule('can_delete_book', martin, guidetodjango)\n    False\n\nAwesome.\n\nSo far, we've only used the underlying, generic framework for defining and\ntesting rules. This layer is not at all specific to Django; it may be used in\nany context. There's actually no import of anything Django-related in the\nwhole app (except in the ``rules.templatetags`` module). ``rules`` however can\nintegrate tightly with Django to provide authorization.\n\n\n.. _authorization in Django:\n\nUsing Rules with Django\n=======================\n\n``rules`` is able to provide object-level permissions in Django. It comes\nwith an authorization backend and a couple template tags for use in your\ntemplates.\n\n\nPermissions\n-----------\n\nIn ``rules``, permissions are a specialised type of rules. You still define\nrules by creating and combining predicates. These rules however, must be added\nto a permissions-specific rule set that comes with ``rules`` so that they can\nbe picked up by the ``rules`` authorization backend.\n\n\nCreating permissions\n++++++++++++++++++++\n\nThe convention for naming permissions in Django is ``app_label.action_object``,\nand we like to adhere to that. Let's add rules for the ``books.change_book``\nand ``books.delete_book`` permissions:\n\n.. code:: python\n\n    >>> rules.add_perm('books.change_book', is_book_author | is_editor)\n    >>> rules.add_perm('books.delete_book', is_book_author)\n\nSee the difference in the API? ``add_perm`` adds to a permissions-specific\nrule set, whereas ``add_rule`` adds to a default shared rule set. It's\nimportant to know however, that these two rule sets are separate, meaning that\nadding a rule in one does not make it available to the other.\n\n\nChecking for permission\n+++++++++++++++++++++++\n\nLet's go ahead and check whether ``adrian`` has change permission to the\n``guidetodjango`` book:\n\n.. code:: python\n\n    >>> adrian.has_perm('books.change_book', guidetodjango)\n    False\n\nWhen you call the ``User.has_perm`` method, Django asks each backend in\n``settings.AUTHENTICATION_BACKENDS`` whether a user has the given permission\nfor the object. When queried for object permissions, Django's default\nauthentication backend always returns ``False``. ``rules`` comes with an\nauthorization backend, that is able to provide object-level permissions by\nlooking into the permissions-specific rule set.\n\nLet's add the ``rules`` authorization backend in settings:\n\n.. code:: python\n\n    AUTHENTICATION_BACKENDS = (\n        'rules.permissions.ObjectPermissionBackend',\n        'django.contrib.auth.backends.ModelBackend',\n    )\n\nNow, checking again gives ``adrian`` the required permissions:\n\n.. code:: python\n\n    >>> adrian.has_perm('books.change_book', guidetodjango)\n    True\n    >>> adrian.has_perm('books.delete_book', guidetodjango)\n    True\n    >>> martin.has_perm('books.change_book', guidetodjango)\n    True\n    >>> martin.has_perm('books.delete_book', guidetodjango)\n    False\n\n**NOTE:** Calling `has_perm` on a superuser will ALWAYS return `True`.\n\nPermissions in models\n---------------------\n\n**NOTE:** The features described in this section work on Python 3+ only.\n\nIt is common to have a set of permissions for a model, like what Django offers with\nits default model permissions (such as *add*, *change* etc.). When using ``rules``\nas the permission checking backend, you can declare object-level permissions for\nany model in a similar way, using a new ``Meta`` option.\n\nFirst, you need to switch your model's base and metaclass to the slightly extended\nversions provided in ``rules.contrib.models``. There are several classes and mixins\nyou can use, depending on whether you're already using a custom base and/or metaclass\nfor your models or not. The extensions are very slim and don't affect the models'\nbehavior in any way other than making it register permissions.\n\n* If you're using the stock ``django.db.models.Model`` as base for your models,\n  simply switch over to ``RulesModel`` and you're good to go.\n\n* If you already have a custom base class adding common functionality to your models,\n  add ``RulesModelMixin`` to the classes it inherits from and set ``RulesModelBase``\n  as its metaclass, like so::\n\n      from django.db.models import Model\n      from rules.contrib.models import RulesModelBase, RulesModelMixin\n\n      class MyModel(RulesModelMixin, Model, metaclass=RulesModelBase):\n          ...\n\n* If you're using a custom metaclass for your models, you'll already know how to\n  make it inherit from ``RulesModelBaseMixin`` yourself.\n\nThen, create your models like so, assuming you're using ``RulesModel`` as base\ndirectly::\n\n    import rules\n    from rules.contrib.models import RulesModel\n\n    class Book(RulesModel):\n        class Meta:\n            rules_permissions = {\n                \"add\": rules.is_staff,\n                \"read\": rules.is_authenticated,\n            }\n\nThis would be equivalent to the following calls::\n\n    rules.add_perm(\"app_label.add_book\", rules.is_staff)\n    rules.add_perm(\"app_label.read_book\", rules.is_authenticated)\n\nThere are methods in ``RulesModelMixin`` that you can overwrite in order to customize\nhow a model's permissions are registered. See the documented source code for details\nif you need this.\n\nOf special interest is the ``get_perm`` classmethod of ``RulesModelMixin``, which can\nbe used to convert a permission type to the corresponding full permission name. If\nyou need to query for some type of permission on a given model programmatically,\nthis is handy::\n\n    if user.has_perm(Book.get_perm(\"read\")):\n        ...\n\n\nPermissions in views\n--------------------\n\n``rules`` comes with a set of view decorators to help you enforce\nauthorization in your views.\n\nUsing the function-based view decorator\n+++++++++++++++++++++++++++++++++++++++\n\nFor function-based views you can use the ``permission_required`` decorator:\n\n.. code:: python\n\n    from django.shortcuts import get_object_or_404\n    from rules.contrib.views import permission_required\n    from posts.models import Post\n\n    def get_post_by_pk(request, post_id):\n        return get_object_or_404(Post, pk=post_id)\n\n    @permission_required('posts.change_post', fn=get_post_by_pk)\n    def post_update(request, post_id):\n        # ...\n\nUsage is straight-forward, but there's one thing in the example above that\nstands out and this is the ``get_post_by_pk`` function. This function, given\nthe current request and all arguments passed to the view, is responsible for\nfetching and returning the object to check permissions against -- i.e. the\n``Post`` instance with PK equal to the given ``post_id`` in the example.\nThis specific use-case is quite common so, to save you some typing, ``rules``\ncomes with a generic helper function that you can use to do this declaratively.\nThe example below is equivalent to the one above:\n\n.. code:: python\n\n    from rules.contrib.views import permission_required, objectgetter\n    from posts.models import Post\n\n    @permission_required('posts.change_post', fn=objectgetter(Post, 'post_id'))\n    def post_update(request, post_id):\n        # ...\n\nFor more information on the decorator and helper function, refer to the\n``rules.contrib.views`` module.\n\nUsing the class-based view mixin\n++++++++++++++++++++++++++++++++\n\nDjango includes a set of access mixins that you can use in your class-based\nviews to enforce authorization. ``rules`` extends this framework to provide\nobject-level permissions via a mixin, ``PermissionRequiredMixin``.\n\nThe following example will automatically test for permission against the\ninstance returned by the view's ``get_object`` method:\n\n.. code:: python\n\n    from django.views.generic.edit import UpdateView\n    from rules.contrib.views import PermissionRequiredMixin\n    from posts.models import Post\n\n    class PostUpdate(PermissionRequiredMixin, UpdateView):\n        model = Post\n        permission_required = 'posts.change_post'\n\nYou can customise the object either by overriding ``get_object`` or\n``get_permission_object``.\n\nFor more information refer to the `Django documentation`_ and the\n``rules.contrib.views`` module.\n\n.. _Django documentation: https://docs.djangoproject.com/en/1.9/topics/auth/default/#limiting-access-to-logged-in-users\n\nChecking permission automatically based on view type\n++++++++++++++++++++++++++++++++++++++++++++++++++++\n\nIf you use the mechanisms provided by ``rules.contrib.models`` to register permissions\nfor your models as described in `Permissions in models`_, there's another convenient\nmixin for class-based views available for you.\n\n``rules.contrib.views.AutoPermissionRequiredMixin`` can recognize the type of view\nit's used with and check for the corresponding permission automatically.\n\nThis example view would, without any further configuration, automatically check for\nthe ``\"posts.change_post\"`` permission, given that the app label is ``\"posts\"``::\n\n    from django.views.generic import UpdateView\n    from rules.contrib.views import AutoPermissionRequiredMixin\n    from posts.models import Post\n\n    class UpdatePostView(AutoPermissionRequiredMixin, UpdateView):\n        model = Post\n\nBy default, the generic CRUD views from ``django.views.generic`` are mapped to the\nnative Django permission types (*add*, *change*, *delete* and *view*). However,\nthe pre-defined mappings can be extended, changed or replaced altogether when\nsubclassing ``AutoPermissionRequiredMixin``. See the fully documented source code\nfor details on how to do that properly.\n\n\nPermissions and rules in templates\n----------------------------------\n\n``rules`` comes with two template tags to allow you to test for rules and\npermissions in templates.\n\nAdd ``rules`` to your ``INSTALLED_APPS``:\n\n.. code:: python\n\n    INSTALLED_APPS = (\n        # ...\n        'rules',\n    )\n\nThen, in your template::\n\n    {% load rules %}\n\n    {% has_perm 'books.change_book' author book as can_edit_book %}\n    {% if can_edit_book %}\n        ...\n    {% endif %}\n\n    {% test_rule 'has_super_feature' user as has_super_feature %}\n    {% if has_super_feature %}\n        ...\n    {% endif %}\n\n\nPermissions in the Admin\n------------------------\n\nIf you've setup ``rules`` to be used with permissions in Django, you're almost\nset to also use ``rules`` to authorize any add/change/delete actions in the\nAdmin. The Admin asks for *four* different permissions, depending on action:\n\n- ``<app_label>.add_<modelname>``\n- ``<app_label>.view_<modelname>``\n- ``<app_label>.change_<modelname>``\n- ``<app_label>.delete_<modelname>``\n- ``<app_label>``\n\n*Note:* view permission is new in Django v2.1 and should not be added in versions before that.\n\nThe first four are obvious. The fifth is the required permission for an app\nto be displayed in the Admin's \"dashboard\". Overriding it does not restrict access to the add,\nchange or delete views. Here's some rules for our imaginary ``books`` app as an example:\n\n.. code:: python\n\n    >>> rules.add_perm('books', rules.always_allow)\n    >>> rules.add_perm('books.add_book', is_staff)\n    >>> rules.add_perm('books.view_book', is_staff | has_secret_access_code)\n    >>> rules.add_perm('books.change_book', is_staff)\n    >>> rules.add_perm('books.delete_book', is_staff)\n\nDjango Admin does not support object-permissions, in the sense that it will\nnever ask for permission to perform an action *on an object*, only whether a\nuser is allowed to act on (*any*) instances of a model.\n\nIf you'd like to tell Django whether a user has permissions on a specific\nobject, you'd have to override the following methods of a model's\n``ModelAdmin``:\n\n- ``has_view_permission(user, obj=None)``\n- ``has_change_permission(user, obj=None)``\n- ``has_delete_permission(user, obj=None)``\n\n``rules`` comes with a custom ``ModelAdmin`` subclass,\n``rules.contrib.admin.ObjectPermissionsModelAdmin``, that overrides these\nmethods to pass on the edited model instance to the authorization backends,\nthus enabling permissions per object in the Admin:\n\n.. code:: python\n\n    # books/admin.py\n    from django.contrib import admin\n    from rules.contrib.admin import ObjectPermissionsModelAdmin\n    from .models import Book\n\n    class BookAdmin(ObjectPermissionsModelAdmin):\n        pass\n\n    admin.site.register(Book, BookAdmin)\n\nNow this allows you to specify permissions like this:\n\n.. code:: python\n\n    >>> rules.add_perm('books', rules.always_allow)\n    >>> rules.add_perm('books.add_book', has_author_profile)\n    >>> rules.add_perm('books.change_book', is_book_author_or_editor)\n    >>> rules.add_perm('books.delete_book', is_book_author)\n\nTo preserve backwards compatibility, Django will ask for either *view* or\n*change* permission. For maximum flexibility, ``rules`` behaves subtly\ndifferent: ``rules`` will ask for the change permission if and only if no rule\nexists for the view permission.\n\n\nPermissions in Django Rest Framework\n------------------------------------\n\nSimilar to ``rules.contrib.views.AutoPermissionRequiredMixin``, there is a\n``rules.contrib.rest_framework.AutoPermissionViewSetMixin`` for viewsets in Django\nRest Framework. The difference is that it doesn't derive permission from the type\nof view but from the API action (*create*, *retrieve* etc.) that's tried to be\nperformed. Of course, it also requires you to declare your models as described in\n`Permissions in models`_.\n\nHere is a possible ``ModelViewSet`` for the ``Post`` model with fully automated CRUD\npermission checking::\n\n    from rest_framework.serializers import ModelSerializer\n    from rest_framework.viewsets import ModelViewSet\n    from rules.contrib.rest_framework import AutoPermissionViewSetMixin\n    from posts.models import Post\n\n    class PostSerializer(ModelSerializer):\n        class Meta:\n            model = Post\n            fields = \"__all__\"\n\n    class PostViewSet(AutoPermissionViewSetMixin, ModelViewSet):\n        queryset = Post.objects.all()\n        serializer_class = PostSerializer\n\nBy default, the CRUD actions of ``ModelViewSet`` are mapped to the native\nDjango permission types (*add*, *change*, *delete* and *view*). The ``list``\naction has no permission checking enabled. However, the pre-defined mappings\ncan be extended, changed or replaced altogether when using (or subclassing)\n``AutoPermissionViewSetMixin``. Custom API actions defined via the ``@action``\ndecorator may then be mapped as well. See the fully documented source code for\ndetails on how to properly customize the default behavior.\n\n\nAdvanced features\n=================\n\nCustom rule sets\n----------------\n\nYou may create as many rule sets as you need:\n\n.. code:: python\n\n    >>> features = rules.RuleSet()\n\nAnd manipulate them by adding, removing, querying and testing rules:\n\n.. code:: python\n\n    >>> features.rule_exists('has_super_feature')\n    False\n    >>> is_special_user = rules.is_group_member('special')\n    >>> features.add_rule('has_super_feature', is_special_user)\n    >>> 'has_super_feature' in features\n    True\n    >>> features['has_super_feature']\n    <Predicate:is_group_member:special object at 0x10eeaa500>\n    >>> features.test_rule('has_super_feature', adrian)\n    True\n    >>> features.remove_rule('has_super_feature')\n\nNote however that custom rule sets are *not available* in Django templates --\nyou need to provide integration yourself.\n\n\nInvocation context\n------------------\n\nA new context is created as a result of invoking ``Predicate.test()`` and is\nonly valid for the duration of the invocation. A context is a simple ``dict``\nthat you can use to store arbitrary data, (eg. caching computed values,\nsetting flags, etc.), that can be used by predicates later on in the chain.\nInside a predicate function it can be used like so:\n\n.. code:: python\n\n    >>> @predicate\n    ... def mypred(a, b):\n    ...     value = compute_expensive_value(a)\n    ...     mypred.context['value'] = value\n    ...     return True\n\nOther predicates can later use stored values:\n\n.. code:: python\n\n    >>> @predicate\n    ... def myotherpred(a, b):\n    ...     value = myotherpred.context.get('value')\n    ...     if value is not None:\n    ...         return do_something_with_value(value)\n    ...     else:\n    ...         return do_something_without_value()\n\n``Predicate.context`` provides a single ``args`` attribute that contains the\narguments as given to ``test()`` at the beginning of the invocation.\n\n\nBinding \"self\"\n--------------\n\nIn a predicate's function body, you can refer to the predicate instance itself\nby its name, eg. ``is_book_author``. Passing ``bind=True`` as a keyword\nargument to the ``predicate`` decorator will let you refer to the predicate\nwith ``self``, which is more convenient. Binding ``self`` is just syntactic\nsugar. As a matter of fact, the following two are equivalent:\n\n.. code:: python\n\n    >>> @predicate\n    ... def is_book_author(user, book):\n    ...     if is_book_author.context.args:\n    ...         return user == book.author\n    ...     return False\n\n    >>> @predicate(bind=True)\n    ... def is_book_author(self, user, book):\n    ...     if self.context.args:\n    ...         return user == book.author\n    ...     return False\n\n\nSkipping predicates\n-------------------\n\nYou may skip evaluation by returning ``None`` from your predicate:\n\n.. code:: python\n\n    >>> @predicate(bind=True)\n    ... def is_book_author(self, user, book):\n    ...     if len(self.context.args) > 1:\n    ...         return user == book.author\n    ...     else:\n    ...         return None\n\nReturning ``None`` signifies that the predicate need not be evaluated, thus\nleaving the predicate result up to that point unchanged.\n\n\nLogging predicate evaluation\n----------------------------\n\n``rules`` can optionally be configured to log debug information as rules are\nevaluated to help with debugging your predicates. Messages are sent at the\nDEBUG level to the ``'rules'`` logger. The following `dictConfig`_ configures\na console logger (place this in your project's `settings.py` if you're using\n`rules` with Django):\n\n.. code:: python\n\n    LOGGING = {\n        'version': 1,\n        'disable_existing_loggers': False,\n        'handlers': {\n            'console': {\n                'level': 'DEBUG',\n                'class': 'logging.StreamHandler',\n            },\n        },\n        'loggers': {\n            'rules': {\n                'handlers': ['console'],\n                'level': 'DEBUG',\n                'propagate': True,\n            },\n        },\n    }\n\nWhen this logger is active each individual predicate will have a log message\nprinted when it is evaluated.\n\n.. _dictConfig: https://docs.python.org/3.6/library/logging.config.html#logging-config-dictschema\n\n\nBest practices\n==============\n\nBefore you can test for rules, these rules must be registered with a rule set,\nand for this to happen the modules containing your rule definitions must be\nimported.\n\nFor complex projects with several predicates and rules, it may not be\npractical to define all your predicates and rules inside one module. It might\nbe best to split them among any sub-components of your project. In a Django\ncontext, these sub-components could be the apps for your project.\n\nOn the other hand, because importing predicates from all over the place in\norder to define rules can lead to circular imports and broken hearts, it's\nbest to further split predicates and rules in different modules.\n\n``rules`` may optionally be configured to autodiscover ``rules.py`` modules in\nyour apps and import them at startup. To have ``rules`` do so, just edit your\n``INSTALLED_APPS`` setting:\n\n.. code:: python\n\n    INSTALLED_APPS = (\n        # replace 'rules' with:\n        'rules.apps.AutodiscoverRulesConfig',\n    )\n\n**Note:** On Python 2, you must also add the following to the top of your\n``rules.py`` file, or you'll get import errors trying to import ``rules``\nitself:\n\n.. code:: python\n\n    from __future__ import absolute_import\n\n\nAPI Reference\n=============\n\nThe core APIs are accessible from the root ``rules`` module. Django-specific\nfunctionality for the Admin and views is available from ``rules.contrib``.\n\n\nClass ``rules.Predicate``\n-------------------------\n\nYou create ``Predicate`` instances by passing in a callable:\n\n.. code:: python\n\n    >>> def is_book_author(user, book):\n    ...     return book.author == user\n    ...\n    >>> pred = Predicate(is_book_author)\n    >>> pred\n    <Predicate:is_book_author object at 0x10eeaa490>\n\nYou may optionally provide a different name for the predicate that is used\nwhen inspecting it:\n\n.. code:: python\n\n    >>> pred = Predicate(is_book_author, name='another_name')\n    >>> pred\n    <Predicate:another_name object at 0x10eeaa490>\n\nAlso, you may optionally provide ``bind=True`` in order to be able to access\nthe predicate instance with ``self``:\n\n.. code:: python\n\n    >>> def is_book_author(self, user, book):\n    ...     if self.context.args:\n    ...         return user == book.author\n    ...     return False\n    ...\n    >>> pred = Predicate(is_book_author, bind=True)\n    >>> pred\n    <Predicate:is_book_author object at 0x10eeaa490>\n\n\nInstance methods\n++++++++++++++++\n\n``test(obj=None, target=None)``\n    Returns the result of calling the passed in callable with zero, one or two\n    positional arguments, depending on how many it accepts.\n\n\nClass ``rules.RuleSet``\n-----------------------\n\n``RuleSet`` extends Python's built-in `dict`_ type. Therefore, you may create\nand use a rule set any way you'd use a dict.\n\n.. _dict: http://docs.python.org/library/stdtypes.html#mapping-types-dict\n\n\nInstance methods\n++++++++++++++++\n\n``add_rule(name, predicate)``\n    Adds a predicate to the rule set, assigning it to the given rule name.\n    Raises ``KeyError`` if another rule with that name already exists.\n\n``set_rule(name, predicate)``\n    Set the rule with the given name, regardless if one already exists.\n\n``remove_rule(name)``\n    Remove the rule with the given name. Raises ``KeyError`` if a rule with\n    that name does not exist.\n\n``rule_exists(name)``\n    Returns ``True`` if a rule with the given name exists, ``False`` otherwise.\n\n``test_rule(name, obj=None, target=None)``\n    Returns the result of calling ``predicate.test(obj, target)`` where\n    ``predicate`` is the predicate for the rule with the given name. Returns\n    ``False`` if a rule with the given name does not exist.\n\nDecorators\n----------\n\n``@predicate``\n    Decorator that creates a predicate out of any callable:\n\n    .. code:: python\n\n        >>> @predicate\n        ... def is_book_author(user, book):\n        ...     return book.author == user\n        ...\n        >>> is_book_author\n        <Predicate:is_book_author object at 0x10eeaa490>\n\n    Customising the predicate name:\n\n    .. code:: python\n\n        >>> @predicate(name='another_name')\n        ... def is_book_author(user, book):\n        ...     return book.author == user\n        ...\n        >>> is_book_author\n        <Predicate:another_name object at 0x10eeaa490>\n\n    Binding ``self``:\n\n    .. code:: python\n\n        >>> @predicate(bind=True)\n        ... def is_book_author(self, user, book):\n        ...     if 'user_has_special_flag' in self.context:\n        ...         return self.context['user_has_special_flag']\n        ...     return book.author == user\n\n\nPredefined predicates\n---------------------\n\n``always_allow()``, ``always_true()``\n    Always returns ``True``.\n\n``always_deny()``, ``always_false()``\n    Always returns ``False``.\n\n``is_authenticated(user)``\n    Returns the result of calling ``user.is_authenticated()``. Returns\n    ``False`` if the given user does not have an ``is_authenticated`` method.\n\n``is_superuser(user)``\n    Returns the result of calling ``user.is_superuser``. Returns ``False``\n    if the given user does not have an ``is_superuser`` property.\n\n``is_staff(user)``\n    Returns the result of calling ``user.is_staff``. Returns ``False`` if the\n    given user does not have an ``is_staff`` property.\n\n``is_active(user)``\n    Returns the result of calling ``user.is_active``. Returns ``False`` if the\n    given user does not have an ``is_active`` property.\n\n``is_group_member(*groups)``\n    Factory that creates a new predicate that returns ``True`` if the given\n    user is a member of *all* the given groups, ``False`` otherwise.\n\n\nShortcuts\n---------\n\nManaging the shared rule set\n++++++++++++++++++++++++++++\n\n``add_rule(name, predicate)``\n    Adds a rule to the shared rule set. See ``RuleSet.add_rule``.\n\n``set_rule(name, predicate)``\n    Set the rule with the given name from the shared rule set. See\n    ``RuleSet.set_rule``.\n\n``remove_rule(name)``\n    Remove a rule from the shared rule set. See ``RuleSet.remove_rule``.\n\n``rule_exists(name)``\n    Returns whether a rule exists in the shared rule set. See\n    ``RuleSet.rule_exists``.\n\n``test_rule(name, obj=None, target=None)``\n    Tests the rule with the given name. See ``RuleSet.test_rule``.\n\n\nManaging the permissions rule set\n+++++++++++++++++++++++++++++++++\n\n``add_perm(name, predicate)``\n    Adds a rule to the permissions rule set. See ``RuleSet.add_rule``.\n\n``set_perm(name, predicate)``\n    Replace a rule from the permissions rule set. See ``RuleSet.set_rule``.\n\n``remove_perm(name)``\n    Remove a rule from the permissions rule set. See ``RuleSet.remove_rule``.\n\n``perm_exists(name)``\n    Returns whether a rule exists in the permissions rule set. See\n    ``RuleSet.rule_exists``.\n\n``has_perm(name, user=None, obj=None)``\n    Tests the rule with the given name. See ``RuleSet.test_rule``.\n\n\nLicence\n=======\n\n``django-rules`` is distributed under the MIT licence.\n\nCopyright (c) 2014 Akis Kesoglou\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n","description_content_type":null,"docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"http://github.com/dfunckt/django-rules","keywords":null,"license":"MIT","maintainer":"Akis Kesoglou","maintainer_email":"akiskesoglou@gmail.com","name":"rules","package_url":"https://pypi.org/project/rules/","platform":null,"project_url":"https://pypi.org/project/rules/","project_urls":{"Homepage":"http://github.com/dfunckt/django-rules"},"provides_extra":null,"release_url":"https://pypi.org/project/rules/3.4/","requires_dist":null,"requires_python":null,"summary":"Awesome Django authorization, without the database","version":"3.4","yanked":false,"yanked_reason":null},"last_serial":23266997,"releases":{"0.1":[{"comment_text":"","digests":{"blake2b_256":"cb8e3b4002ad5156f4368ec00212135f65f48049d2a39f1e5e1c8a34f380ead1","md5":"4377aa5f81dec79a8b87963247d86dc1","sha256":"4e21ef407ec8eff16fa7e184fb483319da8309526ccfb3524e70d39ef706af96"},"downloads":-1,"filename":"rules-0.1.tar.gz","has_sig":false,"md5_digest":"4377aa5f81dec79a8b87963247d86dc1","packagetype":"sdist","python_version":"source","requires_python":null,"size":17225,"upload_time":"2014-03-09T15:03:05","upload_time_iso_8601":"2014-03-09T15:03:05.446237Z","url":"https://files.pythonhosted.org/packages/cb/8e/3b4002ad5156f4368ec00212135f65f48049d2a39f1e5e1c8a34f380ead1/rules-0.1.tar.gz","yanked":false,"yanked_reason":null}],"0.2":[{"comment_text":"","digests":{"blake2b_256":"1bf7e313dee1b8d94a4ae56621a80c76c9542b5e5baf6fb2b7fab77ad35a28ec","md5":"4d6b92f2ad5ae15dff406ccd6b279824","sha256":"9a3455697fc4eaca11d6d99a8be6cde2fedc12e8c10d517ac3954ef93ef54791"},"downloads":-1,"filename":"rules-0.2.tar.gz","has_sig":false,"md5_digest":"4d6b92f2ad5ae15dff406ccd6b279824","packagetype":"sdist","python_version":"source","requires_python":null,"size":19784,"upload_time":"2014-06-09T16:34:05","upload_time_iso_8601":"2014-06-09T16:34:05.433981Z","url":"https://files.pythonhosted.org/packages/1b/f7/e313dee1b8d94a4ae56621a80c76c9542b5e5baf6fb2b7fab77ad35a28ec/rules-0.2.tar.gz","yanked":false,"yanked_reason":null}],"0.3":[{"comment_text":"","digests":{"blake2b_256":"01c49fc1a4ca778e6afe5a28b6be0291715d25ddbe46a5b0e06eb772311964a7","md5":"8dbf2a79e6c9c5bdad3e309be16b6b53","sha256":"0f15cb4627a15a03b9e83f7bb782e89b416e28c86a98942a7c4c62d248cb5009"},"downloads":-1,"filename":"rules-0.3.tar.gz","has_sig":false,"md5_digest":"8dbf2a79e6c9c5bdad3e309be16b6b53","packagetype":"sdist","python_version":"source","requires_python":null,"size":20444,"upload_time":"2014-10-15T16:09:10","upload_time_iso_8601":"2014-10-15T16:09:10.239202Z","url":"https://files.pythonhosted.org/packages/01/c4/9fc1a4ca778e6afe5a28b6be0291715d25ddbe46a5b0e06eb772311964a7/rules-0.3.tar.gz","yanked":false,"yanked_reason":null}],"0.4":[{"comment_text":"","digests":{"blake2b_256":"2f1d405ce85209e42f84b8b4643092ae2ffb6dd5180f1638fb2e41fdb8ba9839","md5":"5cea5432a226fa0c9537dbba936b17c3","sha256":"61f19fba0ccbdd85aa2c188dfbf7e592eccf5f591880575af69f9c520c627ce4"},"downloads":-1,"filename":"rules-0.4.tar.gz","has_sig":false,"md5_digest":"5cea5432a226fa0c9537dbba936b17c3","packagetype":"sdist","python_version":"source","requires_python":null,"size":24499,"upload_time":"2015-02-16T08:36:40","upload_time_iso_8601":"2015-02-16T08:36:40.143100Z","url":"https://files.pythonhosted.org/packages/2f/1d/405ce85209e42f84b8b4643092ae2ffb6dd5180f1638fb2e41fdb8ba9839/rules-0.4.tar.gz","yanked":false,"yanked_reason":null}],"1.0":[{"comment_text":"","digests":{"blake2b_256":"4e03a8fcb2b089f5c8c3ecfca7334b71c9a615b53a2999b4a0e55516d6d44014","md5":"be0f851b261dcc1e063656ddd95bb9c2","sha256":"86892fdeed8087f7cdddc1b8f4d526f775a1fce8a99f3bf487fc44a2a159f947"},"downloads":-1,"filename":"rules-1.0.tar.gz","has_sig":false,"md5_digest":"be0f851b261dcc1e063656ddd95bb9c2","packagetype":"sdist","python_version":"source","requires_python":null,"size":38407,"upload_time":"2015-10-06T19:25:10","upload_time_iso_8601":"2015-10-06T19:25:10.756131Z","url":"https://files.pythonhosted.org/packages/4e/03/a8fcb2b089f5c8c3ecfca7334b71c9a615b53a2999b4a0e55516d6d44014/rules-1.0.tar.gz","yanked":false,"yanked_reason":null}],"1.1":[{"comment_text":"","digests":{"blake2b_256":"3724a2cd3c770c278a724297433bcdd235991416a373e373f3b4969cc5af0511","md5":"894482246778be4fe2c53d814c81385a","sha256":"5a3c095a0f93550dd87040a54a1ef5ab3410e7c413d568f0eee4d3fa9946609f"},"downloads":-1,"filename":"rules-1.1.tar.gz","has_sig":false,"md5_digest":"894482246778be4fe2c53d814c81385a","packagetype":"sdist","python_version":"source","requires_python":null,"size":40794,"upload_time":"2015-12-05T16:18:06","upload_time_iso_8601":"2015-12-05T16:18:06.191129Z","url":"https://files.pythonhosted.org/packages/37/24/a2cd3c770c278a724297433bcdd235991416a373e373f3b4969cc5af0511/rules-1.1.tar.gz","yanked":false,"yanked_reason":null}],"1.1.1":[{"comment_text":"","digests":{"blake2b_256":"76bb21b9148fd3a2d7e178a162e76a43faf1a6109a957550fcef518644453ce4","md5":"47c90403aa4a824ead9de6e0d3c4de86","sha256":"c29b15c5368552fdc660699731e62e3c800772a249b7b816ffe0eeb440823963"},"downloads":-1,"filename":"rules-1.1.1.tar.gz","has_sig":false,"md5_digest":"47c90403aa4a824ead9de6e0d3c4de86","packagetype":"sdist","python_version":"source","requires_python":null,"size":40903,"upload_time":"2015-12-07T09:45:00","upload_time_iso_8601":"2015-12-07T09:45:00.075568Z","url":"https://files.pythonhosted.org/packages/76/bb/21b9148fd3a2d7e178a162e76a43faf1a6109a957550fcef518644453ce4/rules-1.1.1.tar.gz","yanked":false,"yanked_reason":null}],"1.2":[{"comment_text":"","digests":{"blake2b_256":"951befd0df3013c6699c05df0e19e0078908377d5995359e4bfabe60ea6b49ee","md5":"075ff53e09989f6310d02e6dad33cd8f","sha256":"2c4b3542bcc34f9f8d39111a61e8fd9e37cfb72e01b7d947d097018ba405767e"},"downloads":-1,"filename":"rules-1.2.tar.gz","has_sig":false,"md5_digest":"075ff53e09989f6310d02e6dad33cd8f","packagetype":"sdist","python_version":"source","requires_python":null,"size":43287,"upload_time":"2016-12-18T21:20:01","upload_time_iso_8601":"2016-12-18T21:20:01.296433Z","url":"https://files.pythonhosted.org/packages/95/1b/efd0df3013c6699c05df0e19e0078908377d5995359e4bfabe60ea6b49ee/rules-1.2.tar.gz","yanked":false,"yanked_reason":null}],"1.2.1":[{"comment_text":"","digests":{"blake2b_256":"06af9c99bb9a5e4360e4db1091748c7b06017e0cb3708900adb1ec9804df622c","md5":"72f2ee2ed1ef31bd39c2659351229b42","sha256":"993e236deb3e63a3e412b7865e53978c7a2d32bda7348df70988967faca2d5d7"},"downloads":-1,"filename":"rules-1.2.1.tar.gz","has_sig":false,"md5_digest":"72f2ee2ed1ef31bd39c2659351229b42","packagetype":"sdist","python_version":"source","requires_python":null,"size":43327,"upload_time":"2017-05-13T12:22:32","upload_time_iso_8601":"2017-05-13T12:22:32.574762Z","url":"https://files.pythonhosted.org/packages/06/af/9c99bb9a5e4360e4db1091748c7b06017e0cb3708900adb1ec9804df622c/rules-1.2.1.tar.gz","yanked":false,"yanked_reason":null}],"1.3":[{"comment_text":"","digests":{"blake2b_256":"eaf0b59bfc65b0b591f3c4f3413a1026555dbd622671137974c0299aeb392a33","md5":"986e7d975453cdbec57754aa46f14702","sha256":"89150f94a3339dc4f8aa9da6bf3b5ee2dd9ac17666982b8ca8ea9a551cb83b50"},"downloads":-1,"filename":"rules-1.3.tar.gz","has_sig":false,"md5_digest":"986e7d975453cdbec57754aa46f14702","packagetype":"sdist","python_version":"source","requires_python":null,"size":43139,"upload_time":"2017-12-12T22:38:16","upload_time_iso_8601":"2017-12-12T22:38:16.379959Z","url":"https://files.pythonhosted.org/packages/ea/f0/b59bfc65b0b591f3c4f3413a1026555dbd622671137974c0299aeb392a33/rules-1.3.tar.gz","yanked":false,"yanked_reason":null}],"1.4":[{"comment_text":"","digests":{"blake2b_256":"37695a0fb82b9b08f55bff6027a2e8c17f16cf1b20121ec0d75d79fc267e8360","md5":"4a2bd9ac7e8fe71230fa8fab3e7175ef","sha256":"7b56810023f4f49e8630b1176951eb8b305b1d1dc1559a3ad4a76c030065d7d9"},"downloads":-1,"filename":"rules-1.4.tar.gz","has_sig":false,"md5_digest":"4a2bd9ac7e8fe71230fa8fab3e7175ef","packagetype":"sdist","python_version":"source","requires_python":null,"size":44142,"upload_time":"2018-07-21T15:56:15","upload_time_iso_8601":"2018-07-21T15:56:15.841774Z","url":"https://files.pythonhosted.org/packages/37/69/5a0fb82b9b08f55bff6027a2e8c17f16cf1b20121ec0d75d79fc267e8360/rules-1.4.tar.gz","yanked":false,"yanked_reason":null}],"2.0":[{"comment_text":"","digests":{"blake2b_256":"2ca726fa7404a8c459c1f2b0bc409561e9ce8ca30fac0c50e3e531941b88644b","md5":"428479676517a10abf5734da712bd5bc","sha256":"2c6ef34e00d333e6f40f8e86bb7de057909f4524b53b673641610bed20633c4f"},"downloads":-1,"filename":"rules-2.0.tar.gz","has_sig":false,"md5_digest":"428479676517a10abf5734da712bd5bc","packagetype":"sdist","python_version":"source","requires_python":null,"size":43402,"upload_time":"2018-07-22T13:51:38","upload_time_iso_8601":"2018-07-22T13:51:38.602553Z","url":"https://files.pythonhosted.org/packages/2c/a7/26fa7404a8c459c1f2b0bc409561e9ce8ca30fac0c50e3e531941b88644b/rules-2.0.tar.gz","yanked":false,"yanked_reason":null}],"2.0.1":[{"comment_text":"","digests":{"blake2b_256":"35f301ab1b1461326ba3caf5722e95ac93efc54063e422d2b8d4e9c1cc8c9edb","md5":"f4d5b5c2d3b34977a8d8d6ef90e3ce5b","sha256":"da47c407e1af2fa5a500658fb6575ced4893dacaf65f1d576ead04956a9c3dae"},"downloads":-1,"filename":"rules-2.0.1.tar.gz","has_sig":false,"md5_digest":"f4d5b5c2d3b34977a8d8d6ef90e3ce5b","packagetype":"sdist","python_version":"source","requires_python":null,"size":43596,"upload_time":"2018-12-07T14:15:21","upload_time_iso_8601":"2018-12-07T14:15:21.442433Z","url":"https://files.pythonhosted.org/packages/35/f3/01ab1b1461326ba3caf5722e95ac93efc54063e422d2b8d4e9c1cc8c9edb/rules-2.0.1.tar.gz","yanked":false,"yanked_reason":null}],"2.1":[{"comment_text":"","digests":{"blake2b_256":"8a5df35209aeb1e34e6cf0ad113930829618864a8a455ed2a9c63c696d822f97","md5":"ec8b0d925194d1bb64b7a93f5f3aebe6","sha256":"2c0a3707e5e935a883ef8fe65fd080e7169f67ac1ef0c5e2d2e6932cb3ef5318"},"downloads":-1,"filename":"rules-2.1.tar.gz","has_sig":false,"md5_digest":"ec8b0d925194d1bb64b7a93f5f3aebe6","packagetype":"sdist","python_version":"source","requires_python":null,"size":52808,"upload_time":"2019-08-11T13:18:10","upload_time_iso_8601":"2019-08-11T13:18:10.652881Z","url":"https://files.pythonhosted.org/packages/8a/5d/f35209aeb1e34e6cf0ad113930829618864a8a455ed2a9c63c696d822f97/rules-2.1.tar.gz","yanked":false,"yanked_reason":null}],"2.2":[{"comment_text":"","digests":{"blake2b_256":"7dc4ecfe8e5aaa9fb9e6017bd3c7ebae03c9c54881520f3e6d75d8035bfa9ec6","md5":"ad89cd8bda1938e07b182c875380f5a6","sha256":"9bae429f9d4f91a375402990da1541f9e093b0ac077221d57124d06eeeca4405"},"downloads":-1,"filename":"rules-2.2.tar.gz","has_sig":false,"md5_digest":"ad89cd8bda1938e07b182c875380f5a6","packagetype":"sdist","python_version":"source","requires_python":null,"size":53025,"upload_time":"2020-01-17T10:23:24","upload_time_iso_8601":"2020-01-17T10:23:24.817482Z","url":"https://files.pythonhosted.org/packages/7d/c4/ecfe8e5aaa9fb9e6017bd3c7ebae03c9c54881520f3e6d75d8035bfa9ec6/rules-2.2.tar.gz","yanked":false,"yanked_reason":null}],"3.0":[{"comment_text":"","digests":{"blake2b_256":"2298cc2a5f5802941ed855da4c21948e5869667131fe9bb8a916f5872e7a49a6","md5":"10a9cd92e29db765c80ae50076fb1b61","sha256":"8194937b537c8a384eafe21750f1d396e1aecdc833e7d06808a5b805ae42a852"},"downloads":-1,"filename":"rules-3.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"10a9cd92e29db765c80ae50076fb1b61","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":25195,"upload_time":"2021-05-10T09:00:07","upload_time_iso_8601":"2021-05-10T09:00:07.451520Z","url":"https://files.pythonhosted.org/packages/22/98/cc2a5f5802941ed855da4c21948e5869667131fe9bb8a916f5872e7a49a6/rules-3.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"87c2f81e1b594005d2b40addc6ee18557192a11716cc4fb7abe6afdf3ba5b721","md5":"225cf02d800c26e78c2e3ffba7287c90","sha256":"9141e2fdb7f300fcb59f2f06619fe4ff52bb846eb112ba8c30444f971d6af05e"},"downloads":-1,"filename":"rules-3.0.tar.gz","has_sig":false,"md5_digest":"225cf02d800c26e78c2e3ffba7287c90","packagetype":"sdist","python_version":"source","requires_python":null,"size":55443,"upload_time":"2021-05-10T09:00:09","upload_time_iso_8601":"2021-05-10T09:00:09.104616Z","url":"https://files.pythonhosted.org/packages/87/c2/f81e1b594005d2b40addc6ee18557192a11716cc4fb7abe6afdf3ba5b721/rules-3.0.tar.gz","yanked":false,"yanked_reason":null}],"3.1":[{"comment_text":"","digests":{"blake2b_256":"75656d3db0d7afb87d93724b96675849ed8efad3444e7f051814b30bda710af6","md5":"252143700285b7bc7e43e9c4ec56d6e0","sha256":"b5e7d7b83dfab8895e901406f533325eccd96b2a38cc0362860c9b895aaad32f"},"downloads":-1,"filename":"rules-3.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"252143700285b7bc7e43e9c4ec56d6e0","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":25233,"upload_time":"2021-12-22T17:48:00","upload_time_iso_8601":"2021-12-22T17:48:00.789646Z","url":"https://files.pythonhosted.org/packages/75/65/6d3db0d7afb87d93724b96675849ed8efad3444e7f051814b30bda710af6/rules-3.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c7dd626fa684ca5b8690e87cdeab3d0d2de4a105adeff1268068e06899ec1bc8","md5":"2960497254a8107970cc72b786ef03d0","sha256":"3293ef232d8ed86ec59dd1d993a745168ebee908a1f0ffb332ed0f3065b8ee57"},"downloads":-1,"filename":"rules-3.1.tar.gz","has_sig":false,"md5_digest":"2960497254a8107970cc72b786ef03d0","packagetype":"sdist","python_version":"source","requires_python":null,"size":54543,"upload_time":"2021-12-22T17:48:02","upload_time_iso_8601":"2021-12-22T17:48:02.767090Z","url":"https://files.pythonhosted.org/packages/c7/dd/626fa684ca5b8690e87cdeab3d0d2de4a105adeff1268068e06899ec1bc8/rules-3.1.tar.gz","yanked":false,"yanked_reason":null}],"3.2":[{"comment_text":"","digests":{"blake2b_256":"85641d9eda0cd1622ea1e9fe1cc9ec41cf55eb582e2795d3270357f167ab7f71","md5":"ad388e498241c95d02a8cd0e9eb41f8a","sha256":"0bb3115fd7089a1500873f48fba7d3285756292f6e98087de739dcf3de81e350"},"downloads":-1,"filename":"rules-3.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"ad388e498241c95d02a8cd0e9eb41f8a","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":25236,"upload_time":"2022-03-02T08:46:18","upload_time_iso_8601":"2022-03-02T08:46:18.429631Z","url":"https://files.pythonhosted.org/packages/85/64/1d9eda0cd1622ea1e9fe1cc9ec41cf55eb582e2795d3270357f167ab7f71/rules-3.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c6f24b7fae80837515067df4de975c70f42aecde320b6fcf9829c172d373647c","md5":"061102616584987545f77dc05701511c","sha256":"a051ff7351fa3afaa27d29db7a4fc08b158ae6cd8329b30524ded183b3dbe91e"},"downloads":-1,"filename":"rules-3.2.tar.gz","has_sig":false,"md5_digest":"061102616584987545f77dc05701511c","packagetype":"sdist","python_version":"source","requires_python":null,"size":54572,"upload_time":"2022-03-02T08:46:20","upload_time_iso_8601":"2022-03-02T08:46:20.464938Z","url":"https://files.pythonhosted.org/packages/c6/f2/4b7fae80837515067df4de975c70f42aecde320b6fcf9829c172d373647c/rules-3.2.tar.gz","yanked":false,"yanked_reason":null}],"3.2.1":[{"comment_text":"","digests":{"blake2b_256":"40566fa8f9be3dfc851248273170fffcfc91fc6d6ad4373f2b548af5043783c5","md5":"6abc62e11805052fec23fcd51090b7ac","sha256":"a11e61fb02f435db8dc3fe8c0aa8b8c1872c6e3a385522309be26b1327331a0e"},"downloads":-1,"filename":"rules-3.2.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"6abc62e11805052fec23fcd51090b7ac","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":25257,"upload_time":"2022-03-02T09:42:48","upload_time_iso_8601":"2022-03-02T09:42:48.254758Z","url":"https://files.pythonhosted.org/packages/40/56/6fa8f9be3dfc851248273170fffcfc91fc6d6ad4373f2b548af5043783c5/rules-3.2.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"2d0ade146dff26cbfce235a11bd5d4325f93a3045279eb01166e4ec4f5349e1a","md5":"d1a39753dc2ff7d9da6018b926fb7888","sha256":"3cc8b07dd83249d176151d938ef0118ed2ee7116c08daa1807e8b805952f7dc8"},"downloads":-1,"filename":"rules-3.2.1.tar.gz","has_sig":false,"md5_digest":"d1a39753dc2ff7d9da6018b926fb7888","packagetype":"sdist","python_version":"source","requires_python":null,"size":54593,"upload_time":"2022-03-02T09:42:50","upload_time_iso_8601":"2022-03-02T09:42:50.357314Z","url":"https://files.pythonhosted.org/packages/2d/0a/de146dff26cbfce235a11bd5d4325f93a3045279eb01166e4ec4f5349e1a/rules-3.2.1.tar.gz","yanked":false,"yanked_reason":null}],"3.3":[{"comment_text":"","digests":{"blake2b_256":"500343c18318718fa3c938a05df8cc13322e057aa178b1db2b2d603301cef013","md5":"2c1a401750ed9453ba6bef6e0f3af6a1","sha256":"12c8bbab5f54560e68528fcca7abc0e162c35ac882e3cc0daed40ac49c963070"},"downloads":-1,"filename":"rules-3.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"2c1a401750ed9453ba6bef6e0f3af6a1","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":25411,"upload_time":"2022-03-23T08:54:01","upload_time_iso_8601":"2022-03-23T08:54:01.772880Z","url":"https://files.pythonhosted.org/packages/50/03/43c18318718fa3c938a05df8cc13322e057aa178b1db2b2d603301cef013/rules-3.3-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"6f446b11fc4490ba4d25fbbb81348b5f8d2d748c47d866cb57b79fb656b86b26","md5":"01d5a920094941191cb284d7ff55b860","sha256":"bf7bea8b724b73c36a622714c1b3557620c187a2ee05321a2ac8ab7472dc4464"},"downloads":-1,"filename":"rules-3.3.tar.gz","has_sig":false,"md5_digest":"01d5a920094941191cb284d7ff55b860","packagetype":"sdist","python_version":"source","requires_python":null,"size":54851,"upload_time":"2022-03-23T08:54:03","upload_time_iso_8601":"2022-03-23T08:54:03.471293Z","url":"https://files.pythonhosted.org/packages/6f/44/6b11fc4490ba4d25fbbb81348b5f8d2d748c47d866cb57b79fb656b86b26/rules-3.3.tar.gz","yanked":false,"yanked_reason":null}],"3.4":[{"comment_text":"","digests":{"blake2b_256":"9a3f495dd85d24f194167fa36805970ede547aa8f395b8fb8d6fe6cf593bd274","md5":"8ae3442bc9772ed42c3c6c4046ba2172","sha256":"e906114d9b3cce73871213c6311b94cb26a5bc2c3b00aa2f13d3633a65447817"},"downloads":-1,"filename":"rules-3.4-py2.py3-none-any.whl","has_sig":false,"md5_digest":"8ae3442bc9772ed42c3c6c4046ba2172","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":25656,"upload_time":"2024-05-18T10:40:57","upload_time_iso_8601":"2024-05-18T10:40:57.109544Z","url":"https://files.pythonhosted.org/packages/9a/3f/495dd85d24f194167fa36805970ede547aa8f395b8fb8d6fe6cf593bd274/rules-3.4-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"63dd06b3621f65133680297215d23567b4b83f939fe5a7b6ce92244d70950b94","md5":"1aae2b886b7d6bc310cc88475adaeec6","sha256":"c4702c1d60ca43e97d4dfced31e98274c652dea3c461105d8df6186d663e3212"},"downloads":-1,"filename":"rules-3.4.tar.gz","has_sig":false,"md5_digest":"1aae2b886b7d6bc310cc88475adaeec6","packagetype":"sdist","python_version":"source","requires_python":null,"size":55479,"upload_time":"2024-05-18T10:40:59","upload_time_iso_8601":"2024-05-18T10:40:59.429238Z","url":"https://files.pythonhosted.org/packages/63/dd/06b3621f65133680297215d23567b4b83f939fe5a7b6ce92244d70950b94/rules-3.4.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"9a3f495dd85d24f194167fa36805970ede547aa8f395b8fb8d6fe6cf593bd274","md5":"8ae3442bc9772ed42c3c6c4046ba2172","sha256":"e906114d9b3cce73871213c6311b94cb26a5bc2c3b00aa2f13d3633a65447817"},"downloads":-1,"filename":"rules-3.4-py2.py3-none-any.whl","has_sig":false,"md5_digest":"8ae3442bc9772ed42c3c6c4046ba2172","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":25656,"upload_time":"2024-05-18T10:40:57","upload_time_iso_8601":"2024-05-18T10:40:57.109544Z","url":"https://files.pythonhosted.org/packages/9a/3f/495dd85d24f194167fa36805970ede547aa8f395b8fb8d6fe6cf593bd274/rules-3.4-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"63dd06b3621f65133680297215d23567b4b83f939fe5a7b6ce92244d70950b94","md5":"1aae2b886b7d6bc310cc88475adaeec6","sha256":"c4702c1d60ca43e97d4dfced31e98274c652dea3c461105d8df6186d663e3212"},"downloads":-1,"filename":"rules-3.4.tar.gz","has_sig":false,"md5_digest":"1aae2b886b7d6bc310cc88475adaeec6","packagetype":"sdist","python_version":"source","requires_python":null,"size":55479,"upload_time":"2024-05-18T10:40:59","upload_time_iso_8601":"2024-05-18T10:40:59.429238Z","url":"https://files.pythonhosted.org/packages/63/dd/06b3621f65133680297215d23567b4b83f939fe5a7b6ce92244d70950b94/rules-3.4.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
