{"info":{"author":"Derek Ruths","author_email":"druths@networkdynamics.org","bugtrack_url":null,"classifiers":["Development Status :: 4 - Beta","Intended Audience :: Developers","License :: OSI Approved :: Apache Software License","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3","Programming Language :: Python :: 3.2","Programming Language :: Python :: 3.3","Programming Language :: Python :: 3.4","Topic :: Software Development"],"description":"# arghandler [![Build Status](https://travis-ci.org/druths/arghandler.svg?branch=master)](https://travis-ci.org/druths/arghandler) #\n*Making argparse even more awesome*\n\nI love [argparse](https://docs.python.org/3/library/argparse.html), but there\nare some things that it simply doesn't help with as much as I'd like. Enter\narghandler.\n\nThe goal behind arghandler is to provide all the capabilities of argparse\n*plus* some high-level capabilities that crop up a lot when writing\ncommand-line tools: the library aims for high quality command line interfaces\nwith (even more) minimal code.\n\nAt present, arghandler provides two key capabilities:\n\n  1. Adding subcommands with basically zero extra lines of code. This gives\n  support for writing programs like `git` and `svn` which have nested\n  subcommands.\n\n  1. Configuring the logging framework (e.g., the desired logging level) from\n  the command line - again with basically one line of code.\n\nWe have lots more improvements we want to add - and as we have time and receive\nfeedback, we'll add more features.\n\nIf you have ideas, [email me](mailto:druths@networkdynamics.org) or code it up\nand generate a pull request!\n\n## Installation ##\n\nUse `pip` or `easy_install` to install the library:\n\n\tpip install arghandler\n\nor\n\n\teasy_install arghandler\n\nYou can find arghandler on pypi for relevant details should you need them.\n\n## Usage ##\n\nJust like with\n[argparse.ArgumentParser](https://docs.python.org/3/library/argparse.html#argumentparser-objects),\nin `arghandler` everything revolves around `ArgumentHandler`. In fact, it's\n(not so secretly) a subclass of ArgumentParser, so you can use it exactly the\nway you use `ArgumentParser`.  But `ArgumentHandler` has some new tricks.\n\nTo benefit from `ArgumentHandler`, your command-line configuration code will\nfollow this logic:\n\n\tfrom arghandler import ArgumentHandler\n\n\thandler = ArgumentHandler() # this accepts all args supported by ArgumentParser\n\n\t# config the handler using add_argument, set_logging_level, set_subcommands, etc...\n\n\thandler.run() # throw the configured handler at an argument string!\n\nNow for some details...\n\n### Invoking ArgumentHandler ###\n\n`ArgumentHandler` can be invoked on arguments in two ways.  \n\n*`ArgumentHandler.parse_args([argv])`* is little different from\n`ArgumentParser.parse_args([argv])`.  If `argv` is omitted, then the value of\n`sys.argv` is used. The only notable differences are:\n\n  * If a logging argument was set, then this will be included in the namespace\n    object returned.\n\n  * If subcommands are available, then the subcommand will be given by the\n\tvalue of `args.cmd` and the subcommand's arguments will be given by\n\t`args.cargs`.\n\n*`ArgumentHandler.run(argv,context_fxn)`* makes the class perform its more\nunique and powerful capabilities.  Notably: configuring the logger and running\nsubcommands.  As with `parse_args(...)`, if `argv` is not specified, then\n`sys.argv` will be used.  The `context_fxn` is also optional and is used as\npart of subcommand processing.  See that [section](#subcommands) below for more\ndetails.\n\n#### Enabling autocompletion ####\n\nWhen constructing an `ArgumentHandler`, you can enable autocompletion.  This\nrequires doing two separate things.\n\nFirst, pass the keyword argument `enable_autocompetion=True` to\n`ArgumentHandler(...)`.\n\nSecond, in the top-level script that will be your command-line tool, include\nthe line\n\n\t# PYTHON_ARGCOMPLETE_OK\n\nnear the top (in the first 1024 bytes).  For more details on this, see the\n[argcomplete](https://argcomplete.readthedocs.io/en/latest/) documentation.\n\nFor an example of this in action, see [examples/dummy.py!](examples/dummy.py).\n\n### Setting the logging level ###\n\nIf you use the python [logging](https://docs.python.org/3/library/logging.html)\npackage, this feature will save you some time.\n\nThe `ArgumentParser.set_logging_argument(...)` method allows you to specify a\ncommand-line argument that will set the logging level.  The method accepts\nseveral arguments:\n\n\tArgumentParser.set_logging_argument(*names,default_level=logging.ERROR,config_fxn=None)\n\n\n  * `*names` stands in for one or more arguments that specify the\n\targument names that will be used. These follow the same rules as ones\n\tpassed into\n\t[ArgumentParser.add_argument(...)](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument).\n\tMoreover, they MUST be optional arguments (i.e., start with a '-'\n\tcharacter).\n\n  * `default_level` indicates the default level the logging\n\tframework will be set to should the level not be specified on the command\n\tline.\n\n  * `config_fxn` allows the developer to write special logging\n\tconfiguration code.  If not specified, the\n\t[logging.basicConfig](https://docs.python.org/3/library/logging.html#logging.basicConfig)\n\tfunction will be invoked with the appropriate logging level. The function\n\tmust accept two arguments: the logging level and the namespace args object\n\treturned by the `ArgumentParser.parse_args` method. The configuration\n\titself will happen when the `ArgumentHandler.run(...)` method is called.\n\nIf you're cool with the defaults in `basicConfig`, then your method call will\nlook something like this\n\n\thandler.set_logging_argument('-l','-log_level',default_level=logging.INFO)\n\nIf you do want to do some customization, then your code will look like this\n\n\thandler.set_logging_argument('-l','-llevel',\n\t\tconfig_fxn=lambda level,args: logging.basicConfig(level=level,format='%(message)'))\n\n### <a name=\"subcommands\"></a>Declaring subcommands using decorators ###\n\nThis feature makes it possible to write nested commands like `git commit` and\n`svn checkout` with basically zero boilerplate code.  To do this `arghandler`\nprovides the `@subcmd` decorator.  To declare a subcommand, just put the\ndecorator on the function  you want to act as the subcommand.\n\n\tfrom arghandler import *\n\n\t@subcmd\n\tdef echo(parser,context,args):\n\t\tprint ' '.join(args)\n\n\t# here we associate the subcommand 'foobar' with function cmd_foobar\n\t@subcmd('foobar', help = 'Does foobar')\n\tdef cmd_foobar(parser,context,args):\n\t\tprint 'foobar'\n\n\thandler = ArgumentHandler()\n\thandler.run(['echo','hello','world']) # echo will be called and 'hello world' will be printed\n\nNotice that the subcommands always take three arguments.\n\n`args` is the set of arguments that *follow* the subcommand on the command\nline.\n\n`context` is an object that can make valuable global information available to\nsubcommands.  By default, the context is the namespace object returned by the\ninternal call to `ArgumentHandler.parse_args(...)`.  Other contexts can be\nproduced by passing a context-producing function to the\n`ArgumentHandler.run(...)` function:\n\n\t@subcmd('ping')\n\tdef ping_server(parser,server_address,args):\n\t\tos.system('ping %s' % server_address)\n\n\thandler = ArgumentHandler()\n\thandler.add_argument('-s','--server')\n\n\t# when this is run, the context will be set to the return value of context_fxn\n\t# in this case, it will be the string '127.0.0.1'\n\thandler.run(['-s','127.0.0.1','ping'],context_fxn=lambda args: args.server\n\nFinally, `parser` is an instance of `argparse.ArgumentParser` which has been\npreconfigured to behave properly for the subcommand.  Most crucially, this\nmeans that `parser.prog` is set to `<top_level_program> <sub_command>` so that\nhelp messages print out correctly for the subcommand.  Should your subcommand\nwant to parse arguments, this parser object should be used.\n\n### Declaring subcommands without decorators ###\n\nWhile decorators are the preferred way to specify subcommands, subcommands can\nalso be specified using the `ArgumentHandler.set_subcommands(...)` function.\nThis method expects a dictionary: keys are command names, values are the\ncommand functions:\n\n\tfrom arghandler import *\n\n\tdef echo(parser,context,args):\n\t\tprint ' '.join(args)\n\n\tdef cmd_foobar(parser,context,args):\n\t\tprint 'foobar'\n\n\thandler = ArgumentHandler()\n\thandler.set_subcommands( {'echo':echo, 'foobar':cmd_foobar} )\n\thandler.run(['echo','hello','world']) # echo will be called and 'hello world' will be printed\n\nAll the logic and rules around the context function apply here.  Moreoever, the\ncomplete set of subcommands include those specified using decorators AND those\nspecified through the `set_subcommands(...)` method.\n\n#### Making subcommands in subcommands ####\nOne valuable use for the `set_subcommands(...)` method is implementing\nsubcommand options for a subcommand.  For example, suppose you want a program with the following\ncommand subtree:\n\n```\npower\n  - create\n    - config\n    - proj\n  - run\n    - all\n    - proj\n```\n\nIn this case, `create` and `run` would be top-level subcommands that could be\ndeclared using standard `subcmd` decorators.  But what about the `config` and\n`proj` commands underneath `create`?  These can be created using a new\n`ArgumentHandler` inside the `create` function like this:\n\n```\ndef create_config(parser, context, args):\n    parser.add_argument('location')\n    args = parser.parse_args(args)\n\n    # do stuff\n\n    return\n\ndef create_proj(parser, context, args):\n    parser.add_argument('name')\n    args = parser.parse_args(args)\n\n    print(f'Creating the project: {args.name}')\n\n    # do stuff\n\n    return\n\n\n@subcmd('create', help='create a resource')\ndef create(parser, context, args):\n    handler = ArgumentHandler()\n\n    handler.set_subcommands({'config': (create_config, 'create a config file'),\n                             'proj': (create_proj, 'create a project')\n                            },\n                            use_registered_subcmds=False)\n\n    handler.run(args)\n```\n\nNote the use of `use_registered_subcmds=False` - this is important to omit any\nfunctions globally registered as commands using the `@subcmd` decorator.\n\n### Setting the help message ###\n\nThe format of the help message can be set to one more friendly for subcommands\nby passing the `ArgumentHandler` constructor the keyword argument\n`use_subcommand_help=True`.\n\nThis will produce a help message that looks something like this:\n\n\tusage: test.py [-h] subcommand\n\n\tpositional arguments:\n\t  subcommand\n        cmd1  cmd1_help_str\n\n\toptional arguments:\n  \t  -h, --help  show this help message and exit\n\n## Some best practices ##\n\n*Use `ArgumentParser` or `ArgumentHandler` inside subcommands.* This will\nensure that informative help messages are available for all your subcommands.\n\n\tfrom arghandler import *\n\n\t@subcmd\n\tdef echo(parser,context,args):\n\t\tparser.add_argument('-q','--quote_char',required=True)\n\t\targs = parser.parse_args(args)\n\t\tprint '%s%s%s' % (args.quote_char,' '.join(args),args.quote_char)\n\n\t@subcmd('foobar')\n\tdef cmd_foobar(parser,context,args):\n\t\tprint 'foobar'\n\n\thandler = ArgumentHandler()\n\thandler.run(['echo','-h']) # the help message for echo will be printed\n\n*Use logging.* Logging gives you much more control over what\ndebugging/informational content is printed out by your program. And with\n`arghandler` it's easier than ever to configure from the command line!\n\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"http://www.github.com/druths/arghandler","keywords":"argparse command-line parsing","license":"Apache","maintainer":"","maintainer_email":"","name":"arghandler","package_url":"https://pypi.org/project/arghandler/","platform":"","project_url":"https://pypi.org/project/arghandler/","project_urls":{"Homepage":"http://www.github.com/druths/arghandler"},"provides_extra":null,"release_url":"https://pypi.org/project/arghandler/1.3.1/","requires_dist":["argcomplete"],"requires_python":"","summary":"argparse extended with awesome feature enhancements to make life easier","version":"1.3.1","yanked":false,"yanked_reason":null},"last_serial":12988902,"releases":{"1.0":[{"comment_text":"","digests":{"blake2b_256":"46ebb5ebe1907be77c31a59332b194d7d7310b852eb4e161b36cba79bc5b613b","md5":"e5edf9a90a44116888674e651716965a","sha256":"07872fb28799f6df84dbceb0a11c6792148eb18b4fdf337ed2508d0e622eca25"},"downloads":-1,"filename":"arghandler-1.0.tar.gz","has_sig":false,"md5_digest":"e5edf9a90a44116888674e651716965a","packagetype":"sdist","python_version":"source","requires_python":null,"size":4155,"upload_time":"2015-07-26T15:29:05","upload_time_iso_8601":"2015-07-26T15:29:05.639519Z","url":"https://files.pythonhosted.org/packages/46/eb/b5ebe1907be77c31a59332b194d7d7310b852eb4e161b36cba79bc5b613b/arghandler-1.0.tar.gz","yanked":false,"yanked_reason":null}],"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"a71c0884a36e34272d7e3fc4f4c5c2d2d4f05d03ce6398bc887b135d85086038","md5":"efbef983e68814c5fedbe41ed3a9803f","sha256":"444d908dda28dd4208fb26b5d234b6ec8fa3e2df641a91aa89f8994a4a6f0902"},"downloads":-1,"filename":"arghandler-1.0.1.tar.gz","has_sig":false,"md5_digest":"efbef983e68814c5fedbe41ed3a9803f","packagetype":"sdist","python_version":"source","requires_python":null,"size":4139,"upload_time":"2015-07-26T15:51:25","upload_time_iso_8601":"2015-07-26T15:51:25.282397Z","url":"https://files.pythonhosted.org/packages/a7/1c/0884a36e34272d7e3fc4f4c5c2d2d4f05d03ce6398bc887b135d85086038/arghandler-1.0.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.2":[{"comment_text":"","digests":{"blake2b_256":"94eb4ef7d47b241a5a70b6bb1588ef31748c86c4d7484edbd8e05a9d6e1b0b0a","md5":"e4e312c755c222eee65650e7cc585c8c","sha256":"f7ba4b48d8bcf6b040a8dfaad09a43efa92c3257c6af6851059cfa8bb0fc0d13"},"downloads":-1,"filename":"arghandler-1.0.2.tar.gz","has_sig":false,"md5_digest":"e4e312c755c222eee65650e7cc585c8c","packagetype":"sdist","python_version":"source","requires_python":null,"size":4148,"upload_time":"2015-07-29T12:50:59","upload_time_iso_8601":"2015-07-29T12:50:59.558788Z","url":"https://files.pythonhosted.org/packages/94/eb/4ef7d47b241a5a70b6bb1588ef31748c86c4d7484edbd8e05a9d6e1b0b0a/arghandler-1.0.2.tar.gz","yanked":false,"yanked_reason":null}],"1.0.3":[{"comment_text":"","digests":{"blake2b_256":"c7c7d6cc34da4e8db6bb323f3ecc678fe647b6c6d452a0dec9012d4caff04140","md5":"c375f5b97f6a4356e505bddfad634a1b","sha256":"65c1a0d9002445a45b17cea821d18981c571e85f51bfd3250e2388536b59616a"},"downloads":-1,"filename":"arghandler-1.0.3.tar.gz","has_sig":false,"md5_digest":"c375f5b97f6a4356e505bddfad634a1b","packagetype":"sdist","python_version":"source","requires_python":null,"size":4120,"upload_time":"2015-10-04T05:14:01","upload_time_iso_8601":"2015-10-04T05:14:01.148591Z","url":"https://files.pythonhosted.org/packages/c7/c7/d6cc34da4e8db6bb323f3ecc678fe647b6c6d452a0dec9012d4caff04140/arghandler-1.0.3.tar.gz","yanked":false,"yanked_reason":null}],"1.1.0":[{"comment_text":"","digests":{"blake2b_256":"ca5127c9e0cfe7f230578c4bc722dd5d8f9b99fedba6932e272a0bbb56e764b1","md5":"7ac2d259d13b3a5ac1527a2f0c17ff11","sha256":"8ab54e5861fa77e1b4264aa7e71d6de37cb8bf1810da4bcb718a59b489bd645b"},"downloads":-1,"filename":"arghandler-1.1.0.tar.gz","has_sig":false,"md5_digest":"7ac2d259d13b3a5ac1527a2f0c17ff11","packagetype":"sdist","python_version":"source","requires_python":null,"size":4218,"upload_time":"2015-10-06T18:34:39","upload_time_iso_8601":"2015-10-06T18:34:39.782717Z","url":"https://files.pythonhosted.org/packages/ca/51/27c9e0cfe7f230578c4bc722dd5d8f9b99fedba6932e272a0bbb56e764b1/arghandler-1.1.0.tar.gz","yanked":false,"yanked_reason":null}],"1.2.0":[{"comment_text":"","digests":{"blake2b_256":"083dcb2db5548f3c1ed0ae7332366596d8da9052a76add69c752d3bae40d78b7","md5":"1730028fe7fed0197c0997de8e4041d4","sha256":"83ea2a6289f80f59f2830c356eeef5ab2c37cadceddd9b5772c6574ef31a50df"},"downloads":-1,"filename":"arghandler-1.2.0.tar.gz","has_sig":false,"md5_digest":"1730028fe7fed0197c0997de8e4041d4","packagetype":"sdist","python_version":"source","requires_python":null,"size":5199,"upload_time":"2016-06-09T19:00:36","upload_time_iso_8601":"2016-06-09T19:00:36.549692Z","url":"https://files.pythonhosted.org/packages/08/3d/cb2db5548f3c1ed0ae7332366596d8da9052a76add69c752d3bae40d78b7/arghandler-1.2.0.tar.gz","yanked":false,"yanked_reason":null}],"1.3.0":[{"comment_text":"","digests":{"blake2b_256":"6de4c55ec044e69fa026ae828521423773c942bc78c52469e728e69fd049b591","md5":"19d1b127ae2ac900e07591ca34c036ac","sha256":"07bb0bc591f0f1efd189ed3805bacaf02f959e7a7f9ba4e4571cd3b22d91ff3f"},"downloads":-1,"filename":"arghandler-1.3.0-py3-none-any.whl","has_sig":false,"md5_digest":"19d1b127ae2ac900e07591ca34c036ac","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":14211,"upload_time":"2022-01-24T15:29:26","upload_time_iso_8601":"2022-01-24T15:29:26.453954Z","url":"https://files.pythonhosted.org/packages/6d/e4/c55ec044e69fa026ae828521423773c942bc78c52469e728e69fd049b591/arghandler-1.3.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f55897416fe392d47d450b9fb38dee0641ed170054e15b1dc743f152589fb68e","md5":"3b0687f6c125c89b03c1685c08bc3432","sha256":"4e4fbef99903d896234d4f9159246c8855823c267502f1e86d19a80e4c1037f7"},"downloads":-1,"filename":"arghandler-1.3.0.tar.gz","has_sig":false,"md5_digest":"3b0687f6c125c89b03c1685c08bc3432","packagetype":"sdist","python_version":"source","requires_python":null,"size":10679,"upload_time":"2022-01-24T15:29:27","upload_time_iso_8601":"2022-01-24T15:29:27.582048Z","url":"https://files.pythonhosted.org/packages/f5/58/97416fe392d47d450b9fb38dee0641ed170054e15b1dc743f152589fb68e/arghandler-1.3.0.tar.gz","yanked":false,"yanked_reason":null}],"1.3.1":[{"comment_text":"","digests":{"blake2b_256":"a9bd9321d23485d82d366e97598b3116df04665ebc3b54891038a07e94e09528","md5":"a4b1828971b341ad80d7ca1b88731be3","sha256":"cb2ca0491cde72ee1c1f22907ccd3d12eb3f7d84aa56d5c4fe20e1d7d14b94db"},"downloads":-1,"filename":"arghandler-1.3.1-py3-none-any.whl","has_sig":false,"md5_digest":"a4b1828971b341ad80d7ca1b88731be3","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":14212,"upload_time":"2022-02-23T22:42:41","upload_time_iso_8601":"2022-02-23T22:42:41.674710Z","url":"https://files.pythonhosted.org/packages/a9/bd/9321d23485d82d366e97598b3116df04665ebc3b54891038a07e94e09528/arghandler-1.3.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"814111ca052f1cf33e0c9fd4d07414f8e60bc9f97568c9d0dc43649e54ea2eaa","md5":"a4d314fd038e296d21265b3716fd7843","sha256":"497a1053c20ad512ccc972eae2c32546b7ac90b7947a17bf391db6f9da5cc25a"},"downloads":-1,"filename":"arghandler-1.3.1.tar.gz","has_sig":false,"md5_digest":"a4d314fd038e296d21265b3716fd7843","packagetype":"sdist","python_version":"source","requires_python":null,"size":10675,"upload_time":"2022-02-23T22:42:45","upload_time_iso_8601":"2022-02-23T22:42:45.104980Z","url":"https://files.pythonhosted.org/packages/81/41/11ca052f1cf33e0c9fd4d07414f8e60bc9f97568c9d0dc43649e54ea2eaa/arghandler-1.3.1.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"a9bd9321d23485d82d366e97598b3116df04665ebc3b54891038a07e94e09528","md5":"a4b1828971b341ad80d7ca1b88731be3","sha256":"cb2ca0491cde72ee1c1f22907ccd3d12eb3f7d84aa56d5c4fe20e1d7d14b94db"},"downloads":-1,"filename":"arghandler-1.3.1-py3-none-any.whl","has_sig":false,"md5_digest":"a4b1828971b341ad80d7ca1b88731be3","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":14212,"upload_time":"2022-02-23T22:42:41","upload_time_iso_8601":"2022-02-23T22:42:41.674710Z","url":"https://files.pythonhosted.org/packages/a9/bd/9321d23485d82d366e97598b3116df04665ebc3b54891038a07e94e09528/arghandler-1.3.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"814111ca052f1cf33e0c9fd4d07414f8e60bc9f97568c9d0dc43649e54ea2eaa","md5":"a4d314fd038e296d21265b3716fd7843","sha256":"497a1053c20ad512ccc972eae2c32546b7ac90b7947a17bf391db6f9da5cc25a"},"downloads":-1,"filename":"arghandler-1.3.1.tar.gz","has_sig":false,"md5_digest":"a4d314fd038e296d21265b3716fd7843","packagetype":"sdist","python_version":"source","requires_python":null,"size":10675,"upload_time":"2022-02-23T22:42:45","upload_time_iso_8601":"2022-02-23T22:42:45.104980Z","url":"https://files.pythonhosted.org/packages/81/41/11ca052f1cf33e0c9fd4d07414f8e60bc9f97568c9d0dc43649e54ea2eaa/arghandler-1.3.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
