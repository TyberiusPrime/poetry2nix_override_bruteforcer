{"info":{"author":"","author_email":"Kez Cleal <clealk@cardiff.ac.uk>","bugtrack_url":null,"classifiers":["License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python :: 3"],"description":"=====\npyWFA\n=====\n\nA python wrapper for wavefront alignment using `WFA2-lib\n<https://github.com/smarco/WFA2-lib/>`_\n\nInstallation\n------------\n\nTo download from pypi::\n\n    pip install pywfa\n\nFrom conda::\n\n    conda install -c bioconda pywfa\n\nBuild from source::\n\n    git clone https://github.com/kcleal/pywfa\n    cd pywfa\n    pip install .\n\nOverview\n--------\n\nAlignment of pattern and text strings can be performed by accessing WFA2-lib functions directly:\n\n.. code-block:: python\n\n    from pywfa import WavefrontAligner\n\n    pattern = \"TCTTTACTCGCGCGTTGGAGAAATACAATAGT\"\n    text =    \"TCTATACTGCGCGTTTGGAGAAATAAAATAGT\"\n    a = WavefrontAligner(pattern)\n    score = a.wavefront_align(text)\n    assert a.status == 0  # alignment was successful\n    assert a.cigarstring == \"3M1X4M1D7M1I9M1X6M\"\n    assert a.score == -24\n    a.cigartuples\n    >>> [(0, 3), (8, 1), (0, 4), (2, 1), (0, 7), (1, 1), (0, 9), (8, 1), (0, 6)]\n    a.cigar_print_pretty()\n\n.. code-block:: text\n\n    >>> 3M1X4M1D7M1I9M1X6M      ALIGNMENT\n        1X1D1I1X      ALIGNMENT.COMPACT\n        PATTERN    TCTTTACTCGCGCGTT-GGAGAAATACAATAGT\n                   ||| |||| ||||||| ||||||||| ||||||\n        TEXT       TCTATACT-GCGCGTTTGGAGAAATAAAATAGT\n\nThe output of cigar_pretty_print can be directed to a file, rather than stdout using:\n\n.. code-block:: python\n\n    a.cigar_print_pretty(\"file.txt\")\n\nTo obtain a python str of this print out, access the results object (see below).\n\nCigartuples follow the convention:\n\n.. list-table::\n   :widths: 15 15\n   :header-rows: 1\n\n   * - Operation\n     - Code\n   * - M\n     - 0\n   * - I\n     - 1\n   * - D\n     - 2\n   * - N\n     - 3\n   * - S\n     - 4\n   * - H\n     - 5\n   * - =\n     - 7\n   * - X\n     - 8\n   * - B\n     - 9\n\nFor convenience, a results object can be obtained by calling the `WavefrontAligner` with a pattern and text:\n\n.. code-block:: python\n\n    pattern = \"TCTTTACTCGCGCGTTGGAGAAATACAATAGT\"\n    text =    \"TCTATACTGCGCGTTTGGAGAAATAAAATAGT\"\n    a = WavefrontAligner(pattern)\n    result = a(text)  # alignment result\n    result.__dict__\n    >>> {'pattern_length': 32, 'text_length': 32, 'pattern_start': 0, 'pattern_end': 32, 'text_start': 0, 'text_end': 32, 'cigartuples': [(0, 3), (8, 1), (0, 4), (2, 1), (0, 7), (1, 1), (0, 9), (8, 1), (0, 6)], 'score': -24, 'pattern': 'TCTTTACTCGCGCGTTGGAGAAATACAATAGT', 'text': 'TCTATACTGCGCGTTTGGAGAAATAAAATAGT', 'status': 0}\n\n    # Alignment can also be called with a pattern like this:\n    a(text, pattern)\n\n    # obtain a string in the same format as cigar_print_pretty\n    a.pretty\n    >>> 3M1X4M1D7M1I9M1X6M      ALIGNMENT\n        1X1D1I1X      ALIGNMENT.COMPACT\n              PATTERN    TCTTTACTCGCGCGTT-GGAGAAATACAATAGT\n                         |||*|||| ||||||| |||||||||*||||||\n              TEXT       TCTATACT-GCGCGTTTGGAGAAATAAAATAGT\n\n\nConfigure\n---------\nTo configure the `WaveFrontAligner`, options can be provided during initialization:\n\n\n.. code-block:: python\n\n    from pywfa import WavefrontAligner\n\n    a = WavefrontAligner(scope=\"score\",\n                         distance=\"affine2p\",\n                         span=\"end-to-end\",\n                         heuristic=\"adaptive\")\n\nSupported distance metrics are \"affine\" (default) and \"affine2p\". Scope can be \"full\" (default)\nor \"score\". Span can be \"ends-free\" (default) or \"end-to-end\". Heuristic can be None (default),\n\"adaptive\" or \"X-drop\".\n\nWhen using heuristic functions it is recommended to check the status attribute:\n\n\n.. code-block:: python\n\n    pattern = \"AAAAACCTTTTTAAAAAA\"\n    text = \"GGCCAAAAACCAAAAAA\"\n    a = WavefrontAligner(heuristic=\"adaptive\")\n    a(pattern, text)\n    a.status\n    >>> 0   # successful alignment, -1 indicates the alignment was stopped due to the heuristic\n\n\nDefault options\n---------------\n\nThe `WavefrontAligner` will be initialized with the following default options:\n\n.. list-table::\n   :widths: 15 10\n   :header-rows: 1\n\n   * - Parameter\n     - Default value\n   * - pattern\n     - None\n   * - distance\n     - \"affine\"\n   * - match\n     - 0\n   * - gap_opening\n     - 6\n   * - gep_extension\n     - 2\n   * - gap_opening2\n     - 24\n   * - gap_extension2\n     - 1\n   * - scope\n     - \"full\"\n   * - span\n     - \"ends-free\"\n   * - pattern_begin_free\n     - 0\n   * - pattern_end_free\n     - 0\n   * - text_begin_free\n     - 0\n   * - text_end_free\n     - 0\n   * - heuristic\n     - None\n   * - min_wavefront_length\n     - 10\n   * - max_distance_threshold\n     - 50\n   * - steps_between_cutoffs\n     - 1\n   * - xdrop\n     - 20\n\n\nModifying the cigar\n-------------------\n\nIf desired the cigar can be modified so the end operation is either a soft-clip or a match, this makes the\nalignment cigar resemble those produced by bwa, for example:\n\n.. code-block:: python\n\n    pattern = \"AAAAACCTTTTTAAAAAA\"\n    text = \"GGCCAAAAACCAAAAAA\"\n    a = WavefrontAligner(pattern)\n\n    res = a(text, clip_cigar=False)\n    print(cigartuples_to_str(res.cigartuples))\n    >>> 4I7M5D6M\n\n    res(text, clip_cigar=True)\n    print(cigartuples_to_str(res.cigartuples))\n    >>> 4S7M5D6M\n\n\nAn experimental feature is to trim short matches at the end of alignments. This results in alignments that approximate local alignments:\n\n.. code-block:: python\n\n    pattern = \"AAAAAAAAAAAACCTTTTAAAAAAGAAAAAAA\"\n    text = \"ACCCCCCCCCCCAAAAACCAAAAAAAAAAAAA\"\n    a = WavefrontAligner(pattern)\n\n    # The unmodified cigar may have short matches at the end:\n    res = a(text, clip_cigar=False)\n    res.cigartuples\n    >>> [(0, 1), (1, 5), (8, 6), (0, 7), (2, 5), (0, 5), (8, 1), (0, 7)]\n    res.aligned_text\n    >>> ACCCCCCCCCCCAAAAACCAAAAAAAAAAAAA\n    res.text_start, res.text_end\n    >>> 0, 32\n\n    # The minimum allowed block of matches can be set at e.g. 5 bp, which will trim off short matches\n    res = a(text, clip_cigar=True, min_aligned_bases_left=5, min_aligned_bases_right=5)\n    res.cigartuples\n    >>> [(4, 12), (0, 7), (2, 5), (0, 5), (8, 1), (0, 7)]\n    res.aligned_text\n    >>> AAAAACCAAAAAAAAAAAAA\n    res.text_start, res.text_end\n    >>> 12, 32\n\n    # Mismatch operations X can also be elided, note this occurs after the clip_cigar stage\n    res = a(text, clip_cigar=True, min_aligned_bases_left=5, min_aligned_bases_right=5, elide_mismatches=True)\n    res.cigartuples\n    >>> [(4, 12), (0, 7), (2, 5), (0, 13)]\n    res.aligned_text\n    >>> AAAAACCAAAAAAAAAAAAA\n\nNotes: The alignment score is not modified currently by trimming the cigar, however the pattern_start, pattern_end,\ntest_start and text_end are modified when the cigar is modified.\n","description_content_type":"text/x-rst","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"","license":"","maintainer":"","maintainer_email":"","name":"pywfa","package_url":"https://pypi.org/project/pywfa/","platform":null,"project_url":"https://pypi.org/project/pywfa/","project_urls":{"Repository":"https://github.com/kcleal/pywfa"},"provides_extra":null,"release_url":"https://pypi.org/project/pywfa/0.5.1/","requires_dist":null,"requires_python":">=3.7","summary":"Align sequences using WFA2-lib","version":"0.5.1","yanked":false,"yanked_reason":null},"last_serial":18514686,"releases":{"0.2.5":[{"comment_text":"","digests":{"blake2b_256":"a227edbaabe18d863b40b4d0cd143105f8d5ef889e0c58ebab5c7a5f80a41830","md5":"58e70d8fec861cc0c3b5abdfcc6a9c43","sha256":"721bd8fdd44ce9a1b59bbeebe200324c32f3f8916d9198c9fedb056fedccc5a4"},"downloads":-1,"filename":"pywfa-0.2.5.tar.gz","has_sig":false,"md5_digest":"58e70d8fec861cc0c3b5abdfcc6a9c43","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":692814,"upload_time":"2022-03-17T20:07:12","upload_time_iso_8601":"2022-03-17T20:07:12.326652Z","url":"https://files.pythonhosted.org/packages/a2/27/edbaabe18d863b40b4d0cd143105f8d5ef889e0c58ebab5c7a5f80a41830/pywfa-0.2.5.tar.gz","yanked":false,"yanked_reason":null}],"0.2.6":[{"comment_text":"","digests":{"blake2b_256":"0f013aea5a52a6a625fb3ef0c31f516dcdb4e89ba12e21a24bd3678532f67dd2","md5":"baae4f3350ba893fc1519f6ad032546d","sha256":"037ceff1ff13b34412feac3564531fdf58b3adf06f241d3fb99b57fa7db7322a"},"downloads":-1,"filename":"pywfa-0.2.6.tar.gz","has_sig":false,"md5_digest":"baae4f3350ba893fc1519f6ad032546d","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":822806,"upload_time":"2022-03-17T21:32:14","upload_time_iso_8601":"2022-03-17T21:32:14.439772Z","url":"https://files.pythonhosted.org/packages/0f/01/3aea5a52a6a625fb3ef0c31f516dcdb4e89ba12e21a24bd3678532f67dd2/pywfa-0.2.6.tar.gz","yanked":false,"yanked_reason":null}],"0.2.7":[{"comment_text":"","digests":{"blake2b_256":"695798c7fbf1d497771c732435d02190081514460a8d3518165d5e599ac639dc","md5":"28ee29621da69575282e1910c1255953","sha256":"c5ba4d068e4d3cde02c61153d0104698d988defc67da3ad3234bfb136d7a1999"},"downloads":-1,"filename":"pywfa-0.2.7-cp39-cp39-macosx_10_9_x86_64.whl","has_sig":false,"md5_digest":"28ee29621da69575282e1910c1255953","packagetype":"bdist_wheel","python_version":"cp39","requires_python":">=3.7","size":1266002,"upload_time":"2022-05-20T20:22:05","upload_time_iso_8601":"2022-05-20T20:22:05.553130Z","url":"https://files.pythonhosted.org/packages/69/57/98c7fbf1d497771c732435d02190081514460a8d3518165d5e599ac639dc/pywfa-0.2.7-cp39-cp39-macosx_10_9_x86_64.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"44b4f6d5a8e853e18e6eda0358bff42f12f110003ef275b05bb19a4c34d575c7","md5":"7e923442dc91a0ba01cd17d2939a1b3d","sha256":"b7e1cb3e981580f35a2e9e097d145db075db209d9a535d0d66162af391cbcb8e"},"downloads":-1,"filename":"pywfa-0.2.7.tar.gz","has_sig":false,"md5_digest":"7e923442dc91a0ba01cd17d2939a1b3d","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":1010410,"upload_time":"2022-05-20T20:22:08","upload_time_iso_8601":"2022-05-20T20:22:08.469340Z","url":"https://files.pythonhosted.org/packages/44/b4/f6d5a8e853e18e6eda0358bff42f12f110003ef275b05bb19a4c34d575c7/pywfa-0.2.7.tar.gz","yanked":false,"yanked_reason":null}],"0.3.0":[{"comment_text":"","digests":{"blake2b_256":"d52d06abe85c9a4625ff663f04bf79a7236c2ff215b3a474091a98b61611aec1","md5":"5a30beae265719d3e87cdca305936a80","sha256":"684b117d7077565ff2043c5354f2bd0f129f1281d5d49e234dcd2ea7208749d1"},"downloads":-1,"filename":"pywfa-0.3.0.tar.gz","has_sig":false,"md5_digest":"5a30beae265719d3e87cdca305936a80","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":3273739,"upload_time":"2022-07-15T09:21:03","upload_time_iso_8601":"2022-07-15T09:21:03.499002Z","url":"https://files.pythonhosted.org/packages/d5/2d/06abe85c9a4625ff663f04bf79a7236c2ff215b3a474091a98b61611aec1/pywfa-0.3.0.tar.gz","yanked":false,"yanked_reason":null}],"0.4.0":[{"comment_text":"","digests":{"blake2b_256":"de00b037e1881f50f88d2a3f312a44f03d2430e8c58b3a5b81a005280a54c21a","md5":"7162a7e368f7dfe6d6d2e830a693120b","sha256":"943ae5560416fc44c6ddfe03e1cf3ccbf756fffbc6d75991747b700cea423ddc"},"downloads":-1,"filename":"pywfa-0.4.0.tar.gz","has_sig":false,"md5_digest":"7162a7e368f7dfe6d6d2e830a693120b","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":3484016,"upload_time":"2023-01-05T12:19:06","upload_time_iso_8601":"2023-01-05T12:19:06.518431Z","url":"https://files.pythonhosted.org/packages/de/00/b037e1881f50f88d2a3f312a44f03d2430e8c58b3a5b81a005280a54c21a/pywfa-0.4.0.tar.gz","yanked":false,"yanked_reason":null}],"0.4.1":[{"comment_text":"","digests":{"blake2b_256":"98830b435c0c681ef8d9418b3d493342041189f3faf470d2dbfa384e7dd234cf","md5":"e95b159293c05fa1040b21e965da61f1","sha256":"c02d576b595ccae4193a2d0c201b374c64a89ac3dddf1d9ab14e412825effedb"},"downloads":-1,"filename":"pywfa-0.4.1.tar.gz","has_sig":false,"md5_digest":"e95b159293c05fa1040b21e965da61f1","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":3484151,"upload_time":"2023-03-01T22:03:49","upload_time_iso_8601":"2023-03-01T22:03:49.953036Z","url":"https://files.pythonhosted.org/packages/98/83/0b435c0c681ef8d9418b3d493342041189f3faf470d2dbfa384e7dd234cf/pywfa-0.4.1.tar.gz","yanked":false,"yanked_reason":null}],"0.4.2":[{"comment_text":"","digests":{"blake2b_256":"5d92366a9f0a0a4b34e2650199861a377eddf7e9f24ecc5298efb81352dc7cee","md5":"935fee680261f8e680d75455a78dd4fa","sha256":"065c782aa917da52c947a7ea1ed9d0e0153325153f7fcc32cca588f08e58136b"},"downloads":-1,"filename":"pywfa-0.4.2.tar.gz","has_sig":false,"md5_digest":"935fee680261f8e680d75455a78dd4fa","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":3487407,"upload_time":"2023-05-24T10:18:04","upload_time_iso_8601":"2023-05-24T10:18:04.571475Z","url":"https://files.pythonhosted.org/packages/5d/92/366a9f0a0a4b34e2650199861a377eddf7e9f24ecc5298efb81352dc7cee/pywfa-0.4.2.tar.gz","yanked":false,"yanked_reason":null}],"0.5.0":[{"comment_text":"","digests":{"blake2b_256":"5a90b584ff58075d2949636d8afeee7af9c68169a8b15916d0eaab64e823b2f5","md5":"4b6635886ffdde1b0206f82a992e8f0e","sha256":"8a5a70a109c9f9a248b989001c4742ca787fe235928d939a0ab3a59fea7f9d1b"},"downloads":-1,"filename":"pywfa-0.5.0.tar.gz","has_sig":false,"md5_digest":"4b6635886ffdde1b0206f82a992e8f0e","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":3496824,"upload_time":"2023-05-25T08:23:23","upload_time_iso_8601":"2023-05-25T08:23:23.506518Z","url":"https://files.pythonhosted.org/packages/5a/90/b584ff58075d2949636d8afeee7af9c68169a8b15916d0eaab64e823b2f5/pywfa-0.5.0.tar.gz","yanked":false,"yanked_reason":null}],"0.5.1":[{"comment_text":"","digests":{"blake2b_256":"9340ec1c77237515eb618ba7407d4ac954b9dd127808a303cd85b0928f8dc12a","md5":"9a09de286de428aea98b3f0fc3ca9b35","sha256":"e972bf53f9e6d8957e9105ecc22cf704ac4bfad4d882d79c82f11fc260381483"},"downloads":-1,"filename":"pywfa-0.5.1.tar.gz","has_sig":false,"md5_digest":"9a09de286de428aea98b3f0fc3ca9b35","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":3496881,"upload_time":"2023-06-15T10:37:33","upload_time_iso_8601":"2023-06-15T10:37:33.414047Z","url":"https://files.pythonhosted.org/packages/93/40/ec1c77237515eb618ba7407d4ac954b9dd127808a303cd85b0928f8dc12a/pywfa-0.5.1.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"9340ec1c77237515eb618ba7407d4ac954b9dd127808a303cd85b0928f8dc12a","md5":"9a09de286de428aea98b3f0fc3ca9b35","sha256":"e972bf53f9e6d8957e9105ecc22cf704ac4bfad4d882d79c82f11fc260381483"},"downloads":-1,"filename":"pywfa-0.5.1.tar.gz","has_sig":false,"md5_digest":"9a09de286de428aea98b3f0fc3ca9b35","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":3496881,"upload_time":"2023-06-15T10:37:33","upload_time_iso_8601":"2023-06-15T10:37:33.414047Z","url":"https://files.pythonhosted.org/packages/93/40/ec1c77237515eb618ba7407d4ac954b9dd127808a303cd85b0928f8dc12a/pywfa-0.5.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
