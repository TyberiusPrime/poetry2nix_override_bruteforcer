{"info":{"author":null,"author_email":"Matthias Fey <matthias@pyg.org>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","License :: OSI Approved :: MIT License","Programming Language :: Python","Programming Language :: Python :: 3 :: Only","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],"description":"<p align=\"center\">\n  <img height=\"150\" src=\"https://raw.githubusercontent.com/pyg-team/pyg_sphinx_theme/master/pyg_sphinx_theme/static/img/pyg_logo_text.svg?sanitize=true\" />\n</p>\n\n______________________________________________________________________\n\n[![PyPI Version][pypi-image]][pypi-url]\n[![Testing Status][testing-image]][testing-url]\n[![Linting Status][linting-image]][linting-url]\n[![Docs Status][docs-image]][docs-url]\n[![Contributing][contributing-image]][contributing-url]\n[![Slack][slack-image]][slack-url]\n\n**[Documentation](https://pytorch-geometric.readthedocs.io)** | **[Paper](https://arxiv.org/abs/1903.02428)** | **[Colab Notebooks and Video Tutorials](https://pytorch-geometric.readthedocs.io/en/latest/get_started/colabs.html)** | **[External Resources](https://pytorch-geometric.readthedocs.io/en/latest/external/resources.html)** | **[OGB Examples](https://github.com/snap-stanford/ogb/tree/master/examples)**\n\n**PyG** *(PyTorch Geometric)* is a library built upon [PyTorch](https://pytorch.org/) to easily write and train Graph Neural Networks (GNNs) for a wide range of applications related to structured data.\n\nIt consists of various methods for deep learning on graphs and other irregular structures, also known as *[geometric deep learning](http://geometricdeeplearning.com/)*, from a variety of published papers.\nIn addition, it consists of easy-to-use mini-batch loaders for operating on many small and single giant graphs, [multi GPU-support](https://github.com/pyg-team/pytorch_geometric/tree/master/examples/multi_gpu), [`torch.compile`](https://pytorch-geometric.readthedocs.io/en/latest/advanced/compile.html) support, [`DataPipe`](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/datapipe.py) support, a large number of common benchmark datasets (based on simple interfaces to create your own), the [GraphGym](https://pytorch-geometric.readthedocs.io/en/latest/advanced/graphgym.html) experiment manager, and helpful transforms, both for learning on arbitrary graphs as well as on 3D meshes or point clouds.\n\n**[Click here to join our Slack community!][slack-url]**\n\n<p align=\"center\">\n  <a href=\"https://medium.com/stanford-cs224w\"><img style=\"max-width=: 941px\" src=\"https://data.pyg.org/img/cs224w_tutorials.png\" /></a>\n</p>\n\n______________________________________________________________________\n\n- [Library Highlights](#library-highlights)\n- [Quick Tour for New Users](#quick-tour-for-new-users)\n- [Architecture Overview](#architecture-overview)\n- [Implemented GNN Models](#implemented-gnn-models)\n- [Installation](#installation)\n\n## Library Highlights\n\nWhether you are a machine learning researcher or first-time user of machine learning toolkits, here are some reasons to try out PyG for machine learning on graph-structured data.\n\n- **Easy-to-use and unified API**:\n  All it takes is 10-20 lines of code to get started with training a GNN model (see the next section for a [quick tour](#quick-tour-for-new-users)).\n  PyG is *PyTorch-on-the-rocks*: It utilizes a tensor-centric API and keeps design principles close to vanilla PyTorch.\n  If you are already familiar with PyTorch, utilizing PyG is straightforward.\n- **Comprehensive and well-maintained GNN models**:\n  Most of the state-of-the-art Graph Neural Network architectures have been implemented by library developers or authors of research papers and are ready to be applied.\n- **Great flexibility**:\n  Existing PyG models can easily be extended for conducting your own research with GNNs.\n  Making modifications to existing models or creating new architectures is simple, thanks to its easy-to-use message passing API, and a variety of operators and utility functions.\n- **Large-scale real-world GNN models**:\n  We focus on the need of GNN applications in challenging real-world scenarios, and support learning on diverse types of graphs, including but not limited to: scalable GNNs for graphs with millions of nodes; dynamic GNNs for node predictions over time; heterogeneous GNNs with multiple node types and edge types.\n- **GraphGym integration**: GraphGym lets users easily reproduce GNN experiments, is able to launch and analyze thousands of different GNN configurations, and is customizable by registering new modules to a GNN learning pipeline.\n\n## Quick Tour for New Users\n\nIn this quick tour, we highlight the ease of creating and training a GNN model with only a few lines of code.\n\n### Train your own GNN model\n\nIn the first glimpse of PyG, we implement the training of a GNN for classifying papers in a citation graph.\nFor this, we load the [Cora](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.datasets.Planetoid.html) dataset, and create a simple 2-layer GCN model using the pre-defined [`GCNConv`](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.GCNConv.html):\n\n```python\nimport torch\nfrom torch import Tensor\nfrom torch_geometric.nn import GCNConv\nfrom torch_geometric.datasets import Planetoid\n\ndataset = Planetoid(root='.', name='Cora')\n\nclass GCN(torch.nn.Module):\n    def __init__(self, in_channels, hidden_channels, out_channels):\n        super().__init__()\n        self.conv1 = GCNConv(in_channels, hidden_channels)\n        self.conv2 = GCNConv(hidden_channels, out_channels)\n\n    def forward(self, x: Tensor, edge_index: Tensor) -> Tensor:\n        # x: Node feature matrix of shape [num_nodes, in_channels]\n        # edge_index: Graph connectivity matrix of shape [2, num_edges]\n        x = self.conv1(x, edge_index).relu()\n        x = self.conv2(x, edge_index)\n        return x\n\nmodel = GCN(dataset.num_features, 16, dataset.num_classes)\n```\n\n<details>\n<summary>We can now optimize the model in a training loop, similar to the <a href=\"https://pytorch.org/tutorials/beginner/basics/optimization_tutorial.html#full-implementation\">standard PyTorch training procedure</a>.</summary>\n\n```python\nimport torch.nn.functional as F\n\ndata = dataset[0]\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n\nfor epoch in range(200):\n    pred = model(data.x, data.edge_index)\n    loss = F.cross_entropy(pred[data.train_mask], data.y[data.train_mask])\n\n    # Backpropagation\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\n```\n\n</details>\n\nMore information about evaluating final model performance can be found in the corresponding [example](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/gcn.py).\n\n### Create your own GNN layer\n\nIn addition to the easy application of existing GNNs, PyG makes it simple to implement custom Graph Neural Networks (see [here](https://pytorch-geometric.readthedocs.io/en/latest/tutorial/create_gnn.html) for the accompanying tutorial).\nFor example, this is all it takes to implement the [edge convolutional layer](https://arxiv.org/abs/1801.07829) from Wang *et al.*:\n\n$$x_i^{\\\\prime} ~ = ~ \\\\max\\_{j \\\\in \\\\mathcal{N}(i)} ~ \\\\textrm{MLP}\\_{\\\\theta} \\\\left( \\[ ~ x_i, ~ x_j - x_i ~ \\] \\\\right)$$\n\n```python\nimport torch\nfrom torch import Tensor\nfrom torch.nn import Sequential, Linear, ReLU\nfrom torch_geometric.nn import MessagePassing\n\nclass EdgeConv(MessagePassing):\n    def __init__(self, in_channels, out_channels):\n        super().__init__(aggr=\"max\")  # \"Max\" aggregation.\n        self.mlp = Sequential(\n            Linear(2 * in_channels, out_channels),\n            ReLU(),\n            Linear(out_channels, out_channels),\n        )\n\n    def forward(self, x: Tensor, edge_index: Tensor) -> Tensor:\n        # x: Node feature matrix of shape [num_nodes, in_channels]\n        # edge_index: Graph connectivity matrix of shape [2, num_edges]\n        return self.propagate(edge_index, x=x)  # shape [num_nodes, out_channels]\n\n    def message(self, x_j: Tensor, x_i: Tensor) -> Tensor:\n        # x_j: Source node features of shape [num_edges, in_channels]\n        # x_i: Target node features of shape [num_edges, in_channels]\n        edge_features = torch.cat([x_i, x_j - x_i], dim=-1)\n        return self.mlp(edge_features)  # shape [num_edges, out_channels]\n```\n\n### Manage experiments with GraphGym\n\nGraphGym allows you to manage and launch GNN experiments, using a highly modularized pipeline (see [here](https://pytorch-geometric.readthedocs.io/en/latest/advanced/graphgym.html) for the accompanying tutorial).\n\n```\ngit clone https://github.com/pyg-team/pytorch_geometric.git\ncd pytorch_geometric/graphgym\nbash run_single.sh  # run a single GNN experiment (node/edge/graph-level)\nbash run_batch.sh   # run a batch of GNN experiments, using differnt GNN designs/datasets/tasks\n```\n\nUsers are highly encouraged to check out the [documentation](https://pytorch-geometric.readthedocs.io/en/latest), which contains additional tutorials on the essential functionalities of PyG, including data handling, creation of datasets and a full list of implemented methods, transforms, and datasets.\nFor a quick start, check out our [examples](https://github.com/pyg-team/pytorch_geometric/tree/master/examples) in `examples/`.\n\n## Architecture Overview\n\nPyG provides a multi-layer framework that enables users to build Graph Neural Network solutions on both low and high levels.\nIt comprises of the following components:\n\n- The PyG **engine** utilizes the powerful PyTorch deep learning framework with full [`torch.compile`](https://pytorch-geometric.readthedocs.io/en/latest/advanced/compile.html) and [TorchScript](https://pytorch-geometric.readthedocs.io/en/latest/advanced/jit.html) support, as well as additions of efficient CPU/CUDA libraries for operating on sparse data, *e.g.*, [`pyg-lib`](https://github.com/pyg-team/pyg-lib).\n- The PyG **storage** handles data processing, transformation and loading pipelines. It is capable of handling and processing large-scale graph datasets, and provides effective solutions for heterogeneous graphs. It further provides a variety of sampling solutions, which enable training of GNNs on large-scale graphs.\n- The PyG **operators** bundle essential functionalities for implementing Graph Neural Networks. PyG supports important GNN building blocks that can be combined and applied to various parts of a GNN model, ensuring rich flexibility of GNN design.\n- Finally, PyG provides an abundant set of GNN **models**, and examples that showcase GNN models on standard graph benchmarks. Thanks to its flexibility, users can easily build and modify custom GNN models to fit their specific needs.\n\n<p align=\"center\">\n  <img width=\"100%\" src=\"https://raw.githubusercontent.com/pyg-team/pytorch_geometric/master/docs/source/_figures/architecture.svg?sanitize=true\" />\n</p>\n\n## Implemented GNN Models\n\nWe list currently supported PyG models, layers and operators according to category:\n\n**GNN layers:**\nAll Graph Neural Network layers are implemented via the **[`nn.MessagePassing`](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.MessagePassing.html)** interface.\nA GNN layer specifies how to perform message passing, *i.e.* by designing different message, aggregation and update functions as defined [here](https://pytorch-geometric.readthedocs.io/en/latest/tutorial/create_gnn.html).\nThese GNN layers can be stacked together to create Graph Neural Network models.\n\n- **[GCNConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.GCNConv.html)** from Kipf and Welling: [Semi-Supervised Classification with Graph Convolutional Networks](https://arxiv.org/abs/1609.02907) (ICLR 2017) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/gcn.py)\\]\n- **[ChebConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.ChebConv.html)** from Defferrard *et al.*: [Convolutional Neural Networks on Graphs with Fast Localized Spectral Filtering](https://arxiv.org/abs/1606.09375) (NIPS 2016) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/gcn.py#L36-L37)\\]\n- **[GATConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.GATConv.html)** from Veličković *et al.*: [Graph Attention Networks](https://arxiv.org/abs/1710.10903) (ICLR 2018) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/gat.py)\\]\n\n<details>\n<summary><b>Expand to see all implemented GNN layers...</b></summary>\n\n- **[GCN2Conv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.GCN2Conv.html)** from Chen *et al.*: [Simple and Deep Graph Convolutional Networks](https://arxiv.org/abs/2007.02133) (ICML 2020) \\[[**Example1**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/gcn2_cora.py), [**Example2**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/gcn2_ppi.py)\\]\n- **[SplineConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.SplineConv.html)** from Fey *et al.*: [SplineCNN: Fast Geometric Deep Learning with Continuous B-Spline Kernels](https://arxiv.org/abs/1711.08920) (CVPR 2018) \\[[**Example1**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/cora.py), [**Example2**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/faust.py)\\]\n- **[NNConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.NNConv.html)** from Gilmer *et al.*: [Neural Message Passing for Quantum Chemistry](https://arxiv.org/abs/1704.01212) (ICML 2017) \\[[**Example1**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/qm9_nn_conv.py), [**Example2**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/mnist_nn_conv.py)\\]\n- **[CGConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.CGConv.html)** from Xie and Grossman: [Crystal Graph Convolutional Neural Networks for an Accurate and Interpretable Prediction of Material Properties](https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.120.145301) (Physical Review Letters 120, 2018)\n- **[ECConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.ECConv.html)** from Simonovsky and Komodakis: [Edge-Conditioned Convolution on Graphs](https://arxiv.org/abs/1704.02901) (CVPR 2017)\n- **[EGConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.EGConv.html)** from Tailor *et al.*: [Adaptive Filters and Aggregator Fusion for Efficient Graph Convolutions](https://arxiv.org/abs/2104.01481) (GNNSys 2021) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/egc.py)\\]\n- **[GATv2Conv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.GATv2Conv.html)** from Brody *et al.*: [How Attentive are Graph Attention Networks?](https://arxiv.org/abs/2105.14491) (ICLR 2022)\n- **[TransformerConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.TransformerConv.html)** from Shi *et al.*: [Masked Label Prediction: Unified Message Passing Model for Semi-Supervised Classification](https://arxiv.org/abs/2009.03509) (CoRR 2020) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/unimp_arxiv.py)\\]\n- **[SAGEConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.SAGEConv.html)** from Hamilton *et al.*: [Inductive Representation Learning on Large Graphs](https://arxiv.org/abs/1706.02216) (NIPS 2017) \\[[**Example1**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/reddit.py), [**Example2**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/ogbn_products_sage.py), [**Example3**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/graph_sage_unsup.py), [**Example4**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/graph_sage_unsup_ppi.py)\\]\n- **[GraphConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.GraphConv.html)** from, *e.g.*, Morris *et al.*: [Weisfeiler and Leman Go Neural: Higher-order Graph Neural Networks](https://arxiv.org/abs/1810.02244) (AAAI 2019)\n- **[GatedGraphConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.GatedGraphConv.html)** from Li *et al.*: [Gated Graph Sequence Neural Networks](https://arxiv.org/abs/1511.05493) (ICLR 2016)\n- **[ResGatedGraphConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.ResGatedGraphConv.html)** from Bresson and Laurent: [Residual Gated Graph ConvNets](https://arxiv.org/abs/1711.07553) (CoRR 2017)\n- **[GINConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.GINConv.html)** from Xu *et al.*: [How Powerful are Graph Neural Networks?](https://arxiv.org/abs/1810.00826) (ICLR 2019) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/mutag_gin.py)\\]\n- **[GINEConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.GINEConv.html)** from Hu *et al.*: [Strategies for Pre-training Graph Neural Networks](https://arxiv.org/abs/1905.12265) (ICLR 2020)\n- **[ARMAConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.ARMAConv.html)** from Bianchi *et al.*: [Graph Neural Networks with Convolutional ARMA Filters](https://arxiv.org/abs/1901.01343) (CoRR 2019) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/arma.py)\\]\n- **[SGConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.SGConv.html)** from Wu *et al.*: [Simplifying Graph Convolutional Networks](https://arxiv.org/abs/1902.07153) (CoRR 2019) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/sgc.py)\\]\n- **[APPNP](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.APPNP.html)** from Klicpera *et al.*: [Predict then Propagate: Graph Neural Networks meet Personalized PageRank](https://arxiv.org/abs/1810.05997) (ICLR 2019) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/benchmark/citation/appnp.py)\\]\n- **[MFConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.MFConv.html)** from Duvenaud *et al.*: [Convolutional Networks on Graphs for Learning Molecular Fingerprints](https://arxiv.org/abs/1509.09292) (NIPS 2015)\n- **[AGNNConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.AGNNConv.html)** from Thekumparampil *et al.*: [Attention-based Graph Neural Network for Semi-Supervised Learning](https://arxiv.org/abs/1803.03735) (CoRR 2017) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/agnn.py)\\]\n- **[TAGConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.TAGConv.html)** from Du *et al.*: [Topology Adaptive Graph Convolutional Networks](https://arxiv.org/abs/1710.10370) (CoRR 2017) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/tagcn.py)\\]\n- **[PNAConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.PNAConv.html)** from Corso *et al.*: [Principal Neighbourhood Aggregation for Graph Nets](https://arxiv.org/abs/2004.05718) (CoRR 2020) \\[**[Example](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/pna.py)**\\]\n- **[FAConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.FAConv.html)** from Bo *et al.*: [Beyond Low-Frequency Information in Graph Convolutional Networks](https://arxiv.org/abs/2101.00797) (AAAI 2021)\n- **[PDNConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.nn.conv.PDNConv.html)** from Rozemberczki *et al.*: [Pathfinder Discovery Networks for Neural Message Passing](https://arxiv.org/abs/2010.12878) (WWW 2021)\n- **[RGCNConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.RGCNConv.html)** from Schlichtkrull *et al.*: [Modeling Relational Data with Graph Convolutional Networks](https://arxiv.org/abs/1703.06103) (ESWC 2018) \\[[**Example1**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/rgcn.py), [**Example2**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/rgcn_link_pred.py)\\]\n- **[RGATConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.RGATConv.html)** from Busbridge *et al.*: [Relational Graph Attention Networks](https://arxiv.org/abs/1904.05811) (CoRR 2019) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/rgat.py)\\]\n- **[FiLMConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.FiLMConv.html)** from Brockschmidt: [GNN-FiLM: Graph Neural Networks with Feature-wise Linear Modulation](https://arxiv.org/abs/1906.12192) (ICML 2020) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/film.py)\\]\n- **[SignedConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.SignedConv.html)** from Derr *et al.*: [Signed Graph Convolutional Network](https://arxiv.org/abs/1808.06354) (ICDM 2018) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/signed_gcn.py)\\]\n- **[DNAConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.DNAConv.html)** from Fey: [Just Jump: Dynamic Neighborhood Aggregation in Graph Neural Networks](https://arxiv.org/abs/1904.04849) (ICLR-W 2019) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/dna.py)\\]\n- **[PANConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.PANConv.html)** from Ma *et al.*: [Path Integral Based Convolution and Pooling for Graph Neural Networks](https://arxiv.org/abs/2006.16811) (NeurIPS 2020)\n- **[PointNetConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.PointNetConv.html)** (including **[Iterative Farthest Point Sampling](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.pool.fps.html)**, dynamic graph generation based on **[nearest neighbor](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.pool.knn_graph.html)** or **[maximum distance](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.pool.radius_graph.html)**, and **[k-NN interpolation](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.unpool.knn_interpolate.html)** for upsampling) from Qi *et al.*: [PointNet: Deep Learning on Point Sets for 3D Classification and Segmentation](https://arxiv.org/abs/1612.00593) (CVPR 2017) and [PointNet++: Deep Hierarchical Feature Learning on Point Sets in a Metric Space](https://arxiv.org/abs/1706.02413) (NIPS 2017) \\[[**Example1**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/pointnet2_classification.py), [**Example2**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/pointnet2_segmentation.py)\\]\n- **[EdgeConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.EdgeConv.html)** from Wang *et al.*: [Dynamic Graph CNN for Learning on Point Clouds](https://arxiv.org/abs/1801.07829) (CoRR, 2018) \\[[**Example1**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/dgcnn_classification.py), [**Example2**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/dgcnn_segmentation.py)\\]\n- **[XConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.XConv.html)** from Li *et al.*: [PointCNN: Convolution On X-Transformed Points](https://arxiv.org/abs/1801.07791) (NeurIPS 2018) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/benchmark/points/point_cnn.py)\\]\n- **[PPFConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.PPFConv.html)** from Deng *et al.*: [PPFNet: Global Context Aware Local Features for Robust 3D Point Matching](https://arxiv.org/abs/1802.02669) (CVPR 2018)\n- **[GMMConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.GMMConv.html)** from Monti *et al.*: [Geometric Deep Learning on Graphs and Manifolds using Mixture Model CNNs](https://arxiv.org/abs/1611.08402) (CVPR 2017)\n- **[FeaStConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.FeaStConv.html)** from Verma *et al.*: [FeaStNet: Feature-Steered Graph Convolutions for 3D Shape Analysis](https://arxiv.org/abs/1706.05206) (CVPR 2018)\n- **[PointTransformerConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.PointTransformerConv.html)** from Zhao *et al.*: [Point Transformer](https://arxiv.org/abs/2012.09164) (2020)\n- **[HypergraphConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.HypergraphConv.html)** from Bai *et al.*: [Hypergraph Convolution and Hypergraph Attention](https://arxiv.org/abs/1901.08150) (CoRR 2019)\n- **[GravNetConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.GravNetConv.html)** from Qasim *et al.*: [Learning Representations of Irregular Particle-detector Geometry with Distance-weighted Graph Networks](https://arxiv.org/abs/1902.07987) (European Physics Journal C, 2019)\n- **[SuperGAT](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.SuperGATConv.html)** from Kim and Oh: [How To Find Your Friendly Neighborhood: Graph Attention Design With Self-Supervision](https://openreview.net/forum?id=Wi5KUNlqWty) (ICLR 2021) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/super_gat.py)\\]\n- **[HGTConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.HGTConv.html)** from Hu *et al.*: [Heterogeneous Graph Transformer](https://arxiv.org/abs/2003.01332) (WWW 2020) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/hetero/hgt_dblp.py)\\]\n- **[HEATConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.HEATonv.html)** from Mo *et al.*: [Heterogeneous Edge-Enhanced Graph Attention Network For Multi-Agent Trajectory Prediction](https://arxiv.org/abs/2106.07161) (CoRR 2021)\n- **[SSGConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.SSGConv.html)** from Zhu *et al.*: [Simple Spectral Graph Convolution](https://openreview.net/forum?id=CYO5T-YjWZV) (ICLR 2021)\n- **[FusedGATConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.FusedGATConv.html)** from Zhang *et al.*: [Understanding GNN Computational Graph: A Coordinated Computation, IO, and Memory Perspective](https://proceedings.mlsys.org/paper/2022/file/9a1158154dfa42caddbd0694a4e9bdc8-Paper.pdf) (MLSys 2022)\n- **[GPSConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.GPSConv.html)** from Rampášek *et al.*: [Recipe for a General, Powerful, Scalable Graph Transformer](https://arxiv.org/abs/2205.12454) (NeurIPS 2022) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/graph_gps.py)\\]\n\n</details>\n\n**Pooling layers:**\nGraph pooling layers combine the vectorial representations of a set of nodes in a graph (or a subgraph) into a single vector representation that summarizes its properties of nodes.\nIt is commonly applied to graph-level tasks, which require combining node features into a single graph representation.\n\n- **[Top-K Pooling](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.pool.TopKPooling.html)** from Gao and Ji: [Graph U-Nets](https://arxiv.org/abs/1905.05178) (ICML 2019), Cangea *et al.*: [Towards Sparse Hierarchical Graph Classifiers](https://arxiv.org/abs/1811.01287) (NeurIPS-W 2018) and Knyazev *et al.*: [Understanding Attention and Generalization in Graph Neural Networks](https://arxiv.org/abs/1905.02850) (ICLR-W 2019) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/proteins_topk_pool.py)\\]\n- **[DiffPool](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.dense.dense_diff_pool.html)** from Ying *et al.*: [Hierarchical Graph Representation Learning with Differentiable Pooling](https://arxiv.org/abs/1806.08804) (NeurIPS 2018) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/proteins_diff_pool.py)\\]\n\n<details>\n<summary><b>Expand to see all implemented pooling layers...</b></summary>\n\n- **[Attentional Aggregation](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.aggr.AttentionalAggregation.html)** from Li *et al.*: [Graph Matching Networks for Learning the Similarity of Graph Structured Objects](https://arxiv.org/abs/1904.12787) (ICML 2019) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/benchmark/kernel/global_attention.py)\\]\n- **[Set2Set](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.aggr.Set2Set.html)** from Vinyals *et al.*: [Order Matters: Sequence to Sequence for Sets](https://arxiv.org/abs/1511.06391) (ICLR 2016) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/benchmark/kernel/set2set.py)\\]\n- **[Sort Aggregation](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.aggr.SortAggregation.html)** from Zhang *et al.*: [An End-to-End Deep Learning Architecture for Graph Classification](https://www.cse.wustl.edu/~muhan/papers/AAAI_2018_DGCNN.pdf) (AAAI 2018) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/benchmark/kernel/sort_pool.py)\\]\n- **[MinCut Pooling](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.dense.dense_mincut_pool.html)** from Bianchi *et al.*: [Spectral Clustering with Graph Neural Networks for Graph Pooling](https://arxiv.org/abs/1907.00481) (ICML 2020) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/proteins_mincut_pool.py)\\]\n- **[DMoN Pooling](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.dense.DMoNPooling.html)** from Tsitsulin *et al.*: [Graph Clustering with Graph Neural Networks](https://arxiv.org/abs/2006.16904) (CoRR 2020) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/proteins_dmon_pool.py)\\]\n- **[Graclus Pooling](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.pool.graclus.html)** from Dhillon *et al.*: [Weighted Graph Cuts without Eigenvectors: A Multilevel Approach](http://www.cs.utexas.edu/users/inderjit/public_papers/multilevel_pami.pdf) (PAMI 2007) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/mnist_graclus.py)\\]\n- **[Voxel Grid Pooling](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.pool.voxel_grid.html)** from, *e.g.*, Simonovsky and Komodakis: [Dynamic Edge-Conditioned Filters in Convolutional Neural Networks on Graphs](https://arxiv.org/abs/1704.02901) (CVPR 2017) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/mnist_voxel_grid.py)\\]\n- **[SAG Pooling](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.pool.SAGPooling.html)** from Lee *et al.*: [Self-Attention Graph Pooling](https://arxiv.org/abs/1904.08082) (ICML 2019) and Knyazev *et al.*: [Understanding Attention and Generalization in Graph Neural Networks](https://arxiv.org/abs/1905.02850) (ICLR-W 2019) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/benchmark/kernel/sag_pool.py)\\]\n- **[Edge Pooling](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.pool.EdgePooling.html)** from Diehl *et al.*: [Towards Graph Pooling by Edge Contraction](https://graphreason.github.io/papers/17.pdf) (ICML-W 2019) and Diehl: [Edge Contraction Pooling for Graph Neural Networks](https://arxiv.org/abs/1905.10990) (CoRR 2019) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/benchmark/kernel/edge_pool.py)\\]\n- **[ASAPooling](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.pool.ASAPooling.html)** from Ranjan *et al.*: [ASAP: Adaptive Structure Aware Pooling for Learning Hierarchical Graph Representations](https://arxiv.org/abs/1911.07979) (AAAI 2020) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/benchmark/kernel/asap.py)\\]\n- **[PANPooling](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.pool.PANPooling.html)** from Ma *et al.*: [Path Integral Based Convolution and Pooling for Graph Neural Networks](https://arxiv.org/abs/2006.16811) (NeurIPS 2020)\n- **[MemPooling](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.pool.MemPooling.html)** from Khasahmadi *et al.*: [Memory-Based Graph Networks](https://arxiv.org/abs/2002.09518) (ICLR 2020) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/mem_pool.py)\\]\n- **[Graph Multiset Transformer](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.aggr.GraphMultisetTransformer.html)** from Baek *et al.*: [Accurate Learning of Graph Representations with Graph Multiset Pooling](https://arxiv.org/abs/2102.11533) (ICLR 2021) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/proteins_gmt.py)\\]\n- **[Equilibrium Aggregation](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.aggr.EquilibriumAggregation.html)** from Bartunov *et al.*: [](https://arxiv.org/abs/2202.12795) (UAI 2022) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/equilibrium_median.py)\\]\n\n</details>\n\n**GNN models:**\nOur supported GNN models incorporate multiple message passing layers, and users can directly use these pre-defined models to make predictions on graphs.\nUnlike simple stacking of GNN layers, these models could involve pre-processing, additional learnable parameters, skip connections, graph coarsening, etc.\n\n- **[SchNet](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.SchNet.html)** from Schütt *et al.*: [SchNet: A Continuous-filter Convolutional Neural Network for Modeling Quantum Interactions](https://arxiv.org/abs/1706.08566) (NIPS 2017) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/qm9_pretrained_schnet.py)\\]\n- **[DimeNet](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.DimeNet.html)** and **[DimeNetPlusPlus](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.DimeNetPlusPlus.html)** from Klicpera *et al.*: [Directional Message Passing for Molecular Graphs](https://arxiv.org/abs/2003.03123) (ICLR 2020) and [Fast and Uncertainty-Aware Directional Message Passing for Non-Equilibrium Molecules](https://arxiv.org/abs/2011.14115) (NeurIPS-W 2020) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/qm9_pretrained_dimenet.py)\\]\n- **[Node2Vec](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.Node2Vec.html)** from Grover and Leskovec: [node2vec: Scalable Feature Learning for Networks](https://arxiv.org/abs/1607.00653) (KDD 2016) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/node2vec.py)\\]\n- **[Deep Graph Infomax](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.DeepGraphInfomax.html)** from Veličković *et al.*: [Deep Graph Infomax](https://arxiv.org/abs/1809.10341) (ICLR 2019) \\[[**Example1**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/infomax_transductive.py), [**Example2**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/infomax_inductive.py)\\]\n- **Deep Multiplex Graph Infomax** from Park *et al.*: [Unsupervised Attributed Multiplex Network Embedding](https://arxiv.org/abs/1911.06750) (AAAI 2020) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/hetero/dmgi_unsup.py)\\]\n- **[Masked Label Prediction](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.MaskLabel.html)** from Shi *et al.*: [Masked Label Prediction: Unified Message Passing Model for Semi-Supervised Classification](https://arxiv.org/abs/2009.03509) (CoRR 2020) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/unimp_arxiv.py)\\]\n- **[PMLP](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.PMLP.html)** from Yang *et al.*: [Graph Neural Networks are Inherently Good Generalizers: Insights by Bridging GNNs and MLPs](https://arxiv.org/abs/2212.09034) (ICLR 2023)\n\n<details>\n<summary><b>Expand to see all implemented GNN models...</b></summary>\n\n- **[Jumping Knowledge](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.JumpingKnowledge.html)** from Xu *et al.*: [Representation Learning on Graphs with Jumping Knowledge Networks](https://arxiv.org/abs/1806.03536) (ICML 2018) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/benchmark/kernel/gin.py#L54-L106)\\]\n- A **[MetaLayer](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.MetaLayer.html)** for building any kind of graph network similar to the [TensorFlow Graph Nets library](https://github.com/deepmind/graph_nets) from Battaglia *et al.*: [Relational Inductive Biases, Deep Learning, and Graph Networks](https://arxiv.org/abs/1806.01261) (CoRR 2018)\n- **[MetaPath2Vec](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.MetaPath2Vec.html)** from Dong *et al.*: [metapath2vec: Scalable Representation Learning for Heterogeneous Networks](https://ericdongyx.github.io/papers/KDD17-dong-chawla-swami-metapath2vec.pdf) (KDD 2017) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/hetero/metapath2vec.py)\\]\n- All variants of **[Graph Autoencoders](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.GAE.html)** and **[Variational Autoencoders](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.VGAE.html)** from:\n  - [Variational Graph Auto-Encoders](https://arxiv.org/abs/1611.07308) from Kipf and Welling (NIPS-W 2016) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/autoencoder.py)\\]\n  - [Adversarially Regularized Graph Autoencoder for Graph Embedding](https://arxiv.org/abs/1802.04407) from Pan *et al.* (IJCAI 2018) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/argva_node_clustering.py)\\]\n  - [Simple and Effective Graph Autoencoders with One-Hop Linear Models](https://arxiv.org/abs/2001.07614) from Salha *et al.* (ECML 2020) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/autoencoder.py)\\]\n- **[SEAL](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/seal_link_pred.py)** from Zhang and Chen: [Link Prediction Based on Graph Neural Networks](https://arxiv.org/pdf/1802.09691.pdf) (NeurIPS 2018) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/seal_link_pred.py)\\]\n- **[RENet](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.RENet.html)** from Jin *et al.*: [Recurrent Event Network for Reasoning over Temporal Knowledge Graphs](https://arxiv.org/abs/1904.05530) (ICLR-W 2019) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/renet.py)\\]\n- **[GraphUNet](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.GraphUNet.html)** from Gao and Ji: [Graph U-Nets](https://arxiv.org/abs/1905.05178) (ICML 2019) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/graph_unet.py)\\]\n- **[AttentiveFP](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.AttentiveFP.html)** from Xiong *et al.*: [Pushing the Boundaries of Molecular Representation for Drug Discovery with the Graph Attention Mechanism](https://pubs.acs.org/doi/10.1021/acs.jmedchem.9b00959) (J. Med. Chem. 2020) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/attentive_fp.py)\\]\n- **[DeepGCN](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.DeepGCNLayer.html)** and the **[GENConv](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.GENConv.html)** from Li *et al.*: [DeepGCNs: Can GCNs Go as Deep as CNNs?](https://arxiv.org/abs/1904.03751) (ICCV 2019) and [DeeperGCN: All You Need to Train Deeper GCNs](https://arxiv.org/abs/2006.07739) (CoRR 2020) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/ogbn_proteins_deepgcn.py)\\]\n- **[RECT](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.RECT_L.html)** from Wang *et al.*: [Network Embedding with Completely-imbalanced Labels](https://ieeexplore.ieee.org/document/8979355) (TKDE 2020) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/rect.py)\\]\n- **[GNNExplainer](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.explain.algorithm.GNNExplainer.html)** from Ying *et al.*: [GNNExplainer: Generating Explanations for Graph Neural Networks](https://arxiv.org/abs/1903.03894) (NeurIPS 2019) \\[[**Example1**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/explain/gnn_explainer.py), [**Example2**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/explain/gnn_explainer_ba_shapes.py), [**Example3**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/explain/gnn_explainer_link_pred.py)\\]\n- **Graph-less Neural Networks** from Zhang *et al.*: [Graph-less Neural Networks: Teaching Old MLPs New Tricks via Distillation](https://arxiv.org/abs/2110.08727) (CoRR 2021) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/glnn.py)\\]\n- **[LINKX](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.LINKX.html)** from Lim *et al.*: [Large Scale Learning on Non-Homophilous Graphs:\n  New Benchmarks and Strong Simple Methods](https://arxiv.org/abs/2110.14446) (NeurIPS 2021) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/linkx.py)\\]\n- **[RevGNN](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.GroupAddRev.html)** from Li *et al.*: [Training Graph Neural with 1000 Layers](https://arxiv.org/abs/2106.07476) (ICML 2021) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/rev_gnn.py)\\]\n- **[TransE](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.kge.TransE.html)** from Bordes *et al.*: [Translating Embeddings for Modeling Multi-Relational Data](https://proceedings.neurips.cc/paper/2013/file/1cecc7a77928ca8133fa24680a88d2f9-Paper.pdf) (NIPS 2013) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/kge_fb15k_237.py)\\]\n- **[ComplEx](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.kge.ComplEx.html)** from Trouillon *et al.*: [Complex Embeddings for Simple Link Prediction](https://arxiv.org/abs/1606.06357) (ICML 2016) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/kge_fb15k_237.py)\\]\n- **[DistMult](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.kge.DistMult.html)** from Yang *et al.*: [Embedding Entities and Relations for Learning and Inference in Knowledge Bases](https://arxiv.org/abs/1412.6575) (ICLR 2015) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/kge_fb15k_237.py)\\]\n- **[RotatE](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.kge.RotatE.html)** from Sun *et al.*: [RotatE: Knowledge Graph Embedding by Relational Rotation in Complex Space](https://arxiv.org/abs/1902.10197) (ICLR 2019) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/kge_fb15k_237.py)\\]\n\n</details>\n\n**GNN operators and utilities:**\nPyG comes with a rich set of neural network operators that are commonly used in many GNN models.\nThey follow an extensible design: It is easy to apply these operators and graph utilities to existing GNN layers and models to further enhance model performance.\n\n- **[DropEdge](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.dropout_edge)** from Rong *et al.*: [DropEdge: Towards Deep Graph Convolutional Networks on Node Classification](https://openreview.net/forum?id=Hkx1qkrKPr) (ICLR 2020)\n- **[DropNode](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.dropout_node)**, **[MaskFeature](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.mask_feature)** and **[AddRandomEdge](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.add_random_edge)** from You *et al.*: [Graph Contrastive Learning with Augmentations](https://arxiv.org/abs/2010.13902) (NeurIPS 2020)\n- **[DropPath](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.dropout_path)** from Li *et al.*: [MaskGAE: Masked Graph Modeling Meets Graph Autoencoders](https://arxiv.org/abs/2205.10053) (arXiv 2022)\n- **[ShuffleNode](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.shuffle_node)** from Veličković *et al.*: [Deep Graph Infomax](https://arxiv.org/abs/1809.10341) (ICLR 2019)\n- **[GraphNorm](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.norm.GraphNorm.html)** from Cai *et al.*: [GraphNorm: A Principled Approach to Accelerating Graph Neural Network Training](https://proceedings.mlr.press/v139/cai21e.html) (ICML 2021)\n- **[GDC](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.transforms.GDC.html)** from Klicpera *et al.*: [Diffusion Improves Graph Learning](https://arxiv.org/abs/1911.05485) (NeurIPS 2019) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/gcn.py)\\]\n\n<details>\n<summary><b>Expand to see all implemented GNN operators and utilities...</b></summary>\n\n- **[GraphSizeNorm](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.norm.GraphSizeNorm.html)** from Dwivedi *et al.*: [Benchmarking Graph Neural Networks](https://arxiv.org/abs/2003.00982) (CoRR 2020)\n- **[PairNorm](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.norm.PairNorm.html)** from Zhao and Akoglu: [PairNorm: Tackling Oversmoothing in GNNs](https://arxiv.org/abs/1909.12223) (ICLR 2020)\n- **[MeanSubtractionNorm](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.norm.MeanSubtractionNorm.html)** from Yang *et al.*: [Revisiting \"Over-smoothing\" in Deep GCNs](https://arxiv.org/abs/2003.13663) (CoRR 2020)\n- **[DiffGroupNorm](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.norm.DiffGroupNorm.html)** from Zhou *et al.*: [Towards Deeper Graph Neural Networks with Differentiable Group Normalization](https://arxiv.org/abs/2006.06972) (NeurIPS 2020)\n- **[Tree Decomposition](https://pytorch-geometric.readthedocs.io/en/latest/modules/utils.html#torch_geometric.utils.tree_decomposition)** from Jin *et al.*: [Junction Tree Variational Autoencoder for Molecular Graph Generation](https://arxiv.org/abs/1802.04364) (ICML 2018)\n- **[TGN](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.TGNMemory.html)** from Rossi *et al.*: [Temporal Graph Networks for Deep Learning on Dynamic Graphs](https://arxiv.org/abs/2006.10637) (GRL+ 2020) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/tgn.py)\\]\n- **[Weisfeiler Lehman Operator](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.WLConv.html)** from Weisfeiler and Lehman: [A Reduction of a Graph to a Canonical Form and an Algebra Arising During this Reduction](https://www.iti.zcu.cz/wl2018/pdf/wl_paper_translation.pdf) (Nauchno-Technicheskaya Informatsia 1968) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/wl_kernel.py)\\]\n- **[Continuous Weisfeiler Lehman Operator](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.WLConvContinuous.html)** from Togninalli *et al.*: [Wasserstein Weisfeiler-Lehman Graph Kernels](https://arxiv.org/abs/1906.01277) (NeurIPS 2019)\n- **[Label Propagation](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.LabelPropagation.html)** from Zhu and Ghahramani: [Learning from Labeled and Unlabeled Data with Label Propagation](http://mlg.eng.cam.ac.uk/zoubin/papers/CMU-CALD-02-107.pdf) (CMU-CALD 2002) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/label_prop.py)\\]\n- **[Local Degree Profile](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.transforms.LocalDegreeProfile)** from Cai and Wang: [A Simple yet Effective Baseline for Non-attribute Graph Classification](https://arxiv.org/abs/1811.03508) (CoRR 2018)\n- **[CorrectAndSmooth](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.models.CorrectAndSmooth.html)** from Huang *et al.*: [Combining Label Propagation And Simple Models Out-performs Graph Neural Networks](https://arxiv.org/abs/2010.13993) (CoRR 2020) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/correct_and_smooth.py)\\]\n- **[Gini](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.functional.gini.html)** and **[BRO](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.functional.bro.html)** regularization from Henderson *et al.*: [Improving Molecular Graph Neural Network Explainability with Orthonormalization and Induced Sparsity](https://arxiv.org/abs/2105.04854) (ICML 2021)\n- **[RootedEgoNets](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.transforms.RootedEgoNets)** and **[RootedRWSubgraph](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.transforms.RootedRWSubgraph)** from Zhao *et al.*: [From Stars to Subgraphs: Uplifting Any GNN with Local Structure Awareness](https://arxiv.org/abs/2110.03753) (ICLR 2022)\n- **[FeaturePropagation](https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.transforms.FeaturePropagation)** from Rossi *et al.*: [On the Unreasonable Effectiveness of Feature Propagation in Learning on Graphs with Missing Node Features](https://arxiv.org/abs/2111.12128) (CoRR 2021)\n\n</details>\n\n**Scalable GNNs:**\nPyG supports the implementation of Graph Neural Networks that can scale to large-scale graphs.\nSuch application is challenging since the entire graph, its associated features and the GNN parameters cannot fit into GPU memory.\nMany state-of-the-art scalability approaches tackle this challenge by sampling neighborhoods for mini-batch training, graph clustering and partitioning, or by using simplified GNN models.\nThese approaches have been implemented in PyG, and can benefit from the above GNN layers, operators and models.\n\n- **[NeighborLoader](https://pytorch-geometric.readthedocs.io/en/latest/modules/loader.html#torch_geometric.loader.NeighborLoader)** from Hamilton *et al.*: [Inductive Representation Learning on Large Graphs](https://arxiv.org/abs/1706.02216) (NIPS 2017) \\[[**Example1**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/reddit.py), [**Example2**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/ogbn_products_sage.py), [**Example3**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/ogbn_products_gat.py), [**Example4**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/hetero/to_hetero_mag.py)\\]\n- **[ClusterGCN](https://pytorch-geometric.readthedocs.io/en/latest/modules/loader.html#torch_geometric.loader.ClusterLoader)** from Chiang *et al.*: [Cluster-GCN: An Efficient Algorithm for Training Deep and Large Graph Convolutional Networks](https://arxiv.org/abs/1905.07953) (KDD 2019) \\[[**Example1**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/cluster_gcn_reddit.py), [**Example2**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/cluster_gcn_ppi.py)\\]\n- **[GraphSAINT](https://pytorch-geometric.readthedocs.io/en/latest/modules/loader.html#torch_geometric.loader.GraphSAINTSampler)** from Zeng *et al.*: [GraphSAINT: Graph Sampling Based Inductive Learning Method](https://arxiv.org/abs/1907.04931) (ICLR 2020) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/graph_saint.py)\\]\n\n<details>\n<summary><b>Expand to see all implemented scalable GNNs...</b></summary>\n\n- **[ShaDow](https://pytorch-geometric.readthedocs.io/en/latest/modules/loader.html#torch_geometric.loader.ShaDowKHopSampler)** from Zeng *et al.*: [Decoupling the Depth and Scope of Graph Neural Networks](https://arxiv.org/abs/2201.07858) (NeurIPS 2021) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/shadow.py)\\]\n- **[SIGN](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.transforms.SIGN.html)** from Rossi *et al.*: [SIGN: Scalable Inception Graph Neural Networks](https://arxiv.org/abs/2004.11198) (CoRR 2020) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/sign.py)\\]\n- **[HGTLoader](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.loader.HGTLoader.html)** from Hu *et al.*: [Heterogeneous Graph Transformer](https://arxiv.org/abs/2003.01332) (WWW 2020) \\[[**Example**](https://github.com/pyg-team/pytorch_geometric/blob/master/examples/hetero/to_hetero_mag.py)\\]\n\n</details>\n\n## Installation\n\nPyG is available for Python 3.8 to Python 3.12.\n\n### Anaconda\n\nYou can now install PyG via [Anaconda](https://anaconda.org/pyg/pyg) for all major OS/PyTorch/CUDA combinations 🤗\nIf you have not yet installed PyTorch, install it via `conda` as described in the [official PyTorch documentation](https://pytorch.org/get-started/locally/).\nGiven that you have PyTorch installed (`>=1.8.0`), simply run\n\n```\nconda install pyg -c pyg\n```\n\n### PyPi\n\nFrom **PyG 2.3** onwards, you can install and use PyG **without any external library** required except for PyTorch.\nFor this, simply run\n\n```\npip install torch_geometric\n```\n\n### Additional Libraries\n\nIf you want to utilize the full set of features from PyG, there exists several additional libraries you may want to install:\n\n- **[`pyg-lib`](https://github.com/pyg-team/pyg-lib)**: Heterogeneous GNN operators and graph sampling routines\n- **[`torch-scatter`](https://github.com/rusty1s/pytorch_scatter)**: Accelerated and efficient sparse reductions\n- **[`torch-sparse`](https://github.com/rusty1s/pytorch_sparse)**: [`SparseTensor`](https://pytorch-geometric.readthedocs.io/en/latest/advanced/sparse_tensor.html) support\n- **[`torch-cluster`](https://github.com/rusty1s/pytorch_cluster)**: Graph clustering routines\n- **[`torch-spline-conv`](https://github.com/rusty1s/pytorch_spline_conv)**: [`SplineConv`](https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.SplineConv.html) support\n\nThese packages come with their own CPU and GPU kernel implementations based on the [PyTorch C++/CUDA/hip(ROCm) extension interface](https://github.com/pytorch/extension-cpp).\nFor a basic usage of PyG, these dependencies are **fully optional**.\nWe recommend to start with a minimal installation, and install additional dependencies once you start to actually need them.\n\nFor ease of installation of these extensions, we provide `pip` wheels for all major OS/PyTorch/CUDA combinations, see [here](https://data.pyg.org/whl).\n\n#### PyTorch 2.2\n\nTo install the binaries for PyTorch 2.2.0, simply run\n\n```\npip install pyg_lib torch_scatter torch_sparse torch_cluster torch_spline_conv -f https://data.pyg.org/whl/torch-2.2.0+${CUDA}.html\n```\n\nwhere `${CUDA}` should be replaced by either `cpu`, `cu118`, or `cu121` depending on your PyTorch installation.\n\n|             | `cpu` | `cu118` | `cu121` |\n| ----------- | ----- | ------- | ------- |\n| **Linux**   | ✅     | ✅       | ✅       |\n| **Windows** | ✅     | ✅       | ✅       |\n| **macOS**   | ✅     |         |         |\n\n#### PyTorch 2.1\n\nTo install the binaries for PyTorch 2.1.0, simply run\n\n```\npip install pyg_lib torch_scatter torch_sparse torch_cluster torch_spline_conv -f https://data.pyg.org/whl/torch-2.1.0+${CUDA}.html\n```\n\nwhere `${CUDA}` should be replaced by either `cpu`, `cu118`, or `cu121` depending on your PyTorch installation.\n\n|             | `cpu` | `cu118` | `cu121` |\n| ----------- | ----- | ------- | ------- |\n| **Linux**   | ✅     | ✅       | ✅       |\n| **Windows** | ✅     | ✅       | ✅       |\n| **macOS**   | ✅     |         |         |\n\n**Note:** Binaries of older versions are also provided for PyTorch 1.4.0, PyTorch 1.5.0, PyTorch 1.6.0, PyTorch 1.7.0/1.7.1, PyTorch 1.8.0/1.8.1, PyTorch 1.9.0, PyTorch 1.10.0/1.10.1/1.10.2, PyTorch 1.11.0, PyTorch 1.12.0/1.12.1, PyTorch 1.13.0/1.13.1, and PyTorch 2.0.0 (following the same procedure).\n**For older versions, you might need to explicitly specify the latest supported version number** or install via `pip install --no-index` in order to prevent a manual installation from source.\nYou can look up the latest supported version number [here](https://data.pyg.org/whl).\n\n### NVIDIA PyG Container\n\nNVIDIA provides a PyG docker container for effortlessly training and deploying GPU accelerated GNNs with PyG, see [here](https://catalog.ngc.nvidia.com/orgs/nvidia/containers/pyg).\n\n### Nightly and Master\n\nIn case you want to experiment with the latest PyG features which are not fully released yet, either install the **nightly version** of PyG via\n\n```\npip install pyg-nightly\n```\n\nor install PyG **from master** via\n\n```\npip install git+https://github.com/pyg-team/pytorch_geometric.git\n```\n\n### ROCm Wheels\n\nThe external [`pyg-rocm-build` repository](https://github.com/Looong01/pyg-rocm-build) provides wheels and detailed instructions on how to install PyG for ROCm.\nIf you have any questions about it, please open an issue [here](https://github.com/Looong01/pyg-rocm-build/issues).\n\n## Cite\n\nPlease cite [our paper](https://arxiv.org/abs/1903.02428) (and the respective papers of the methods used) if you use this code in your own work:\n\n```\n@inproceedings{Fey/Lenssen/2019,\n  title={Fast Graph Representation Learning with {PyTorch Geometric}},\n  author={Fey, Matthias and Lenssen, Jan E.},\n  booktitle={ICLR Workshop on Representation Learning on Graphs and Manifolds},\n  year={2019},\n}\n```\n\nFeel free to [email us](mailto:matthias.fey@tu-dortmund.de) if you wish your work to be listed in the [external resources](https://pytorch-geometric.readthedocs.io/en/latest/external/resources.html).\nIf you notice anything unexpected, please open an [issue](https://github.com/pyg-team/pytorch_geometric/issues) and let us know.\nIf you have any questions or are missing a specific feature, feel free [to discuss them with us](https://github.com/pyg-team/pytorch_geometric/discussions).\nWe are motivated to constantly make PyG even better.\n\n[contributing-image]: https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat\n[contributing-url]: https://github.com/pyg-team/pytorch_geometric/blob/master/.github/CONTRIBUTING.md\n[docs-image]: https://readthedocs.org/projects/pytorch-geometric/badge/?version=latest\n[docs-url]: https://pytorch-geometric.readthedocs.io/en/latest\n[linting-image]: https://github.com/pyg-team/pytorch_geometric/actions/workflows/linting.yml/badge.svg\n[linting-url]: https://github.com/pyg-team/pytorch_geometric/actions/workflows/linting.yml\n[pypi-image]: https://badge.fury.io/py/torch-geometric.svg\n[pypi-url]: https://pypi.python.org/pypi/torch-geometric\n[slack-image]: https://img.shields.io/badge/slack-pyg-brightgreen\n[slack-url]: https://data.pyg.org/slack.html\n[testing-image]: https://github.com/pyg-team/pytorch_geometric/actions/workflows/testing.yml/badge.svg\n[testing-url]: https://github.com/pyg-team/pytorch_geometric/actions/workflows/testing.yml\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"deep-learning, pytorch, geometric-deep-learning, graph-neural-networks, graph-convolutional-networks","license":null,"maintainer":null,"maintainer_email":null,"name":"torch-geometric","package_url":"https://pypi.org/project/torch-geometric/","platform":null,"project_url":"https://pypi.org/project/torch-geometric/","project_urls":{"changelog":"https://github.com/pyg-team/pytorch_geometric/blob/master/CHANGELOG.md","documentation":"https://pytorch-geometric.readthedocs.io","homepage":"https://pyg.org","repository":"https://github.com/pyg-team/pytorch_geometric.git"},"provides_extra":null,"release_url":"https://pypi.org/project/torch-geometric/2.5.3/","requires_dist":["tqdm","numpy","scipy","fsspec","jinja2","aiohttp","requests","pyparsing","scikit-learn","psutil>=5.8.0","protobuf<4.21; extra == \"benchmark\"","wandb; extra == \"benchmark\"","pandas; extra == \"benchmark\"","networkx; extra == \"benchmark\"","matplotlib; extra == \"benchmark\"","torch_geometric[test]; extra == \"dev\"","pre-commit; extra == \"dev\"","torch_geometric[graphgym,modelhub]; extra == \"full\"","ase; extra == \"full\"","h5py; extra == \"full\"","numba; extra == \"full\"","sympy; extra == \"full\"","pandas; extra == \"full\"","captum<0.7.0; extra == \"full\"","rdflib; extra == \"full\"","trimesh; extra == \"full\"","networkx; extra == \"full\"","graphviz; extra == \"full\"","tabulate; extra == \"full\"","matplotlib; extra == \"full\"","pynndescent; extra == \"full\"","torchmetrics; extra == \"full\"","scikit-image; extra == \"full\"","pytorch-memlab; extra == \"full\"","pgmpy; extra == \"full\"","opt_einsum; extra == \"full\"","statsmodels; extra == \"full\"","rdkit; extra == \"full\"","yacs; extra == \"graphgym\"","hydra-core; extra == \"graphgym\"","protobuf<4.21; extra == \"graphgym\"","pytorch-lightning; extra == \"graphgym\"","huggingface_hub; extra == \"modelhub\"","pytest; extra == \"test\"","pytest-cov; extra == \"test\"","onnx; extra == \"test\"","onnxruntime; extra == \"test\""],"requires_python":">=3.8","summary":"Graph Neural Network Library for PyTorch","version":"2.5.3","yanked":false,"yanked_reason":null},"last_serial":22841376,"releases":{"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"6ea070c2b2676436dff3c1e25461bbaa2559b49a2c5aec7210979768600b2021","md5":"201ffafe08a7d8cf3f5935cabdbe36f5","sha256":"49cbfbe3893560ab3e05ed330da3062a7ea72ba923d674d5b3854d9e3eef4927"},"downloads":-1,"filename":"torch_geometric-0.1.1.tar.gz","has_sig":false,"md5_digest":"201ffafe08a7d8cf3f5935cabdbe36f5","packagetype":"sdist","python_version":"source","requires_python":null,"size":31887,"upload_time":"2018-05-25T08:33:01","upload_time_iso_8601":"2018-05-25T08:33:01.654502Z","url":"https://files.pythonhosted.org/packages/6e/a0/70c2b2676436dff3c1e25461bbaa2559b49a2c5aec7210979768600b2021/torch_geometric-0.1.1.tar.gz","yanked":false,"yanked_reason":null}],"0.2.0":[{"comment_text":"","digests":{"blake2b_256":"ff21bf2b91e1f7ed3f2391cb7034629d1041926392eee3949d1bfa936fd77ff4","md5":"4a963921acabf3dcb83d78f9a53481ce","sha256":"be0e7b6e296c2cf74c5cfca79ad331fa4032feceeb3b619e25d4501ccc9379a8"},"downloads":-1,"filename":"torch_geometric-0.2.0.tar.gz","has_sig":false,"md5_digest":"4a963921acabf3dcb83d78f9a53481ce","packagetype":"sdist","python_version":"source","requires_python":null,"size":33185,"upload_time":"2018-06-05T11:27:07","upload_time_iso_8601":"2018-06-05T11:27:07.359223Z","url":"https://files.pythonhosted.org/packages/ff/21/bf2b91e1f7ed3f2391cb7034629d1041926392eee3949d1bfa936fd77ff4/torch_geometric-0.2.0.tar.gz","yanked":false,"yanked_reason":null}],"0.3.0":[{"comment_text":"","digests":{"blake2b_256":"136be2fd616b97e1b225f2d874017c4190c5587f51c652ece08736b9cfa28818","md5":"779285a4bf076044d41dd880058fb7d9","sha256":"6c1e2f9c83a2f827fc3222e54ec24b85f1ee442b548e4615b24d43d66cab03d9"},"downloads":-1,"filename":"torch_geometric-0.3.0.tar.gz","has_sig":false,"md5_digest":"779285a4bf076044d41dd880058fb7d9","packagetype":"sdist","python_version":"source","requires_python":null,"size":32907,"upload_time":"2018-08-13T13:17:16","upload_time_iso_8601":"2018-08-13T13:17:16.625223Z","url":"https://files.pythonhosted.org/packages/13/6b/e2fd616b97e1b225f2d874017c4190c5587f51c652ece08736b9cfa28818/torch_geometric-0.3.0.tar.gz","yanked":false,"yanked_reason":null}],"0.3.1":[{"comment_text":"","digests":{"blake2b_256":"3f71fe18c840fb70bea998656117c76d6d1b5dc9da56b1e003032081ff0099e3","md5":"8af242ee31371c662df23ff456df7724","sha256":"d50178dabe3008be93d2c53d68863f5f06d2ab815147e856f728fa0486bb31f3"},"downloads":-1,"filename":"torch_geometric-0.3.1.tar.gz","has_sig":false,"md5_digest":"8af242ee31371c662df23ff456df7724","packagetype":"sdist","python_version":"source","requires_python":null,"size":33304,"upload_time":"2018-10-20T03:58:44","upload_time_iso_8601":"2018-10-20T03:58:44.971738Z","url":"https://files.pythonhosted.org/packages/3f/71/fe18c840fb70bea998656117c76d6d1b5dc9da56b1e003032081ff0099e3/torch_geometric-0.3.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0":[{"comment_text":"","digests":{"blake2b_256":"18bd1956ae47c8f053c021beb95c8eb9af5c8c84635a85bd353d84a10d459471","md5":"8f24534ac1cdb81a9ea6802512ea4af9","sha256":"ee8874b0214b91f7bdad7b3b8eb238ba23f90fdb7d57c38e5e628131b9704fe9"},"downloads":-1,"filename":"torch_geometric-1.0.0.tar.gz","has_sig":false,"md5_digest":"8f24534ac1cdb81a9ea6802512ea4af9","packagetype":"sdist","python_version":"source","requires_python":null,"size":49512,"upload_time":"2018-12-18T12:43:42","upload_time_iso_8601":"2018-12-18T12:43:42.138857Z","url":"https://files.pythonhosted.org/packages/18/bd/1956ae47c8f053c021beb95c8eb9af5c8c84635a85bd353d84a10d459471/torch_geometric-1.0.0.tar.gz","yanked":false,"yanked_reason":null}],"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"1ec81793f19a542ddfefd56d920ee97f1577bb8b493a0e4a36487d94e0c44a0d","md5":"106ac5f729d615e5d2983d9d516dd8e1","sha256":"59299a4bc4f7c0d2471a9e793d1ff4856c21b4c7f00be47cc2f26753eb7051de"},"downloads":-1,"filename":"torch_geometric-1.0.1.tar.gz","has_sig":false,"md5_digest":"106ac5f729d615e5d2983d9d516dd8e1","packagetype":"sdist","python_version":"source","requires_python":null,"size":55297,"upload_time":"2019-01-15T19:03:58","upload_time_iso_8601":"2019-01-15T19:03:58.867714Z","url":"https://files.pythonhosted.org/packages/1e/c8/1793f19a542ddfefd56d920ee97f1577bb8b493a0e4a36487d94e0c44a0d/torch_geometric-1.0.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.2":[{"comment_text":"","digests":{"blake2b_256":"bf05482f1ffce2f86329e536bd9839ca2d975f857f683470021caf9264ccb2bc","md5":"01ded73605a8928a2f90a742248e505c","sha256":"a5087acf551b0c717f2f4b5ca90f5f3662814bb47161024556cc21e3ff81c917"},"downloads":-1,"filename":"torch_geometric-1.0.2.tar.gz","has_sig":false,"md5_digest":"01ded73605a8928a2f90a742248e505c","packagetype":"sdist","python_version":"source","requires_python":null,"size":56101,"upload_time":"2019-01-25T13:32:27","upload_time_iso_8601":"2019-01-25T13:32:27.845188Z","url":"https://files.pythonhosted.org/packages/bf/05/482f1ffce2f86329e536bd9839ca2d975f857f683470021caf9264ccb2bc/torch_geometric-1.0.2.tar.gz","yanked":false,"yanked_reason":null}],"1.0.3":[{"comment_text":"","digests":{"blake2b_256":"7217d7782cdec6b799a6ee54f7a82d5dbf189cb6ddf025e4da398c437b0b656d","md5":"d019cdafbe0810134866f5d069c2ba24","sha256":"ab0a8b852c9a711f2cc72a1fa8f7bc644e927b042b3e9b3d083af1a2e44f8df9"},"downloads":-1,"filename":"torch_geometric-1.0.3.tar.gz","has_sig":false,"md5_digest":"d019cdafbe0810134866f5d069c2ba24","packagetype":"sdist","python_version":"source","requires_python":null,"size":62888,"upload_time":"2019-03-07T17:14:26","upload_time_iso_8601":"2019-03-07T17:14:26.655965Z","url":"https://files.pythonhosted.org/packages/72/17/d7782cdec6b799a6ee54f7a82d5dbf189cb6ddf025e4da398c437b0b656d/torch_geometric-1.0.3.tar.gz","yanked":false,"yanked_reason":null}],"1.1.0":[{"comment_text":"","digests":{"blake2b_256":"064d06dd0d277bf82ff4e1888f73b4c522c35f017505acacc25ecc95befaac6e","md5":"b60f87ef01228937e6e00c29081a581a","sha256":"27269a59b0a3bfee1f8a3795b20a50f7784295e2bebd5ec0a6e70202b4a4ad4d"},"downloads":-1,"filename":"torch_geometric-1.1.0.tar.gz","has_sig":false,"md5_digest":"b60f87ef01228937e6e00c29081a581a","packagetype":"sdist","python_version":"source","requires_python":null,"size":69891,"upload_time":"2019-04-01T06:41:54","upload_time_iso_8601":"2019-04-01T06:41:54.487502Z","url":"https://files.pythonhosted.org/packages/06/4d/06dd0d277bf82ff4e1888f73b4c522c35f017505acacc25ecc95befaac6e/torch_geometric-1.1.0.tar.gz","yanked":false,"yanked_reason":null}],"1.1.1":[{"comment_text":"","digests":{"blake2b_256":"978392c622a8b628c3795a1e099ae9c88274b92ae495dec4b7845b1fc351f698","md5":"0dc0c2ed62fb122e9216a0deb7b1ed10","sha256":"bb7c03046a7e8962bf493acb2687057de26d3283f6b0b2711d6850fd8940222e"},"downloads":-1,"filename":"torch_geometric-1.1.1.tar.gz","has_sig":false,"md5_digest":"0dc0c2ed62fb122e9216a0deb7b1ed10","packagetype":"sdist","python_version":"source","requires_python":null,"size":70197,"upload_time":"2019-04-02T05:32:37","upload_time_iso_8601":"2019-04-02T05:32:37.937969Z","url":"https://files.pythonhosted.org/packages/97/83/92c622a8b628c3795a1e099ae9c88274b92ae495dec4b7845b1fc351f698/torch_geometric-1.1.1.tar.gz","yanked":false,"yanked_reason":null}],"1.1.2":[{"comment_text":"","digests":{"blake2b_256":"53366f51298096a46a83ac94be7313b95bb0a01949b46305a0852e6b310e34d3","md5":"b88fc23f2de0556f7787dc18a1571d23","sha256":"b516afeade47a008605513fe1ce7a0b506a94cf0542b43e2ce7b28e96080113c"},"downloads":-1,"filename":"torch_geometric-1.1.2.tar.gz","has_sig":false,"md5_digest":"b88fc23f2de0556f7787dc18a1571d23","packagetype":"sdist","python_version":"source","requires_python":null,"size":70758,"upload_time":"2019-04-05T05:27:06","upload_time_iso_8601":"2019-04-05T05:27:06.874506Z","url":"https://files.pythonhosted.org/packages/53/36/6f51298096a46a83ac94be7313b95bb0a01949b46305a0852e6b310e34d3/torch_geometric-1.1.2.tar.gz","yanked":false,"yanked_reason":null}],"1.2.0":[{"comment_text":"","digests":{"blake2b_256":"3d057ddd29efc3d36d5d5503c9dba07831944cef6c402ae267c30f01bd6c76f8","md5":"feefe5fa18a889479d19799b9ebadfc9","sha256":"9148e9a3f00115144d90e7d9e49c540d8b3bb47bd7ed3b41b5621961a14bae37"},"downloads":-1,"filename":"torch_geometric-1.2.0.tar.gz","has_sig":false,"md5_digest":"feefe5fa18a889479d19799b9ebadfc9","packagetype":"sdist","python_version":"source","requires_python":null,"size":84747,"upload_time":"2019-04-29T07:15:13","upload_time_iso_8601":"2019-04-29T07:15:13.738855Z","url":"https://files.pythonhosted.org/packages/3d/05/7ddd29efc3d36d5d5503c9dba07831944cef6c402ae267c30f01bd6c76f8/torch_geometric-1.2.0.tar.gz","yanked":false,"yanked_reason":null}],"1.2.1":[{"comment_text":"","digests":{"blake2b_256":"bf4226de98dd839eea5a720269c3bf02a552322b4297064e0cd4c8b33cf5f780","md5":"f017af8bb19a5751d12657c4f8fa310f","sha256":"161af9353e35c4b65464a19d9bbd7ada96b3f05e4f934cd847ab0ba30c982f3c"},"downloads":-1,"filename":"torch_geometric-1.2.1.tar.gz","has_sig":false,"md5_digest":"f017af8bb19a5751d12657c4f8fa310f","packagetype":"sdist","python_version":"source","requires_python":null,"size":95784,"upload_time":"2019-05-22T08:01:41","upload_time_iso_8601":"2019-05-22T08:01:41.597268Z","url":"https://files.pythonhosted.org/packages/bf/42/26de98dd839eea5a720269c3bf02a552322b4297064e0cd4c8b33cf5f780/torch_geometric-1.2.1.tar.gz","yanked":false,"yanked_reason":null}],"1.3.0":[{"comment_text":"","digests":{"blake2b_256":"ccb219eca95445f4657d6f164e3b57342f138780cca2b4a96a7f1a80707d778a","md5":"92b198d089177b34bcbabacf21a645c9","sha256":"a37f36e7277eb76c0198ac6af4841ddf3e21038e11022388b3b2483e0e80724e"},"downloads":-1,"filename":"torch_geometric-1.3.0.tar.gz","has_sig":false,"md5_digest":"92b198d089177b34bcbabacf21a645c9","packagetype":"sdist","python_version":"source","requires_python":null,"size":102990,"upload_time":"2019-06-29T14:18:52","upload_time_iso_8601":"2019-06-29T14:18:52.599646Z","url":"https://files.pythonhosted.org/packages/cc/b2/19eca95445f4657d6f164e3b57342f138780cca2b4a96a7f1a80707d778a/torch_geometric-1.3.0.tar.gz","yanked":false,"yanked_reason":null}],"1.3.1":[{"comment_text":"","digests":{"blake2b_256":"e8e24765baa17abf54c71ef5c8a9ad889c24c794b24b2a535ee84816780f2d39","md5":"c01ca487d69a1e6f0d5074982055ce9c","sha256":"910ed5013955e24bb8e2c336f0e3feae3e122ea3c9913102e5ed14b1efbdf89b"},"downloads":-1,"filename":"torch_geometric-1.3.1.tar.gz","has_sig":false,"md5_digest":"c01ca487d69a1e6f0d5074982055ce9c","packagetype":"sdist","python_version":"source","requires_python":null,"size":121927,"upload_time":"2019-08-29T07:39:26","upload_time_iso_8601":"2019-08-29T07:39:26.589801Z","url":"https://files.pythonhosted.org/packages/e8/e2/4765baa17abf54c71ef5c8a9ad889c24c794b24b2a535ee84816780f2d39/torch_geometric-1.3.1.tar.gz","yanked":false,"yanked_reason":null}],"1.3.2":[{"comment_text":"","digests":{"blake2b_256":"f3500a802f0bfa68058bf025d219ec6fbe806a5b891bba6702e28be7b83679fb","md5":"aaf75c7666c0b6154253964a1acef710","sha256":"4471cf36a7c01f2e8d8df4b69d3bf6d5f8aa182570484cd716b5920d693eb900"},"downloads":-1,"filename":"torch_geometric-1.3.2.tar.gz","has_sig":false,"md5_digest":"aaf75c7666c0b6154253964a1acef710","packagetype":"sdist","python_version":"source","requires_python":null,"size":126982,"upload_time":"2019-10-04T08:08:15","upload_time_iso_8601":"2019-10-04T08:08:15.899399Z","url":"https://files.pythonhosted.org/packages/f3/50/0a802f0bfa68058bf025d219ec6fbe806a5b891bba6702e28be7b83679fb/torch_geometric-1.3.2.tar.gz","yanked":false,"yanked_reason":null}],"1.4.1":[{"comment_text":"","digests":{"blake2b_256":"bf4155bb58f602b752fa5b4c5334a67acedb9982e778bef97b91bbe71eba9762","md5":"770e665a0ba22b3feb8260c8af80b830","sha256":"5c58e35f75b4e72fc2a50b3ba0372eec3ea7ab3b2ea2a3dac985a4a51e2bd808"},"downloads":-1,"filename":"torch_geometric-1.4.1.tar.gz","has_sig":false,"md5_digest":"770e665a0ba22b3feb8260c8af80b830","packagetype":"sdist","python_version":"source","requires_python":null,"size":138435,"upload_time":"2020-02-04T12:03:17","upload_time_iso_8601":"2020-02-04T12:03:17.147014Z","url":"https://files.pythonhosted.org/packages/bf/41/55bb58f602b752fa5b4c5334a67acedb9982e778bef97b91bbe71eba9762/torch_geometric-1.4.1.tar.gz","yanked":false,"yanked_reason":null}],"1.4.2":[{"comment_text":"","digests":{"blake2b_256":"13b30516919a575a1a0a862bab1decfcfb5285ced09e9ffae6442af3b5981301","md5":"313884973da0d9424ea04ac541bc1af0","sha256":"f5b758c8e5c779d3afeed885f2ec1cb95eac4d91e4c460991f6c96bafc2053cc"},"downloads":-1,"filename":"torch_geometric-1.4.2.tar.gz","has_sig":false,"md5_digest":"313884973da0d9424ea04ac541bc1af0","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":139715,"upload_time":"2020-02-18T15:27:22","upload_time_iso_8601":"2020-02-18T15:27:22.746674Z","url":"https://files.pythonhosted.org/packages/13/b3/0516919a575a1a0a862bab1decfcfb5285ced09e9ffae6442af3b5981301/torch_geometric-1.4.2.tar.gz","yanked":false,"yanked_reason":null}],"1.4.3":[{"comment_text":"","digests":{"blake2b_256":"4c358a65fc0b685d916f5f70199d6ad6f19bb002dc3a547a3fe5b68d60047f3b","md5":"f3761fc9e7b7c155110b717226de60ab","sha256":"51369ad28a632a135e7eadc649e39a714107a338ff00b8d5f62ddc9f8c3a2010"},"downloads":-1,"filename":"torch_geometric-1.4.3.tar.gz","has_sig":false,"md5_digest":"f3761fc9e7b7c155110b717226de60ab","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":129968,"upload_time":"2020-03-17T17:55:36","upload_time_iso_8601":"2020-03-17T17:55:36.978033Z","url":"https://files.pythonhosted.org/packages/4c/35/8a65fc0b685d916f5f70199d6ad6f19bb002dc3a547a3fe5b68d60047f3b/torch_geometric-1.4.3.tar.gz","yanked":false,"yanked_reason":null}],"1.5.0":[{"comment_text":"","digests":{"blake2b_256":"f5f226359fb7b50d54924ddd23778d4830b2653df9ffe72f85caad2b829dc778","md5":"5aad44218bfc2e40902d148a5180d8e8","sha256":"131359fb1539ce5c837e8eb2dce8f7abd75294ae0ce44963648cd8646cfde6e1"},"downloads":-1,"filename":"torch_geometric-1.5.0.tar.gz","has_sig":false,"md5_digest":"5aad44218bfc2e40902d148a5180d8e8","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":153593,"upload_time":"2020-05-25T05:31:33","upload_time_iso_8601":"2020-05-25T05:31:33.842784Z","url":"https://files.pythonhosted.org/packages/f5/f2/26359fb7b50d54924ddd23778d4830b2653df9ffe72f85caad2b829dc778/torch_geometric-1.5.0.tar.gz","yanked":false,"yanked_reason":null}],"1.6.0":[{"comment_text":"","digests":{"blake2b_256":"8e1893b190226d09958be96919fd50c55d28f83f1a1b9260a2b33499f9d86728","md5":"89ebcef5ce1f2278d5d5fcfb4c5cbfd9","sha256":"fbf43fe15421c9affc4fb361ba4db55cb9d3c64d0c29576bb58d332bf6d27fef"},"downloads":-1,"filename":"torch_geometric-1.6.0.tar.gz","has_sig":false,"md5_digest":"89ebcef5ce1f2278d5d5fcfb4c5cbfd9","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":172470,"upload_time":"2020-07-07T06:29:09","upload_time_iso_8601":"2020-07-07T06:29:09.457717Z","url":"https://files.pythonhosted.org/packages/8e/18/93b190226d09958be96919fd50c55d28f83f1a1b9260a2b33499f9d86728/torch_geometric-1.6.0.tar.gz","yanked":false,"yanked_reason":null}],"1.6.1":[{"comment_text":"","digests":{"blake2b_256":"88676c0bce6b6e6bc806e25d996e46a686e5a11254d89257983265a988bb02ee","md5":"c358b62a9646a3b64051e7c559ae1bb2","sha256":"158c153bd12408dd1ac0a543fc54bc7a7bd3ee6dcff83fd50031622aa4f9259d"},"downloads":-1,"filename":"torch_geometric-1.6.1.tar.gz","has_sig":false,"md5_digest":"c358b62a9646a3b64051e7c559ae1bb2","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":178381,"upload_time":"2020-08-05T13:22:52","upload_time_iso_8601":"2020-08-05T13:22:52.240450Z","url":"https://files.pythonhosted.org/packages/88/67/6c0bce6b6e6bc806e25d996e46a686e5a11254d89257983265a988bb02ee/torch_geometric-1.6.1.tar.gz","yanked":false,"yanked_reason":null}],"1.6.2":[{"comment_text":"","digests":{"blake2b_256":"f45519d28e5e1ddaa13efd59e56b19f895cf022f74f190a38e77cc68cf8ddf1f","md5":"084675f37700e83cc26f2705a91e65b7","sha256":"e3683ff12ba9806078f6fb3b989d24150b321567773ae1fe5d4b98985a5f9ae6"},"downloads":-1,"filename":"torch_geometric-1.6.2.tar.gz","has_sig":false,"md5_digest":"084675f37700e83cc26f2705a91e65b7","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":183750,"upload_time":"2020-11-27T07:18:41","upload_time_iso_8601":"2020-11-27T07:18:41.942082Z","url":"https://files.pythonhosted.org/packages/f4/55/19d28e5e1ddaa13efd59e56b19f895cf022f74f190a38e77cc68cf8ddf1f/torch_geometric-1.6.2.tar.gz","yanked":false,"yanked_reason":null}],"1.6.3":[{"comment_text":"","digests":{"blake2b_256":"595c3e95b76321fb14f24cc2ace392075717f645c4632e796ee0db1bc7d17231","md5":"28d67241d57f5e90958080219bf4256e","sha256":"347f693bebcc8a621eda4867dafab91c04db5f596d7ed7ecb89b242f8ab5c6a1"},"downloads":-1,"filename":"torch_geometric-1.6.3.tar.gz","has_sig":false,"md5_digest":"28d67241d57f5e90958080219bf4256e","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":186040,"upload_time":"2020-12-02T14:54:13","upload_time_iso_8601":"2020-12-02T14:54:13.423748Z","url":"https://files.pythonhosted.org/packages/59/5c/3e95b76321fb14f24cc2ace392075717f645c4632e796ee0db1bc7d17231/torch_geometric-1.6.3.tar.gz","yanked":false,"yanked_reason":null}],"1.7.0":[{"comment_text":"","digests":{"blake2b_256":"d99918781f60303b2f7097a13feed0b51e531364251f441bd83e38fac09944bd","md5":"3709936789d966e5bffc29230d709aed","sha256":"e9737bb8315ef5c4c0d459c7e7c25ed2cf3cebc46417e6c77a6542ebc9a8fea8"},"downloads":-1,"filename":"torch_geometric-1.7.0.tar.gz","has_sig":false,"md5_digest":"3709936789d966e5bffc29230d709aed","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":212921,"upload_time":"2021-04-09T08:45:48","upload_time_iso_8601":"2021-04-09T08:45:48.000454Z","url":"https://files.pythonhosted.org/packages/d9/99/18781f60303b2f7097a13feed0b51e531364251f441bd83e38fac09944bd/torch_geometric-1.7.0.tar.gz","yanked":false,"yanked_reason":null}],"1.7.1":[{"comment_text":"","digests":{"blake2b_256":"334b9f6bb94ccd93f3c9324cb6b7c5742dfaf3c3a5127604cf5195a1901d048c","md5":"13d38d1fa9c9707353edef857cb25594","sha256":"49d4ed41297cab686cb9517c7dabd462a5afb3848d5732ea3abeb247a3c53bbb"},"downloads":-1,"filename":"torch_geometric-1.7.1.tar.gz","has_sig":false,"md5_digest":"13d38d1fa9c9707353edef857cb25594","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":222100,"upload_time":"2021-06-17T08:22:41","upload_time_iso_8601":"2021-06-17T08:22:41.191554Z","url":"https://files.pythonhosted.org/packages/33/4b/9f6bb94ccd93f3c9324cb6b7c5742dfaf3c3a5127604cf5195a1901d048c/torch_geometric-1.7.1.tar.gz","yanked":false,"yanked_reason":null}],"1.7.2":[{"comment_text":"","digests":{"blake2b_256":"9161b3f23832120c404673f6759008312ffe8269524a29bf6116d9980e44517b","md5":"dc3275c71b26766e52dc5246e0d070d8","sha256":"a57b115cb3891c81d16960380e0bc4d842da2c96bea5ca019d6d139e6f026b31"},"downloads":-1,"filename":"torch_geometric-1.7.2.tar.gz","has_sig":false,"md5_digest":"dc3275c71b26766e52dc5246e0d070d8","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":222970,"upload_time":"2021-06-26T08:51:08","upload_time_iso_8601":"2021-06-26T08:51:08.091141Z","url":"https://files.pythonhosted.org/packages/91/61/b3f23832120c404673f6759008312ffe8269524a29bf6116d9980e44517b/torch_geometric-1.7.2.tar.gz","yanked":false,"yanked_reason":null}],"2.0.0":[{"comment_text":"","digests":{"blake2b_256":"61f0fe64bbdf8662d29ef3c5dd673e8689d4494f506aaa3b556fa719f45b72b0","md5":"94449606e6d373a361f43d91cdc19ef9","sha256":"ccd03645467c28c2e58fce7512c04c53df19d2d01b73e4731a16283f06f7beef"},"downloads":-1,"filename":"torch_geometric-2.0.0.tar.gz","has_sig":false,"md5_digest":"94449606e6d373a361f43d91cdc19ef9","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":308201,"upload_time":"2021-09-13T07:42:22","upload_time_iso_8601":"2021-09-13T07:42:22.945074Z","url":"https://files.pythonhosted.org/packages/61/f0/fe64bbdf8662d29ef3c5dd673e8689d4494f506aaa3b556fa719f45b72b0/torch_geometric-2.0.0.tar.gz","yanked":false,"yanked_reason":null}],"2.0.1":[{"comment_text":"","digests":{"blake2b_256":"858dab9c9e8b0497ee63edee1d49e1b6a991b89829358f832be239e08ae9d53d","md5":"a4734f1669bfaeeb952188331db965aa","sha256":"6ec91a407ca95959c1ca2009f6702983540ccafabc7f2553d56755ff8b393f4f"},"downloads":-1,"filename":"torch_geometric-2.0.1.tar.gz","has_sig":false,"md5_digest":"a4734f1669bfaeeb952188331db965aa","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":308801,"upload_time":"2021-09-16T07:25:18","upload_time_iso_8601":"2021-09-16T07:25:18.878434Z","url":"https://files.pythonhosted.org/packages/85/8d/ab9c9e8b0497ee63edee1d49e1b6a991b89829358f832be239e08ae9d53d/torch_geometric-2.0.1.tar.gz","yanked":false,"yanked_reason":null}],"2.0.2":[{"comment_text":"","digests":{"blake2b_256":"0552b0bf572b72fb3fd0b57eabd3c46f25d128579c586dfbe25cc4f9d4163306","md5":"007afb0e3c9070d6507a4326726030cc","sha256":"9f5e7fbf920dc65cad28b91f923252f54d1f1490aeb4a3ff2bec5846f429ed44"},"downloads":-1,"filename":"torch_geometric-2.0.2.tar.gz","has_sig":false,"md5_digest":"007afb0e3c9070d6507a4326726030cc","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":325559,"upload_time":"2021-10-26T12:42:36","upload_time_iso_8601":"2021-10-26T12:42:36.587521Z","url":"https://files.pythonhosted.org/packages/05/52/b0bf572b72fb3fd0b57eabd3c46f25d128579c586dfbe25cc4f9d4163306/torch_geometric-2.0.2.tar.gz","yanked":false,"yanked_reason":null}],"2.0.3":[{"comment_text":"","digests":{"blake2b_256":"c6ae4a35b0e116252411ae8d3729f238591df64773277dca3405f9317a032da3","md5":"3d763bb2beba92702e25a3fe193b310f","sha256":"59c41993a0f6cc0e29efa6ca6274cc97bd6557e54bf7d3d38213933f821701c6"},"downloads":-1,"filename":"torch_geometric-2.0.3.tar.gz","has_sig":false,"md5_digest":"3d763bb2beba92702e25a3fe193b310f","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":370423,"upload_time":"2021-12-22T06:52:13","upload_time_iso_8601":"2021-12-22T06:52:13.623232Z","url":"https://files.pythonhosted.org/packages/c6/ae/4a35b0e116252411ae8d3729f238591df64773277dca3405f9317a032da3/torch_geometric-2.0.3.tar.gz","yanked":false,"yanked_reason":null}],"2.0.4":[{"comment_text":"","digests":{"blake2b_256":"9402e33ded43d21323415fa790cdc7d43cfee091b771a26089264f0fa1318583","md5":"58652a46eb358f062a672392c8dbb4a1","sha256":"d64e4c7486fcf0c7fa82f0acbf5dd52035855469708bf89f8bc7fc607671c8b7"},"downloads":-1,"filename":"torch_geometric-2.0.4.tar.gz","has_sig":false,"md5_digest":"58652a46eb358f062a672392c8dbb4a1","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":407534,"upload_time":"2022-03-12T16:46:16","upload_time_iso_8601":"2022-03-12T16:46:16.132882Z","url":"https://files.pythonhosted.org/packages/94/02/e33ded43d21323415fa790cdc7d43cfee091b771a26089264f0fa1318583/torch_geometric-2.0.4.tar.gz","yanked":false,"yanked_reason":null}],"2.1.0":[{"comment_text":"","digests":{"blake2b_256":"018269a09acb03e26202b7a0a2f65359e35e2d359a143f0dc4391504e0c0260c","md5":"d1a1563f7cfaa16520db01805b083666","sha256":"72653deca925885e4d613eb5c72268bb9710325d9c717516922499fbe1197079"},"downloads":-1,"filename":"torch_geometric-2.1.0.tar.gz","has_sig":false,"md5_digest":"d1a1563f7cfaa16520db01805b083666","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":467470,"upload_time":"2022-08-17T10:33:49","upload_time_iso_8601":"2022-08-17T10:33:49.034670Z","url":"https://files.pythonhosted.org/packages/01/82/69a09acb03e26202b7a0a2f65359e35e2d359a143f0dc4391504e0c0260c/torch_geometric-2.1.0.tar.gz","yanked":true,"yanked_reason":"Missing ninja templates"}],"2.1.0.post1":[{"comment_text":"","digests":{"blake2b_256":"bde33913bc65cb23db1dcc5a69a87f53206ebcdfebc28973535a4a64a0cb97cd","md5":"13683dc36caa989b8b92539cbd40a2f5","sha256":"32347402076ccf60fa50312825178f1e3e5ce5e7b3b3a8b2729ac699da24525d"},"downloads":-1,"filename":"torch_geometric-2.1.0.post1.tar.gz","has_sig":false,"md5_digest":"13683dc36caa989b8b92539cbd40a2f5","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":467029,"upload_time":"2022-08-20T06:51:04","upload_time_iso_8601":"2022-08-20T06:51:04.752390Z","url":"https://files.pythonhosted.org/packages/bd/e3/3913bc65cb23db1dcc5a69a87f53206ebcdfebc28973535a4a64a0cb97cd/torch_geometric-2.1.0.post1.tar.gz","yanked":false,"yanked_reason":null}],"2.2.0":[{"comment_text":"","digests":{"blake2b_256":"de29dbefbb2b1349638bc9ec5a632d770e8e7fefc2455b8911d675b2ca82d9e1","md5":"6ce83ac27f5b31fc6627e5676731c422","sha256":"fdb282451fc33270e8e0b81d9aec7b70590363227dab0b1a7cb50a91d7b98e1d"},"downloads":-1,"filename":"torch_geometric-2.2.0.tar.gz","has_sig":false,"md5_digest":"6ce83ac27f5b31fc6627e5676731c422","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":564999,"upload_time":"2022-12-01T06:47:53","upload_time_iso_8601":"2022-12-01T06:47:53.488664Z","url":"https://files.pythonhosted.org/packages/de/29/dbefbb2b1349638bc9ec5a632d770e8e7fefc2455b8911d675b2ca82d9e1/torch_geometric-2.2.0.tar.gz","yanked":false,"yanked_reason":null}],"2.3.0":[{"comment_text":"","digests":{"blake2b_256":"43b5be9795db7756e6c1fa2606c8145ec637552487e72c6428ed0b231f8bcbd3","md5":"491cbc30725d802ab28bb2d8cf7c2309","sha256":"4b44965d1d1f12ec2656d896614c9e8de11c096c5ff0dc7661b54b498fa3f766"},"downloads":-1,"filename":"torch_geometric-2.3.0.tar.gz","has_sig":false,"md5_digest":"491cbc30725d802ab28bb2d8cf7c2309","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":616191,"upload_time":"2023-03-23T06:13:10","upload_time_iso_8601":"2023-03-23T06:13:10.646263Z","url":"https://files.pythonhosted.org/packages/43/b5/be9795db7756e6c1fa2606c8145ec637552487e72c6428ed0b231f8bcbd3/torch_geometric-2.3.0.tar.gz","yanked":false,"yanked_reason":null}],"2.3.1":[{"comment_text":"","digests":{"blake2b_256":"06a59f5af849c4185da5ea55f70ef17e23f93355cd4e989d82cfc8ba2d8747af","md5":"df00c862e4a47271e8021b6a9de30b2b","sha256":"454fd0bbc128a17a4b9d15010ba9f66d48ec8cd7277991b888a7770263fa125d"},"downloads":-1,"filename":"torch_geometric-2.3.1.tar.gz","has_sig":false,"md5_digest":"df00c862e4a47271e8021b6a9de30b2b","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":661639,"upload_time":"2023-04-27T10:12:44","upload_time_iso_8601":"2023-04-27T10:12:44.153460Z","url":"https://files.pythonhosted.org/packages/06/a5/9f5af849c4185da5ea55f70ef17e23f93355cd4e989d82cfc8ba2d8747af/torch_geometric-2.3.1.tar.gz","yanked":false,"yanked_reason":null}],"2.4.0":[{"comment_text":"","digests":{"blake2b_256":"654e6f9a75548a93fedcd4514ae2de9bee1e91bade6b73252b4da32f0e42ac52","md5":"e290fce1b0f7962f9864fb2deed0e2f0","sha256":"9d8eb5eec44382f4072aa5e835450f144e9edb9d164627e532e311880b6bdad0"},"downloads":-1,"filename":"torch_geometric-2.4.0-py3-none-any.whl","has_sig":false,"md5_digest":"e290fce1b0f7962f9864fb2deed0e2f0","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":1033784,"upload_time":"2023-10-12T08:27:10","upload_time_iso_8601":"2023-10-12T08:27:10.546518Z","url":"https://files.pythonhosted.org/packages/65/4e/6f9a75548a93fedcd4514ae2de9bee1e91bade6b73252b4da32f0e42ac52/torch_geometric-2.4.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e66ea596e2ddecc3b13a0d576495369a30309fb54c74fadf0bbca645bfbcaa2f","md5":"9f67208a7758675d737db8b5bc258b23","sha256":"343c6906d0678f16553c2d02b7267d0ec77eafb5b44324070ebcf7da8a934557"},"downloads":-1,"filename":"torch_geometric-2.4.0.tar.gz","has_sig":false,"md5_digest":"9f67208a7758675d737db8b5bc258b23","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":689471,"upload_time":"2023-10-12T08:27:13","upload_time_iso_8601":"2023-10-12T08:27:13.335953Z","url":"https://files.pythonhosted.org/packages/e6/6e/a596e2ddecc3b13a0d576495369a30309fb54c74fadf0bbca645bfbcaa2f/torch_geometric-2.4.0.tar.gz","yanked":false,"yanked_reason":null}],"2.5.0":[{"comment_text":"","digests":{"blake2b_256":"72337bb7269fc46f40b77de035c285fbb21f8943b7fba9c69e6857e5a4ef9f57","md5":"8428d6a830c5444fa107c005dc14be77","sha256":"9322fef81189d870b08b5a8b44957c768c9e0ba431a81e6bd0d7cb39fcb87de8"},"downloads":-1,"filename":"torch_geometric-2.5.0-py3-none-any.whl","has_sig":false,"md5_digest":"8428d6a830c5444fa107c005dc14be77","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":1097470,"upload_time":"2024-02-16T07:13:42","upload_time_iso_8601":"2024-02-16T07:13:42.065641Z","url":"https://files.pythonhosted.org/packages/72/33/7bb7269fc46f40b77de035c285fbb21f8943b7fba9c69e6857e5a4ef9f57/torch_geometric-2.5.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"018f82abc47a9b37d3a1611a3d0532f096de550a037fb92f659e4eae4ac9cd31","md5":"1aec9d7bd945ce204d26b10ff8e5be8a","sha256":"f4f4a57fd885c74e982d570df3a259ffff5adbb4ad7a3a95aabf5ace5fa7a240"},"downloads":-1,"filename":"torch_geometric-2.5.0.tar.gz","has_sig":false,"md5_digest":"1aec9d7bd945ce204d26b10ff8e5be8a","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":740285,"upload_time":"2024-02-16T07:13:47","upload_time_iso_8601":"2024-02-16T07:13:47.340086Z","url":"https://files.pythonhosted.org/packages/01/8f/82abc47a9b37d3a1611a3d0532f096de550a037fb92f659e4eae4ac9cd31/torch_geometric-2.5.0.tar.gz","yanked":false,"yanked_reason":null}],"2.5.1":[{"comment_text":"","digests":{"blake2b_256":"c6521230fbcdfa27a75211b0e6d40feade0bceb793ec57e5cbd5ecf460af2652","md5":"4d8085c8fbbae64f6c7f1c640b53fea3","sha256":"8dcdc67a7541c1fd3d6939efa4b302029cb30301fea7bd5b4a240f95a85a4810"},"downloads":-1,"filename":"torch_geometric-2.5.1-py3-none-any.whl","has_sig":false,"md5_digest":"4d8085c8fbbae64f6c7f1c640b53fea3","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":1097606,"upload_time":"2024-03-12T14:10:08","upload_time_iso_8601":"2024-03-12T14:10:08.345716Z","url":"https://files.pythonhosted.org/packages/c6/52/1230fbcdfa27a75211b0e6d40feade0bceb793ec57e5cbd5ecf460af2652/torch_geometric-2.5.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3c57af9c8766f8412246c3dbf2a11e2391c71d15825cb964d0a7ccc540521b6d","md5":"7e61f16e0ab2fbe2cf0f13cd3d84730e","sha256":"ed01119f9af58f7d02d53b8380f9538b04e43912c351395d1241076b45698832"},"downloads":-1,"filename":"torch_geometric-2.5.1.tar.gz","has_sig":false,"md5_digest":"7e61f16e0ab2fbe2cf0f13cd3d84730e","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":740838,"upload_time":"2024-03-12T14:10:11","upload_time_iso_8601":"2024-03-12T14:10:11.486901Z","url":"https://files.pythonhosted.org/packages/3c/57/af9c8766f8412246c3dbf2a11e2391c71d15825cb964d0a7ccc540521b6d/torch_geometric-2.5.1.tar.gz","yanked":false,"yanked_reason":null}],"2.5.2":[{"comment_text":"","digests":{"blake2b_256":"3b2e739fbb4dcda94f2861b28145e490cd5148b3b412dabff71ae24fd1bb95b8","md5":"0484a8017bfe53c18bc5e1e8263b3245","sha256":"4d0ee1d4f22ef6008dac4eaae38a7a7c3cd5956837280312c1e99f39340d21ba"},"downloads":-1,"filename":"torch_geometric-2.5.2-py3-none-any.whl","has_sig":false,"md5_digest":"0484a8017bfe53c18bc5e1e8263b3245","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":1097600,"upload_time":"2024-03-20T18:32:11","upload_time_iso_8601":"2024-03-20T18:32:11.649330Z","url":"https://files.pythonhosted.org/packages/3b/2e/739fbb4dcda94f2861b28145e490cd5148b3b412dabff71ae24fd1bb95b8/torch_geometric-2.5.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"2b52e6d298d328858aaebf91ca78d81195e3ccaa99ba3b33b0ffc0af5ec0c86d","md5":"362e2bc020995971b6b42abc1cd43a4e","sha256":"92059e98cf0334f264606c013df838d4411f461c3871e6b64723b5c40f6dec59"},"downloads":-1,"filename":"torch_geometric-2.5.2.tar.gz","has_sig":false,"md5_digest":"362e2bc020995971b6b42abc1cd43a4e","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":740864,"upload_time":"2024-03-20T18:32:15","upload_time_iso_8601":"2024-03-20T18:32:15.560576Z","url":"https://files.pythonhosted.org/packages/2b/52/e6d298d328858aaebf91ca78d81195e3ccaa99ba3b33b0ffc0af5ec0c86d/torch_geometric-2.5.2.tar.gz","yanked":false,"yanked_reason":null}],"2.5.3":[{"comment_text":"","digests":{"blake2b_256":"97f066ad3a5263aa16efb534aaf4e7da23ffc28c84efbbd720b0c5ec174f6242","md5":"0b52052b2aa2b1017a24b36ecfc75e70","sha256":"8277abfc12600b0e8047e0c3ea2d55cc43f08c1448e73e924de827c15d0b5f85"},"downloads":-1,"filename":"torch_geometric-2.5.3-py3-none-any.whl","has_sig":false,"md5_digest":"0b52052b2aa2b1017a24b36ecfc75e70","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":1097714,"upload_time":"2024-04-19T11:59:51","upload_time_iso_8601":"2024-04-19T11:59:51.422548Z","url":"https://files.pythonhosted.org/packages/97/f0/66ad3a5263aa16efb534aaf4e7da23ffc28c84efbbd720b0c5ec174f6242/torch_geometric-2.5.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"7c1bc79538f5c7160e927e3e4089114ec10af6447b1bdcc83ec63016c7cbbd74","md5":"e6d44c3512e3d044595935268c91bba1","sha256":"ad0761650c8fa56cdc46ee61c564fd4995f07f079965fe732b3a76d109fd3edc"},"downloads":-1,"filename":"torch_geometric-2.5.3.tar.gz","has_sig":false,"md5_digest":"e6d44c3512e3d044595935268c91bba1","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":741267,"upload_time":"2024-04-19T11:59:56","upload_time_iso_8601":"2024-04-19T11:59:56.754957Z","url":"https://files.pythonhosted.org/packages/7c/1b/c79538f5c7160e927e3e4089114ec10af6447b1bdcc83ec63016c7cbbd74/torch_geometric-2.5.3.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"97f066ad3a5263aa16efb534aaf4e7da23ffc28c84efbbd720b0c5ec174f6242","md5":"0b52052b2aa2b1017a24b36ecfc75e70","sha256":"8277abfc12600b0e8047e0c3ea2d55cc43f08c1448e73e924de827c15d0b5f85"},"downloads":-1,"filename":"torch_geometric-2.5.3-py3-none-any.whl","has_sig":false,"md5_digest":"0b52052b2aa2b1017a24b36ecfc75e70","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":1097714,"upload_time":"2024-04-19T11:59:51","upload_time_iso_8601":"2024-04-19T11:59:51.422548Z","url":"https://files.pythonhosted.org/packages/97/f0/66ad3a5263aa16efb534aaf4e7da23ffc28c84efbbd720b0c5ec174f6242/torch_geometric-2.5.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"7c1bc79538f5c7160e927e3e4089114ec10af6447b1bdcc83ec63016c7cbbd74","md5":"e6d44c3512e3d044595935268c91bba1","sha256":"ad0761650c8fa56cdc46ee61c564fd4995f07f079965fe732b3a76d109fd3edc"},"downloads":-1,"filename":"torch_geometric-2.5.3.tar.gz","has_sig":false,"md5_digest":"e6d44c3512e3d044595935268c91bba1","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":741267,"upload_time":"2024-04-19T11:59:56","upload_time_iso_8601":"2024-04-19T11:59:56.754957Z","url":"https://files.pythonhosted.org/packages/7c/1b/c79538f5c7160e927e3e4089114ec10af6447b1bdcc83ec63016c7cbbd74/torch_geometric-2.5.3.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
