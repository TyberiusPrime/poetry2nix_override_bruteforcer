{"info":{"author":"Chris Guidry","author_email":"chris@theguidrys.us","bugtrack_url":null,"classifiers":["License :: OSI Approved :: MIT License","Programming Language :: Python :: 3"],"description":"# opentelemetry-resourcedetector-kubernetes\n\nAn OpenTelemetry package to populates Resource attributes for Kubernetes pods.\n\n## Usage\n\n```python\nfrom opentelemetry.sdk.resources import get_aggregated_resources\nfrom opentelemetry_resourcedetector_kubernetes import KubernetesResourceDetector\n\n...\n\nresource = get_aggregated_resources([\n    KubernetesResourceDetector(),\n    SomeOtherResourceDetector()\n])\n\n... pass the returned `resource` to a TracerProvder, for example ...\n```\n\nThe `KubernetesResourceDetector` is able to detect the basic identifying information\nfor a `Pod`, returning as `Resource` with these attributes populated:\n\n* `container.runtime` - always the string `\"kubernetes\"`\n* `container.id` - the unique ID of the container (a string of hexadecimal characters)\n* `k8s.pod.uid` - the UUID of the pod where your container and code is running\n\nThis resource detector is the base class for the others in this package, and so you\nwill always get these three attributes in your traces, using any of the more detailed\ndetectors below.\n\n## Detecting more attributes with The \"Downward API\"\n\nThe Kubernetes \"Downward API\" is a safe way to to pass Kubernetes metadata about your\npod to itself, as either:\n\n* [environment variables](https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/),\n  implemented by `KubernetesDownwardAPIEnvironmentResourceDetector`, or\n* [files in a volume mounted to your pod](https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/),\n  implemented by `KubernetesDownwardAPIVolumeResourceDetector`\n\nFor either of these methods to work, you will need to add the appropriate configuration\nto your Kubernetes manifests, and you'll configure the detector accordingly.\n\nThe `opentelemetry_resourcedetector_kubernetes` classes using the Downward API will only\ndetect and populate attributes from the [standard OpenTelemetry Kubernetes Resource Attribute](https://github.com/open-telemetry/opentelemetry-python/blob/cdab6e174a1b9afc68aaf57ca04fc972a14281bc/opentelemetry-semantic-conventions/src/opentelemetry/semconv/resource/__init__.py#L239-L337)\nthat you choose to provide by configuring them in your manifests.  These detectors will\nonly report `k8s.*` and `container.*` OpenTelemetry attributes, and are not intended to\nbe a general-purpose collection mechanism for other types of attributes.\n\nThe Downward API only supports a\n[subset of all the possible attributes](https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/#capabilities-of-the-downward-api) you could\nprovide.  Depending on your needs, you can also provide hard-coded environment variables\nfollowing the same naming conventino in your Kubernetes manifest, or mix the environment\nand volume approaches to paint a more complete picture.\n\n### KubernetesDownwardAPIEnvironmentResourceDetector\n\nFor an example of using environment variables, you can pass a Pod's namespace and name:\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  namespace: cool-app\n  name: example-pod\nspec:\n  containers:\n  - name: a-container\n    image: my-image:1.0.0\n    command: [\"run-my-cool-app\"]\n    env:\n    - name: OTEL_RD_K8S_NAMESPACE_NAME\n      valueFrom:\n        fieldRef:\n          fieldPath: metadata.namespace\n    - name: OTEL_RD_K8S_POD_NAME\n      valueFrom:\n        fieldRef:\n          fieldPath: metadata.name\n```\n\nThen, your running pod will see these environment variables populated:\n\n```bash\nOTEL_RD_K8S_NAMESPACE_NAME=cool-app\nOTEL_RD_K8S_POD_NAME=example-pod\n```\n\nWhen configuring your telemetry, you'll establish a \"contract\" for the names of the\nenvironment variables, indicating that they will be prefixed with `OTEL_RD`.  The\nprefix is up to you, but the default is `OTEL_RD`.  From there, the resource detector\nwill look for each environment variables prefixed with `OTEL_RD_`, and if the rest of\nits name matches a\n[standard OpenTelemetry Kubernetes Resource Attribute](https://github.com/open-telemetry/opentelemetry-python/blob/cdab6e174a1b9afc68aaf57ca04fc972a14281bc/opentelemetry-semantic-conventions/src/opentelemetry/semconv/resource/__init__.py#L239-L337),\nit will be used during resource detection.\n\n```python\nfrom opentelemetry.sdk.resources import get_aggregated_resources\nfrom opentelemetry_resourcedetector_kubernetes import KubernetesDownwardAPIEnvironmentResourceDetector\n\n...\n\nresource = get_aggregated_resources([\n    KubernetesDownwardAPIEnvironmentResourceDetector(prefix='OTEL_RD'),\n    SomeOtherResourceDetector()\n])\n\n... pass the returned `resource` to a TracerProvder, for example ...\n```\n\nIn this example, the `Resource` for all traces would include the attributes:\n\n```\ncontainer.runtime = \"kubernetes\"\nk8s.pod.uid = \"...the UUID of the pod...\"\ncontainer.id = \"...the id of the container...\"\n\nk8s.namespace.name = \"cool-app\"\nk8s.pod.name = \"example-pod\"\n```\n\n### KubernetesDownwardAPIVolumeResourceDetector\n\nFor an example of using a Downward API volume, you can pass a Pod's namespace and name:\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  namespace: cool-app\n  name: example-pod\nspec:\n  containers:\n  - name: a-container\n    image: my-image:1.0.0\n    command: [\"run-my-cool-app\"]\n    volumeMounts:  # this is at the *Container* level\n    - name: otelrd\n      mountPath: /etc/otelrd\n  volumes:  # this is at the *Pod* level\n    - name: otelrd\n      downwardAPI:\n        items:\n        - path: k8s.namespace.name\n          fieldRef:\n            fieldPath: metadata.namespace\n        - path: k8s.pod.name\n          fieldRef:\n            fieldPath: metadata.name\n```\n\nThen, your running pod will see these environment variables populated:\n\n```bash\n$ cat /etc/otelrd/k8s.namespace.name\ncool-app\n$ cat /etc/otelrd/k8s.pod.name\nexample-pod\n```\n\nWhen configuring your telemetry, you'll establish a \"contract\" by indicating the\ndirectory into which you are mounting the Downward API metadata files (`/etc/otelrd`\nby default).  From there, the resource detector will look for files matching the names\nof [standard OpenTelemetry Kubernetes Resource Attributes](https://github.com/open-telemetry/opentelemetry-python/blob/cdab6e174a1b9afc68aaf57ca04fc972a14281bc/opentelemetry-semantic-conventions/src/opentelemetry/semconv/resource/__init__.py#L239-L337).\n\n```python\nfrom opentelemetry.sdk.resources import get_aggregated_resources\nfrom opentelemetry_resourcedetector_kubernetes import KubernetesDownwardAPIEnvironmentResourceDetector\n\n...\n\nresource = get_aggregated_resources([\n    KubernetesDownwardAPIVolumeResourceDetector(directory='/etc/otelrd'),\n    SomeOtherResourceDetector()\n])\n\n... pass the returned `resource` to a TracerProvder, for example ...\n```\n\nIn this example, the `Resource` for all traces would include the attributes:\n\n```\ncontainer.runtime = \"kubernetes\"\nk8s.pod.uid = \"...the UUID of the pod...\"\ncontainer.id = \"...the id of the container...\"\n\nk8s.namespace.name = \"cool-app\"\nk8s.pod.name = \"example-pod\"\n```\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/chrisguidry/opentelemetry-resourcedetector-kubernetes","keywords":"","license":"","maintainer":"","maintainer_email":"","name":"opentelemetry-resourcedetector-kubernetes","package_url":"https://pypi.org/project/opentelemetry-resourcedetector-kubernetes/","platform":null,"project_url":"https://pypi.org/project/opentelemetry-resourcedetector-kubernetes/","project_urls":{"Bug Tracker":"https://github.com/chrisguidry/opentelemetry-resourcedetector-kubernetes/issues","Homepage":"https://github.com/chrisguidry/opentelemetry-resourcedetector-kubernetes"},"provides_extra":null,"release_url":"https://pypi.org/project/opentelemetry-resourcedetector-kubernetes/0.3.0/","requires_dist":["opentelemetry-sdk","opentelemetry-semantic-conventions","black ; extra == 'dev'","build ; extra == 'dev'","flake8 ; extra == 'dev'","flake8-black ; extra == 'dev'","isort ; extra == 'dev'","mypy ; extra == 'dev'","pre-commit ; extra == 'dev'","pytest ; extra == 'dev'","pytest-cov ; extra == 'dev'","pytest-xdist ; extra == 'dev'","twine ; extra == 'dev'","types-psutil ; extra == 'dev'"],"requires_python":">=3.8","summary":"An OpenTelemetry package to populates Resource attributes for Kubernetes pods","version":"0.3.0","yanked":false,"yanked_reason":null},"last_serial":15133156,"releases":{"0.2.0":[{"comment_text":"","digests":{"blake2b_256":"65d20e3b5a150ea0fb0e45f0b9d4b25062ce8bc166e8dc04c26b955b64428c08","md5":"80a4b2d6de8fc2beb9dd46d22fe79635","sha256":"f502b97d3d9f2a5f485d5879498a27c92b466f6833a744c8936163c027b3b632"},"downloads":-1,"filename":"opentelemetry_resourcedetector_kubernetes-0.2.0-py3-none-any.whl","has_sig":false,"md5_digest":"80a4b2d6de8fc2beb9dd46d22fe79635","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":6140,"upload_time":"2022-05-03T00:09:14","upload_time_iso_8601":"2022-05-03T00:09:14.142044Z","url":"https://files.pythonhosted.org/packages/65/d2/0e3b5a150ea0fb0e45f0b9d4b25062ce8bc166e8dc04c26b955b64428c08/opentelemetry_resourcedetector_kubernetes-0.2.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"845e0cec9e8c2eb03d1c9e4846353b047655df1bd70198cdb20cd3f6f15c86f6","md5":"4169f5431f96cd6eb109bbb76cf3496b","sha256":"0047cc67ecf6fe7e2feb398a6452b91580dded34cc187823decc5a4915b6469b"},"downloads":-1,"filename":"opentelemetry-resourcedetector-kubernetes-0.2.0.tar.gz","has_sig":false,"md5_digest":"4169f5431f96cd6eb109bbb76cf3496b","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":6012,"upload_time":"2022-05-03T00:09:16","upload_time_iso_8601":"2022-05-03T00:09:16.370646Z","url":"https://files.pythonhosted.org/packages/84/5e/0cec9e8c2eb03d1c9e4846353b047655df1bd70198cdb20cd3f6f15c86f6/opentelemetry-resourcedetector-kubernetes-0.2.0.tar.gz","yanked":false,"yanked_reason":null}],"0.2.1":[{"comment_text":"","digests":{"blake2b_256":"2ad332dc025a4c79a9c26da3773203d5173e52278bf6f5207bca86a478a3583d","md5":"19943aa80243302002254eac7587764f","sha256":"527db8b5e9dd053dc6e03b5ca148719b3ec8111cfe159c4f9ceda5d7b0b22cb5"},"downloads":-1,"filename":"opentelemetry_resourcedetector_kubernetes-0.2.1-py3-none-any.whl","has_sig":false,"md5_digest":"19943aa80243302002254eac7587764f","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":6138,"upload_time":"2022-05-03T13:11:29","upload_time_iso_8601":"2022-05-03T13:11:29.837635Z","url":"https://files.pythonhosted.org/packages/2a/d3/32dc025a4c79a9c26da3773203d5173e52278bf6f5207bca86a478a3583d/opentelemetry_resourcedetector_kubernetes-0.2.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"a7f5331ee813530f378b74b6e61927c2f2b0c4363755dfa96e282ed9f95da82a","md5":"2d0f279b9dfde9954abbf824cbbd46db","sha256":"e56b9eaba484250073db4e2a6671d42330b079b2fa9f9b3025cf32008590a0eb"},"downloads":-1,"filename":"opentelemetry-resourcedetector-kubernetes-0.2.1.tar.gz","has_sig":false,"md5_digest":"2d0f279b9dfde9954abbf824cbbd46db","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":6022,"upload_time":"2022-05-03T13:11:31","upload_time_iso_8601":"2022-05-03T13:11:31.764283Z","url":"https://files.pythonhosted.org/packages/a7/f5/331ee813530f378b74b6e61927c2f2b0c4363755dfa96e282ed9f95da82a/opentelemetry-resourcedetector-kubernetes-0.2.1.tar.gz","yanked":false,"yanked_reason":null}],"0.3.0":[{"comment_text":"","digests":{"blake2b_256":"99c8cee782a9fb57ab6bfc8fa8c0c43b1d293fab7d932b6f947f563f4ec0d887","md5":"2c17d81c9cd3cf508ee598be321a2ccf","sha256":"0abb30217cd71112a48076f86e648de2438003276548e78bf48e4f7a6f4ea219"},"downloads":-1,"filename":"opentelemetry_resourcedetector_kubernetes-0.3.0-py3-none-any.whl","has_sig":false,"md5_digest":"2c17d81c9cd3cf508ee598be321a2ccf","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":6148,"upload_time":"2022-09-18T12:08:06","upload_time_iso_8601":"2022-09-18T12:08:06.573318Z","url":"https://files.pythonhosted.org/packages/99/c8/cee782a9fb57ab6bfc8fa8c0c43b1d293fab7d932b6f947f563f4ec0d887/opentelemetry_resourcedetector_kubernetes-0.3.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"79e70e3d3905971fdf543cc72e77f2997b00df541b1cc6188a9df47ad8174205","md5":"bd8ce4f582735649e159aa21f2a3387d","sha256":"854472ff856c305dc29f033a8f784f9a7f513cb60eb690d2af4a4a572b165019"},"downloads":-1,"filename":"opentelemetry-resourcedetector-kubernetes-0.3.0.tar.gz","has_sig":false,"md5_digest":"bd8ce4f582735649e159aa21f2a3387d","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":9067,"upload_time":"2022-09-18T12:08:08","upload_time_iso_8601":"2022-09-18T12:08:08.143181Z","url":"https://files.pythonhosted.org/packages/79/e7/0e3d3905971fdf543cc72e77f2997b00df541b1cc6188a9df47ad8174205/opentelemetry-resourcedetector-kubernetes-0.3.0.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"99c8cee782a9fb57ab6bfc8fa8c0c43b1d293fab7d932b6f947f563f4ec0d887","md5":"2c17d81c9cd3cf508ee598be321a2ccf","sha256":"0abb30217cd71112a48076f86e648de2438003276548e78bf48e4f7a6f4ea219"},"downloads":-1,"filename":"opentelemetry_resourcedetector_kubernetes-0.3.0-py3-none-any.whl","has_sig":false,"md5_digest":"2c17d81c9cd3cf508ee598be321a2ccf","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":6148,"upload_time":"2022-09-18T12:08:06","upload_time_iso_8601":"2022-09-18T12:08:06.573318Z","url":"https://files.pythonhosted.org/packages/99/c8/cee782a9fb57ab6bfc8fa8c0c43b1d293fab7d932b6f947f563f4ec0d887/opentelemetry_resourcedetector_kubernetes-0.3.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"79e70e3d3905971fdf543cc72e77f2997b00df541b1cc6188a9df47ad8174205","md5":"bd8ce4f582735649e159aa21f2a3387d","sha256":"854472ff856c305dc29f033a8f784f9a7f513cb60eb690d2af4a4a572b165019"},"downloads":-1,"filename":"opentelemetry-resourcedetector-kubernetes-0.3.0.tar.gz","has_sig":false,"md5_digest":"bd8ce4f582735649e159aa21f2a3387d","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":9067,"upload_time":"2022-09-18T12:08:08","upload_time_iso_8601":"2022-09-18T12:08:08.143181Z","url":"https://files.pythonhosted.org/packages/79/e7/0e3d3905971fdf543cc72e77f2997b00df541b1cc6188a9df47ad8174205/opentelemetry-resourcedetector-kubernetes-0.3.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
