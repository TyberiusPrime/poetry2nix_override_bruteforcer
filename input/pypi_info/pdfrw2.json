{"info":{"author":"Patrick Maupin","author_email":"pmaupin@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 4 - Beta","Intended Audience :: Developers","License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Multimedia :: Graphics :: Graphics Conversion","Topic :: Printing","Topic :: Software Development :: Libraries","Topic :: Text Processing","Topic :: Utilities"],"description":"==================\npdfrw2 0.5.0\n==================\n\n:Author: Patrick Maupin\n\n:Forked Version by Sam Arnold which\nfixes many of the bugs from pdfrw 0.4\nincluding corrupted PDF forms.\nhttps://github.com/sarnold/pdfrw\n\n.. contents::\n    :backlinks: none\n\n.. sectnum::\n\nIntroduction\n============\n\n**pdfrw** is a Python library and utility that reads and writes PDF files:\n\n* Version 0.5.0 is tested and works on Python 3.6 - 3.9 across github CI\n  runners: ubuntu-20.04, macos-latest, windows-latest\n* Operations include subsetting, merging, rotating, modifying metadata, etc.\n* The fastest pure Python PDF parser available\n* Has been used for years by a printer in pre-press production\n* Can be used with rst2pdf to faithfully reproduce vector images\n* Can be used either standalone, or in conjunction with `reportlab`__\n  to reuse existing PDFs in new ones\n* Permissively licensed\n\n__ http://www.reportlab.org/\n\n\npdfrw will faithfully reproduce vector formats without\nrasterization, so the rst2pdf package has used pdfrw\nfor PDF and SVG images by default since March 2010.\n\npdfrw can also be used in conjunction with reportlab, in order\nto re-use portions of existing PDFs in new PDFs created with\nreportlab.\n\n\nExamples\n=========\n\nThe library comes with several examples that show operation both with\nand without reportlab.\n\n\nAll examples\n------------------\n\nThe examples directory has a few scripts which use the library.\nNote that if these examples do not work with your PDF, you should\ntry to use pdftk to uncompress and/or unencrypt them first.\n\n* `4up.py`__ will shrink pages down and place 4 of them on\n  each output page.\n* `alter.py`__ shows an example of modifying metadata, without\n  altering the structure of the PDF.\n* `booklet.py`__ shows an example of creating a 2-up output\n  suitable for printing and folding (e.g on tabloid size paper).\n* `cat.py`__ shows an example of concatenating multiple PDFs together.\n* `extract.py`__ will extract images and Form XObjects (embedded pages)\n  from existing PDFs to make them easier to use and refer to from\n  new PDFs (e.g. with reportlab or rst2pdf).\n* `poster.py`__ increases the size of a PDF so it can be printed\n  as a poster.\n* `print_two.py`__ Allows creation of 8.5 X 5.5\" booklets by slicing\n  8.5 X 11\" paper apart after printing.\n* `rotate.py`__ Rotates all or selected pages in a PDF.\n* `subset.py`__ Creates a new PDF with only a subset of pages from the\n  original.\n* `unspread.py`__ Takes a 2-up PDF, and splits out pages.\n* `watermark.py`__ Adds a watermark PDF image over or under all the pages\n  of a PDF.\n* `rl1/4up.py`__ Another 4up example, using reportlab canvas for output.\n* `rl1/booklet.py`__ Another booklet example, using reportlab canvas for\n  output.\n* `rl1/subset.py`__ Another subsetting example, using reportlab canvas for\n  output.\n* `rl1/platypus_pdf_template.py`__ Another watermarking example, using\n  reportlab canvas and generated output for the document.  Contributed\n  by user asannes.\n* `rl2`__ Experimental code for parsing graphics.  Needs work.\n* `subset_booklets.py`__ shows an example of creating a full printable pdf\n  version in a more professional and pratical way ( take a look at\n  http://www.wikihow.com/Bind-a-Book )\n\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/4up.py\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/alter.py\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/booklet.py\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/cat.py\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/extract.py\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/poster.py\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/print_two.py\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/rotate.py\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/subset.py\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/unspread.py\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/watermark.py\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/rl1/4up.py\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/rl1/booklet.py\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/rl1/subset.py\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/rl1/platypus_pdf_template.py\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/rl2/\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/subset_booklets.py\n\nNotes on selected examples\n------------------------------------\n\nReorganizing pages and placing them two-up\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA printer with a fancy printer and/or a full-up copy of Acrobat can\neasily turn your small PDF into a little booklet (for example, print 4\nletter-sized pages on a single 11\" x 17\").\n\nBut that assumes several things, including that the personnel know how\nto operate the hardware and software. `booklet.py`__ lets you turn your PDF\ninto a preformatted booklet, to give them fewer chances to mess it up.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/booklet.py\n\nAdding or modifying metadata\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe `cat.py`__ example will accept multiple input files on the command\nline, concatenate them and output them to output.pdf, after adding some\nnonsensical metadata to the output PDF file.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/cat.py\n\nThe `alter.py`__ example alters a single metadata item in a PDF,\nand writes the result to a new PDF.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/alter.py\n\n\nOne difference is that, since **cat** is creating a new PDF structure,\nand **alter** is attempting to modify an existing PDF structure, the\nPDF produced by alter (and also by watermark.py) *should* be\nmore faithful to the original (except for the desired changes).\n\nFor example, the alter.py navigation should be left intact, whereas with\ncat.py it will be stripped.\n\n\nRotating and doubling\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you ever want to print something that is like a small booklet, but\nneeds to be spiral bound, you either have to do some fancy rearranging,\nor just waste half your paper.\n\nThe `print_two.py`__ example program will, for example, make two side-by-side\ncopies each page of of your PDF on a each output sheet.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/print_two.py\n\nBut, every other page is flipped, so that you can print double-sided and\nthe pages will line up properly and be pre-collated.\n\nGraphics stream parsing proof of concept\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe `copy.py`__ script shows a simple example of reading in a PDF, and\nusing the decodegraphics.py module to try to write the same information\nout to a new PDF through a reportlab canvas. (If you know about reportlab,\nyou know that if you can faithfully render a PDF to a reportlab canvas, you\ncan do pretty much anything else with that PDF you want.) This kind of\nlow level manipulation should be done only if you really need to.\ndecodegraphics is really more than a proof of concept than anything\nelse. For most cases, just use the Form XObject capability, as shown in\nthe examples/rl1/booklet.py demo.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/examples/rl2/copy.py\n\npdfrw philosophy\n==================\n\nCore library\n-------------\n\nThe philosophy of the library portion of pdfrw is to provide intuitive\nfunctions to read, manipulate, and write PDF files.  There should be\nminimal leakage between abstraction layers, although getting useful\nwork done makes \"pure\" functionality separation difficult.\n\nA key concept supported by the library is the use of Form XObjects,\nwhich allow easy embedding of pieces of one PDF into another.\n\nAddition of core support to the library is typically done carefully\nand thoughtfully, so as not to clutter it up with too many special\ncases.\n\nThere are a lot of incorrectly formatted PDFs floating around; support\nfor these is added in some cases.  The decision is often based on what\nacroread and okular do with the PDFs; if they can display them properly,\nthen eventually pdfrw should, too, if it is not too difficult or costly.\n\nContributions are welcome; one user has contributed some decompression\nfilters and the ability to process PDF 1.5 stream objects.  Additional\nfunctionality that would obviously be useful includes additional\ndecompression filters, the ability to process password-protected PDFs,\nand the ability to output linearized PDFs.\n\nExamples\n--------\n\nThe philosophy of the examples is to provide small, easily-understood\nexamples that showcase pdfrw functionality.\n\n\nPDF files and Python\n======================\n\nIntroduction\n------------\n\nIn general, PDF files conceptually map quite well to Python. The major\nobjects to think about are:\n\n-  **strings**. Most things are strings. These also often decompose\n   naturally into\n-  **lists of tokens**. Tokens can be combined to create higher-level\n   objects like\n-  **arrays** and\n-  **dictionaries** and\n-  **Contents streams** (which can be more streams of tokens)\n\nDifficulties\n------------\n\nThe apparent primary difficulty in mapping PDF files to Python is the\nPDF file concept of \"indirect objects.\"  Indirect objects provide\nthe efficiency of allowing a single piece of data to be referred to\nfrom more than one containing object, but probably more importantly,\nindirect objects provide a way to get around the chicken and egg\nproblem of circular object references when mapping arbitrary data\nstructures to files. To flatten out a circular reference, an indirect\nobject is *referred to* instead of being *directly included* in another\nobject. PDF files have a global mechanism for locating indirect objects,\nand they all have two reference numbers (a reference number and a\n\"generation\" number, in case you wanted to append to the PDF file\nrather than just rewriting the whole thing).\n\npdfrw automatically handles indirect references on reading in a PDF\nfile. When pdfrw encounters an indirect PDF file object, the\ncorresponding Python object it creates will have an 'indirect' attribute\nwith a value of True. When writing a PDF file, if you have created\narbitrary data, you just need to make sure that circular references are\nbroken up by putting an attribute named 'indirect' which evaluates to\nTrue on at least one object in every cycle.\n\nAnother PDF file concept that doesn't quite map to regular Python is a\n\"stream\". Streams are dictionaries which each have an associated\nunformatted data block. pdfrw handles streams by placing a special\nattribute on a subclassed dictionary.\n\nUsage Model\n-----------\n\nThe usage model for pdfrw treats most objects as strings (it takes their\nstring representation when writing them to a file). The two main\nexceptions are the PdfArray object and the PdfDict object.\n\nPdfArray is a subclass of list with two special features.  First,\nan 'indirect' attribute allows a PdfArray to be written out as\nan indirect PDF object.  Second, pdfrw reads files lazily, so\nPdfArray knows about, and resolves references to other indirect\nobjects on an as-needed basis.\n\nPdfDict is a subclass of dict that also has an indirect attribute\nand lazy reference resolution as well.  (And the subclassed\nIndirectPdfDict has indirect automatically set True).\n\nBut PdfDict also has an optional associated stream. The stream object\ndefaults to None, but if you assign a stream to the dict, it will\nautomatically set the PDF /Length attribute for the dictionary.\n\nFinally, since PdfDict instances are indexed by PdfName objects (which\nalways start with a /) and since most (all?) standard Adobe PdfName\nobjects use names formatted like \"/CamelCase\", it makes sense to allow\naccess to dictionary elements via object attribute accesses as well as\nobject index accesses. So usage of PdfDict objects is normally via\nattribute access, although non-standard names (though still with a\nleading slash) can be accessed via dictionary index lookup.\n\nReading PDFs\n~~~~~~~~~~~~~~~\n\nThe PdfReader object is a subclass of PdfDict, which allows easy access\nto an entire document::\n\n    >>> from pdfrw import PdfReader\n    >>> x = PdfReader('source.pdf')\n    >>> x.keys()\n    ['/Info', '/Size', '/Root']\n    >>> x.Info\n    {'/Producer': '(cairo 1.8.6 (http://cairographics.org))',\n     '/Creator': '(cairo 1.8.6 (http://cairographics.org))'}\n    >>> x.Root.keys()\n    ['/Type', '/Pages']\n\nInfo, Size, and Root are retrieved from the trailer of the PDF file.\n\nIn addition to the tree structure, pdfrw creates a special attribute\nnamed *pages*, that is a list of all the pages in the document. pdfrw\ncreates the *pages* attribute as a simplification for the user, because\nthe PDF format allows arbitrarily complicated nested dictionaries to\ndescribe the page order. Each entry in the *pages* list is the PdfDict\nobject for one of the pages in the file, in order.\n\n::\n\n    >>> len(x.pages)\n    1\n    >>> x.pages[0]\n    {'/Parent': {'/Kids': [{...}], '/Type': '/Pages', '/Count': '1'},\n     '/Contents': {'/Length': '11260', '/Filter': None},\n     '/Resources': ... (Lots more stuff snipped)\n    >>> x.pages[0].Contents\n    {'/Length': '11260', '/Filter': None}\n    >>> x.pages[0].Contents.stream\n    'q\\n1 1 1 rg /a0 gs\\n0 0 0 RG 0.657436\n      w\\n0 J\\n0 j\\n[] 0.0 d\\n4 M q' ... (Lots more stuff snipped)\n\nWriting PDFs\n~~~~~~~~~~~~~~~\n\nAs you can see, it is quite easy to dig down into a PDF document. But\nwhat about when it's time to write it out?\n\n::\n\n    >>> from pdfrw import PdfWriter\n    >>> y = PdfWriter()\n    >>> y.addpage(x.pages[0])\n    >>> y.write('result.pdf')\n\nThat's all it takes to create a new PDF. You may still need to read the\n`Adobe PDF reference manual`__ to figure out what needs to go *into*\nthe PDF, but at least you don't have to sweat actually building it\nand getting the file offsets right.\n\n__ http://www.adobe.com/devnet/acrobat/pdfs/pdf_reference_1-7.pdf\n\nManipulating PDFs in memory\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor the most part, pdfrw tries to be agnostic about the contents of\nPDF files, and support them as containers, but to do useful work,\nsomething a little higher-level is required, so pdfrw works to\nunderstand a bit about the contents of the containers.  For example:\n\n-  PDF pages. pdfrw knows enough to find the pages in PDF files you read\n   in, and to write a set of pages back out to a new PDF file.\n-  Form XObjects. pdfrw can take any page or rectangle on a page, and\n   convert it to a Form XObject, suitable for use inside another PDF\n   file.  It knows enough about these to perform scaling, rotation,\n   and positioning.\n-  reportlab objects. pdfrw can recursively create a set of reportlab\n   objects from its internal object format. This allows, for example,\n   Form XObjects to be used inside reportlab, so that you can reuse\n   content from an existing PDF file when building a new PDF with\n   reportlab.\n\nThere are several examples that demonstrate these features in\nthe example code directory.\n\nMissing features\n~~~~~~~~~~~~~~~~~~~~~~~\n\nEven as a pure PDF container library, pdfrw comes up a bit short. It\ndoes not currently support:\n\n-  Most compression/decompression filters\n-  encryption\n\n`pdftk`__ is a wonderful command-line\ntool that can convert your PDFs to remove encryption and compression.\nHowever, in most cases, you can do a lot of useful work with PDFs\nwithout actually removing compression, because only certain elements\ninside PDFs are actually compressed.\n\n__ https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/\n\nLibrary internals\n==================\n\nIntroduction\n------------\n\n**pdfrw** currently consists of 19 modules organized into a main\npackage and one sub-package.\n\nThe `__init.py__`__ module does the usual thing of importing a few\nmajor attributes from some of the submodules, and the `errors.py`__\nmodule supports logging and exception generation.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/pdfrw/__init__.py\n__ https://github.com/pmaupin/pdfrw/tree/master/pdfrw/errors.py\n\n\nPDF object model support\n--------------------------\n\nThe `objects`__ sub-package contains one module for each of the\ninternal representations of the kinds of basic objects that exist\nin a PDF file, with the `objects/__init__.py`__ module in that\npackage simply gathering them up and making them available to the\nmain pdfrw package.\n\nOne feature that all the PDF object classes have in common is the\ninclusion of an 'indirect' attribute. If 'indirect' exists and evaluates\nto True, then when the object is written out, it is written out as an\nindirect object. That is to say, it is addressable in the PDF file, and\ncould be referenced by any number (including zero) of container objects.\nThis indirect object capability saves space in PDF files by allowing\nobjects such as fonts to be referenced from multiple pages, and also\nallows PDF files to contain internal circular references.  This latter\ncapability is used, for example, when each page object has a \"parent\"\nobject in its dictionary.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/\n__ https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/__init__.py\n\nOrdinary objects\n~~~~~~~~~~~~~~~~\n\nThe `objects/pdfobject.py`__ module contains the PdfObject class, which is\na subclass of str, and is the catch-all object for any PDF file elements\nthat are not explicitly represented by other objects, as described below.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/pdfobject.py\n\nName objects\n~~~~~~~~~~~~\n\nThe `objects/pdfname.py`__ module contains the PdfName singleton object,\nwhich will convert a string into a PDF name by prepending a slash. It can\nbe used either by calling it or getting an attribute, e.g.::\n\n    PdfName.Rotate == PdfName('Rotate') == PdfObject('/Rotate')\n\nIn the example above, there is a slight difference between the objects\nreturned from PdfName, and the object returned from PdfObject.  The\nPdfName objects are actually objects of class \"BasePdfName\".  This\nis important, because only these may be used as keys in PdfDict objects.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/pdfname.py\n\nString objects\n~~~~~~~~~~~~~~\n\nThe `objects/pdfstring.py`__\nmodule contains the PdfString class, which is a subclass of str that is\nused to represent encoded strings in a PDF file. The class has encode\nand decode methods for the strings.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/pdfstring.py\n\n\nArray objects\n~~~~~~~~~~~~~\n\nThe `objects/pdfarray.py`__\nmodule contains the PdfArray class, which is a subclass of list that is\nused to represent arrays in a PDF file. A regular list could be used\ninstead, but use of the PdfArray class allows for an indirect attribute\nto be set, and also allows for proxying of unresolved indirect objects\n(that haven't been read in yet) in a manner that is transparent to pdfrw\nclients.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/pdfarray.py\n\nDict objects\n~~~~~~~~~~~~\n\nThe `objects/pdfdict.py`__\nmodule contains the PdfDict class, which is a subclass of dict that is\nused to represent dictionaries in a PDF file. A regular dict could be\nused instead, but the PdfDict class matches the requirements of PDF\nfiles more closely:\n\n* Transparent (from the library client's viewpoint) proxying\n  of unresolved indirect objects\n* Return of None for non-existent keys (like dict.get)\n* Mapping of attribute accesses to the dict itself\n  (pdfdict.Foo == pdfdict[NameObject('Foo')])\n* Automatic management of following stream and /Length attributes\n  for content dictionaries\n* Indirect attribute\n* Other attributes may be set for private internal use of the\n  library and/or its clients.\n* Support for searching parent dictionaries for PDF \"inheritable\"\n  attributes.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/pdfdict.py\n\nIf a PdfDict has an associated data stream in the PDF file, the stream\nis accessed via the 'stream' (all lower-case) attribute.  Setting the\nstream attribute on the PdfDict will automatically set the /Length attribute\nas well.  If that is not what is desired (for example if the the stream\nis compressed), then _stream (same name with an underscore) may be used\nto associate the stream with the PdfDict without setting the length.\n\nTo set private attributes (that will not be written out to a new PDF\nfile) on a dictionary, use the 'private' attribute::\n\n    mydict.private.foo = 1\n\nOnce the attribute is set, it may be accessed directly as an attribute\nof the dictionary::\n\n    foo = mydict.foo\n\nSome attributes of PDF pages are \"inheritable.\"  That is, they may\nbelong to a parent dictionary (or a parent of a parent dictionary, etc.)\nThe \"inheritable\" attribute allows for easy discovery of these::\n\n    mediabox = mypage.inheritable.MediaBox\n\n\nProxy objects\n~~~~~~~~~~~~~\n\nThe `objects/pdfindirect.py`__\nmodule contains the PdfIndirect class, which is a non-transparent proxy\nobject for PDF objects that have not yet been read in and resolved from\na file. Although these are non-transparent inside the library, client code\nshould never see one of these -- they exist inside the PdfArray and PdfDict\ncontainer types, but are resolved before being returned to a client of\nthose types.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/pdfrw/objects/pdfindirect.py\n\n\nFile reading, tokenization and parsing\n--------------------------------------\n\n`pdfreader.py`__\ncontains the PdfReader class, which can read a PDF file (or be passed a\nfile object or already read string) and parse it. It uses the PdfTokens\nclass in `tokens.py`__  for low-level tokenization.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/pdfrw/pdfreader.py\n__ https://github.com/pmaupin/pdfrw/tree/master/pdfrw/tokens.py\n\n\nThe PdfReader class does not, in general, parse into containers (e.g.\ninside the content streams). There is a proof of concept for doing that\ninside the examples/rl2 subdirectory, but that is slow and not well-developed,\nand not useful for most applications.\n\nAn instance of the PdfReader class is an instance of a PdfDict -- the\ntrailer dictionary of the PDF file, to be exact.  It will have a private\nattribute set on it that is named 'pages' that is a list containing all\nthe pages in the file.\n\nWhen instantiating a PdfReader object, there are options available\nfor decompressing all the objects in the file.  pdfrw does not currently\nhave very many options for decompression, so this is not all that useful,\nexcept in the specific case of compressed object streams.\n\nAlso, there are no options for decryption yet.  If you have PDF files\nthat are encrypted or heavily compressed, you may find that using another\nprogram like pdftk on them can make them readable by pdfrw.\n\nIn general, the objects are read from the file lazily, but this is not\ncurrently true with compressed object streams -- all of these are decompressed\nand read in when the PdfReader is instantiated.\n\n\nFile output\n-----------\n\n`pdfwriter.py`__\ncontains the PdfWriter class, which can create and output a PDF file.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/pdfrw/pdfwriter.py\n\nThere are a few options available when creating and using this class.\n\nIn the simplest case, an instance of PdfWriter is instantiated, and\nthen pages are added to it from one or more source files (or created\nprogrammatically), and then the write method is called to dump the\nresults out to a file.\n\nIf you have a source PDF and do not want to disturb the structure\nof it too badly, then you may pass its trailer directly to PdfWriter\nrather than letting PdfWriter construct one for you.  There is an\nexample of this (alter.py) in the examples directory.\n\n\nAdvanced features\n-----------------\n\n`buildxobj.py`__\ncontains functions to build Form XObjects out of pages or rectangles on\npages.  These may be reused in new PDFs essentially as if they were images.\n\nbuildxobj is careful to cache any page used so that it only appears in\nthe output once.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/pdfrw/buildxobj.py\n\n\n`toreportlab.py`__\nprovides the makerl function, which will translate pdfrw objects into a\nformat which can be used with `reportlab <http://www.reportlab.org/>`__.\nIt is normally used in conjunction with buildxobj, to be able to reuse\nparts of existing PDFs when using reportlab.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/pdfrw/toreportlab.py\n\n\n`pagemerge.py`__ builds on the foundation laid by buildxobj.  It\ncontains classes to create a new page (or overlay an existing page)\nusing one or more rectangles from other pages.  There are examples\nshowing its use for watermarking, scaling, 4-up output, splitting\neach page in 2, etc.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/pdfrw/pagemerge.py\n\n`findobjs.py`__ contains code that can find specific kinds of objects\ninside a PDF file.  The extract.py example uses this module to create\na new PDF that places each image and Form XObject from a source PDF onto\nits own page, e.g. for easy reuse with some of the other examples or\nwith reportlab.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/pdfrw/findobjs.py\n\n\nMiscellaneous\n----------------\n\n`compress.py`__ and `uncompress.py`__\ncontains compression and decompression functions. Very few filters are\ncurrently supported, so an external tool like pdftk might be good if you\nrequire the ability to decompress (or, for that matter, decrypt) PDF\nfiles.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/pdfrw/compress.py\n__ https://github.com/pmaupin/pdfrw/tree/master/pdfrw/uncompress.py\n\n\n`py23_diffs.py`__ contains code to help manage the differences between\nPython 2 and Python 3.\n\n__ https://github.com/pmaupin/pdfrw/tree/master/pdfrw/py23_diffs.py\n\nTesting\n===============\n\nThe tests associated with pdfrw require a large number of PDFs,\nwhich are not distributed with the library.\n\nTo run the tests:\n\n* Clone the full package from github with ``--recursive``\n* Install the tox test drivers from OS pkgs or pip in a venv\n* Run the tests with tox using default system python version\n\n.. code-block:: bash\n\n   $ <apt|yum|emerge|pip> install tox tox-xdist\n   $ git clone --recursive https://github.com/sarnold/pdfrw.git\n   $ cd pdfrw\n   $ tox -e py\n\n\nTo run a single test-case:\n\n.. code-block:: bash\n\n   $ pytest test_roundtrip.py -k \"test_compress_9f98322c243fe67726d56ccfa8e0885b.pdf\"\n\nOther libraries\n=====================\n\nPure Python\n-----------\n\n-  `reportlab <http://www.reportlab.org/>`__\n\n    reportlab is must-have software if you want to programmatically\n    generate arbitrary PDFs.\n\n-  `PyFPDF <https://github.com/reingart/pyfpdf>`__\n\n    PyPDF is, in some ways, very full-featured. It can do decompression\n    and decryption and seems to know a lot about items inside at least\n    some kinds of PDF files. In comparison, pdfrw knows less about\n    specific PDF file features (such as metadata), but focuses on trying\n    to have a more Pythonic API for mapping the PDF file container\n    syntax to Python, and (IMO) has a simpler and better PDF file\n    parser.  The Form XObject capability of pdfrw means that, in many\n    cases, it does not actually need to decompress objects -- they\n    can be left compressed.\n\n    PyPDF is not maintained anymore, but it has a successors:\n    `PyFPDF2 <https://github.com/mstamy2/PyPDF2>`__\n    and `fpdf2 <https://github.com/PyPDF/fpdf2>`__.\n\n-  `pdftools <http://www.boddie.org.uk/david/Projects/Python/pdftools/index.html>`__\n\n    pdftools feels large and I fell asleep trying to figure out how it\n    all fit together, but many others have done useful things with it.\n\n-  `pagecatcher <http://www.reportlab.com/docs/pagecatcher-ds.pdf>`__\n\n    My understanding is that pagecatcher would have done exactly what I\n    wanted when I built pdfrw. But I was on a zero budget, so I've never\n    had the pleasure of experiencing pagecatcher. I do, however, use and\n    like `reportlab <http://www.reportlab.org/>`__ (open source, from\n    the people who make pagecatcher) so I'm sure pagecatcher is great,\n    better documented and much more full-featured than pdfrw.\n\n-  `pdfminer <http://www.unixuser.org/~euske/python/pdfminer/index.html>`__\n\n    This looks like a useful, actively-developed program. It is quite\n    large, but then, it is trying to actively comprehend a full PDF\n    document. From the website:\n\n    \"PDFMiner is a suite of programs that help extracting and analyzing\n    text data of PDF documents. Unlike other PDF-related tools, it\n    allows to obtain the exact location of texts in a page, as well as\n    other extra information such as font information or ruled lines. It\n    includes a PDF converter that can transform PDF files into other\n    text formats (such as HTML). It has an extensible PDF parser that\n    can be used for other purposes instead of text analysis.\"\n\n-  `WeasyPrint <https://github.com/Kozea/WeasyPrint>`__\n\n    WeasyPrint is a visual rendering engine for HTML and CSS that can export to PDF.\n    It aims to support web standards for printing.\n    It is based on various libraries but not on a full rendering engine like WebKit or Gecko.\n    The CSS layout engine is written in Python, designed for pagination,\n    and meant to be easy to hack on.\n\nnon-pure-Python libraries\n-------------------------\n\n-  `pikepdf <https://github.com/pikepdf/pikepdf>`__ read and write PDF files,\n    based on C++ lib QPDF.\n-  `pyPoppler <https://launchpad.net/poppler-python/>`__ can read PDF\n   files.\n-  `pycairo <http://www.cairographics.org/pycairo/>`__ can write PDF\n   files.\n-  `PyMuPDF <https://github.com/rk700/PyMuPDF>`_ high performance rendering\n   of PDF, (Open)XPS, CBZ and EPUB\n\nOther tools\n-----------\n\n-  `pdftk <https://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/>`__ is a wonderful command\n   line tool for basic PDF manipulation. It complements pdfrw extremely\n   well, supporting many operations such as decryption and decompression\n   that pdfrw cannot do.\n-  `MuPDF <http://www.mupdf.com/>`_ is a free top performance PDF, (Open)XPS, CBZ and EPUB rendering library\n   that also comes with some command line tools. One of those, ``mutool``, has big overlaps with pdftk's - \n   except it is up to 10 times faster.\n\nRelease information\n=======================\n\nRevisions:\n\n0.4 -- Released 18 September, 2017\n\n    - Python 3.6 added to test matrix\n    - Proper unicode support for text strings in PDFs added\n    - buildxobj fixes allow better support creating form XObjects\n      out of compressed pages in some cases\n    - Compression fixes for Python 3+\n    - New subset_booklets.py example\n    - Bug with non-compressed indices into compressed object streams fixed\n    - Bug with distinguishing compressed object stream first objects fixed\n    - Better error reporting added for some invalid PDFs (e.g. when reading\n      past the end of file)\n    - Better scrubbing of old bookmark information when writing PDFs, to\n      remove dangling references\n    - Refactoring of pdfwriter, including updating API, to allow future\n      enhancements for things like incremental writing\n    - Minor tokenizer speedup\n    - Some flate decompressor bugs fixed\n    - Compression and decompression tests added\n    - Tests for new unicode handling added\n    - PdfReader.readpages() recursion error (issue #92) fixed.\n    - Initial crypt filter support added\n\n\n0.3 -- Released 19 October, 2016.\n\n    - Python 3.5 added to test matrix\n    - Better support under Python 3.x for in-memory PDF file-like objects\n    - Some pagemerge and Unicode patches added\n    - Changes to logging allow better coexistence with other packages\n    - Fix for \"from pdfrw import \\*\"\n    - New fancy_watermark.py example shows off capabilities of pagemerge.py\n    - metadata.py example renamed to cat.py\n\n\n0.2 -- Released 21 June, 2015.  Supports Python 2.6, 2.7, 3.3, and 3.4.\n\n    - Several bugs have been fixed\n    - New regression test functionally tests core with dozens of\n      PDFs, and also tests examples.\n    - Core has been ported and tested on Python3 by round-tripping\n      several difficult files and observing binary matching results\n      across the different Python versions.\n    - Still only minimal support for compression and no support\n      for encryption or newer PDF features.  (pdftk is useful\n      to put PDFs in a form that pdfrw can use.)\n\n0.1 -- Released to PyPI in 2012.  Supports Python 2.5 - 2.7\n\n\n\n","description_content_type":"text/x-rst","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/sarnold/pdfrw","keywords":"pdf vector graphics PDF nup watermark split join merge","license":"MIT","maintainer":"","maintainer_email":"","name":"pdfrw2","package_url":"https://pypi.org/project/pdfrw2/","platform":"Independent","project_url":"https://pypi.org/project/pdfrw2/","project_urls":{"Homepage":"https://github.com/sarnold/pdfrw"},"provides_extra":null,"release_url":"https://pypi.org/project/pdfrw2/0.5.0/","requires_dist":null,"requires_python":"","summary":"PDF file reader/writer library","version":"0.5.0","yanked":false,"yanked_reason":null},"last_serial":12170907,"releases":{"0.4.post2":[{"comment_text":"","digests":{"blake2b_256":"7144fc47f46ffde6b1a591ecfb2906d3638dced6d5dd4a5b81c818229e9cec20","md5":"76692f54ab9c22c60533a29f19ba8cd2","sha256":"a38c1bdd5c111b0aa14019349775c93bc9fd59087b7e8a51170de4f7d5e3c31f"},"downloads":-1,"filename":"pdfrw2-0.4.post2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"76692f54ab9c22c60533a29f19ba8cd2","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":60632,"upload_time":"2021-11-26T21:57:32","upload_time_iso_8601":"2021-11-26T21:57:32.875827Z","url":"https://files.pythonhosted.org/packages/71/44/fc47f46ffde6b1a591ecfb2906d3638dced6d5dd4a5b81c818229e9cec20/pdfrw2-0.4.post2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f9e7ee448c035914b706ad908f24033f6b6f822b91bd1711b24fa464206bc8a3","md5":"1a7f26a1cc128da4a5b5f3cf00eead9b","sha256":"78cf8107cd02eeb03d720fb797b7f3dce9300abb2653bfd4d375af145b98d053"},"downloads":-1,"filename":"pdfrw2-0.4.post2.tar.gz","has_sig":false,"md5_digest":"1a7f26a1cc128da4a5b5f3cf00eead9b","packagetype":"sdist","python_version":"source","requires_python":null,"size":96356,"upload_time":"2021-11-26T21:57:35","upload_time_iso_8601":"2021-11-26T21:57:35.930805Z","url":"https://files.pythonhosted.org/packages/f9/e7/ee448c035914b706ad908f24033f6b6f822b91bd1711b24fa464206bc8a3/pdfrw2-0.4.post2.tar.gz","yanked":false,"yanked_reason":null}],"0.5.0":[{"comment_text":"","digests":{"blake2b_256":"3d18373334ec15873c58c1d805d8c88bd7ece9e67c95e7c574f45d80a8bc9332","md5":"f2ebe12c37667f482b46e833e0a8b10e","sha256":"16aea0be23a19aa5fe5ae57ad3bbaac97b76c3a5b6eacd14cbfa54442c37a21b"},"downloads":-1,"filename":"pdfrw2-0.5.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"f2ebe12c37667f482b46e833e0a8b10e","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":60635,"upload_time":"2021-11-30T23:04:03","upload_time_iso_8601":"2021-11-30T23:04:03.459892Z","url":"https://files.pythonhosted.org/packages/3d/18/373334ec15873c58c1d805d8c88bd7ece9e67c95e7c574f45d80a8bc9332/pdfrw2-0.5.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"204a9440938ff6e86f5aff09e3b76f6a77b77922e360fc5cf5232036c9461b42","md5":"c7d2d89e7cf435cec55283cd824e6153","sha256":"e6a9ccab83e769a7a8bfe2dbddf0f49dd7ebe52032e929574f01bbbfa21971ed"},"downloads":-1,"filename":"pdfrw2-0.5.0.tar.gz","has_sig":false,"md5_digest":"c7d2d89e7cf435cec55283cd824e6153","packagetype":"sdist","python_version":"source","requires_python":null,"size":96564,"upload_time":"2021-11-30T23:04:07","upload_time_iso_8601":"2021-11-30T23:04:07.575282Z","url":"https://files.pythonhosted.org/packages/20/4a/9440938ff6e86f5aff09e3b76f6a77b77922e360fc5cf5232036c9461b42/pdfrw2-0.5.0.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"3d18373334ec15873c58c1d805d8c88bd7ece9e67c95e7c574f45d80a8bc9332","md5":"f2ebe12c37667f482b46e833e0a8b10e","sha256":"16aea0be23a19aa5fe5ae57ad3bbaac97b76c3a5b6eacd14cbfa54442c37a21b"},"downloads":-1,"filename":"pdfrw2-0.5.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"f2ebe12c37667f482b46e833e0a8b10e","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":60635,"upload_time":"2021-11-30T23:04:03","upload_time_iso_8601":"2021-11-30T23:04:03.459892Z","url":"https://files.pythonhosted.org/packages/3d/18/373334ec15873c58c1d805d8c88bd7ece9e67c95e7c574f45d80a8bc9332/pdfrw2-0.5.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"204a9440938ff6e86f5aff09e3b76f6a77b77922e360fc5cf5232036c9461b42","md5":"c7d2d89e7cf435cec55283cd824e6153","sha256":"e6a9ccab83e769a7a8bfe2dbddf0f49dd7ebe52032e929574f01bbbfa21971ed"},"downloads":-1,"filename":"pdfrw2-0.5.0.tar.gz","has_sig":false,"md5_digest":"c7d2d89e7cf435cec55283cd824e6153","packagetype":"sdist","python_version":"source","requires_python":null,"size":96564,"upload_time":"2021-11-30T23:04:07","upload_time_iso_8601":"2021-11-30T23:04:07.575282Z","url":"https://files.pythonhosted.org/packages/20/4a/9440938ff6e86f5aff09e3b76f6a77b77922e360fc5cf5232036c9461b42/pdfrw2-0.5.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
