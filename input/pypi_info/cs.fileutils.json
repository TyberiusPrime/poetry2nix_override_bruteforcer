{"info":{"author":null,"author_email":"Cameron Simpson <cs@cskk.id.au>","bugtrack_url":null,"classifiers":["Development Status :: 4 - Beta","Intended Audience :: Developers","License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 2","Programming Language :: Python :: 3","Topic :: Software Development :: Libraries :: Python Modules"],"description":"My grab bag of convenience functions for files and filenames/pathnames.\n\n*Latest release 20240709*:\nrewrite: return True if the content is modified, False otherwise.\n\n## Function `abspath_from_file(path, from_file)`\n\nReturn the absolute path of `path` with respect to `from_file`,\nas one might do for an include file.\n\n## Function `atomic_filename(filename, exists_ok=False, placeholder=False, dir=None, prefix=None, suffix=None, rename_func=<built-in function rename>, **tempfile_kw)`\n\nA context manager to create `filename` atomicly on completion.\nThis returns a `NamedTemporaryFile` to use to create the file contents.\nOn completion the temporary file is renamed to the target name `filename`.\n\nParameters:\n* `filename`: the file name to create\n* `exists_ok`: default `False`;\n  if true it not an error if `filename` already exists\n* `placeholder`: create a placeholder file at `filename`\n  while the real contents are written to the temporary file\n* `dir`: passed to `NamedTemporaryFile`, specifies the directory\n  to hold the temporary file; the default is `dirname(filename)`\n  to ensure the rename is atomic\n* `prefix`: passed to `NamedTemporaryFile`, specifies a prefix\n  for the temporary file; the default is a dot (`'.'`) plus the prefix\n  from `splitext(basename(filename))`\n* `suffix`: passed to `NamedTemporaryFile`, specifies a suffix\n  for the temporary file; the default is the extension obtained\n  from `splitext(basename(filename))`\n* `rename_func`: a callable accepting `(tempname,filename)`\n  used to rename the temporary file to the final name; the\n  default is `os.rename` and this parametr exists to accept\n  something such as `FSTags.move`\nOther keyword arguments are passed to the `NamedTemporaryFile` constructor.\n\nExample:\n\n    >>> import os\n    >>> from os.path import exists as existspath\n    >>> fn = 'test_atomic_filename'\n    >>> with atomic_filename(fn, mode='w') as f:\n    ...     assert not existspath(fn)\n    ...     print('foo', file=f)\n    ...     assert not existspath(fn)\n    ...\n    >>> assert existspath(fn)\n    >>> assert open(fn).read() == 'foo\\n'\n    >>> os.remove(fn)\n\n## Class `BackedFile(ReadMixin)`\n\nA RawIOBase duck type\nwhich uses a backing file for initial data\nand writes new data to a front scratch file.\n\n*Method `BackedFile.__init__(self, back_file, dirpath=None)`*:\nInitialise the BackedFile using `back_file` for the backing data.\n\n*Method `BackedFile.__enter__(self)`*:\nBackedFile instances offer a context manager that take the lock,\nallowing synchronous use of the file\nwithout implementing a suite of special methods like pread/pwrite.\n\n*Method `BackedFile.close(self)`*:\nClose the BackedFile.\nFlush contents. Close the front_file if necessary.\n\n*Method `BackedFile.datafrom(self, offset)`*:\nGenerator yielding natural chunks from the file commencing at offset.\n\n*Method `BackedFile.seek(self, pos, whence=0)`*:\nAdjust the current file pointer offset.\n\n*Method `BackedFile.switch_back_file(self, new_back_file)`*:\nSwitch out one back file for another. Return the old back file.\n\n*Method `BackedFile.tell(self)`*:\nReport the current file pointer offset.\n\n*Method `BackedFile.write(self, b)`*:\nWrite data to the front_file.\n\n## Class `BackedFile_TestMethods`\n\nMixin for testing subclasses of BackedFile.\nTests self.backed_fp.\n\n*Method `BackedFile_TestMethods.test_BackedFile(self)`*:\nTest function for a BackedFile to use in unit test suites.\n\n## Function `byteses_as_fd(bss, **kw)`\n\nDeliver the iterable of bytes `bss` as a readable file descriptor.\n      Return the file descriptor.\n      Any keyword arguments are passed to `CornuCopyBuffer.as_fd`.\n\n      Example:\n\n           # present a passphrase for use as in input file descrptor\n           # for a subprocess\n           rfd = byteses_as_fd([(passphrase + '\n').encode()])\n\n## Function `common_path_prefix(*paths)`\n\nReturn the common path prefix of the `paths`.\n\nNote that the common prefix of `'/a/b/c1'` and `'/a/b/c2'`\nis `'/a/b/'`, _not_ `'/a/b/c'`.\n\nCallers may find it useful to preadjust the supplied paths\nwith `normpath`, `abspath` or `realpath` from `os.path`;\nsee the `os.path` documentation for the various caveats\nwhich go with those functions.\n\nExamples:\n\n    >>> # the obvious\n    >>> common_path_prefix('', '')\n    ''\n    >>> common_path_prefix('/', '/')\n    '/'\n    >>> common_path_prefix('a', 'a')\n    'a'\n    >>> common_path_prefix('a', 'b')\n    ''\n    >>> # nonempty directory path prefixes end in os.sep\n    >>> common_path_prefix('/', '/a')\n    '/'\n    >>> # identical paths include the final basename\n    >>> common_path_prefix('p/a', 'p/a')\n    'p/a'\n    >>> # the comparison does not normalise paths\n    >>> common_path_prefix('p//a', 'p//a')\n    'p//a'\n    >>> common_path_prefix('p//a', 'p//b')\n    'p//'\n    >>> common_path_prefix('p//a', 'p/a')\n    'p/'\n    >>> common_path_prefix('p/a', 'p/b')\n    'p/'\n    >>> # the comparison strips complete unequal path components\n    >>> common_path_prefix('p/a1', 'p/a2')\n    'p/'\n    >>> common_path_prefix('p/a/b1', 'p/a/b2')\n    'p/a/'\n    >>> # contrast with cs.lex.common_prefix\n    >>> common_prefix('abc/def', 'abc/def1')\n    'abc/def'\n    >>> common_path_prefix('abc/def', 'abc/def1')\n    'abc/'\n    >>> common_prefix('abc/def', 'abc/def1', 'abc/def2')\n    'abc/def'\n    >>> common_path_prefix('abc/def', 'abc/def1', 'abc/def2')\n    'abc/'\n\n## Function `compare(f1, f2, mode='rb')`\n\nCompare the contents of two file-like objects `f1` and `f2` for equality.\n\nIf `f1` or `f2` is a string, open the named file using `mode`\n(default: `\"rb\"`).\n\n## Function `copy_data(fpin, fpout, nbytes, rsize=None)`\n\nCopy `nbytes` of data from `fpin` to `fpout`,\nreturn the number of bytes copied.\n\nParameters:\n* `nbytes`: number of bytes to copy.\n  If `None`, copy until EOF.\n* `rsize`: read size, default `DEFAULT_READSIZE`.\n\n## Function `crop_name(name, ext=None, name_max=255)`\n\nCrop a file basename so as not to exceed `name_max` in length.\nReturn the original `name` if it already short enough.\nOtherwise crop `name` before the file extension\nto make it short enough.\n\nParameters:\n* `name`: the file basename to crop\n* `ext`: optional file extension;\n  the default is to infer the extension with `os.path.splitext`.\n* `name_max`: optional maximum length, default: `255`\n\n## Function `datafrom(f, offset=None, readsize=None, maxlength=None)`\n\nGeneral purpose reader for files yielding data from `offset`.\n\n*WARNING*: this function might move the file pointer.\n\nParameters:\n* `f`: the file from which to read data;\n  if a string, the file is opened with mode=\"rb\";\n  if an int, treated as an OS file descriptor;\n  otherwise presumed to be a file-like object.\n  If that object has a `.fileno()` method, treat that as an\n  OS file descriptor and use it.\n* `offset`: starting offset for the data\n* `maxlength`: optional maximum amount of data to yield\n* `readsize`: read size, default DEFAULT_READSIZE.\n\nFor file-like objects, the read1 method is used in preference\nto read if available. The file pointer is briefly moved during\nfetches.\n\n## Function `datafrom_fd(fd, offset=None, readsize=None, aligned=True, maxlength=None)`\n\nGeneral purpose reader for file descriptors yielding data from `offset`.\n**Note**: This does not move the file descriptor position\n**if** the file is seekable.\n\nParameters:\n* `fd`: the file descriptor from which to read.\n* `offset`: the offset from which to read.\n  If omitted, use the current file descriptor position.\n* `readsize`: the read size, default: `DEFAULT_READSIZE`\n* `aligned`: if true (the default), the first read is sized\n  to align the new offset with a multiple of `readsize`.\n* `maxlength`: if specified yield no more than this many bytes of data.\n\n## Function `file_based(*da, **dkw)`\n\nA decorator which caches a value obtained from a file.\n\nIn addition to all the keyword arguments for `@cs.deco.cachedmethod`,\nthis decorator also accepts the following arguments:\n* `attr_name`: the name for the associated attribute, used as\n  the basis for the internal cache value attribute\n* `filename`: the filename to monitor.\n  Default from the `._{attr_name}__filename` attribute.\n  This value will be passed to the method as the `filename` keyword\n  parameter.\n* `poll_delay`: delay between file polls, default `DEFAULT_POLL_INTERVAL`.\n* `sig_func`: signature function used to encapsulate the relevant\n  information about the file; default\n  cs.filestate.FileState({filename}).\n\nIf the decorated function raises OSError with errno == ENOENT,\nthis returns None. Other exceptions are reraised.\n\n## Function `file_data(fp, nbytes=None, rsize=None)`\n\nRead `nbytes` of data from `fp` and yield the chunks as read.\n\nParameters:\n* `nbytes`: number of bytes to read; if None read until EOF.\n* `rsize`: read size, default DEFAULT_READSIZE.\n\n## Function `file_property(*da, **dkw)`\n\nA property whose value reloads if a file changes.\n\n## Function `files_property(func)`\n\nA property whose value reloads if any of a list of files changes.\n\nNote: this is just the default mode for `make_files_property`.\n\n`func` accepts the file path and returns the new value.\nThe underlying attribute name is `'_'+func.__name__`,\nthe default from `make_files_property()`.\nThe attribute *{attr_name}*`_lock` is a mutex controlling access to the property.\nThe attributes *{attr_name}*`_filestates` and *{attr_name}*`_paths` track the\nassociated file states.\nThe attribute *{attr_name}*`_lastpoll` tracks the last poll time.\n\nThe decorated function is passed the current list of files\nand returns the new list of files and the associated value.\n\nOne example use would be a configuration file with recurive\ninclude operations; the inner function would parse the first\nfile in the list, and the parse would accumulate this filename\nand those of any included files so that they can be monitored,\ntriggering a fresh parse if one changes.\n\nExample:\n\n    class C(object):\n      def __init__(self):\n        self._foo_path = '.foorc'\n      @files_property\n      def foo(self,paths):\n        new_paths, result = parse(paths[0])\n        return new_paths, result\n\nThe load function is called on the first access and on every\naccess thereafter where an associated file's `FileState` has\nchanged and the time since the last successful load exceeds\nthe poll_rate (1s). An attempt at avoiding races is made by\nignoring reloads that raise exceptions and ignoring reloads\nwhere files that were stat()ed during the change check have\nchanged state after the load.\n\n## Function `find(path, select=None, sort_names=True)`\n\nWalk a directory tree `path`\nyielding selected paths.\n\nNote: not selecting a directory prunes all its descendants.\n\n## Function `findup(path, test, first=False)`\n\nTest the pathname `abspath(path)` and each of its ancestors\nagainst the callable `test`,\nyielding paths satisfying the test.\n\nIf `first` is true (default `False`)\nthis function always yields exactly one value,\neither the first path satisfying the test or `None`.\nThis mode supports a use such as:\n\n    matched_path = next(findup(path, test, first=True))\n    # post condition: matched_path will be `None` on no match\n    # otherwise the first matching path\n\n## Function `gzifopen(path, mode='r', *a, **kw)`\n\nContext manager to open a file which may be a plain file or a gzipped file.\n\nIf `path` ends with `'.gz'` then the filesystem paths attempted\nare `path` and `path` without the extension, otherwise the\nfilesystem paths attempted are `path+'.gz'` and `path`.  In\nthis way a path ending in `'.gz'` indicates a preference for\na gzipped file otherwise an uncompressed file.\n\nHowever, if exactly one of the paths exists already then only\nthat path will be used.\n\nNote that the single character modes `'r'`, `'a'`, `'w'` and `'x'`\nare text mode for both uncompressed and gzipped opens,\nlike the builtin `open` and *unlike* `gzip.open`.\nThis is to ensure equivalent behaviour.\n\n## Function `iter_fd(fd, **kw)`\n\nIterate over data from the file descriptor `fd`.\n\n## Function `iter_file(f, **kw)`\n\nIterate over data from the file `f`.\n\n## Function `lines_of(fp, partials=None)`\n\nGenerator yielding lines from a file until EOF.\nIntended for file-like objects that lack a line iteration API.\n\n## Function `lockfile(path, *, ext=None, poll_interval=None, timeout=None, runstate: Optional[cs.resources.RunState] = <function uses_runstate.<locals>.<lambda> at 0x10a02e020>)`\n\nA context manager which takes and holds a lock file.\nAn open file descriptor is kept for the lock file as well\nto aid locating the process holding the lock file using eg `lsof`.\n\nParameters:\n* `path`: the base associated with the lock file.\n* `ext`: the extension to the base used to construct the lock file name.\n  Default: `'.lock'`\n* `timeout`: maximum time to wait before failing.\n  Default: `None` (wait forever).\n* `poll_interval`: polling frequency when timeout is not `0`.\n* `runstate`: optional `RunState` duck instance supporting cancellation.\n\n## Function `make_files_property(attr_name=None, unset_object=None, poll_rate=1.0)`\n\nConstruct a decorator that watches multiple associated files.\n\nParameters:\n* `attr_name`: the underlying attribute, default: `'_'+func.__name__`\n* `unset_object`: the sentinel value for \"uninitialised\", default: `None`\n* `poll_rate`: how often in seconds to poll the file for changes,\n  default from `DEFAULT_POLL_INTERVAL`: `1.0`\n\nThe attribute *attr_name*`_lock` controls access to the property.\nThe attributes *attr_name*`_filestates` and *attr_name*`_paths` track the\nassociated files' state.\nThe attribute *attr_name*`_lastpoll` tracks the last poll time.\n\nThe decorated function is passed the current list of files\nand returns the new list of files and the associated value.\n\nOne example use would be a configuration file with recursive\ninclude operations; the inner function would parse the first\nfile in the list, and the parse would accumulate this filename\nand those of any included files so that they can be monitored,\ntriggering a fresh parse if one changes.\n\nExample:\n\n    class C(object):\n      def __init__(self):\n        self._foo_path = '.foorc'\n      @files_property\n      def foo(self,paths):\n        new_paths, result = parse(paths[0])\n        return new_paths, result\n\nThe load function is called on the first access and on every\naccess thereafter where an associated file's `FileState` has\nchanged and the time since the last successful load exceeds\nthe `poll_rate`.\n\nAn attempt at avoiding races is made by\nignoring reloads that raise exceptions and ignoring reloads\nwhere files that were `os.stat()`ed during the change check have\nchanged state after the load.\n\n## Function `makelockfile(path, *, ext=None, poll_interval=None, timeout=None, runstate: Optional[cs.resources.RunState] = <function uses_runstate.<locals>.<lambda> at 0x10a02dee0>, keepopen=False, max_interval=37)`\n\nCreate a lockfile and return its path.\n\nThe lockfile can be removed with `os.remove`.\nThis is the core functionality supporting the `lockfile()`\ncontext manager.\n\nParameters:\n* `path`: the base associated with the lock file,\n  often the filesystem object whose access is being managed.\n* `ext`: the extension to the base used to construct the lockfile name.\n  Default: \".lock\"\n* `timeout`: maximum time to wait before failing.\n  Default: `None` (wait forever).\n  Note that zero is an accepted value\n  and requires the lock to succeed on the first attempt.\n* `poll_interval`: polling frequency when timeout is not 0.\n* `runstate`: optional `RunState` duck instance supporting cancellation.\n  Note that if a cancelled `RunState` is provided\n  no attempt will be made to make the lockfile.\n* `keepopen`: optional flag, default `False`:\n  if true, do not close the lockfile and return `(lockpath,lockfd)`\n  being the lock file path and the open file descriptor\n\n## Function `max_suffix(dirpath, prefix)`\n\nCompute the highest existing numeric suffix\nfor names starting with `prefix`.\n\nThis is generally used as a starting point for picking\na new numeric suffix.\n\n## Function `mkdirn(path, sep='')`\n\nCreate a new directory named `path+sep+n`,\nwhere `n` exceeds any name already present.\n\nParameters:\n* `path`: the basic directory path.\n* `sep`: a separator between `path` and `n`.\n  Default: `''`\n\n## Function `NamedTemporaryCopy(f, progress=False, progress_label=None, **kw)`\n\nA context manager yielding a temporary copy of `filename`\nas returned by `NamedTemporaryFile(**kw)`.\n\nParameters:\n* `f`: the name of the file to copy, or an open binary file,\n  or a `CornuCopyBuffer`\n* `progress`: an optional progress indicator, default `False`;\n  if a `bool`, show a progress bar for the copy phase if true;\n  if an `int`, show a progress bar for the copy phase\n  if the file size equals or exceeds the value;\n  otherwise it should be a `cs.progress.Progress` instance\n* `progress_label`: option progress bar label,\n  only used if a progress bar is made\nOther keyword parameters are passed to `tempfile.NamedTemporaryFile`.\n\n## Class `NullFile`\n\nWritable file that discards its input.\n\nNote that this is _not_ an open of `os.devnull`;\nit just discards writes and is not the underlying file descriptor.\n\n*Method `NullFile.__init__(self)`*:\nInitialise the file offset to 0.\n\n*Method `NullFile.flush(self)`*:\nFlush buffered data to the subsystem.\n\n*Method `NullFile.write(self, data)`*:\nDiscard data, advance file offset by length of data.\n\n## Class `Pathname(builtins.str)`\n\nSubclass of str presenting convenience properties useful for\nformat strings related to file paths.\n\n*Method `Pathname.__format__(self, fmt_spec)`*:\nCalling format(<Pathname>, fmt_spec) treat `fmt_spec` as a new style\nformatting string with a single positional parameter of `self`.\n\n*Property `Pathname.abs`*:\nThe absolute form of this Pathname.\n\n*Property `Pathname.basename`*:\nThe basename of this Pathname.\n\n*Property `Pathname.dirname`*:\nThe dirname of the Pathname.\n\n*Property `Pathname.isabs`*:\nWhether this Pathname is an absolute Pathname.\n\n*Property `Pathname.short`*:\nThe shortened form of this Pathname.\n\n*Method `Pathname.shorten(self, prefixes=None)`*:\nShorten a Pathname using ~ and ~user.\n\n## Function `poll_file(path, old_state, reload_file, missing_ok=False)`\n\nWatch a file for modification by polling its state as obtained\nby `FileState()`.\nCall `reload_file(path)` if the state changes.\nReturn `(new_state,reload_file(path))` if the file was modified\nand was unchanged (stable state) before and after the reload_file().\nOtherwise return `(None,None)`.\n\nThis may raise an `OSError` if the `path` cannot be `os.stat()`ed\nand of course for any exceptions that occur calling `reload_file`.\n\nIf `missing_ok` is true then a failure to `os.stat()` which\nraises `OSError` with `ENOENT` will just return `(None,None)`.\n\n## Function `read_data(fp, nbytes, rsize=None)`\n\nRead `nbytes` of data from `fp`, return the data.\n\nParameters:\n* `nbytes`: number of bytes to copy.\n  If `None`, copy until EOF.\n* `rsize`: read size, default `DEFAULT_READSIZE`.\n\n## Function `read_from(fp, rsize=None, tail_mode=False, tail_delay=None)`\n\nGenerator to present text or data from an open file until EOF.\n\nParameters:\n* `rsize`: read size, default: DEFAULT_READSIZE\n* `tail_mode`: if true, yield an empty chunk at EOF, allowing resumption\n  if the file grows.\n\n## Class `ReadMixin`\n\nUseful read methods to accomodate modes not necessarily available in a class.\n\nNote that this mixin presumes that the attribute `self._lock`\nis a threading.RLock like context manager.\n\nClasses using this mixin should consider overriding the default\n.datafrom method with something more efficient or direct.\n\n*Method `ReadMixin.bufferfrom(self, offset)`*:\nReturn a CornuCopyBuffer from the specified `offset`.\n\n*Method `ReadMixin.datafrom(self, offset, readsize=None)`*:\nYield data from the specified `offset` onward in some\napproximation of the \"natural\" chunk size.\n\n*NOTE*: UNLIKE the global datafrom() function, this method\nMUST NOT move the logical file position. Implementors may need\nto save and restore the file pointer within a lock around\nthe I/O if they do not use a direct access method like\nos.pread.\n\nThe aspiration here is to read data with only a single call\nto the underlying storage, and to return the chunks in\nnatural sizes instead of some default read size.\n\nClasses using this mixin must implement this method.\n\n*Method `ReadMixin.read(self, size=-1, offset=None, longread=False)`*:\nRead up to `size` bytes, honouring the \"single system call\"\nspirit unless `longread` is true.\n\nParameters:\n* `size`: the number of bytes requested. A size of -1 requests\n  all bytes to the end of the file.\n* `offset`: the starting point of the read; if None, use the\n  current file position; if not None, seek to this position\n  before reading, even if `size` == 0.\n* `longread`: switch from \"single system call\" to \"as many\n  as required to obtain `size` bytes\"; short data will still\n  be returned if the file is too short.\n\n*Method `ReadMixin.read_n(self, n)`*:\nRead `n` bytes of data and return them.\n\nUnlike traditional file.read(), RawIOBase.read() may return short\ndata, thus this workalike, which may only return short data if it\nhits EOF.\n\n*Method `ReadMixin.readinto(self, barray)`*:\nRead data into a bytearray.\n\n## Function `rewrite(filepath, srcf, mode='w', backup_ext=None, do_rename=False, do_diff=None, empty_ok=False, overwrite_anyway=False)`\n\nRewrite the file `filepath` with data from the file object `srcf`.\nReturn `True` if the content was changed, `False` if unchanged.\n\nParameters:\n* `filepath`: the name of the file to rewrite.\n* `srcf`: the source file containing the new content.\n* `mode`: the write-mode for the file, default `'w'` (for text);\n  use `'wb'` for binary data.\n* `empty_ok`: if true (default `False`),\n  do not raise `ValueError` if the new data are empty.\n* `overwrite_anyway`: if true (default `False`),\n  skip the content check and overwrite unconditionally.\n* `backup_ext`: if a nonempty string,\n  take a backup of the original at `filepath + backup_ext`.\n* `do_diff`: if not `None`, call `do_diff(filepath,tempfile)`.\n* `do_rename`: if true (default `False`),\n  rename the temp file to `filepath`\n  after copying the permission bits.\n  Otherwise (default), copy the tempfile to `filepath`;\n  this preserves the file's inode and permissions etc.\n\n## Function `rewrite_cmgr(filepath, mode='w', **kw)`\n\nRewrite a file, presented as a context manager.\n\nParameters:\n* `mode`: file write mode, defaulting to \"w\" for text.\n\nOther keyword parameters are passed to `rewrite()`.\n\nExample:\n\n    with rewrite_cmgr(pathname, do_rename=True) as f:\n        ... write new content to f ...\n\n## Class `RWFileBlockCache`\n\nA scratch file for storing data.\n\n*Method `RWFileBlockCache.__init__(self, pathname=None, dirpath=None, suffix=None, lock=None)`*:\nInitialise the file.\n\nParameters:\n* `pathname`: path of file. If None, create a new file with\n  tempfile.mkstemp using dir=`dirpath` and unlink that file once\n  opened.\n* `dirpath`: location for the file if made by mkstemp as above.\n* `lock`: an object to use as a mutex, allowing sharing with\n  some outer system. A Lock will be allocated if omitted.\n\n*Method `RWFileBlockCache.close(self)`*:\nClose the file descriptors.\n\n*Property `RWFileBlockCache.closed`*:\nTest whether the file descriptor has been closed.\n\n*Method `RWFileBlockCache.get(self, offset, length)`*:\nGet data from `offset` of length `length`.\n\n*Method `RWFileBlockCache.put(self, data)`*:\nStore `data`, return offset.\n\n## Function `saferename(oldpath, newpath)`\n\nRename a path using `os.rename()`,\nbut raise an exception if the target path already exists.\nNote: slightly racey.\n\n## Function `seekable(fp)`\n\nTry to test whether a filelike object is seekable.\n\nFirst try the `IOBase.seekable` method, otherwise try getting a file\ndescriptor from `fp.fileno` and `os.stat()`ing that,\notherwise return `False`.\n\n## Class `Tee`\n\nAn object with .write, .flush and .close methods\nwhich copies data to multiple output files.\n\n*Method `Tee.__init__(self, *fps)`*:\nInitialise the Tee; any arguments are taken to be output file objects.\n\n*Method `Tee.add(self, output)`*:\nAdd a new output.\n\n*Method `Tee.close(self)`*:\nClose all the outputs and close the Tee.\n\n*Method `Tee.flush(self)`*:\nFlush all the outputs.\n\n*Method `Tee.write(self, data)`*:\nWrite the data to all the outputs.\nNote: does not detect or accodmodate short writes.\n\n## Function `tee(fp, fp2)`\n\nContext manager duplicating `.write` and `.flush` from `fp` to `fp2`.\n\n## Function `tmpdir()`\n\nReturn the pathname of the default temporary directory for scratch data,\nthe environment variable `$TMPDIR` or `'/tmp'`.\n\n## Function `tmpdirn(tmp=None)`\n\nMake a new temporary directory with a numeric suffix.\n\n## Function `trysaferename(oldpath, newpath)`\n\nA `saferename()` that returns `True` on success,\n`False` on failure.\n\n# Release Log\n\n\n\n*Release 20240709*:\nrewrite: return True if the content is modified, False otherwise.\n\n*Release 20240630*:\nmakelockfile: cap the retry poll interval at 37s, just issue a warning if the lock file is already gone on exit (eg manual removal).\n\n*Release 20240316*:\nFixed release upload artifacts.\n\n*Release 20240201*:\n* makelockfile: new optional keepopen parameter - if true return the lock path and an open file descriptor.\n* lockfile(): keep the lock file open to aid debugging with eg lsof.\n\n*Release 20231129*:\n* atomic_filename: accept optional rename_func to use instead of os.rename, supports using FSTags.move.\n* atomic_filename: clean up the temp file.\n\n*Release 20230421*:\natomic_filename: raise FileExistsError instead of ValueError if not exists_ok and existspath(filename).\n\n*Release 20230401*:\nReplaced a lot of runstate plumbing with @uses_runstate.\n\n*Release 20221118*:\natomic_filename: use shutil.copystat instead of shutil.copymode, bugfix the associated logic.\n\n*Release 20220429*:\nMove longpath and shortpath to cs.fs, leave legacy names behind.\n\n*Release 20211208*:\n* Move NDJSON stuff to separate cs.ndjson module.\n* New gzifopen() function to open either a gzipped file or an uncompressed file.\n\n*Release 20210906*:\nAdditional release because I'm unsure @atomic_filename made it into the previous release.\n\n*Release 20210731*:\nNew atomic_filename context manager wrapping NamedTemporaryFile for presenting a file after its contents are prepared.\n\n*Release 20210717*:\nUpdates for recent cs.mappings-20210717 release.\n\n*Release 20210420*:\n* Forensic prefix for NamedTemporaryCopy.\n* UUIDNDJSONMapping: provide an empty .scan_errors on instantiation, avoids AttributeError if a scan never occurs.\n\n*Release 20210306*:\n* datafrom_fd: fix use-before-set of is_seekable.\n* RWFileBlockCache.put: remove assert(len(data)>0), adjust logic.\n\n*Release 20210131*:\ncrop_name: put ext before name_max, more likely to be specified, I think.\n\n*Release 20201227.1*:\nDocstring tweak.\n\n*Release 20201227*:\nscan_ndjson: optional errors_list to accrue errors during the scan.\n\n*Release 20201108*:\nBugfix rewrite_cmgr, failed to flush a file before copying its contents.\n\n*Release 20201102*:\n* Newline delimited JSON (ndjson) support.\n* New UUIDNDJSONMapping implementing a singleton cs.mappings.LoadableMappingMixin of cs.mappings.UUIDedDict subclass instances backed by an NDJSON file.\n* New scan_ndjson() function to yield newline delimited JSON records.\n* New write_ndjson() function to write newline delimited JSON records.\n* New append_ndjson() function to append a single newline delimited JSON record to a file.\n* New NamedTemporaryCopy for creating a temporary copy of a file with an optional progress bar.\n* rewrite_cmgr: turn into a simple wrapper for rewrite.\n* datafrom: make the offset parameter optional, tweak the @strable open function.\n* datafrom_fd: support nonseekable file descriptors, document that for these the file position is moved (no pread support).\n* New iter_fd and iter_file to return iterators of a file's data by utilising a CornuCopyBuffer.\n* New byteses_as_fd to return a readable file descriptor receiving an iterable of bytes via a CornuCopyBuffer.\n\n*Release 20200914*:\nNew common_path_prefix to compare pathnames.\n\n*Release 20200517*:\n* New crop_name() function to crop a file basename to fit within a specific length.\n* New find() function complimenting findup (UNTESTED).\n\n*Release 20200318*:\nNew findup(path,test) generator to walk up a file tree.\n\n*Release 20191006*:\nAdjust import of cs.deco.cachedmethod.\n\n*Release 20190729*:\ndatafrom_fd: make `offset` optional, defaulting to fd position at call.\n\n*Release 20190617*:\n@file_based: adjust use of @cached from cached(wrap0, **dkw) to cached(**dkw)(wrap0).\n\n*Release 20190101*:\ndatafrom: add maxlength keyword arg, bugfix fd and f.fileno cases.\n\n*Release 20181109*:\n* Various bugfixes for BackedFile.\n* Use a file's .read1 method if available in some scenarios.\n* makelockfile: accept am optional RunState control parameter, improve some behaviour.\n* datafrom_fd: new optional maxlength parameter limiting the amount of data returned.\n* datafrom_fd: by default, perform an initial read to align all subsequent reads with the readsize.\n* drop fdreader, add datafrom(f, offset, readsize) accepting a file or a file descriptor, expose datafrom_fd.\n* ReadMixin.datafrom now mandatory. Add ReadMixin.bufferfrom.\n* Assorted other improvements, minor bugfixes, documentation improvements.\n\n*Release 20171231.1*:\nTrite DISTINFO fix, no semantic changes.\n\n*Release 20171231*:\nUpdate imports, bump DEFAULT_READSIZE from 8KiB to 128KiB.\n\n*Release 20170608*:\n* Move lockfile and the SharedAppend* classes to cs.sharedfile.\n* BackedFile internal changes.\n\n*Release 20160918*:\n* BackedFile: redo implementation of .front_file to fix resource leak; add .__len__; add methods .spans, .front_spans and .back_spans to return information about front vs back data.\n* seek: bugfix: seek should return the new file offset.\n* BackedFile does not subclass RawIOBase, it just works like one.\n\n*Release 20160828*:\n* Use \"install_requires\" instead of \"requires\" in DISTINFO.\n* Rename maxFilenameSuffix to max_suffix.\n* Pull in OpenSocket file-like socket wrapper from cs.venti.tcp.\n* Update for cs.asynchron changes.\n* ... then move cs.fileutils.OpenSocket into new module cs.socketutils.\n* New Tee class, for copying output to multiple files.\n* NullFile class which discards writes (==> no-op for Tee).\n* New class SavingFile to accrue output and move to specified pathname when complete.\n* Memory usage improvements.\n* Polyfill non-threadsafe implementation of pread if os.pread does not exist.\n* New function seekable() to probe a file for seekability.\n* SharedAppendFile: provide new .open(filemode) context manager for allowing direct file output for external users.\n* New function makelockfile() presenting the logic to create a lock file separately from the lockfile context manager.\n* Assorted bugfixes and improvements.\n\n*Release 20150116*:\nInitial PyPI release.\n","description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"python2, python3","license":"GNU General Public License v3 or later (GPLv3+)","maintainer":null,"maintainer_email":null,"name":"cs.fileutils","package_url":"https://pypi.org/project/cs.fileutils/","platform":null,"project_url":"https://pypi.org/project/cs.fileutils/","project_urls":{"MonoRepo Commits":"https://bitbucket.org/cameron_simpson/css/commits/branch/main","Monorepo Git Mirror":"https://github.com/cameron-simpson/css","Monorepo Hg/Mercurial Mirror":"https://hg.sr.ht/~cameron-simpson/css","Source":"https://github.com/cameron-simpson/css/blob/main/lib/python/cs/fileutils.py"},"provides_extra":null,"release_url":"https://pypi.org/project/cs.fileutils/20240709/","requires_dist":["cs.buffer>=20240630","cs.context>=20240630","cs.deco>=20240709","cs.filestate>=20181107","cs.fs>=20220429","cs.gimmicks>=20211208","cs.lex>=20200914","cs.logutils>=20240630","cs.pfx>=20210731","cs.progress>=20240412","cs.py3>=20220523","cs.range>=20230701","cs.resources>=20240630","cs.result>=20240630","cs.threads>=20240630","cs.units"],"requires_python":null,"summary":"My grab bag of convenience functions for files and filenames/pathnames.","version":"20240709","yanked":false,"yanked_reason":null},"last_serial":24042602,"releases":{"20150116":[{"comment_text":"","digests":{"blake2b_256":"79ba8d01cf350ede6a120780de08b96acaf32630b11f23724d1823040fe7152f","md5":"99322a9058f1a0b401e1e475d5b740fe","sha256":"5a0092c0bf75d3168ef970bd21d297f8d300395b90e0c05d2412f8b81ba3c717"},"downloads":-1,"filename":"cs.fileutils-20150116.tar.gz","has_sig":false,"md5_digest":"99322a9058f1a0b401e1e475d5b740fe","packagetype":"sdist","python_version":"source","requires_python":null,"size":13204,"upload_time":"2015-01-18T06:14:09","upload_time_iso_8601":"2015-01-18T06:14:09.809504Z","url":"https://files.pythonhosted.org/packages/79/ba/8d01cf350ede6a120780de08b96acaf32630b11f23724d1823040fe7152f/cs.fileutils-20150116.tar.gz","yanked":false,"yanked_reason":null}],"20160828":[{"comment_text":"","digests":{"blake2b_256":"93b04b5277e9254fcaf1dd72db6025df101b1e912a230e38cc9cfea9e407e02d","md5":"f8509570fbb01404d266b541aa49ddc1","sha256":"b1c899ff3cb1a05a8ddb327b126da5bb139460083905dab7e74d7199f049de7d"},"downloads":-1,"filename":"cs.fileutils-20160828.tar.gz","has_sig":false,"md5_digest":"f8509570fbb01404d266b541aa49ddc1","packagetype":"sdist","python_version":"source","requires_python":null,"size":15312,"upload_time":"2016-08-28T06:05:24","upload_time_iso_8601":"2016-08-28T06:05:24.555210Z","url":"https://files.pythonhosted.org/packages/93/b0/4b5277e9254fcaf1dd72db6025df101b1e912a230e38cc9cfea9e407e02d/cs.fileutils-20160828.tar.gz","yanked":false,"yanked_reason":null}],"20160918":[{"comment_text":"","digests":{"blake2b_256":"850334018f48e4ae8197ca74d2bbad75b5a4df4111f9d8b674297e2b0b0049be","md5":"7a88d03490bc316e90726986df03dc42","sha256":"3c4dae756c39c9c13b42dae1220079378c772f970931c857e28497a2435ff649"},"downloads":-1,"filename":"cs.fileutils-20160918.tar.gz","has_sig":false,"md5_digest":"7a88d03490bc316e90726986df03dc42","packagetype":"sdist","python_version":"source","requires_python":null,"size":15321,"upload_time":"2016-09-18T04:59:18","upload_time_iso_8601":"2016-09-18T04:59:18.617230Z","url":"https://files.pythonhosted.org/packages/85/03/34018f48e4ae8197ca74d2bbad75b5a4df4111f9d8b674297e2b0b0049be/cs.fileutils-20160918.tar.gz","yanked":false,"yanked_reason":null}],"20171231.1":[{"comment_text":"","digests":{"blake2b_256":"99671a1afb9860c55b0c3bce3ecbe441325a7619164a467eb496f1f61d65ad46","md5":"348ce9261e79e844377b55c920dedbac","sha256":"a7fbd8d719fbf79f3b434567df80a5563ef9059db0ec5da1739858e690c59002"},"downloads":-1,"filename":"cs.fileutils-20171231.1.tar.gz","has_sig":false,"md5_digest":"348ce9261e79e844377b55c920dedbac","packagetype":"sdist","python_version":"source","requires_python":null,"size":12265,"upload_time":"2017-12-30T23:12:27","upload_time_iso_8601":"2017-12-30T23:12:27.006153Z","url":"https://files.pythonhosted.org/packages/99/67/1a1afb9860c55b0c3bce3ecbe441325a7619164a467eb496f1f61d65ad46/cs.fileutils-20171231.1.tar.gz","yanked":false,"yanked_reason":null}],"20181109":[{"comment_text":"","digests":{"blake2b_256":"6a3e051c23c41130984c2d251f3456fdab8399b03ab066d90623ac0675f12693","md5":"b9028f81861774543ad069b07ad986a3","sha256":"3bc37749989af08308965d41e504122da0b5e857c6b8eb4cc3b747300f20f438"},"downloads":-1,"filename":"cs.fileutils-20181109.tar.gz","has_sig":false,"md5_digest":"b9028f81861774543ad069b07ad986a3","packagetype":"sdist","python_version":"source","requires_python":null,"size":18162,"upload_time":"2018-11-08T22:44:45","upload_time_iso_8601":"2018-11-08T22:44:45.152528Z","url":"https://files.pythonhosted.org/packages/6a/3e/051c23c41130984c2d251f3456fdab8399b03ab066d90623ac0675f12693/cs.fileutils-20181109.tar.gz","yanked":false,"yanked_reason":null}],"20190101":[{"comment_text":"","digests":{"blake2b_256":"add3c368c4dbfab430a0697358f0107b16f5fd9b558c76aac3e6e9facb7490e7","md5":"6fc1d8c37c406af29208d682f31fc896","sha256":"3c1af48d749abe1f25ab2fa7b8e23ae96b59ade2479d1faaae92bf892b97c3a3"},"downloads":-1,"filename":"cs.fileutils-20190101.tar.gz","has_sig":false,"md5_digest":"6fc1d8c37c406af29208d682f31fc896","packagetype":"sdist","python_version":"source","requires_python":null,"size":18258,"upload_time":"2018-12-31T22:28:48","upload_time_iso_8601":"2018-12-31T22:28:48.271849Z","url":"https://files.pythonhosted.org/packages/ad/d3/c368c4dbfab430a0697358f0107b16f5fd9b558c76aac3e6e9facb7490e7/cs.fileutils-20190101.tar.gz","yanked":false,"yanked_reason":null}],"20190617":[{"comment_text":"","digests":{"blake2b_256":"c187ecaa34e796db27ceb3de23bde02c4f066f025ea2f5666d847bedc49c30e0","md5":"f1609030161333467733dd9fe2cbec6e","sha256":"41a82afe9fbf62758c521721ea85dc50208a68d33c5f45307ad3cc478bfdb55c"},"downloads":-1,"filename":"cs.fileutils-20190617.tar.gz","has_sig":false,"md5_digest":"f1609030161333467733dd9fe2cbec6e","packagetype":"sdist","python_version":"source","requires_python":null,"size":21379,"upload_time":"2019-06-17T02:54:13","upload_time_iso_8601":"2019-06-17T02:54:13.039076Z","url":"https://files.pythonhosted.org/packages/c1/87/ecaa34e796db27ceb3de23bde02c4f066f025ea2f5666d847bedc49c30e0/cs.fileutils-20190617.tar.gz","yanked":false,"yanked_reason":null}],"20190729":[{"comment_text":"","digests":{"blake2b_256":"fc6883f04a9a4a8970b77b9fc8d89ccf2538bf3a9a71680b493b45df0219fbc8","md5":"2492f2f6c65ccc974cc238c06ddf16dd","sha256":"258f3c9d138957e3dc47a57716067194b3d9a3141be25f25f125e6016aa52633"},"downloads":-1,"filename":"cs.fileutils-20190729.tar.gz","has_sig":false,"md5_digest":"2492f2f6c65ccc974cc238c06ddf16dd","packagetype":"sdist","python_version":"source","requires_python":null,"size":21379,"upload_time":"2019-07-28T23:59:13","upload_time_iso_8601":"2019-07-28T23:59:13.910031Z","url":"https://files.pythonhosted.org/packages/fc/68/83f04a9a4a8970b77b9fc8d89ccf2538bf3a9a71680b493b45df0219fbc8/cs.fileutils-20190729.tar.gz","yanked":false,"yanked_reason":null}],"20191006":[{"comment_text":"","digests":{"blake2b_256":"c29a30e4356af403d12a4a977ecf109c6cd17815b3fb58e7da3e7941291af941","md5":"e8992e76d9ae18dc5ceb11104a66fb67","sha256":"4232521d92e1fc510fb05a5276a6a24971f55562d3e9e896487810455c65e245"},"downloads":-1,"filename":"cs.fileutils-20191006.tar.gz","has_sig":false,"md5_digest":"e8992e76d9ae18dc5ceb11104a66fb67","packagetype":"sdist","python_version":"source","requires_python":null,"size":25425,"upload_time":"2019-10-06T03:07:28","upload_time_iso_8601":"2019-10-06T03:07:28.123833Z","url":"https://files.pythonhosted.org/packages/c2/9a/30e4356af403d12a4a977ecf109c6cd17815b3fb58e7da3e7941291af941/cs.fileutils-20191006.tar.gz","yanked":false,"yanked_reason":null}],"20200318":[{"comment_text":"","digests":{"blake2b_256":"9335243006df6c9df0bc6883cea464b4d8d44e00eb52413e7d617fa329082451","md5":"f0b1dd185637bdbcbd63ab0a7bf15e00","sha256":"54ab670b507215237f59658d85567f780b5f2250af125fe14b68d426c75ff9f1"},"downloads":-1,"filename":"cs.fileutils-20200318.tar.gz","has_sig":false,"md5_digest":"f0b1dd185637bdbcbd63ab0a7bf15e00","packagetype":"sdist","python_version":"source","requires_python":null,"size":29672,"upload_time":"2020-03-17T21:07:02","upload_time_iso_8601":"2020-03-17T21:07:02.851527Z","url":"https://files.pythonhosted.org/packages/93/35/243006df6c9df0bc6883cea464b4d8d44e00eb52413e7d617fa329082451/cs.fileutils-20200318.tar.gz","yanked":false,"yanked_reason":null}],"20200517":[{"comment_text":"","digests":{"blake2b_256":"37a101f859c5fddb5c0bcb721aaa16e0fbe512a1c53ffa28cf3d3be81824f09a","md5":"af2b9c7eceb115616df35fe6f1035d04","sha256":"41a1a2412007f80b35c451bc9d455452f0b77b1c1816ad82ac2f6056839d466e"},"downloads":-1,"filename":"cs.fileutils-20200517.tar.gz","has_sig":false,"md5_digest":"af2b9c7eceb115616df35fe6f1035d04","packagetype":"sdist","python_version":"source","requires_python":null,"size":27696,"upload_time":"2020-05-17T11:58:04","upload_time_iso_8601":"2020-05-17T11:58:04.267497Z","url":"https://files.pythonhosted.org/packages/37/a1/01f859c5fddb5c0bcb721aaa16e0fbe512a1c53ffa28cf3d3be81824f09a/cs.fileutils-20200517.tar.gz","yanked":false,"yanked_reason":null}],"20200914":[{"comment_text":"","digests":{"blake2b_256":"3a6e98e80ed158a226ebcc0f68e21a6f2638ed02f1032f32727201a8b702e84a","md5":"d05013bd449d8e674a7e4b7793a1dde2","sha256":"d18633d6ed9a8a0d07244d9921a954d9afa90321c27ef71f8f46a5021a352224"},"downloads":-1,"filename":"cs.fileutils-20200914.tar.gz","has_sig":false,"md5_digest":"d05013bd449d8e674a7e4b7793a1dde2","packagetype":"sdist","python_version":"source","requires_python":null,"size":39501,"upload_time":"2020-09-14T01:36:58","upload_time_iso_8601":"2020-09-14T01:36:58.450784Z","url":"https://files.pythonhosted.org/packages/3a/6e/98e80ed158a226ebcc0f68e21a6f2638ed02f1032f32727201a8b702e84a/cs.fileutils-20200914.tar.gz","yanked":false,"yanked_reason":null}],"20201102":[{"comment_text":"","digests":{"blake2b_256":"bbcb2ce2ab13690597c4b6f4117d750ba9b96d0ba51ee67bafd487addbab4d16","md5":"e0d82b9e2ffa54dabece60a14ad6ec7a","sha256":"05b51a620c9bbe7cab48b84eae21a2b82b30dc348b801e779b6362ec232dd82a"},"downloads":-1,"filename":"cs.fileutils-20201102.tar.gz","has_sig":false,"md5_digest":"e0d82b9e2ffa54dabece60a14ad6ec7a","packagetype":"sdist","python_version":"source","requires_python":null,"size":49092,"upload_time":"2020-11-01T22:24:01","upload_time_iso_8601":"2020-11-01T22:24:01.727631Z","url":"https://files.pythonhosted.org/packages/bb/cb/2ce2ab13690597c4b6f4117d750ba9b96d0ba51ee67bafd487addbab4d16/cs.fileutils-20201102.tar.gz","yanked":false,"yanked_reason":null}],"20201108":[{"comment_text":"","digests":{"blake2b_256":"24ce4a3918232afc8f68a7a3f259331665f7fc1abb83b7d5f4ceaa5c249849aa","md5":"16859a5ae5d35ab4fef24594a6644c92","sha256":"c330c7eb38b91b598eb60908a947fba11e4a052263d11577ab9796bf0ec46a82"},"downloads":-1,"filename":"cs.fileutils-20201108.tar.gz","has_sig":false,"md5_digest":"16859a5ae5d35ab4fef24594a6644c92","packagetype":"sdist","python_version":"source","requires_python":null,"size":48231,"upload_time":"2020-11-08T10:15:22","upload_time_iso_8601":"2020-11-08T10:15:22.179770Z","url":"https://files.pythonhosted.org/packages/24/ce/4a3918232afc8f68a7a3f259331665f7fc1abb83b7d5f4ceaa5c249849aa/cs.fileutils-20201108.tar.gz","yanked":false,"yanked_reason":null}],"20201227":[{"comment_text":"","digests":{"blake2b_256":"6502cadcb8953066e89a059470fee7bc4bb93ff70d38a3e09b500d082f3fb584","md5":"72b0ee68165ae47a638e65425cd7d2db","sha256":"ed2d339c33b06257470b0258f931d27fb737fc04ee6e5d9d99268b51baf876a2"},"downloads":-1,"filename":"cs.fileutils-20201227.tar.gz","has_sig":false,"md5_digest":"72b0ee68165ae47a638e65425cd7d2db","packagetype":"sdist","python_version":"source","requires_python":null,"size":49294,"upload_time":"2020-12-27T01:59:04","upload_time_iso_8601":"2020-12-27T01:59:04.256272Z","url":"https://files.pythonhosted.org/packages/65/02/cadcb8953066e89a059470fee7bc4bb93ff70d38a3e09b500d082f3fb584/cs.fileutils-20201227.tar.gz","yanked":false,"yanked_reason":null}],"20201227.1":[{"comment_text":"","digests":{"blake2b_256":"ca23a6985dea9b049e7197d44072e3ddc71057fee2569487efb350e5f6a193df","md5":"17d233f42fd60d3403215a4a4713e95c","sha256":"a0c431c6b84268d372ccef7aae32e12f9bd7585ab454c2fc555ede0b6b005c72"},"downloads":-1,"filename":"cs.fileutils-20201227.1.tar.gz","has_sig":false,"md5_digest":"17d233f42fd60d3403215a4a4713e95c","packagetype":"sdist","python_version":"source","requires_python":null,"size":49359,"upload_time":"2020-12-27T02:08:00","upload_time_iso_8601":"2020-12-27T02:08:00.710786Z","url":"https://files.pythonhosted.org/packages/ca/23/a6985dea9b049e7197d44072e3ddc71057fee2569487efb350e5f6a193df/cs.fileutils-20201227.1.tar.gz","yanked":false,"yanked_reason":null}],"20210131":[{"comment_text":"","digests":{"blake2b_256":"d47b69b021a4514007e055a9dbbc9693fd0dfe6ed4547d980c887c3e0252244e","md5":"971b5aa6eca1d082373fa2f98d0be923","sha256":"804a012dbec888a0d92f32d048d5d335d97f262bcc24d107c95a13f486bd09c7"},"downloads":-1,"filename":"cs.fileutils-20210131.tar.gz","has_sig":false,"md5_digest":"971b5aa6eca1d082373fa2f98d0be923","packagetype":"sdist","python_version":"source","requires_python":null,"size":49457,"upload_time":"2021-01-30T23:54:44","upload_time_iso_8601":"2021-01-30T23:54:44.583060Z","url":"https://files.pythonhosted.org/packages/d4/7b/69b021a4514007e055a9dbbc9693fd0dfe6ed4547d980c887c3e0252244e/cs.fileutils-20210131.tar.gz","yanked":false,"yanked_reason":null}],"20210306":[{"comment_text":"","digests":{"blake2b_256":"b19a5598b8640dcb8cdd0e3d6230d9e20b43d0712dd38bacca369cc10cc04d4b","md5":"a9eac6905678f880c7322bb99f1df681","sha256":"08317c41035f3d2a415067d8c4df8db0675ac2d8686347dc86a2236a9f27870b"},"downloads":-1,"filename":"cs.fileutils-20210306.tar.gz","has_sig":false,"md5_digest":"a9eac6905678f880c7322bb99f1df681","packagetype":"sdist","python_version":"source","requires_python":null,"size":49622,"upload_time":"2021-03-05T23:45:25","upload_time_iso_8601":"2021-03-05T23:45:25.192369Z","url":"https://files.pythonhosted.org/packages/b1/9a/5598b8640dcb8cdd0e3d6230d9e20b43d0712dd38bacca369cc10cc04d4b/cs.fileutils-20210306.tar.gz","yanked":false,"yanked_reason":null}],"20210420":[{"comment_text":"","digests":{"blake2b_256":"bb0aeffa6d9225354f5788a439a01835df0af278755e648b8c77886cac180173","md5":"c4ef828b24d265af9b6e7c549020caeb","sha256":"2e45ef5a394e3816210ff8c2fd3ee54ad197851dea1776aec94760e13f8cf8d2"},"downloads":-1,"filename":"cs.fileutils-20210420.tar.gz","has_sig":false,"md5_digest":"c4ef828b24d265af9b6e7c549020caeb","packagetype":"sdist","python_version":"source","requires_python":null,"size":50558,"upload_time":"2021-04-20T02:03:00","upload_time_iso_8601":"2021-04-20T02:03:00.902466Z","url":"https://files.pythonhosted.org/packages/bb/0a/effa6d9225354f5788a439a01835df0af278755e648b8c77886cac180173/cs.fileutils-20210420.tar.gz","yanked":false,"yanked_reason":null}],"20210717":[{"comment_text":"","digests":{"blake2b_256":"8163b79c79485102b34cd639da16674e73b6d543c1126c5281a94970a2acd6c3","md5":"335bd65b8f57bf1b5cc41b215375c792","sha256":"f430187f2fc5e0116289e89d67c70d53508e0ccea89bc4712f728d7ab8aa0ff6"},"downloads":-1,"filename":"cs.fileutils-20210717.tar.gz","has_sig":false,"md5_digest":"335bd65b8f57bf1b5cc41b215375c792","packagetype":"sdist","python_version":"source","requires_python":null,"size":50708,"upload_time":"2021-07-17T02:05:03","upload_time_iso_8601":"2021-07-17T02:05:03.311263Z","url":"https://files.pythonhosted.org/packages/81/63/b79c79485102b34cd639da16674e73b6d543c1126c5281a94970a2acd6c3/cs.fileutils-20210717.tar.gz","yanked":false,"yanked_reason":null}],"20210731":[{"comment_text":"","digests":{"blake2b_256":"8c3ea445620af03148e36933fef6dba4c007afc3fff2b44babaea827a5738a71","md5":"fb570a6e7ac295962c8d59f5f484a647","sha256":"c41de2b46699579343d19a92632830c583c178375f49dee4f5580cb6ecb43d84"},"downloads":-1,"filename":"cs.fileutils-20210731.tar.gz","has_sig":false,"md5_digest":"fb570a6e7ac295962c8d59f5f484a647","packagetype":"sdist","python_version":"source","requires_python":null,"size":50807,"upload_time":"2021-07-31T05:37:19","upload_time_iso_8601":"2021-07-31T05:37:19.370164Z","url":"https://files.pythonhosted.org/packages/8c/3e/a445620af03148e36933fef6dba4c007afc3fff2b44babaea827a5738a71/cs.fileutils-20210731.tar.gz","yanked":false,"yanked_reason":null}],"20210906":[{"comment_text":"","digests":{"blake2b_256":"dc0f43ded3120a82fc6f4732607ce6f06780d7fda16258860d6dc9c5aa5b9220","md5":"1ca6055a18344cf6a47cb27defc8b5fb","sha256":"885c19a5c28b740cb9974404d7f52a40237f7c044ed196ff43ed62b6b37cf562"},"downloads":-1,"filename":"cs.fileutils-20210906.tar.gz","has_sig":false,"md5_digest":"1ca6055a18344cf6a47cb27defc8b5fb","packagetype":"sdist","python_version":"source","requires_python":null,"size":55754,"upload_time":"2021-09-05T23:09:09","upload_time_iso_8601":"2021-09-05T23:09:09.070434Z","url":"https://files.pythonhosted.org/packages/dc/0f/43ded3120a82fc6f4732607ce6f06780d7fda16258860d6dc9c5aa5b9220/cs.fileutils-20210906.tar.gz","yanked":false,"yanked_reason":null}],"20220429":[{"comment_text":"","digests":{"blake2b_256":"90c6165855235eefa8c7d11e9bc88a1110e8cc3c4b6703ee75afc319e4843de3","md5":"8fc6429884c0b860db98cdd04e3ae512","sha256":"e05725384705aedde63fef3011e27f013f545014f0f5e2795402cbdd97d05f28"},"downloads":-1,"filename":"cs.fileutils-20220429-py3-none-any.whl","has_sig":false,"md5_digest":"8fc6429884c0b860db98cdd04e3ae512","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":26607,"upload_time":"2022-04-29T08:52:40","upload_time_iso_8601":"2022-04-29T08:52:40.944442Z","url":"https://files.pythonhosted.org/packages/90/c6/165855235eefa8c7d11e9bc88a1110e8cc3c4b6703ee75afc319e4843de3/cs.fileutils-20220429-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d11ebedece520bdd17cf02324ba18eacfb40f32e6b8f44e6a61c18bb23a37880","md5":"ab7c6cdab92122a68db26682f5afefa5","sha256":"43cb03b2e5cfa1b32e9554cc8a07d9d1ff93075a0995badfb85d58460aa43208"},"downloads":-1,"filename":"cs.fileutils-20220429.tar.gz","has_sig":false,"md5_digest":"ab7c6cdab92122a68db26682f5afefa5","packagetype":"sdist","python_version":"source","requires_python":null,"size":41715,"upload_time":"2022-04-29T08:52:43","upload_time_iso_8601":"2022-04-29T08:52:43.749902Z","url":"https://files.pythonhosted.org/packages/d1/1e/bedece520bdd17cf02324ba18eacfb40f32e6b8f44e6a61c18bb23a37880/cs.fileutils-20220429.tar.gz","yanked":false,"yanked_reason":null}],"20221118":[{"comment_text":"","digests":{"blake2b_256":"67f1988745cf5fe8d230ceadfb3299c08f93c4621d611658a45e3b5409389754","md5":"e46064e1152ce3140cf3ad3f891f9c17","sha256":"49fe22c8d06e701c1478ce9ac778d84cad6b1c3c882398d897f9817ecbe02fdf"},"downloads":-1,"filename":"cs.fileutils-20221118-py3-none-any.whl","has_sig":false,"md5_digest":"e46064e1152ce3140cf3ad3f891f9c17","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":26719,"upload_time":"2022-11-18T03:54:43","upload_time_iso_8601":"2022-11-18T03:54:43.290320Z","url":"https://files.pythonhosted.org/packages/67/f1/988745cf5fe8d230ceadfb3299c08f93c4621d611658a45e3b5409389754/cs.fileutils-20221118-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"961d9fd1762768addc1cc361e2b06a1063e81974f56fb21fd077cc4355a98a91","md5":"02334a9af818372a4a441f09f3c8ee97","sha256":"177112ee20495c3d8510e5229716ed92155ae510f6a6ede01eb14bb2779e4c0b"},"downloads":-1,"filename":"cs.fileutils-20221118.tar.gz","has_sig":false,"md5_digest":"02334a9af818372a4a441f09f3c8ee97","packagetype":"sdist","python_version":"source","requires_python":null,"size":41917,"upload_time":"2022-11-18T03:54:45","upload_time_iso_8601":"2022-11-18T03:54:45.226073Z","url":"https://files.pythonhosted.org/packages/96/1d/9fd1762768addc1cc361e2b06a1063e81974f56fb21fd077cc4355a98a91/cs.fileutils-20221118.tar.gz","yanked":false,"yanked_reason":null}],"20230401":[{"comment_text":"","digests":{"blake2b_256":"08692aaa949563386c867d8ced5224b0bff16a88c96da7ddebd1eaf39eaaf8fd","md5":"8fc77a5712963090a592b3f97986713a","sha256":"9ac8272ce09f112b4cf160da2b02adaf6c0f9e42343ff9b9cc9116ba952efb90"},"downloads":-1,"filename":"cs.fileutils-20230401-py3-none-any.whl","has_sig":false,"md5_digest":"8fc77a5712963090a592b3f97986713a","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":26743,"upload_time":"2023-04-01T05:10:11","upload_time_iso_8601":"2023-04-01T05:10:11.855606Z","url":"https://files.pythonhosted.org/packages/08/69/2aaa949563386c867d8ced5224b0bff16a88c96da7ddebd1eaf39eaaf8fd/cs.fileutils-20230401-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3da842952e80e23fd9afe0d84d30eb700a33bf0e0b25b0d8d3cfc4f33513b107","md5":"fe85082db59ab594f913f3e4e49485be","sha256":"a540a2d066b63f33a52852d0229254cfe171f50feb4d88db0ff09a85c9ec8ec4"},"downloads":-1,"filename":"cs.fileutils-20230401.tar.gz","has_sig":false,"md5_digest":"fe85082db59ab594f913f3e4e49485be","packagetype":"sdist","python_version":"source","requires_python":null,"size":42005,"upload_time":"2023-04-01T05:10:13","upload_time_iso_8601":"2023-04-01T05:10:13.623463Z","url":"https://files.pythonhosted.org/packages/3d/a8/42952e80e23fd9afe0d84d30eb700a33bf0e0b25b0d8d3cfc4f33513b107/cs.fileutils-20230401.tar.gz","yanked":false,"yanked_reason":null}],"20230421":[{"comment_text":"","digests":{"blake2b_256":"44a797a8a4b4732b55e00b9ec32dc27e206f425e45656630afd9345227e4ef3a","md5":"b37d3d724c5ac42fce7daa7c853affb8","sha256":"8b0e17e1e17db22777d05406ae8dccf2ed96b99e9a5b688acaca380db163c14e"},"downloads":-1,"filename":"cs.fileutils-20230421-py3-none-any.whl","has_sig":false,"md5_digest":"b37d3d724c5ac42fce7daa7c853affb8","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":26781,"upload_time":"2023-04-21T03:56:00","upload_time_iso_8601":"2023-04-21T03:56:00.044880Z","url":"https://files.pythonhosted.org/packages/44/a7/97a8a4b4732b55e00b9ec32dc27e206f425e45656630afd9345227e4ef3a/cs.fileutils-20230421-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c0c640f4b9caa65c646b21b01cc7d70ec08db0ed1958f33dfda8fadcac649305","md5":"9e33a7f371ee1069fc194def83ff4f8f","sha256":"c40e9c7296c050378c05c3bc86964f221c462d0f66c88c7e8c3ee2a7b0b8adaa"},"downloads":-1,"filename":"cs.fileutils-20230421.tar.gz","has_sig":false,"md5_digest":"9e33a7f371ee1069fc194def83ff4f8f","packagetype":"sdist","python_version":"source","requires_python":null,"size":42479,"upload_time":"2023-04-21T03:56:02","upload_time_iso_8601":"2023-04-21T03:56:02.718712Z","url":"https://files.pythonhosted.org/packages/c0/c6/40f4b9caa65c646b21b01cc7d70ec08db0ed1958f33dfda8fadcac649305/cs.fileutils-20230421.tar.gz","yanked":false,"yanked_reason":null}],"20231129":[{"comment_text":"","digests":{"blake2b_256":"b6be5e466cc20f511e6a03855836c70de438b9923a17755dc55c281a6497f216","md5":"117224fa45d5fe03f33f7d69f6da99d4","sha256":"ea9b3325fe1d858fcd1ff2b05b773adb33c732ed92d93e78de60e6baf83008d4"},"downloads":-1,"filename":"cs.fileutils-20231129-py3-none-any.whl","has_sig":false,"md5_digest":"117224fa45d5fe03f33f7d69f6da99d4","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":27034,"upload_time":"2023-11-29T09:28:51","upload_time_iso_8601":"2023-11-29T09:28:51.649022Z","url":"https://files.pythonhosted.org/packages/b6/be/5e466cc20f511e6a03855836c70de438b9923a17755dc55c281a6497f216/cs.fileutils-20231129-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"80d3cd2482c5a3331a25b52fc6a1957dbab108d3454fd2990d07cc8a451f9816","md5":"9a40a21b09a12cb249867b7c60cd33e9","sha256":"503b1ba262f0cd17f82b94019c3b39adfcd71ecd852993217ffdb261f2408415"},"downloads":-1,"filename":"cs.fileutils-20231129.tar.gz","has_sig":false,"md5_digest":"9a40a21b09a12cb249867b7c60cd33e9","packagetype":"sdist","python_version":"source","requires_python":null,"size":43188,"upload_time":"2023-11-29T09:28:53","upload_time_iso_8601":"2023-11-29T09:28:53.978289Z","url":"https://files.pythonhosted.org/packages/80/d3/cd2482c5a3331a25b52fc6a1957dbab108d3454fd2990d07cc8a451f9816/cs.fileutils-20231129.tar.gz","yanked":false,"yanked_reason":null}],"20240201":[{"comment_text":"","digests":{"blake2b_256":"6cf33506a7ed77f237b5d097e742ea9dbd082e22b0e71f318b3ffccc90ef2da7","md5":"6950a0e72a0f9a46de1fc76a128b85fb","sha256":"ea90ade5546db1d4ca6b94fd5b59595f84c7ae954740bdc615fff1f1c60ededc"},"downloads":-1,"filename":"cs.fileutils-20240201-py3-none-any.whl","has_sig":false,"md5_digest":"6950a0e72a0f9a46de1fc76a128b85fb","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":27376,"upload_time":"2024-02-01T00:01:44","upload_time_iso_8601":"2024-02-01T00:01:44.418157Z","url":"https://files.pythonhosted.org/packages/6c/f3/3506a7ed77f237b5d097e742ea9dbd082e22b0e71f318b3ffccc90ef2da7/cs.fileutils-20240201-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"61ae652a1ee71b190c8dc5c82b888e0779a59a462c9f049f82f94bf454a25a98","md5":"0920d45e6c6e84ed8821487d2e06474a","sha256":"ad926064118253d7103377c4e7a19df9a5b4fef6600c34d4d39b99e8f32d1913"},"downloads":-1,"filename":"cs.fileutils-20240201.tar.gz","has_sig":false,"md5_digest":"0920d45e6c6e84ed8821487d2e06474a","packagetype":"sdist","python_version":"source","requires_python":null,"size":44038,"upload_time":"2024-02-01T00:01:46","upload_time_iso_8601":"2024-02-01T00:01:46.940617Z","url":"https://files.pythonhosted.org/packages/61/ae/652a1ee71b190c8dc5c82b888e0779a59a462c9f049f82f94bf454a25a98/cs.fileutils-20240201.tar.gz","yanked":false,"yanked_reason":null}],"20240316":[{"comment_text":"","digests":{"blake2b_256":"19552012a8c5949abfa66a47b539afd8faf52afbfb8ce5c5957547993106e067","md5":"71e2c9692d1cc3bab87a891c6ed5b108","sha256":"04509f2e3860b435d66c7f56b3d80e38ed77db9e809dbc7162cda964d2b92650"},"downloads":-1,"filename":"cs.fileutils-20240316-py3-none-any.whl","has_sig":false,"md5_digest":"71e2c9692d1cc3bab87a891c6ed5b108","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":27400,"upload_time":"2024-03-16T06:37:50","upload_time_iso_8601":"2024-03-16T06:37:50.978188Z","url":"https://files.pythonhosted.org/packages/19/55/2012a8c5949abfa66a47b539afd8faf52afbfb8ce5c5957547993106e067/cs.fileutils-20240316-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"a03ea8f14c8e038cd1d8d7e88167a95ebd9e4d085750a0ac98049142baa498ee","md5":"8e7f3b070c1d1b4ddd4f5d5adc9e5d91","sha256":"2c2c4e4fe30e4490ce3bcd0324bb5ae530c8ffc1a844b0c16689d29b33213547"},"downloads":-1,"filename":"cs.fileutils-20240316.tar.gz","has_sig":false,"md5_digest":"8e7f3b070c1d1b4ddd4f5d5adc9e5d91","packagetype":"sdist","python_version":"source","requires_python":null,"size":43600,"upload_time":"2024-03-16T06:37:52","upload_time_iso_8601":"2024-03-16T06:37:52.939915Z","url":"https://files.pythonhosted.org/packages/a0/3e/a8f14c8e038cd1d8d7e88167a95ebd9e4d085750a0ac98049142baa498ee/cs.fileutils-20240316.tar.gz","yanked":false,"yanked_reason":null}],"20240630":[{"comment_text":"","digests":{"blake2b_256":"c72fd994f0f7c1c34cad119c3e1737b30e5b78da84aaefb2b95094a66cec43f3","md5":"1a4a1ed11d4fc813b66a510cb45c8077","sha256":"ab68328e3f53e85e9ff0fa22777f5b2df7b3f482af3768d87c88219852a1740b"},"downloads":-1,"filename":"cs.fileutils-20240630-py3-none-any.whl","has_sig":false,"md5_digest":"1a4a1ed11d4fc813b66a510cb45c8077","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":28824,"upload_time":"2024-06-30T02:16:04","upload_time_iso_8601":"2024-06-30T02:16:04.497671Z","url":"https://files.pythonhosted.org/packages/c7/2f/d994f0f7c1c34cad119c3e1737b30e5b78da84aaefb2b95094a66cec43f3/cs.fileutils-20240630-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e4bbe46586d87ae09bacad8025cf04c537e4b16eab3ea1480a0d426585aa2d3f","md5":"97198a7d05e6b3fa8f3b8657102b60fe","sha256":"9bf44d8522f27c88e86d173d9f9e7982976204f1bb04060f77dc1ae464436241"},"downloads":-1,"filename":"cs.fileutils-20240630.tar.gz","has_sig":false,"md5_digest":"97198a7d05e6b3fa8f3b8657102b60fe","packagetype":"sdist","python_version":"source","requires_python":null,"size":46580,"upload_time":"2024-06-30T02:16:07","upload_time_iso_8601":"2024-06-30T02:16:07.074539Z","url":"https://files.pythonhosted.org/packages/e4/bb/e46586d87ae09bacad8025cf04c537e4b16eab3ea1480a0d426585aa2d3f/cs.fileutils-20240630.tar.gz","yanked":false,"yanked_reason":null}],"20240709":[{"comment_text":"","digests":{"blake2b_256":"a34b7db329439a0b353466f18402f820fc0e9219f229ed5944d54aff15a4f8fa","md5":"95362dfdb0b62929aabf09425d637b78","sha256":"865c2683dc6d877070ada24d0d4f21617b807716aa38543ed5285c233069e498"},"downloads":-1,"filename":"cs.fileutils-20240709-py3-none-any.whl","has_sig":false,"md5_digest":"95362dfdb0b62929aabf09425d637b78","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":28951,"upload_time":"2024-07-09T00:59:37","upload_time_iso_8601":"2024-07-09T00:59:37.860853Z","url":"https://files.pythonhosted.org/packages/a3/4b/7db329439a0b353466f18402f820fc0e9219f229ed5944d54aff15a4f8fa/cs.fileutils-20240709-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e2f97b490edda25b7f53eeabb31dabc74cf9a8d9e46dd898b013d227d2e3e828","md5":"dc983426260cd0323b4aac319d92c75a","sha256":"bc345a5715a96568defc6ac98b048b178e8576f96bb681ca5ca1729edd76056f"},"downloads":-1,"filename":"cs_fileutils-20240709.tar.gz","has_sig":false,"md5_digest":"dc983426260cd0323b4aac319d92c75a","packagetype":"sdist","python_version":"source","requires_python":null,"size":55101,"upload_time":"2024-07-09T00:59:40","upload_time_iso_8601":"2024-07-09T00:59:40.509434Z","url":"https://files.pythonhosted.org/packages/e2/f9/7b490edda25b7f53eeabb31dabc74cf9a8d9e46dd898b013d227d2e3e828/cs_fileutils-20240709.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"a34b7db329439a0b353466f18402f820fc0e9219f229ed5944d54aff15a4f8fa","md5":"95362dfdb0b62929aabf09425d637b78","sha256":"865c2683dc6d877070ada24d0d4f21617b807716aa38543ed5285c233069e498"},"downloads":-1,"filename":"cs.fileutils-20240709-py3-none-any.whl","has_sig":false,"md5_digest":"95362dfdb0b62929aabf09425d637b78","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":28951,"upload_time":"2024-07-09T00:59:37","upload_time_iso_8601":"2024-07-09T00:59:37.860853Z","url":"https://files.pythonhosted.org/packages/a3/4b/7db329439a0b353466f18402f820fc0e9219f229ed5944d54aff15a4f8fa/cs.fileutils-20240709-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e2f97b490edda25b7f53eeabb31dabc74cf9a8d9e46dd898b013d227d2e3e828","md5":"dc983426260cd0323b4aac319d92c75a","sha256":"bc345a5715a96568defc6ac98b048b178e8576f96bb681ca5ca1729edd76056f"},"downloads":-1,"filename":"cs_fileutils-20240709.tar.gz","has_sig":false,"md5_digest":"dc983426260cd0323b4aac319d92c75a","packagetype":"sdist","python_version":"source","requires_python":null,"size":55101,"upload_time":"2024-07-09T00:59:40","upload_time_iso_8601":"2024-07-09T00:59:40.509434Z","url":"https://files.pythonhosted.org/packages/e2/f9/7b490edda25b7f53eeabb31dabc74cf9a8d9e46dd898b013d227d2e3e828/cs_fileutils-20240709.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
