{"info":{"author":"","author_email":"Colin Bounouar <colin.bounouar.dev@gmail.com>","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Intended Audience :: Developers","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.9","Topic :: Software Development :: Build Tools","Typing :: Typed"],"description":"<h2 align=\"center\">Authentication for HTTPX</h2>\n\n<p align=\"center\">\n<a href=\"https://pypi.org/project/httpx-auth/\"><img alt=\"pypi version\" src=\"https://img.shields.io/pypi/v/httpx_auth\"></a>\n<a href=\"https://github.com/Colin-b/httpx_auth/actions\"><img alt=\"Build status\" src=\"https://github.com/Colin-b/httpx_auth/workflows/Release/badge.svg\"></a>\n<a href=\"https://github.com/Colin-b/httpx_auth/actions\"><img alt=\"Coverage\" src=\"https://img.shields.io/badge/coverage-100%25-brightgreen\"></a>\n<a href=\"https://github.com/psf/black\"><img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\"></a>\n<a href=\"https://github.com/Colin-b/httpx_auth/actions\"><img alt=\"Number of tests\" src=\"https://img.shields.io/badge/tests-775 passed-blue\"></a>\n<a href=\"https://pypi.org/project/httpx-auth/\"><img alt=\"Number of downloads\" src=\"https://img.shields.io/pypi/dm/httpx_auth\"></a>\n</p>\n\n> Version 1.0.0 will be released once httpx is considered as stable (release of 1.0.0).\n>\n> However, current state can be considered as stable.\n\nProvides authentication classes to be used with [`httpx`][1] [authentication parameter][2].\n\n<p align=\"center\">\n    <a href=\"https://oauth.net/2/\"><img alt=\"OAuth2\" src=\"https://oauth.net/images/oauth-2-sm.png\"></a>\n    <a href=\"https://www.okta.com\"><img alt=\"Okta\" src=\"https://www.okta.com/sites/all/themes/Okta/images/logos/developer/Dev_Logo-03_Large.png\" height=\"120\"></a>\n    <a href=\"https://www.microsoft.com/en-us/security/business/identity-access/microsoft-entra-id\"><img alt=\"Microsoft Entra ID, formerly Azure Active Directory (AD)\" src=\"https://svgshare.com/i/12u_.svg\" height=\"120\"></a>\n    <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html\"><img alt=\"AWS Signature Version 4\" src=\"https://upload.wikimedia.org/wikipedia/commons/9/93/Amazon_Web_Services_Logo.svg\" height=\"120\"></a>\n</p>\n<p align=\"center\">Some of the supported authentication</p>\n\n## Available authentication\n\n- [OAuth2](#oauth-2)\n  - [Authorization Code Flow](#authorization-code-flow)\n    - [Okta](#okta-oauth2-authorization-code)\n    - [WakaTime](#wakatime-oauth2-authorization-code)\n  - [Authorization Code Flow with PKCE](#authorization-code-flow-with-proof-key-for-code-exchange)\n    - [Okta](#okta-oauth2-proof-key-for-code-exchange)\n  - [Resource Owner Password Credentials flow](#resource-owner-password-credentials-flow)\n  - [Client Credentials Flow](#client-credentials-flow)\n    - [Okta](#okta-oauth2-client-credentials)\n  - [Implicit Flow](#implicit-flow)\n    - [Microsoft Entra (Access Token)](#microsoft---azure-active-directory-oauth2-access-token)\n    - [Microsoft Entra (ID token)](#microsoft---azure-active-directory-openid-connect-id-token)\n    - [Okta (Access Token)](#okta-oauth2-implicit-access-token)\n    - [Okta (ID token)](#okta-openid-connect-implicit-id-token)\n  - [Managing token cache](#managing-token-cache)\n  - [Managing browser](#managing-the-web-browser)\n- [Amazon](#aws-signature-v4)\n- API key\n  - [In header](#api-key-in-header)\n  - [In query](#api-key-in-query)\n- [Basic](#basic)\n- [Multiple authentication at once](#multiple-authentication-at-once)\n\n## OAuth 2\n\nMost of [OAuth2](https://oauth.net/2/) flows are supported.\n\nIf the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/Colin-b/httpx_auth/issues/new).\n\n### Authorization Code flow\n\nAuthorization Code Grant is implemented following [rfc6749](https://tools.ietf.org/html/rfc6749#section-4.1).\n\nUse `httpx_auth.OAuth2AuthorizationCode` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OAuth2AuthorizationCode\n\nwith httpx.Client() as client:\n    client.get('https://www.example.com', auth=OAuth2AuthorizationCode('https://www.authorization.url', 'https://www.token.url'))\n```\n\nNote:\n* You can persist tokens thanks to [the token cache](#managing-token-cache).\n* You can tweak web browser interaction thanks to [the display settings](#managing-the-web-browser).\n\n#### Parameters\n\n| Name                    | Description                                                                                                                                                                                                                                                                                       | Mandatory  | Default value  |\n|:------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-----------|:---------------|\n| `authorization_url`     | OAuth 2 authorization URL.                                                                                                                                                                                                                                                                        | Mandatory  |                |\n| `token_url`             | OAuth 2 token URL.                                                                                                                                                                                                                                                                                | Mandatory  |                |\n| `redirect_uri_domain`   | [FQDN](https://en.wikipedia.org/wiki/Fully_qualified_domain_name) to use in the redirect_uri when localhost is not allowed.                                                                                                                                                                       | Optional   | localhost      |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://<redirect_uri_domain>:<redirect_uri_port>/<redirect_uri_endpoint>.                                                                                                                                                    | Optional   | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 code will be started.                                                                                                                                                                                                                      | Optional   | 5000           |\n| `timeout`               | Maximum amount of seconds to wait for a code or a token to be received once requested.                                                                                                                                                                                                            | Optional   | 60             |\n| `header_name`           | Name of the header field used to send token.                                                                                                                                                                                                                                                      | Optional   | Authorization  |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.                                                                                                                                                                                        | Optional   | Bearer {token} |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL.                                                                                                                                                                                                          | Optional   | code           |\n| `token_field_name`      | Field name containing the token.                                                                                                                                                                                                                                                                  | Optional   | access_token   |\n| `early_expiry`          | Number of seconds before actual token expiry where token will be considered as expired. Used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. Set it to 0 to deactivate this feature and use the same token until actual expiry. | Optional   | 30.0           |\n| `code_field_name`       | Field name containing the code.                                                                                                                                                                                                                                                                   | Optional   | code           |\n| `username`              | User name in case basic authentication should be used to retrieve token.                                                                                                                                                                                                                          | Optional   |                |\n| `password`              | User password in case basic authentication should be used to retrieve token.                                                                                                                                                                                                                      | Optional   |                |\n| `client`                | `httpx.Client` instance that will be used to request the token. Use it to provide a custom proxying rule for instance.                                                                                                                                                                            | Optional   |                |\n\nAny other parameter will be put as query parameter in the authorization URL and as body parameters in the token URL.        \n\nUsual extra parameters are:\n        \n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `client_id`     | Corresponding to your Application ID (in Microsoft Azure app portal) |\n| `client_secret` | If client is not authenticated with the authorization server         |\n| `nonce`         | Refer to [OpenID ID Token specifications][3] for more details        |\n\n#### Common providers\n\nMost of [OAuth2](https://oauth.net/2/) Authorization Code Grant providers are supported.\n\nIf the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/Colin-b/httpx_auth/issues/new).\n\n##### Okta (OAuth2 Authorization Code)\n\n[Okta Authorization Code Grant](https://developer.okta.com/docs/guides/implement-auth-code/overview/) providing access tokens is supported.\n\nUse `httpx_auth.OktaAuthorizationCode` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OktaAuthorizationCode\n\n\nokta = OktaAuthorizationCode(instance='testserver.okta-emea.com', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nwith httpx.Client() as client:\n    client.get('https://www.example.com', auth=okta)\n```\n\nNote:\n* You can persist tokens thanks to [the token cache](#managing-token-cache).\n* You can tweak web browser interaction thanks to [the display settings](#managing-the-web-browser).\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | Okta instance (like \"testserver.okta-emea.com\"). | Mandatory |               |\n| `client_id`             | Okta Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | token |\n| `token_field_name`      | Field name containing the token. | Optional | access_token |\n| `early_expiry`          | Number of seconds before actual token expiry where token will be considered as expired. Used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. Set it to 0 to deactivate this feature and use the same token until actual expiry. | Optional  | 30.0  |\n| `nonce`                 | Refer to [OpenID ID Token specifications][3] for more details. | Optional | Newly generated Universal Unique Identifier. |\n| `scope`                 | Scope parameter sent in query. Can also be a list of scopes. | Optional | openid |\n| `authorization_server`  | Okta authorization server. | Optional | 'default' |\n| `redirect_uri_domain`   | [FQDN](https://en.wikipedia.org/wiki/Fully_qualified_domain_name) to use in the redirect_uri when localhost is not allowed.                                                                                                                                                                       | Optional   | localhost      |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://<redirect_uri_domain>:<redirect_uri_port>/<redirect_uri_endpoint>.                                                                                                                                                    | Optional   | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n| `client`                | `httpx.Client` instance that will be used to request the token. Use it to provide a custom proxying rule for instance. | Optional |  |\n\nAny other parameter will be put as query parameter in the authorization URL.        \n\nUsual extra parameters are:\n        \n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n##### WakaTime (OAuth2 Authorization Code)\n\n[WakaTime Authorization Code Grant](https://wakatime.com/developers#authentication) providing access tokens is supported.\n\nUse `httpx_auth.WakaTimeAuthorizationCode` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import WakaTimeAuthorizationCode\n\n\nwaka_time = WakaTimeAuthorizationCode(client_id=\"aPJQV0op6Pu3b66MWDi9b1wB\", client_secret=\"waka_sec_0c5MB\", scope=\"email\")\nwith httpx.Client() as client:\n    client.get('https://wakatime.com/api/v1/users/current', auth=waka_time)\n```\n\nNote:\n* You can persist tokens thanks to [the token cache](#managing-token-cache).\n* You can tweak web browser interaction thanks to [the display settings](#managing-the-web-browser).\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value                                |\n|:------------------------|:---------------------------|:----------|:---------------------------------------------|\n| `client_id`             | WakaTime Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |                                              |\n| `client_secret`         | WakaTime Application Secret (formatted as waka_sec_ followed by an Universal Unique Identifier). | Mandatory |                                              |\n| `scope`                 | Scope parameter sent in query. Can also be a list of scopes. | Mandatory |                                              |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional  | token                                        |\n| `token_field_name`      | Field name containing the token. | Optional  | access_token                                 |\n| `early_expiry`          | Number of seconds before actual token expiry where token will be considered as expired. Used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. Set it to 0 to deactivate this feature and use the same token until actual expiry. | Optional  | 30.0                                         |\n| `nonce`                 | Refer to [OpenID ID Token specifications][3] for more details. | Optional  | Newly generated Universal Unique Identifier. |\n| `redirect_uri_domain`   | [FQDN](https://en.wikipedia.org/wiki/Fully_qualified_domain_name) to use in the redirect_uri when localhost is not allowed.                                                                                                                                                                       | Optional   | localhost      |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://<redirect_uri_domain>:<redirect_uri_port>/<redirect_uri_endpoint>.                                                                                                                                                    | Optional   | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional  | 5000                                         |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional  | 60                                           |\n| `header_name`           | Name of the header field used to send token. | Optional  | Authorization                                |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional  | Bearer {token}                               |\n| `client`                | `httpx.Client` instance that will be used to request the token. Use it to provide a custom proxying rule for instance. | Optional  |                                              |\n\nAny other parameter will be put as query parameter in the authorization URL.\n\n### Authorization Code Flow with Proof Key for Code Exchange\n\nProof Key for Code Exchange is implemented following [rfc7636](https://tools.ietf.org/html/rfc7636).\n\nUse `httpx_auth.OAuth2AuthorizationCodePKCE` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OAuth2AuthorizationCodePKCE\n\nwith httpx.Client() as client:\n    client.get('https://www.example.com', auth=OAuth2AuthorizationCodePKCE('https://www.authorization.url', 'https://www.token.url'))\n```\n\nNote:\n* You can persist tokens thanks to [the token cache](#managing-token-cache).\n* You can tweak web browser interaction thanks to [the display settings](#managing-the-web-browser).\n\n#### Parameters \n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `authorization_url`     | OAuth 2 authorization URL. | Mandatory |               |\n| `token_url`             | OAuth 2 token URL.         | Mandatory |               |\n| `redirect_uri_domain`   | [FQDN](https://en.wikipedia.org/wiki/Fully_qualified_domain_name) to use in the redirect_uri when localhost is not allowed.                                                                                                                                                                       | Optional   | localhost      |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://<redirect_uri_domain>:<redirect_uri_port>/<redirect_uri_endpoint>.                                                                                                                                                    | Optional   | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 code will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a code or a token to be received once requested. | Optional | 60 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | code |\n| `token_field_name`      | Field name containing the token. | Optional | access_token |\n| `early_expiry`          | Number of seconds before actual token expiry where token will be considered as expired. Used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. Set it to 0 to deactivate this feature and use the same token until actual expiry. | Optional  | 30.0  |\n| `code_field_name`       | Field name containing the code. | Optional | code |\n| `client`                | `httpx.Client` instance that will be used to request the token. Use it to provide a custom proxying rule for instance. | Optional |  |\n\nAny other parameter will be put as query parameter in the authorization URL and as body parameters in the token URL.        \n\nUsual extra parameters are:\n        \n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `client_id`     | Corresponding to your Application ID (in Microsoft Azure app portal) |\n| `client_secret` | If client is not authenticated with the authorization server         |\n| `nonce`         | Refer to [OpenID ID Token specifications][3] for more details        |\n\n#### Common providers\n\nMost of [OAuth2](https://oauth.net/2/) Proof Key for Code Exchange providers are supported.\n\nIf the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/Colin-b/httpx_auth/issues/new).\n\n##### Okta (OAuth2 Proof Key for Code Exchange)\n\n[Okta Proof Key for Code Exchange](https://developer.okta.com/docs/guides/implement-auth-code-pkce/overview/) providing access tokens is supported.\n\nUse `httpx_auth.OktaAuthorizationCodePKCE` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OktaAuthorizationCodePKCE\n\n\nokta = OktaAuthorizationCodePKCE(instance='testserver.okta-emea.com', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nwith httpx.Client() as client:\n    client.get('https://www.example.com', auth=okta)\n```\n\nNote:\n* You can persist tokens thanks to [the token cache](#managing-token-cache).\n* You can tweak web browser interaction thanks to [the display settings](#managing-the-web-browser).\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | Okta instance (like \"testserver.okta-emea.com\"). | Mandatory |               |\n| `client_id`             | Okta Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | code |\n| `token_field_name`      | Field name containing the token. | Optional | access_token |\n| `early_expiry`          | Number of seconds before actual token expiry where token will be considered as expired. Used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. Set it to 0 to deactivate this feature and use the same token until actual expiry. | Optional  | 30.0  |\n| `code_field_name`      | Field name containing the code. | Optional | code |\n| `nonce`                 | Refer to [OpenID ID Token specifications][3] for more details. | Optional | Newly generated Universal Unique Identifier. |\n| `scope`                 | Scope parameter sent in query. Can also be a list of scopes. | Optional | openid |\n| `authorization_server`  | Okta authorization server. | Optional | 'default' |\n| `redirect_uri_domain`   | [FQDN](https://en.wikipedia.org/wiki/Fully_qualified_domain_name) to use in the redirect_uri when localhost is not allowed.                                                                                                                                                                       | Optional   | localhost      |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://<redirect_uri_domain>:<redirect_uri_port>/<redirect_uri_endpoint>.                                                                                                                                                    | Optional   | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n| `client`                | `httpx.Client` instance that will be used to request the token. Use it to provide a custom proxying rule for instance. | Optional |  |\n\nAny other parameter will be put as query parameter in the authorization URL and as body parameters in the token URL.        \n\nUsual extra parameters are:\n        \n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `client_secret`        | If client is not authenticated with the authorization server     |\n| `nonce`        | Refer to [OpenID ID Token specifications][3] for more details     |\n\n### Resource Owner Password Credentials flow\n\nResource Owner Password Credentials Grant is implemented following [rfc6749](https://tools.ietf.org/html/rfc6749#section-4.3).\n\nUse `httpx_auth.OAuth2ResourceOwnerPasswordCredentials` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OAuth2ResourceOwnerPasswordCredentials\n\nwith httpx.Client() as client:\n    client.get('https://www.example.com', auth=OAuth2ResourceOwnerPasswordCredentials('https://www.token.url', 'user name', 'user password'))\n```\n\nNote:\n* You can persist tokens thanks to [the token cache](#managing-token-cache).\n\n#### Parameters\n\n| Name                 | Description                                                                                                                                                                                                                                                                                       | Mandatory | Default value |\n|:---------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:----------|:--------------|\n| `token_url`          | OAuth 2 token URL.                                                                                                                                                                                                                                                                                | Mandatory |               |\n| `username`           | Resource owner user name.                                                                                                                                                                                                                                                                         | Mandatory |               |\n| `password`           | Resource owner password.                                                                                                                                                                                                                                                                          | Mandatory |               |\n| `client_auth`        | Client authentication if the client type is confidential or the client was issued client credentials (or assigned other authentication requirements). Can be a tuple or any httpx authentication class instance.                                                                                  | Optional  |               |\n| `timeout`            | Maximum amount of seconds to wait for a token to be received once requested.                                                                                                                                                                                                                      | Optional  | 60            |\n| `header_name`        | Name of the header field used to send token.                                                                                                                                                                                                                                                      | Optional  | Authorization |\n| `header_value`       | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token.                                                                                                                                                                                        | Optional  | Bearer {token} |\n| `scope`              | Scope parameter sent to token URL as body. Can also be a list of scopes.                                                                                                                                                                                                                          | Optional  |  |\n| `token_field_name`   | Field name containing the token.                                                                                                                                                                                                                                                                  | Optional  | access_token  |\n| `early_expiry`       | Number of seconds before actual token expiry where token will be considered as expired. Used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. Set it to 0 to deactivate this feature and use the same token until actual expiry. | Optional  | 30.0  |\n| `client`             | `httpx.Client` instance that will be used to request the token. Use it to provide a custom proxying rule for instance.                                                                                                                                                                            | Optional  |  |\n\nAny other parameter will be put as body parameter in the token URL.\n\n#### Common providers\n\nMost of [OAuth2](https://oauth.net/2/) Resource Owner Password Credentials providers are supported.\n\nIf the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/Colin-b/httpx_auth/issues/new).\n\n##### Okta (OAuth2 Resource Owner Password Credentials)\n\n[Okta Resource Owner Password Credentials](https://developer.okta.com/docs/guides/implement-grant-type/ropassword/main/) providing access tokens is supported.\n\nUse `httpx_auth.OktaResourceOwnerPasswordCredentials` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OktaResourceOwnerPasswordCredentials\n\n\nokta = OktaResourceOwnerPasswordCredentials(instance='testserver.okta-emea.com', username='user name', password='user password', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd', client_secret=\"0c5MB\")\nwith httpx.Client() as client:\n    client.get('https://www.example.com', auth=okta)\n```\n\nNote:\n* You can persist tokens thanks to [the token cache](#managing-token-cache).\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | Okta instance (like \"testserver.okta-emea.com\"). | Mandatory |               |\n| `username`           | Resource owner user name.                                                                                                                                                                                                                                                                         | Mandatory |               |\n| `password`           | Resource owner password.                                                                                                                                                                                                                                                                          | Mandatory |               |\n| `client_id`             | Okta Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `client_secret`        | Resource owner password.     | Mandatory |               |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n| `scope`                 | Scope parameter sent in query. Can also be a list of scopes. | Optional | openid |\n| `token_field_name`      | Field name containing the token. | Optional | access_token |\n| `early_expiry`          | Number of seconds before actual token expiry where token will be considered as expired. Used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. Set it to 0 to deactivate this feature and use the same token until actual expiry. | Optional  | 30.0  |\n| `client`                | `httpx.Client` instance that will be used to request the token. Use it to provide a custom proxying rule for instance. | Optional |  |\n\nAny other parameter will be put as body parameters in the token URL.        \n\n\n### Client Credentials flow\n\nClient Credentials Grant is implemented following [rfc6749](https://tools.ietf.org/html/rfc6749#section-4.4).\n\nUse `httpx_auth.OAuth2ClientCredentials` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OAuth2ClientCredentials\n\nwith httpx.Client() as client:\n    client.get('https://www.example.com', auth=OAuth2ClientCredentials('https://www.token.url', client_id='id', client_secret='secret'))\n```\n\nNote:\n* You can persist tokens thanks to [the token cache](#managing-token-cache).\n\n#### Parameters\n\n| Name               | Description                                  | Mandatory | Default value |\n|:-------------------|:---------------------------------------------|:----------|:--------------|\n| `token_url`        | OAuth 2 token URL.                           | Mandatory |               |\n| `client_id`         | Resource owner user name.                    | Mandatory |               |\n| `client_secret`         | Resource owner password.                     | Mandatory |               |\n| `timeout`          | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60            |\n| `header_name`      | Name of the header field used to send token. | Optional  | Authorization |\n| `header_value`     | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n| `scope`            | Scope parameter sent to token URL as body. Can also be a list of scopes. | Optional |  |\n| `token_field_name` | Field name containing the token.             | Optional  | access_token  |\n| `early_expiry`     | Number of seconds before actual token expiry where token will be considered as expired. Used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. Set it to 0 to deactivate this feature and use the same token until actual expiry. | Optional  | 30.0  |\n| `client`           | `httpx.Client` instance that will be used to request the token. Use it to provide a custom proxying rule for instance. | Optional |  |\n\nAny other parameter will be put as body parameter in the token URL.\n\n#### Common providers\n\nMost of [OAuth2](https://oauth.net/2/) Client Credentials Grant providers are supported.\n\nIf the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/Colin-b/httpx_auth/issues/new).\n\n##### Okta (OAuth2 Client Credentials)\n\n[Okta Client Credentials Grant](https://developer.okta.com/docs/guides/implement-grant-type/clientcreds/main/) providing access tokens is supported.\n\nUse `httpx_auth.OktaClientCredentials` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OktaClientCredentials\n\n\nokta = OktaClientCredentials(instance='testserver.okta-emea.com', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd', client_secret=\"secret\", scope=[\"scope1\", \"scope2\"])\nwith httpx.Client() as client:\n    client.get('https://www.example.com', auth=okta)\n```\n\nNote:\n* You can persist tokens thanks to [the token cache](#managing-token-cache).\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | Okta instance (like \"testserver.okta-emea.com\"). | Mandatory |               |\n| `client_id`             | Okta Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `client_secret`         | Resource owner password.                     | Mandatory |               |\n| `scope`                 | Scope parameter sent in query. Can also be a list of scopes. | Mandatory |  |\n| `authorization_server`  | Okta authorization server. | Optional  | 'default' |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional  | 60 |\n| `header_name`           | Name of the header field used to send token. | Optional  | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional  | Bearer {token} |\n| `token_field_name`      | Field name containing the token. | Optional  | access_token |\n| `early_expiry`          | Number of seconds before actual token expiry where token will be considered as expired. Used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. Set it to 0 to deactivate this feature and use the same token until actual expiry. | Optional  | 30.0  |\n| `client`                | `httpx.Client` instance that will be used to request the token. Use it to provide a custom proxying rule for instance. | Optional  |  |\n\nAny other parameter will be put as query parameter in the token URL.        \n\n### Implicit flow\n\nImplicit Grant is implemented following [rfc6749](https://tools.ietf.org/html/rfc6749#section-4.2).\n\nUse `httpx_auth.OAuth2Implicit` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OAuth2Implicit\n\nwith httpx.Client() as client:\n    client.get('https://www.example.com', auth=OAuth2Implicit('https://www.authorization.url'))\n```\n\nNote:\n* You can persist tokens thanks to [the token cache](#managing-token-cache).\n* You can tweak web browser interaction thanks to [the display settings](#managing-the-web-browser).\n\n#### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `authorization_url`     | OAuth 2 authorization URL. | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | token |\n| `token_field_name`      | Field name containing the token. | Optional | id_token if response_type is id_token, otherwise access_token |\n| `early_expiry`          | Number of seconds before actual token expiry where token will be considered as expired. Used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. Set it to 0 to deactivate this feature and use the same token until actual expiry. | Optional  | 30.0  |\n| `redirect_uri_domain`   | [FQDN](https://en.wikipedia.org/wiki/Fully_qualified_domain_name) to use in the redirect_uri when localhost is not allowed.                                                                                                                                                                       | Optional   | localhost      |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://<redirect_uri_domain>:<redirect_uri_port>/<redirect_uri_endpoint>.                                                                                                                                                    | Optional   | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n\nAny other parameter will be put as query parameter in the authorization URL.        \n\nUsual extra parameters are:\n        \n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `client_id`     | Corresponding to your Application ID (in Microsoft Azure app portal) |\n| `nonce`         | Refer to [OpenID ID Token specifications][3] for more details        |\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n#### Common providers\n\nMost of [OAuth2](https://oauth.net/2/) Implicit Grant providers are supported.\n\nIf the one you are looking for is not yet supported, feel free to [ask for its implementation](https://github.com/Colin-b/httpx_auth/issues/new).\n\n##### Microsoft - Azure Active Directory (OAuth2 Access Token)\n\n[Microsoft identity platform access tokens](https://docs.microsoft.com/en-us/azure/active-directory/develop/access-tokens) are supported.\n\nUse `httpx_auth.AzureActiveDirectoryImplicit` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import AzureActiveDirectoryImplicit\n\n\naad = AzureActiveDirectoryImplicit(tenant_id='45239d18-c68c-4c47-8bdd-ce71ea1d50cd', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nwith httpx.Client() as client:\n    client.get('https://www.example.com', auth=aad)\n```\n\nNote:\n* You can persist tokens thanks to [the token cache](#managing-token-cache).\n* You can tweak web browser interaction thanks to [the display settings](#managing-the-web-browser).\n\nYou can retrieve Microsoft Azure Active Directory application information thanks to the [application list on Azure portal](https://portal.azure.com/#blade/Microsoft_AAD_IAM/StartboardApplicationsMenuBlade/AllApps/menuId/).\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `tenant_id`             | Microsoft Tenant Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `client_id`             | Microsoft Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | token |\n| `token_field_name`      | Field name containing the token. | Optional | access_token |\n| `early_expiry`          | Number of seconds before actual token expiry where token will be considered as expired. Used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. Set it to 0 to deactivate this feature and use the same token until actual expiry. | Optional  | 30.0  |\n| `nonce`                 | Refer to [OpenID ID Token specifications][3] for more details | Optional | Newly generated Universal Unique Identifier. |\n| `redirect_uri_domain`   | [FQDN](https://en.wikipedia.org/wiki/Fully_qualified_domain_name) to use in the redirect_uri when localhost is not allowed.                                                                                                                                                                       | Optional   | localhost      |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://<redirect_uri_domain>:<redirect_uri_port>/<redirect_uri_endpoint>.                                                                                                                                                    | Optional   | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n\nAny other parameter will be put as query parameter in the authorization URL.        \n\nUsual extra parameters are:\n        \n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n##### Microsoft - Azure Active Directory (OpenID Connect ID token)\n\n[Microsoft identity platform ID tokens](https://docs.microsoft.com/en-us/azure/active-directory/develop/id-tokens) are supported.\n\nUse `httpx_auth.AzureActiveDirectoryImplicitIdToken` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import AzureActiveDirectoryImplicitIdToken\n\n\naad = AzureActiveDirectoryImplicitIdToken(tenant_id='45239d18-c68c-4c47-8bdd-ce71ea1d50cd', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nwith httpx.Client() as client:\n    client.get('https://www.example.com', auth=aad)\n```\n\nNote:\n* You can persist tokens thanks to [the token cache](#managing-token-cache).\n* You can tweak web browser interaction thanks to [the display settings](#managing-the-web-browser).\n\nYou can retrieve Microsoft Azure Active Directory application information thanks to the [application list on Azure portal](https://portal.azure.com/#blade/Microsoft_AAD_IAM/StartboardApplicationsMenuBlade/AllApps/menuId/).\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `tenant_id`             | Microsoft Tenant Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `client_id`             | Microsoft Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | id_token |\n| `token_field_name`      | Field name containing the token. | Optional | id_token |\n| `early_expiry`          | Number of seconds before actual token expiry where token will be considered as expired. Used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. Set it to 0 to deactivate this feature and use the same token until actual expiry. | Optional  | 30.0  |\n| `nonce`                 | Refer to [OpenID ID Token specifications][3] for more details | Optional | Newly generated Universal Unique Identifier. |\n| `redirect_uri_domain`   | [FQDN](https://en.wikipedia.org/wiki/Fully_qualified_domain_name) to use in the redirect_uri when localhost is not allowed.                                                                                                                                                                       | Optional   | localhost      |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://<redirect_uri_domain>:<redirect_uri_port>/<redirect_uri_endpoint>.                                                                                                                                                    | Optional   | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n\nAny other parameter will be put as query parameter in the authorization URL.        \n\nUsual extra parameters are:\n        \n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n##### Okta (OAuth2 Implicit Access Token)\n\n[Okta Implicit Grant](https://developer.okta.com/docs/guides/implement-implicit/overview/) providing access tokens is supported.\n\nUse `httpx_auth.OktaImplicit` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OktaImplicit\n\n\nokta = OktaImplicit(instance='testserver.okta-emea.com', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nwith httpx.Client() as client:\n    client.get('https://www.example.com', auth=okta)\n```\n\nNote:\n* You can persist tokens thanks to [the token cache](#managing-token-cache).\n* You can tweak web browser interaction thanks to [the display settings](#managing-the-web-browser).\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | Okta instance (like \"testserver.okta-emea.com\"). | Mandatory |               |\n| `client_id`             | Okta Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | token |\n| `token_field_name`      | Field name containing the token. | Optional | access_token |\n| `early_expiry`          | Number of seconds before actual token expiry where token will be considered as expired. Used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. Set it to 0 to deactivate this feature and use the same token until actual expiry. | Optional  | 30.0  |\n| `nonce`                 | Refer to [OpenID ID Token specifications][3] for more details. | Optional | Newly generated Universal Unique Identifier. |\n| `scope`                 | Scope parameter sent in query. Can also be a list of scopes. | Optional | ['openid', 'profile', 'email'] |\n| `authorization_server`  | Okta authorization server. | Optional | 'default' |\n| `redirect_uri_domain`   | [FQDN](https://en.wikipedia.org/wiki/Fully_qualified_domain_name) to use in the redirect_uri when localhost is not allowed.                                                                                                                                                                       | Optional   | localhost      |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://<redirect_uri_domain>:<redirect_uri_port>/<redirect_uri_endpoint>.                                                                                                                                                    | Optional   | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n\nAny other parameter will be put as query parameter in the authorization URL.        \n\nUsual extra parameters are:\n        \n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n##### Okta (OpenID Connect Implicit ID token)\n\n[Okta Implicit Grant](https://developer.okta.com/docs/guides/implement-implicit/overview/) providing ID tokens is supported.\n\nUse `httpx_auth.OktaImplicitIdToken` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import OktaImplicitIdToken\n\n\nokta = OktaImplicitIdToken(instance='testserver.okta-emea.com', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd')\nwith httpx.Client() as client:\n    client.get('https://www.example.com', auth=okta)\n```\n\nNote:\n* You can persist tokens thanks to [the token cache](#managing-token-cache).\n* You can tweak web browser interaction thanks to [the display settings](#managing-the-web-browser).\n\n###### Parameters\n\n| Name                    | Description                | Mandatory | Default value |\n|:------------------------|:---------------------------|:----------|:--------------|\n| `instance`              | Okta instance (like \"testserver.okta-emea.com\"). | Mandatory |               |\n| `client_id`             | Okta Application Identifier (formatted as an Universal Unique Identifier). | Mandatory |               |\n| `response_type`         | Value of the response_type query parameter if not already provided in authorization URL. | Optional | id_token |\n| `token_field_name`      | Field name containing the token. | Optional | id_token |\n| `early_expiry`          | Number of seconds before actual token expiry where token will be considered as expired. Used to ensure token will not expire between the time of retrieval and the time the request reaches the actual server. Set it to 0 to deactivate this feature and use the same token until actual expiry. | Optional  | 30.0  |\n| `nonce`                 | Refer to [OpenID ID Token specifications][3] for more details. | Optional | Newly generated Universal Unique Identifier. |\n| `scope`                 | Scope parameter sent in query. Can also be a list of scopes. | Optional | ['openid', 'profile', 'email'] |\n| `authorization_server`  | Okta authorization server. | Optional | 'default' |\n| `redirect_uri_domain`   | [FQDN](https://en.wikipedia.org/wiki/Fully_qualified_domain_name) to use in the redirect_uri when localhost is not allowed.                                                                                                                                                                       | Optional   | localhost      |\n| `redirect_uri_endpoint` | Custom endpoint that will be used as redirect_uri the following way: http://<redirect_uri_domain>:<redirect_uri_port>/<redirect_uri_endpoint>.                                                                                                                                                    | Optional   | ''             |\n| `redirect_uri_port`     | The port on which the server listening for the OAuth 2 token will be started. | Optional | 5000 |\n| `timeout`               | Maximum amount of seconds to wait for a token to be received once requested. | Optional | 60 |\n| `header_name`           | Name of the header field used to send token. | Optional | Authorization |\n| `header_value`          | Format used to send the token value. \"{token}\" must be present as it will be replaced by the actual token. | Optional | Bearer {token} |\n\nAny other parameter will be put as query parameter in the authorization URL.        \n\nUsual extra parameters are:\n        \n| Name            | Description                                                          |\n|:----------------|:---------------------------------------------------------------------|\n| `prompt`        | none to avoid prompting the user if a session is already opened.     |\n\n### Managing token cache\n\nTo avoid asking for a new token every new request, a token cache is used.\n\nDefault cache is in memory, but it is also possible to use a physical cache.\n\nYou need to provide the location of your token cache file. It can be a full or relative path (`str` or `pathlib.Path`).\n\nIf the file already exists it will be used, if the file do not exist it will be created.\n\n```python\nfrom httpx_auth import OAuth2, JsonTokenFileCache\n\nOAuth2.token_cache = JsonTokenFileCache('path/to/my_token_cache.json')\n```\n\n### Managing the web browser\n\nYou can configure the browser display settings thanks to `httpx_auth.OAuth2.display` as in the following:\n```python\nfrom httpx_auth import OAuth2, DisplaySettings\n\nOAuth2.display = DisplaySettings()\n```\n\nThe following parameters can be provided to `DisplaySettings`:\n\n| Name                   | Description                                                                                                                                                                      | Default value |\n|:-----------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------|\n| `success_display_time` | In case a code or token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser.                                 | 1             |\n| `success_html`         | In case a code or token is successfully received, this is the success page that will be displayed in your browser. `{display_time}` is expected in this content.                 |               |\n| `failure_display_time` | In case received code or token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.                                      | 10_000        |\n| `failure_html`         | In case received code or token is not valid, this is the failure page that will be displayed in your browser. `{information}` and `{display_time}` are expected in this content. |               |\n\n## AWS Signature v4\n\nAmazon Web Service Signature version 4 is implemented following [Amazon S3 documentation](https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-auth-using-authorization-header.html) and [request-aws4auth 1.2.3](https://github.com/sam-washington/requests-aws4auth) (with some changes, see below).\n\nUse `httpx_auth.AWS4Auth` to configure this kind of authentication.\n\n```python\nimport httpx\nfrom httpx_auth import AWS4Auth\n\naws = AWS4Auth(access_id=\"my-access-id\", secret_key=\"my-secret-key\", region=\"eu-west-1\", service=\"s3\")\nwith httpx.Client() as client:\n    client.get('http://s3-eu-west-1.amazonaws.com', auth=aws)\n```\n\nNote that the following changes were made compared to `requests-aws4auth`:\n  - Each request now has its own signing key and `x-amz-date`. Meaning **you can use the same auth instance for more than one request**.\n  - `session_token` was renamed into `security_token` for consistency with the underlying name at Amazon.\n  - `include_hdrs` parameter was renamed into `include_headers`. When using this parameter:\n    - Provided values will not be stripped, [WYSIWYG](https://en.wikipedia.org/wiki/WYSIWYG).\n    - If multiple values are provided for a same header, the computation will be based on the value order you provided and value separated by `, `. Instead of ordered values separated by comma for `requests-aws4auth`.\n  - `amz_date` attribute has been removed.\n  - It is not possible to provide a `date`. It will default to now.\n  - It is not possible to provide an `AWSSigningKey` instance, use explicit parameters instead.\n  - It is not possible to provide `raise_invalid_date` parameter anymore as the date will always be valid.\n  - `host` is not considered as a specific Amazon service anymore (no test specific code).\n  - Canonical query string computation is entirely based on AWS documentation (and consider undocumented fragment (`#` and following characters) as part of the query string).\n  - Canonical uri computation is entirely based on AWS documentation.\n  - Canonical headers computation is entirely based on AWS documentation.\n\n### Parameters\n\n| Name               | Description                                                                                                                                                                                    | Mandatory  | Default value                                                                                                            |\n|:-------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-----------|:-------------------------------------------------------------------------------------------------------------------------|\n| `access_id`        | AWS access ID.                                                                                                                                                                                 | Mandatory  |                                                                                                                          |\n| `secret_key`       | AWS secret access key.                                                                                                                                                                         | Mandatory  |                                                                                                                          |\n| `region`           | The region you are connecting to, as per [this list](http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region). For services which do not require a region (e.g. IAM), use us-east-1. | Mandatory  |                                                                                                                          |\n| `service`          | The name of the service you are connecting to, as per [this list](http://docs.aws.amazon.com/general/latest/gr/rande.html). e.g. elasticbeanstalk.                                             | Mandatory  |                                                                                                                          |\n| `security_token`   | Used for the `x-amz-security-token` header, for use with STS temporary credentials.                                                                                                            | Optional   |                                                                                                                          |\n| `include_headers`  | Set of headers to include in the canonical and signed headers (in addition to the default). Note that `x-amz-client-context` is not included by default and `*` will include all headers.      | Optional   | {\"host\", \"content-type\", \"x-amz-*\"} and if `security_token` is provided, `x-amz-security-token`. |\n\n### Dynamically retrieving credentials using boto3\n\nWhile `httpx-auth` does not want to include support for `botocore`, the following authentication class should allow you to automatically retrieve up-to-date credentials.\n\n```python\nimport httpx\nfrom botocore.session import Session\nfrom httpx_auth import AWS4Auth\n\nclass AWS4BotoAuth(AWS4Auth):\n    def __init__(self, region: str, service: str = \"s3\", **kwargs):\n        self.refreshable_credentials = Session().get_credentials()\n        AWS4Auth.__init__(self, access_id=kwargs.pop(\"access_id\", \"_\"), secret_key=kwargs.pop(\"secret_key\", \"_\"), region=region, service=service, **kwargs)\n\n    def auth_flow(self, request):\n        self.refresh_credentials()\n        yield super().auth_flow(request)\n\n    def refresh_credentials(self):\n        credentials = self.refreshable_credentials.get_frozen_credentials()\n        self.access_id = credentials.access_key\n        self.secret_key = credentials.secret_key\n        self.security_token = credentials.token\n\n\naws = AWS4BotoAuth(region=\"eu-west-1\")\nwith httpx.Client() as client:\n    client.get('http://s3-eu-west-1.amazonaws.com', auth=aws)\n```\n\n## API key in header\n\nYou can send an API key inside the header of your request using `httpx_auth.HeaderApiKey`.\n\n```python\nimport httpx\nfrom httpx_auth import HeaderApiKey\n\nwith httpx.Client() as client:\n    client.get('https://www.example.com', auth=HeaderApiKey('my_api_key'))\n```\n\n### Parameters\n\n| Name                    | Description                    | Mandatory | Default value |\n|:------------------------|:-------------------------------|:----------|:--------------|\n| `api_key`               | The API key that will be sent. | Mandatory |               |\n| `header_name`           | Name of the header field.      | Optional  | \"X-API-Key\"   |\n\n## API key in query\n\nYou can send an API key inside the query parameters of your request using `httpx_auth.QueryApiKey`.\n\n```python\nimport httpx\nfrom httpx_auth import QueryApiKey\n\nwith httpx.Client() as client:\n    client.get('https://www.example.com', auth=QueryApiKey('my_api_key'))\n```\n\n### Parameters\n\n| Name                    | Description                    | Mandatory | Default value |\n|:------------------------|:-------------------------------|:----------|:--------------|\n| `api_key`               | The API key that will be sent. | Mandatory |               |\n| `query_parameter_name`  | Name of the query parameter.   | Optional  | \"api_key\"     |\n\n## Basic\n\nYou can use basic authentication using `httpx_auth.Basic`.\n\nThe only advantage of using this class instead of `httpx` native support of basic authentication, is to be able to use it in [multiple authentication](#multiple-authentication-at-once).\n\n```python\nimport httpx\nfrom httpx_auth import Basic\n\nwith httpx.Client() as client:\n    client.get('https://www.example.com', auth=Basic('username', 'password'))\n```\n\n### Parameters\n\n| Name                    | Description                    | Mandatory | Default value |\n|:------------------------|:-------------------------------|:----------|:--------------|\n| `username`              | User name.                     | Mandatory |               |\n| `password`              | User password.                 | Mandatory |               |\n\n## Multiple authentication at once\n\nYou can also use a combination of authentication using `+`or `&`  as in the following sample:\n\n```python\nimport httpx\nfrom httpx_auth import HeaderApiKey, OAuth2Implicit\n\napi_key = HeaderApiKey('my_api_key')\noauth2 = OAuth2Implicit('https://www.example.com')\nwith httpx.Client() as client:\n    client.get('https://www.example.com', auth=api_key + oauth2)\n```\n\nThis is supported on every authentication class exposed by `httpx_auth`, but you can also enable it on your own authentication classes by using `httpx_auth.SupportMultiAuth` as in the following sample:\n\n```python\nfrom httpx_auth import SupportMultiAuth\n# TODO Import your own auth here\nfrom my_package import MyAuth\n\nclass MyMultiAuth(MyAuth, SupportMultiAuth):\n    pass\n```\n\n\n## Available pytest fixtures\n\nTesting the code using `httpx_auth` authentication classes can be achieved using provided [`pytest`][6] fixtures.\n\n### token_cache_mock\n\n```python\nfrom httpx_auth.testing import token_cache_mock, token_mock\n\ndef test_something(token_cache_mock):\n    # perform code using authentication\n    pass\n```\n\nUse this fixture to mock authentication success for any of the following classes:\n * `OAuth2AuthorizationCodePKCE`\n * `OktaAuthorizationCodePKCE`\n * `OAuth2Implicit`\n * `OktaImplicit`\n * `OktaImplicitIdToken`\n * `AzureActiveDirectoryImplicit`\n * `AzureActiveDirectoryImplicitIdToken`\n * `OAuth2AuthorizationCode`\n * `OktaAuthorizationCode`\n * `WakaTimeAuthorizationCode`\n * `OAuth2ClientCredentials`\n * `OktaClientCredentials`\n * `OAuth2ResourceOwnerPasswordCredentials`\n * `OktaResourceOwnerPasswordCredentials`\n\nBy default, an access token with value `2YotnFZFEjr1zCsicMWpAA` is generated.\n\nYou can however return your custom token by providing your own `token_mock` fixture as in the following sample:\n\n```python\nimport pytest\n\nfrom httpx_auth.testing import token_cache_mock\n\n\n@pytest.fixture\ndef token_mock() -> str:\n    return \"MyCustomTokenValue\"\n\n\ndef test_something(token_cache_mock):\n    # perform code using authentication\n    pass\n```\n\nYou can even return a more complex token by using the `create_token` function.\n\nNote that [`pyjwt`](https://pypi.org/project/PyJWT/) is a required dependency in this case as it is used to generate the token returned by the authentication.\n\n```python\nimport pytest\nfrom httpx_auth.testing import token_cache_mock, create_token\n\n\n@pytest.fixture\ndef token_mock() -> str:\n    expiry = None  # TODO Compute your expiry\n    return create_token(expiry)\n\n\ndef test_something(token_cache_mock):\n    # perform code using authentication\n    pass\n```\n\n### Advanced testing\n\n#### token_cache\n\nThis [`pytest`][6] fixture will return the token cache and ensure it is reset at the end of the test case.\n\n```python\nfrom httpx_auth.testing import token_cache\n\ndef test_something(token_cache):\n    # perform code using authentication\n    pass\n```\n\n#### browser_mock\n\nThis [`pytest`][6] fixture will allow to mock the behavior of a web browser.\n\nWith this [`pytest`][6] fixture you will be allowed to fine tune your authentication related failures handling.\n\n[`pyjwt`](https://pypi.org/project/PyJWT/) is a required dependency if you use `create_token` helper function.\n\n```python\nimport datetime\n\nfrom httpx_auth.testing import browser_mock, BrowserMock, create_token\n\ndef test_something(browser_mock: BrowserMock):\n    token_expiry = datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(hours=1)\n    token = create_token(token_expiry)\n    tab = browser_mock.add_response(\n        opened_url=\"http://url_opened_by_browser?state=1234\",\n        reply_url=f\"http://localhost:5000#access_token={token}&state=1234\",\n    )\n\n    # perform code using authentication\n\n    tab.assert_success()\n```\n\n[1]: https://pypi.python.org/pypi/httpx \"httpx module\"\n[2]: https://www.python-httpx.org/advanced/#customizing-authentication \"authentication parameter on httpx module\"\n[3]: https://openid.net/specs/openid-connect-core-1_0.html#IDToken \"OpenID ID Token specifications\"\n[6]: https://docs.pytest.org/en/latest/ \"pytest module\"\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"authentication,oauth2,aws,okta,aad,entra","license":"MIT License  Copyright (c) 2024 Colin Bounouar  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ","maintainer":"","maintainer_email":"Colin Bounouar <colin.bounouar.dev@gmail.com>","name":"httpx-auth","package_url":"https://pypi.org/project/httpx-auth/","platform":null,"project_url":"https://pypi.org/project/httpx-auth/","project_urls":{"changelog":"https://github.com/Colin-b/httpx_auth/blob/master/CHANGELOG.md","documentation":"https://colin-b.github.io/httpx_auth/","issues":"https://github.com/Colin-b/httpx_auth/issues","repository":"https://github.com/Colin-b/httpx_auth"},"provides_extra":null,"release_url":"https://pypi.org/project/httpx-auth/0.22.0/","requires_dist":["httpx ==0.27.*","pyjwt ==2.* ; extra == 'testing'","pytest-httpx ==0.30.* ; extra == 'testing'","time-machine ==2.* ; extra == 'testing'","pytest-cov ==4.* ; extra == 'testing'","pytest-asyncio ==0.23.* ; extra == 'testing'"],"requires_python":">=3.9","summary":"Authentication for HTTPX","version":"0.22.0","yanked":false,"yanked_reason":null},"last_serial":22131789,"releases":{"0.0.1":[{"comment_text":"","digests":{"blake2b_256":"a6e34ed0810bfb8640986898708a30d458f64df5dd8689c816edff4c68de2a7c","md5":"d64381c5c3487fffda7b19737cb92a3c","sha256":"09cd6401e79ab65f57696930ae0fb9541183c6a4182edb06219a71344f2fad9f"},"downloads":-1,"filename":"httpx_auth-0.0.1-py3-none-any.whl","has_sig":false,"md5_digest":"d64381c5c3487fffda7b19737cb92a3c","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":3213,"upload_time":"2020-02-04T14:14:58","upload_time_iso_8601":"2020-02-04T14:14:58.718938Z","url":"https://files.pythonhosted.org/packages/a6/e3/4ed0810bfb8640986898708a30d458f64df5dd8689c816edff4c68de2a7c/httpx_auth-0.0.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"0d5d0407ef6a36cad4d5853ea9d18b01c039909fc63ae027f89cf352076ea135","md5":"daa4ae303b6cc72096e3266b3e69b884","sha256":"0be04d71e6bdd0a08322c9232fef7906af4f228887a336c37a46634f3ebf14d6"},"downloads":-1,"filename":"httpx_auth-0.0.1.tar.gz","has_sig":false,"md5_digest":"daa4ae303b6cc72096e3266b3e69b884","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":2260,"upload_time":"2020-02-04T14:15:00","upload_time_iso_8601":"2020-02-04T14:15:00.646017Z","url":"https://files.pythonhosted.org/packages/0d/5d/0407ef6a36cad4d5853ea9d18b01c039909fc63ae027f89cf352076ea135/httpx_auth-0.0.1.tar.gz","yanked":false,"yanked_reason":null}],"0.0.2":[{"comment_text":"","digests":{"blake2b_256":"f7e307934f8a8ed1794971a67c7a82ccd205eae8c1f12a6104677f4fb000db55","md5":"6fc7e24860cd30ac0f4c94b92c59fc12","sha256":"b64814a0cc3facec7c25e3c93f9a66d569b70e0818f8748e71e2e390aaf266b5"},"downloads":-1,"filename":"httpx_auth-0.0.2-py3-none-any.whl","has_sig":false,"md5_digest":"6fc7e24860cd30ac0f4c94b92c59fc12","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":22422,"upload_time":"2020-02-10T18:32:15","upload_time_iso_8601":"2020-02-10T18:32:15.798022Z","url":"https://files.pythonhosted.org/packages/f7/e3/07934f8a8ed1794971a67c7a82ccd205eae8c1f12a6104677f4fb000db55/httpx_auth-0.0.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e8eb41d0b906c0d0b06a34062e291a02513062317a40664afc9595fc7da37287","md5":"e6e96a92c364765a1c929b87d4879e06","sha256":"ff393305537152580c47404e49a57991fd389d0cfae727619b72ef084381b87c"},"downloads":-1,"filename":"httpx_auth-0.0.2.tar.gz","has_sig":false,"md5_digest":"e6e96a92c364765a1c929b87d4879e06","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":27489,"upload_time":"2020-02-10T18:32:17","upload_time_iso_8601":"2020-02-10T18:32:17.262955Z","url":"https://files.pythonhosted.org/packages/e8/eb/41d0b906c0d0b06a34062e291a02513062317a40664afc9595fc7da37287/httpx_auth-0.0.2.tar.gz","yanked":false,"yanked_reason":null}],"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"2311b7a90f6aa1a674780f0f1e307e919f30999fbb23038b7e140fcc172c0d5d","md5":"43aa42d0650cff222194232e6d381833","sha256":"e7930c5af938c9802eecd41b366b97bd693be674ac2d0ddead84272e19a48668"},"downloads":-1,"filename":"httpx_auth-0.1.0-py3-none-any.whl","has_sig":false,"md5_digest":"43aa42d0650cff222194232e6d381833","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":22483,"upload_time":"2020-03-09T16:06:23","upload_time_iso_8601":"2020-03-09T16:06:23.243581Z","url":"https://files.pythonhosted.org/packages/23/11/b7a90f6aa1a674780f0f1e307e919f30999fbb23038b7e140fcc172c0d5d/httpx_auth-0.1.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"7a94c442b9634e09fbdb27473b2315912fa4a9b37ac87709a3c1d08cc6aac47d","md5":"0bc32c02e0269cfccceed94811dee42f","sha256":"efdbe1d256d88dd4bd8072d1938c073d4e52935854f712c68e6a30568216832f"},"downloads":-1,"filename":"httpx_auth-0.1.0.tar.gz","has_sig":false,"md5_digest":"0bc32c02e0269cfccceed94811dee42f","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":28071,"upload_time":"2020-03-09T16:06:24","upload_time_iso_8601":"2020-03-09T16:06:24.762564Z","url":"https://files.pythonhosted.org/packages/7a/94/c442b9634e09fbdb27473b2315912fa4a9b37ac87709a3c1d08cc6aac47d/httpx_auth-0.1.0.tar.gz","yanked":false,"yanked_reason":null}],"0.10.0":[{"comment_text":"","digests":{"blake2b_256":"ddaa0d5221a7340cc4d05f08d886985d80bfd5f9ed6afcc8f494d351ec630416","md5":"f135bcc73d80cd97aad64c4cc57961c1","sha256":"b8845c06865efd5191ab04704dcea7e6b21986bf0be5437e6fabfc53d3362010"},"downloads":-1,"filename":"httpx_auth-0.10.0-py3-none-any.whl","has_sig":false,"md5_digest":"f135bcc73d80cd97aad64c4cc57961c1","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":27259,"upload_time":"2021-04-27T20:24:15","upload_time_iso_8601":"2021-04-27T20:24:15.135327Z","url":"https://files.pythonhosted.org/packages/dd/aa/0d5221a7340cc4d05f08d886985d80bfd5f9ed6afcc8f494d351ec630416/httpx_auth-0.10.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"27ecf6aff8544b0b9cf2630c24c51dd2df9243a372a2ccd5346cdaee4151f35a","md5":"5c591fec1126f211a7b6c2bde1209d7a","sha256":"3d9f58e66db0ae97a712e076cf4e77f4af2b12da7dffbc400ae15db6314e57c9"},"downloads":-1,"filename":"httpx_auth-0.10.0.tar.gz","has_sig":false,"md5_digest":"5c591fec1126f211a7b6c2bde1209d7a","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":34556,"upload_time":"2021-04-27T20:24:16","upload_time_iso_8601":"2021-04-27T20:24:16.705678Z","url":"https://files.pythonhosted.org/packages/27/ec/f6aff8544b0b9cf2630c24c51dd2df9243a372a2ccd5346cdaee4151f35a/httpx_auth-0.10.0.tar.gz","yanked":false,"yanked_reason":null}],"0.11.0":[{"comment_text":"","digests":{"blake2b_256":"569f9c974093f1c88276e086089e51f1736f6a28abc5dd10f37b4de487c5bf9b","md5":"637567cf65d11f2a830c089778b62049","sha256":"e7f264bbdb5cf09346d838a7235fe583dcd4ef7d6b9c6c3039a44b8644ac02fb"},"downloads":-1,"filename":"httpx_auth-0.11.0-py3-none-any.whl","has_sig":false,"md5_digest":"637567cf65d11f2a830c089778b62049","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":27275,"upload_time":"2021-08-19T14:04:13","upload_time_iso_8601":"2021-08-19T14:04:13.085851Z","url":"https://files.pythonhosted.org/packages/56/9f/9c974093f1c88276e086089e51f1736f6a28abc5dd10f37b4de487c5bf9b/httpx_auth-0.11.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"12525fd6290fa6a11ac2b62aee843802989a108e016b4147bd30145aa5752ece","md5":"d3a9d155ce6b6095916fb371f4712872","sha256":"81fed0c1f5a3b555f085be55bbce55f2f70bcf58b1c5bcab87b437217fb9b67b"},"downloads":-1,"filename":"httpx_auth-0.11.0.tar.gz","has_sig":false,"md5_digest":"d3a9d155ce6b6095916fb371f4712872","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":34121,"upload_time":"2021-08-19T14:04:14","upload_time_iso_8601":"2021-08-19T14:04:14.954784Z","url":"https://files.pythonhosted.org/packages/12/52/5fd6290fa6a11ac2b62aee843802989a108e016b4147bd30145aa5752ece/httpx_auth-0.11.0.tar.gz","yanked":false,"yanked_reason":null}],"0.12.0":[{"comment_text":"","digests":{"blake2b_256":"c28921534a8cc7dd6c2cd068d936448c47d54fa8e1ac6287de76cbb99c271903","md5":"9c0fb7429f13fa9a51f8de67f3547a0a","sha256":"27a83e5a73dcd5fabf314dd4ef98a7c84b2e209e01d15f9c4189e732323bae18"},"downloads":-1,"filename":"httpx_auth-0.12.0-py3-none-any.whl","has_sig":false,"md5_digest":"9c0fb7429f13fa9a51f8de67f3547a0a","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":27362,"upload_time":"2021-11-01T17:03:32","upload_time_iso_8601":"2021-11-01T17:03:32.106269Z","url":"https://files.pythonhosted.org/packages/c2/89/21534a8cc7dd6c2cd068d936448c47d54fa8e1ac6287de76cbb99c271903/httpx_auth-0.12.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1fbe89957ef7360f7e9084bca012fef584e367e58af076614a16704a2f198a51","md5":"78d82b8a77f499da370c67bc22ceeab6","sha256":"e5045894203d04079ad03eee08fee7f9585d817f0f5dc68e24d6a32ccf6669ff"},"downloads":-1,"filename":"httpx_auth-0.12.0.tar.gz","has_sig":false,"md5_digest":"78d82b8a77f499da370c67bc22ceeab6","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":35303,"upload_time":"2021-11-01T17:03:33","upload_time_iso_8601":"2021-11-01T17:03:33.751585Z","url":"https://files.pythonhosted.org/packages/1f/be/89957ef7360f7e9084bca012fef584e367e58af076614a16704a2f198a51/httpx_auth-0.12.0.tar.gz","yanked":false,"yanked_reason":null}],"0.13.0":[{"comment_text":"","digests":{"blake2b_256":"97091117a3e84ce1633e8b45f9783524d8aca18f30e044229f39cf1b14cc0fb1","md5":"1dce45d62cc1523cc51c2619cd5fc3b1","sha256":"40eb02606b95b7ec3278cef6c45be6506f2d11bc2e0e77046813be78c40897b7"},"downloads":-1,"filename":"httpx_auth-0.13.0-py3-none-any.whl","has_sig":false,"md5_digest":"1dce45d62cc1523cc51c2619cd5fc3b1","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":27384,"upload_time":"2021-11-16T01:57:44","upload_time_iso_8601":"2021-11-16T01:57:44.415463Z","url":"https://files.pythonhosted.org/packages/97/09/1117a3e84ce1633e8b45f9783524d8aca18f30e044229f39cf1b14cc0fb1/httpx_auth-0.13.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"2f55c7c5c77bda1b0086f5b00db4c51b1d0d1294a40efd3963acf920efca3451","md5":"97cee22b2474a720d900ab9193e7755e","sha256":"e6c7650a6a69f50191bfd8dbf05ec560a007ca50584e62a87c1cf70587704702"},"downloads":-1,"filename":"httpx_auth-0.13.0.tar.gz","has_sig":false,"md5_digest":"97cee22b2474a720d900ab9193e7755e","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":34873,"upload_time":"2021-11-16T01:57:46","upload_time_iso_8601":"2021-11-16T01:57:46.118398Z","url":"https://files.pythonhosted.org/packages/2f/55/c7c5c77bda1b0086f5b00db4c51b1d0d1294a40efd3963acf920efca3451/httpx_auth-0.13.0.tar.gz","yanked":false,"yanked_reason":null}],"0.14.0":[{"comment_text":"","digests":{"blake2b_256":"ff1d5b4413f1897abd9e180e364cddc3380a5e9ab55de30f63448c70fc830f33","md5":"fe85c8c73104cc99e5f328c989876bd4","sha256":"8357305b92fc06541f918c11decf6f8d9af1175635ecda0d50fda3eec7652790"},"downloads":-1,"filename":"httpx_auth-0.14.0-py3-none-any.whl","has_sig":false,"md5_digest":"fe85c8c73104cc99e5f328c989876bd4","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":27382,"upload_time":"2022-01-26T17:34:12","upload_time_iso_8601":"2022-01-26T17:34:12.614060Z","url":"https://files.pythonhosted.org/packages/ff/1d/5b4413f1897abd9e180e364cddc3380a5e9ab55de30f63448c70fc830f33/httpx_auth-0.14.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"015be602ee2229c4d300b4122b30224926f854d8edf9643ce36431059856fe87","md5":"daf37d56c30f9987d028dc14e49f637c","sha256":"9718ef88add63924632834f1471b04495e144b590544b2e4f51713d94e60ffa9"},"downloads":-1,"filename":"httpx_auth-0.14.0.tar.gz","has_sig":false,"md5_digest":"daf37d56c30f9987d028dc14e49f637c","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":34875,"upload_time":"2022-01-26T17:34:14","upload_time_iso_8601":"2022-01-26T17:34:14.076461Z","url":"https://files.pythonhosted.org/packages/01/5b/e602ee2229c4d300b4122b30224926f854d8edf9643ce36431059856fe87/httpx_auth-0.14.0.tar.gz","yanked":false,"yanked_reason":null}],"0.14.1":[{"comment_text":"","digests":{"blake2b_256":"21bc62a6f32706aa299a495a4bc204be3f4018d76ea97ac575a01cbffe0380ba","md5":"ba354ad4cfcfee9c0580bf02051144b4","sha256":"b2a100bc7d2fb26caaae97c8899c1608890bc0004c512432f1c81d50e47380a2"},"downloads":-1,"filename":"httpx_auth-0.14.1-py3-none-any.whl","has_sig":false,"md5_digest":"ba354ad4cfcfee9c0580bf02051144b4","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":27648,"upload_time":"2022-02-05T17:12:17","upload_time_iso_8601":"2022-02-05T17:12:17.777050Z","url":"https://files.pythonhosted.org/packages/21/bc/62a6f32706aa299a495a4bc204be3f4018d76ea97ac575a01cbffe0380ba/httpx_auth-0.14.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"eb3208e1983a2d7528c61bad03e27a4253901be5834e21bd53116e71643f2da0","md5":"c350907c332a61488eecb9b8d3c585b2","sha256":"50e639b80fc74b399db7ebab9857d054d74fbab2212cc265b18a7538831acd56"},"downloads":-1,"filename":"httpx_auth-0.14.1.tar.gz","has_sig":false,"md5_digest":"c350907c332a61488eecb9b8d3c585b2","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":34145,"upload_time":"2022-02-05T17:12:19","upload_time_iso_8601":"2022-02-05T17:12:19.560239Z","url":"https://files.pythonhosted.org/packages/eb/32/08e1983a2d7528c61bad03e27a4253901be5834e21bd53116e71643f2da0/httpx_auth-0.14.1.tar.gz","yanked":false,"yanked_reason":null}],"0.15.0":[{"comment_text":"","digests":{"blake2b_256":"34d8a52138847f790c5af6a06d462db0492f271695add5948997eb3ef4128392","md5":"e93df8c8e6b5bf4811425e2206e223ec","sha256":"ca252bffcfb1d4dbfdf74b69d4e6a06e387bca3dd896ef9c5ddd85787b56652b"},"downloads":-1,"filename":"httpx_auth-0.15.0-py3-none-any.whl","has_sig":false,"md5_digest":"e93df8c8e6b5bf4811425e2206e223ec","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":27673,"upload_time":"2022-06-01T09:33:43","upload_time_iso_8601":"2022-06-01T09:33:43.188084Z","url":"https://files.pythonhosted.org/packages/34/d8/a52138847f790c5af6a06d462db0492f271695add5948997eb3ef4128392/httpx_auth-0.15.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"531cfa20adec84cea36048c6cba298a96e86c30394229de494adec2bdfb58670","md5":"fe771c2f389a9816ebe296806cd62471","sha256":"52e649f7e4dd1486bd040ee70c6bd00e26cb987a68c2aeffc76a38ac5931cc61"},"downloads":-1,"filename":"httpx_auth-0.15.0.tar.gz","has_sig":false,"md5_digest":"fe771c2f389a9816ebe296806cd62471","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":35173,"upload_time":"2022-06-01T09:33:44","upload_time_iso_8601":"2022-06-01T09:33:44.665158Z","url":"https://files.pythonhosted.org/packages/53/1c/fa20adec84cea36048c6cba298a96e86c30394229de494adec2bdfb58670/httpx_auth-0.15.0.tar.gz","yanked":false,"yanked_reason":null}],"0.16.0":[{"comment_text":"","digests":{"blake2b_256":"278225db9ad54a7564c65cf80a461f425e4113dea38b0ce2a09e3bbaa95defd8","md5":"d498faa31d3299766eff9c82f759a941","sha256":"29bbcd22796584a75e32fd7c285f786978c2571132092cc015a2514a06501950"},"downloads":-1,"filename":"httpx_auth-0.16.0-py3-none-any.whl","has_sig":false,"md5_digest":"d498faa31d3299766eff9c82f759a941","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":28946,"upload_time":"2023-04-25T13:27:31","upload_time_iso_8601":"2023-04-25T13:27:31.177822Z","url":"https://files.pythonhosted.org/packages/27/82/25db9ad54a7564c65cf80a461f425e4113dea38b0ce2a09e3bbaa95defd8/httpx_auth-0.16.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e1dc7e14dc4fa9b830e3c37f42e1915aafa0068c1ec48211c60639e35e6f8766","md5":"ccb94b9586b70385c93db8ea99ce7e7e","sha256":"e1620c1964ce9742ead48f6b7477357b93f0cafea3d5283e8f98429d8941a981"},"downloads":-1,"filename":"httpx_auth-0.16.0.tar.gz","has_sig":false,"md5_digest":"ccb94b9586b70385c93db8ea99ce7e7e","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":67936,"upload_time":"2023-04-25T13:27:33","upload_time_iso_8601":"2023-04-25T13:27:33.513149Z","url":"https://files.pythonhosted.org/packages/e1/dc/7e14dc4fa9b830e3c37f42e1915aafa0068c1ec48211c60639e35e6f8766/httpx_auth-0.16.0.tar.gz","yanked":false,"yanked_reason":null}],"0.17.0":[{"comment_text":"","digests":{"blake2b_256":"0026629d29a52ef24c733b9dcbe1431881ce86c9bc56f24e362c13ee138d911f","md5":"5df5932d8324d0392bd06e439d9f0971","sha256":"5358f2938f8843179dc681cea34626d3589b312bb021425f2cd4a4fbc316e92c"},"downloads":-1,"filename":"httpx_auth-0.17.0-py3-none-any.whl","has_sig":false,"md5_digest":"5df5932d8324d0392bd06e439d9f0971","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":29561,"upload_time":"2023-04-26T16:17:06","upload_time_iso_8601":"2023-04-26T16:17:06.103065Z","url":"https://files.pythonhosted.org/packages/00/26/629d29a52ef24c733b9dcbe1431881ce86c9bc56f24e362c13ee138d911f/httpx_auth-0.17.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"68e41d57ac833223ffa6eb0f02b8c4c678b5e3ebbe718aea2b5e2a496267cda0","md5":"26238ed399373f7328d327c8100ea83d","sha256":"4e297113804ac3ee316d12a9596bc05e4dd592d2bf0809e5b4dab496d8a35b13"},"downloads":-1,"filename":"httpx_auth-0.17.0.tar.gz","has_sig":false,"md5_digest":"26238ed399373f7328d327c8100ea83d","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":70061,"upload_time":"2023-04-26T16:17:08","upload_time_iso_8601":"2023-04-26T16:17:08.520510Z","url":"https://files.pythonhosted.org/packages/68/e4/1d57ac833223ffa6eb0f02b8c4c678b5e3ebbe718aea2b5e2a496267cda0/httpx_auth-0.17.0.tar.gz","yanked":false,"yanked_reason":null}],"0.18.0":[{"comment_text":"","digests":{"blake2b_256":"4c1e9699999c8733f2064de8ccba27367672eafc4bbac0718ab4f296a928521f","md5":"4868f82e7a2d636425a897ef38c3e8e4","sha256":"e0b3c3439d8de6c4ff9e74787f5cd99575fab5085f3616a3d03228ca03ec213b"},"downloads":-1,"filename":"httpx_auth-0.18.0-py3-none-any.whl","has_sig":false,"md5_digest":"4868f82e7a2d636425a897ef38c3e8e4","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.9","size":29554,"upload_time":"2023-09-11T18:52:48","upload_time_iso_8601":"2023-09-11T18:52:48.789068Z","url":"https://files.pythonhosted.org/packages/4c/1e/9699999c8733f2064de8ccba27367672eafc4bbac0718ab4f296a928521f/httpx_auth-0.18.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d8a3c1d1f06ba6b8f67c90075ebb6199aa0d97e39e9b751a1c39a4c72669b29b","md5":"35161e1db7829eaf56b0d25601a25098","sha256":"22826b4b9c3d76523e9f4797769cafcc46f0d2e02f5e56856d5d996e7b925654"},"downloads":-1,"filename":"httpx_auth-0.18.0.tar.gz","has_sig":false,"md5_digest":"35161e1db7829eaf56b0d25601a25098","packagetype":"sdist","python_version":"source","requires_python":">=3.9","size":70205,"upload_time":"2023-09-11T18:52:50","upload_time_iso_8601":"2023-09-11T18:52:50.585943Z","url":"https://files.pythonhosted.org/packages/d8/a3/c1d1f06ba6b8f67c90075ebb6199aa0d97e39e9b751a1c39a4c72669b29b/httpx_auth-0.18.0.tar.gz","yanked":false,"yanked_reason":null}],"0.19.0":[{"comment_text":"","digests":{"blake2b_256":"37375b3ca3e5d8f2703c16053c8597554f46e3737dbbbf955d309b319bb272d6","md5":"cfb3d4c597943a34762b068026d1aad4","sha256":"6735fff47571fddb25cbcadd8f012b09fe27a171ba114001c82bfb536789a28f"},"downloads":-1,"filename":"httpx_auth-0.19.0-py3-none-any.whl","has_sig":false,"md5_digest":"cfb3d4c597943a34762b068026d1aad4","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.9","size":29560,"upload_time":"2024-01-09T10:35:56","upload_time_iso_8601":"2024-01-09T10:35:56.986298Z","url":"https://files.pythonhosted.org/packages/37/37/5b3ca3e5d8f2703c16053c8597554f46e3737dbbbf955d309b319bb272d6/httpx_auth-0.19.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ec87f43fb50c8186de45975737657ee86a4f24ce1162aae2554b3e5aff85d772","md5":"b4d36e178a6fbcc66a5a10e490992947","sha256":"b834fd7e257d7d389054fec9a48a9cdc646c9aa90c519f9b02e4b0a95afe0c19"},"downloads":-1,"filename":"httpx_auth-0.19.0.tar.gz","has_sig":false,"md5_digest":"b4d36e178a6fbcc66a5a10e490992947","packagetype":"sdist","python_version":"source","requires_python":">=3.9","size":70290,"upload_time":"2024-01-09T10:35:58","upload_time_iso_8601":"2024-01-09T10:35:58.940338Z","url":"https://files.pythonhosted.org/packages/ec/87/f43fb50c8186de45975737657ee86a4f24ce1162aae2554b3e5aff85d772/httpx_auth-0.19.0.tar.gz","yanked":false,"yanked_reason":null}],"0.2.0":[{"comment_text":"","digests":{"blake2b_256":"e1f057870eefd04dfed0355b3045f2edf2379d323e8d6bd8e9e6a343c190e099","md5":"a08f4aa928b3116e0baa429254dc7728","sha256":"1743548110a387def0fba3efefed0b09b30507b5ca46674021b35b86260c5419"},"downloads":-1,"filename":"httpx_auth-0.2.0-py3-none-any.whl","has_sig":false,"md5_digest":"a08f4aa928b3116e0baa429254dc7728","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":22399,"upload_time":"2020-03-23T10:41:11","upload_time_iso_8601":"2020-03-23T10:41:11.933872Z","url":"https://files.pythonhosted.org/packages/e1/f0/57870eefd04dfed0355b3045f2edf2379d323e8d6bd8e9e6a343c190e099/httpx_auth-0.2.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"72eeca3d7fe210e5e171324bc4a7cd23bda012529b1b03732fbf68645db65aa7","md5":"78353933fdf2f35ee06619fe2d0097e8","sha256":"ee60747a2d79f321f1446409356c30058806edd52b6b45d46695c82575f62ca5"},"downloads":-1,"filename":"httpx_auth-0.2.0.tar.gz","has_sig":false,"md5_digest":"78353933fdf2f35ee06619fe2d0097e8","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":27992,"upload_time":"2020-03-23T10:41:13","upload_time_iso_8601":"2020-03-23T10:41:13.374922Z","url":"https://files.pythonhosted.org/packages/72/ee/ca3d7fe210e5e171324bc4a7cd23bda012529b1b03732fbf68645db65aa7/httpx_auth-0.2.0.tar.gz","yanked":false,"yanked_reason":null}],"0.20.0":[{"comment_text":"","digests":{"blake2b_256":"eff5d0cbbda8300eb4f0cf5cec80d9741404f9a0a283f7d6656d36d1bd00ff9c","md5":"559621795c917ee786a309f049801aca","sha256":"1155a660a32e89da6ec1f1a7dc7046903cf57e50a2967be27553a20d2b6aa910"},"downloads":-1,"filename":"httpx_auth-0.20.0-py3-none-any.whl","has_sig":false,"md5_digest":"559621795c917ee786a309f049801aca","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.9","size":31903,"upload_time":"2024-02-12T00:25:43","upload_time_iso_8601":"2024-02-12T00:25:43.505839Z","url":"https://files.pythonhosted.org/packages/ef/f5/d0cbbda8300eb4f0cf5cec80d9741404f9a0a283f7d6656d36d1bd00ff9c/httpx_auth-0.20.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"48c2282f1a7753fe7c9d41b1e12f1a7bd9067d866319bfa1ab2332b8174e5add","md5":"921a9fc8ed69645a81960baf6cad6eef","sha256":"90646c08a25e654f83300b6a6d4f557c8427427c270403e95b48d6c706971a65"},"downloads":-1,"filename":"httpx_auth-0.20.0.tar.gz","has_sig":false,"md5_digest":"921a9fc8ed69645a81960baf6cad6eef","packagetype":"sdist","python_version":"source","requires_python":">=3.9","size":102378,"upload_time":"2024-02-12T00:25:45","upload_time_iso_8601":"2024-02-12T00:25:45.409782Z","url":"https://files.pythonhosted.org/packages/48/c2/282f1a7753fe7c9d41b1e12f1a7bd9067d866319bfa1ab2332b8174e5add/httpx_auth-0.20.0.tar.gz","yanked":false,"yanked_reason":null}],"0.21.0":[{"comment_text":"","digests":{"blake2b_256":"262eb054743cca376e0e0bc33675e159d2a78c11666fb7fed21540719685c35a","md5":"c651520856be82828439b1f4785b4b4a","sha256":"281e2566b92d1bdce7346a6662cca14082ad8a6d7b2601c5947c5b5f21e6d5bc"},"downloads":-1,"filename":"httpx_auth-0.21.0-py3-none-any.whl","has_sig":false,"md5_digest":"c651520856be82828439b1f4785b4b4a","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.9","size":45067,"upload_time":"2024-02-18T23:38:19","upload_time_iso_8601":"2024-02-18T23:38:19.042241Z","url":"https://files.pythonhosted.org/packages/26/2e/b054743cca376e0e0bc33675e159d2a78c11666fb7fed21540719685c35a/httpx_auth-0.21.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ae4b3518eb9e26b4d016bc7b97c57beed6d60907718309cd6fedfd0594173574","md5":"8cff84f2a693b004a05dafcff8941ce7","sha256":"f9c12f529faae117a654c49d103ca2533db8ec2fdc2f4b706384fee68b789ef8"},"downloads":-1,"filename":"httpx_auth-0.21.0.tar.gz","has_sig":false,"md5_digest":"8cff84f2a693b004a05dafcff8941ce7","packagetype":"sdist","python_version":"source","requires_python":">=3.9","size":116087,"upload_time":"2024-02-18T23:38:21","upload_time_iso_8601":"2024-02-18T23:38:21.068953Z","url":"https://files.pythonhosted.org/packages/ae/4b/3518eb9e26b4d016bc7b97c57beed6d60907718309cd6fedfd0594173574/httpx_auth-0.21.0.tar.gz","yanked":false,"yanked_reason":null}],"0.22.0":[{"comment_text":"","digests":{"blake2b_256":"4261fc870705034521d6caa974685eecb7b909b5a66539467c4fde00b319384d","md5":"e4399973dca679dd31c628e13c68c7e9","sha256":"c60198e8160728f00e754b5181f4b9d1e4530260b94bbd09fd8abfe826b5be50"},"downloads":-1,"filename":"httpx_auth-0.22.0-py3-none-any.whl","has_sig":false,"md5_digest":"e4399973dca679dd31c628e13c68c7e9","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.9","size":44819,"upload_time":"2024-03-02T12:09:32","upload_time_iso_8601":"2024-03-02T12:09:32.974615Z","url":"https://files.pythonhosted.org/packages/42/61/fc870705034521d6caa974685eecb7b909b5a66539467c4fde00b319384d/httpx_auth-0.22.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e68ca8a4f7dc9736a1c8fdfe8bc8c9b29145cd11f1b044567dc3d4ed611d0fcc","md5":"0a4254987596e83d73084eb99ba3cf93","sha256":"5dc2d18cd3a0788015fd22714048e59f5eca6aa3051bfbd8d9dd0d2e6254c095"},"downloads":-1,"filename":"httpx_auth-0.22.0.tar.gz","has_sig":false,"md5_digest":"0a4254987596e83d73084eb99ba3cf93","packagetype":"sdist","python_version":"source","requires_python":">=3.9","size":116355,"upload_time":"2024-03-02T12:09:34","upload_time_iso_8601":"2024-03-02T12:09:34.572296Z","url":"https://files.pythonhosted.org/packages/e6/8c/a8a4f7dc9736a1c8fdfe8bc8c9b29145cd11f1b044567dc3d4ed611d0fcc/httpx_auth-0.22.0.tar.gz","yanked":false,"yanked_reason":null}],"0.3.0":[{"comment_text":"","digests":{"blake2b_256":"88243ff55a30dbccddd91cf93c809f26c0d5e0538ec30f9809d9a7623e1dd480","md5":"741d62640c0386674d429fa12650bfcd","sha256":"1cce3763a9204c06323af527271d408b37861a628e220d958d025f42afd61c28"},"downloads":-1,"filename":"httpx_auth-0.3.0-py3-none-any.whl","has_sig":false,"md5_digest":"741d62640c0386674d429fa12650bfcd","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":22402,"upload_time":"2020-05-26T19:09:59","upload_time_iso_8601":"2020-05-26T19:09:59.094688Z","url":"https://files.pythonhosted.org/packages/88/24/3ff55a30dbccddd91cf93c809f26c0d5e0538ec30f9809d9a7623e1dd480/httpx_auth-0.3.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b3736cadd2e186186f58d9a1515ffa8e52d707c24c3bcb263e0a32d2bca38071","md5":"79fb38a5991ecd74b70f2a21706ebaa8","sha256":"feaf60a6777e5cf3336b8ac776cae10afff04688e74ee2730c38cec3d1836f70"},"downloads":-1,"filename":"httpx_auth-0.3.0.tar.gz","has_sig":false,"md5_digest":"79fb38a5991ecd74b70f2a21706ebaa8","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":27602,"upload_time":"2020-05-26T19:10:00","upload_time_iso_8601":"2020-05-26T19:10:00.490780Z","url":"https://files.pythonhosted.org/packages/b3/73/6cadd2e186186f58d9a1515ffa8e52d707c24c3bcb263e0a32d2bca38071/httpx_auth-0.3.0.tar.gz","yanked":false,"yanked_reason":null}],"0.4.0":[{"comment_text":"","digests":{"blake2b_256":"826abb2dd39ead5d2fd4d45e75ac3b24e22afa1de3beb38b74861d34b86d4198","md5":"a3f31744412067cc094daf002365a1a2","sha256":"f07a79dbd1db1250ab89105705cf3d8fe8f2317698cbc605df4c0d8f89298a92"},"downloads":-1,"filename":"httpx_auth-0.4.0-py3-none-any.whl","has_sig":false,"md5_digest":"a3f31744412067cc094daf002365a1a2","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":25961,"upload_time":"2020-08-07T17:10:58","upload_time_iso_8601":"2020-08-07T17:10:58.460248Z","url":"https://files.pythonhosted.org/packages/82/6a/bb2dd39ead5d2fd4d45e75ac3b24e22afa1de3beb38b74861d34b86d4198/httpx_auth-0.4.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c6ff03830e76202f9c4d8268ad83a8e6d8a85a51d93e21db3d6db2b594045f64","md5":"0bb5a4fe6d3043228144d76a7e8a1dd3","sha256":"10841d0ab9ce5d22aadf6907af22725aa886ba17b1ec4540725e31a6f3a09fd7"},"downloads":-1,"filename":"httpx_auth-0.4.0.tar.gz","has_sig":false,"md5_digest":"0bb5a4fe6d3043228144d76a7e8a1dd3","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":31401,"upload_time":"2020-08-07T17:11:00","upload_time_iso_8601":"2020-08-07T17:11:00.062586Z","url":"https://files.pythonhosted.org/packages/c6/ff/03830e76202f9c4d8268ad83a8e6d8a85a51d93e21db3d6db2b594045f64/httpx_auth-0.4.0.tar.gz","yanked":false,"yanked_reason":null}],"0.5.0":[{"comment_text":"","digests":{"blake2b_256":"7a3b537bef8013fcc79e8f2db0ad717c248561d0e1bc2292de2455f631913b01","md5":"c2c1eeb2deb092bf6ad4f2e8f8b5439e","sha256":"3f2c04d0f71130199dfe8c590d4edd4f17700b4300b4f1b89e01ca3af9d42f46"},"downloads":-1,"filename":"httpx_auth-0.5.0-py3-none-any.whl","has_sig":false,"md5_digest":"c2c1eeb2deb092bf6ad4f2e8f8b5439e","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":26051,"upload_time":"2020-08-19T14:43:57","upload_time_iso_8601":"2020-08-19T14:43:57.858634Z","url":"https://files.pythonhosted.org/packages/7a/3b/537bef8013fcc79e8f2db0ad717c248561d0e1bc2292de2455f631913b01/httpx_auth-0.5.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"33d7607918bede470c55096b99a6b579ddd585f3e5280aa860b07ada045d3ba1","md5":"05554b72ca62394ed899afc9b73bb800","sha256":"89d2a13a474a884c674c70a18fd83ddd36e280dc92000988019b4df0a3f51259"},"downloads":-1,"filename":"httpx_auth-0.5.0.tar.gz","has_sig":false,"md5_digest":"05554b72ca62394ed899afc9b73bb800","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":31207,"upload_time":"2020-08-19T14:43:59","upload_time_iso_8601":"2020-08-19T14:43:59.471487Z","url":"https://files.pythonhosted.org/packages/33/d7/607918bede470c55096b99a6b579ddd585f3e5280aa860b07ada045d3ba1/httpx_auth-0.5.0.tar.gz","yanked":false,"yanked_reason":null}],"0.5.1":[{"comment_text":"","digests":{"blake2b_256":"2bc5bb2a809c0863abb11d101ff57294a5e4d328f086e82a5454352b8621f194","md5":"255fc67b5310fd49e8386a2c71f2b27a","sha256":"6c20fa6d11718b393db22259d884596a06c50c03b400cb8db93e306b9b5e9ce4"},"downloads":-1,"filename":"httpx_auth-0.5.1-py3-none-any.whl","has_sig":false,"md5_digest":"255fc67b5310fd49e8386a2c71f2b27a","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":26016,"upload_time":"2020-08-31T20:36:56","upload_time_iso_8601":"2020-08-31T20:36:56.939660Z","url":"https://files.pythonhosted.org/packages/2b/c5/bb2a809c0863abb11d101ff57294a5e4d328f086e82a5454352b8621f194/httpx_auth-0.5.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"0fdbbc36c8791dea13a7a2110f592356b1d6699c9b6856ab9da851e776d2cbcb","md5":"4d43edd4d72020a91b088f1743f92f48","sha256":"fe6fb673df61e560ee95a70bf1c0b665c675f1125e0c1f4d422848ee75b1b3a8"},"downloads":-1,"filename":"httpx_auth-0.5.1.tar.gz","has_sig":false,"md5_digest":"4d43edd4d72020a91b088f1743f92f48","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":31151,"upload_time":"2020-08-31T20:36:58","upload_time_iso_8601":"2020-08-31T20:36:58.275210Z","url":"https://files.pythonhosted.org/packages/0f/db/bc36c8791dea13a7a2110f592356b1d6699c9b6856ab9da851e776d2cbcb/httpx_auth-0.5.1.tar.gz","yanked":false,"yanked_reason":null}],"0.6.0":[{"comment_text":"","digests":{"blake2b_256":"8c8fcdba5991a333b522a6f8e83c1aadb1faa4f369f5bb560d3b053085c3d142","md5":"e95a4a8ec0773ec6092339ed91486f79","sha256":"05bae4c340419bfbe74693168ada4859d0af2482c7f836e107ba104922b337bc"},"downloads":-1,"filename":"httpx_auth-0.6.0-py3-none-any.whl","has_sig":false,"md5_digest":"e95a4a8ec0773ec6092339ed91486f79","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":26019,"upload_time":"2020-09-22T14:56:54","upload_time_iso_8601":"2020-09-22T14:56:54.656491Z","url":"https://files.pythonhosted.org/packages/8c/8f/cdba5991a333b522a6f8e83c1aadb1faa4f369f5bb560d3b053085c3d142/httpx_auth-0.6.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"99f79da5c8397a85410bebdb21668ccc3e426732a3aaac7fdcc77597702d0533","md5":"56d3da9e4022e3e33f9f52d4fd058c6c","sha256":"61b74cf4629eaf192ffdefcb6f3b0b16a399191018360b82c4df68d4f3d0bc1b"},"downloads":-1,"filename":"httpx_auth-0.6.0.tar.gz","has_sig":false,"md5_digest":"56d3da9e4022e3e33f9f52d4fd058c6c","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":31157,"upload_time":"2020-09-22T14:56:56","upload_time_iso_8601":"2020-09-22T14:56:56.093503Z","url":"https://files.pythonhosted.org/packages/99/f7/9da5c8397a85410bebdb21668ccc3e426732a3aaac7fdcc77597702d0533/httpx_auth-0.6.0.tar.gz","yanked":false,"yanked_reason":null}],"0.7.0":[{"comment_text":"","digests":{"blake2b_256":"7d544a0914ed5fd669ac94738ba92972e786f19a370a43e84e186c0854f74412","md5":"9f2978cf343d219605c51342a073de5f","sha256":"f7db103f88a74909b0783df1a3c1461b9a730c13126f02820a65ab7f1c4a5e7a"},"downloads":-1,"filename":"httpx_auth-0.7.0-py3-none-any.whl","has_sig":false,"md5_digest":"9f2978cf343d219605c51342a073de5f","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":26467,"upload_time":"2020-10-06T20:54:26","upload_time_iso_8601":"2020-10-06T20:54:26.762782Z","url":"https://files.pythonhosted.org/packages/7d/54/4a0914ed5fd669ac94738ba92972e786f19a370a43e84e186c0854f74412/httpx_auth-0.7.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"71367043d52d290364425fe4bfaa4c3df020906d980921bdafee02138f3f9b34","md5":"6230a65b374f333e38cb05c1e900f44b","sha256":"74586bb21231eb5db9bab333ae8747595c67f51b4820a10e93a6ec5871a3dbbe"},"downloads":-1,"filename":"httpx_auth-0.7.0.tar.gz","has_sig":false,"md5_digest":"6230a65b374f333e38cb05c1e900f44b","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":32916,"upload_time":"2020-10-06T20:54:28","upload_time_iso_8601":"2020-10-06T20:54:28.376888Z","url":"https://files.pythonhosted.org/packages/71/36/7043d52d290364425fe4bfaa4c3df020906d980921bdafee02138f3f9b34/httpx_auth-0.7.0.tar.gz","yanked":false,"yanked_reason":null}],"0.8.0":[{"comment_text":"","digests":{"blake2b_256":"3316c0eaaf2d4f5db0f47abce179688de8070b168059374fe1ca0448a8da08c2","md5":"bae125ab4b815bd2bbd82e03ba0f84aa","sha256":"aeaffffc1c96b6fb7cafb8b3c7563cb85178299cea8c557a4d888eab382cb8da"},"downloads":-1,"filename":"httpx_auth-0.8.0-py3-none-any.whl","has_sig":false,"md5_digest":"bae125ab4b815bd2bbd82e03ba0f84aa","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":27238,"upload_time":"2020-11-15T14:36:55","upload_time_iso_8601":"2020-11-15T14:36:55.529066Z","url":"https://files.pythonhosted.org/packages/33/16/c0eaaf2d4f5db0f47abce179688de8070b168059374fe1ca0448a8da08c2/httpx_auth-0.8.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f8dcea30b4438b25356b98e5d8296197d711a9adf58524353c6024a852780474","md5":"e2e58f19ee70a73c5f69b654a634aa38","sha256":"23c0e7e3ff0e68847afd29987676699a71577be326207b671e93c8e161695f6b"},"downloads":-1,"filename":"httpx_auth-0.8.0.tar.gz","has_sig":false,"md5_digest":"e2e58f19ee70a73c5f69b654a634aa38","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":33838,"upload_time":"2020-11-15T14:36:56","upload_time_iso_8601":"2020-11-15T14:36:56.994923Z","url":"https://files.pythonhosted.org/packages/f8/dc/ea30b4438b25356b98e5d8296197d711a9adf58524353c6024a852780474/httpx_auth-0.8.0.tar.gz","yanked":false,"yanked_reason":null}],"0.9.0":[{"comment_text":"","digests":{"blake2b_256":"26fb052bdec2c05d329ec57f6d8abb110d4f17edb59ec203d3e615e02e29ffb7","md5":"9fc2779186bf5765e7043dc36fe6848e","sha256":"60a2678d971694854000eb64ebcadb303c7a4e4eafa517b59b91d98063e0d826"},"downloads":-1,"filename":"httpx_auth-0.9.0-py3-none-any.whl","has_sig":false,"md5_digest":"9fc2779186bf5765e7043dc36fe6848e","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":27234,"upload_time":"2021-03-01T01:49:45","upload_time_iso_8601":"2021-03-01T01:49:45.466868Z","url":"https://files.pythonhosted.org/packages/26/fb/052bdec2c05d329ec57f6d8abb110d4f17edb59ec203d3e615e02e29ffb7/httpx_auth-0.9.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ac58a2a2cd4c6e818b8ac620e0fcc05809aaca9616dad6d58f1d83db07c74ba7","md5":"337fdbba417d1e1ef49fdfe491109a6d","sha256":"3d64a155c872f938f0d0feb998288543eea53a8399777782c67dbef064d8da4f"},"downloads":-1,"filename":"httpx_auth-0.9.0.tar.gz","has_sig":false,"md5_digest":"337fdbba417d1e1ef49fdfe491109a6d","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":33839,"upload_time":"2021-03-01T01:49:46","upload_time_iso_8601":"2021-03-01T01:49:46.722618Z","url":"https://files.pythonhosted.org/packages/ac/58/a2a2cd4c6e818b8ac620e0fcc05809aaca9616dad6d58f1d83db07c74ba7/httpx_auth-0.9.0.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"4261fc870705034521d6caa974685eecb7b909b5a66539467c4fde00b319384d","md5":"e4399973dca679dd31c628e13c68c7e9","sha256":"c60198e8160728f00e754b5181f4b9d1e4530260b94bbd09fd8abfe826b5be50"},"downloads":-1,"filename":"httpx_auth-0.22.0-py3-none-any.whl","has_sig":false,"md5_digest":"e4399973dca679dd31c628e13c68c7e9","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.9","size":44819,"upload_time":"2024-03-02T12:09:32","upload_time_iso_8601":"2024-03-02T12:09:32.974615Z","url":"https://files.pythonhosted.org/packages/42/61/fc870705034521d6caa974685eecb7b909b5a66539467c4fde00b319384d/httpx_auth-0.22.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e68ca8a4f7dc9736a1c8fdfe8bc8c9b29145cd11f1b044567dc3d4ed611d0fcc","md5":"0a4254987596e83d73084eb99ba3cf93","sha256":"5dc2d18cd3a0788015fd22714048e59f5eca6aa3051bfbd8d9dd0d2e6254c095"},"downloads":-1,"filename":"httpx_auth-0.22.0.tar.gz","has_sig":false,"md5_digest":"0a4254987596e83d73084eb99ba3cf93","packagetype":"sdist","python_version":"source","requires_python":">=3.9","size":116355,"upload_time":"2024-03-02T12:09:34","upload_time_iso_8601":"2024-03-02T12:09:34.572296Z","url":"https://files.pythonhosted.org/packages/e6/8c/a8a4f7dc9736a1c8fdfe8bc8c9b29145cd11f1b044567dc3d4ed611d0fcc/httpx_auth-0.22.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
