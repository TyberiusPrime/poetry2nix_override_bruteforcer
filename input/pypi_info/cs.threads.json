{"info":{"author":null,"author_email":"Cameron Simpson <cs@cskk.id.au>","bugtrack_url":null,"classifiers":["Development Status :: 4 - Beta","Intended Audience :: Developers","License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Topic :: Software Development :: Libraries :: Python Modules"],"description":"Thread related convenience classes and functions.\n\n*Latest release 20240630*:\n* bg: use closeall instead of twostep/withall.\n* HasThreadState.bg: drop pre_enter_objects (unused), gets plumbed by the **bg_kw.\n\n## Class `AdjustableSemaphore`\n\nA semaphore whose value may be tuned after instantiation.\n\n*Method `AdjustableSemaphore.acquire(self, blocking=True)`*:\nThe acquire() method calls the base acquire() method if not blocking.\nIf blocking is true, the base acquire() is called inside a lock to\navoid competing with a reducing adjust().\n\n*Method `AdjustableSemaphore.adjust(self, newvalue)`*:\nSet capacity to `newvalue`\nby calling release() or acquire() an appropriate number of times.\n\nIf `newvalue` lowers the semaphore capacity then adjust()\nmay block until the overcapacity is released.\n\n*Method `AdjustableSemaphore.adjust_delta(self, delta)`*:\nAdjust capacity by `delta` by calling release() or acquire()\nan appropriate number of times.\n\nIf `delta` lowers the semaphore capacity then adjust() may block\nuntil the overcapacity is released.\n\n*Method `AdjustableSemaphore.release(self)`*:\nRelease the semaphore.\n\n## Function `bg(func, *, daemon=None, name=None, no_start=False, no_logexc=False, args=None, kwargs=None, thread_factory=None, pre_enter_objects=None, **tfkw)`\n\nDispatch the callable `func` in its own `Thread`;\nreturn the `Thread`.\n\nParameters:\n* `func`: a callable for the `Thread` target.\n* `args`, `kwargs`: passed to the `Thread` constructor\n* `kwargs`, `kwargs`: passed to the `Thread` constructor\n* `daemon`: optional argument specifying the `.daemon` attribute.\n* `name`: optional argument specifying the `Thread` name,\n  default: the name of `func`.\n* `no_logexc`: if false (default `False`), wrap `func` in `@logexc`.\n* `no_start`: optional argument, default `False`.\n  If true, do not start the `Thread`.\n* `pre_enter_objects`: an optional iterable of objects which\n  should be entered using `with`\n\nIf `pre_enter_objects` is supplied, these objects will be\nentered before the `Thread` is started and exited when the\n`Thread` target function ends.\nIf the `Thread` is _not_ started (`no_start=True`, very\nunusual) then it will be the caller's responsibility to manage\nto entered objects.\n\n## Class `DeadlockError(builtins.RuntimeError)`\n\nRaised by `NRLock` when a lock is attempted from the `Thread` currently holding the lock.\n\n## Class `HasThreadState(cs.context.ContextManagerMixin)`\n\nA mixin for classes with a `cs.threads.ThreadState` instance as `.state`\nproviding a context manager which pushes `current=self` onto that state\nand a `default()` class method returning `cls.perthread_state.current`\nas the default instance of that class.\n\n*NOTE*: the documentation here refers to `cls.perthread_state`, but in\nfact we honour the `cls.THREAD_STATE_ATTR` attribute to name\nthe state attribute which allows perclass state attributes,\nand also use with classes which already use `.perthread_state` for\nanother purpose.\n\n*NOTE*: `HasThreadState.Thread` is a _class_ method whose default\nis to push state for all active `HasThreadState` subclasses.\nContrast with `HasThreadState.bg` which is an _instance_method\nwhose default is to push state for just that instance.\nThe top level `cs.threads.bg` function calls `HasThreadState.Thread`\nto obtain its `Thread`.\n\n*Method `HasThreadState.Thread(*, name=None, target, enter_objects=None, **Thread_kw)`*:\nFactory for a `Thread` to push the `.current` state for the\ncurrently active classes.\n\nThe optional parameter `enter_objects` may be used to pass\nan iterable of objects whose contexts should be entered\nusing `with obj:`.\nIf this is set to `True` that indicates that every \"current\"\n`HasThreadStates` instance should be entered.\nThe default does not enter any object contexts.\nThe `HasThreadStates.bg` method defaults to passing\n`enter_objects=(self,)` to enter the context for `self`.\n\n*Method `HasThreadState.__enter_exit__(self)`*:\nPush `self.perthread_state.current=self` as the `Thread` local current instance.\n\nInclude `self.__class__` in the set of currently active classes for the duration.\n\n*Method `HasThreadState.bg(self, func, *, enter_objects=None, **bg_kw)`*:\nGet a `Thread` using `type(self).Thread` and start it.\nReturn the `Thread`.\n\nThe `HasThreadState.Thread` factory duplicates the current `Thread`'s\n`HasThreadState` current objects as current in the new `Thread`.\nAdditionally it enters the contexts of various objects using\n`with obj` according to the `enter_objects` parameter.\n\nThe value of the optional parameter `enter_objects` governs\nwhich objects have their context entered using `with obj`\nin the child `Thread` while running `func` as follows:\n- `None`: the default, meaning `(self,)`\n- `False`: no object contexts are entered\n- `True`: all current `HasThreadState` object contexts will be entered\n- an iterable of objects whose contexts will be entered;\n  pass `()` to enter no objects\n\n*Method `HasThreadState.default(*, factory=None, raise_on_None=False)`*:\nThe default instance of this class from `cls.perthread_state.current`.\n\nParameters:\n* `factory`: optional callable to create an instance of `cls`\n  if `cls.perthread_state.current` is `None` or missing;\n  if `factory` is `True` then `cls` is used as the factory\n* `raise_on_None`: if `cls.perthread_state.current` is `None` or missing\n  and `factory` is false and `raise_on_None` is true,\n  raise a `RuntimeError`;\n  this is primarily a debugging aid\n\n*Method `HasThreadState.get_thread_states(all_classes=None)`*:\nReturn a mapping of `class`->*current_instance*`\nfor use with `HasThreadState.with_thread_states`\nor `HasThreadState.Thread` or `HasThreadState.bg`.\n\nThe default behaviour returns just a mapping for this class,\nexpecting the default instance to be responsible for what\nother resources it holds.\n\nThere is also a legacy mode for `all_classes=True`\nwhere the mapping is for all active classes,\nprobably best used for `Thread`s spawned outside\na `HasThreadState` context.\n\nParameters:\n* `all_classes`: optional flag, default `False`;\n  if true, return a mapping of class to current instance\n  for all `HasThreadState` subclasses with an open instance,\n  otherwise just a mapping from this class to its current instance\n\n## Function `joinif(T: threading.Thread)`\n\nCall `T.join()` if `T` is not the current `Thread`.\n\nUnlike `threading.Thread.join`, this function is a no-op if\n`T` is the current `Thread.\n\nThe use case is situations such as the shutdown phase of the\n`MultiOpenMixin.startup_shutdown` context manager. Because\nthe \"initial open\" startup phase is not necessarily run in\nthe same thread as the \"final close\" shutdown phase, it is\npossible for example for a worker `Thread` to execute the\nshutdown phase and try to join itself. Using this function\nsupports that scenario.\n\n## Class `LockableMixin`\n\nTrite mixin to control access to an object via its `._lock` attribute.\nExposes the `._lock` as the property `.lock`.\nPresents a context manager interface for obtaining an object's lock.\n\n*Method `LockableMixin.__exit__(self, exc_type, exc_value, traceback)`*:\npylint: disable=unused-argument\n\n*Property `LockableMixin.lock`*:\nThe internal lock object.\n\n## Function `locked(*da, **dkw)`\n\nA decorator for instance methods that must run within a lock.\n\nDecorator keyword arguments:\n* `initial_timeout`:\n  the initial lock attempt timeout;\n  if this is `>0` and exceeded a warning is issued\n  and then an indefinite attempt is made.\n  Default: `2.0`s\n* `lockattr`:\n  the name of the attribute of `self`\n  which references the lock object.\n  Default `'_lock'`\n\n## Function `locked_property(*da, **dkw)`\n\nA thread safe property whose value is cached.\nThe lock is taken if the value needs to computed.\n\nThe default lock attribute is `._lock`.\nThe default attribute for the cached value is `._`*funcname*\nwhere *funcname* is `func.__name__`.\nThe default \"unset\" value for the cache is `None`.\n\n## Function `monitor(*da, **dkw)`\n\nTurn a class into a monitor, all of whose public methods are `@locked`.\n\nThis is a simple approach which requires class instances to have a\n`._lock` which is an `RLock` or compatible\nbecause methods may naively call each other.\n\nParameters:\n* `attrs`: optional iterable of attribute names to wrap in `@locked`.\n  If omitted, all names commencing with a letter are chosen.\n* `initial_timeout`: optional initial lock timeout, default `10.0`s.\n* `lockattr`: optional lock attribute name, default `'_lock'`.\n\nOnly attributes satifying `inspect.ismethod` are wrapped\nbecause `@locked` requires access to the instance `._lock` attribute.\n\n## Class `NRLock`\n\nA nonrecursive lock.\nAttempting to take this lock when it is already held by the current `Thread`\nwill raise `DeadlockError`.\nOtherwise this behaves like `threading.Lock`.\n\n*Method `NRLock.acquire(self, *a, caller_frame=None, **kw)`*:\nAcquire the lock as for `threading.Lock`.\nRaises `DeadlockError` is the lock is already held by the current `Thread`.\n\n*Method `NRLock.locked(self)`*:\nReturn the lock status.\n\n*Method `NRLock.release(self)`*:\nRelease the lock as for `threading.Lock`.\n\n## Class `PriorityLock`\n\nA priority based mutex which is acquired by and released to waiters\nin priority order.\n\nThe initialiser sets a default priority, itself defaulting to `0`.\n\nThe `acquire()` method accepts an optional `priority` value\nwhich specifies the priority of the acquire request;\nlower values have higher priorities.\n`acquire` returns a new `PriorityLockSubLock`.\n\nNote that internally this allocates a `threading.Lock` per acquirer.\n\nWhen `acquire` is called, if the `PriorityLock` is taken\nthen the acquirer blocks on their personal `Lock`.\n\nWhen `release()` is called the highest priority `Lock` is released.\n\nWithin a priority level `acquire`s are served in FIFO order.\n\nUsed as a context manager, the mutex is obtained at the default priority.\nThe `priority()` method offers a context manager\nwith a specified priority.\nBoth context managers return the `PriorityLockSubLock`\nallocated by the `acquire`.\n\n*Method `PriorityLock.__init__(self, default_priority=0, name=None)`*:\nInitialise the `PriorityLock`.\n\nParameters:\n* `default_priority`: the default `acquire` priority,\n  default `0`.\n* `name`: optional identifying name\n\n*Method `PriorityLock.__enter__(self)`*:\nEnter the mutex as a context manager at the default priority.\nReturns the new `Lock`.\n\n*Method `PriorityLock.__exit__(self, *_)`*:\nExit the context manager.\n\n*Method `PriorityLock.acquire(self, priority=None)`*:\nAcquire the mutex with `priority` (default from `default_priority`).\nReturn the new `PriorityLockSubLock`.\n\nThis blocks behind any higher priority `acquire`s\nor any earlier `acquire`s of the same priority.\n\n*Method `PriorityLock.priority(self, this_priority)`*:\nA context manager with the specified `this_priority`.\nReturns the new `Lock`.\n\n*Method `PriorityLock.release(self)`*:\nRelease the mutex.\n\nInternally, this releases the highest priority `Lock`,\nallowing that `acquire`r to go forward.\n\n## Class `PriorityLockSubLock(PriorityLockSubLock)`\n\nThe record for the per-`acquire`r `Lock` held by `PriorityLock.acquire`.\n\n## Class `State(_thread._local)`\n\nA `Thread` local object with attributes\nwhich can be used as a context manager to stack attribute values.\n\nExample:\n\n    from cs.threads import ThreadState\n\n    S = ThreadState(verbose=False)\n\n    with S(verbose=True) as prev_attrs:\n        if S.verbose:\n            print(\"verbose! (formerly verbose=%s)\" % prev_attrs['verbose'])\n\n*Method `State.__init__(self, **kw)`*:\nInitiate the `ThreadState`, providing the per-Thread initial values.\n\n*Method `State.__call__(self, **kw)`*:\nCalling a `ThreadState` returns a context manager which stacks some state.\nThe context manager yields the previous values\nfor the attributes which were stacked.\n\n## Class `ThreadState(_thread._local)`\n\nA `Thread` local object with attributes\nwhich can be used as a context manager to stack attribute values.\n\nExample:\n\n    from cs.threads import ThreadState\n\n    S = ThreadState(verbose=False)\n\n    with S(verbose=True) as prev_attrs:\n        if S.verbose:\n            print(\"verbose! (formerly verbose=%s)\" % prev_attrs['verbose'])\n\n*Method `ThreadState.__init__(self, **kw)`*:\nInitiate the `ThreadState`, providing the per-Thread initial values.\n\n*Method `ThreadState.__call__(self, **kw)`*:\nCalling a `ThreadState` returns a context manager which stacks some state.\nThe context manager yields the previous values\nfor the attributes which were stacked.\n\n## Function `via(cmanager, func, *a, **kw)`\n\nReturn a callable that calls the supplied `func` inside a\n`with` statement using the context manager `cmanager`.\nThis intended use case is aimed at deferred function calls.\n\n# Release Log\n\n\n\n*Release 20240630*:\n* bg: use closeall instead of twostep/withall.\n* HasThreadState.bg: drop pre_enter_objects (unused), gets plumbed by the **bg_kw.\n\n*Release 20240422*:\nHasThreadState.default: make factory and raise_on keyword only.\n\n*Release 20240412*:\n* New NRLock, an nonrecursive Lock and associated exception DeadlockError.\n* bg: rename thread_class to thread_factory for clarity.\n* HasThreadState: big refactor to separate the mapping of default instances from the previously automatic opening of a context for each.\n* HasThreadState.bg: new optional pre_enter_objects to supply objects which should be opened before the Thread starts (before bg returns) and closed when the Thread exits.\n\n*Release 20240316*:\nFixed release upload artifacts.\n\n*Release 20240303*:\n* HasThreadState: rename thread_states() to get_thread_states().\n* HasThreadState.get_thread_states: some logic fixes.\n\n*Release 20231129*:\n* HasThreadState.thread_states: *policy change*: the default now makes a mapping only for this class, not for all HasThreadState subclasses, on the premise that this class can manage use of other classes if required.\n* HasThreadState: new bg() class method like Thread() but also starting the Thread.\n\n*Release 20230331*:\n* HasThreadState: new thread_states() method to snapshot the current states.\n* HasThreadState: new with_thread_states() context manager to apply a set of states.\n* HasThreadState: rename the default state from .state to .perthread_state.\n* HasThreadState.__enter_exit__: pass cls._HasThreadState_lock to stackset as the modification guard lock, prevents race in thread_states.\n* Rename State to ThreadState, which how I always use it anyway, and leave a compatibility name behind.\n* New joinif(Thread) method to join a Thread unless we are that Thread - this is because MultiOpenMixin.startup_shutdown stuff may run the shutdown in a differ Thread from that which ran the startup.\n* @uses_runstate: use the prevailing RunState or create one.\n* Drop Python 2 support.\n\n*Release 20230212*:\n* HasThreadState: maintain a set of the HasThreadState classes in use.\n* New HasThreadState.Thread class factory method to create a new Thread with the current threads states at time of call instantiated in the new Thread.\n* bg: new no_context=False parameter to suppress use of HasThreadState.Thread to create the new Thread.\n\n*Release 20230125*:\nNew HasThreadState mixin for classes with a state=State() attribute to provide a cls.default() class method for the default instance and a context manager to push/pop self.state.current=self.\n\n*Release 20221228*:\n* Get error and warning from cs.gimmicks, breaks circular import with cs.logutils.\n* Late import of cs.logutils.LogTime to avoid circular import.\n\n*Release 20221207*:\nSmall bug fix.\n\n*Release 20221118*:\nREMOVE WorkerThreadPool, pulls in too many other things and was never used.\n\n*Release 20211208*:\nbg: do not pass the current Pfx prefix into the new Thread, seems to leak and grow.\n\n*Release 20210306*:\nbg: include the current Pfx prefix in the thread name and thread body Pfx, obsoletes cs.pfx.PfxThread.\n\n*Release 20210123*:\nNew @monitor class decorator for simple RLock based reentrance protection.\n\n*Release 20201025*:\n* @locked: bump the default warning timeout to 10s, was firing too often.\n* New State class for thread local state objects with default attribute values and a stacking __call__ context manager.\n\n*Release 20200718*:\n@locked: apply the interior __doc__ to the wrapper.\n\n*Release 20200521*:\n@locked_property: decorate with @cs.deco.decorator to support keyword arguments.\n\n*Release 20191102*:\n@locked: report slow-to-acquire locks, add initial_timeout and lockattr decorator keyword parameters.\n\n*Release 20190923.2*:\nFix annoying docstring typo.\n\n*Release 20190923.1*:\nDocstring updates.\n\n*Release 20190923*:\nRemove dependence on cs.obj.\n\n*Release 20190921*:\nNew PriorityLock class for a mutex which releases in (priority,fifo) order.\n\n*Release 20190812*:\nbg: compute default name before wrapping `func` in @logexc.\n\n*Release 20190729*:\nbg: provide default `name`, run callable inside Pfx, add optional no_logexc=False param preventing @logec wrapper if true.\n\n*Release 20190422*:\nbg(): new optional `no_start=False` keyword argument, preventing Thread.start if true\n\n*Release 20190102*:\n* Drop some unused classes.\n* New LockableMixin, presenting a context manager and a .lock property.\n\n*Release 20160828*:\nUse \"install_requires\" instead of \"requires\" in DISTINFO.\n\n*Release 20160827*:\n* Replace bare \"excepts\" with \"except BaseException\".\n* Doc updates. Other minor improvements.\n\n*Release 20150115*:\nFirst PyPI release.\n","description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"python2, python3","license":"GNU General Public License v3 or later (GPLv3+)","maintainer":null,"maintainer_email":null,"name":"cs.threads","package_url":"https://pypi.org/project/cs.threads/","platform":null,"project_url":"https://pypi.org/project/cs.threads/","project_urls":{"MonoRepo Commits":"https://bitbucket.org/cameron_simpson/css/commits/branch/main","Monorepo Git Mirror":"https://github.com/cameron-simpson/css","Monorepo Hg/Mercurial Mirror":"https://hg.sr.ht/~cameron-simpson/css","Source":"https://github.com/cameron-simpson/css/blob/main/lib/python/cs/threads.py"},"provides_extra":null,"release_url":"https://pypi.org/project/cs.threads/20240630/","requires_dist":["cs.context>=20240630","cs.deco>=20240630","cs.excutils>=20240630","cs.gimmicks>=20240316","cs.pfx>=20240630","cs.py.func>=20240630","cs.py.stack>=20240630","cs.seq>=20221118"],"requires_python":null,"summary":"threading and communication/synchronisation conveniences","version":"20240630","yanked":false,"yanked_reason":null},"last_serial":23911256,"releases":{"20150115":[{"comment_text":"","digests":{"blake2b_256":"b88993a1dec9db3507056e7558e6c23cab477cead2a3ae6b86373cb8d44722b4","md5":"0e894298843639ef464cc1315f30f516","sha256":"dcdc4bdf72755c667fb7e186773031af36a88e94d642e38124418b600233c197"},"downloads":-1,"filename":"cs.threads-20150115.tar.gz","has_sig":false,"md5_digest":"0e894298843639ef464cc1315f30f516","packagetype":"sdist","python_version":"source","requires_python":null,"size":5329,"upload_time":"2015-01-18T06:13:28","upload_time_iso_8601":"2015-01-18T06:13:28.009256Z","url":"https://files.pythonhosted.org/packages/b8/89/93a1dec9db3507056e7558e6c23cab477cead2a3ae6b86373cb8d44722b4/cs.threads-20150115.tar.gz","yanked":false,"yanked_reason":null}],"20160827":[{"comment_text":"","digests":{"blake2b_256":"2211cb1b87e4d453cf52e676271c1f6ad32749a74918138da73abcd27c0a8182","md5":"12bba9988b8427e987bc18e13bbd9ca6","sha256":"5c22a1e080c5b74ffaa9b6c6a86c5a3cfac9c52d39bb27c88b8f75c9541ad3b7"},"downloads":-1,"filename":"cs.threads-20160827.tar.gz","has_sig":false,"md5_digest":"12bba9988b8427e987bc18e13bbd9ca6","packagetype":"sdist","python_version":"source","requires_python":null,"size":5711,"upload_time":"2016-08-27T03:27:35","upload_time_iso_8601":"2016-08-27T03:27:35.881293Z","url":"https://files.pythonhosted.org/packages/22/11/cb1b87e4d453cf52e676271c1f6ad32749a74918138da73abcd27c0a8182/cs.threads-20160827.tar.gz","yanked":false,"yanked_reason":null}],"20160828":[{"comment_text":"","digests":{"blake2b_256":"0973efee873c1cac8d0bc2a9a3cc7feabe22bf30250ca7df6dc9cd6433841b00","md5":"899e396bb75d64f8b6f5f955b33d16ae","sha256":"bafac01073f02306504599c72926a703303389f6630aa7b8dabb7e708170939d"},"downloads":-1,"filename":"cs.threads-20160828.tar.gz","has_sig":false,"md5_digest":"899e396bb75d64f8b6f5f955b33d16ae","packagetype":"sdist","python_version":"source","requires_python":null,"size":6067,"upload_time":"2016-08-28T06:11:47","upload_time_iso_8601":"2016-08-28T06:11:47.862434Z","url":"https://files.pythonhosted.org/packages/09/73/efee873c1cac8d0bc2a9a3cc7feabe22bf30250ca7df6dc9cd6433841b00/cs.threads-20160828.tar.gz","yanked":false,"yanked_reason":null}],"20190102":[{"comment_text":"","digests":{"blake2b_256":"6fce6decb7a1ca1f4dbb4ffe0ffd5c1611a702f6cc92b5a2ea81f999a4514114","md5":"258c63e7236ab9057a9e553ab181ddd7","sha256":"e6b8b21d63b7fd1a7749cbb3efd3c049092fcbc831454cbb7b95573e3dc977ee"},"downloads":-1,"filename":"cs.threads-20190102.tar.gz","has_sig":false,"md5_digest":"258c63e7236ab9057a9e553ab181ddd7","packagetype":"sdist","python_version":"source","requires_python":null,"size":5298,"upload_time":"2019-01-02T09:27:47","upload_time_iso_8601":"2019-01-02T09:27:47.486836Z","url":"https://files.pythonhosted.org/packages/6f/ce/6decb7a1ca1f4dbb4ffe0ffd5c1611a702f6cc92b5a2ea81f999a4514114/cs.threads-20190102.tar.gz","yanked":false,"yanked_reason":null}],"20190422":[{"comment_text":"","digests":{"blake2b_256":"8537bf26c82547804db39ac967f1babf1c7649a6b5e031e362fe971f4d04cabf","md5":"5ffbfd1b9d898a295f09b6802cc83a54","sha256":"42ad8439751012b6c080bb8354118a263a4ffc68f377685eb4cc5511b22abdfe"},"downloads":-1,"filename":"cs.threads-20190422.tar.gz","has_sig":false,"md5_digest":"5ffbfd1b9d898a295f09b6802cc83a54","packagetype":"sdist","python_version":"source","requires_python":null,"size":5502,"upload_time":"2019-04-22T08:53:01","upload_time_iso_8601":"2019-04-22T08:53:01.104034Z","url":"https://files.pythonhosted.org/packages/85/37/bf26c82547804db39ac967f1babf1c7649a6b5e031e362fe971f4d04cabf/cs.threads-20190422.tar.gz","yanked":false,"yanked_reason":null}],"20190729":[{"comment_text":"","digests":{"blake2b_256":"b53e25ef0bb0266815f81d9b1989c2338324fffc0901b0818ad3a5c036f16b00","md5":"c2d4000c2336304e70134911330e3720","sha256":"71b9fd278dd016d5e7b5e1a571bfe47a8daa2d91f69c38b464b01898e20a500d"},"downloads":-1,"filename":"cs.threads-20190729.tar.gz","has_sig":false,"md5_digest":"c2d4000c2336304e70134911330e3720","packagetype":"sdist","python_version":"source","requires_python":null,"size":5648,"upload_time":"2019-07-28T23:24:03","upload_time_iso_8601":"2019-07-28T23:24:03.565159Z","url":"https://files.pythonhosted.org/packages/b5/3e/25ef0bb0266815f81d9b1989c2338324fffc0901b0818ad3a5c036f16b00/cs.threads-20190729.tar.gz","yanked":false,"yanked_reason":null}],"20190812":[{"comment_text":"","digests":{"blake2b_256":"d84d7b9e21fb6c0efae75e98a4a1b8580bc1a8f8c0ee9c245002f37f2555aae5","md5":"91cac9461e7e75e4d2d3c2d07dff3309","sha256":"c606eed63a585d2c3e31ceef865d00dd2cbdb071acd01e1222d8b7a0c89365b7"},"downloads":-1,"filename":"cs.threads-20190812.tar.gz","has_sig":false,"md5_digest":"91cac9461e7e75e4d2d3c2d07dff3309","packagetype":"sdist","python_version":"source","requires_python":null,"size":6099,"upload_time":"2019-08-11T23:31:57","upload_time_iso_8601":"2019-08-11T23:31:57.556195Z","url":"https://files.pythonhosted.org/packages/d8/4d/7b9e21fb6c0efae75e98a4a1b8580bc1a8f8c0ee9c245002f37f2555aae5/cs.threads-20190812.tar.gz","yanked":false,"yanked_reason":null}],"20190923":[{"comment_text":"","digests":{"blake2b_256":"5fee47f621b1b4cceaf9b402e79ff01802b5e19963bee732f9b4b6b6acdbc028","md5":"38f2968a93c672b2e16f2306ae47756e","sha256":"e8e52952e582da2380da2937bdfc7ad7a2219e89d7832255ae45ee173f2f28ce"},"downloads":-1,"filename":"cs.threads-20190923.tar.gz","has_sig":false,"md5_digest":"38f2968a93c672b2e16f2306ae47756e","packagetype":"sdist","python_version":"source","requires_python":null,"size":7909,"upload_time":"2019-09-22T23:05:34","upload_time_iso_8601":"2019-09-22T23:05:34.578327Z","url":"https://files.pythonhosted.org/packages/5f/ee/47f621b1b4cceaf9b402e79ff01802b5e19963bee732f9b4b6b6acdbc028/cs.threads-20190923.tar.gz","yanked":false,"yanked_reason":null}],"20190923.1":[{"comment_text":"","digests":{"blake2b_256":"fe7d102a9cdbef08d80a205000d457a3c8bdda424f2716a1c40b12dede445bac","md5":"6ee096ad21cb6808d5c4754bd1b7665f","sha256":"051f936c2fda7beb354dc1b7cdcd4e1bbf736f67c7658ae5d7169629e762cabb"},"downloads":-1,"filename":"cs.threads-20190923.1.tar.gz","has_sig":false,"md5_digest":"6ee096ad21cb6808d5c4754bd1b7665f","packagetype":"sdist","python_version":"source","requires_python":null,"size":8100,"upload_time":"2019-09-22T23:12:26","upload_time_iso_8601":"2019-09-22T23:12:26.255992Z","url":"https://files.pythonhosted.org/packages/fe/7d/102a9cdbef08d80a205000d457a3c8bdda424f2716a1c40b12dede445bac/cs.threads-20190923.1.tar.gz","yanked":false,"yanked_reason":null}],"20190923.2":[{"comment_text":"","digests":{"blake2b_256":"06457a622c33fa56867cfaf13f09766aeeb95c6f4b1bdc7c0d732f9143c71dcd","md5":"cf4ba1f0dab17c5171ec140085f472ec","sha256":"89937338126d3b936b20aa68d53cc8b54e1b2329e067074f4c4afac4c1fa1743"},"downloads":-1,"filename":"cs.threads-20190923.2.tar.gz","has_sig":false,"md5_digest":"cf4ba1f0dab17c5171ec140085f472ec","packagetype":"sdist","python_version":"source","requires_python":null,"size":8800,"upload_time":"2019-09-22T23:14:06","upload_time_iso_8601":"2019-09-22T23:14:06.655369Z","url":"https://files.pythonhosted.org/packages/06/45/7a622c33fa56867cfaf13f09766aeeb95c6f4b1bdc7c0d732f9143c71dcd/cs.threads-20190923.2.tar.gz","yanked":false,"yanked_reason":null}],"20191102":[{"comment_text":"","digests":{"blake2b_256":"54e0582a03a9ce89dd4202e500817b8d66c41484995d0771a7056fb1e0da03b5","md5":"813ae84c17061335b01544bb70eaf482","sha256":"480ddb05f2d45faee56a8f9c1985838f99666c833788c0cde04e28915a0f28f3"},"downloads":-1,"filename":"cs.threads-20191102.tar.gz","has_sig":false,"md5_digest":"813ae84c17061335b01544bb70eaf482","packagetype":"sdist","python_version":"source","requires_python":null,"size":9238,"upload_time":"2019-11-01T23:01:14","upload_time_iso_8601":"2019-11-01T23:01:14.422783Z","url":"https://files.pythonhosted.org/packages/54/e0/582a03a9ce89dd4202e500817b8d66c41484995d0771a7056fb1e0da03b5/cs.threads-20191102.tar.gz","yanked":false,"yanked_reason":null}],"20200521":[{"comment_text":"","digests":{"blake2b_256":"d96b342ba45646eb4945d78dada293575702ed034431112feb5693898eb0d0e0","md5":"d18c162f9ac87355944d64e8fbc75e3c","sha256":"b3eaa4f0ac911e429762cf23cda7540f03bcf34b344cca0966c58990223921c6"},"downloads":-1,"filename":"cs.threads-20200521.tar.gz","has_sig":false,"md5_digest":"d18c162f9ac87355944d64e8fbc75e3c","packagetype":"sdist","python_version":"source","requires_python":null,"size":10069,"upload_time":"2020-05-21T02:09:54","upload_time_iso_8601":"2020-05-21T02:09:54.078436Z","url":"https://files.pythonhosted.org/packages/d9/6b/342ba45646eb4945d78dada293575702ed034431112feb5693898eb0d0e0/cs.threads-20200521.tar.gz","yanked":false,"yanked_reason":null}],"20200718":[{"comment_text":"","digests":{"blake2b_256":"7411b00cc27b9d31022705c5fb9e82ca6537afbd39751f00bfda2f636e124c36","md5":"c159ed7e72b46311084931ec798087e7","sha256":"d7891485d4431b0034034e9b9168e3bff8177481497530dba4f991842af701e5"},"downloads":-1,"filename":"cs.threads-20200718.tar.gz","has_sig":false,"md5_digest":"c159ed7e72b46311084931ec798087e7","packagetype":"sdist","python_version":"source","requires_python":null,"size":11157,"upload_time":"2020-07-18T09:13:04","upload_time_iso_8601":"2020-07-18T09:13:04.518024Z","url":"https://files.pythonhosted.org/packages/74/11/b00cc27b9d31022705c5fb9e82ca6537afbd39751f00bfda2f636e124c36/cs.threads-20200718.tar.gz","yanked":false,"yanked_reason":null}],"20201025":[{"comment_text":"","digests":{"blake2b_256":"50bff73972f039048bdee0b73539c4ae7c802a13fa0d868144c355774de0c19e","md5":"b2cdcd9410408461c0ec450d73097065","sha256":"b8ea08a6464f05ced7763559da115da64a946ef78a12737c91f1875122674726"},"downloads":-1,"filename":"cs.threads-20201025.tar.gz","has_sig":false,"md5_digest":"b2cdcd9410408461c0ec450d73097065","packagetype":"sdist","python_version":"source","requires_python":null,"size":12127,"upload_time":"2020-10-25T03:33:47","upload_time_iso_8601":"2020-10-25T03:33:47.726302Z","url":"https://files.pythonhosted.org/packages/50/bf/f73972f039048bdee0b73539c4ae7c802a13fa0d868144c355774de0c19e/cs.threads-20201025.tar.gz","yanked":false,"yanked_reason":null}],"20210123":[{"comment_text":"","digests":{"blake2b_256":"abd1c14cbb87a8c444b0f20e06cefd51375b23fe093d73625879b2ba4c8ace71","md5":"652d30e407e00f558d0b2c1d670b67d6","sha256":"27e5c5d3202ec6384b9985bcd0618043b2e5accc665a9b18d1531982ca663574"},"downloads":-1,"filename":"cs.threads-20210123.tar.gz","has_sig":false,"md5_digest":"652d30e407e00f558d0b2c1d670b67d6","packagetype":"sdist","python_version":"source","requires_python":null,"size":12890,"upload_time":"2021-01-23T10:09:52","upload_time_iso_8601":"2021-01-23T10:09:52.580189Z","url":"https://files.pythonhosted.org/packages/ab/d1/c14cbb87a8c444b0f20e06cefd51375b23fe093d73625879b2ba4c8ace71/cs.threads-20210123.tar.gz","yanked":false,"yanked_reason":null}],"20210306":[{"comment_text":"","digests":{"blake2b_256":"253f94e398937b1a3748b8b49d4e2809cd6f5ab8c7581e0f6af9a8c6e7829439","md5":"fa1dcbb9afc5ffff74edcb6381247389","sha256":"eda1287335ad6a0b027a2a19fb59c5d36a92282ecc69b56dc42c391680f2def4"},"downloads":-1,"filename":"cs.threads-20210306.tar.gz","has_sig":false,"md5_digest":"fa1dcbb9afc5ffff74edcb6381247389","packagetype":"sdist","python_version":"source","requires_python":null,"size":13090,"upload_time":"2021-03-05T23:22:04","upload_time_iso_8601":"2021-03-05T23:22:04.907316Z","url":"https://files.pythonhosted.org/packages/25/3f/94e398937b1a3748b8b49d4e2809cd6f5ab8c7581e0f6af9a8c6e7829439/cs.threads-20210306.tar.gz","yanked":false,"yanked_reason":null}],"20211208":[{"comment_text":"","digests":{"blake2b_256":"6ae5509d1a922d85335260bb8f3a1a7a4f258646f8afc12045b8163c2d2bd865","md5":"79fd12fc3f7c792727c73c561bd1264d","sha256":"b8e91c1998bcddd26222d97890415a94952599efb9e95d7228307d479bb115ad"},"downloads":-1,"filename":"cs.threads-20211208.tar.gz","has_sig":false,"md5_digest":"79fd12fc3f7c792727c73c561bd1264d","packagetype":"sdist","python_version":"source","requires_python":null,"size":12629,"upload_time":"2021-12-08T09:13:51","upload_time_iso_8601":"2021-12-08T09:13:51.270047Z","url":"https://files.pythonhosted.org/packages/6a/e5/509d1a922d85335260bb8f3a1a7a4f258646f8afc12045b8163c2d2bd865/cs.threads-20211208.tar.gz","yanked":false,"yanked_reason":null}],"20221118":[{"comment_text":"","digests":{"blake2b_256":"3ffc4f796d5629950304596d9aadea1a8666c3ece0f97b7ecbf96ca4fa881943","md5":"f345245af152a6c58271a48d4e0fc1a5","sha256":"d74856046b62467ca7ade36e093c165765cab74e49034b96402172ae01dd5d56"},"downloads":-1,"filename":"cs.threads-20221118-py3-none-any.whl","has_sig":false,"md5_digest":"f345245af152a6c58271a48d4e0fc1a5","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":8731,"upload_time":"2022-11-18T03:49:07","upload_time_iso_8601":"2022-11-18T03:49:07.592631Z","url":"https://files.pythonhosted.org/packages/3f/fc/4f796d5629950304596d9aadea1a8666c3ece0f97b7ecbf96ca4fa881943/cs.threads-20221118-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ba5ebe746bd93295c1963e9f2b38ba2b20dc915d9a6b3dc1601fd51cc119aace","md5":"215b64128d1573224d1bcd6520c99893","sha256":"2c5124708698f84fb1d2530a786c2181abfdd3744dd79992ac57f26affdc6e0d"},"downloads":-1,"filename":"cs.threads-20221118.tar.gz","has_sig":false,"md5_digest":"215b64128d1573224d1bcd6520c99893","packagetype":"sdist","python_version":"source","requires_python":null,"size":8714,"upload_time":"2022-11-18T03:49:09","upload_time_iso_8601":"2022-11-18T03:49:09.677100Z","url":"https://files.pythonhosted.org/packages/ba/5e/be746bd93295c1963e9f2b38ba2b20dc915d9a6b3dc1601fd51cc119aace/cs.threads-20221118.tar.gz","yanked":false,"yanked_reason":null}],"20221207":[{"comment_text":"","digests":{"blake2b_256":"ad7aa174d18475400bc9fafa21740b18906d6da6213839f22a8cc4e0b57f7df7","md5":"cea5af0ac8d5ef7543f7b19a063727eb","sha256":"f5f783308ad56550e9c8cbd3292e438a72b70a28d430d147ad482cdcad5e7e1d"},"downloads":-1,"filename":"cs.threads-20221207-py3-none-any.whl","has_sig":false,"md5_digest":"cea5af0ac8d5ef7543f7b19a063727eb","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":8764,"upload_time":"2022-12-07T03:09:28","upload_time_iso_8601":"2022-12-07T03:09:28.911403Z","url":"https://files.pythonhosted.org/packages/ad/7a/a174d18475400bc9fafa21740b18906d6da6213839f22a8cc4e0b57f7df7/cs.threads-20221207-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"12effe1ee5342260c81b6710be372170d7f084b44f85001799610f29e7b4b2db","md5":"aa6d2a64d1f474b64318aac10c1156ed","sha256":"0c516d71ba146c5be5a3709abcf1338bce4be44364af07e6236c341f74348052"},"downloads":-1,"filename":"cs.threads-20221207.tar.gz","has_sig":false,"md5_digest":"aa6d2a64d1f474b64318aac10c1156ed","packagetype":"sdist","python_version":"source","requires_python":null,"size":9025,"upload_time":"2022-12-07T03:09:30","upload_time_iso_8601":"2022-12-07T03:09:30.823083Z","url":"https://files.pythonhosted.org/packages/12/ef/fe1ee5342260c81b6710be372170d7f084b44f85001799610f29e7b4b2db/cs.threads-20221207.tar.gz","yanked":false,"yanked_reason":null}],"20221228":[{"comment_text":"","digests":{"blake2b_256":"4f27bfc2d5c5fa3f2f39be24b2eb32bac0ddda7456a75caf5588d65dc81c8380","md5":"5faf80e363f934d5e7fbf82c66f3ddd7","sha256":"052888524d1558e23b1375eee3b7be5238d12c8091b3b29f38895c7b67e8d3e6"},"downloads":-1,"filename":"cs.threads-20221228-py3-none-any.whl","has_sig":false,"md5_digest":"5faf80e363f934d5e7fbf82c66f3ddd7","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":8858,"upload_time":"2022-12-27T23:38:34","upload_time_iso_8601":"2022-12-27T23:38:34.783211Z","url":"https://files.pythonhosted.org/packages/4f/27/bfc2d5c5fa3f2f39be24b2eb32bac0ddda7456a75caf5588d65dc81c8380/cs.threads-20221228-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d6e1851dbd6d78b238a55928c8fcec897ee1bc5bad4c2d0192f354eb324b6291","md5":"74f53afff9837c79d174917719e68c9a","sha256":"d379b8faa3c9a1c3a65dad6195decb92ab374c8c84a6f670f335a9e9fd351b77"},"downloads":-1,"filename":"cs.threads-20221228.tar.gz","has_sig":false,"md5_digest":"74f53afff9837c79d174917719e68c9a","packagetype":"sdist","python_version":"source","requires_python":null,"size":9120,"upload_time":"2022-12-27T23:38:36","upload_time_iso_8601":"2022-12-27T23:38:36.867468Z","url":"https://files.pythonhosted.org/packages/d6/e1/851dbd6d78b238a55928c8fcec897ee1bc5bad4c2d0192f354eb324b6291/cs.threads-20221228.tar.gz","yanked":false,"yanked_reason":null}],"20230125":[{"comment_text":"","digests":{"blake2b_256":"cfe6f701cd004772922226754678a34e0822dec1bd166354b06818e45c5bcef7","md5":"bc55761eb172d51c5433debe97e1ef86","sha256":"94d3b685ea89914b8af10a1c47c7445e952ec753702a5a8b3cb9434c9212ca26"},"downloads":-1,"filename":"cs.threads-20230125-py3-none-any.whl","has_sig":false,"md5_digest":"bc55761eb172d51c5433debe97e1ef86","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":9276,"upload_time":"2023-01-25T09:52:33","upload_time_iso_8601":"2023-01-25T09:52:33.629184Z","url":"https://files.pythonhosted.org/packages/cf/e6/f701cd004772922226754678a34e0822dec1bd166354b06818e45c5bcef7/cs.threads-20230125-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c40a544c7b17712b4b01af1f4f8f2a8f129a7180e564b455f8bf663d0012edeb","md5":"43f695096af1d13af667b544bf77c052","sha256":"60f6d39912e8f357301dd4a4b4ea85bc2d02e077758f73dc88a133546daa5aa8"},"downloads":-1,"filename":"cs.threads-20230125.tar.gz","has_sig":false,"md5_digest":"43f695096af1d13af667b544bf77c052","packagetype":"sdist","python_version":"source","requires_python":null,"size":10405,"upload_time":"2023-01-25T09:52:35","upload_time_iso_8601":"2023-01-25T09:52:35.495372Z","url":"https://files.pythonhosted.org/packages/c4/0a/544c7b17712b4b01af1f4f8f2a8f129a7180e564b455f8bf663d0012edeb/cs.threads-20230125.tar.gz","yanked":false,"yanked_reason":null}],"20230212":[{"comment_text":"","digests":{"blake2b_256":"2e9af8cc356c5c847ea28ef040875e979337aa39038cc9c49597424d5271b187","md5":"80b0cdf5a78ab9dff120883318a6f7f8","sha256":"fabb4e25d5d2212a753b744f509e64f7dcb3c88b77d0702cf3d579ba1062b422"},"downloads":-1,"filename":"cs.threads-20230212-py3-none-any.whl","has_sig":false,"md5_digest":"80b0cdf5a78ab9dff120883318a6f7f8","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":9847,"upload_time":"2023-02-11T23:55:41","upload_time_iso_8601":"2023-02-11T23:55:41.794333Z","url":"https://files.pythonhosted.org/packages/2e/9a/f8cc356c5c847ea28ef040875e979337aa39038cc9c49597424d5271b187/cs.threads-20230212-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"6d5d820844b4fb5246e4e24da88fbb99db8be9177f813e80bcaeb2cb0ef436f9","md5":"bdf689c08e9d4fbd3fa5634450d7275a","sha256":"d7fd924410882d00b0c18d0ab097762b48bae6f9a2f7ef41fc599ca38359df48"},"downloads":-1,"filename":"cs.threads-20230212.tar.gz","has_sig":false,"md5_digest":"bdf689c08e9d4fbd3fa5634450d7275a","packagetype":"sdist","python_version":"source","requires_python":null,"size":10982,"upload_time":"2023-02-11T23:55:43","upload_time_iso_8601":"2023-02-11T23:55:43.200733Z","url":"https://files.pythonhosted.org/packages/6d/5d/820844b4fb5246e4e24da88fbb99db8be9177f813e80bcaeb2cb0ef436f9/cs.threads-20230212.tar.gz","yanked":false,"yanked_reason":null}],"20230331":[{"comment_text":"","digests":{"blake2b_256":"3339111bba66a3a449cefddd5223b6d6858befbca37d0a952f1ca4dc21ac21c7","md5":"c816f079093ba652e98d37e231531cab","sha256":"1fafa3f56cd6a75e884eb28aae54a81e73b01a0e1692694d95a378f510a79ea4"},"downloads":-1,"filename":"cs.threads-20230331-py3-none-any.whl","has_sig":false,"md5_digest":"c816f079093ba652e98d37e231531cab","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":11502,"upload_time":"2023-03-31T10:19:12","upload_time_iso_8601":"2023-03-31T10:19:12.364886Z","url":"https://files.pythonhosted.org/packages/33/39/111bba66a3a449cefddd5223b6d6858befbca37d0a952f1ca4dc21ac21c7/cs.threads-20230331-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ae47236e83f0cc2d23d52c961d1e042fef4c7a76fad314b1c2132dfa2e41b7af","md5":"28f073499a8eb28cde3ecf5b3390428d","sha256":"3ba6c35dafa652800e2a4420b571c32d90d75c698ff4bf098453ba82070bf76e"},"downloads":-1,"filename":"cs.threads-20230331.tar.gz","has_sig":false,"md5_digest":"28f073499a8eb28cde3ecf5b3390428d","packagetype":"sdist","python_version":"source","requires_python":null,"size":13268,"upload_time":"2023-03-31T10:19:14","upload_time_iso_8601":"2023-03-31T10:19:14.820034Z","url":"https://files.pythonhosted.org/packages/ae/47/236e83f0cc2d23d52c961d1e042fef4c7a76fad314b1c2132dfa2e41b7af/cs.threads-20230331.tar.gz","yanked":false,"yanked_reason":null}],"20231129":[{"comment_text":"","digests":{"blake2b_256":"f5b964fb39ce36366d8b3fc12251236423e7020c4f027dc0db2d6be059bdc862","md5":"5710240c0a7e427d0bd2c787ccf4299e","sha256":"0bf8e97827d97dc3f6dc0fc4acc24e38c5b2d06b2cb9bcf2290912ee01660bc5"},"downloads":-1,"filename":"cs.threads-20231129-py3-none-any.whl","has_sig":false,"md5_digest":"5710240c0a7e427d0bd2c787ccf4299e","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":12443,"upload_time":"2023-11-29T08:52:58","upload_time_iso_8601":"2023-11-29T08:52:58.231087Z","url":"https://files.pythonhosted.org/packages/f5/b9/64fb39ce36366d8b3fc12251236423e7020c4f027dc0db2d6be059bdc862/cs.threads-20231129-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3856d9defedf68e9815b1f3c515fecef870dd62657b677104b093e38bb8fc76e","md5":"70a3ba88fb1753b78fad1fbf79abf770","sha256":"f98794f0a2cb6430656d43dd5548f72eefa367033a11b7ba343e31ad90e977c3"},"downloads":-1,"filename":"cs.threads-20231129.tar.gz","has_sig":false,"md5_digest":"70a3ba88fb1753b78fad1fbf79abf770","packagetype":"sdist","python_version":"source","requires_python":null,"size":14894,"upload_time":"2023-11-29T08:53:01","upload_time_iso_8601":"2023-11-29T08:53:01.243586Z","url":"https://files.pythonhosted.org/packages/38/56/d9defedf68e9815b1f3c515fecef870dd62657b677104b093e38bb8fc76e/cs.threads-20231129.tar.gz","yanked":false,"yanked_reason":null}],"20240303":[{"comment_text":"","digests":{"blake2b_256":"f898e03f5cd6022f0b9da2189355c7898012a07ab5d8c280a8ccc10fec90ae8c","md5":"10d88ddab4c66ef4752b49f7a782f0c5","sha256":"0437c7c527912202926c969e5776ce1eff39cd80d07cd2f00e10eef1a4655ed9"},"downloads":-1,"filename":"cs.threads-20240303-py3-none-any.whl","has_sig":false,"md5_digest":"10d88ddab4c66ef4752b49f7a782f0c5","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":12587,"upload_time":"2024-03-03T02:06:51","upload_time_iso_8601":"2024-03-03T02:06:51.545926Z","url":"https://files.pythonhosted.org/packages/f8/98/e03f5cd6022f0b9da2189355c7898012a07ab5d8c280a8ccc10fec90ae8c/cs.threads-20240303-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"75a76efeb3df364c7d3a090381aee19d9871df4f1454c009a0904dcacae32343","md5":"9b9c130de7a8b4d6dcd63de374b35ea2","sha256":"062dca61279599332e62a4e8d5766b8ac0f9724eee2679f04d8afa27534f75df"},"downloads":-1,"filename":"cs.threads-20240303.tar.gz","has_sig":false,"md5_digest":"9b9c130de7a8b4d6dcd63de374b35ea2","packagetype":"sdist","python_version":"source","requires_python":null,"size":16358,"upload_time":"2024-03-03T02:06:53","upload_time_iso_8601":"2024-03-03T02:06:53.677152Z","url":"https://files.pythonhosted.org/packages/75/a7/6efeb3df364c7d3a090381aee19d9871df4f1454c009a0904dcacae32343/cs.threads-20240303.tar.gz","yanked":false,"yanked_reason":null}],"20240316":[{"comment_text":"","digests":{"blake2b_256":"ea93c224cf9b11f3c69cfb0eadd7cfc604e3391562367a192cf9ca36ad5514b1","md5":"21b9765fd57cf04209c16ae3811c9ac5","sha256":"d29ef59a98ecefb17685ea0c623fc249c5b8db6b5e05a3a2a2f8b09984171b1f"},"downloads":-1,"filename":"cs.threads-20240316-py3-none-any.whl","has_sig":false,"md5_digest":"21b9765fd57cf04209c16ae3811c9ac5","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":12600,"upload_time":"2024-03-16T07:03:59","upload_time_iso_8601":"2024-03-16T07:03:59.046748Z","url":"https://files.pythonhosted.org/packages/ea/93/c224cf9b11f3c69cfb0eadd7cfc604e3391562367a192cf9ca36ad5514b1/cs.threads-20240316-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"87a4fb18869e26770f2db1d2cd616a0b43eaadf62b7acb02ca838a6053e173bf","md5":"29921e7d7e802ba3c4e8db8eca843ce5","sha256":"9391c0a23d1fe8b087460e951e38319bb73de23ac3d2646fd649851001aca594"},"downloads":-1,"filename":"cs.threads-20240316.tar.gz","has_sig":false,"md5_digest":"29921e7d7e802ba3c4e8db8eca843ce5","packagetype":"sdist","python_version":"source","requires_python":null,"size":14994,"upload_time":"2024-03-16T07:04:01","upload_time_iso_8601":"2024-03-16T07:04:01.343208Z","url":"https://files.pythonhosted.org/packages/87/a4/fb18869e26770f2db1d2cd616a0b43eaadf62b7acb02ca838a6053e173bf/cs.threads-20240316.tar.gz","yanked":false,"yanked_reason":null}],"20240412":[{"comment_text":"","digests":{"blake2b_256":"1a07e5b9172122bfaa6c65b51ab68c4b35cc1ea98b55b2e58c6030f640ebe9d7","md5":"b834817f8502ce57b1752a10b74fd1d0","sha256":"295aaa366b0bccf3af8ea7ad6c5df65533dc4c91d680f223396246e9c4136522"},"downloads":-1,"filename":"cs.threads-20240412-py3-none-any.whl","has_sig":false,"md5_digest":"b834817f8502ce57b1752a10b74fd1d0","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":15128,"upload_time":"2024-04-12T03:32:26","upload_time_iso_8601":"2024-04-12T03:32:26.825799Z","url":"https://files.pythonhosted.org/packages/1a/07/e5b9172122bfaa6c65b51ab68c4b35cc1ea98b55b2e58c6030f640ebe9d7/cs.threads-20240412-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"9bd69518ec11602c048eb61bf9c8531fda4e6ba2ecf4f426da2a243ded58f5b3","md5":"ba4b1225cd36a5ed4b4d91afd1e2d566","sha256":"a80262f006a1d07332447e253356f36262e8425ef323b19f3113b738dd747005"},"downloads":-1,"filename":"cs.threads-20240412.tar.gz","has_sig":false,"md5_digest":"ba4b1225cd36a5ed4b4d91afd1e2d566","packagetype":"sdist","python_version":"source","requires_python":null,"size":17270,"upload_time":"2024-04-12T03:32:29","upload_time_iso_8601":"2024-04-12T03:32:29.065521Z","url":"https://files.pythonhosted.org/packages/9b/d6/9518ec11602c048eb61bf9c8531fda4e6ba2ecf4f426da2a243ded58f5b3/cs.threads-20240412.tar.gz","yanked":false,"yanked_reason":null}],"20240422":[{"comment_text":"","digests":{"blake2b_256":"4753818024dd54f52fc4e78d5d7b1826009070ef4f36dd7954e5cb419d7d2b9f","md5":"d38e69a57e091d97321da4e16865708e","sha256":"5074a1cf6f70d4a9ce1085a85c90a9da1a3e2d0a944baba04299dd1acf5e2e2d"},"downloads":-1,"filename":"cs.threads-20240422-py3-none-any.whl","has_sig":false,"md5_digest":"d38e69a57e091d97321da4e16865708e","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":15202,"upload_time":"2024-04-22T02:46:55","upload_time_iso_8601":"2024-04-22T02:46:55.734795Z","url":"https://files.pythonhosted.org/packages/47/53/818024dd54f52fc4e78d5d7b1826009070ef4f36dd7954e5cb419d7d2b9f/cs.threads-20240422-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"bbe5879d2bce9eaf7b4a207b4bde7d43d6f775b783775af30e466a90b0c5bfe2","md5":"e28d6135468ef374e4d3344e17e616ff","sha256":"5c857b5e629dc78a332e199839e8fee285994b316e63c2c9216a25676278ee98"},"downloads":-1,"filename":"cs.threads-20240422.tar.gz","has_sig":false,"md5_digest":"e28d6135468ef374e4d3344e17e616ff","packagetype":"sdist","python_version":"source","requires_python":null,"size":17497,"upload_time":"2024-04-22T02:46:57","upload_time_iso_8601":"2024-04-22T02:46:57.880703Z","url":"https://files.pythonhosted.org/packages/bb/e5/879d2bce9eaf7b4a207b4bde7d43d6f775b783775af30e466a90b0c5bfe2/cs.threads-20240422.tar.gz","yanked":false,"yanked_reason":null}],"20240630":[{"comment_text":"","digests":{"blake2b_256":"5ca7a10466440aeeb9dbee31ea8748b86793099cdc7b400e46ac4aa5e98e6968","md5":"e80d018edd0bc323d64d94437f480bbe","sha256":"e725858907fe086a2912fe7075e91cf3b3569731517123c04555f277a28e2102"},"downloads":-1,"filename":"cs.threads-20240630-py3-none-any.whl","has_sig":false,"md5_digest":"e80d018edd0bc323d64d94437f480bbe","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":15307,"upload_time":"2024-06-30T01:18:41","upload_time_iso_8601":"2024-06-30T01:18:41.343406Z","url":"https://files.pythonhosted.org/packages/5c/a7/a10466440aeeb9dbee31ea8748b86793099cdc7b400e46ac4aa5e98e6968/cs.threads-20240630-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"a96055a504df6d3c57a3f333fb1e4fb1a25adbba1d0bae09657f43cd439318d2","md5":"9e3d7fb19c48833faa50d319f11a0855","sha256":"6ae184f518a163211c7d80150cd715579cd640b6af17faec5a4f1b2a77ceb648"},"downloads":-1,"filename":"cs.threads-20240630.tar.gz","has_sig":false,"md5_digest":"9e3d7fb19c48833faa50d319f11a0855","packagetype":"sdist","python_version":"source","requires_python":null,"size":17691,"upload_time":"2024-06-30T01:18:43","upload_time_iso_8601":"2024-06-30T01:18:43.683631Z","url":"https://files.pythonhosted.org/packages/a9/60/55a504df6d3c57a3f333fb1e4fb1a25adbba1d0bae09657f43cd439318d2/cs.threads-20240630.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"5ca7a10466440aeeb9dbee31ea8748b86793099cdc7b400e46ac4aa5e98e6968","md5":"e80d018edd0bc323d64d94437f480bbe","sha256":"e725858907fe086a2912fe7075e91cf3b3569731517123c04555f277a28e2102"},"downloads":-1,"filename":"cs.threads-20240630-py3-none-any.whl","has_sig":false,"md5_digest":"e80d018edd0bc323d64d94437f480bbe","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":15307,"upload_time":"2024-06-30T01:18:41","upload_time_iso_8601":"2024-06-30T01:18:41.343406Z","url":"https://files.pythonhosted.org/packages/5c/a7/a10466440aeeb9dbee31ea8748b86793099cdc7b400e46ac4aa5e98e6968/cs.threads-20240630-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"a96055a504df6d3c57a3f333fb1e4fb1a25adbba1d0bae09657f43cd439318d2","md5":"9e3d7fb19c48833faa50d319f11a0855","sha256":"6ae184f518a163211c7d80150cd715579cd640b6af17faec5a4f1b2a77ceb648"},"downloads":-1,"filename":"cs.threads-20240630.tar.gz","has_sig":false,"md5_digest":"9e3d7fb19c48833faa50d319f11a0855","packagetype":"sdist","python_version":"source","requires_python":null,"size":17691,"upload_time":"2024-06-30T01:18:43","upload_time_iso_8601":"2024-06-30T01:18:43.683631Z","url":"https://files.pythonhosted.org/packages/a9/60/55a504df6d3c57a3f333fb1e4fb1a25adbba1d0bae09657f43cd439318d2/cs.threads-20240630.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
