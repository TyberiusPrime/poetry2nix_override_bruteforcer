{"info":{"author":"Alex Hall","author_email":"alex.mojaki@gmail.com","bugtrack_url":null,"classifiers":["License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: Implementation :: CPython","Programming Language :: Python :: Implementation :: PyPy"],"description":"# sorcery\n\n[![Build Status](https://github.com/alexmojaki/sorcery/actions/workflows/pytest.yml/badge.svg)](https://github.com/alexmojaki/sorcery/actions/workflows/pytest.yml) [![Coverage Status](https://coveralls.io/repos/github/alexmojaki/sorcery/badge.svg?branch=master)](https://coveralls.io/github/alexmojaki/sorcery?branch=master) [![Supports Python 3.5+, including PyPy](https://img.shields.io/pypi/pyversions/sorcery.svg)](https://pypi.python.org/pypi/sorcery)\n\nThis package lets you use and write callables called 'spells' that know where they're being called from and can use that information to do otherwise impossible things.\n\nNote: previously spells had a complicated implementation that placed limitations on how they could be called. Now spells are just a thin wrapper around [`executing`](https://github.com/alexmojaki/executing) which is much better. You may be better off using `executing` directly depending on your use case. This repo is now mostly just a fun collection of things to do with it.\n\n  * [Installation](#installation)\n  * [Quick examples](#quick-examples)\n     * [`assigned_names`](#assigned_names)\n     * [`unpack_keys` and `unpack_attrs`](#unpack_keys-and-unpack_attrs)\n     * [`dict_of`](#dict_of)\n     * [`print_args`](#print_args)\n     * [`call_with_name` and `delegate_to_attr`](#call_with_name-and-delegate_to_attr)\n     * [`maybe`](#maybe)\n     * [`timeit`](#timeit)\n     * [`switch`](#switch)\n     * [`select_from`](#select_from)\n  * [How to write your own spells](#how-to-write-your-own-spells)\n     * [Using other spells within spells](#using-other-spells-within-spells)\n     * [Other helpers](#other-helpers)\n  * [Should I actually use this library?](#should-i-actually-use-this-library)\n\n## Installation\n\n    pip install sorcery\n\n## Quick examples\n\nSee the docstrings for more detail.\n\n    from sorcery import (assigned_names, unpack_keys, unpack_attrs,\n                         dict_of, print_args, call_with_name,\n                         delegate_to_attr, maybe, select_from)\n\n### `assigned_names`\n\nInstead of:\n\n    foo = func('foo')\n    bar = func('bar')\n\nwrite:\n\n    foo, bar = [func(name) for name in assigned_names()]\n\nInstead of:\n\n    class Thing(Enum):\n        foo = 'foo'\n        bar = 'bar'\n\nwrite:\n\n    class Thing(Enum):\n        foo, bar = assigned_names()\n\n### `unpack_keys` and `unpack_attrs`\n\nInstead of:\n\n    foo = d['foo']\n    bar = d['bar']\n\nwrite:\n\n    foo, bar = unpack_keys(d)\n\nSimilarly, instead of:\n\n    foo = x.foo\n    bar = x.bar\n\nwrite:\n\n    foo, bar = unpack_attrs(x)\n\n### `dict_of`\n\nInstead of:\n\n    dict(foo=foo, bar=bar, spam=thing())\n\nwrite:\n\n    dict_of(foo, bar, spam=thing())\n\n(see also: `magic_kwargs`)\n\n### `print_args`\n\nFor easy debugging, instead of:\n\n    print(\"foo =\", foo)\n    print(\"bar() =\", bar())\n\nwrite:\n\n    print_args(foo, bar())\n\nTo write your own version of this (e.g. if you want to add colour), use `args_with_source`.\n\nIf you like this, I recommend the `pp` function in the [`snoop`](https://github.com/alexmojaki/snoop) library.\n\n### `call_with_name` and `delegate_to_attr`\n\nSometimes you want to create many similar methods which differ only in a string argument which is equal to the name of the method. Given this class:\n\n```python\nclass C:\n    def generic(self, method_name, *args, **kwargs):\n        ...\n```\n\nInside the class definition, instead of:\n\n```python\n    def foo(self, x, y):\n        return self.generic('foo', x, y)\n\n    def bar(self, z):\n        return self.generic('bar', z)\n```\n\nwrite:\n\n```python\n    foo, bar = call_with_name(generic)\n```\n\nFor a specific common use case:\n\n```python\nclass Wrapper:\n    def __init__(self, thing):\n        self.thing = thing\n\n    def foo(self, x, y):\n        return self.thing.foo(x, y)\n\n    def bar(self, z):\n        return self.thing.bar(z)\n```\n\nyou can instead write:\n\n```python\n    foo, bar = delegate_to_attr('thing')\n```\n\nFor a more concrete example, here is a class that wraps a list and has all the usual list methods while ensuring that any methods which usually create a new list actually create a new wrapper:\n\n```python\nclass MyListWrapper(object):\n    def __init__(self, lst):\n        self.list = lst\n\n    def _make_new_wrapper(self, method_name, *args, **kwargs):\n        method = getattr(self.list, method_name)\n        new_list = method(*args, **kwargs)\n        return type(self)(new_list)\n\n    append, extend, clear, __repr__, __str__, __eq__, __hash__, \\\n        __contains__, __len__, remove, insert, pop, index, count, \\\n        sort, __iter__, reverse, __iadd__ = spells.delegate_to_attr('list')\n\n    copy, __add__, __radd__, __mul__, __rmul__ = spells.call_with_name(_make_new_wrapper)\n```\n\nOf course, there are less magical DRY ways to accomplish this (e.g. looping over some strings and using `setattr`), but they will not tell your IDE/linter what methods `MyListWrapper` has or doesn't have.\n\n### `maybe`\n\nWhile we wait for the `?.` operator from [PEP 505](https://www.python.org/dev/peps/pep-0505/), here's an alternative. Instead of:\n\n    None if foo is None else foo.bar()\n\nwrite:\n\n    maybe(foo).bar()\n\nIf you want a slightly less magical version, consider [pymaybe](https://github.com/ekampf/pymaybe).\n\n### `timeit`\n\nInstead of\n\n```python\nimport timeit\n\nnums = [3, 1, 2]\nsetup = 'from __main__ import nums'\n\nprint(timeit.repeat('min(nums)', setup))\nprint(timeit.repeat('sorted(nums)[0]', setup))\n```\n\nwrite:\n\n```python\nimport sorcery\n\nnums = [3, 1, 2]\n\nif sorcery.timeit():\n    result = min(nums)\nelse:\n    result = sorted(nums)[0]\n```\n\n### `switch`\n\nInstead of:\n\n```python\nif val == 1:\n    x = 1\nelif val == 2 or val == bar():\n    x = spam()\nelif val == dangerous_function():\n    x = spam() * 2\nelse:\n    x = -1\n```\n\nwrite:\n\n```python\nx = switch(val, lambda: {\n    1: 1,\n    {{ 2, bar() }}: spam(),\n    dangerous_function(): spam() * 2\n}, default=-1)\n```\n\nThis really will behave like the if/elif chain above. The dictionary is just\nsome nice syntax, but no dictionary is ever actually created. The keys\nare evaluated only as needed, in order, and only the matching value is evaluated.\n\n### `select_from`\n\nInstead of:\n\n```python\ncursor.execute('''\n    SELECT foo, bar\n    FROM my_table\n    WHERE spam = ?\n      AND thing = ?\n    ''', [spam, thing])\n\nfor foo, bar in cursor:\n    ...\n```\n\nwrite:\n\n```python\nfor foo, bar in select_from('my_table', where=[spam, thing]):\n    ...\n```\n\n## How to write your own spells\n\nDecorate a function with `@spell`. An instance of the class `FrameInfo` will be passed to the first argument of the function, while the other arguments will come from the call. For example:\n\n```python\nfrom sorcery import spell\n\n@spell\ndef my_spell(frame_info, foo):\n    ...\n```\n\nwill be called as just `my_spell(foo)`.\n\nThe most important piece of information you are likely to use is `frame_info.call`. This is the `ast.Call` node where the spell is being called. [Here](https://greentreesnakes.readthedocs.io/en/latest/nodes.html) is some helpful documentation for navigating the AST. Every node also has a `parent` attribute added to it.\n\n`frame_info.frame` is the execution frame in which the spell is being called - see the [inspect](https://docs.python.org/3/library/inspect.html) docs for what you can do with this.\n\nThose are the essentials. See [the source](https://github.com/alexmojaki/sorcery/blob/master/sorcery/spells.py) of various spells for some examples, it's not that complicated.\n\n### Using other spells within spells\n\nSometimes you want to reuse the magic of one spell in another spell. Simply calling the other spell won't do what you want - you want to tell the other spell to act as if it's being called from the place your own spell is called. For this, add insert `.at(frame_info)` between the spell you're using and its arguments.\n\nLet's look at a concrete example. Here's the definition of the spell `args_with_source`:\n\n```python\n@spell\ndef args_with_source(frame_info, *args):\n    \"\"\"\n    Returns a list of pairs of:\n        - the source code of the argument\n        - the value of the argument\n    for each argument.\n\n    For example:\n\n        args_with_source(foo(), 1+2)\n\n    is the same as:\n\n        [\n            (\"foo()\", foo()),\n            (\"1+2\", 3)\n        ]\n    \"\"\"\n    ...\n```\n\nThe magic of `args_with_source` is that it looks at its arguments wherever it's called and extracts their source code. Here is a simplified implementation of the `print_args` spell which uses that magic:\n\n```python\n@spell\ndef simple_print_args(frame_info, *args):\n    for source, arg in args_with_source.at(frame_info)(*args):\n        print(source, '=', arg)\n```\n\nThen when you call `simple_print_args(foo(), 1+2)`, the `Call` node of that expression will be passed down to `args_with_source.at(frame_info)` so that the source is extracted from the correct arguments. Simply writing `args_with_source(*args)` would be wrong, as that would give the source `\"*args\"`.\n\n### Other helpers\n\nThat's all you really need to get started writing a spell, but here are pointers to some other stuff that might help. See the docstrings for details.\n\nThe module `sorcery.core` has these helper functions:\n\n- `node_names(node: ast.AST) -> Tuple[str]`\n- `node_name(node: ast.AST) -> str`\n- `statement_containing_node(node: ast.AST) -> ast.stmt:`\n\n`FrameInfo` has these methods:\n\n- `assigned_names(...)`\n- `get_source(self, node: ast.AST) -> str`\n\n## Should I actually use this library?\n\nIf you're still getting the hang of Python, no. This will lead to confusion about what is normal and expected in Python and will hamper your learning.\n\nIn a serious business or production context, I wouldn't recommend most of the spells unless you're quite careful. Their unusual nature may confuse other readers of the code, and tying the behaviour of your code to things like the names of variables may not be good for readability and refactoring. There are some exceptions though:\n\n- `call_with_name` and `delegate_to_attr`\n- `assigned_names` for making `Enum`s.\n- `print_args` when debugging\n\nIf you're writing code where performance and stability aren't critical, e.g. if it's for fun or you just want to get some code down as fast as possible and you can polish it later, then go for it.\n\nThe point of this library is not just to be used in actual code. It's a way to explore and think about API and language design, readability, and the limits of Python itself. It was fun to create and I hope others can have fun playing around with it. Come [have a chat](https://gitter.im/python-sorcery/Lobby) about what spells you think would be cool, what features you wish Python had, or what crazy projects you want to create.\n\nIf you're interested in this stuff, particularly creative uses of the Python AST, you may also be interested in:\n\n- [executing](https://github.com/alexmojaki/executing) the backbone of this library\n- [snoop](https://github.com/alexmojaki/snoop): a feature-rich and convenient debugging library which also uses `executing` as well as various other magic and tricks\n- [birdseye](https://github.com/alexmojaki/birdseye): a debugger which records the value of every expression\n- [MacroPy](https://github.com/lihaoyi/macropy): syntactic macros in Python by transforming the AST at import time\n\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/alexmojaki/sorcery","keywords":"","license":"MIT","maintainer":"","maintainer_email":"","name":"sorcery","package_url":"https://pypi.org/project/sorcery/","platform":"","project_url":"https://pypi.org/project/sorcery/","project_urls":{"Homepage":"https://github.com/alexmojaki/sorcery"},"provides_extra":null,"release_url":"https://pypi.org/project/sorcery/0.2.2/","requires_dist":["executing","littleutils (>=0.2.1)","asttokens","wrapt"],"requires_python":"","summary":"Dark magic delights in Python","version":"0.2.2","yanked":false,"yanked_reason":null},"last_serial":11998435,"releases":{"0.0.1":[{"comment_text":"","digests":{"blake2b_256":"0389c7d45a4545cd75ad4ca0e5401ed6f9199ceb81d68ac5e39a6eac18b1184c","md5":"c181ed589d2b164b5558b4ee6865825e","sha256":"e7eb9390912787200bafc2c40d2b57572846ae3ff1892f02b87974153c39bd1f"},"downloads":-1,"filename":"sorcery-0.0.1.tar.gz","has_sig":false,"md5_digest":"c181ed589d2b164b5558b4ee6865825e","packagetype":"sdist","python_version":"source","requires_python":null,"size":2805,"upload_time":"2018-04-12T21:30:09","upload_time_iso_8601":"2018-04-12T21:30:09.346973Z","url":"https://files.pythonhosted.org/packages/03/89/c7d45a4545cd75ad4ca0e5401ed6f9199ceb81d68ac5e39a6eac18b1184c/sorcery-0.0.1.tar.gz","yanked":false,"yanked_reason":null}],"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"cc3acac16966e1a80b67fbff5df9fbbb3c06acafc152e15c067550d666e0d5f8","md5":"a616e78247b741e90d81ea66734f8cee","sha256":"f97601d8274fb9cb2f97b7507cbcc42bcab74cd23f5ca2bd579288bb8ca4faed"},"downloads":-1,"filename":"sorcery-0.1.0.tar.gz","has_sig":false,"md5_digest":"a616e78247b741e90d81ea66734f8cee","packagetype":"sdist","python_version":"source","requires_python":null,"size":14882,"upload_time":"2018-07-15T11:00:33","upload_time_iso_8601":"2018-07-15T11:00:33.640778Z","url":"https://files.pythonhosted.org/packages/cc/3a/cac16966e1a80b67fbff5df9fbbb3c06acafc152e15c067550d666e0d5f8/sorcery-0.1.0.tar.gz","yanked":false,"yanked_reason":null}],"0.2.0":[{"comment_text":"","digests":{"blake2b_256":"bdfc038cba73f15b33c3b22088b742b566f31044a4b5b8e65bcd184dae08eee9","md5":"c090212f75bad50067757ac653af99bd","sha256":"4ad888ccae1cc26a1977de02511a4596683067893bb11bd4c9e5f04808c8eafd"},"downloads":-1,"filename":"sorcery-0.2.0.tar.gz","has_sig":false,"md5_digest":"c090212f75bad50067757ac653af99bd","packagetype":"sdist","python_version":"source","requires_python":null,"size":13574,"upload_time":"2019-07-03T13:35:21","upload_time_iso_8601":"2019-07-03T13:35:21.246023Z","url":"https://files.pythonhosted.org/packages/bd/fc/038cba73f15b33c3b22088b742b566f31044a4b5b8e65bcd184dae08eee9/sorcery-0.2.0.tar.gz","yanked":false,"yanked_reason":null}],"0.2.1":[{"comment_text":"","digests":{"blake2b_256":"44d02afb56baa92cef73836f36838d46ba583d96e5d2071824424a457e437cce","md5":"8adaa597623bf653b99068ab8b5ce4be","sha256":"b1acea661a1ce6a86052f5eb7919c6bc7c12755644f1ad6819006138860718e2"},"downloads":-1,"filename":"sorcery-0.2.1.tar.gz","has_sig":false,"md5_digest":"8adaa597623bf653b99068ab8b5ce4be","packagetype":"sdist","python_version":"source","requires_python":null,"size":14160,"upload_time":"2020-04-19T08:04:54","upload_time_iso_8601":"2020-04-19T08:04:54.091357Z","url":"https://files.pythonhosted.org/packages/44/d0/2afb56baa92cef73836f36838d46ba583d96e5d2071824424a457e437cce/sorcery-0.2.1.tar.gz","yanked":false,"yanked_reason":null}],"0.2.2":[{"comment_text":"","digests":{"blake2b_256":"62c7b57116a13cacceeb83b50b84373effc3aef2a7568a742b8596769d1d20c0","md5":"2ebb67366426fd7776cd930450fc3011","sha256":"299f23db2b7d4506df79a6e8688dfadc0e61f188029675f4b1a1d7b2e97c385c"},"downloads":-1,"filename":"sorcery-0.2.2-py3-none-any.whl","has_sig":false,"md5_digest":"2ebb67366426fd7776cd930450fc3011","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":16273,"upload_time":"2021-11-11T19:08:19","upload_time_iso_8601":"2021-11-11T19:08:19.576330Z","url":"https://files.pythonhosted.org/packages/62/c7/b57116a13cacceeb83b50b84373effc3aef2a7568a742b8596769d1d20c0/sorcery-0.2.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f78c15a9df10a6a2c6667a0df1079df1493831e43ecea5133f4a781646b16c1a","md5":"8e32431a2586bfefd8b64309d32b9143","sha256":"84198c9502e0e7818df2e023b55831fd14bd2a36b19f0e58f363ec82c5606be7"},"downloads":-1,"filename":"sorcery-0.2.2.tar.gz","has_sig":false,"md5_digest":"8e32431a2586bfefd8b64309d32b9143","packagetype":"sdist","python_version":"source","requires_python":null,"size":23471,"upload_time":"2021-11-11T19:08:21","upload_time_iso_8601":"2021-11-11T19:08:21.470199Z","url":"https://files.pythonhosted.org/packages/f7/8c/15a9df10a6a2c6667a0df1079df1493831e43ecea5133f4a781646b16c1a/sorcery-0.2.2.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"62c7b57116a13cacceeb83b50b84373effc3aef2a7568a742b8596769d1d20c0","md5":"2ebb67366426fd7776cd930450fc3011","sha256":"299f23db2b7d4506df79a6e8688dfadc0e61f188029675f4b1a1d7b2e97c385c"},"downloads":-1,"filename":"sorcery-0.2.2-py3-none-any.whl","has_sig":false,"md5_digest":"2ebb67366426fd7776cd930450fc3011","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":16273,"upload_time":"2021-11-11T19:08:19","upload_time_iso_8601":"2021-11-11T19:08:19.576330Z","url":"https://files.pythonhosted.org/packages/62/c7/b57116a13cacceeb83b50b84373effc3aef2a7568a742b8596769d1d20c0/sorcery-0.2.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f78c15a9df10a6a2c6667a0df1079df1493831e43ecea5133f4a781646b16c1a","md5":"8e32431a2586bfefd8b64309d32b9143","sha256":"84198c9502e0e7818df2e023b55831fd14bd2a36b19f0e58f363ec82c5606be7"},"downloads":-1,"filename":"sorcery-0.2.2.tar.gz","has_sig":false,"md5_digest":"8e32431a2586bfefd8b64309d32b9143","packagetype":"sdist","python_version":"source","requires_python":null,"size":23471,"upload_time":"2021-11-11T19:08:21","upload_time_iso_8601":"2021-11-11T19:08:21.470199Z","url":"https://files.pythonhosted.org/packages/f7/8c/15a9df10a6a2c6667a0df1079df1493831e43ecea5133f4a781646b16c1a/sorcery-0.2.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
