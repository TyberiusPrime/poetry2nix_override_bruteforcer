{"info":{"author":"Yi Ge","author_email":"me@yige.ch","bugtrack_url":null,"classifiers":["Development Status :: 3 - Alpha","Intended Audience :: Developers","License :: OSI Approved :: MIT License","Programming Language :: Python :: 3","Programming Language :: Python :: 3.7"],"description":"# videocr\n\nExtract hardcoded (burned-in) subtitles from videos using the [Tesseract](https://github.com/tesseract-ocr/tesseract) OCR engine with Python.\n\nInput a video with hardcoded subtitles:\n\n<p float=\"left\">\n  <img width=\"430\" alt=\"screenshot\" src=\"https://user-images.githubusercontent.com/10210967/56873658-3b76dd00-6a34-11e9-95c6-cd6edc721f58.png\">\n  <img width=\"430\" alt=\"screenshot\" src=\"https://user-images.githubusercontent.com/10210967/56873659-3b76dd00-6a34-11e9-97aa-2c3e96fe3a97.png\">\n</p>\n\n```python\n# example.py\n\nfrom videocr import get_subtitles\n\nif __name__ == '__main__':  # This check is mandatory for Windows.\n    print(get_subtitles('video.mp4', lang='chi_sim+eng', sim_threshold=70, conf_threshold=65))\n```\n\n`$ python3 example.py`\n\nOutput:\n\n``` \n0\n00:00:01,042 --> 00:00:02,877\n喝 点 什么 ? \nWhat can I get you?\n\n1\n00:00:03,044 --> 00:00:05,463\n我 不 知道\nUm, I'm not sure.\n\n2\n00:00:08,091 --> 00:00:10,635\n休闲 时 光 …\nFor relaxing times, make it...\n\n3\n00:00:10,677 --> 00:00:12,595\n三 得 利 时 光\nBartender, Bob Suntory time.\n\n4\n00:00:14,472 --> 00:00:17,142\n我 要 一 杯 伏特 加\nUn, I'll have a vodka tonic.\n\n5\n00:00:18,059 --> 00:00:19,019\n谢谢\nLaughs Thanks.\n```\n\n## Performance\n\nThe OCR process is CPU intensive. It takes 3 minutes on my dual-core laptop to extract a 20 seconds video. More CPU cores will make it faster.\n\n## Installation\n\n1. Install [Tesseract](https://github.com/tesseract-ocr/tesseract/wiki) and make sure it is in your `$PATH`\n\n2. `$ pip install videocr`\n\n## API\n\n1. Return subtitle string in SRT format\n    ```python\n    get_subtitles(\n        video_path: str, lang='eng', time_start='0:00', time_end='',\n        conf_threshold=65, sim_threshold=90, use_fullframe=False)\n    ```\n\n2. Write subtitles to `file_path`\n    ```python\n    save_subtitles_to_file(\n        video_path: str, file_path='subtitle.srt', lang='eng', time_start='0:00', time_end='',\n        conf_threshold=65, sim_threshold=90, use_fullframe=False)\n    ```\n\n### Parameters\n\n- `lang`\n\n  The language of the subtitles. You can extract subtitles in almost any language. All language codes on [this page](https://github.com/tesseract-ocr/tesseract/wiki/Data-Files#data-files-for-version-400-november-29-2016) (e.g. `'eng'` for English) and all script names in [this repository](https://github.com/tesseract-ocr/tessdata_fast/tree/master/script) (e.g. `'HanS'` for simplified Chinese) are supported.\n  \n  Note that you can use more than one language, e.g. `lang='hin+eng'` for Hindi and English together. \n  \n  Language files will be automatically downloaded to your `~/tessdata`. You can read more about Tesseract language data files on their [wiki page](https://github.com/tesseract-ocr/tesseract/wiki/Data-Files).\n\n- `conf_threshold`\n\n  Confidence threshold for word predictions. Words with lower confidence than this value will be discarded. The default value `65` is fine for most cases. \n\n  Make it closer to 0 if you get too few words in each line, or make it closer to 100 if there are too many excess words in each line.\n\n- `sim_threshold`\n\n  Similarity threshold for subtitle lines. Subtitle lines with larger [Levenshtein](https://en.wikipedia.org/wiki/Levenshtein_distance) ratios than this threshold will be merged together. The default value `90` is fine for most cases.\n\n  Make it closer to 0 if you get too many duplicated subtitle lines, or make it closer to 100 if you get too few subtitle lines.\n\n- `time_start` and `time_end`\n\n  Extract subtitles from only a clip of the video. The subtitle timestamps are still calculated according to the full video length.\n\n- `use_fullframe`\n\n  By default, only the bottom half of each frame is used for OCR. You can explicitly use the full frame if your subtitles are not within the bottom half of each frame.","description_content_type":"text/markdown","docs_url":null,"download_url":"https://github.com/apm1467/videocr/archive/v0.1.6.tar.gz","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/apm1467/videocr","keywords":"","license":"MIT","maintainer":"","maintainer_email":"","name":"videocr","package_url":"https://pypi.org/project/videocr/","platform":"","project_url":"https://pypi.org/project/videocr/","project_urls":{"Download":"https://github.com/apm1467/videocr/archive/v0.1.6.tar.gz","Homepage":"https://github.com/apm1467/videocr"},"provides_extra":null,"release_url":"https://pypi.org/project/videocr/0.1.6/","requires_dist":null,"requires_python":"","summary":"Extract hardcoded subtitles from videos using machine learning","version":"0.1.6","yanked":false,"yanked_reason":null},"last_serial":6306759,"releases":{"0.1.4":[{"comment_text":"","digests":{"blake2b_256":"7ff98ba9872f41423b66fa86aadb2bd45ce559c9e1d8908f3d4be1d13354c6d6","md5":"0472f0cf6ac2577669fb7e4684fd6cd2","sha256":"5faeed7faf2c40bb17b70baba15b3ca3eae0aed163bc3ea931041403e32265d9"},"downloads":-1,"filename":"videocr-0.1.4.tar.gz","has_sig":false,"md5_digest":"0472f0cf6ac2577669fb7e4684fd6cd2","packagetype":"sdist","python_version":"source","requires_python":null,"size":6247,"upload_time":"2019-04-29T23:18:35","upload_time_iso_8601":"2019-04-29T23:18:35.547376Z","url":"https://files.pythonhosted.org/packages/7f/f9/8ba9872f41423b66fa86aadb2bd45ce559c9e1d8908f3d4be1d13354c6d6/videocr-0.1.4.tar.gz","yanked":false,"yanked_reason":null}],"0.1.5":[{"comment_text":"","digests":{"blake2b_256":"11a4b16cae7c37e3d29b18daf27f82919dce549dc22a4a48692e5eed36419fb6","md5":"c0b7f0da1c83cbdecacf164ae1ec4506","sha256":"4d9d4559e2e5ff504a62d31cf3cebb64e136f116145cd6a7131073672a31ff3e"},"downloads":-1,"filename":"videocr-0.1.5.tar.gz","has_sig":false,"md5_digest":"c0b7f0da1c83cbdecacf164ae1ec4506","packagetype":"sdist","python_version":"source","requires_python":null,"size":6240,"upload_time":"2019-05-18T19:41:31","upload_time_iso_8601":"2019-05-18T19:41:31.012787Z","url":"https://files.pythonhosted.org/packages/11/a4/b16cae7c37e3d29b18daf27f82919dce549dc22a4a48692e5eed36419fb6/videocr-0.1.5.tar.gz","yanked":false,"yanked_reason":null}],"0.1.6":[{"comment_text":"","digests":{"blake2b_256":"cbc4bce8bbe0aa1cfac2f00f72f9314b7f57700c339f26d41dfc8697601d91bf","md5":"396039d7e04004bd84eb24779358d6b5","sha256":"c3484f7d42b8ba7e4902300feefc0e02e2a5b19fb3bfab05576bc3fd197791b2"},"downloads":-1,"filename":"videocr-0.1.6.tar.gz","has_sig":false,"md5_digest":"396039d7e04004bd84eb24779358d6b5","packagetype":"sdist","python_version":"source","requires_python":null,"size":6513,"upload_time":"2019-12-15T14:58:47","upload_time_iso_8601":"2019-12-15T14:58:47.493701Z","url":"https://files.pythonhosted.org/packages/cb/c4/bce8bbe0aa1cfac2f00f72f9314b7f57700c339f26d41dfc8697601d91bf/videocr-0.1.6.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"cbc4bce8bbe0aa1cfac2f00f72f9314b7f57700c339f26d41dfc8697601d91bf","md5":"396039d7e04004bd84eb24779358d6b5","sha256":"c3484f7d42b8ba7e4902300feefc0e02e2a5b19fb3bfab05576bc3fd197791b2"},"downloads":-1,"filename":"videocr-0.1.6.tar.gz","has_sig":false,"md5_digest":"396039d7e04004bd84eb24779358d6b5","packagetype":"sdist","python_version":"source","requires_python":null,"size":6513,"upload_time":"2019-12-15T14:58:47","upload_time_iso_8601":"2019-12-15T14:58:47.493701Z","url":"https://files.pythonhosted.org/packages/cb/c4/bce8bbe0aa1cfac2f00f72f9314b7f57700c339f26d41dfc8697601d91bf/videocr-0.1.6.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
