{"info":{"author":"Paul Irofti","author_email":"paul@irofti.net","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Intended Audience :: Developers","License :: OSI Approved :: MIT License","Programming Language :: Python :: 2","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3","Programming Language :: Python :: Implementation :: CPython","Programming Language :: Python :: Implementation :: PyPy"],"description":"========\nAttrDict\n========\n.. image:: https://travis-ci.org/bcj/AttrDict.svg?branch=master\n  :target: https://travis-ci.org/bcj/AttrDict?branch=master\n.. image:: https://coveralls.io/repos/bcj/AttrDict/badge.png?branch=master\n  :target: https://coveralls.io/r/bcj/AttrDict?branch=master\n\nAttrDict is an MIT-licensed library that provides mapping objects that allow\ntheir elements to be accessed both as keys and as attributes::\n\n    > from attrdict import AttrDict\n    > a = AttrDict({'foo': 'bar'})\n    > a.foo\n    'bar'\n    > a['foo']\n    'bar'\n\nAttribute access makes it easy to create convenient, hierarchical settings\nobjects::\n\n    with open('settings.yaml') as fileobj:\n        settings = AttrDict(yaml.safe_load(fileobj))\n\n    cursor = connect(**settings.db.credentials).cursor()\n\n    cursor.execute(\"SELECT column FROM table;\")\n\nInstallation\n============\nAttrDict is in PyPI, so it can be installed directly using::\n\n    $ pip install attrdict\n\nOr from Github::\n\n    $ git clone https://github.com/bcj/AttrDict\n    $ cd AttrDict\n    $ python setup.py install\n\nBasic Usage\n===========\nAttrDict comes with three different classes, `AttrMap`, `AttrDict`, and\n`AttrDefault`. They are all fairly similar, as they all are MutableMappings (\nread: dictionaries) that allow creating, accessing, and deleting key-value\npairs as attributes.\n\nValid Names\n-----------\nAny key can be used as an attribute as long as:\n\n#. The key represents a valid attribute (i.e., it is a string comprised only of\n   alphanumeric characters and underscores that doesn't start with a number)\n#. The key represents a public attribute (i.e., it doesn't start with an\n   underscore). This is done (in part) so that implementation changes between\n   minor and micro versions don't force major version changes.\n#. The key does not shadow a class attribute (e.g., get).\n\nAttributes vs. Keys\n-------------------\nThere is a minor difference between accessing a value as an attribute vs.\naccessing it as a key, is that when a dict is accessed as an attribute, it will\nautomatically be converted to an Attr object. This allows you to recursively\naccess keys::\n\n    > attr = AttrDict({'foo': {'bar': 'baz'}})\n    > attr.foo.bar\n    'baz'\n\nRelatedly, by default, sequence types that aren't `bytes`, `str`, or `unicode`\n(e.g., lists, tuples) will automatically be converted to tuples, with any\nmappings converted to Attrs::\n\n    > attr = AttrDict({'foo': [{'bar': 'baz'}, {'bar': 'qux'}]})\n    > for sub_attr in attr.foo:\n    >     print(sub_attr.foo)\n    'baz'\n    'qux'\n\nTo get this recursive functionality for keys that cannot be used as attributes,\nyou can replicate the behavior by calling the Attr object::\n\n    > attr = AttrDict({1: {'two': 3}})\n    > attr(1).two\n    3\n\nClasses\n-------\nAttrDict comes with three different objects, `AttrMap`, `AttrDict`, and\n`AttrDefault`.\n\nAttrMap\n^^^^^^^\nThe most basic implementation. Use this if you want to limit the number of\ninvalid keys, or otherwise cannot use `AttrDict`\n\nAttrDict\n^^^^^^^^\nAn Attr object that subclasses `dict`. You should be able to use this\nabsolutely anywhere you can use a `dict`. While this is probably the class you\nwant to use, there are a few caveats that follow from this being a `dict` under\nthe hood.\n\nThe `copy` method (which returns a shallow copy of the mapping) returns a\n`dict` instead of an `AttrDict`.\n\nRecursive attribute access results in a shallow copy, so recursive assignment\nwill fail (as you will be writing to a copy of that dictionary)::\n\n    > attr = AttrDict('foo': {})\n    > attr.foo.bar = 'baz'\n    > attr.foo\n    {}\n\nAssignment as keys will still work::\n\n    > attr = AttrDict('foo': {})\n    > attr['foo']['bar'] = 'baz'\n    > attr.foo\n    {'bar': 'baz'}\n\nIf either of these caveats are deal-breakers, or you don't need your object to\nbe a `dict`, consider using `AttrMap` instead.\n\nAttrDefault\n^^^^^^^^^^^\nAt Attr object that behaves like a `defaultdict`. This allows on-the-fly,\nautomatic key creation::\n\n    > attr = AttrDefault(int, {})\n    > attr.foo += 1\n    > attr.foo\n    1\n\nAttrDefault also has a `pass_key` option that passes the supplied key to the\n`default_factory`::\n\n    > attr = AttrDefault(sorted, {}, pass_key=True)\n    > attr.banana\n    ['a', 'a', 'a', 'b', 'n', 'n']\n\nMerging\n-------\nAll three Attr classes can be merged with eachother or other Mappings using the\n``+`` operator. For conflicting keys, the right dict's value will be\npreferred, but in the case of two dictionary values, they will be\nrecursively merged::\n\n    > a = {'foo': 'bar', 'alpha': {'beta': 'a', 'a': 'a'}}\n    > b = {'lorem': 'ipsum', 'alpha': {'bravo': 'b', 'a': 'b'}}\n    > AttrDict(a) + b\n    {'foo': 'bar', 'lorem': 'ipsum', 'alpha': {'beta': 'a', 'bravo': 'b', 'a': 'b'}}\n\nNOTE: AttrDict's add is not commutative, ``a + b != b + a``::\n\n    > a = {'foo': 'bar', 'alpha': {'beta': 'b', 'a': 0}}\n    > b = {'lorem': 'ipsum', 'alpha': {'bravo': 'b', 'a': 1}}\n    > b + AttrDict(a)\n    {'foo': 'bar', 'lorem': 'ipsum', 'alpha': {'beta': 'a', 'bravo': 'b', 'a': }}\n\nSequences\n---------\nBy default, items in non-string Sequences (e.g. lists, tuples) will be\nconverted to AttrDicts::\n\n    > adict = AttrDict({'list': [{'value': 1}, {'value': 2}]})\n    > for element in adict.list:\n    >     element.value\n    1\n    2\n\nThis will not occur if you access the AttrDict as a dictionary::\n\n    > adict = AttrDict({'list': [{'value': 1}, {'value': 2}]})\n    > for element in adict['list']:\n    >     isinstance(element, AttrDict)\n    False\n    False\n\nTo disable this behavior globally, pass the attribute ``recursive=False`` to\nthe constructor::\n\n    > adict = AttrDict({'list': [{'value': 1}, {'value': 2}]}, recursive=False)\n    > for element in adict.list:\n    >     isinstance(element, AttrDict)\n    False\n    False\n\nWhen merging an AttrDict with another mapping, this behavior will be disabled\nif at least one of the merged items is an AttrDict that has set ``recursive``\nto ``False``.\n\nLicense\n=======\nAttrDict is released under a MIT license.\n\n\n","description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/pirofti/AttrDict3","keywords":"","license":"MIT License","maintainer":"","maintainer_email":"","name":"attrdict3","package_url":"https://pypi.org/project/attrdict3/","platform":null,"project_url":"https://pypi.org/project/attrdict3/","project_urls":{"Homepage":"https://github.com/pirofti/AttrDict3"},"provides_extra":null,"release_url":"https://pypi.org/project/attrdict3/2.0.2/","requires_dist":["six"],"requires_python":"","summary":"A dict with attribute-style access","version":"2.0.2","yanked":false,"yanked_reason":null},"last_serial":13371120,"releases":{"2.0.2":[{"comment_text":"","digests":{"blake2b_256":"d73ca7d33166f92b50ca0e154411c351430700c21d8115b93c515ae9137a91f6","md5":"43c9ec6a93632ea55eaa97b73ff24b51","sha256":"a98b72de6a3f20b0997cc7efbba3555af6558ed9a97de4468a3f81cac11595dc"},"downloads":-1,"filename":"attrdict3-2.0.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"43c9ec6a93632ea55eaa97b73ff24b51","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":10071,"upload_time":"2022-04-01T08:21:15","upload_time_iso_8601":"2022-04-01T08:21:15.994227Z","url":"https://files.pythonhosted.org/packages/d7/3c/a7d33166f92b50ca0e154411c351430700c21d8115b93c515ae9137a91f6/attrdict3-2.0.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"9ba9c3f5f498295317c8be62bbe5d1adc1a2864db1720b2a0b4a39e0448d51e4","md5":"316fcb9712df38bbf03ef5bcc57b530c","sha256":"004c171ca1120cc1755701db99d7fa4944afb1e68950434efdaa542513335fe8"},"downloads":-1,"filename":"attrdict3-2.0.2.tar.gz","has_sig":false,"md5_digest":"316fcb9712df38bbf03ef5bcc57b530c","packagetype":"sdist","python_version":"source","requires_python":null,"size":10917,"upload_time":"2022-04-01T08:21:18","upload_time_iso_8601":"2022-04-01T08:21:18.041748Z","url":"https://files.pythonhosted.org/packages/9b/a9/c3f5f498295317c8be62bbe5d1adc1a2864db1720b2a0b4a39e0448d51e4/attrdict3-2.0.2.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"d73ca7d33166f92b50ca0e154411c351430700c21d8115b93c515ae9137a91f6","md5":"43c9ec6a93632ea55eaa97b73ff24b51","sha256":"a98b72de6a3f20b0997cc7efbba3555af6558ed9a97de4468a3f81cac11595dc"},"downloads":-1,"filename":"attrdict3-2.0.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"43c9ec6a93632ea55eaa97b73ff24b51","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":10071,"upload_time":"2022-04-01T08:21:15","upload_time_iso_8601":"2022-04-01T08:21:15.994227Z","url":"https://files.pythonhosted.org/packages/d7/3c/a7d33166f92b50ca0e154411c351430700c21d8115b93c515ae9137a91f6/attrdict3-2.0.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"9ba9c3f5f498295317c8be62bbe5d1adc1a2864db1720b2a0b4a39e0448d51e4","md5":"316fcb9712df38bbf03ef5bcc57b530c","sha256":"004c171ca1120cc1755701db99d7fa4944afb1e68950434efdaa542513335fe8"},"downloads":-1,"filename":"attrdict3-2.0.2.tar.gz","has_sig":false,"md5_digest":"316fcb9712df38bbf03ef5bcc57b530c","packagetype":"sdist","python_version":"source","requires_python":null,"size":10917,"upload_time":"2022-04-01T08:21:18","upload_time_iso_8601":"2022-04-01T08:21:18.041748Z","url":"https://files.pythonhosted.org/packages/9b/a9/c3f5f498295317c8be62bbe5d1adc1a2864db1720b2a0b4a39e0448d51e4/attrdict3-2.0.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
