{"info":{"author":"MadryLab","author_email":"ffcv@mit.edu","bugtrack_url":null,"classifiers":[],"description":"<p align = 'center'>\n<em><b>Fast Forward Computer Vision</b>: train models at a fraction of the cost with accelerated data loading!</em>\n</p>\n<img src='assets/logo.svg' width='100%'/>\n<p align = 'center'>\n<!-- <br /> -->\n[<a href=\"#install-with-anaconda\">install</a>]\n[<a href=\"#quickstart\">quickstart</a>]\n[<a href=\"#features\">features</a>]\n[<a href=\"https://docs.ffcv.io\">docs</a>]\n[<a href=\"https://join.slack.com/t/ffcv-workspace/shared_invite/zt-11olgvyfl-dfFerPxlm6WtmlgdMuw_2A\">support slack</a>]\n[<a href=\"https://ffcv.io\">homepage</a>]\n<br>\nMaintainers:\n<a href=\"https://twitter.com/gpoleclerc\">Guillaume Leclerc</a>,\n<a href=\"https://twitter.com/andrew_ilyas\">Andrew Ilyas</a> and\n<a href=\"https://twitter.com/logan_engstrom\">Logan Engstrom</a>\n</p>\n\n`ffcv` is a drop-in data loading system that dramatically increases data throughput in model training:\n\n- [Train an ImageNet model](#prepackaged-computer-vision-benchmarks)\non one GPU in 35 minutes (98¢/model on AWS)\n- [Train a CIFAR-10 model](https://docs.ffcv.io/ffcv_examples/cifar10.html)\non one GPU in 36 seconds (2¢/model on AWS)\n- Train a `$YOUR_DATASET` model `$REALLY_FAST` (for `$WAY_LESS`)\n\nKeep your training algorithm the same, just replace the data loader! Look at these speedups:\n\n<img src=\"assets/headline.svg\" width='830px'/>\n\n`ffcv` also comes prepacked with [fast, simple code](https://github.com/libffcv/imagenet-example) for [standard vision benchmarks]((https://docs.ffcv.io/benchmarks.html)):\n\n<img src=\"docs/_static/perf_scatterplot.svg\" width='830px'/>\n\n## Installation\n### Linux\n```\nconda create -y -n ffcv python=3.9 cupy pkg-config compilers libjpeg-turbo opencv pytorch torchvision cudatoolkit=11.3 numba -c pytorch -c conda-forge\nconda activate ffcv\npip install ffcv\n```\nTroubleshooting note: if the above commands result in a package conflict error, try running ``conda config --env --set channel_priority flexible`` in the environment and rerunning the installation command.\n\n### Windows\n* Install <a href=\"https://opencv.org/releases/\">opencv4</a>\n  * Add `..../opencv/build/x64/vc15/bin` to PATH environment variable\n* Install <a href=\"https://sourceforge.net/projects/libjpeg-turbo/files/\">libjpeg-turbo</a>, download libjpeg-turbo-x.x.x-vc64.exe, not gcc64\n  * Add `..../libjpeg-turbo64/bin` to PATH environment variable\n* Install <a href=\"https://www.sourceware.org/pthreads-win32/\">pthread</a>, download last release.zip\n  * After unzip, rename Pre-build.2 folder to pthread\n  * Open `pthread/include/pthread.h`, and add the code below to the top of the file.  \n  ```cpp\n  #define HAVE_STRUCT_TIMESPEC\n  ```\n  * Add `..../pthread/dll` to PATH environment variable\n* Install <a href=\"https://docs.cupy.dev/en/stable/install.html#installing-cupy\">cupy</a> depending on your CUDA Toolkit version.\n* `pip install ffcv`\n\n## Citation\nIf you use FFCV, please cite it as:\n\n```\n@misc{leclerc2022ffcv,\n    author = {Guillaume Leclerc and Andrew Ilyas and Logan Engstrom and Sung Min Park and Hadi Salman and Aleksander Madry},\n    title = {{FFCV}: Accelerating Training by Removing Data Bottlenecks},\n    year = {2022},\n    howpublished = {\\url{https://github.com/libffcv/ffcv/}},\n    note = {commit xxxxxxx}\n}\n```\n(Make sure to replace xxxxxxx above with the hash of the commit used!)\n\n## Quickstart\nAccelerate <a href=\"#features\">*any*</a> learning system with `ffcv`.\nFirst,\nconvert your dataset into `ffcv` format (`ffcv` converts both indexed PyTorch datasets and\n<a href=\"https://github.com/webdataset/webdataset\">WebDatasets</a>):\n```python\nfrom ffcv.writer import DatasetWriter\nfrom ffcv.fields import RGBImageField, IntField\n\n# Your dataset (`torch.utils.data.Dataset`) of (image, label) pairs\nmy_dataset = make_my_dataset()\nwrite_path = '/output/path/for/converted/ds.beton'\n\n# Pass a type for each data field\nwriter = DatasetWriter(write_path, {\n    # Tune options to optimize dataset size, throughput at train-time\n    'image': RGBImageField(max_resolution=256, jpeg_quality=jpeg_quality),\n    'label': IntField()\n})\n\n# Write dataset\nwriter.from_indexed_dataset(my_dataset)\n```\nThen replace your old loader with the `ffcv` loader at train time (in PyTorch,\nno other changes required!):\n```python\nfrom ffcv.loader import Loader, OrderOption\nfrom ffcv.transforms import ToTensor, ToDevice, ToTorchImage, Cutout\nfrom ffcv.fields.decoders import IntDecoder, RandomResizedCropRGBImageDecoder\n\n# Random resized crop\ndecoder = RandomResizedCropRGBImageDecoder((224, 224))\n\n# Data decoding and augmentation\nimage_pipeline = [decoder, Cutout(), ToTensor(), ToTorchImage(), ToDevice(0)]\nlabel_pipeline = [IntDecoder(), ToTensor(), ToDevice(0)]\n\n# Pipeline for each data field\npipelines = {\n    'image': image_pipeline,\n    'label': label_pipeline\n}\n\n# Replaces PyTorch data loader (`torch.utils.data.Dataloader`)\nloader = Loader(write_path, batch_size=bs, num_workers=num_workers,\n                order=OrderOption.RANDOM, pipelines=pipelines)\n\n# rest of training / validation proceeds identically\nfor epoch in range(epochs):\n    ...\n```\n[See here](https://docs.ffcv.io/basics.html) for a more detailed guide to deploying `ffcv` for your dataset.\n\n## Prepackaged Computer Vision Benchmarks\nFrom gridding to benchmarking to fast research iteration, there are many reasons\nto want faster model training. Below we present premade codebases for training\non ImageNet and CIFAR, including both (a) extensible codebases and (b)\nnumerous premade training configurations.\n\n### ImageNet\nWe provide a self-contained script for training ImageNet <it>fast</it>.\nAbove we plot the training time versus\naccuracy frontier, and the dataloading speeds, for 1-GPU ResNet-18 and 8-GPU\nResNet-50 alongside a few baselines.\n\n\n| Link to Config                                                                                                                         |   top_1 |   top_5 |   # Epochs |   Time (mins) | Architecture   | Setup    |\n|:---------------------------------------------------------------------------------------------------------------------------------------|--------:|--------:|-----------:|--------------:|:---------------|:---------|\n| <a href='https://github.com/libffcv/ffcv-imagenet/tree/main/rn50_configs/rn50_88_epochs.yaml'>Link</a> | 0.784 | 0.941  |         88 |       77.2 | ResNet-50      | 8 x A100 |\n| <a href='https://github.com/libffcv/ffcv-imagenet/tree/main/rn50_configs/rn50_56_epochs.yaml'>Link</a> | 0.780 | 0.937 |         56 |       49.4 | ResNet-50      | 8 x A100 |\n| <a href='https://github.com/libffcv/ffcv-imagenet/tree/main/rn50_configs/rn50_40_epochs.yaml'>Link</a> | 0.772 | 0.932 |         40 |       35.6 | ResNet-50      | 8 x A100 |\n| <a href='https://github.com/libffcv/ffcv-imagenet/tree/main/rn50_configs/rn50_32_epochs.yaml'>Link</a> | 0.766 | 0.927 |         32 |       28.7 | ResNet-50      | 8 x A100 |\n| <a href='https://github.com/libffcv/ffcv-imagenet/tree/main/rn50_configs/rn50_24_epochs.yaml'>Link</a> | 0.756 | 0.921 |         24 |       21.7  | ResNet-50      | 8 x A100 |\n| <a href='https://github.com/libffcv/ffcv-imagenet/tree/main/rn50_configs/rn50_16_epochs.yaml'>Link</a> | 0.738 | 0.908 |         16 |       14.9 | ResNet-50      | 8 x A100 |\n| <a href='https://github.com/libffcv/ffcv-imagenet/tree/main/rn18_configs/rn18_88_epochs.yaml'>Link</a> | 0.724 | 0.903   |         88 |      187.3  | ResNet-18      | 1 x A100 |\n| <a href='https://github.com/libffcv/ffcv-imagenet/tree/main/rn18_configs/rn18_56_epochs.yaml'>Link</a> | 0.713  | 0.899 |         56 |      119.4   | ResNet-18      | 1 x A100 |\n| <a href='https://github.com/libffcv/ffcv-imagenet/tree/main/rn18_configs/rn18_40_epochs.yaml'>Link</a> | 0.706 | 0.894 |         40 |       85.5 | ResNet-18      | 1 x A100 |\n| <a href='https://github.com/libffcv/ffcv-imagenet/tree/main/rn18_configs/rn18_32_epochs.yaml'>Link</a> | 0.700 | 0.889 |         32 |       68.9   | ResNet-18      | 1 x A100 |\n| <a href='https://github.com/libffcv/ffcv-imagenet/tree/main/rn18_configs/rn18_24_epochs.yaml'>Link</a> | 0.688  | 0.881 |         24 |       51.6 | ResNet-18      | 1 x A100 |\n| <a href='https://github.com/libffcv/ffcv-imagenet/tree/main/rn18_configs/rn18_16_epochs.yaml'>Link</a> | 0.669 | 0.868 |         16 |       35.0 | ResNet-18      | 1 x A100 |\n\n**Train your own ImageNet models!** You can <a href=\"https://github.com/libffcv/imagenet-example/tree/main\">use our training script and premade configurations</a> to train any model seen on the above graphs.\n\n### CIFAR-10\nWe also include premade code for efficient training on CIFAR-10 in the `examples/`\ndirectory, obtaining 93\\% top1 accuracy in 36 seconds on a single A100 GPU\n(without optimizations such as MixUp, Ghost BatchNorm, etc. which have the\npotential to raise the accuracy even further). You can find the training script\n<a href=\"https://github.com/libffcv/ffcv/tree/main/examples/cifar\">here</a>.\n\n## Features\n<img src='docs/_static/clippy-transparent-2.png' width='100%'/>\n\nComputer vision or not, FFCV can help make training faster in a variety of\nresource-constrained settings!\nOur <a href=\"https://docs.ffcv.io/performance_guide.html\">performance guide</a>\nhas a more detailed account of the ways in which FFCV can adapt to different\nperformance bottlenecks.\n\n\n- **Plug-and-play with any existing training code**: Rather than changing\n  aspects of model training itself, FFCV focuses on removing *data bottlenecks*,\n  which turn out to be a problem everywhere from neural network training to\n  linear regression. This means that:\n\n    - FFCV can be introduced into any existing training code in just a few\n      lines of code (e.g., just swapping out the data loader and optionally the\n      augmentation pipeline);\n    - You don't have to change the model itself to make it faster (e.g., feel\n      free to analyze models *without* CutMix, Dropout, momentum scheduling, etc.);\n    - FFCV can speed up a lot more beyond just neural network training---in\n      fact, the more data-bottlenecked the application (e.g., linear regression,\n      bulk inference, etc.), the faster FFCV will make it!\n\n  See our [Getting started](https://docs.ffcv.io/basics.html) guide,\n  [Example walkthroughs](https://docs.ffcv.io/examples.html), and\n  [Code examples](https://github.com/libffcv/ffcv/tree/main/examples)\n  to see how easy it is to get started!\n- **Fast data processing without the pain**: FFCV automatically handles data\n  reading, pre-fetching, caching, and transfer between devices in an extremely\n  efficiently way, so that users don't have to think about it.\n- **Automatically fused-and-compiled data processing**: By either using\n  [pre-written](https://docs.ffcv.io/api/transforms.html) FFCV transformations\n  or\n  [easily writing custom ones](https://docs.ffcv.io/ffcv_examples/custom_transforms.html),\n  users can\n  take advantage of FFCV's compilation and pipelining abilities, which will\n  automatically fuse and compile simple Python augmentations to machine code\n  using [Numba](https://numba.pydata.org), and schedule them asynchronously to avoid\n  loading delays.\n- **Load data fast from RAM, SSD, or networked disk**: FFCV exposes\n  user-friendly options that can be adjusted based on the resources\n  available. For example, if a dataset fits into memory, FFCV can cache it\n  at the OS level and ensure that multiple concurrent processes all get fast\n  data access. Otherwise, FFCV can use fast process-level caching and will\n  optimize data loading to minimize the underlying number of disk reads. See\n  [The Bottleneck Doctor](https://docs.ffcv.io/bottleneck_doctor.html)\n  guide for more information.\n- **Training multiple models per GPU**: Thanks to fully asynchronous\n  thread-based data loading, you can now interleave training multiple models on\n  the same GPU efficiently, without any data-loading overhead. See\n  [this guide](https://docs.ffcv.io/parameter_tuning.html) for more info.\n- **Dedicated tools for image handling**: All the features above work are\n  equally applicable to all sorts of machine learning models, but FFCV also\n  offers some vision-specific features, such as fast JPEG encoding and decoding,\n  storing datasets as mixtures of raw and compressed images to trade off I/O\n  overhead and compute overhead, etc. See the\n  [Working with images](https://docs.ffcv.io/working_with_images.html) guide for\n  more information.\n\n# Contributors\n\n- Guillaume Leclerc\n- Logan Engstrom\n- Andrew Ilyas\n- Sam Park\n- Hadi Salman\n\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/libffcv/ffcv","keywords":"","license":"","maintainer":"","maintainer_email":"","name":"ffcv","package_url":"https://pypi.org/project/ffcv/","platform":null,"project_url":"https://pypi.org/project/ffcv/","project_urls":{"Homepage":"https://github.com/libffcv/ffcv"},"provides_extra":null,"release_url":"https://pypi.org/project/ffcv/1.0.2/","requires_dist":null,"requires_python":"","summary":"FFCV: Fast Forward Computer Vision","version":"1.0.2","yanked":false,"yanked_reason":null},"last_serial":23097476,"releases":{"0.0.1":[{"comment_text":"","digests":{"blake2b_256":"4f559b06a72c29710110387c3af33eb1a9d6e5d9d5781d5b2850a3ad202942d2","md5":"85599c3bde9a51580bdf2a4ebd2b4a8d","sha256":"5246dbbbc0a3bcf788783d413292d8bede455a08ad0fa9c29736eca85b577b26"},"downloads":-1,"filename":"ffcv-0.0.1.tar.gz","has_sig":false,"md5_digest":"85599c3bde9a51580bdf2a4ebd2b4a8d","packagetype":"sdist","python_version":"source","requires_python":null,"size":49073,"upload_time":"2022-01-14T20:42:39","upload_time_iso_8601":"2022-01-14T20:42:39.641437Z","url":"https://files.pythonhosted.org/packages/4f/55/9b06a72c29710110387c3af33eb1a9d6e5d9d5781d5b2850a3ad202942d2/ffcv-0.0.1.tar.gz","yanked":false,"yanked_reason":null}],"0.0.2":[{"comment_text":"","digests":{"blake2b_256":"375a15f9a2f88c07d41a1830e55b133bb2f96bb3a5af77d125d35bed3f5c6535","md5":"7cb23c6f9f6c5c4d6f87789496dc142f","sha256":"549c78dce66edc825118bab640eac9032417bcd8a06609b9eaf2d22ef8e8a52e"},"downloads":-1,"filename":"ffcv-0.0.2.tar.gz","has_sig":false,"md5_digest":"7cb23c6f9f6c5c4d6f87789496dc142f","packagetype":"sdist","python_version":"source","requires_python":null,"size":53764,"upload_time":"2022-01-14T20:45:08","upload_time_iso_8601":"2022-01-14T20:45:08.132203Z","url":"https://files.pythonhosted.org/packages/37/5a/15f9a2f88c07d41a1830e55b133bb2f96bb3a5af77d125d35bed3f5c6535/ffcv-0.0.2.tar.gz","yanked":false,"yanked_reason":null}],"0.0.3":[{"comment_text":"","digests":{"blake2b_256":"05cb6cb4162ff23173ed417f1a1faed150fdc923b6a2dfa349d50172d6115108","md5":"0a2e97798d77cc160ea840540c8dedd3","sha256":"0e4ba55d65294c820a7395d435564e621e13df4193d94d884b2a6096b19564cf"},"downloads":-1,"filename":"ffcv-0.0.3.tar.gz","has_sig":false,"md5_digest":"0a2e97798d77cc160ea840540c8dedd3","packagetype":"sdist","python_version":"source","requires_python":null,"size":53574,"upload_time":"2022-01-28T20:40:22","upload_time_iso_8601":"2022-01-28T20:40:22.927862Z","url":"https://files.pythonhosted.org/packages/05/cb/6cb4162ff23173ed417f1a1faed150fdc923b6a2dfa349d50172d6115108/ffcv-0.0.3.tar.gz","yanked":false,"yanked_reason":null}],"0.0.3rc1":[{"comment_text":"","digests":{"blake2b_256":"f81ce6229985bfd8c78d54d3246f8b4c4c84274c6a7eb4d74f677708b777ea6f","md5":"bba262ac990a4aaf8707d3a8737909a8","sha256":"7e3d262a70861df1186bb4c83bd0e95e646db8d89bb016648f1413d8bbd421ac"},"downloads":-1,"filename":"ffcv-0.0.3rc1.tar.gz","has_sig":false,"md5_digest":"bba262ac990a4aaf8707d3a8737909a8","packagetype":"sdist","python_version":"source","requires_python":null,"size":53496,"upload_time":"2022-01-24T02:10:30","upload_time_iso_8601":"2022-01-24T02:10:30.239850Z","url":"https://files.pythonhosted.org/packages/f8/1c/e6229985bfd8c78d54d3246f8b4c4c84274c6a7eb4d74f677708b777ea6f/ffcv-0.0.3rc1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0":[{"comment_text":"","digests":{"blake2b_256":"7c926458839298c328f5c940b0cb6d149c0f43e892d5303a9f70061eb7449b35","md5":"394978432018373b324cb54b97add572","sha256":"65447194a056a4c3e61f6f758ddf855716e212df5d125f00b941dbe7f0070348"},"downloads":-1,"filename":"ffcv-1.0.0.tar.gz","has_sig":false,"md5_digest":"394978432018373b324cb54b97add572","packagetype":"sdist","python_version":"source","requires_python":null,"size":55573,"upload_time":"2023-03-03T01:13:38","upload_time_iso_8601":"2023-03-03T01:13:38.947368Z","url":"https://files.pythonhosted.org/packages/7c/92/6458839298c328f5c940b0cb6d149c0f43e892d5303a9f70061eb7449b35/ffcv-1.0.0.tar.gz","yanked":true,"yanked_reason":"Bug"}],"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"4945eea9cd05e4a16125df56f880cf4cff5cf1cfc2b9f2727ec1eacb4ab2c20f","md5":"9b69f7585b5c64f1e400a002c03ccb9e","sha256":"6a8faa3264b0fc17bb4d8ef874a921aeb6579ddf66f267c0429add3d8de1b15e"},"downloads":-1,"filename":"ffcv-1.0.1.tar.gz","has_sig":false,"md5_digest":"9b69f7585b5c64f1e400a002c03ccb9e","packagetype":"sdist","python_version":"source","requires_python":null,"size":2579168,"upload_time":"2023-03-05T04:58:06","upload_time_iso_8601":"2023-03-05T04:58:06.386476Z","url":"https://files.pythonhosted.org/packages/49/45/eea9cd05e4a16125df56f880cf4cff5cf1cfc2b9f2727ec1eacb4ab2c20f/ffcv-1.0.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.2":[{"comment_text":"","digests":{"blake2b_256":"db95de56ae69d42c65fe04e408cd27a3e62a925fb576f0f2330a2b3588e488d5","md5":"c721fb2fd094142f06cee2aee11908dd","sha256":"42766a487c8a659b543d070f24732c4b65aab8d96980f5792c63e91e55511f00"},"downloads":-1,"filename":"ffcv-1.0.2.tar.gz","has_sig":false,"md5_digest":"c721fb2fd094142f06cee2aee11908dd","packagetype":"sdist","python_version":"source","requires_python":null,"size":2579958,"upload_time":"2023-03-05T05:42:51","upload_time_iso_8601":"2023-03-05T05:42:51.591603Z","url":"https://files.pythonhosted.org/packages/db/95/de56ae69d42c65fe04e408cd27a3e62a925fb576f0f2330a2b3588e488d5/ffcv-1.0.2.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"db95de56ae69d42c65fe04e408cd27a3e62a925fb576f0f2330a2b3588e488d5","md5":"c721fb2fd094142f06cee2aee11908dd","sha256":"42766a487c8a659b543d070f24732c4b65aab8d96980f5792c63e91e55511f00"},"downloads":-1,"filename":"ffcv-1.0.2.tar.gz","has_sig":false,"md5_digest":"c721fb2fd094142f06cee2aee11908dd","packagetype":"sdist","python_version":"source","requires_python":null,"size":2579958,"upload_time":"2023-03-05T05:42:51","upload_time_iso_8601":"2023-03-05T05:42:51.591603Z","url":"https://files.pythonhosted.org/packages/db/95/de56ae69d42c65fe04e408cd27a3e62a925fb576f0f2330a2b3588e488d5/ffcv-1.0.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
