{"info":{"author":null,"author_email":"EleutherAI <contact@eleuther.ai>","bugtrack_url":null,"classifiers":["Development Status :: 3 - Alpha","License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python :: 3"],"description":"# Language Model Evaluation Harness\n\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.10256836.svg)](https://doi.org/10.5281/zenodo.10256836)\n\n## Announcement\n**A new v0.4.0 release of lm-evaluation-harness is available** !\n\nNew updates and features include:\n\n- Internal refactoring\n- Config-based task creation and configuration\n- Easier import and sharing of externally-defined task config YAMLs\n- Support for Jinja2 prompt design, easy modification of prompts + prompt imports from Promptsource\n- More advanced configuration options, including output post-processing, answer extraction, and multiple LM generations per document, configurable fewshot settings, and more\n- Speedups and new modeling libraries supported, including: faster data-parallel HF model usage, vLLM support, MPS support with HuggingFace, and more\n- Logging and usability changes\n- New tasks including CoT BIG-Bench-Hard, Belebele, user-defined task groupings, and more\n\nPlease see our updated documentation pages in `docs/` for more details.\n\nDevelopment will be continuing on the `main` branch, and we encourage you to give us feedback on what features are desired and how to improve the library further, or ask questions, either in issues or PRs on GitHub, or in the [EleutherAI discord](https://discord.gg/eleutherai)!\n\n## Overview\n\nThis project provides a unified framework to test generative language models on a large number of different evaluation tasks.\n\n**Features:**\n- Over 60 standard academic benchmarks for LLMs, with hundreds of subtasks and variants implemented.\n- Support for models loaded via [transformers](https://github.com/huggingface/transformers/) (including quantization via [AutoGPTQ](https://github.com/PanQiWei/AutoGPTQ)), [GPT-NeoX](https://github.com/EleutherAI/gpt-neox), and [Megatron-DeepSpeed](https://github.com/microsoft/Megatron-DeepSpeed/), with a flexible tokenization-agnostic interface.\n- Support for fast and memory-efficient inference with [vLLM](https://github.com/vllm-project/vllm).\n- Support for commercial APIs including [OpenAI](https://openai.com), and [TextSynth](https://textsynth.com/).\n- Support for evaluation on adapters (e.g. LoRA) supported in [HuggingFace's PEFT library](https://github.com/huggingface/peft).\n- Support for local models and benchmarks.\n- Evaluation with publicly available prompts ensures reproducibility and comparability between papers.\n- Easy support for custom prompts and evaluation metrics.\n\nThe Language Model Evaluation Harness is the backend for 🤗 Hugging Face's popular [Open LLM Leaderboard](https://huggingface.co/spaces/HuggingFaceH4/open_llm_leaderboard), has been used in [hundreds of papers](https://scholar.google.com/scholar?oi=bibs&hl=en&authuser=2&cites=15052937328817631261,4097184744846514103,1520777361382155671,17476825572045927382,18443729326628441434,14801318227356878622,7890865700763267262,12854182577605049984,15641002901115500560,5104500764547628290), and is used internally by dozens of organizations including NVIDIA, Cohere, BigScience, BigCode, Nous Research, and Mosaic ML.\n\n## Install\n\nTo install the `lm-eval` package from the github repository, run:\n\n```bash\ngit clone https://github.com/EleutherAI/lm-evaluation-harness\ncd lm-evaluation-harness\npip install -e .\n```\n\nWe also provide a number of optional dependencies for extended functionality. A detailed table is available at the end of this document.\n\n## Basic Usage\n### User Guide\n\nA user guide detailing the full list of supported arguments is provided [here](./docs/interface.md), and on the terminal by calling `lm_eval -h`. Alternatively, you can use `lm-eval` instead of `lm_eval`.\n\nA list of supported tasks (or groupings of tasks) can be viewed with `lm-eval --tasks list`. Task descriptions and links to corresponding subfolders are provided [here](./lm_eval/tasks/README.md).\n\n### Hugging Face `transformers`\n\nTo evaluate a model hosted on the [HuggingFace Hub](https://huggingface.co/models) (e.g. GPT-J-6B) on `hellaswag` you can use the following command (this assumes you are using a CUDA-compatible GPU):\n\n```bash\nlm_eval --model hf \\\n    --model_args pretrained=EleutherAI/gpt-j-6B \\\n    --tasks hellaswag \\\n    --device cuda:0 \\\n    --batch_size 8\n```\n\nAdditional arguments can be provided to the model constructor using the `--model_args` flag. Most notably, this supports the common practice of using the `revisions` feature on the Hub to store partially trained checkpoints, or to specify the datatype for running a model:\n\n```bash\nlm_eval --model hf \\\n    --model_args pretrained=EleutherAI/pythia-160m,revision=step100000,dtype=\"float\" \\\n    --tasks lambada_openai,hellaswag \\\n    --device cuda:0 \\\n    --batch_size 8\n```\n\nModels that are loaded via both `transformers.AutoModelForCausalLM` (autoregressive, decoder-only GPT style models) and `transformers.AutoModelForSeq2SeqLM` (such as encoder-decoder models like T5) in Huggingface are supported.\n\nBatch size selection can be automated by setting the  ```--batch_size``` flag to ```auto```. This will perform automatic detection of the largest batch size that will fit on your device. On tasks where there is a large difference between the longest and shortest example, it can be helpful to periodically recompute the largest batch size, to gain a further speedup. To do this, append ```:N``` to above flag to automatically recompute the largest batch size ```N``` times. For example, to recompute the batch size 4 times, the command would be:\n\n```bash\nlm_eval --model hf \\\n    --model_args pretrained=EleutherAI/pythia-160m,revision=step100000,dtype=\"float\" \\\n    --tasks lambada_openai,hellaswag \\\n    --device cuda:0 \\\n    --batch_size auto:4\n```\n\n> [!Note]\n> Just like you can provide a local path to `transformers.AutoModel`, you can also provide a local path to `lm_eval` via `--model_args pretrained=/path/to/model`\n\n#### Multi-GPU Evaluation with Hugging Face `accelerate`\n\nWe support two main ways of using Hugging Face's [accelerate 🚀](https://github.com/huggingface/accelerate) library for multi-GPU evaluation.\n\nTo perform *data-parallel evaluation* (where each GPU loads a **separate full copy** of the model), we leverage the `accelerate` launcher as follows:\n\n```\naccelerate launch -m lm_eval --model hf \\\n    --tasks lambada_openai,arc_easy \\\n    --batch_size 16\n```\n(or via `accelerate launch --no-python lm_eval`).\n\nFor cases where your model can fit on a single GPU, this allows you to evaluate on K GPUs K times faster than on one.\n\n**WARNING**: This setup does not work with FSDP model sharding, so in `accelerate config` FSDP must be disabled, or the NO_SHARD FSDP option must be used.\n\nThe second way of using `accelerate` for multi-GPU evaluation is when your model is *too large to fit on a single GPU.*\n\nIn this setting, run the library *outside of the `accelerate` launcher*, but passing `parallelize=True` to `--model_args` as follows:\n\n```\nlm_eval --model hf \\\n    --tasks lambada_openai,arc_easy \\\n    --model_args parallelize=True \\\n    --batch_size 16\n```\n\nThis means that your model's weights will be split across all available GPUs.\n\nFor more advanced users or even larger models, we allow for the following arguments when `parallelize=True` as well:\n- `device_map_option`: How to split model weights across available GPUs. defaults to \"auto\".\n- `max_memory_per_gpu`: the max GPU memory to use per GPU in loading the model.\n- `max_cpu_memory`: the max amount of CPU memory to use when offloading the model weights to RAM.\n- `offload_folder`: a folder where model weights will be offloaded to disk if needed.\n\nThese two options (`accelerate launch` and `parallelize=True`) are mutually exclusive.\n\n**Note: we do not currently support multi-node evaluations natively, and advise using either an externally hosted server to run inference requests against, or creating a custom integration with your distributed framework [as is done for the GPT-NeoX library](https://github.com/EleutherAI/gpt-neox/blob/main/eval_tasks/eval_adapter.py).**\n\n### NVIDIA `nemo` models\n\n[NVIDIA NeMo Framework](https://github.com/NVIDIA/NeMo) is a generative AI framework built for researchers and pytorch developers working on language models.\n\nTo evaluate a `nemo` model, start by installing NeMo following [the documentation](https://github.com/NVIDIA/NeMo?tab=readme-ov-file#installation). We highly recommended to use the NVIDIA PyTorch or NeMo container, especially if having issues installing Apex or any other dependencies (see [latest released containers](https://github.com/NVIDIA/NeMo/releases)). Please also install the lm evaluation harness library following the instructions in [the Install section](https://github.com/EleutherAI/lm-evaluation-harness/tree/main?tab=readme-ov-file#install).\n\nNeMo models can be obtained through [NVIDIA NGC Catalog](https://catalog.ngc.nvidia.com/models) or in [NVIDIA's Hugging Face page](https://huggingface.co/nvidia). In [NVIDIA NeMo Framework](https://github.com/NVIDIA/NeMo/tree/main/scripts/nlp_language_modeling) there are conversion scripts to convert the `hf` checkpoints of popular models like llama, falcon, mixtral or mpt to `nemo`.\n\nRun a `nemo` model on one GPU:\n```bash\nlm_eval --model nemo_lm \\\n    --model_args path=<path_to_nemo_model> \\\n    --tasks hellaswag \\\n    --batch_size 32\n```\n\nIt is recommended to unpack the `nemo` model to avoid the unpacking inside the docker container - it may overflow disk space. For that you can run:\n\n```\nmkdir MY_MODEL\ntar -xvf MY_MODEL.nemo -c MY_MODEL\n```\n\n#### Multi-GPU evaluation with NVIDIA `nemo` models\n\nBy default, only one GPU is used. But we do support either data replication or tensor/pipeline parallelism during evaluation, on one node.\n\n1) To enable data replication, set the `model_args` of `devices` to the number of data replicas to run. For example, the command to run 8 data replicas over 8 GPUs is:\n```bash\ntorchrun --nproc-per-node=8 --no-python lm_eval \\\n    --model nemo_lm \\\n    --model_args path=<path_to_nemo_model>,devices=8 \\\n    --tasks hellaswag \\\n    --batch_size 32\n```\n\n2) To enable tensor and/or pipeline parallelism, set the `model_args` of `tensor_model_parallel_size` and/or `pipeline_model_parallel_size`. In addition, you also have to set up `devices` to be equal to the product of `tensor_model_parallel_size` and/or `pipeline_model_parallel_size`. For example, the command to use one node of 4 GPUs with tensor parallelism of 2 and pipeline parallelism of 2 is:\n```bash\ntorchrun --nproc-per-node=4 --no-python lm_eval \\\n    --model nemo_lm \\\n    --model_args path=<path_to_nemo_model>,devices=4,tensor_model_parallel_size=2,pipeline_model_parallel_size=2 \\\n    --tasks hellaswag \\\n    --batch_size 32\n```\nNote that it is recommended to substitute the `python` command by `torchrun --nproc-per-node=<number of devices> --no-python` to facilitate loading the model into the GPUs. This is especially important for large checkpoints loaded into multiple GPUs.\n\nNot supported yet: multi-node evaluation and combinations of data replication with tensor or pipeline parallelism.\n\n### Tensor + Data Parallel and Optimized Inference with `vLLM`\n\nWe also support vLLM for faster inference on [supported model types](https://docs.vllm.ai/en/latest/models/supported_models.html), especially faster when splitting a model across multiple GPUs. For single-GPU or multi-GPU — tensor parallel, data parallel, or a combination of both — inference, for example:\n\n```bash\nlm_eval --model vllm \\\n    --model_args pretrained={model_name},tensor_parallel_size={GPUs_per_model},dtype=auto,gpu_memory_utilization=0.8,data_parallel_size={model_replicas} \\\n    --tasks lambada_openai \\\n    --batch_size auto\n```\nTo use vllm, do `pip install lm_eval[vllm]`. For a full list of supported vLLM configurations, please reference our [vLLM integration](https://github.com/EleutherAI/lm-evaluation-harness/blob/e74ec966556253fbe3d8ecba9de675c77c075bce/lm_eval/models/vllm_causallms.py) and the vLLM documentation.\n\nvLLM occasionally differs in output from Huggingface. We treat Huggingface as the reference implementation, and provide a [script](./scripts/model_comparator.py) for checking the validity of vllm results against HF.\n\n> [!Tip]\n> For fastest performance, we recommend using `--batch_size auto` for vLLM whenever possible, to leverage its continuous batching functionality!\n\n> [!Tip]\n> Passing `max_model_len=4096` or some other reasonable default to vLLM through model args may cause speedups or prevent out-of-memory errors when trying to use auto batch size, such as for Mistral-7B-v0.1 which defaults to a maximum length of 32k.\n\n### Model APIs and Inference Servers\n\nOur library also supports the evaluation of models served via several commercial APIs, and we hope to implement support for the most commonly used performant local/self-hosted inference servers.\n\nTo call a hosted model, use:\n\n```bash\nexport OPENAI_API_KEY=YOUR_KEY_HERE\nlm_eval --model openai-completions \\\n    --model_args model=davinci \\\n    --tasks lambada_openai,hellaswag\n```\n\nWe also support using your own local inference server with servers that mirror the OpenAI Completions and ChatCompletions APIs.\n\n```bash\nlm_eval --model local-chat-completions --tasks gsm8k --model_args model=facebook/opt-125m,base_url=http://{yourip}:8000/v1\n```\nNote that for externally hosted models, configs such as `--device` and `--batch_size` should not be used and do not function. Just like you can use `--model_args` to pass arbitrary arguments to the model constructor for local models, you can use it to pass arbitrary arguments to the model API for hosted models. See the documentation of the hosting service for information on what arguments they support.\n\n| API or Inference Server                                                                                                   | Implemented?                    | `--model <xxx>` name                                                | Models supported:                                                                             | Request Types:                                             |\n|---------------------------------------------------------------------------------------------------------------------------|---------------------------------|---------------------------------------------------------------------|-----------------------------------------------------------------------------------------------|------------------------------------------------------------|\n| OpenAI Completions                                                                                                        | :heavy_check_mark:              | `openai-completions`, `local-completions` | All OpenAI Completions API models                                            | `generate_until`, `loglikelihood`, `loglikelihood_rolling` |\n| OpenAI ChatCompletions                                                                                                    | :heavy_check_mark:        | `openai-chat-completions`, `local-chat-completions`                                                               | [All ChatCompletions API models](https://platform.openai.com/docs/guides/gpt)                 | `generate_until` (no logprobs)                             |\n| Anthropic                                                                                                                 | :heavy_check_mark:              | `anthropic`                                                         | [Supported Anthropic Engines](https://docs.anthropic.com/claude/reference/selecting-a-model)  | `generate_until` (no logprobs)                             |\n| Anthropic Chat                                                                                                                | :heavy_check_mark:              | `anthropic-chat`, `anthropic-chat-completions`                                                         | [Supported Anthropic Engines](https://docs.anthropic.com/claude/docs/models-overview)  | `generate_until` (no logprobs)                             |\n| Textsynth                                                                                                                 | :heavy_check_mark:                   | `textsynth`                                                         | [All supported engines](https://textsynth.com/documentation.html#engines)                     | `generate_until`, `loglikelihood`, `loglikelihood_rolling` |\n| Cohere                                                                                                                    | [:hourglass: - blocked on Cohere API bug](https://github.com/EleutherAI/lm-evaluation-harness/pull/395) | N/A                                                                 | [All `cohere.generate()` engines](https://docs.cohere.com/docs/models)                        | `generate_until`, `loglikelihood`, `loglikelihood_rolling` |\n| [Llama.cpp](https://github.com/ggerganov/llama.cpp) (via [llama-cpp-python](https://github.com/abetlen/llama-cpp-python)) | :heavy_check_mark:              | `gguf`, `ggml`                                                      | [All models supported by llama.cpp](https://github.com/ggerganov/llama.cpp)                   | `generate_until`, `loglikelihood`, (perplexity evaluation not yet implemented) |\n| vLLM                                                                                                                      | :heavy_check_mark:       | `vllm`                                                              | [Most HF Causal Language Models](https://docs.vllm.ai/en/latest/models/supported_models.html) | `generate_until`, `loglikelihood`, `loglikelihood_rolling` |\n| Mamba                       | :heavy_check_mark:       | `mamba_ssm`                                                                      | [Mamba architecture Language Models via the `mamba_ssm` package](https://huggingface.co/state-spaces) | `generate_until`, `loglikelihood`, `loglikelihood_rolling`                             |\n| Huggingface Optimum (Causal LMs)    | ✔️         | `openvino`                                 |     Any decoder-only AutoModelForCausalLM converted with Huggingface Optimum into OpenVINO™ Intermediate Representation (IR) format                           |  `generate_until`, `loglikelihood`, `loglikelihood_rolling`                         | ...                                                      |\n| Neuron via AWS Inf2 (Causal LMs)    | ✔️         | `neuronx`                                 |     Any decoder-only AutoModelForCausalLM supported to run on [huggingface-ami image for inferentia2](https://aws.amazon.com/marketplace/pp/prodview-gr3e6yiscria2)                         |  `generate_until`, `loglikelihood`, `loglikelihood_rolling`                         | ...                                                      |\n| [Neural Magic DeepSparse](https://github.com/neuralmagic/deepsparse)    | ✔️         | `deepsparse`                                 |     Any LM from [SparseZoo](https://sparsezoo.neuralmagic.com/) or on [HF Hub with the \"deepsparse\" tag](https://huggingface.co/models?other=deepsparse)                       |  `generate_until`, `loglikelihood`                         | ...                                                      |\n| [Neural Magic SparseML](https://github.com/neuralmagic/sparseml)    | ✔️         | `sparseml`                                 |     Any decoder-only AutoModelForCausalLM from [SparseZoo](https://sparsezoo.neuralmagic.com/) or on [HF Hub](https://huggingface.co/neuralmagic). Especially useful for models with quantization like [`zoo:llama2-7b-gsm8k_llama2_pretrain-pruned60_quantized`](https://sparsezoo.neuralmagic.com/models/llama2-7b-gsm8k_llama2_pretrain-pruned60_quantized)                         |  `generate_until`, `loglikelihood`, `loglikelihood_rolling`                         | ...                                                      |\n| Your local inference server!                                                                                              | :heavy_check_mark:                             | `local-completions` or `local-chat-completions` (using `openai-chat-completions` model type)    | Any server address that accepts GET requests using HF models and mirror's OpenAI's Completions or ChatCompletions interface                                  | `generate_until`                                           |                                | ...                |\n\nModels which do not supply logits or logprobs can be used with tasks of type `generate_until` only, while local models, or APIs that supply logprobs/logits of their prompts, can be run on all task types: `generate_until`, `loglikelihood`, `loglikelihood_rolling`, and `multiple_choice`.\n\nFor more information on the different task `output_types` and model request types, see [our documentation](https://github.com/EleutherAI/lm-evaluation-harness/blob/main/docs/model_guide.md#interface).\n\n> [!Note]\n> For best performance with closed chat model APIs such as Anthropic Claude 3 and GPT-4, we recommend carefully looking at a few sample outputs using `--limit 10` first to confirm answer extraction and scoring on generative tasks is performing as expected. providing `system=\"<some system prompt here>\"` within `--model_args` for anthropic-chat-completions, to instruct the model what format to respond in, may be useful.\n\n\n### Other Frameworks\n\nA number of other libraries contain scripts for calling the eval harness through their library. These include [GPT-NeoX](https://github.com/EleutherAI/gpt-neox/blob/main/eval_tasks/eval_adapter.py), [Megatron-DeepSpeed](https://github.com/microsoft/Megatron-DeepSpeed/blob/main/examples/MoE/readme_evalharness.md), and [mesh-transformer-jax](https://github.com/kingoflolz/mesh-transformer-jax/blob/master/eval_harness.py).\n\nTo create your own custom integration you can follow instructions from [this tutorial](https://github.com/EleutherAI/lm-evaluation-harness/blob/main/docs/interface.md#external-library-usage).\n\n### Additional Features\n> [!Note]\n> For tasks unsuitable for direct evaluation — either due risks associated with executing untrusted code or complexities in the evaluation process — the `--predict_only` flag is available to obtain decoded generations for post-hoc evaluation.\n\nIf you have a Metal compatible Mac, you can run the eval harness using the MPS back-end by replacing `--device cuda:0` with `--device mps` (requires PyTorch version 2.1 or higher). **Note that the PyTorch MPS backend is still in early stages of development, so correctness issues or unsupported operations may exist. If you observe oddities in model performance on the MPS back-end, we recommend first checking that a forward pass of your model on `--device cpu` and `--device mps` match.**\n\n> [!Note]\n> You can inspect what the LM inputs look like by running the following command:\n> ```bash\n> python write_out.py \\\n>     --tasks <task1,task2,...> \\\n>     --num_fewshot 5 \\\n>     --num_examples 10 \\\n>     --output_base_path /path/to/output/folder\n> ```\n> This will write out one text file for each task.\n\nTo verify the data integrity of the tasks you're performing in addition to running the tasks themselves, you can use the `--check_integrity` flag:\n\n```bash\nlm_eval --model openai \\\n    --model_args engine=davinci \\\n    --tasks lambada_openai,hellaswag \\\n    --check_integrity\n```\n\n## Advanced Usage Tips\n\nFor models loaded with the HuggingFace  `transformers` library, any arguments provided via `--model_args` get passed to the relevant constructor directly. This means that anything you can do with `AutoModel` can be done with our library. For example, you can pass a local path via `pretrained=` or use models finetuned with [PEFT](https://github.com/huggingface/peft) by taking the call you would run to evaluate the base model and add `,peft=PATH` to the `model_args` argument:\n```bash\nlm_eval --model hf \\\n    --model_args pretrained=EleutherAI/gpt-j-6b,parallelize=True,load_in_4bit=True,peft=nomic-ai/gpt4all-j-lora \\\n    --tasks openbookqa,arc_easy,winogrande,hellaswag,arc_challenge,piqa,boolq \\\n    --device cuda:0\n```\n\nModels provided as delta weights can be easily loaded using the Hugging Face transformers library. Within --model_args, set the delta argument to specify the delta weights, and use the pretrained argument to designate the relative base model to which they will be applied:\n```bash\nlm_eval --model hf \\\n    --model_args pretrained=Ejafa/llama_7B,delta=lmsys/vicuna-7b-delta-v1.1 \\\n    --tasks hellaswag\n```\n\n[GPTQ](https://github.com/PanQiWei/AutoGPTQ) quantized models can be loaded by specifying their file names in `,autogptq=NAME` (or `,autogptq=True` for default names) in the `model_args` argument:\n\n```bash\nlm_eval --model hf \\\n    --model_args pretrained=model-name-or-path,autogptq=model.safetensors,gptq_use_triton=True \\\n    --tasks hellaswag\n```\n\nWe support wildcards in task names, for example you can run all of the machine-translated lambada tasks via `--task lambada_openai_mt_*`.\n\n## Saving Results\n\nTo save evaluation results provide an `--output_path`. We also support logging model responses with the `--log_samples` flag for post-hoc analysis.\n\nAdditionally, one can provide a directory with `--use_cache` to cache the results of prior runs. This allows you to avoid repeated execution of the same (model, task) pairs for re-scoring.\n\nTo push results and samples to the Hugging Face Hub, first ensure an access token with write access is set in the `HF_TOKEN` environment variable. Then, use the `--hf_hub_log_args` flag to specify the organization, repository name, repository visibility, and whether to push results and samples to the Hub - [example dataset on the  HF Hub](https://huggingface.co/datasets/KonradSzafer/lm-eval-results-demo). For instance:\n\n```bash\nlm_eval --model hf \\\n    --model_args pretrained=model-name-or-path,autogptq=model.safetensors,gptq_use_triton=True \\\n    --tasks hellaswag \\\n    --log_samples \\\n    --output_path results \\\n    --hf_hub_log_args hub_results_org=EleutherAI,hub_repo_name=lm-eval-results,push_results_to_hub=True,push_samples_to_hub=True,public_repo=False \\\n```\n\nThis allows you to easily download the results and samples from the Hub, using:\n```python\nfrom datasets import load_dataset\n\nload_dataset(\"EleutherAI/lm-eval-results-private\", \"hellaswag\", \"latest\")\n```\n\nFor a full list of supported arguments, check out the [interface](https://github.com/EleutherAI/lm-evaluation-harness/blob/main/docs/interface.md) guide in our documentation!\n\n## Visualizing Results\n\nYou can seamlessly visualize and analyze the results of your evaluation harness runs using both Weights & Biases (W&B) and Zeno.\n\n### Zeno\n\nYou can use [Zeno](https://zenoml.com) to visualize the results of your eval harness runs.\n\nFirst, head to [hub.zenoml.com](https://hub.zenoml.com) to create an account and get an API key [on your account page](https://hub.zenoml.com/account).\nAdd this key as an environment variable:\n\n```bash\nexport ZENO_API_KEY=[your api key]\n```\n\nYou'll also need to install the `lm_eval[zeno]` package extra.\n\nTo visualize the results, run the eval harness with the `log_samples` and `output_path` flags.\nWe expect `output_path` to contain multiple folders that represent individual model names.\nYou can thus run your evaluation on any number of tasks and models and upload all of the results as projects on Zeno.\n\n```bash\nlm_eval \\\n    --model hf \\\n    --model_args pretrained=EleutherAI/gpt-j-6B \\\n    --tasks hellaswag \\\n    --device cuda:0 \\\n    --batch_size 8 \\\n    --log_samples \\\n    --output_path output/gpt-j-6B\n```\n\nThen, you can upload the resulting data using the `zeno_visualize` script:\n\n```bash\npython scripts/zeno_visualize.py \\\n    --data_path output \\\n    --project_name \"Eleuther Project\"\n```\n\nThis will use all subfolders in `data_path` as different models and upload all tasks within these model folders to Zeno.\nIf you run the eval harness on multiple tasks, the `project_name` will be used as a prefix and one project will be created per task.\n\nYou can find an example of this workflow in [examples/visualize-zeno.ipynb](examples/visualize-zeno.ipynb).\n\n### Weights and Biases\n\nWith the [Weights and Biases](https://wandb.ai/site) integration, you can now spend more time extracting deeper insights into your evaluation results. The integration is designed to streamline the process of logging and visualizing experiment results using the Weights & Biases (W&B) platform.\n\nThe integration provide functionalities\n\n- to automatically log the evaluation results,\n- log the samples as W&B Tables for easy visualization,\n- log the `results.json` file as an artifact for version control,\n- log the `<task_name>_eval_samples.json` file if the samples are logged,\n- generate a comprehensive report for analysis and visualization with all the important metric,\n- log task and cli specific configs,\n- and more out of the box like the command used to run the evaluation, GPU/CPU counts, timestamp, etc.\n\nFirst you'll need to install the lm_eval[wandb] package extra. Do `pip install lm_eval[wandb]`.\n\nAuthenticate your machine with an your unique W&B token. Visit https://wandb.ai/authorize to get one. Do `wandb login` in your command line terminal.\n\nRun eval harness as usual with a `wandb_args` flag. Use this flag to provide arguments for initializing a wandb run ([wandb.init](https://docs.wandb.ai/ref/python/init)) as comma separated string arguments.\n\n```bash\nlm_eval \\\n    --model hf \\\n    --model_args pretrained=microsoft/phi-2,trust_remote_code=True \\\n    --tasks hellaswag,mmlu_abstract_algebra \\\n    --device cuda:0 \\\n    --batch_size 8 \\\n    --output_path output/phi-2 \\\n    --limit 10 \\\n    --wandb_args project=lm-eval-harness-integration \\\n    --log_samples\n```\n\nIn the stdout, you will find the link to the W&B run page as well as link to the generated report. You can find an example of this workflow in [examples/visualize-wandb.ipynb](examples/visualize-wandb.ipynb), and an example of how to integrate it beyond the CLI.\n\n## How to Contribute or Learn More?\n\nFor more information on the library and how everything fits together, check out all of our [documentation pages](https://github.com/EleutherAI/lm-evaluation-harness/tree/main/docs)! We plan to post a larger roadmap of desired + planned library improvements soon, with more information on how contributors can help.\n\n### Implementing new tasks\n\nTo implement a new task in the eval harness, see [this guide](./docs/new_task_guide.md).\n\nIn general, we follow this priority list for addressing concerns about prompting and other eval details:\n1. If there is widespread agreement among people who train LLMs, use the agreed upon procedure.\n2. If there is a clear and unambiguous official implementation, use that procedure.\n3. If there is widespread agreement among people who evaluate LLMs, use the agreed upon procedure.\n4. If there are multiple common implementations but not universal or widespread agreement, use our preferred option among the common implementations. As before, prioritize choosing from among the implementations found in LLM training papers.\n\nThese are guidelines and not rules, and can be overruled in special circumstances.\n\nWe try to prioritize agreement with the procedures used by other groups to decrease the harm when people inevitably compare runs across different papers despite our discouragement of the practice. Historically, we also prioritized the implementation from [Language Models are Few Shot Learners](https://arxiv.org/abs/2005.14165) as our original goal was specifically to compare results with that paper.\n\n### Support\n\nThe best way to get support is to open an issue on this repo or join the [EleutherAI Discord server](https://discord.gg/eleutherai). The `#lm-thunderdome` channel is dedicated to developing this project and the `#release-discussion` channel is for receiving support for our releases. If you've used the library and have had a positive (or negative) experience, we'd love to hear from you!\n\n## Optional Extras\nExtras dependencies can be installed via `pip install -e \".[NAME]\"`\n\n| Name          | Use                                   |\n|---------------|---------------------------------------|\n| anthropic     | For using Anthropic's models          |\n| deepsparse     | For running NM's DeepSparse models    |\n| dev           | For linting PRs and contributions     |\n| gptq          | For loading models with GPTQ          |\n| hf_transfer   | For speeding up HF Hub file downloads |\n| ifeval        | For running the IFEval task           |\n| neuronx       | For running on AWS inf2 instances     |\n| mamba         | For loading Mamba SSM models          |\n| math          | For running math task answer checking |\n| multilingual  | For multilingual tokenizers           |\n| openai        | For using OpenAI's models             |\n| optimum       | For running Intel OpenVINO models     |\n| promptsource  | For using PromptSource prompts        |\n| sentencepiece | For using the sentencepiece tokenizer |\n| sparseml      | For using NM's SparseML models        |\n| testing       | For running library test suite        |\n| unitxt        | For IBM's unitxt dataset tasks        |\n| vllm          | For loading models with vLLM          |\n| zeno          | For visualizing results with Zeno     |\n|---------------|---------------------------------------|\n| all           | Loads all extras (not recommended)    |\n\n## Cite as\n\n```\n@misc{eval-harness,\n  author       = {Gao, Leo and Tow, Jonathan and Abbasi, Baber and Biderman, Stella and Black, Sid and DiPofi, Anthony and Foster, Charles and Golding, Laurence and Hsu, Jeffrey and Le Noac'h, Alain and Li, Haonan and McDonell, Kyle and Muennighoff, Niklas and Ociepa, Chris and Phang, Jason and Reynolds, Laria and Schoelkopf, Hailey and Skowron, Aviya and Sutawika, Lintang and Tang, Eric and Thite, Anish and Wang, Ben and Wang, Kevin and Zou, Andy},\n  title        = {A framework for few-shot language model evaluation},\n  month        = 12,\n  year         = 2023,\n  publisher    = {Zenodo},\n  version      = {v0.4.0},\n  doi          = {10.5281/zenodo.10256836},\n  url          = {https://zenodo.org/records/10256836}\n}\n```\n","description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":null,"license":"MIT","maintainer":null,"maintainer_email":null,"name":"lm-eval","package_url":"https://pypi.org/project/lm-eval/","platform":null,"project_url":"https://pypi.org/project/lm-eval/","project_urls":{"Homepage":"https://github.com/EleutherAI/lm-evaluation-harness","Repository":"https://github.com/EleutherAI/lm-evaluation-harness"},"provides_extra":["all","anthropic","deepsparse","dev","gptq","hf-transfer","ifeval","mamba","math","multilingual","neuronx","openai","optimum","promptsource","sentencepiece","sparseml","testing","unitxt","vllm","wandb","zeno"],"release_url":"https://pypi.org/project/lm-eval/0.4.3/","requires_dist":["accelerate>=0.26.0","evaluate","datasets>=2.16.0","evaluate>=0.4.0","jsonlines","numexpr","peft>=0.2.0","pybind11>=2.6.2","pytablewriter","rouge-score>=0.0.4","sacrebleu>=1.5.0","scikit-learn>=0.24.1","sqlitedict","torch>=1.8","tqdm-multiprocess","transformers>=4.1","zstandard","dill","word2number","more-itertools","lm-eval[anthropic]; extra == \"all\"","lm-eval[dev]; extra == \"all\"","lm-eval[deepsparse]; extra == \"all\"","lm-eval[gptq]; extra == \"all\"","lm-eval[hf_transfer]; extra == \"all\"","lm-eval[ifeval]; extra == \"all\"","lm-eval[mamba]; extra == \"all\"","lm-eval[math]; extra == \"all\"","lm-eval[multilingual]; extra == \"all\"","lm-eval[openai]; extra == \"all\"","lm-eval[promptsource]; extra == \"all\"","lm-eval[sentencepiece]; extra == \"all\"","lm-eval[sparseml]; extra == \"all\"","lm-eval[testing]; extra == \"all\"","lm-eval[vllm]; extra == \"all\"","lm-eval[zeno]; extra == \"all\"","lm-eval[wandb]; extra == \"all\"","lm-eval[unitxt]; extra == \"all\"","anthropic; extra == \"anthropic\"","deepsparse-nightly[llm]>=1.8.0.20240404; extra == \"deepsparse\"","pytest; extra == \"dev\"","pytest-cov; extra == \"dev\"","pytest-xdist; extra == \"dev\"","pre-commit; extra == \"dev\"","mypy; extra == \"dev\"","auto-gptq[triton]>=0.6.0; extra == \"gptq\"","hf-transfer; extra == \"hf-transfer\"","langdetect; extra == \"ifeval\"","immutabledict; extra == \"ifeval\"","mamba-ssm; extra == \"mamba\"","causal-conv1d==1.0.2; extra == \"mamba\"","sympy>=1.12; extra == \"math\"","antlr4-python3-runtime==4.11; extra == \"math\"","nagisa>=0.2.7; extra == \"multilingual\"","jieba>=0.42.1; extra == \"multilingual\"","pycountry; extra == \"multilingual\"","optimum[neuronx]; extra == \"neuronx\"","openai==1.3.9; extra == \"openai\"","tiktoken; extra == \"openai\"","optimum[openvino]; extra == \"optimum\"","promptsource>=0.2.3; extra == \"promptsource\"","sentencepiece>=0.1.98; extra == \"sentencepiece\"","sparseml-nightly[llm]>=1.8.0.20240404; extra == \"sparseml\"","pytest; extra == \"testing\"","pytest-cov; extra == \"testing\"","pytest-xdist; extra == \"testing\"","unitxt; extra == \"unitxt\"","vllm>=0.4.2; extra == \"vllm\"","wandb>=0.16.3; extra == \"wandb\"","pandas; extra == \"wandb\"","numpy; extra == \"wandb\"","pandas; extra == \"zeno\"","zeno-client; extra == \"zeno\""],"requires_python":">=3.8","summary":"A framework for evaluating language models","version":"0.4.3","yanked":false,"yanked_reason":null},"last_serial":23925816,"releases":{"0.0.1":[{"comment_text":"","digests":{"blake2b_256":"1b5f7841febb99c12ffb453d33a67b9841e89dba18c388b644bf22b81d137fc4","md5":"68ea867c38b60cf153b5c6c8ec2a1a07","sha256":"bdaced3e4b56313c1e70d1207a788e42615bb29010687abf775d312dbd4ce7e2"},"downloads":-1,"filename":"lm_eval-0.0.1-py3-none-any.whl","has_sig":false,"md5_digest":"68ea867c38b60cf153b5c6c8ec2a1a07","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":102867,"upload_time":"2021-09-02T02:28:24","upload_time_iso_8601":"2021-09-02T02:28:24.540829Z","url":"https://files.pythonhosted.org/packages/1b/5f/7841febb99c12ffb453d33a67b9841e89dba18c388b644bf22b81d137fc4/lm_eval-0.0.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"215afeb5ff3a1591ca963c54873d39116b0e6a4f80e493e961ac08569709c5d7","md5":"ffbb8b78045d7bfd0808ae6f93d3c941","sha256":"d6d2356c206065d80489bd89802c0b23534c56906bae07e2dbe367261f3fc35f"},"downloads":-1,"filename":"lm_eval-0.0.1.tar.gz","has_sig":false,"md5_digest":"ffbb8b78045d7bfd0808ae6f93d3c941","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":84153,"upload_time":"2021-09-02T02:28:26","upload_time_iso_8601":"2021-09-02T02:28:26.565687Z","url":"https://files.pythonhosted.org/packages/21/5a/feb5ff3a1591ca963c54873d39116b0e6a4f80e493e961ac08569709c5d7/lm_eval-0.0.1.tar.gz","yanked":false,"yanked_reason":null}],"0.2.0":[{"comment_text":"","digests":{"blake2b_256":"f3a763cbce8b51de25fabb1c49f3a3fd1704faaacadb5ed816401f800e4d2dbd","md5":"75147dbf11c1eb5b04b18216c6406f3e","sha256":"dcb16a78a6c99e0fe2d2c72dd348d3e43ba965b587762f4233abc0b0742083e2"},"downloads":-1,"filename":"lm_eval-0.2.0-py3-none-any.whl","has_sig":false,"md5_digest":"75147dbf11c1eb5b04b18216c6406f3e","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":143108,"upload_time":"2022-03-07T02:02:44","upload_time_iso_8601":"2022-03-07T02:02:44.301588Z","url":"https://files.pythonhosted.org/packages/f3/a7/63cbce8b51de25fabb1c49f3a3fd1704faaacadb5ed816401f800e4d2dbd/lm_eval-0.2.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c5fdedd21b0f258b4ec0260f99f5b2ac3864f7cddc8fb7c83bbb2379a6aab975","md5":"9fbfd340cfaf0f60e7d99b70debec327","sha256":"b557c2a6853dc2ec01f4dc090e9c72c722521e4707758898114aa3a7e9bfb3fd"},"downloads":-1,"filename":"lm_eval-0.2.0.tar.gz","has_sig":false,"md5_digest":"9fbfd340cfaf0f60e7d99b70debec327","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":121336,"upload_time":"2022-03-07T02:02:46","upload_time_iso_8601":"2022-03-07T02:02:46.063837Z","url":"https://files.pythonhosted.org/packages/c5/fd/edd21b0f258b4ec0260f99f5b2ac3864f7cddc8fb7c83bbb2379a6aab975/lm_eval-0.2.0.tar.gz","yanked":false,"yanked_reason":null}],"0.3.0":[{"comment_text":"","digests":{"blake2b_256":"61c5bff92e6b61fc2b0c1b7ac769633731910152e5176a404912ce7c07329ba0","md5":"ae1830db4e0f5ec746b9cacb14c57709","sha256":"a1b3cc6c3f1291717cac79a995dc2204547fe086ecfdec0e440ff1cea20b2ac2"},"downloads":-1,"filename":"lm_eval-0.3.0-py3-none-any.whl","has_sig":false,"md5_digest":"ae1830db4e0f5ec746b9cacb14c57709","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":178673,"upload_time":"2022-12-08T08:11:11","upload_time_iso_8601":"2022-12-08T08:11:11.575578Z","url":"https://files.pythonhosted.org/packages/61/c5/bff92e6b61fc2b0c1b7ac769633731910152e5176a404912ce7c07329ba0/lm_eval-0.3.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c4f858abc65390a758c8c2e5f1d8bb9b58d7885d02535d5f48de27006453d07e","md5":"8a1d2fa73ae48c3e938b47a1d8617d0e","sha256":"643b12bf9374f4d7c78ce55471b6ad82c130ab1aa0577d97fdfa48875dbc598b"},"downloads":-1,"filename":"lm_eval-0.3.0.tar.gz","has_sig":false,"md5_digest":"8a1d2fa73ae48c3e938b47a1d8617d0e","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":120598,"upload_time":"2022-12-08T08:11:14","upload_time_iso_8601":"2022-12-08T08:11:14.586656Z","url":"https://files.pythonhosted.org/packages/c4/f8/58abc65390a758c8c2e5f1d8bb9b58d7885d02535d5f48de27006453d07e/lm_eval-0.3.0.tar.gz","yanked":false,"yanked_reason":null}],"0.4.0":[{"comment_text":"","digests":{"blake2b_256":"45e005001c2e56e2f8f793189442176432ddb89a2f1f1ef00ea154d0bc00fe37","md5":"ffd00d0acacb3a02b074af61bc57659b","sha256":"2dac56039b191c2dfb0011329ec9082e474006a15575db45468b88753923b34b"},"downloads":-1,"filename":"lm_eval-0.4.0.tar.gz","has_sig":false,"md5_digest":"ffd00d0acacb3a02b074af61bc57659b","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":457131,"upload_time":"2023-12-22T18:36:42","upload_time_iso_8601":"2023-12-22T18:36:42.806581Z","url":"https://files.pythonhosted.org/packages/45/e0/05001c2e56e2f8f793189442176432ddb89a2f1f1ef00ea154d0bc00fe37/lm_eval-0.4.0.tar.gz","yanked":false,"yanked_reason":null}],"0.4.1":[{"comment_text":"","digests":{"blake2b_256":"492d39f7a25ab663cb45cfc7773b85980f01df44853cc427d00dce94c90b43e6","md5":"fcb2531efc394f1817876baaae368844","sha256":"e82e1ed0862781f7df7316d47ff111b84fd854bf870d3b8ac020cb35689958e7"},"downloads":-1,"filename":"lm_eval-0.4.1-py3-none-any.whl","has_sig":false,"md5_digest":"fcb2531efc394f1817876baaae368844","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":1068385,"upload_time":"2024-01-31T15:15:51","upload_time_iso_8601":"2024-01-31T15:15:51.825618Z","url":"https://files.pythonhosted.org/packages/49/2d/39f7a25ab663cb45cfc7773b85980f01df44853cc427d00dce94c90b43e6/lm_eval-0.4.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"5a021c7f1ac2f139f4c05af5b94e2c4f88a70404fa0b0c22a5fb04dec0216b03","md5":"8de69c5eceaa35981ab1b1e19407655e","sha256":"8e9959ef7ac3393544add0b164f6aaf8de2f6b6ec363ad97abb62067b3aa8f38"},"downloads":-1,"filename":"lm_eval-0.4.1.tar.gz","has_sig":false,"md5_digest":"8de69c5eceaa35981ab1b1e19407655e","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":504091,"upload_time":"2024-01-31T15:15:54","upload_time_iso_8601":"2024-01-31T15:15:54.017600Z","url":"https://files.pythonhosted.org/packages/5a/02/1c7f1ac2f139f4c05af5b94e2c4f88a70404fa0b0c22a5fb04dec0216b03/lm_eval-0.4.1.tar.gz","yanked":false,"yanked_reason":null}],"0.4.2":[{"comment_text":"","digests":{"blake2b_256":"0c5a64cf703b62ac7ada09a514c16c7136bb4ea7ef3030eb4c3d780900a5a634","md5":"c55fa6c4693e86d17b2a11d81697cb70","sha256":"8f3fe50ec92bc98ea62ad96236facc78d7e371db85dbc980627299e5750c8db4"},"downloads":-1,"filename":"lm_eval-0.4.2-py3-none-any.whl","has_sig":false,"md5_digest":"c55fa6c4693e86d17b2a11d81697cb70","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":1424940,"upload_time":"2024-03-18T13:08:24","upload_time_iso_8601":"2024-03-18T13:08:24.748392Z","url":"https://files.pythonhosted.org/packages/0c/5a/64cf703b62ac7ada09a514c16c7136bb4ea7ef3030eb4c3d780900a5a634/lm_eval-0.4.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"75ca18814743ba3b42d19d8524a4f771e9c3a7aa02cd4c579747a0f513907205","md5":"7d0ecacc98d42398cd0eb4d7586b7feb","sha256":"ddc2a1ea7041cbadf45afd118ebdecd707b1f14446fad51df212d2bf3defb4d2"},"downloads":-1,"filename":"lm_eval-0.4.2.tar.gz","has_sig":false,"md5_digest":"7d0ecacc98d42398cd0eb4d7586b7feb","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":698252,"upload_time":"2024-03-18T13:08:27","upload_time_iso_8601":"2024-03-18T13:08:27.611261Z","url":"https://files.pythonhosted.org/packages/75/ca/18814743ba3b42d19d8524a4f771e9c3a7aa02cd4c579747a0f513907205/lm_eval-0.4.2.tar.gz","yanked":false,"yanked_reason":null}],"0.4.3":[{"comment_text":"","digests":{"blake2b_256":"392beb15fb57ba48b3cebfd302713d680d9917101867e2b5fbfd266e88b89ff3","md5":"ffd32ff751dc029f967db53537f8afe7","sha256":"6e31087bdf28c283ef9365bc360729fe49053ccea16fe949842b6d0da0a8f676"},"downloads":-1,"filename":"lm_eval-0.4.3-py3-none-any.whl","has_sig":false,"md5_digest":"ffd32ff751dc029f967db53537f8afe7","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":1655094,"upload_time":"2024-07-01T13:52:11","upload_time_iso_8601":"2024-07-01T13:52:11.649497Z","url":"https://files.pythonhosted.org/packages/39/2b/eb15fb57ba48b3cebfd302713d680d9917101867e2b5fbfd266e88b89ff3/lm_eval-0.4.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"2e69dbff28f17e17521735460b25645479e85b58d8ad7ea8488e4672ab52b58b","md5":"9bdb6c4a036ddaf8f47682426f2d49f7","sha256":"ecdbe024b99ddddf490295fa750ca33cf545808884f3999560715bc7cdae0a8d"},"downloads":-1,"filename":"lm_eval-0.4.3.tar.gz","has_sig":false,"md5_digest":"9bdb6c4a036ddaf8f47682426f2d49f7","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":810700,"upload_time":"2024-07-01T13:52:13","upload_time_iso_8601":"2024-07-01T13:52:13.783719Z","url":"https://files.pythonhosted.org/packages/2e/69/dbff28f17e17521735460b25645479e85b58d8ad7ea8488e4672ab52b58b/lm_eval-0.4.3.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"392beb15fb57ba48b3cebfd302713d680d9917101867e2b5fbfd266e88b89ff3","md5":"ffd32ff751dc029f967db53537f8afe7","sha256":"6e31087bdf28c283ef9365bc360729fe49053ccea16fe949842b6d0da0a8f676"},"downloads":-1,"filename":"lm_eval-0.4.3-py3-none-any.whl","has_sig":false,"md5_digest":"ffd32ff751dc029f967db53537f8afe7","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":1655094,"upload_time":"2024-07-01T13:52:11","upload_time_iso_8601":"2024-07-01T13:52:11.649497Z","url":"https://files.pythonhosted.org/packages/39/2b/eb15fb57ba48b3cebfd302713d680d9917101867e2b5fbfd266e88b89ff3/lm_eval-0.4.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"2e69dbff28f17e17521735460b25645479e85b58d8ad7ea8488e4672ab52b58b","md5":"9bdb6c4a036ddaf8f47682426f2d49f7","sha256":"ecdbe024b99ddddf490295fa750ca33cf545808884f3999560715bc7cdae0a8d"},"downloads":-1,"filename":"lm_eval-0.4.3.tar.gz","has_sig":false,"md5_digest":"9bdb6c4a036ddaf8f47682426f2d49f7","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":810700,"upload_time":"2024-07-01T13:52:13","upload_time_iso_8601":"2024-07-01T13:52:13.783719Z","url":"https://files.pythonhosted.org/packages/2e/69/dbff28f17e17521735460b25645479e85b58d8ad7ea8488e4672ab52b58b/lm_eval-0.4.3.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
