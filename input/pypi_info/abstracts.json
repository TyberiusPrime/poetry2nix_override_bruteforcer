{"info":{"author":"Ryan Northey","author_email":"ryan@synca.io","bugtrack_url":null,"classifiers":["Development Status :: 4 - Beta","Framework :: Pytest","Intended Audience :: Developers","License :: OSI Approved :: Apache Software License","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3 :: Only","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: Implementation :: CPython","Topic :: Software Development :: Testing"],"description":"\nabstracts\n=========\n\nAbstract class and interface definitions.\n\nCreate an ``abstract.Abstraction``\n----------------------------------\n\nAn ``Abstraction`` is a ``metaclass`` for defining abstract classes.\n\nLet's define an abstract ``AFoo`` class and give it an abstract ``do_foo``\nmethod.\n\nLike any python class, an ``Abstraction`` can have any name, but it may\nbe helpful to distinguish abstract classes from others by prefixing their\nname with ``A``.\n\n.. code-block:: pycon\n\n   >>> import abc\n   >>> import abstracts\n\n   >>> class AFoo(metaclass=abstracts.Abstraction):\n   ...\n   ...     @abc.abstractmethod\n   ...     def do_foo(self):\n   ...         raise NotImplementedError\n\nAbstract classes **cannot** be instantiated directly.\n\n.. code-block:: pycon\n\n   >>> AFoo()\n   Traceback (most recent call last):\n   ...\n   TypeError: Can't instantiate abstract class AFoo with abstract method... do_foo\n\nCreate an ``implementer`` for an ``abstract.Abstraction``\n---------------------------------------------------------\n\nIn order to make use of ``AFoo``, we need to create an implementer for it.\n\n.. code-block:: pycon\n\n   >>> @abstracts.implementer(AFoo)\n   ... class Foo:\n   ...     pass\n\nThe implementer **must** implement all of the abstract methods,\ndefined by its abstract classes.\n\n.. code-block:: pycon\n\n   >>> Foo()\n   Traceback (most recent call last):\n   ...\n   TypeError: Can't instantiate abstract class Foo with abstract method... do_foo\n\n   >>> @abstracts.implementer(AFoo)\n   ... class Foo2:\n   ...\n   ...     def do_foo(self):\n   ...         return \"DID FOO\"\n\n   >>> Foo2()\n   <__main__.Foo2 object at ...>\n\nAn implementer inherits from its ``Abstractions``\n-------------------------------------------------\n\nAn ``implementer`` class is a subclass of its ``Abstraction``.\n\n.. code-block:: pycon\n\n   >>> issubclass(Foo2, AFoo)\n   True\n\nLikewise an instance of an implementer is an instance of its ``Abstraction``\n\n.. code-block:: pycon\n\n   >>> isinstance(Foo2(), AFoo)\n   True\n\nThe ``Abstraction`` class can be seen in the class ``bases``, and the\nmethods of the ``Abstraction`` can be invoked by the implementer.\n\n.. code-block:: pycon\n\n   >>> import inspect\n   >>> AFoo in inspect.getmro(Foo2)\n   True\n\nCreate an ``implementer`` that implements multiple ``Abstraction`` s.\n---------------------------------------------------------------------\n\nAn implementer can implement multiple abstractions.\n\nLet's create a second abstraction.\n\n.. code-block:: pycon\n\n   >>> class ABar(metaclass=abstracts.Abstraction):\n   ...\n   ...     @abc.abstractmethod\n   ...     def do_bar(self):\n   ...         raise NotImplementedError\n\nAnd now we can create an implementer that implememts both the ``AFoo`` and ``ABar``\n``Abstraction`` s.\n\n.. code-block:: pycon\n\n   >>> @abstracts.implementer((AFoo, ABar))\n   ... class FooBar:\n   ...\n   ...     def do_foo(self):\n   ...         return \"DID FOO\"\n   ...\n   ...     def do_bar(self):\n   ...         return \"DID BAR\"\n\n   >>> FooBar()\n   <__main__.FooBar object at ...>\n\nDefining abstract properties\n----------------------------\n\nProperties can be defined in an abstract class, and just like with normal\nmethods, they must be implemented by any implementers.\n\n.. code-block:: pycon\n\n   >>> class AMover(metaclass=abstracts.Abstraction):\n   ...\n   ...     @property\n   ...     @abc.abstractmethod\n   ...     def speed(self):\n   ...         return 5\n   ...\n   ...     @property\n   ...     @abc.abstractmethod\n   ...     def direction(self):\n   ...         return \"forwards\"\n\nCalling ``super()`` on an ``abstractmethod``\n--------------------------------------------\n\nJust like with pythons \"Abstract Base Classes\" you can call ``super()``\nin an ``abstractmethod``, to invoke an abstract implementation.\n\n.. code-block:: pycon\n\n   >>> @abstracts.implementer(AMover)\n   ... class Mover:\n   ...\n   ...     @property\n   ...     def direction(self):\n   ...         return \"backwards\"\n   ...\n   ...     @property\n   ...     def speed(self):\n   ...         return super().speed\n\nThis custom implementation of ``AMover`` **must** implement both ``speed`` and\n``direction``, even if its implementation invokes the abstract implementation.\n\nIn this case it uses the default/abstract implementation of ``speed`` while providing\nits own implementation of ``direction``.\n\n.. code-block:: pycon\n\n   >>> mover = Mover()\n   >>> mover\n   <__main__.Mover object at ...>\n\n   >>> mover.speed\n   5\n   >>> mover.direction\n   'backwards'\n\nDefining an ``abstracts.Interface`` class\n-----------------------------------------\n\nAn ``Interface`` is much like an ``Abstraction``, but with a few differences.\n\nAn ``Interface`` can only define methods with the ``@interfacemethod`` decorator.\n\nIt cannot define normal methods or methods with the ``@abstractmethod``, only methods\nwith ``@interfacemethod``.\n\nAn ``@interfacemethod`` if invoked will always raise an ``NotImplementedError``, and\ntherefore cannot be used as an abstract implementation.\n\nLets add an ``Interface`` class that we can use.\n\nIn the way that it may be helpful to distinguish an ``Abstraction`` from other\ntypes of classes, it may be also useful to distinguish an ``Interface`` by\nusing an ``I`` prefix when naming them.\n\n.. code-block:: pycon\n\n   >>> class IGeared(metaclass=abstracts.Interface):\n   ...\n   ...     @property\n   ...     @abstracts.interfacemethod\n   ...     def number_of_gears(self):\n   ...         # Raising an error is ~superfluous as the decorator will raise\n   ...         # anyway if the method is invoked.\n   ...         raise NotImplementedError\n\nImplementing an ``Interface``\n-----------------------------\n\nJust like with an ``Abstraction``, an ``Interface`` can be implemented using\nthe ``@implementer`` decorator.\n\nAn implementer, can implement a combination of ``Abstractions`` and\n``Interfaces``.\n\n.. code-block:: pycon\n\n   >>> @abstracts.implementer((AMover, IGeared))\n   ... class Bicycle:\n   ...\n   ...     @property\n   ...     def direction(self):\n   ...         return super().direction\n   ...\n   ...     @property\n   ...     def speed(self):\n   ...         return super().speed\n   ...\n   ...     @property\n   ...     def number_of_gears(self):\n   ...         return 7\n\n   >>> Bicycle().number_of_gears\n   7\n\nAn implementer does **not** inherit from its ``Interfaces``\n-----------------------------------------------------------\n\nAn ``implementer`` class is a subclass of its ``Interfaces``.\n\n.. code-block:: pycon\n\n   >>> issubclass(Bicycle, AMover)\n   True\n   >>> issubclass(Bicycle, IGeared)\n   True\n\nLikewise an instance of an implementer is an instance of its ``Interfaces``\n\n.. code-block:: pycon\n\n   >>> isinstance(Bicycle(), AMover)\n   True\n   >>> isinstance(Bicycle(), IGeared)\n   True\n\nUnlike with ``Abstractions`` it does **not** however, inherit from its ``Interfaces``.\n\n.. code-block:: pycon\n\n   >>> AMover in inspect.getmro(Bicycle)\n   True\n\n   >>> IGeared in inspect.getmro(Bicycle)\n   False\n\n``@interfacemethods`` can never be invoked\n------------------------------------------\n\nThe key thing to remember is that you cannot call ``super()`` on any\n``@interfacemethod``, or directly invoke it.\n\nIf it was defined as part of an ``Interface`` you will receive an\n``AttributeError``, as the implementation does not inherit directly from the\ninterface.\n\n.. code-block:: pycon\n\n   >>> @abstracts.implementer((AMover, IGeared))\n   ... class BrokenBicycle:\n   ...\n   ...     @property\n   ...     def direction(self):\n   ...         return super().direction\n   ...\n   ...     @property\n   ...     def speed(self):\n   ...         return super().speed\n   ...\n   ...     @property\n   ...     def number_of_gears(self):\n   ...         return super().number_of_gears\n\n   >>> BrokenBicycle().number_of_gears\n   Traceback (most recent call last):\n   ...\n   AttributeError: 'super' object has no attribute 'number_of_gears'\n\n.. warning::\n\n   Misuse of this class can have `unintended consequences <https://www.dailymotion.com/video/x2howud>`_\n\nIf you invoke ``super()`` on an ``@interfacemethod`` defined as part of an\n``Abstraction`` it will raise ``NotImplementedError``.\n\nAs an ``Interface`` can only hold this type of method, you can never invoke\nany of its methods. Doing so directly will raising a ``NotImplementedError``.\n\n.. code-block:: pycon\n\n   >>> IGeared.number_of_gears.__get__(Bicycle())\n   Traceback (most recent call last):\n   ...\n   NotImplementedError\n\nCombining ``@abstractmethod`` and ``@interfacemethod`` in an ``Abstraction``\n----------------------------------------------------------------------------\n\nAs ``Interfaces`` are \"pure\", they cannot use ``@abstractmethod`` or contain any implementation.\n\nAn ``Abstraction`` on the other hand can combine both.\n\nLets create a pure ``Interface`` that represents a \"shed\".\n\n.. code-block:: pycon\n\n   >>> class IShed(metaclass=abstracts.Interface):\n   ...\n   ...     @property\n   ...     @abstracts.interfacemethod\n   ...     def size(self):\n   ...         raise NotImplementedError\n\nWe can use this interface to create an ``ABikeShed`` ``Abstraction``\n\n.. code-block:: pycon\n\n   >>> class ABikeShed(IShed, metaclass=abstracts.Abstraction):\n   ...\n   ...     @property\n   ...     @abstracts.interfacemethod\n   ...     def max_bike_size(self):\n   ...         raise NotImplementedError\n   ...\n   ...     @abc.abstractmethod\n   ...     def get_capacity(self):\n   ...         return int(self.size / self.max_bike_size)\n\nWe can now create an implementation.\n\nIt will need to define both the ``size`` and the ``max_bike_size``,\nas these are ``interfacemethods``.\n\nIt can, however, make use of the abstract implementation of ``get_capacity``,\neven if it must be defined.\n\n.. code-block:: pycon\n\n   >>> @abstracts.implementer(ABikeShed)\n   ... class BikeShed:\n   ...\n   ...     @property\n   ...     def max_bike_size(self):\n   ...         return 7\n   ...\n   ...     @property\n   ...     def size(self):\n   ...         return 161\n   ...\n   ...     def get_capacity(self):\n   ...         return super().get_capacity()\n\n   >>> bikeshed = BikeShed()\n   >>> bikeshed.get_capacity()\n   23\n\n\n","description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/envoyproxy/pytooling/tree/main/abstracts","keywords":"","license":"Apache Software License 2.0","maintainer":"Ryan Northey","maintainer_email":"ryan@synca.io","name":"abstracts","package_url":"https://pypi.org/project/abstracts/","platform":"","project_url":"https://pypi.org/project/abstracts/","project_urls":{"Homepage":"https://github.com/envoyproxy/pytooling/tree/main/abstracts"},"provides_extra":null,"release_url":"https://pypi.org/project/abstracts/0.0.12/","requires_dist":["flake8 ; extra == 'lint'","wheel ; extra == 'publish'","pytest ; extra == 'test'","pytest-coverage ; extra == 'test'","pytest-patches ; extra == 'test'","mypy ; extra == 'types'"],"requires_python":">=3.5","summary":"Abstract class and interface definitions","version":"0.0.12","yanked":false,"yanked_reason":null},"last_serial":11349331,"releases":{"0.0.1":[{"comment_text":"","digests":{"blake2b_256":"651f82c41d7229b2e6769ea6103f0d348af85f97e3a14b75ffaf73dbeb88f553","md5":"b7e79be330359b0e40f395b7c02521cc","sha256":"7fac9a6a15508ab49b990748344a409873d74c69da1c752611a541adfedf5756"},"downloads":-1,"filename":"abstracts-0.0.1-py3-none-any.whl","has_sig":false,"md5_digest":"b7e79be330359b0e40f395b7c02521cc","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":56578,"upload_time":"2021-08-23T10:09:51","upload_time_iso_8601":"2021-08-23T10:09:51.188990Z","url":"https://files.pythonhosted.org/packages/65/1f/82c41d7229b2e6769ea6103f0d348af85f97e3a14b75ffaf73dbeb88f553/abstracts-0.0.1-py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.0.10":[{"comment_text":"","digests":{"blake2b_256":"2aee7b4f3d600b2dd905cb8cd9f73a226eeafd95b1a94349d2bf4620dcbdf711","md5":"4640c5121974f3449d0a8d699199f000","sha256":"6a0ee0481b8eb9201cd83cdf3f0107d82d47a62c4f2902c27f5343b430bb5f47"},"downloads":-1,"filename":"abstracts-0.0.10-py3-none-any.whl","has_sig":false,"md5_digest":"4640c5121974f3449d0a8d699199f000","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":11560,"upload_time":"2021-08-30T10:04:33","upload_time_iso_8601":"2021-08-30T10:04:33.388665Z","url":"https://files.pythonhosted.org/packages/2a/ee/7b4f3d600b2dd905cb8cd9f73a226eeafd95b1a94349d2bf4620dcbdf711/abstracts-0.0.10-py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.0.11":[{"comment_text":"","digests":{"blake2b_256":"67c812b459d0f151959ab0763b9ec55dc552e11ce744b952aa3f640aa192ec1d","md5":"05359fbaad4d775b9e4f9c8f20c112de","sha256":"b281e0d75e1afe40016b260ba0c5cb191ac3093be208db745b6e4a83a1816f0c"},"downloads":-1,"filename":"abstracts-0.0.11-py3-none-any.whl","has_sig":false,"md5_digest":"05359fbaad4d775b9e4f9c8f20c112de","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":11553,"upload_time":"2021-08-30T10:49:58","upload_time_iso_8601":"2021-08-30T10:49:58.273966Z","url":"https://files.pythonhosted.org/packages/67/c8/12b459d0f151959ab0763b9ec55dc552e11ce744b952aa3f640aa192ec1d/abstracts-0.0.11-py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.0.12":[{"comment_text":"","digests":{"blake2b_256":"934f158ded37e69172bba7987774885629afa9b482857edde5e87399c89e7d66","md5":"fe52602af3b447a9ccfcf57eedd660d3","sha256":"acc01ff56c8a05fb88150dff62e295f9071fc33388c42f1dfc2787a8d1c755ff"},"downloads":-1,"filename":"abstracts-0.0.12-py3-none-any.whl","has_sig":false,"md5_digest":"fe52602af3b447a9ccfcf57eedd660d3","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":11690,"upload_time":"2021-09-02T18:04:30","upload_time_iso_8601":"2021-09-02T18:04:30.770781Z","url":"https://files.pythonhosted.org/packages/93/4f/158ded37e69172bba7987774885629afa9b482857edde5e87399c89e7d66/abstracts-0.0.12-py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.0.2":[{"comment_text":"","digests":{"blake2b_256":"b30a9d207bfa88e45c3128789ed690e4ada470aa792e964dd42e86ed2a7075b0","md5":"e4700d3745f38af4d4f0bf89f98665bd","sha256":"5dba0c53f0997fc1017626e544ab6c2ee1c4b3ffa71472a259d9d8218610cf38"},"downloads":-1,"filename":"abstracts-0.0.2-py3-none-any.whl","has_sig":false,"md5_digest":"e4700d3745f38af4d4f0bf89f98665bd","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":64893,"upload_time":"2021-08-23T10:14:02","upload_time_iso_8601":"2021-08-23T10:14:02.072487Z","url":"https://files.pythonhosted.org/packages/b3/0a/9d207bfa88e45c3128789ed690e4ada470aa792e964dd42e86ed2a7075b0/abstracts-0.0.2-py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.0.4":[{"comment_text":"","digests":{"blake2b_256":"f4727a3e5fb1418c411c5959bce9a1cc9b07606cbcc6a9c46285efc8824974dc","md5":"845277ade7a10748480c6c9930c4610e","sha256":"4b45fe0deae5dd9e6b0fd15f1e9f4654c89e700fcf0f8248a17526551891beea"},"downloads":-1,"filename":"abstracts-0.0.4-py3-none-any.whl","has_sig":false,"md5_digest":"845277ade7a10748480c6c9930c4610e","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":91003,"upload_time":"2021-08-23T10:17:01","upload_time_iso_8601":"2021-08-23T10:17:01.299356Z","url":"https://files.pythonhosted.org/packages/f4/72/7a3e5fb1418c411c5959bce9a1cc9b07606cbcc6a9c46285efc8824974dc/abstracts-0.0.4-py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.0.5":[{"comment_text":"","digests":{"blake2b_256":"601ca36bf38942facab56cbc04db3bfe23b658b92187ba2184b8dec4e042a441","md5":"0e7488e14f04e350738481888205a7bf","sha256":"b2d0bd41cae48ea56d52a6a5a99659098b275577c06f7f3496705eab4017ef6a"},"downloads":-1,"filename":"abstracts-0.0.5-py3-none-any.whl","has_sig":false,"md5_digest":"0e7488e14f04e350738481888205a7bf","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":100117,"upload_time":"2021-08-23T10:18:44","upload_time_iso_8601":"2021-08-23T10:18:44.185429Z","url":"https://files.pythonhosted.org/packages/60/1c/a36bf38942facab56cbc04db3bfe23b658b92187ba2184b8dec4e042a441/abstracts-0.0.5-py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.0.6":[{"comment_text":"","digests":{"blake2b_256":"501ec0aab99fc3192662455380cb439212d55ba5c770a96ef2d9048727f34979","md5":"fe98c556add3c989899e43e9118888e3","sha256":"7b71f775e5a37f65e52adfa2c154b95f80ec7861a879f457a452117c937e8693"},"downloads":-1,"filename":"abstracts-0.0.6-py3-none-any.whl","has_sig":false,"md5_digest":"fe98c556add3c989899e43e9118888e3","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":109787,"upload_time":"2021-08-23T10:20:20","upload_time_iso_8601":"2021-08-23T10:20:20.334460Z","url":"https://files.pythonhosted.org/packages/50/1e/c0aab99fc3192662455380cb439212d55ba5c770a96ef2d9048727f34979/abstracts-0.0.6-py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.0.7":[{"comment_text":"","digests":{"blake2b_256":"46d16e70f23af2167b42c3e10638b971e952898d0f89160154cfeac502b70839","md5":"d2405e163ad8899102521c406b3e6975","sha256":"4ec304a39e119ec30885809f7f083db3d0ea2311f9c1ebaba8b407bcf59e3cae"},"downloads":-1,"filename":"abstracts-0.0.7-py3-none-any.whl","has_sig":false,"md5_digest":"d2405e163ad8899102521c406b3e6975","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":128673,"upload_time":"2021-08-23T10:21:49","upload_time_iso_8601":"2021-08-23T10:21:49.478786Z","url":"https://files.pythonhosted.org/packages/46/d1/6e70f23af2167b42c3e10638b971e952898d0f89160154cfeac502b70839/abstracts-0.0.7-py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.0.8":[{"comment_text":"","digests":{"blake2b_256":"2acfee38822a122a462da487cb38616628f4d184cc0f32206f7e9c312e326fd0","md5":"88827be1f88f8b35b4596e4e6992554b","sha256":"a0aedf05742059764f7f7975a0a0fb2b57598a3175a635bbefc7343533fd8bce"},"downloads":-1,"filename":"abstracts-0.0.8-py3-none-any.whl","has_sig":false,"md5_digest":"88827be1f88f8b35b4596e4e6992554b","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":148008,"upload_time":"2021-08-23T10:24:21","upload_time_iso_8601":"2021-08-23T10:24:21.378780Z","url":"https://files.pythonhosted.org/packages/2a/cf/ee38822a122a462da487cb38616628f4d184cc0f32206f7e9c312e326fd0/abstracts-0.0.8-py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.0.9":[{"comment_text":"","digests":{"blake2b_256":"267963c9c7cdb57d4a48b84b976178dd4aa1470f9c441c75e39392918115aad4","md5":"6d4aaab5cc6feb4af55b52271e2b95dc","sha256":"6a7ead2e8b1ff4505608611273724e9be9c5f31f9e644a2b848c4bfbf8853c9a"},"downloads":-1,"filename":"abstracts-0.0.9-py3-none-any.whl","has_sig":false,"md5_digest":"6d4aaab5cc6feb4af55b52271e2b95dc","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":11543,"upload_time":"2021-08-24T15:10:25","upload_time_iso_8601":"2021-08-24T15:10:25.910801Z","url":"https://files.pythonhosted.org/packages/26/79/63c9c7cdb57d4a48b84b976178dd4aa1470f9c441c75e39392918115aad4/abstracts-0.0.9-py3-none-any.whl","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"934f158ded37e69172bba7987774885629afa9b482857edde5e87399c89e7d66","md5":"fe52602af3b447a9ccfcf57eedd660d3","sha256":"acc01ff56c8a05fb88150dff62e295f9071fc33388c42f1dfc2787a8d1c755ff"},"downloads":-1,"filename":"abstracts-0.0.12-py3-none-any.whl","has_sig":false,"md5_digest":"fe52602af3b447a9ccfcf57eedd660d3","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":11690,"upload_time":"2021-09-02T18:04:30","upload_time_iso_8601":"2021-09-02T18:04:30.770781Z","url":"https://files.pythonhosted.org/packages/93/4f/158ded37e69172bba7987774885629afa9b482857edde5e87399c89e7d66/abstracts-0.0.12-py3-none-any.whl","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
