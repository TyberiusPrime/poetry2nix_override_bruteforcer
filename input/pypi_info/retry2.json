{"info":{"author":"Andrei Suiu | eSAMTrade","author_email":"andrei.suiu@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 4 - Beta","Intended Audience :: Developers","License :: OSI Approved :: Apache Software License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 2.6","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3","Programming Language :: Python :: Implementation :: PyPy","Topic :: Software Development"],"description":"retry2\n======\n\n.. image:: https://img.shields.io/pypi/dm/retry.svg?maxAge=2592000\n        :target: https://pypi.python.org/pypi/retry2/\n\n.. image:: https://img.shields.io/pypi/v/retry.svg?maxAge=2592000\n        :target: https://pypi.python.org/pypi/retry2/\n\n.. image:: https://img.shields.io/pypi/l/retry2.svg?maxAge=2592000\n        :target: https://pypi.python.org/pypi/retry2/\n\n\nEasy to use retry decorator.\n\n\n[This is a fork of https://github.com/invl/retry which is not maintained anymore]\n\nFeatures\n--------\n\n- No external dependency (stdlib only).\n- (Optionally) Preserve function signatures (`pip install decorator`).\n- Original traceback, easy to debug.\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    $ pip install retry2\n\n\nAPI\n---\n\nretry decorator\n^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    def retry(exceptions=Exception, tries=-1, delay=0, max_delay=None, backoff=1, jitter=0, logger=logging_logger,\n              on_exception=None):\n        \"\"\"Return a retry decorator.\n\n        :param exceptions: an exception or a tuple of exceptions to catch. default: Exception.\n        :param tries: the maximum number of attempts. default: -1 (infinite).\n        :param delay: initial delay between attempts. default: 0.\n        :param max_delay: the maximum value of delay. default: None (no limit).\n        :param backoff: multiplier applied to delay between attempts. default: 1 (no backoff).\n        :param jitter: extra seconds added to delay between attempts. default: 0.\n                       fixed if a number, random if a range tuple (min, max)\n        :param logger: logger.warning(fmt, error, delay) will be called on failed attempts.\n                       default: retry.logging_logger. if None, logging is disabled.\n        :param on_exception: handler called when exception occurs. will be passed the captured\n                             exception as an argument. further retries are stopped when handler\n                             returns True. default: None\n        \"\"\"\n\nVarious retrying logic can be achieved by combination of arguments.\n\n\nExamples\n\"\"\"\"\"\"\"\"\n\n.. code:: python\n\n    from retry import retry\n\n.. code:: python\n\n    @retry()\n    def make_trouble():\n        '''Retry until succeed'''\n\n.. code:: python\n\n    @retry(ZeroDivisionError, tries=3, delay=2)\n    def make_trouble():\n        '''Retry on ZeroDivisionError, raise error after 3 attempts, sleep 2 seconds between attempts.'''\n\n.. code:: python\n\n    @retry((ValueError, TypeError), delay=1, backoff=2)\n    def make_trouble():\n        '''Retry on ValueError or TypeError, sleep 1, 2, 4, 8, ... seconds between attempts.'''\n\n.. code:: python\n\n    @retry((ValueError, TypeError), delay=1, backoff=2, max_delay=4)\n    def make_trouble():\n        '''Retry on ValueError or TypeError, sleep 1, 2, 4, 4, ... seconds between attempts.'''\n\n.. code:: python\n\n    @retry(ValueError, delay=1, jitter=1)\n    def make_trouble():\n        '''Retry on ValueError, sleep 1, 2, 3, 4, ... seconds between attempts.'''\n\n.. code:: python\n\n    # If you enable logging, you can get warnings like 'ValueError, retrying in\n    # 1 seconds'\n    if __name__ == '__main__':\n        import logging\n        logging.basicConfig()\n        make_trouble()\n\nretry_call\n^^^^^^^^^^\n\n.. code:: python\n\n    def retry_call(f, fargs=None, fkwargs=None, exceptions=Exception, tries=-1, delay=0, max_delay=None, backoff=1,\n                   jitter=0, logger=logging_logger, on_exception=None):\n        \"\"\"\n        Calls a function and re-executes it if it failed.\n\n        :param f: the function to execute.\n        :param fargs: the positional arguments of the function to execute.\n        :param fkwargs: the named arguments of the function to execute.\n        :param exceptions: an exception or a tuple of exceptions to catch. default: Exception.\n        :param tries: the maximum number of attempts. default: -1 (infinite).\n        :param delay: initial delay between attempts. default: 0.\n        :param max_delay: the maximum value of delay. default: None (no limit).\n        :param backoff: multiplier applied to delay between attempts. default: 1 (no backoff).\n        :param jitter: extra seconds added to delay between attempts. default: 0.\n                       fixed if a number, random if a range tuple (min, max)\n        :param logger: logger.warning(fmt, error, delay) will be called on failed attempts.\n                       default: retry.logging_logger. if None, logging is disabled.\n        :param on_exception: handler called when exception occurs. will be passed the captured\n                             exception as an argument. further retries are stopped when handler\n                             returns True. default: None\n        :returns: the result of the f function.\n        \"\"\"\n\nThis is very similar to the decorator, except that it takes a function and its arguments as parameters. The use case behind it is to be able to dynamically adjust the retry arguments.\n\n.. code:: python\n\n    import requests\n\n    from retry.api import retry_call\n\n\n    def make_trouble(service, info=None):\n        if not info:\n            info = ''\n        r = requests.get(service + info)\n        return r.text\n\n\n    def what_is_my_ip(approach=None):\n        if approach == \"optimistic\":\n            tries = 1\n        elif approach == \"conservative\":\n            tries = 3\n        else:\n            # skeptical\n            tries = -1\n        result = retry_call(make_trouble, fargs=[\"http://ipinfo.io/\"], fkwargs={\"info\": \"ip\"}, tries=tries)\n        print(result)\n\n    what_is_my_ip(\"conservative\")\n\n\n\n","description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/eSAMTrade/retry","keywords":"","license":"Apache License 2.0","maintainer":"","maintainer_email":"","name":"retry2","package_url":"https://pypi.org/project/retry2/","platform":null,"project_url":"https://pypi.org/project/retry2/","project_urls":{"Homepage":"https://github.com/eSAMTrade/retry"},"provides_extra":null,"release_url":"https://pypi.org/project/retry2/0.9.5/","requires_dist":["decorator (>=3.4.2)"],"requires_python":">=2.6","summary":"Easy to use retry decorator.","version":"0.9.5","yanked":false,"yanked_reason":null},"last_serial":16395149,"releases":{"0.9.3":[{"comment_text":"","digests":{"blake2b_256":"03bb8d2d57987d629874fb1877ccdba019a30dca6136019eca58a3e8160684e7","md5":"96f147759fab700183e56991c7c54272","sha256":"dad23fe6222fe72436a244f2fb893a5c498831283d96df008e4811d8485b55bd"},"downloads":-1,"filename":"retry2-0.9.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"96f147759fab700183e56991c7c54272","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=2.6","size":5714,"upload_time":"2021-07-26T14:08:25","upload_time_iso_8601":"2021-07-26T14:08:25.059362Z","url":"https://files.pythonhosted.org/packages/03/bb/8d2d57987d629874fb1877ccdba019a30dca6136019eca58a3e8160684e7/retry2-0.9.3-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.9.4":[{"comment_text":"","digests":{"blake2b_256":"011abe6b2b055200e12afb7a31c081b62fca6cd44fc59f802b5388ae26093ef7","md5":"866957f9da2e8047d172e431cb98c2fc","sha256":"2947017008e37a9a2d7506080e137d6a1d53f5a172bb2b036d7a9987aa1e3fb5"},"downloads":-1,"filename":"retry2-0.9.4-py2.py3-none-any.whl","has_sig":false,"md5_digest":"866957f9da2e8047d172e431cb98c2fc","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=2.6","size":5945,"upload_time":"2022-08-07T17:36:59","upload_time_iso_8601":"2022-08-07T17:36:59.369161Z","url":"https://files.pythonhosted.org/packages/01/1a/be6b2b055200e12afb7a31c081b62fca6cd44fc59f802b5388ae26093ef7/retry2-0.9.4-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.9.5":[{"comment_text":"","digests":{"blake2b_256":"97491cae6d9b932378cc75f902fa70648945b7ea7190cb0d09ff83b47de3e60a","md5":"e77f87363fd687459fe1cac546d626bf","sha256":"f7fee13b1e15d0611c462910a6aa72a8919823988dd0412152bc3719c89a4e55"},"downloads":-1,"filename":"retry2-0.9.5-py2.py3-none-any.whl","has_sig":false,"md5_digest":"e77f87363fd687459fe1cac546d626bf","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=2.6","size":6013,"upload_time":"2023-01-11T21:49:08","upload_time_iso_8601":"2023-01-11T21:49:08.397085Z","url":"https://files.pythonhosted.org/packages/97/49/1cae6d9b932378cc75f902fa70648945b7ea7190cb0d09ff83b47de3e60a/retry2-0.9.5-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"97491cae6d9b932378cc75f902fa70648945b7ea7190cb0d09ff83b47de3e60a","md5":"e77f87363fd687459fe1cac546d626bf","sha256":"f7fee13b1e15d0611c462910a6aa72a8919823988dd0412152bc3719c89a4e55"},"downloads":-1,"filename":"retry2-0.9.5-py2.py3-none-any.whl","has_sig":false,"md5_digest":"e77f87363fd687459fe1cac546d626bf","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=2.6","size":6013,"upload_time":"2023-01-11T21:49:08","upload_time_iso_8601":"2023-01-11T21:49:08.397085Z","url":"https://files.pythonhosted.org/packages/97/49/1cae6d9b932378cc75f902fa70648945b7ea7190cb0d09ff83b47de3e60a/retry2-0.9.5-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
