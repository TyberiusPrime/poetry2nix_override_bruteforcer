{"info":{"author":"Claire Vacherot","author_email":"claire.vacherot@orange.com","bugtrack_url":null,"classifiers":["License :: OSI Approved :: GNU General Public License v3 (GPLv3)","Operating System :: OS Independent","Programming Language :: Python :: 3"],"description":"BOF \n===\n\nBOF (Boiboite Opener Framework) is a testing framework for field protocols\nimplementations and devices. It is a Python 3.6+ library that provides means to\nsend, receive, create, parse and manipulate frames from supported protocols.\n\nThe library currently provides discovery and extended testing features for\n**KNXnet/IP**, which is our focus, but it can be extended to other types of BMS\nor industrial network protocols. It also provides passive discovery functions\nfor industrial networks relying on KNXnet/IP, LLDP and Profinet DCP.\n\n**Please note that targeting industrial systems can have a severe impact on\npeople, industrial operations and buildings and that BOF must be used\ncarefully.**\n\n[![GitHub license](https://img.shields.io/badge/License-GPL%20v3-blue.svg)](https://github.com/Orange-Cyberdefense/bof/blob/master/LICENSE)\n[![GitHub release](https://img.shields.io/github/release/Orange-Cyberdefense/bof.svg)](https://gitHub.com/Orange-Cyberdefense/bof/releases/)\n\nInstall\n-------\n\n### From PyPI\n\n```\npip install boiboite-opener-framework\n```\n\nhttps://pypi.org/project/boiboite-opener-framework/\n\n### Manual install\n\n```\ngit clone https://github.com/Orange-Cyberdefense/bof.git\n```\n\nInstall requirements with:\n\n```\npip install -r requirements.txt\n```\n\nProtocol implementations use [Scapy](https://scapy.readthedocs.io/en/latest/)'s format.\n\nGetting started\n---------------\n\nBOF is a Python 3.6+ library that should be imported in scripts.\n\n```python\nimport bof\nfrom bof.layers import profinet, knx\nfrom bof.layers.knx import KnxPacket\n```\n\nThere are three ways to use BOF, not all of them are available depending on the\nlayer:\n\n* **Automated**: Import or call directly higher-level functions from layers. No\n    knowledge about the protocol required.\n\n* **Standard**: Craft packets from layers to interact with remote devices. Basic\n    knowledge about the protocol requred.\n\n* **Playful**: Play with packets, misuse the protocol (we fuzz devices with it).\n  The end user should have started digging into the protocol's specifications.\n\n|              | Automated | Standard | Playful |\n|--------------|-----------|----------|---------|\n| KNX          | X         | X        | X       |\n| LLDP         | X         |          |         |\n| Modbus       |           | X        | X       |\n| Profinet DCP | X         |          |         |\n\n\nNow you can start using BOF!\n\nTL;DR\n-----\n\n### Several ways yo discover devices on a network\n\n* Passive discovery from the discovery module:\n\n```python\nfrom bof.modules.discovery import *\n\ndevices = passive_discovery(iface=\"eth0\", verbose=True)\n```\n\n* Device discovery using a layer's high-level function\n\n```python\nfrom bof.layers.knx import search\n\ndevices = search()\nfor device in devices:\n    print(device)\n```\n\n* Create and send your own discovery packet:\n\n```\nfrom bof.layers.knx import *\n\npkt = KNXPacket(type=\"search request\")\nresponses = KNXnet.multicast(pkt, (KNX_MULTICAST_ADDR, KNX_PORT))\nfor response, _ in responses:\n    print(KNXPacket(response))\n```\n\n### Send and receive packets\n\n```python\nfrom bof.layers.knx import KNXnet, KNXPacket, SID\nfrom bof import BOFNetworkError\n\ntry:\n    knxnet = KNXnet().connect(\"192.168.1.242\", 3671)\n    pkt = KNXPacket(type=SID.description_request,\n                    ip_address=knxnet.source_address,\n                    port=knxnet.source_port)\n    pkt.show2()\n    response, _ = knxnet.sr(pkt)\n    response.show2()\nexcept BOFNetworkError as bne:\n    pass\nfinally:\n    knxnet.disconnect()\n```\n\n### Craft your own packets\n\n```python\nfrom bof.layers.knx import KNXPacket, SID\nfrom bof.layers.raw_scapy.knx import LcEMI\n\npkt = KNXPacket(type=SID.description_request)\npkt.ip_address = b\"\\x01\\x01\"\npkt.port = 99999 # Yes it's too large\npkt.append(LcEMI())\npkt.show2() # This may output something strange\n```\n\n> A recipient device will probably not respond to that, but at least you know\n  that BOF won't stop you from messing with your packets.\n\n### Interface with Scapy\n\nBOF relies on Scapy for protocol implementations, with an additional layer that\ntranslates BOF code to changes on Scapy packets and fields. Why? Because BOF may\nslightly modify or override Scapyâ€™s internal behavior.\n\nYou do not need to know how to use Scapy to use BOF, however if you do, you are\nfree to interact with the Scapy packet directly as well.\n\n```python\npacket = KNXPacket(type=connect_request)\npacket.field1 = 1 # Applying additional BOF operations (ex: change types)\npacket.scapy_pkt.field1 = 1 # Direct access to Scapy Packet object\n```\n\nComplete documentation\n----------------------\n\n[![made-with-sphinx-doc](https://img.shields.io/badge/Made%20with-Sphinx-1f425f.svg)](https://www.sphinx-doc.org/)\n\nLink to the documentation: https://bof.readthedocs.io\n\nThe HTML user manual and source code documentation can be built from the\nrepository:\n \n1. `$> cd docs && make html`\n2. Navigate to `[path to repository]/docs/_build/html/index.html`\n\nExample scripts are in folder `examples`.\n\nContributing\n------------\n\nContributors are welcome! BOF is still an ongoing project, which relies on\nindustrial network protocol implementations in Scapy format. You can first\ncontribute by contributing to Scapy and adding new protocols (\"layers\"). Or, you\ncan contribute by integrating a Scapy protocol to BOF. The documentation\nexplains how to do it. Furthermore, there will still be room for higher-level\nfunctions that will make tests easier or implement known attack against\nprotocols or protocol implementations.\n\nHere a few things to know beforehand:\n\n* We like clean code and expect contributions to be PEP-8 compliant as much as\n  possible (even though we don't test for it). New code should be readable\n  easily and maintainable. And remember: if you need to use \"and\" while\n  explaining what your function does, then you can probably split it.\n\n* Please write Unit tests and make sure existing ones still pass! They are in\n  `tests/`. You can run all unit tests with: `python -m unittest discover -s\n  tests`\n\nReporting issues\n----------------\n\nReport bugs, ask questions or request for missing documentation and new features\nby submitting an issue with GitHub. For bugs, please describe your problem as\nclearly as you can.\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/Orange-Cyberdefense/bof","keywords":"","license":"","maintainer":"","maintainer_email":"","name":"boiboite-opener-framework","package_url":"https://pypi.org/project/boiboite-opener-framework/","platform":null,"project_url":"https://pypi.org/project/boiboite-opener-framework/","project_urls":{"Homepage":"https://github.com/Orange-Cyberdefense/bof"},"provides_extra":null,"release_url":"https://pypi.org/project/boiboite-opener-framework/1.2.0/","requires_dist":["scapy (==2.5.0rc1)","packaging"],"requires_python":">=3.6","summary":"Industrial network protocols testing framework","version":"1.2.0","yanked":false,"yanked_reason":null},"last_serial":14975183,"releases":{"1.0.3":[{"comment_text":"","digests":{"blake2b_256":"fbf955f8c558559d9a926fc7a29392b8aa973596a03e3c3ffbf407aa4e968a0e","md5":"5d02db7fede188b979b1662ff27ff008","sha256":"478caa19e95b2054402cdb4e1055482c077a2a0b553047cde14ed7fb5755457b"},"downloads":-1,"filename":"boiboite_opener_framework-1.0.3-py3-none-any.whl","has_sig":false,"md5_digest":"5d02db7fede188b979b1662ff27ff008","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":58357,"upload_time":"2021-11-03T14:37:45","upload_time_iso_8601":"2021-11-03T14:37:45.702567Z","url":"https://files.pythonhosted.org/packages/fb/f9/55f8c558559d9a926fc7a29392b8aa973596a03e3c3ffbf407aa4e968a0e/boiboite_opener_framework-1.0.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1c0372d2617d4543000d3a46c3e35734ca8103a11da29820fe112537c48d5b13","md5":"87b3d155d37451ee97a0e60501c19a25","sha256":"de8b40066ed014cc3900e289332c9e6db66cb596b4bff12bf7a9f9b34eaa814b"},"downloads":-1,"filename":"boiboite-opener-framework-1.0.3.tar.gz","has_sig":false,"md5_digest":"87b3d155d37451ee97a0e60501c19a25","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":51518,"upload_time":"2021-11-03T14:37:47","upload_time_iso_8601":"2021-11-03T14:37:47.551568Z","url":"https://files.pythonhosted.org/packages/1c/03/72d2617d4543000d3a46c3e35734ca8103a11da29820fe112537c48d5b13/boiboite-opener-framework-1.0.3.tar.gz","yanked":false,"yanked_reason":null}],"1.2.0":[{"comment_text":"","digests":{"blake2b_256":"a92236e627f69a3f4d8467d8053163d54341fad887632e922373c43359b23dd0","md5":"8cc0037fa4f3f34ad430ce29420e4cbf","sha256":"b067c405af5c81299be37ffa53c4760b7dc2eed35a24f4ffaa1236dd52cf48b2"},"downloads":-1,"filename":"boiboite_opener_framework-1.2.0-py3-none-any.whl","has_sig":false,"md5_digest":"8cc0037fa4f3f34ad430ce29420e4cbf","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":98837,"upload_time":"2022-09-02T14:19:57","upload_time_iso_8601":"2022-09-02T14:19:57.822080Z","url":"https://files.pythonhosted.org/packages/a9/22/36e627f69a3f4d8467d8053163d54341fad887632e922373c43359b23dd0/boiboite_opener_framework-1.2.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e2dafed1999355e796cc9e295a4ec3e2a9ef558c4440736f30b6d0b72e20be75","md5":"3a117b56db5d78ad6fe3f4b7a1a64a8f","sha256":"330e30db69fe69d2a434e6a012720b38f1971604374e56d366036a15521d0236"},"downloads":-1,"filename":"boiboite-opener-framework-1.2.0.tar.gz","has_sig":false,"md5_digest":"3a117b56db5d78ad6fe3f4b7a1a64a8f","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":88732,"upload_time":"2022-09-02T14:19:59","upload_time_iso_8601":"2022-09-02T14:19:59.474508Z","url":"https://files.pythonhosted.org/packages/e2/da/fed1999355e796cc9e295a4ec3e2a9ef558c4440736f30b6d0b72e20be75/boiboite-opener-framework-1.2.0.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"a92236e627f69a3f4d8467d8053163d54341fad887632e922373c43359b23dd0","md5":"8cc0037fa4f3f34ad430ce29420e4cbf","sha256":"b067c405af5c81299be37ffa53c4760b7dc2eed35a24f4ffaa1236dd52cf48b2"},"downloads":-1,"filename":"boiboite_opener_framework-1.2.0-py3-none-any.whl","has_sig":false,"md5_digest":"8cc0037fa4f3f34ad430ce29420e4cbf","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":98837,"upload_time":"2022-09-02T14:19:57","upload_time_iso_8601":"2022-09-02T14:19:57.822080Z","url":"https://files.pythonhosted.org/packages/a9/22/36e627f69a3f4d8467d8053163d54341fad887632e922373c43359b23dd0/boiboite_opener_framework-1.2.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e2dafed1999355e796cc9e295a4ec3e2a9ef558c4440736f30b6d0b72e20be75","md5":"3a117b56db5d78ad6fe3f4b7a1a64a8f","sha256":"330e30db69fe69d2a434e6a012720b38f1971604374e56d366036a15521d0236"},"downloads":-1,"filename":"boiboite-opener-framework-1.2.0.tar.gz","has_sig":false,"md5_digest":"3a117b56db5d78ad6fe3f4b7a1a64a8f","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":88732,"upload_time":"2022-09-02T14:19:59","upload_time_iso_8601":"2022-09-02T14:19:59.474508Z","url":"https://files.pythonhosted.org/packages/e2/da/fed1999355e796cc9e295a4ec3e2a9ef558c4440736f30b6d0b72e20be75/boiboite-opener-framework-1.2.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
