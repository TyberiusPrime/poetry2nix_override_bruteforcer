{"info":{"author":"Maximilian Otten","author_email":"maximilian.otten@iml.fraunhofer.de","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Intended Audience :: Developers","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],"description":"# related-mltoolbox\n(fork from) https://github.com/genomoncology/related\n\n`Related` is a Python library for creating nested object models\nthat can be serialized to and de-serialized from\nnested python dictionaries.\nWhen paired with other libraries (e.g. [PyYAML]),\n`Related` object models can be used to convert to and from\nnested data formats (e.g. JSON, YAML).\n\nExample use cases for `related` object models include:\n\n* Configuration file reading and writing\n* REST API message response generation and request processing\n* Object-Document Mapping for a document store (e.g. MongoDB, elasticsearch)\n* Data import parsing or export generation\n\n<br/><br/>\n\n<img src='./.images/flow.png' width='750' align=\"center\" />\n\n\n# Installation\n\nInstall using `pip`...\n\n    pip install related-mltoolbox\n\n\n# First Example\n\n```python\nimport related\nimport yaml\n\n@related.immutable\nclass Person(object):\n    first_name = related.StringField()\n    last_name = related.StringField()\n\n@related.immutable\nclass RoleModels(object):\n    scientists = related.SetField(Person)\n\npeople = [Person(first_name=\"Grace\", last_name=\"Hopper\"),\n          Person(first_name=\"Katherine\", last_name=\"Johnson\"),\n          Person(first_name=\"Katherine\", last_name=\"Johnson\")]\n\nprint(related.to_yaml(obj=RoleModels(scientists=people), yaml_package=yaml, dumper_cls=yaml.yaml.Dumper))\n```\n\nYields:\n\n```yaml\nscientists:\n- first_name: Grace\n  last_name: Hopper\n- first_name: Katherine\n  last_name: Johnson\n```\n\n\n# Second Example\n\nThe below example is based off of this [Docker Compose example].\nIt shows how a YAML file can be loaded into an object model, tested, and\nthen generated back into a string that matches the original YAML.\n\n```yaml\nversion: '2'\nservices:\n  web:\n    build: .\n    ports:\n    - 5000:5000\n    volumes:\n    - .:/code\n  redis:\n    image: redis\n```\n\nBelow is the `related` object model that represents the above configuration.\nNotice how the name-based mapping of services (i.e. web, redis) are\nrepresented by the model.\n\n\n```python\nimport related\n\n\n@related.immutable\nclass Service(object):\n    name = related.StringField()\n    image = related.StringField(required=False)\n    build = related.StringField(required=False)\n    ports = related.SequenceField(str, required=False)\n    volumes = related.SequenceField(str, required=False)\n    command = related.StringField(required=False)\n\n\n@related.immutable\nclass Compose(object):\n    version = related.StringField(required=False, default=None)\n    services = related.MappingField(Service, \"name\", required=False)\n```\n\nThe above yaml can then be loaded by using one of the convenience\nmethod and then round-tripped back to yaml to check that the format\nhas been maintained. The `related` module uses `OrderedDict` objects\nin order to maintain sort order by default.\n\n```python\nfrom os.path import join, dirname\n\nimport yaml\nfrom model import Compose\nfrom related import to_yaml, from_yaml, to_model\n\nYML_FILE = join(dirname(__file__), \"docker-compose.yml\")\n\n\ndef test_compose_from_yml():\n    original_yaml = open(YML_FILE).read().strip()\n    yml_dict = from_yaml(stream=original_yaml, yaml_package=yaml, loader_cls=yaml.Loader)\n    compose = to_model(Compose, yml_dict)\n\n    assert compose.version == '2'\n    assert compose.services['web'].ports == [\"5000:5000\"]\n    assert compose.services['redis'].image == \"redis\"\n\n    generated_yaml = to_yaml(compose,\n                             suppress_empty_values=True,\n                             suppress_map_key_values=True).strip()\n\n    assert original_yaml == generated_yaml\n```\n\n\n# More Examples\n\nMore examples can be found by reviewing the [tests/] folder of this project.\nBelow are links and descriptions of the tests provided so far.\n\n| Example        | description                                                        |\n| -------------- | ------------------------------------------------------------------ |\n| [Example 00]   | First example above that shows how SetFields work.                 |\n| [Example 01]   | Second example above that demonstrates YAML (de)serialization.     |\n| [Example 02]   | Compose v3 with long-form ports and singledispatch to_dict         |\n| [Example 03]   | A single class (Company) with a bunch of value fields.             |\n| [Example 04]   | A multi-class object model with Enum class value field.            |\n| [Example 05]   | Handling of renaming of attributes including Python keywords.      |\n| [Example 06]   | Basic JSON (de)serialization with TimeField, DateTimeField and DecimalField.     |\n| [Example 07]   | Function decorator that converts inputs to obj and outputs to dict |\n| [Example 08]   | Handle self-referencing and out-of-order references using strings. |\n\n\n# Documentation\n\nBelow is a quick version of documentation until more time can be dedicated.\n\n\n## Overview\n\nThe [attrs] library is the underlying engine for `related`.\nAs explained in [this article by Glyph],\n`attrs` cleanly and cleverly\neliminates a lot of the boilerplate\nrequired when creating Python classes\nwithout using inheritance.\nSome core functionality provided by attrs:\n\n* Generated initializer method\n    (``__init__``)\n* Generated comparison methods\n    (``__eq__``, ``__ne__``, ``__lt__``, ``__le__``, ``__gt__``, ``__ge__`` )\n* Human-readable representation method\n    (``__repr__``)\n* Attribute converter and validator framework\n\n\nThe `related` project is an opinionated layer\nbuilt on top of the `attrs` library\nthat provides the following:\n\n* Value fields that handle both validation and conversion\n  to and from basic data types like\n  ``str``, ``float``, and ``bool``.\n* Nested fields that support relationships such as\n  Child, Sequences, Mappings, and Sets of objects.\n* ``to_dict`` function that converts nested object graphs\n  to python dictionaries.\n  Made customizable (without resorting to [monkey-patching])\n  by the [singledispatch library].\n* ``to_model`` function that instantiated classes\n  used by the de-serialization process going from\n  python dictionaries to the related model.\n* Conversion helper functions\n  (``to_yaml``, ``from_yaml``, ``to_json``, ``from_json``)\n  for easily going between\n  related models and data formats.\n* ``@mutable`` and ``@immutable`` for decorating classes\n  as related models without the need for inheritance increasing\n  maintainability and flexibility.\n\n\n## Class Decorators\n\n| decorator             | description                                                      |\n| --------------        | ---------------------------------------------------------------- |\n| @mutable              | Activate a related class that instantiates changeable objects.   |\n| @immutable            | Activate a related class that instantiates unchangeable objects. |\n\nSee the [decorators.py] file to view the source code until proper\ndocumentation is generated.\n\n\n## Field Types\n\n| field type            | description                                                      |\n| --------------        | ---------------------------------------------------------------- |\n| BooleanField          | `bool` value field.                                              |\n| ChildField            | Child object of a specified type `cls`.                          |\n| DateField             | `date` field formatted using `formatter`.                        |\n| DateTimeField         | `datetime` field formatted using `formatter`.                    |\n| TimeField             | `time` field formatted using `formatter`.                    |\n| FloatField            | `float` value field.                                             |\n| IntegerField          | `int` value field.                                               |\n| MappingField(cls,key) | Dictionary of objects of type `cls` index by `key` field values. |\n| RegexField(regex)     | `str` value field that is validated by re.match(`regex`).        |\n| SequenceField(cls)    | List of objects all of specified type `cls`.                     |\n| SetField              | Set of objects all of a specified type `cls`.                    |\n| StringField           | `str` value field.                                               |\n| URLField              | [ParseResult] object.                                            |\n| UUIDField             | [UUID] object, will create [uuid4] by default if not specified.  |\n\n\nAdding your own field types is fairly straightforward\ndue to the power of the underlying `attrs` project.\nSee the [fields.py] file to see how the above are constructed.\n\n\n## Functions\n\n| function                        | description                                           |\n| ------------------------------- | ----------------------------------------------------- |\n| from_json(s,cls)                | Convert a JSON string or stream into specified class. |\n| from_yaml(s, yaml, loader, cls) | Convert a YAML string or stream into specified class. |\n| is_related(obj)                 | Returns True if object is @mutable or @immutable.     |\n| to_dict(obj)                    | Singledispatch function for converting to a dict.     |\n| to_json(obj)                    | Convert object to a (pretty) JSON string via to_dict. |\n| to_model(cls,value)             | Convert a value to a `cls` instance.                  |\n| to_yaml(obj, yaml, dumper)      | Convert object to a YAML string via to_dict.          |\n\n\nSee the [functions.py] file to view the source code until proper\ndocumentation is generated.\n\n\n# Credits/Prior Art\n\nThe `related` project has been heavily influenced by the following\nprojects that might be worth looking at if `related` doesn't meet your needs.\n\n* [attrs] - The engine that powers `related` functionality.\n* [Django ORM] - Object-relational mapping for Django that inspired `related's` design.\n* [cattrs] - Alternative take for handling nested-objects using `attrs`.\n* [addict] and [box] - Python dictionary wrappers that do not require a model.\n* [Jackson] - Java-based technology for serializing and de-serializing objects.\n\n\n# License\n\nThe MIT License (MIT)\n\nCopyright (c) [Open Logistics Foundation]\n\nCopyright (c) 2017 [Ian Maurer], [Genomoncology LLC]\n\n\n\n\n[flow-image]: ./.images/flow.png\n[decorators.py]: ./src/related/decorators.py\n[fields.py]: ./src/related/fields.py\n[functions.py]: ./src/related/functions.py\n[attrs]: http://attrs.readthedocs.io/en/stable/\n[this article by Glyph]: https://glyph.twistedmatrix.com/2016/08/attrs.html\n[Genomoncology LLC]: http://genomoncology.com\n[Ian Maurer]: https://github.com/imaurer\n[Open Logistics Foundation]: https://www.openlogisticsfoundation.org/\n[singledispatch library]: https://pypi.python.org/pypi/singledispatch\n[monkey-patching]: http://stackoverflow.com/questions/5626193/what-is-a-monkey-patch\n[Django ORM]: https://docs.djangoproject.com/en/1.11/topics/db/models/\n[UUID]: https://docs.python.org/3/library/uuid.html#uuid.UUID\n[uuid4]: https://docs.python.org/3/library/uuid.html#uuid.uuid4\n[ParseResult]: https://docs.python.org/2/library/urlparse.html#urlparse.ParseResult\n[cattrs]: http://cattrs.readthedocs.io/en/latest/readme.html\n[addict]: https://github.com/mewwts/addict\n[box]: https://pypi.python.org/pypi/python-box\n[Jackson]: https://github.com/FasterXML/jackson\n[Docker Compose example]: https://docs.docker.com/compose/gettingstarted/#step-3-define-services-in-a-compose-file\n[PyYAML]: https://pypi.python.org/pypi/PyYAML\n\n[tests/]: ./tests/\n[Example 00]: ./tests/ex00_sets_hashes\n[Example 01]: ./tests/ex01_compose_v2\n[Example 02]: ./tests/ex02_compose_v3.2\n[Example 03]: ./tests/ex03_company\n[Example 04]: ./tests/ex04_contact\n[Example 05]: ./tests/ex05_field_names\n[Example 06]: ./tests/ex06_json\n[Example 07]: ./tests/ex07_serializer\n[Example 08]: ./tests/ex08_self_reference\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://git.openlogisticsfoundation.org/silicon-economy/base/ml-toolbox/related-mltoolbox","keywords":"related,object,models,yaml,json,dict,nested","license":"MIT","maintainer":"","maintainer_email":"","name":"related-mltoolbox","package_url":"https://pypi.org/project/related-mltoolbox/","platform":null,"project_url":"https://pypi.org/project/related-mltoolbox/","project_urls":{"Documentation":"https://git.openlogisticsfoundation.org/silicon-economy/base/ml-toolbox/related-mltoolbox/-/blob/main/README.md","Homepage":"https://git.openlogisticsfoundation.org/silicon-economy/base/ml-toolbox/related-mltoolbox","Repository":"https://git.openlogisticsfoundation.org/silicon-economy/base/ml-toolbox/related-mltoolbox"},"provides_extra":null,"release_url":"https://pypi.org/project/related-mltoolbox/1.1.0/","requires_dist":["PyYAML","attrs","future","python-dateutil"],"requires_python":">=3.6.2,<4.0.0","summary":"(Fork from related) Related: Straightforward nested object models in Python","version":"1.1.0","yanked":false,"yanked_reason":null},"last_serial":19059948,"releases":{"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"8eea9622d5eea1d016b3b91a853f3c69ee7902226766dd8a5aa0b960269e874b","md5":"07c711378e0098a27b4d723194fc2d76","sha256":"b8f28d864610b785c052977a886301189014f7a565df39a5ee5de1860c7e78c3"},"downloads":-1,"filename":"related_mltoolbox-1.0.1-py3-none-any.whl","has_sig":false,"md5_digest":"07c711378e0098a27b4d723194fc2d76","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6.2,<4.0.0","size":16399,"upload_time":"2022-07-07T10:30:39","upload_time_iso_8601":"2022-07-07T10:30:39.932674Z","url":"https://files.pythonhosted.org/packages/8e/ea/9622d5eea1d016b3b91a853f3c69ee7902226766dd8a5aa0b960269e874b/related_mltoolbox-1.0.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"26f14bae1f828fec47987ed5214b1531f974e271c27b4ba76e573e95e4cf89c2","md5":"3f35fffa4cc2ab2fbcabbc192747eb66","sha256":"4984ea18368be6e337ec1d6879165214926e7e4f621428802cda90fcf7ef4d05"},"downloads":-1,"filename":"related-mltoolbox-1.0.1.tar.gz","has_sig":false,"md5_digest":"3f35fffa4cc2ab2fbcabbc192747eb66","packagetype":"sdist","python_version":"source","requires_python":">=3.6.2,<4.0.0","size":19290,"upload_time":"2022-07-07T10:30:41","upload_time_iso_8601":"2022-07-07T10:30:41.929149Z","url":"https://files.pythonhosted.org/packages/26/f1/4bae1f828fec47987ed5214b1531f974e271c27b4ba76e573e95e4cf89c2/related-mltoolbox-1.0.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.2":[{"comment_text":"","digests":{"blake2b_256":"b8c6ba8ec389254e118edf9990bb265477103d00e47c1413cd0592239bd6ce49","md5":"e32b250c9d4dbfb6b8c660bda65f7c3f","sha256":"009fa1bf6ec4dbb320817129be51dad15e6bb099a328fb6d59cfbeda9e446fd1"},"downloads":-1,"filename":"related_mltoolbox-1.0.2-py3-none-any.whl","has_sig":false,"md5_digest":"e32b250c9d4dbfb6b8c660bda65f7c3f","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6.2,<4.0.0","size":16384,"upload_time":"2023-02-03T09:28:26","upload_time_iso_8601":"2023-02-03T09:28:26.659066Z","url":"https://files.pythonhosted.org/packages/b8/c6/ba8ec389254e118edf9990bb265477103d00e47c1413cd0592239bd6ce49/related_mltoolbox-1.0.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4264e54ee236b4a28e6356c46fb976aa7decf7ea2cc7a8529108d93f19a79c15","md5":"f2b0a9a491eadb57143eff04f5bc28bf","sha256":"ab906c970cca0b0172165954a1d5cbc0c5cd0ee1baa4c3e9996794f109e4ec3a"},"downloads":-1,"filename":"related_mltoolbox-1.0.2.tar.gz","has_sig":false,"md5_digest":"f2b0a9a491eadb57143eff04f5bc28bf","packagetype":"sdist","python_version":"source","requires_python":">=3.6.2,<4.0.0","size":19209,"upload_time":"2023-02-03T09:28:28","upload_time_iso_8601":"2023-02-03T09:28:28.524917Z","url":"https://files.pythonhosted.org/packages/42/64/e54ee236b4a28e6356c46fb976aa7decf7ea2cc7a8529108d93f19a79c15/related_mltoolbox-1.0.2.tar.gz","yanked":false,"yanked_reason":null}],"1.1.0":[{"comment_text":"","digests":{"blake2b_256":"56fbfab8eb590eab2ab6ad46c92c8ec35b7f5d6f6f41eabeb03481bfd8cb3261","md5":"a1c36272854807f6b3eb65f123923d0a","sha256":"9433c31121b60b69dff15294ad8548f0d7aba24cfdeaba95c954303dc7b16f23"},"downloads":-1,"filename":"related_mltoolbox-1.1.0-py3-none-any.whl","has_sig":false,"md5_digest":"a1c36272854807f6b3eb65f123923d0a","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6.2,<4.0.0","size":16314,"upload_time":"2023-07-27T12:17:34","upload_time_iso_8601":"2023-07-27T12:17:34.720478Z","url":"https://files.pythonhosted.org/packages/56/fb/fab8eb590eab2ab6ad46c92c8ec35b7f5d6f6f41eabeb03481bfd8cb3261/related_mltoolbox-1.1.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"52f202068de0c7fdcca78c5d1ef815303b62ed209b61d1f34460441cf09f3d63","md5":"2676c4dfb87957dda45bc0135429d0ef","sha256":"3b80d585a8016298fcddd41ec47fd17ae5b7ff351e1cbcf52f7097d2aa43fd89"},"downloads":-1,"filename":"related_mltoolbox-1.1.0.tar.gz","has_sig":false,"md5_digest":"2676c4dfb87957dda45bc0135429d0ef","packagetype":"sdist","python_version":"source","requires_python":">=3.6.2,<4.0.0","size":19195,"upload_time":"2023-07-27T12:17:36","upload_time_iso_8601":"2023-07-27T12:17:36.639149Z","url":"https://files.pythonhosted.org/packages/52/f2/02068de0c7fdcca78c5d1ef815303b62ed209b61d1f34460441cf09f3d63/related_mltoolbox-1.1.0.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"56fbfab8eb590eab2ab6ad46c92c8ec35b7f5d6f6f41eabeb03481bfd8cb3261","md5":"a1c36272854807f6b3eb65f123923d0a","sha256":"9433c31121b60b69dff15294ad8548f0d7aba24cfdeaba95c954303dc7b16f23"},"downloads":-1,"filename":"related_mltoolbox-1.1.0-py3-none-any.whl","has_sig":false,"md5_digest":"a1c36272854807f6b3eb65f123923d0a","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6.2,<4.0.0","size":16314,"upload_time":"2023-07-27T12:17:34","upload_time_iso_8601":"2023-07-27T12:17:34.720478Z","url":"https://files.pythonhosted.org/packages/56/fb/fab8eb590eab2ab6ad46c92c8ec35b7f5d6f6f41eabeb03481bfd8cb3261/related_mltoolbox-1.1.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"52f202068de0c7fdcca78c5d1ef815303b62ed209b61d1f34460441cf09f3d63","md5":"2676c4dfb87957dda45bc0135429d0ef","sha256":"3b80d585a8016298fcddd41ec47fd17ae5b7ff351e1cbcf52f7097d2aa43fd89"},"downloads":-1,"filename":"related_mltoolbox-1.1.0.tar.gz","has_sig":false,"md5_digest":"2676c4dfb87957dda45bc0135429d0ef","packagetype":"sdist","python_version":"source","requires_python":">=3.6.2,<4.0.0","size":19195,"upload_time":"2023-07-27T12:17:36","upload_time_iso_8601":"2023-07-27T12:17:36.639149Z","url":"https://files.pythonhosted.org/packages/52/f2/02068de0c7fdcca78c5d1ef815303b62ed209b61d1f34460441cf09f3d63/related_mltoolbox-1.1.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
