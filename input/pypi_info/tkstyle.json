{"info":{"author":"Pyrustic Evangelist","author_email":"rusticalex@yahoo.com","bugtrack_url":null,"classifiers":["License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python :: 3"],"description":"# TkStyle\n`TkStyle` is a `Python` library to style your `GUI` with a modern and pragmatic paradigm. It's part of the [Pyrustic Open Ecosystem](https://pyrustic.github.io).\n\n\n<!-- Image -->\n<div align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/pyrustic/misc/master/media/cyberpunk-cover.png\" alt=\"Figure\" width=\"970\">\n    <p align=\"center\">\n    <i> Cyberpunk theme made with TkStyle </i>\n    </p>\n</div>\n\n\n[Installation](#installation) | [Reference](https://github.com/pyrustic/tkstyle/tree/master/docs/reference#readme) | [Cyberpunk](https://github.com/pyrustic/cyberpunk-theme)\n\n## Overview\n`TkStyle` is a styling library for `Tkinter` that takes advantage of the autocomplete feature of IDEs so that you hardly need any prior Tkinter styling knowledge.\n\nEach Tkinter widget has a set of options that allow you to define its look. For example, the `tkinter.Button` widget has the `background` and `foreground` options to change the background color and the text color on the button respectively.\n\n`TkStyle` reproduces for each widget a class which bears the name of the widget and which has attributes representing the options to modify the appearance of the widget.\n\nHere is the definition of the `tkstyle.Button` class which is supposed to modify the look of the `tkinter.Button` widget:\n\n```python\nclass Button(_Style):\n    _CLASS_NAME = \"Button\"\n\n    def __init__(self):\n        super().__init__()\n        self.activeBackground = None  # \"#ececec\"\n        self.activeForeground = None  # \"#000000\"\n        self.anchor = None  # \"center\"\n        self.background = None  # \"#d9d9d9\"\n        self.borderWidth = None  # 1\n        self.compound = None  # \"none\"\n        self.default = None  # \"disabled\"\n        self.disabledForeground = None  # \"#a3a3a3\"\n        self.font = None  # TkDefaultFont\n        self.foreground = None  # \"#000000\"\n        self.height = None  # 0\n        self.highlightBackground = None  # \"#d9d9d9\"\n        self.highlightColor = None  # \"#000000\"\n        self.highlightThickness = None  # 1\n        self.justify = None  # \"center\"\n        self.padX = None  # 3\n        self.padY = None  # 1\n        self.relief = None  # \"raised\"\n        self.repeatDelay = None  # 0\n        self.repeatInterval = None  # 0\n        self.state = None  # \"normal\"\n        self.underline = None  # -1\n        self.width = None  # 0\n        self.wrapLength = None  # 0\n```\n\nSince a style is a `Python` object and thanks to the autocomplete feature of the IDEs, we no longer need to know by heart the options to change the look of widgets:\n\n<!-- Image -->\n<div align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/pyrustic/misc/master/media/tkstyle-figure-1.png\" alt=\"Figure\" width=\"470\">\n    <p align=\"center\">\n    <i> <a href=\"https://www.jetbrains.com/pycharm/\">PyCharm</a>'s autocomplete </i>\n    </p>\n</div>\n\n\nSince Tkinter is a mature GUI toolkit, it sometimes indicates the legal values of an option when you don't set the correct value. For example, if you don't know which values the `relief` option  of the `tkinter.Button` widget accepts, you can put an arbitrary string like `oops` and at runtime Tkinter will raise an informative exception:\n\n```bash\n_tkinter.TclError: bad relief \"oops\": must be flat, groove, raised, ridge, solid, or sunken\n```\n\nThese details combined make `TkStyle` a great modern paradigm for GUI styling that will save you a lot of time.\n\n\n## Style an instance of a widget\n\nThis code snippet shows how to style the instance of a widget:\n\n```python\nimport tkinter as tk\nimport tkstyle\n\n\nroot = tk.Tk()\n\n# create and pack button_1\nbutton_1 = tk.Button(root, text=\"Button 1\")\nbutton_1.pack(side=tk.LEFT, padx=5, pady=5)\n# create and pack button_2\nbutton_2 = tk.Button(root, text=\"Button 2\")\nbutton_2.pack(side=tk.LEFT, padx=5, pady=5)\n\n# create the button_style\nbutton_style = tkstyle.Button()\nbutton_style.background = \"tomato\"\nbutton_style.foreground = \"white\"\n# apply the button_style to button_2\nbutton_style.target(button_2)\n\n# mainloop\nroot.mainloop()\n\n```\n\n<!-- Image -->\n<div align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/pyrustic/misc/master/media/tkstyle-figure-2.png\" alt=\"Figure\" width=\"196\">\n    <p align=\"center\">\n    <i> Custom style applied to a button </i>\n    </p>\n</div>\n\n\n\n## Style a megawidget\nA megawidget is a custom widget built with other native widgets.\n\nFor example, `megawidget.Table` is built with `tkinter.Listbox`, `tkinter.Label`, and `tkinter.Scrollbar`.\n\n<!-- Image -->\n<div align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/pyrustic/misc/master/media/tkstyle-figure-3.png\" alt=\"Figure\" width=\"357\">\n    <p align=\"center\">\n    <i> Table </i>\n    </p>\n</div>\n\n\n\nSince a megawidget is not a native widget, it does not have a class that represents it in `TkStyle`.\n\nSo how do you style a megawidget ?\n\nWell, megawidgets subclass `tkinter.Frame` or `tkinter.Toplevel` and `TkStyle` allows styles to be nested like [Matryoshka dolls](https://en.wikipedia.org/wiki/Matryoshka_doll).\n\nHere's how we can style the Listboxes that make up a Table:\n\n```python\nimport tkinter as tk\nimport tkstyle\nfrom megawidget.table import Table\n\n\nroot = tk.Tk()\n\n# table titles\ntitles = (\"Username\", \"Password\")\n# table data\ndata = [(\"Jackieman\", \"Ydfj87mAfw\"),\n        (\"Salvador\", \"Dqmpa644dga\")]\n# create and pack table\ntable = Table(root, titles=titles, data=data)\ntable.pack()\n\n# create the listbox_style\nlistbox_style = tkstyle.Listbox()\nlistbox_style.background = \"tomato\"\nlistbox_style.foreground = \"white\"\n\n# create the table_style\ntable_style = tkstyle.Frame()  # megawidgets subclass tk.Frame\n# add the listbox_style to the table_style by specifying\n# a XResources-like pattern that matches Listboxes: \"*Listbox\"\ntable_style.add(listbox_style, pattern=\"*Listbox\")\n# apply the table_style to table\ntable_style.target(table)\n\n# mainloop\nroot.mainloop()\n\n```\n\n\n<!-- Image -->\n<div align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/pyrustic/misc/master/media/tkstyle-figure-4.png\" alt=\"Figure\" width=\"357\">\n    <p align=\"center\">\n    <i> Table with a custom style </i>\n    </p>\n</div>\n\n## Create a theme\nA theme is a collection of styles. While a style allows you to change the look of a particular (mega)widget instance, a theme allows you to apply a style to multiple (mega)widgets or also to a particular widget.\n\nIn this example, we'll create a theme that changes the look of all the buttons:\n\n```python\nimport tkinter as tk\nimport tkstyle\n\n\ndef get_button_style():\n    # create the button_style\n    button_style = tkstyle.Button()\n    button_style.background = \"tomato\"\n    button_style.foreground = \"white\"\n    return button_style\n\n\ndef get_theme():\n    # create the theme\n    theme = tkstyle.Theme()\n    # add the button_style to the theme\n    button_style = get_button_style()\n    theme.add(button_style, pattern=\"*Button\")\n    # the previous line could be this:\n    # theme.add(button_style)\n    # When you don't set a pattern, by default, the added style\n    # class name prefixed with \"*\" is used as pattern\n    return theme\n\n\nroot = tk.Tk()\ntheme = get_theme()\ntheme.target(root)\n\n# create and pack button_1\nbutton_1 = tk.Button(root, text=\"Button 1\")\nbutton_1.pack(side=tk.LEFT, padx=5, pady=5)\n# create and pack button_2\nbutton_2 = tk.Button(root, text=\"Button 2\")\nbutton_2.pack(side=tk.LEFT, padx=5, pady=5)\n\n# mainloop\nroot.mainloop()\n\n```\n\n\n\n<!-- Image -->\n<div align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/pyrustic/misc/master/media/tkstyle-figure-5.png\" alt=\"Figure\" width=\"196\">\n    <p align=\"center\">\n    <i> Custom theme for buttons </i>\n    </p>\n</div>\n\nIn this other example, the theme contains a style that targets a particular instance of `tkinter.Button`:\n\n```python\nimport tkinter as tk\nimport tkstyle\n\n\ndef get_button_style():\n    # create the button_style\n    button_style = tkstyle.Button()\n    button_style.background = \"tomato\"\n    button_style.foreground = \"white\"\n    return button_style\n\n\ndef get_theme():\n    # create the theme\n    theme = tkstyle.Theme()\n    # add the button_style to the theme\n    button_style = get_button_style()\n    theme.add(button_style, pattern=\"*mybutton\")\n    return theme\n\n\nroot = tk.Tk()\ntheme = get_theme()\ntheme.target(root)\n\n# create and pack button_1\nbutton_1 = tk.Button(root, text=\"Button 1\")\nbutton_1.pack(side=tk.LEFT, padx=5, pady=5)\n# create and pack button_2\nbutton_2 = tk.Button(root, name=\"mybutton\", text=\"Button 2\")\nbutton_2.pack(side=tk.LEFT, padx=5, pady=5)\n\n# mainloop\nroot.mainloop()\n\n```\n\n\n<!-- Image -->\n<div align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/pyrustic/misc/master/media/tkstyle-figure-6.png\" alt=\"Figure\" width=\"196\">\n    <p align=\"center\">\n    <i> Custom theme but constrained to fit to button_2 </i>\n    </p>\n</div>\n\nSo in short:\n- You don't need to know the options by heart to customize the look of a widget.\n- You don't need to learn yet another DSL.\n- `TkStyle` uses object oriented programming and takes advantage of your IDE.\n- There is a flag that allows TkStyle to forgive your mistakes (by default ignore_error = True), so your app doesn't crash just because you misspelled a color name.\n- You can determine which widgets used a given style since a style is just a Python object and therefore your IDE can locate usages.\n- You can use code organization best practices to manage the styling aspect of your project since `TkStyle` lets you use object oriented programming.\n\nI invite you to check out the [Cyberpunk dark theme](https://github.com/pyrustic/cyberpunk-theme) which uses the `TkStyle` library.\n\n```bash\n$ pip install cyberpunk-theme\n```\n\n```python\nimport tkinter as tk\nfrom cyberpunk_theme import Cyberpunk\nfrom cyberpunk_theme.widget.button import get_button_style_4\n\n\nroot = tk.Tk()\n# apply the Cyberpunk theme to the GUI\ncyberpunk_theme = Cyberpunk()\ncyberpunk_theme.target(root)\n\n# write your awesome code here\n# ...\n# ...\n\nbutton = tk.Button(root, text=\"Button\")\nbutton.pack()\n\n# do you need to set dynamically a specific style to a button ?\n# there are 10 styles for buttons ! from the black to the red style !\nbutton_style_4 = get_button_style_4()\nbutton_style_4.target(button)\n\n# mainloop\nroot.mainloop()\n```\n\n## Installation\n### First time\nInstall for the first time:\n\n```bash\n$ pip install tkstyle\n```\n\n### Upgrade\nTo upgrade `TkStyle`:\n\n```bash\n$ pip install tkstyle --upgrade --upgrade-strategy eager\n```\n\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/pyrustic/tkstyle","keywords":"theme,style,theme-builder,app,gui,library,frontend,productivity,pyrustic,theme,desktop-application,lightweight","license":"MIT","maintainer":"Pyrustic Evangelist","maintainer_email":"rusticalex@yahoo.com","name":"tkstyle","package_url":"https://pypi.org/project/tkstyle/","platform":null,"project_url":"https://pypi.org/project/tkstyle/","project_urls":{"Homepage":"https://github.com/pyrustic/tkstyle"},"provides_extra":null,"release_url":"https://pypi.org/project/tkstyle/0.0.6/","requires_dist":null,"requires_python":">=3.5","summary":"Create styles and themes for your Python desktop applications","version":"0.0.6","yanked":false,"yanked_reason":null},"last_serial":13243097,"releases":{"0.0.1":[{"comment_text":"","digests":{"blake2b_256":"fbb39f0b295ca5d546c70e9174445189f76d7f9010783dce0ae136d445747297","md5":"a7460ce01f52aefa85483e09c1ec93ff","sha256":"53050aad28e2292e073210f4159bb281aa8a67fdced6b25c64e92a007627125a"},"downloads":-1,"filename":"tkstyle-0.0.1-py3-none-any.whl","has_sig":false,"md5_digest":"a7460ce01f52aefa85483e09c1ec93ff","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":7605,"upload_time":"2021-07-08T12:19:31","upload_time_iso_8601":"2021-07-08T12:19:31.277022Z","url":"https://files.pythonhosted.org/packages/fb/b3/9f0b295ca5d546c70e9174445189f76d7f9010783dce0ae136d445747297/tkstyle-0.0.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1f14abde9a2c6ea2519ed72118a030bb6600a7ea6445900d99e1d3f43992ff04","md5":"c70c9236340319969cfba2e68e0f68c0","sha256":"a53c1aef3063ccfab0c8012ae364e868f1ab59de5d6bbc3e0e81fefa9513f423"},"downloads":-1,"filename":"tkstyle-0.0.1.tar.gz","has_sig":false,"md5_digest":"c70c9236340319969cfba2e68e0f68c0","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":5731,"upload_time":"2021-07-08T12:19:33","upload_time_iso_8601":"2021-07-08T12:19:33.372838Z","url":"https://files.pythonhosted.org/packages/1f/14/abde9a2c6ea2519ed72118a030bb6600a7ea6445900d99e1d3f43992ff04/tkstyle-0.0.1.tar.gz","yanked":false,"yanked_reason":null}],"0.0.2":[{"comment_text":"","digests":{"blake2b_256":"b0219f4fe70427f72ea2595b610aa63340601ec9f9eb00c2f6a7d7a031547b45","md5":"4a7ef7a325ba50358a94db754ad31a8b","sha256":"dbef8fcda72f39d19344f88c0314db9f99ab112a7a2f87f4c8e12579dd555256"},"downloads":-1,"filename":"tkstyle-0.0.2-py3-none-any.whl","has_sig":false,"md5_digest":"4a7ef7a325ba50358a94db754ad31a8b","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":14675,"upload_time":"2021-07-16T19:56:35","upload_time_iso_8601":"2021-07-16T19:56:35.110714Z","url":"https://files.pythonhosted.org/packages/b0/21/9f4fe70427f72ea2595b610aa63340601ec9f9eb00c2f6a7d7a031547b45/tkstyle-0.0.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"2af3306b2eded1a347b86c42733cffcae0e0a0639b5cdeb1e7ad539b88876546","md5":"d4583c5e1ed78f6b6b1aeadea100e8cc","sha256":"4d7422d11f7052e6cc8235bd59b6daf17754bca3e9823024b707c527012609ca"},"downloads":-1,"filename":"tkstyle-0.0.2.tar.gz","has_sig":false,"md5_digest":"d4583c5e1ed78f6b6b1aeadea100e8cc","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":15830,"upload_time":"2021-07-16T19:56:37","upload_time_iso_8601":"2021-07-16T19:56:37.568859Z","url":"https://files.pythonhosted.org/packages/2a/f3/306b2eded1a347b86c42733cffcae0e0a0639b5cdeb1e7ad539b88876546/tkstyle-0.0.2.tar.gz","yanked":false,"yanked_reason":null}],"0.0.3":[{"comment_text":"","digests":{"blake2b_256":"73d7499f7fd56e90b5a61d349e708ee5ae5e096f220b8570c314fa966e327698","md5":"ff55c376299ed7f60745ac02f56494e6","sha256":"fa0bf29af6bb93887bc6daae736a4d5a505b2525ee42b8e7b6b59dc91e13791b"},"downloads":-1,"filename":"tkstyle-0.0.3-py3-none-any.whl","has_sig":false,"md5_digest":"ff55c376299ed7f60745ac02f56494e6","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":16713,"upload_time":"2021-09-01T18:21:04","upload_time_iso_8601":"2021-09-01T18:21:04.990773Z","url":"https://files.pythonhosted.org/packages/73/d7/499f7fd56e90b5a61d349e708ee5ae5e096f220b8570c314fa966e327698/tkstyle-0.0.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"dbea4b05145b09b7f35fa4e5a1f9b0f2d69cf3b010524b7b73f7d17f7c92134c","md5":"5e5d5043bf33a035ff3f3c48e50daef1","sha256":"0d332cf9958e75c59004238e39658346e763f9c76c635cf10fe4ad5c4b1ec154"},"downloads":-1,"filename":"tkstyle-0.0.3.tar.gz","has_sig":false,"md5_digest":"5e5d5043bf33a035ff3f3c48e50daef1","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":13578,"upload_time":"2021-09-01T18:21:07","upload_time_iso_8601":"2021-09-01T18:21:07.453486Z","url":"https://files.pythonhosted.org/packages/db/ea/4b05145b09b7f35fa4e5a1f9b0f2d69cf3b010524b7b73f7d17f7c92134c/tkstyle-0.0.3.tar.gz","yanked":false,"yanked_reason":null}],"0.0.4":[{"comment_text":"","digests":{"blake2b_256":"203cfea25db2c36294161ebce8228969e7939d254106d9c51ea78a9cc939654a","md5":"c2b7a367cf471b21af08e93253941219","sha256":"31db5d06e663b92177ef19140c04fe3868b314618a1897480452278f03dd4e7a"},"downloads":-1,"filename":"tkstyle-0.0.4-py3-none-any.whl","has_sig":false,"md5_digest":"c2b7a367cf471b21af08e93253941219","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":18217,"upload_time":"2021-11-16T18:57:54","upload_time_iso_8601":"2021-11-16T18:57:54.082450Z","url":"https://files.pythonhosted.org/packages/20/3c/fea25db2c36294161ebce8228969e7939d254106d9c51ea78a9cc939654a/tkstyle-0.0.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"0252943d3c4fb4a0a6c9c559ede2ef3489287028dd51a0b59df61e86557bfcb1","md5":"ea869037b105f60e4ecd10270485083b","sha256":"ed8b2f4427f594d37431702b93fc15dfbe283a39a95f1ae18077a5d3a4c6f130"},"downloads":-1,"filename":"tkstyle-0.0.4.tar.gz","has_sig":false,"md5_digest":"ea869037b105f60e4ecd10270485083b","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":13417,"upload_time":"2021-11-16T18:57:57","upload_time_iso_8601":"2021-11-16T18:57:57.604886Z","url":"https://files.pythonhosted.org/packages/02/52/943d3c4fb4a0a6c9c559ede2ef3489287028dd51a0b59df61e86557bfcb1/tkstyle-0.0.4.tar.gz","yanked":false,"yanked_reason":null}],"0.0.5":[{"comment_text":"","digests":{"blake2b_256":"6c28a62b60ea229821bc5fb0ef8eb83a407e645606d23a21981c7192d35a944f","md5":"bcd016cdbeb2dbdecf82659210fda106","sha256":"0b2a07491880f9074a310d56da8106f15ce8b3b87b1523b82208508f6318bb9f"},"downloads":-1,"filename":"tkstyle-0.0.5-py3-none-any.whl","has_sig":false,"md5_digest":"bcd016cdbeb2dbdecf82659210fda106","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":18363,"upload_time":"2021-11-16T20:23:14","upload_time_iso_8601":"2021-11-16T20:23:14.512188Z","url":"https://files.pythonhosted.org/packages/6c/28/a62b60ea229821bc5fb0ef8eb83a407e645606d23a21981c7192d35a944f/tkstyle-0.0.5-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"43e81e2f426eb15baf0ab966f3b42d155ec7b19fab6cc28c198fc14e0fc4026b","md5":"b51f41bda1f3e5675af14a133af2641a","sha256":"647b64d7ff0c0292a88051407b7ba2673b120f09df67925d249b76082bbb145f"},"downloads":-1,"filename":"tkstyle-0.0.5.tar.gz","has_sig":false,"md5_digest":"b51f41bda1f3e5675af14a133af2641a","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":13495,"upload_time":"2021-11-16T20:23:16","upload_time_iso_8601":"2021-11-16T20:23:16.434566Z","url":"https://files.pythonhosted.org/packages/43/e8/1e2f426eb15baf0ab966f3b42d155ec7b19fab6cc28c198fc14e0fc4026b/tkstyle-0.0.5.tar.gz","yanked":false,"yanked_reason":null}],"0.0.6":[{"comment_text":"","digests":{"blake2b_256":"58439ae3de29a3aa8263d01e08d508a53bf3eb198aa5946674c9e60ab68239e4","md5":"615c8a9f0253eda0692e30eaf94ab990","sha256":"91195640c60040819b7d6c4c569b3fd24975d42eb12c18174bcd2b641a817681"},"downloads":-1,"filename":"tkstyle-0.0.6-py3-none-any.whl","has_sig":false,"md5_digest":"615c8a9f0253eda0692e30eaf94ab990","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":18544,"upload_time":"2022-03-21T20:43:14","upload_time_iso_8601":"2022-03-21T20:43:14.013649Z","url":"https://files.pythonhosted.org/packages/58/43/9ae3de29a3aa8263d01e08d508a53bf3eb198aa5946674c9e60ab68239e4/tkstyle-0.0.6-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"521afae8c3b21dcc3e38c56c638329efc5a1123753ef68fcc390950b6491e062","md5":"3f32a2ac04a359b2c27900e4f7a809a9","sha256":"1318c36ba85e2e63fd8c8a333690a9b57064b4fd792513b47e0d51626a7570dc"},"downloads":-1,"filename":"tkstyle-0.0.6.tar.gz","has_sig":false,"md5_digest":"3f32a2ac04a359b2c27900e4f7a809a9","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":12070,"upload_time":"2022-03-21T20:43:16","upload_time_iso_8601":"2022-03-21T20:43:16.357996Z","url":"https://files.pythonhosted.org/packages/52/1a/fae8c3b21dcc3e38c56c638329efc5a1123753ef68fcc390950b6491e062/tkstyle-0.0.6.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"58439ae3de29a3aa8263d01e08d508a53bf3eb198aa5946674c9e60ab68239e4","md5":"615c8a9f0253eda0692e30eaf94ab990","sha256":"91195640c60040819b7d6c4c569b3fd24975d42eb12c18174bcd2b641a817681"},"downloads":-1,"filename":"tkstyle-0.0.6-py3-none-any.whl","has_sig":false,"md5_digest":"615c8a9f0253eda0692e30eaf94ab990","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":18544,"upload_time":"2022-03-21T20:43:14","upload_time_iso_8601":"2022-03-21T20:43:14.013649Z","url":"https://files.pythonhosted.org/packages/58/43/9ae3de29a3aa8263d01e08d508a53bf3eb198aa5946674c9e60ab68239e4/tkstyle-0.0.6-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"521afae8c3b21dcc3e38c56c638329efc5a1123753ef68fcc390950b6491e062","md5":"3f32a2ac04a359b2c27900e4f7a809a9","sha256":"1318c36ba85e2e63fd8c8a333690a9b57064b4fd792513b47e0d51626a7570dc"},"downloads":-1,"filename":"tkstyle-0.0.6.tar.gz","has_sig":false,"md5_digest":"3f32a2ac04a359b2c27900e4f7a809a9","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":12070,"upload_time":"2022-03-21T20:43:16","upload_time_iso_8601":"2022-03-21T20:43:16.357996Z","url":"https://files.pythonhosted.org/packages/52/1a/fae8c3b21dcc3e38c56c638329efc5a1123753ef68fcc390950b6491e062/tkstyle-0.0.6.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
