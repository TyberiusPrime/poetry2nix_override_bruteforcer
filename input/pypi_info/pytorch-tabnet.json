{"info":{"author":"","author_email":"","bugtrack_url":null,"classifiers":["Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],"description":"# README\n\n# TabNet : Attentive Interpretable Tabular Learning\n\nThis is a pyTorch implementation of Tabnet (Arik, S. O., & Pfister, T. (2019). TabNet: Attentive Interpretable Tabular Learning. arXiv preprint arXiv:1908.07442.) https://arxiv.org/pdf/1908.07442.pdf. Please note that some different choices have been made overtime to improve the library which can differ from the orginal paper.\n\n<!--- BADGES: START --->\n[![CircleCI](https://circleci.com/gh/dreamquark-ai/tabnet.svg?style=svg)](https://circleci.com/gh/dreamquark-ai/tabnet)\n\n[![PyPI version](https://badge.fury.io/py/pytorch-tabnet.svg)](https://badge.fury.io/py/pytorch-tabnet)\n\n![PyPI - Downloads](https://img.shields.io/pypi/dm/pytorch-tabnet)\n\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/pytorch-tabnet?logo=pypi&style=flat&color=blue)][#pypi-package]\n\n[![Conda - Platform](https://img.shields.io/conda/pn/conda-forge/pytorch-tabnet?logo=anaconda&style=flat)][#conda-forge-package]\n\n[![Conda (channel only)](https://img.shields.io/conda/vn/conda-forge/pytorch-tabnet?logo=anaconda&style=flat&color=orange)][#conda-forge-package]\n\n[![GitHub - License](https://img.shields.io/github/license/dreamquark-ai/tabnet?logo=github&style=flat&color=green)][#github-license]\n\n[#github-license]: https://github.com/dreamquark-ai/tabnet/blob/main/LICENSE\n[#pypi-package]: https://pypi.org/project/pytorch-tabnet/\n[#conda-forge-package]: https://anaconda.org/conda-forge/pytorch-tabnet\n<!--- BADGES: END --->\n\nAny questions ? Want to contribute ? To talk with us ? You can join us on [Slack](https://join.slack.com/t/mltooling/shared_invite/zt-fxaj0qk7-SWy2_~EWyhj4x9SD6gbRvg)\n\n# Installation\n\n## Easy installation\n\nYou can install using `pip` or `conda` as follows.\n\n**with pip**\n\n```sh\npip install pytorch-tabnet\n```\n\n**with conda**\n\n```sh\nconda install -c conda-forge pytorch-tabnet\n```\n\n## Source code\n\nIf you wan to use it locally within a docker container:\n\n- `git clone git@github.com:dreamquark-ai/tabnet.git`\n\n- `cd tabnet` to get inside the repository\n\n-----------------\n\n#### CPU only\n\n- `make start` to build and get inside the container\n\n#### GPU\n\n- `make start-gpu` to build and get inside the GPU container\n\n-----------------\n\n- `poetry install` to install all the dependencies, including jupyter\n\n- `make notebook` inside the same terminal. You can then follow the link to a jupyter notebook with tabnet installed.\n\n# What is new ?\n\n- from version **> 4.0** attention is now embedding aware. This aims to maintain a good attention mechanism even with large number of embedding. It is also now possible to specify attention groups (using `grouped_features`). Attention is now done at the group level and not feature level. This is especially useful if a dataset has a lot of columns coming from on single source of data (exemple: a text column transformed using TD-IDF).\n\n# Contributing\n\nWhen contributing to the TabNet repository, please make sure to first discuss the change you wish to make via a new or already existing issue.\n\nOur commits follow the rules presented [here](https://www.conventionalcommits.org/en/v1.0.0/).\n\n# What problems does pytorch-tabnet handle?\n\n- TabNetClassifier : binary classification and multi-class classification problems\n- TabNetRegressor : simple and multi-task regression problems\n- TabNetMultiTaskClassifier:  multi-task multi-classification problems\n\n# How to use it?\n\nTabNet is now scikit-compatible, training a TabNetClassifier or TabNetRegressor is really easy.\n\n```python\nfrom pytorch_tabnet.tab_model import TabNetClassifier, TabNetRegressor\n\nclf = TabNetClassifier()  #TabNetRegressor()\nclf.fit(\n  X_train, Y_train,\n  eval_set=[(X_valid, y_valid)]\n)\npreds = clf.predict(X_test)\n```\n\nor for TabNetMultiTaskClassifier :\n\n```python\nfrom pytorch_tabnet.multitask import TabNetMultiTaskClassifier\nclf = TabNetMultiTaskClassifier()\nclf.fit(\n  X_train, Y_train,\n  eval_set=[(X_valid, y_valid)]\n)\npreds = clf.predict(X_test)\n```\n\nThe targets on `y_train/y_valid` should contain a unique type (e.g. they must all be strings or integers).\n\n### Default eval_metric\n\nA few classic evaluation metrics are implemented (see further below for custom ones):\n- binary classification metrics : 'auc', 'accuracy', 'balanced_accuracy', 'logloss'\n- multiclass classification : 'accuracy', 'balanced_accuracy', 'logloss'\n- regression: 'mse', 'mae', 'rmse', 'rmsle'\n\n\nImportant Note : 'rmsle' will automatically clip negative predictions to 0, because the model can predict negative values.\nIn order to match the given scores, you need to use `np.clip(clf.predict(X_predict), a_min=0, a_max=None)` when doing predictions.\n\n\n### Custom evaluation metrics\n\nYou can create a metric for your specific need. Here is an example for gini score (note that you need to specifiy whether this metric should be maximized or not):\n\n```python\nfrom pytorch_tabnet.metrics import Metric\nfrom sklearn.metrics import roc_auc_score\n\nclass Gini(Metric):\n    def __init__(self):\n        self._name = \"gini\"\n        self._maximize = True\n\n    def __call__(self, y_true, y_score):\n        auc = roc_auc_score(y_true, y_score[:, 1])\n        return max(2*auc - 1, 0.)\n\nclf = TabNetClassifier()\nclf.fit(\n  X_train, Y_train,\n  eval_set=[(X_valid, y_valid)],\n  eval_metric=[Gini]\n)\n\n```\n\nA specific customization example notebook is available here : https://github.com/dreamquark-ai/tabnet/blob/develop/customizing_example.ipynb\n\n# Semi-supervised pre-training\n\nAdded later to TabNet's original paper, semi-supervised pre-training is now available via the class `TabNetPretrainer`:\n\n```python\n# TabNetPretrainer\nunsupervised_model = TabNetPretrainer(\n    optimizer_fn=torch.optim.Adam,\n    optimizer_params=dict(lr=2e-2),\n    mask_type='entmax' # \"sparsemax\"\n)\n\nunsupervised_model.fit(\n    X_train=X_train,\n    eval_set=[X_valid],\n    pretraining_ratio=0.8,\n)\n\nclf = TabNetClassifier(\n    optimizer_fn=torch.optim.Adam,\n    optimizer_params=dict(lr=2e-2),\n    scheduler_params={\"step_size\":10, # how to use learning rate scheduler\n                      \"gamma\":0.9},\n    scheduler_fn=torch.optim.lr_scheduler.StepLR,\n    mask_type='sparsemax' # This will be overwritten if using pretrain model\n)\n\nclf.fit(\n    X_train=X_train, y_train=y_train,\n    eval_set=[(X_train, y_train), (X_valid, y_valid)],\n    eval_name=['train', 'valid'],\n    eval_metric=['auc'],\n    from_unsupervised=unsupervised_model\n)\n```\n\nThe loss function has been normalized to be independent of `pretraining_ratio`, `batch_size` and the number of features in the problem.\nA self supervised loss greater than 1 means that your model is reconstructing worse than predicting the mean for each feature, a loss bellow 1 means that the model is doing better than predicting the mean.\n\nA complete example can be found within the notebook `pretraining_example.ipynb`.\n\n/!\\ : current implementation is trying to reconstruct the original inputs, but Batch Normalization applies a random transformation that can't be deduced by a single line, making the reconstruction harder. Lowering the `batch_size` might make the pretraining easier.\n\n# Data augmentation on the fly\n\nIt is now possible to apply custom data augmentation pipeline during training.\nTemplates for ClassificationSMOTE and RegressionSMOTE have been added in `pytorch-tabnet/augmentations.py` and can be used as is.\n\n\n# Easy saving and loading\n\nIt's really easy to save and re-load a trained model, this makes TabNet production ready.\n```\n# save tabnet model\nsaving_path_name = \"./tabnet_model_test_1\"\nsaved_filepath = clf.save_model(saving_path_name)\n\n# define new model with basic parameters and load state dict weights\nloaded_clf = TabNetClassifier()\nloaded_clf.load_model(saved_filepath)\n```\n\n# Useful links\n\n- [explanatory video](https://youtu.be/ysBaZO8YmX8)\n- [binary classification examples](https://github.com/dreamquark-ai/tabnet/blob/develop/census_example.ipynb)\n- [multi-class classification examples](https://github.com/dreamquark-ai/tabnet/blob/develop/forest_example.ipynb)\n- [regression examples](https://github.com/dreamquark-ai/tabnet/blob/develop/regression_example.ipynb)\n- [multi-task regression examples](https://github.com/dreamquark-ai/tabnet/blob/develop/multi_regression_example.ipynb)\n- [multi-task multi-class classification examples](https://www.kaggle.com/optimo/tabnetmultitaskclassifier)\n- [kaggle moa 1st place solution using tabnet](https://www.kaggle.com/c/lish-moa/discussion/201510)\n\n## Model parameters\n\n- `n_d` : int (default=8)\n\n    Width of the decision prediction layer. Bigger values gives more capacity to the model with the risk of overfitting.\n    Values typically range from 8 to 64.\n\n- `n_a`: int (default=8)\n\n    Width of the attention embedding for each mask.\n    According to the paper n_d=n_a is usually a good choice. (default=8)\n\n- `n_steps` : int (default=3)\n\n    Number of steps in the architecture (usually between 3 and 10)  \n\n- `gamma` : float  (default=1.3)\n\n    This is the coefficient for feature reusage in the masks.\n    A value close to 1 will make mask selection least correlated between layers.\n    Values range from 1.0 to 2.0.\n\n- `cat_idxs` : list of int (default=[] - Mandatory for embeddings) \n\n    List of categorical features indices.\n\n- `cat_dims` : list of int (default=[] - Mandatory for embeddings)\n\n    List of categorical features number of modalities (number of unique values for a categorical feature)\n    /!\\ no new modalities can be predicted\n\n- `cat_emb_dim` : list of int (optional)\n\n    List of embeddings size for each categorical features. (default =1)\n\n- `n_independent` : int  (default=2)\n\n    Number of independent Gated Linear Units layers at each step.\n    Usual values range from 1 to 5.\n\n- `n_shared` : int (default=2)\n\n    Number of shared Gated Linear Units at each step\n    Usual values range from 1 to 5\n\n- `epsilon` : float  (default 1e-15)\n\n    Should be left untouched.\n\n- `seed` : int (default=0)\n\n    Random seed for reproducibility\n\n- `momentum` : float\n\n    Momentum for batch normalization, typically ranges from 0.01 to 0.4 (default=0.02)\n\n- `clip_value` : float (default None)\n\n    If a float is given this will clip the gradient at clip_value.\n    \n- `lambda_sparse` : float (default = 1e-3)\n\n    This is the extra sparsity loss coefficient as proposed in the original paper. The bigger this coefficient is, the sparser your model will be in terms of feature selection. Depending on the difficulty of your problem, reducing this value could help.\n\n- `optimizer_fn` : torch.optim (default=torch.optim.Adam)\n\n    Pytorch optimizer function\n\n- `optimizer_params`: dict (default=dict(lr=2e-2))\n\n    Parameters compatible with optimizer_fn used initialize the optimizer. Since we have Adam as our default optimizer, we use this to define the initial learning rate used for training. As mentionned in the original paper, a large initial learning rate of ```0.02 ```  with decay is a good option.\n\n- `scheduler_fn` : torch.optim.lr_scheduler (default=None)\n\n    Pytorch Scheduler to change learning rates during training.\n\n- `scheduler_params` : dict\n\n    Dictionnary of parameters to apply to the scheduler_fn. Ex : {\"gamma\": 0.95, \"step_size\": 10}\n\n- `model_name` : str (default = 'DreamQuarkTabNet')\n\n    Name of the model used for saving in disk, you can customize this to easily retrieve and reuse your trained models.\n\n- `verbose` : int (default=1)\n\n    Verbosity for notebooks plots, set to 1 to see every epoch, 0 to get None.\n\n- `device_name` : str (default='auto')\n    'cpu' for cpu training, 'gpu' for gpu training, 'auto' to automatically detect gpu.\n\n- `mask_type: str` (default='sparsemax')\n    Either \"sparsemax\" or \"entmax\" : this is the masking function to use for selecting features.\n\n- `grouped_features: list of list of ints` (default=None)\n    This allows the model to share it's attention accross feature inside a same group.\n    This can be especially useful when your preprocessing generates correlated or dependant features: like if you use a TF-IDF or a PCA on a text column.\n    Note that feature importance will be exactly the same between features on a same group.\n    Please also note that embeddings generated for a categorical variable are always inside a same group. \n\n- `n_shared_decoder` : int (default=1)\n\n    Number of shared GLU block in decoder, this is only useful for `TabNetPretrainer`.\n\n- `n_indep_decoder` : int (default=1)\n\n    Number of independent GLU block in decoder, this is only useful for `TabNetPretrainer`.\n\n## Fit parameters\n\n- `X_train` : np.array or scipy.sparse.csr_matrix\n\n    Training features\n\n- `y_train` : np.array\n\n    Training targets\n\n- `eval_set`: list of tuple  \n\n    List of eval tuple set (X, y).  \n    The last one is used for early stopping  \n\n- `eval_name`: list of str  \n              List of eval set names.  \n\n- `eval_metric` : list of str  \n              List of evaluation metrics.  \n              The last metric is used for early stopping.\n\n- `max_epochs` : int (default = 200)\n\n    Maximum number of epochs for trainng.\n    \n- `patience` : int (default = 10)\n\n    Number of consecutive epochs without improvement before performing early stopping.\n\n    If patience is set to 0, then no early stopping will be performed.\n\n    Note that if patience is enabled, then best weights from best epoch will automatically be loaded at the end of `fit`.\n\n- `weights` : int or dict (default=0)\n\n    /!\\ Only for TabNetClassifier\n    Sampling parameter\n    0 : no sampling\n    1 : automated sampling with inverse class occurrences\n    dict : keys are classes, values are weights for each class\n\n- `loss_fn` : torch.loss or list of torch.loss\n\n    Loss function for training (default to mse for regression and cross entropy for classification)\n    When using TabNetMultiTaskClassifier you can set a list of same length as number of tasks,\n    each task will be assigned its own loss function\n\n- `batch_size` : int (default=1024)\n\n    Number of examples per batch. Large batch sizes are recommended.\n\n- `virtual_batch_size` : int (default=128)\n\n    Size of the mini batches used for \"Ghost Batch Normalization\".\n    /!\\ `virtual_batch_size` should divide `batch_size`\n\n- `num_workers` : int (default=0)\n\n    Number or workers used in torch.utils.data.Dataloader\n\n- `drop_last` : bool (default=False)\n\n    Whether to drop last batch if not complete during training\n\n- `callbacks` : list of callback function  \n        List of custom callbacks\n\n- `pretraining_ratio` : float\n\n        /!\\ TabNetPretrainer Only : Percentage of input features to mask during pretraining.\n\n        Should be between 0 and 1. The bigger the harder the reconstruction task is.\n\n- `warm_start` : bool (default=False)\n    In order to match scikit-learn API, this is set to False.\n    It allows to fit twice the same model and start from a warm start.\n\n- `compute_importance` : bool (default=True)\n\n    Whether to compute feature importance\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/dreamquark-ai/tabnet","keywords":"tabnet,pytorch,neural-networks","license":"","maintainer":"","maintainer_email":"","name":"pytorch-tabnet","package_url":"https://pypi.org/project/pytorch-tabnet/","platform":null,"project_url":"https://pypi.org/project/pytorch-tabnet/","project_urls":{"Documentation":"https://github.com/dreamquark-ai/tabnet","Homepage":"https://github.com/dreamquark-ai/tabnet","Repository":"https://github.com/dreamquark-ai/tabnet"},"provides_extra":null,"release_url":"https://pypi.org/project/pytorch-tabnet/4.1.0/","requires_dist":["numpy (>=1.17)","torch (>=1.3)","tqdm (>=4.36)","scikit_learn (>0.21)","scipy (>1.4)"],"requires_python":">=3.7","summary":"PyTorch implementation of TabNet","version":"4.1.0","yanked":false,"yanked_reason":null},"last_serial":19001935,"releases":{"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"f6fb85e2d723867374139223b281fb7e7d257ad484cd35420289ffc6c3a8dc67","md5":"57cfe56e6c633b33f05eb5341edc9fe7","sha256":"64dadbd92c624bea12ea7ba81cd8c285e8ad5e9b7ed1971436654352f845e608"},"downloads":-1,"filename":"pytorch_tabnet-0.1.0-py3-none-any.whl","has_sig":false,"md5_digest":"57cfe56e6c633b33f05eb5341edc9fe7","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6.8,<4.0.0","size":12695,"upload_time":"2019-10-28T16:36:17","upload_time_iso_8601":"2019-10-28T16:36:17.256873Z","url":"https://files.pythonhosted.org/packages/f6/fb/85e2d723867374139223b281fb7e7d257ad484cd35420289ffc6c3a8dc67/pytorch_tabnet-0.1.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"8474c3fc722ac74286b1ea33fca1007f5f3e6d16a8445b59e6c9ad19f0739089","md5":"67c890cea42c6c48d325f30c20e3fb77","sha256":"aa9d5f33308494f8578ae86ca37662093ba1d23d67ac79d5462e5d0f820520ee"},"downloads":-1,"filename":"pytorch_tabnet-0.1.0.tar.gz","has_sig":false,"md5_digest":"67c890cea42c6c48d325f30c20e3fb77","packagetype":"sdist","python_version":"source","requires_python":">=3.6.8,<4.0.0","size":13471,"upload_time":"2019-10-28T16:36:19","upload_time_iso_8601":"2019-10-28T16:36:19.769130Z","url":"https://files.pythonhosted.org/packages/84/74/c3fc722ac74286b1ea33fca1007f5f3e6d16a8445b59e6c9ad19f0739089/pytorch_tabnet-0.1.0.tar.gz","yanked":false,"yanked_reason":null}],"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"94d148076f4d5d3486f2101ed4f5771dd00ec8b34e647c2be5bddc3525f27a98","md5":"2e9b5cad778db03452ad97da114c504f","sha256":"603dd8e55b32dd29fd82cee584723fec05c399f6aa72a9300dc3e3735bb13d7a"},"downloads":-1,"filename":"pytorch_tabnet-0.1.1-py3-none-any.whl","has_sig":false,"md5_digest":"2e9b5cad778db03452ad97da114c504f","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6.8,<4.0.0","size":12699,"upload_time":"2019-10-28T16:53:31","upload_time_iso_8601":"2019-10-28T16:53:31.532063Z","url":"https://files.pythonhosted.org/packages/94/d1/48076f4d5d3486f2101ed4f5771dd00ec8b34e647c2be5bddc3525f27a98/pytorch_tabnet-0.1.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e3f68252ae176647d677f5c357b90c8edc38f469535d02830cf24cb6bd2aaec0","md5":"3ae5da53d445e559e4d3f971dabb1c20","sha256":"12f85435366a086cf4c3f1cad2add46fb58947e62ce71e4d5b00dcbbe6a81d03"},"downloads":-1,"filename":"pytorch_tabnet-0.1.1.tar.gz","has_sig":false,"md5_digest":"3ae5da53d445e559e4d3f971dabb1c20","packagetype":"sdist","python_version":"source","requires_python":">=3.6.8,<4.0.0","size":13484,"upload_time":"2019-10-28T16:53:33","upload_time_iso_8601":"2019-10-28T16:53:33.255545Z","url":"https://files.pythonhosted.org/packages/e3/f6/8252ae176647d677f5c357b90c8edc38f469535d02830cf24cb6bd2aaec0/pytorch_tabnet-0.1.1.tar.gz","yanked":false,"yanked_reason":null}],"0.1.2":[{"comment_text":"","digests":{"blake2b_256":"f91c1fb71f2b90dffaf5da60be7e25ab74ab2ec6945bfd443cb9b3c6fced39dd","md5":"6b96e7a89df21d60a605d727cd8ad4a6","sha256":"a9d8c9db46c88d4d830a51551ba7f3984857e187eea2edf6ede984ac7c9290a1"},"downloads":-1,"filename":"pytorch_tabnet-0.1.2-py3-none-any.whl","has_sig":false,"md5_digest":"6b96e7a89df21d60a605d727cd8ad4a6","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6.8,<4.0.0","size":13502,"upload_time":"2019-11-06T08:49:02","upload_time_iso_8601":"2019-11-06T08:49:02.604598Z","url":"https://files.pythonhosted.org/packages/f9/1c/1fb71f2b90dffaf5da60be7e25ab74ab2ec6945bfd443cb9b3c6fced39dd/pytorch_tabnet-0.1.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1b3062b421b5e9819a5c6e672c8612be0bff774f8f33355ce39a556b15a80fe8","md5":"c98d4fca7c9611f20eed9379d3d4e76d","sha256":"9161a2a1135fc324039c2d5f056055ec3e38f9d2a37e24dd9bd271f5cfc1c4aa"},"downloads":-1,"filename":"pytorch_tabnet-0.1.2.tar.gz","has_sig":false,"md5_digest":"c98d4fca7c9611f20eed9379d3d4e76d","packagetype":"sdist","python_version":"source","requires_python":">=3.6.8,<4.0.0","size":14250,"upload_time":"2019-11-06T08:49:03","upload_time_iso_8601":"2019-11-06T08:49:03.951020Z","url":"https://files.pythonhosted.org/packages/1b/30/62b421b5e9819a5c6e672c8612be0bff774f8f33355ce39a556b15a80fe8/pytorch_tabnet-0.1.2.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0":[{"comment_text":"","digests":{"blake2b_256":"ae81a4e4cc9c72ba0bd5e74007d958f3df6d634798d2917bff8bdc66fef6b160","md5":"a9b4a2c900933aeb0d96697648d24849","sha256":"4f4eb5c63e5071b37f992d4a0fea4d1520658dc83adcf23bbf39a84fc1dddd30"},"downloads":-1,"filename":"pytorch_tabnet-1.0.0-py3-none-any.whl","has_sig":false,"md5_digest":"a9b4a2c900933aeb0d96697648d24849","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6.8,<4.0.0","size":19002,"upload_time":"2019-12-03T11:40:28","upload_time_iso_8601":"2019-12-03T11:40:28.963462Z","url":"https://files.pythonhosted.org/packages/ae/81/a4e4cc9c72ba0bd5e74007d958f3df6d634798d2917bff8bdc66fef6b160/pytorch_tabnet-1.0.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3e9cd14426a8cef8186d2806989f2c1e78d96cd78addc1574eefc649bb4a474c","md5":"995055c973f515b5cdb6f887d7f21b5d","sha256":"39eb5074390950c85fee25e88084c1c424a13d9f26881f22b3a4579a0e7c6e94"},"downloads":-1,"filename":"pytorch_tabnet-1.0.0.tar.gz","has_sig":false,"md5_digest":"995055c973f515b5cdb6f887d7f21b5d","packagetype":"sdist","python_version":"source","requires_python":">=3.6.8,<4.0.0","size":19931,"upload_time":"2019-12-03T11:40:30","upload_time_iso_8601":"2019-12-03T11:40:30.640775Z","url":"https://files.pythonhosted.org/packages/3e/9c/d14426a8cef8186d2806989f2c1e78d96cd78addc1574eefc649bb4a474c/pytorch_tabnet-1.0.0.tar.gz","yanked":false,"yanked_reason":null}],"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"2c9da1e62164328f34aa1116baa623b03864c6746d93bf0a31d91412ad391820","md5":"2a54568396216277b9c5d6ebfc8db290","sha256":"2776d4225a83afda986af3dbdfce7dfb96fb0539c655caf61942b5b3870d3037"},"downloads":-1,"filename":"pytorch_tabnet-1.0.1-py3-none-any.whl","has_sig":false,"md5_digest":"2a54568396216277b9c5d6ebfc8db290","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6,<4.0","size":19844,"upload_time":"2020-01-20T15:28:22","upload_time_iso_8601":"2020-01-20T15:28:22.479216Z","url":"https://files.pythonhosted.org/packages/2c/9d/a1e62164328f34aa1116baa623b03864c6746d93bf0a31d91412ad391820/pytorch_tabnet-1.0.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"374008729f1f2719287f8c53d84d0c3ed56271ac7722960102266c918a8b38a5","md5":"183ce39df541a3640ab8b32b669f4cc9","sha256":"78dabd3030f36df7f03f7c5a758998727ecab7933fb2bc9c583b430667ec2aad"},"downloads":-1,"filename":"pytorch_tabnet-1.0.1.tar.gz","has_sig":false,"md5_digest":"183ce39df541a3640ab8b32b669f4cc9","packagetype":"sdist","python_version":"source","requires_python":">=3.6,<4.0","size":20733,"upload_time":"2020-01-20T15:28:24","upload_time_iso_8601":"2020-01-20T15:28:24.162036Z","url":"https://files.pythonhosted.org/packages/37/40/08729f1f2719287f8c53d84d0c3ed56271ac7722960102266c918a8b38a5/pytorch_tabnet-1.0.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.2":[{"comment_text":"","digests":{"blake2b_256":"fbd8ee6e3767d81fd43f349a33521a6d9769deb875f41be91e025da681e575c5","md5":"e0d207e8871dff882546ba026cb64390","sha256":"c9a66f073db07ef30daab179b056d596eb4bb61b551206ac3cabaa2d12ebc578"},"downloads":-1,"filename":"pytorch_tabnet-1.0.2-py3-none-any.whl","has_sig":false,"md5_digest":"e0d207e8871dff882546ba026cb64390","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6,<4.0","size":19874,"upload_time":"2020-02-03T16:22:41","upload_time_iso_8601":"2020-02-03T16:22:41.207603Z","url":"https://files.pythonhosted.org/packages/fb/d8/ee6e3767d81fd43f349a33521a6d9769deb875f41be91e025da681e575c5/pytorch_tabnet-1.0.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"08d458a5c6c1eb3878c36ca064236f5f21ebcde44b25998b2f6c8c2242728a5b","md5":"04755fa65f30183ec18453a12fbebd73","sha256":"294dfca4074a6017b5061b793c2b83c97d02304a30fcecb75bb1f8d73614875b"},"downloads":-1,"filename":"pytorch_tabnet-1.0.2.tar.gz","has_sig":false,"md5_digest":"04755fa65f30183ec18453a12fbebd73","packagetype":"sdist","python_version":"source","requires_python":">=3.6,<4.0","size":20707,"upload_time":"2020-02-03T16:22:42","upload_time_iso_8601":"2020-02-03T16:22:42.902902Z","url":"https://files.pythonhosted.org/packages/08/d4/58a5c6c1eb3878c36ca064236f5f21ebcde44b25998b2f6c8c2242728a5b/pytorch_tabnet-1.0.2.tar.gz","yanked":false,"yanked_reason":null}],"1.0.3":[{"comment_text":"","digests":{"blake2b_256":"f45053d9c86101380343b778e0a9ecf5790d7c79bc747b4cb5e2fa68431e3fcd","md5":"d131a1582c73da240468e0fcbbc49aa3","sha256":"c43f88161306e999ab0c9dde8853c6d310acb2ba19d9896072c4509c976e6d87"},"downloads":-1,"filename":"pytorch_tabnet-1.0.3-py3-none-any.whl","has_sig":false,"md5_digest":"d131a1582c73da240468e0fcbbc49aa3","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6,<4.0","size":20099,"upload_time":"2020-02-07T16:54:46","upload_time_iso_8601":"2020-02-07T16:54:46.600204Z","url":"https://files.pythonhosted.org/packages/f4/50/53d9c86101380343b778e0a9ecf5790d7c79bc747b4cb5e2fa68431e3fcd/pytorch_tabnet-1.0.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"816830e82d69cf2e757a145464a7e90a737044605b42a6edf7d84718b59a9633","md5":"f306945a96bd7b80d9350628b378f6a3","sha256":"7aef78c0613048ab3b88607aa9b032a55ed5c161dbb7fb06b2ebb808707e146a"},"downloads":-1,"filename":"pytorch_tabnet-1.0.3.tar.gz","has_sig":false,"md5_digest":"f306945a96bd7b80d9350628b378f6a3","packagetype":"sdist","python_version":"source","requires_python":">=3.6,<4.0","size":20925,"upload_time":"2020-02-07T16:54:48","upload_time_iso_8601":"2020-02-07T16:54:48.122753Z","url":"https://files.pythonhosted.org/packages/81/68/30e82d69cf2e757a145464a7e90a737044605b42a6edf7d84718b59a9633/pytorch_tabnet-1.0.3.tar.gz","yanked":false,"yanked_reason":null}],"1.0.4":[{"comment_text":"","digests":{"blake2b_256":"5b5c683b4e1bf638359f10402e184985f6d683a84ab6da38a3c0ac66691e01a7","md5":"82057da79284163f60362564d33d8242","sha256":"a842f72db80b2789665b849e6b78bebb0b039d036c9b51e164c4c909877d1119"},"downloads":-1,"filename":"pytorch_tabnet-1.0.4-py3-none-any.whl","has_sig":false,"md5_digest":"82057da79284163f60362564d33d8242","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6,<4.0","size":19796,"upload_time":"2020-02-28T16:36:21","upload_time_iso_8601":"2020-02-28T16:36:21.369807Z","url":"https://files.pythonhosted.org/packages/5b/5c/683b4e1bf638359f10402e184985f6d683a84ab6da38a3c0ac66691e01a7/pytorch_tabnet-1.0.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"38f6f0667e6de8acecb39a6a091bbb00a6afaed74556c05f8fdc5206919837cc","md5":"33b8a38333f8f028e2b91b7651e7718d","sha256":"a5b131c3733d8e0c19eca923324f59729d8bfcbbf6723d08518c2950bdc3db2f"},"downloads":-1,"filename":"pytorch_tabnet-1.0.4.tar.gz","has_sig":false,"md5_digest":"33b8a38333f8f028e2b91b7651e7718d","packagetype":"sdist","python_version":"source","requires_python":">=3.6,<4.0","size":20583,"upload_time":"2020-02-28T16:36:22","upload_time_iso_8601":"2020-02-28T16:36:22.633705Z","url":"https://files.pythonhosted.org/packages/38/f6/f0667e6de8acecb39a6a091bbb00a6afaed74556c05f8fdc5206919837cc/pytorch_tabnet-1.0.4.tar.gz","yanked":false,"yanked_reason":null}],"1.0.5":[{"comment_text":"","digests":{"blake2b_256":"51e0fa2b757e5cadf627bafb3338d8298b855e0339d5d04a87062aa211a39332","md5":"a3cf3c28f227179ba0a38712bc842041","sha256":"6392755890a6ead94c8aa1713d66718ee2c5472dbec85c6b95a14d68e7c0bf28"},"downloads":-1,"filename":"pytorch_tabnet-1.0.5-py3-none-any.whl","has_sig":false,"md5_digest":"a3cf3c28f227179ba0a38712bc842041","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6,<4.0","size":19576,"upload_time":"2020-03-13T15:18:49","upload_time_iso_8601":"2020-03-13T15:18:49.698170Z","url":"https://files.pythonhosted.org/packages/51/e0/fa2b757e5cadf627bafb3338d8298b855e0339d5d04a87062aa211a39332/pytorch_tabnet-1.0.5-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"063273bb857fec10bd16cd4a1900d34c380a1f7c99a0165dfd7ecd403e5050a4","md5":"df6e18a0c229b88c93d885c33acc2cc0","sha256":"763fe1f29f8118670694e4dc05da2ada4c1d2fc6782e0272d99828a3774436a0"},"downloads":-1,"filename":"pytorch_tabnet-1.0.5.tar.gz","has_sig":false,"md5_digest":"df6e18a0c229b88c93d885c33acc2cc0","packagetype":"sdist","python_version":"source","requires_python":">=3.6,<4.0","size":20411,"upload_time":"2020-03-13T15:18:51","upload_time_iso_8601":"2020-03-13T15:18:51.022845Z","url":"https://files.pythonhosted.org/packages/06/32/73bb857fec10bd16cd4a1900d34c380a1f7c99a0165dfd7ecd403e5050a4/pytorch_tabnet-1.0.5.tar.gz","yanked":false,"yanked_reason":null}],"1.0.6":[{"comment_text":"","digests":{"blake2b_256":"8fd30a277acfadce7ecf235dbd9a05953762e5310126faa24060a1e16f1f5b41","md5":"480269f0574d961491c79380ead24d5f","sha256":"d7e3ed5d001e567bdf418c87beadea78409fed8472a93772fa11af4d477da178"},"downloads":-1,"filename":"pytorch_tabnet-1.0.6-py3-none-any.whl","has_sig":false,"md5_digest":"480269f0574d961491c79380ead24d5f","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6,<4.0","size":19570,"upload_time":"2020-04-20T08:13:05","upload_time_iso_8601":"2020-04-20T08:13:05.876770Z","url":"https://files.pythonhosted.org/packages/8f/d3/0a277acfadce7ecf235dbd9a05953762e5310126faa24060a1e16f1f5b41/pytorch_tabnet-1.0.6-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"96226b4356adc70b03cb70c80864f1e1ef373f421c2b4694f6af3b03318f93f3","md5":"97e9de729f03789128ba13e4ce3ac15b","sha256":"d4cf5993a11313ef1c99712b2997520c754937a49678a98efcd1f1dd275e8da7"},"downloads":-1,"filename":"pytorch_tabnet-1.0.6.tar.gz","has_sig":false,"md5_digest":"97e9de729f03789128ba13e4ce3ac15b","packagetype":"sdist","python_version":"source","requires_python":">=3.6,<4.0","size":20378,"upload_time":"2020-04-20T08:13:07","upload_time_iso_8601":"2020-04-20T08:13:07.016142Z","url":"https://files.pythonhosted.org/packages/96/22/6b4356adc70b03cb70c80864f1e1ef373f421c2b4694f6af3b03318f93f3/pytorch_tabnet-1.0.6.tar.gz","yanked":false,"yanked_reason":null}],"1.1.0":[{"comment_text":"","digests":{"blake2b_256":"0f861bc599d7910410c42ed2041748a48938d373460cd4770394053e76303798","md5":"22127ff9ac6ad2733027b7be338fc009","sha256":"5ec0c31f04fc8922524f0e20b64222b4d3d6210607bcfca687379e22bb4ccac9"},"downloads":-1,"filename":"pytorch_tabnet-1.1.0-py3-none-any.whl","has_sig":false,"md5_digest":"22127ff9ac6ad2733027b7be338fc009","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6,<4.0","size":20526,"upload_time":"2020-06-02T15:46:12","upload_time_iso_8601":"2020-06-02T15:46:12.595800Z","url":"https://files.pythonhosted.org/packages/0f/86/1bc599d7910410c42ed2041748a48938d373460cd4770394053e76303798/pytorch_tabnet-1.1.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"9a2d0206444e279458bd26239a0ec9f41ba61f7a1e34c980b7dfd205be833614","md5":"bda09630f18221b914a2effed200696d","sha256":"87c8b66ac9f477676626905b3c6806606659230d2eabb5a66f01ed2648314a77"},"downloads":-1,"filename":"pytorch_tabnet-1.1.0.tar.gz","has_sig":false,"md5_digest":"bda09630f18221b914a2effed200696d","packagetype":"sdist","python_version":"source","requires_python":">=3.6,<4.0","size":21546,"upload_time":"2020-06-02T15:46:13","upload_time_iso_8601":"2020-06-02T15:46:13.702803Z","url":"https://files.pythonhosted.org/packages/9a/2d/0206444e279458bd26239a0ec9f41ba61f7a1e34c980b7dfd205be833614/pytorch_tabnet-1.1.0.tar.gz","yanked":false,"yanked_reason":null}],"1.2.0":[{"comment_text":"","digests":{"blake2b_256":"6eee1670a8072b03a42b16db79e45f7705c3f155c35f9ae83610b46c6d07a4e4","md5":"fca0117d17bedb95ead9ccff74ac6013","sha256":"fc2ac02b1973d79329582ccf4f6649c0e9dd80305984d0bcd8fa5d9fed1aef15"},"downloads":-1,"filename":"pytorch_tabnet-1.2.0-py3-none-any.whl","has_sig":false,"md5_digest":"fca0117d17bedb95ead9ccff74ac6013","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6,<4.0","size":21776,"upload_time":"2020-07-01T16:27:48","upload_time_iso_8601":"2020-07-01T16:27:48.362781Z","url":"https://files.pythonhosted.org/packages/6e/ee/1670a8072b03a42b16db79e45f7705c3f155c35f9ae83610b46c6d07a4e4/pytorch_tabnet-1.2.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"582ba00b3fed9efac8536cdd0054d0023b53d2cd8bc93357e9e7b718a9502b91","md5":"818cf6882b95a4d38be7fec57e7846b2","sha256":"ace2973c35407d13a9fd00f84b38b47b3c4cb5f30e80878a4f3269abd179a750"},"downloads":-1,"filename":"pytorch_tabnet-1.2.0.tar.gz","has_sig":false,"md5_digest":"818cf6882b95a4d38be7fec57e7846b2","packagetype":"sdist","python_version":"source","requires_python":">=3.6,<4.0","size":22824,"upload_time":"2020-07-01T16:27:49","upload_time_iso_8601":"2020-07-01T16:27:49.920934Z","url":"https://files.pythonhosted.org/packages/58/2b/a00b3fed9efac8536cdd0054d0023b53d2cd8bc93357e9e7b718a9502b91/pytorch_tabnet-1.2.0.tar.gz","yanked":false,"yanked_reason":null}],"2.0.0":[{"comment_text":"","digests":{"blake2b_256":"a2821382e08f8da4996c9602d042de4c254c16593b41d5cb21a775f744055129","md5":"fa9e5f8ba5cb0fd9c2de25f5ddae1397","sha256":"f6b56951d711abf0ef11e564b32027a347bd90bb0c1486394991b85c5d5ba57f"},"downloads":-1,"filename":"pytorch_tabnet-2.0.0-py3-none-any.whl","has_sig":false,"md5_digest":"fa9e5f8ba5cb0fd9c2de25f5ddae1397","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6,<4.0","size":29941,"upload_time":"2020-10-13T12:10:19","upload_time_iso_8601":"2020-10-13T12:10:19.716209Z","url":"https://files.pythonhosted.org/packages/a2/82/1382e08f8da4996c9602d042de4c254c16593b41d5cb21a775f744055129/pytorch_tabnet-2.0.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b1ffd89329ec88b01666cdddb0244a993364cb0f31f3c76e828101d1c560d091","md5":"8b14697f1a11ed39a00e8d043b777b8a","sha256":"3bda439277dd6a425d17773dcaf05fd55069ce8734af08419b6989957a2c44f3"},"downloads":-1,"filename":"pytorch_tabnet-2.0.0.tar.gz","has_sig":false,"md5_digest":"8b14697f1a11ed39a00e8d043b777b8a","packagetype":"sdist","python_version":"source","requires_python":">=3.6,<4.0","size":29201,"upload_time":"2020-10-13T12:10:24","upload_time_iso_8601":"2020-10-13T12:10:24.009273Z","url":"https://files.pythonhosted.org/packages/b1/ff/d89329ec88b01666cdddb0244a993364cb0f31f3c76e828101d1c560d091/pytorch_tabnet-2.0.0.tar.gz","yanked":false,"yanked_reason":null}],"2.0.1":[{"comment_text":"","digests":{"blake2b_256":"50666750481a520cc0c137777da1d84c8d892624520d660a258aa7f8498eaaab","md5":"a2d98ee78bba28b188e727f9ce008396","sha256":"b5b8726fa9c1c6871541c1047dd7af4184851fa23bd579101ba513b1bf648edd"},"downloads":-1,"filename":"pytorch_tabnet-2.0.1-py3-none-any.whl","has_sig":false,"md5_digest":"a2d98ee78bba28b188e727f9ce008396","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6,<4.0","size":30127,"upload_time":"2020-10-15T21:00:53","upload_time_iso_8601":"2020-10-15T21:00:53.490781Z","url":"https://files.pythonhosted.org/packages/50/66/6750481a520cc0c137777da1d84c8d892624520d660a258aa7f8498eaaab/pytorch_tabnet-2.0.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"178a774614ebf20f8cf12479ff9791f4f655fdcc82df9ba0e7d7c8dfb7b184dc","md5":"62db68bfb0dc2f838aafd2cd42222533","sha256":"89e123e2b18a10c2236577c6b508304b14f4591fea9d2a574a469209038ae969"},"downloads":-1,"filename":"pytorch_tabnet-2.0.1.tar.gz","has_sig":false,"md5_digest":"62db68bfb0dc2f838aafd2cd42222533","packagetype":"sdist","python_version":"source","requires_python":">=3.6,<4.0","size":29370,"upload_time":"2020-10-15T21:00:55","upload_time_iso_8601":"2020-10-15T21:00:55.824208Z","url":"https://files.pythonhosted.org/packages/17/8a/774614ebf20f8cf12479ff9791f4f655fdcc82df9ba0e7d7c8dfb7b184dc/pytorch_tabnet-2.0.1.tar.gz","yanked":false,"yanked_reason":null}],"3.0.0":[{"comment_text":"","digests":{"blake2b_256":"44dde24309700d20dfc75643d231a3093179652d309cefcadc338e1a20ff288e","md5":"f3a5bb53d9f9c0e22302f2c0737cd25b","sha256":"4af1ecfb00448c369d1af7f79377d483e7b88fffb7d6a7e114aaed218db77398"},"downloads":-1,"filename":"pytorch_tabnet-3.0.0-py3-none-any.whl","has_sig":false,"md5_digest":"f3a5bb53d9f9c0e22302f2c0737cd25b","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6,<4.0","size":38835,"upload_time":"2020-12-15T12:44:24","upload_time_iso_8601":"2020-12-15T12:44:24.298830Z","url":"https://files.pythonhosted.org/packages/44/dd/e24309700d20dfc75643d231a3093179652d309cefcadc338e1a20ff288e/pytorch_tabnet-3.0.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"be12a4c700b50bfbd2ea8386261386f1c6a07992d2c3d01d919c6300b9751fab","md5":"9fb5313442fdc88b6d1be76dced1d73c","sha256":"a3d173e86ba8164f536eedb0f5dfd0eaa6ddf8d444ad66df0955373373fee386"},"downloads":-1,"filename":"pytorch_tabnet-3.0.0.tar.gz","has_sig":false,"md5_digest":"9fb5313442fdc88b6d1be76dced1d73c","packagetype":"sdist","python_version":"source","requires_python":">=3.6,<4.0","size":38312,"upload_time":"2020-12-15T12:44:26","upload_time_iso_8601":"2020-12-15T12:44:26.137855Z","url":"https://files.pythonhosted.org/packages/be/12/a4c700b50bfbd2ea8386261386f1c6a07992d2c3d01d919c6300b9751fab/pytorch_tabnet-3.0.0.tar.gz","yanked":false,"yanked_reason":null}],"3.1.0":[{"comment_text":"","digests":{"blake2b_256":"f40f788e383b0c464bb81cdc24c9963b9657acb2adccc2a56dfbe06d4adfa401","md5":"29d49c1e6f66c360544c8652f2c4cbfe","sha256":"e836e56c796dcedae3337c28c06e9934844de8423a33654b1b1cd7700a88f688"},"downloads":-1,"filename":"pytorch_tabnet-3.1.0-py3-none-any.whl","has_sig":false,"md5_digest":"29d49c1e6f66c360544c8652f2c4cbfe","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6,<4.0","size":39226,"upload_time":"2021-01-12T18:18:02","upload_time_iso_8601":"2021-01-12T18:18:02.726033Z","url":"https://files.pythonhosted.org/packages/f4/0f/788e383b0c464bb81cdc24c9963b9657acb2adccc2a56dfbe06d4adfa401/pytorch_tabnet-3.1.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"bf0030cca0e58ee818513e6e8a3a4d84f72354f2e6d5d430a17c042970277fa1","md5":"c68c5fb5b357ff84233356a755ddb805","sha256":"ecdced58cf39047f316de7ee73fe3d7022cdce6296e1e7f94eae54f0ff093c71"},"downloads":-1,"filename":"pytorch_tabnet-3.1.0.tar.gz","has_sig":false,"md5_digest":"c68c5fb5b357ff84233356a755ddb805","packagetype":"sdist","python_version":"source","requires_python":">=3.6,<4.0","size":38724,"upload_time":"2021-01-12T18:18:04","upload_time_iso_8601":"2021-01-12T18:18:04.549647Z","url":"https://files.pythonhosted.org/packages/bf/00/30cca0e58ee818513e6e8a3a4d84f72354f2e6d5d430a17c042970277fa1/pytorch_tabnet-3.1.0.tar.gz","yanked":false,"yanked_reason":null}],"3.1.1":[{"comment_text":"","digests":{"blake2b_256":"94e52a808d611a5d44e3c997c0d07362c04a56c70002208e00aec9eee3d923b5","md5":"e69779e5a2d86d3d14e43dd3cbd5668f","sha256":"6b25fb928ad9c7fe1972a7f164612453251e23c8cfa1d125df142d690179030d"},"downloads":-1,"filename":"pytorch_tabnet-3.1.1-py3-none-any.whl","has_sig":false,"md5_digest":"e69779e5a2d86d3d14e43dd3cbd5668f","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6,<4.0","size":39237,"upload_time":"2021-02-02T08:05:11","upload_time_iso_8601":"2021-02-02T08:05:11.760058Z","url":"https://files.pythonhosted.org/packages/94/e5/2a808d611a5d44e3c997c0d07362c04a56c70002208e00aec9eee3d923b5/pytorch_tabnet-3.1.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"cf4086fdb02d48dc4979221b724531c09ebb76a24b05c4f8be808309cc89023d","md5":"d6245571b5042b07d333fda5fc5d4a3a","sha256":"69f5fb07dc411abc3f341ad41ba7053e98ac028950badd92c6838939b1cadcbf"},"downloads":-1,"filename":"pytorch_tabnet-3.1.1.tar.gz","has_sig":false,"md5_digest":"d6245571b5042b07d333fda5fc5d4a3a","packagetype":"sdist","python_version":"source","requires_python":">=3.6,<4.0","size":38743,"upload_time":"2021-02-02T08:05:13","upload_time_iso_8601":"2021-02-02T08:05:13.347528Z","url":"https://files.pythonhosted.org/packages/cf/40/86fdb02d48dc4979221b724531c09ebb76a24b05c4f8be808309cc89023d/pytorch_tabnet-3.1.1.tar.gz","yanked":false,"yanked_reason":null}],"4.0":[{"comment_text":"","digests":{"blake2b_256":"5d2ec36d0ad6996fff1c317f81c1ab4e237aaf2d2d6e1229645249c64317eea7","md5":"8d168a58c992939215b0d3c424eb6d0d","sha256":"0e9883b3b0866caca3dfec80d5c94139fb5906015a176c1c2c181e47531e7c72"},"downloads":-1,"filename":"pytorch_tabnet-4.0-py3-none-any.whl","has_sig":false,"md5_digest":"8d168a58c992939215b0d3c424eb6d0d","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":41790,"upload_time":"2022-09-14T16:42:33","upload_time_iso_8601":"2022-09-14T16:42:33.321111Z","url":"https://files.pythonhosted.org/packages/5d/2e/c36d0ad6996fff1c317f81c1ab4e237aaf2d2d6e1229645249c64317eea7/pytorch_tabnet-4.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"50c7d56c6891b0665911814a4cb01e8eb0bce1c9e49c086a9e4b4d0b395fd449","md5":"0175fa8bff10c7b7322fbea2e1c00142","sha256":"f5600715777423f9c9ef0f3c98b97d4ff1c9521d7c38ca344469a878026dd876"},"downloads":-1,"filename":"pytorch_tabnet-4.0.tar.gz","has_sig":false,"md5_digest":"0175fa8bff10c7b7322fbea2e1c00142","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":41666,"upload_time":"2022-09-14T16:42:35","upload_time_iso_8601":"2022-09-14T16:42:35.710833Z","url":"https://files.pythonhosted.org/packages/50/c7/d56c6891b0665911814a4cb01e8eb0bce1c9e49c086a9e4b4d0b395fd449/pytorch_tabnet-4.0.tar.gz","yanked":false,"yanked_reason":null}],"4.1.0":[{"comment_text":"","digests":{"blake2b_256":"0f92ed98b89b7cf5661656daa4cc88e578f712eb5eae41b8f46a56c1ece3a895","md5":"f504f99f5c6ec07583a817b3fa14fb03","sha256":"70e8c9803f68f7cb26930d4cdb88857d1d98c745e0daf99d0f870fc70698515f"},"downloads":-1,"filename":"pytorch_tabnet-4.1.0-py3-none-any.whl","has_sig":false,"md5_digest":"f504f99f5c6ec07583a817b3fa14fb03","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":44481,"upload_time":"2023-07-23T13:26:57","upload_time_iso_8601":"2023-07-23T13:26:57.044057Z","url":"https://files.pythonhosted.org/packages/0f/92/ed98b89b7cf5661656daa4cc88e578f712eb5eae41b8f46a56c1ece3a895/pytorch_tabnet-4.1.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"19c7bb93b92e8e123308737240a26aa0868e05e2549ea8ece533b45f37b284d5","md5":"064dc061abb46de3f0c9bf6b1afc8d8f","sha256":"18887b993a8bf86ec05a576b5cf93f09e08b778cd9f418c5b254b6566df673a5"},"downloads":-1,"filename":"pytorch_tabnet-4.1.0.tar.gz","has_sig":false,"md5_digest":"064dc061abb46de3f0c9bf6b1afc8d8f","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":44925,"upload_time":"2023-07-23T13:26:59","upload_time_iso_8601":"2023-07-23T13:26:59.063151Z","url":"https://files.pythonhosted.org/packages/19/c7/bb93b92e8e123308737240a26aa0868e05e2549ea8ece533b45f37b284d5/pytorch_tabnet-4.1.0.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"0f92ed98b89b7cf5661656daa4cc88e578f712eb5eae41b8f46a56c1ece3a895","md5":"f504f99f5c6ec07583a817b3fa14fb03","sha256":"70e8c9803f68f7cb26930d4cdb88857d1d98c745e0daf99d0f870fc70698515f"},"downloads":-1,"filename":"pytorch_tabnet-4.1.0-py3-none-any.whl","has_sig":false,"md5_digest":"f504f99f5c6ec07583a817b3fa14fb03","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":44481,"upload_time":"2023-07-23T13:26:57","upload_time_iso_8601":"2023-07-23T13:26:57.044057Z","url":"https://files.pythonhosted.org/packages/0f/92/ed98b89b7cf5661656daa4cc88e578f712eb5eae41b8f46a56c1ece3a895/pytorch_tabnet-4.1.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"19c7bb93b92e8e123308737240a26aa0868e05e2549ea8ece533b45f37b284d5","md5":"064dc061abb46de3f0c9bf6b1afc8d8f","sha256":"18887b993a8bf86ec05a576b5cf93f09e08b778cd9f418c5b254b6566df673a5"},"downloads":-1,"filename":"pytorch_tabnet-4.1.0.tar.gz","has_sig":false,"md5_digest":"064dc061abb46de3f0c9bf6b1afc8d8f","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":44925,"upload_time":"2023-07-23T13:26:59","upload_time_iso_8601":"2023-07-23T13:26:59.063151Z","url":"https://files.pythonhosted.org/packages/19/c7/bb93b92e8e123308737240a26aa0868e05e2549ea8ece533b45f37b284d5/pytorch_tabnet-4.1.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
