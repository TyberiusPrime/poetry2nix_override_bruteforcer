{"info":{"author":"Matthew Einhorn","author_email":"matt@einhorn.dev","bugtrack_url":null,"classifiers":["Development Status :: 4 - Beta","License :: OSI Approved :: MIT License","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],"description":"tree-config\n===========\n\nConfiguration of objects that are nested in a tree-like fashion.\n\nFor more information: https://matham.github.io/tree-config/index.html\n\n.. image:: https://img.shields.io/pypi/pyversions/tree-config.svg\n    :target: https://pypi.python.org/pypi/tree-config/\n    :alt: Supported Python versions\n\n.. image:: https://img.shields.io/pypi/v/tree-config.svg\n    :target: https://pypi.python.org/pypi/tree-config/\n    :alt: Latest Version on PyPI\n\n.. image:: https://coveralls.io/repos/github/matham/tree-config/badge.svg?branch=main\n    :target: https://coveralls.io/github/matham/tree-config?branch=main\n    :alt: Coverage status\n\n.. image:: https://github.com/matham/tree-config/workflows/Python%20application/badge.svg\n    :target: https://github.com/matham/tree-config/actions\n    :alt: Github action status\n\nInstallation\n============\n\n``tree-config`` can be installed with:\n\n.. code-block:: shell\n\n    pip install tree-config\n\nConfiguration usage\n===================\n\n``tree-config`` can dump all the configurable properties of all your classes to\na yaml file and then load the the file and restore/apply the values to the\nproperties. E.g.:\n\n.. code-block:: python\n\n    class App:\n\n        _config_props_ = ('name', )\n\n        _config_children_ = {'app panel': 'panel'}\n\n        def __init__(self):\n            self.name = 'Desk'\n            self.panel = AppPanel()\n\n    class AppPanel:\n\n        _config_props_ = ('color', )\n\n        color = 'A4FF67'\n\nwill automatically configure ``name`` and ``color``.\n\nFollowing is a guide by example of the multiples ways to control the configuration.\nSee the `configuration API <https://matham.github.io/tree-config/api.html>`_, including\nthe ``Configuration`` class for complete details.\n\nSee the examples directory in the repo for complete runnable code of the following\nexamples.\n\nBasic properties\n----------------\n\nThis example has an app class that contains two panels that are configurable.\n``_config_props_`` lists the configurable properties for the class, while\n``_config_children_`` constructs the tree of objects that are configurable.\n\n.. code-block:: python\n\n    class App:\n\n        _config_props_ = ('size', 'name')\n\n        _config_children_ = {'app panel': 'panel1', 'home panel': 'panel2'}\n\n        def __init__(self):\n            self.size = 12\n            self.name = 'Desk'\n\n            self.panel1 = AppPanel()\n            self.panel2 = HomePanel()\n\n\n    class AppPanel:\n\n        _config_props_ = ('color', )\n\n        color = 'A4FF67'\n\n\n    class HomePanel:\n\n        _config_props_ = ('shape', )\n\n        shape = 'circle'\n\nThen, running:\n\n.. code-block:: python\n\n    from tree_config import dump_config, read_config_from_object\n    app = App()\n    dump_config('basic_example.yaml', read_config_from_object(app))\n    print(f'Shape is: {app.panel2.shape}')\n\ncreates a ``basic_example.yaml`` file with the following contents:\n\n.. code-block:: yaml\n\n    app panel: {color: A4FF67}\n    home panel: {shape: circle}\n    name: Desk\n    size: 12\n\nand it prints ``Shape is: circle``. If we want to load a previous yaml file,\nwhere say the shape was ``\"square\"`` and apply it to the instance, we do:\n\n.. code-block:: python\n\n    from tree_config import load_config, apply_config\n    app = App()\n    apply_config(app, load_config(app, 'basic_example.yaml'))\n    print(f'Shape is: {app.panel2.shape}')\n\nThis in turn prints ``Shape is: square``.\n\nHooking property discovery\n--------------------------\n\n``_config_props_`` and ``_config_children_`` are defined on a class, not on\ninstances. When ``tree-config`` uses them, it will walk the whole class\nhierarchy and accumulate their values from all super classes because a\nsub-class does not overwrite them, but rather adds to them.\n\nIf ``_config_props`` and/or ``_config_children`` is defined on a\nclass or instance, tree-config will use that value directly, instead of\nwalking ``_config_props_`` and/or ``_config_children_``, respectively.\n\nE.g. the following code:\n\n.. code-block:: python\n\n    from tree_config import dump_config, read_config_from_object\n\n\n    class App:\n\n        _config_children_ = {'app panel': 'panel1', 'home panel': 'panel2'}\n\n        def __init__(self):\n            self.panel1 = AppPanel()\n            self.panel2 = HomePanel()\n\n\n    class RootPanel:\n\n        _config_props_ = ('size', 'name')\n\n        size = 12\n\n        name = 'Desk'\n\n\n    class AppPanel(RootPanel):\n\n        _config_props_ = ('color', )\n\n        color = 'A4FF67'\n\n\n    class HomePanel(AppPanel):\n\n        _config_props_ = ('shape', )\n\n        shape = 'circle'\n\n        group = 'window'\n\n        _config_props = ('group', 'size')\n\nwhen run with:\n\n.. code-block:: python\n\n    app = App()\n    # now get and save config to yaml file\n    dump_config('hook_properties.yaml', read_config_from_object(app))\n\nwill generate this yaml file:\n\n.. code-block:: yaml\n\n    app panel:\n      color: A4FF67\n      name: Desk\n      size: 12\n    home panel:\n      group: window\n      size: 12\n\nNotice how ``app panel`` contains the properties\nof both ``RootPanel`` and ``AppPanel``, while ``home panel`` only has the\nproperties listed in ``_config_props``. ``_config_children`` behaves\nsimilarly.\n\nCustom values hooks\n-------------------\n\nWe may wish to hook the property getting/setting process to\nchange the value before it is saved or before it is applied again.\n\nE.g. consider that we have a property that stores a namedtuple that we need\nto dump as a list (because yaml doesn't understand named tuple) and create\na named tuple again when restoring. ``get_config_property`` and\n``apply_config_property`` are the needed hook methods, that are\nautomatically used if present in the class:\n\n.. code-block:: python\n\n    from collections import namedtuple\n    from tree_config import dump_config, load_config, apply_config, \\\n        read_config_from_object\n\n    Point = namedtuple('Point', ['x', 'y'])\n\n\n    class App:\n\n        _config_props_ = ('point', 'name')\n\n        point = Point(11, 34)\n\n        name = ''\n\n        def get_config_property(self, name):\n            if name == 'point':\n                return tuple(self.point)\n            return getattr(self, name)\n\n        def apply_config_property(self, name, value):\n            if name == 'point':\n                self.point = Point(*value)\n            else:\n                setattr(self, name, value)\n\nThen, running:\n\n.. code-block:: python\n\n    from tree_config import dump_config, read_config_from_object\n    app = App()\n    dump_config('custom_value_example.yaml', read_config_from_object(app))\n    print(f'point is: {app.point}')\n\ncreates a ``custom_value_example.yaml`` file with the following contents:\n\n.. code-block:: yaml\n\n    name: ''\n    point: [11, 34]\n\nand it prints ``point is: Point(x=11, y=34)``. If we want to load and apply the\nyaml file again, we do:\n\n.. code-block:: python\n\n    from tree_config import load_config, apply_config\n    app = App()\n    apply_config(app, load_config(app, 'custom_value_example.yaml'))\n    print(f'point is: {app.point}')\n\nThis in turn prints again ``point is: Point(x=11, y=34)``.\n\nSee also ``apply_config_child`` for similarly hooking into applying the children\nobjects. The default, when not provided is to use ``apply_config``, so if\noverriding, that should probably also be used for the base case.\n\nCustom tags (pickling)\n^^^^^^^^^^^^^^^^^^^^^^\n\nYaml offers support for representing arbitrary objects using custom tags in the\nfile. This enables global support for the objects, without having to use\n``get_config_property`` / ``apply_config_property`` wherever they are used.\n\nUsing the point example above:\n\n.. code-block:: python\n\n    from collections import namedtuple\n    from tree_config import dump_config, load_config, apply_config, \\\n        read_config_from_object\n    from ruamel.yaml import BaseConstructor, BaseRepresenter\n\n    Point = namedtuple('Point', ['x', 'y'])\n\n    yaml_tag = '!tree_config_example_point'\n\n    # encoder\n    def _represent_point(representer: BaseRepresenter, val):\n        return representer.represent_sequence(yaml_tag, tuple(val))\n\n    # decoder\n    def _construct_point(constructor: BaseConstructor, tag, node):\n        return Point(*constructor.construct_sequence(node))\n\n    # tell yaml how to represent a Point\n    def register_point_yaml_support() -> None:\n        BaseRepresenter.add_multi_representer(Point, _represent_point)\n        BaseConstructor.add_multi_constructor(yaml_tag, _construct_point)\n\n\n    class App:\n\n        _config_props_ = ('point', 'name')\n\n        point = Point(11, 34)\n\n        name = ''\n\nNow, call:\n\n.. code-block:: python\n\n    register_point_yaml_support()\n\nbefore running the tree-config dumping/loading code from the last section and\nit will generate a yaml file with contents:\n\n.. code-block:: yaml\n\n    name: ''\n    point: !tree_config_example_point [11, 34]\n\nSee also ``yaml_dumps`` and ``yaml_loads`` for additional customization.\nMost functions take a ``yaml_dump_str`` / ``yaml_load_str`` to allow further\ncustomizing the yaml objects. See also ``register_torch_yaml_support``\nin ``tree_config.yaml`` for a more complete example as well as some built-in\noptional representers that can be registered directly.\n\nPost-applying dispatch\n----------------------\n\nAfter applying configuration to a object and its children objects,\ntree-config will call the ``post_config_applied`` method of the object, if\nthe method exists. E.g.:\n\n.. code-block:: python\n\n    from tree_config import dump_config, load_config, apply_config, \\\n        read_config_from_object\n\n\n    class App:\n\n        _config_props_ = ('size', 'name')\n\n        _config_children_ = {'app panel': 'panel'}\n\n        size = 12\n\n        name = 'Desk'\n\n        def __init__(self):\n            self.panel = Panel()\n\n        def apply_config_property(self, name, value):\n            print('applying', name)\n            setattr(self, name, value)\n\n        def post_config_applied(self):\n            print('done applying app')\n\n\n    class Panel:\n\n        _config_props_ = ('color', )\n\n        color = 'A4FF67'\n\n        def apply_config_property(self, name, value):\n            print('applying', name)\n            setattr(self, name, value)\n\n        def post_config_applied(self):\n            print('done applying panel')\n\nThen, saving and again applying the yaml using:\n\n.. code-block:: python\n\n    # create app and set properties\n    app = App()\n\n    # now get and save config to yaml file\n    dump_config('post_apply_dispatch.yaml', read_config_from_object(app))\n    # load config and apply it\n    apply_config(app, load_config(app, 'post_apply_dispatch.yaml'))\n\nprints the following::\n\n    applying color\n    done applying panel\n    applying name\n    applying size\n    done applying app\n\nConfigurable class\n------------------\n\nThe above examples used a duck typing approach to these special configuration/hook\nmethods, and any/all of these methods were optional. tree-config also offers a\n``Configurable`` superclass that defines all these methods with appropriate\ndefault values.\n\nThere's no benefit to inheriting from ``Configurable``, but it does provide a\nbaseclass listing all the special configuration methods. Additionally,\nit does cache the list of properties/config children for each class,\nso once looked up, it does not need to walk the tree, unlike the duck\ntyping approach that re-computes at every save/apply.\n\nAuto docs\n=========\n\nIn addition to configuration, tree-config can also hook into the sphinx doc\ngenerating build steps and generate docs listing all the properties that\ncan be configured by the application and show the doc string for each of them.\nThis is helpful to users who want to configure these properties using the\nconfiguration yaml file.\n\nThe example directory has a complete doc example.\n\nGiven a root object (e.g. App in the examples), we can add callbacks in\n``conf.py`` that is called by sphinx as it encounters properties listed in\n``_config_props_``. The callback then saves the doc strings of these properties\ninto a yaml file.\n\nSubsequently, when the build is done, tree-config can go through all the\nconfigurable properties and starting from the root object or class, extract\nthe doc strings from the yaml file, and create a rst file of those docstrings.\n\nE.g. starting with this code in :\n\n.. code-block:: python\n\n    class App:\n        \"\"\"The app.\"\"\"\n\n        _config_props_ = ('size', 'name')\n\n        _config_children_ = {'app panel': 'panel1', 'home panel': 'panel2'}\n\n        size = 55\n        \"\"\"Some filename.\"\"\"\n\n        name = ''\n        \"\"\"Some name.\"\"\"\n\n        panel1: 'AppPanel' = None\n        \"\"\"The app panel.\"\"\"\n\n        panel2: 'HomePanel' = None\n        \"\"\"The home panel.\"\"\"\n\n        def __init__(self, size, name, color, shape):\n            self.size = size\n            self.name = name\n\n            self.panel1 = AppPanel()\n            self.panel1.color = color\n            self.panel2 = HomePanel()\n            self.panel2.shape = shape\n\n\n    class AppPanel:\n        \"\"\"The app panel.\"\"\"\n\n        _config_props_ = ('color', )\n\n        color = ''\n        \"\"\"Color of the app.\"\"\"\n\n\n    class HomePanel:\n        \"\"\"The home panel.\"\"\"\n\n        _config_props_ = ('shape', )\n\n        shape = ''\n        \"\"\"Shape of the home.\"\"\"\n\nthen, we add the following to the top of the ``conf.py`` file:\n\n.. code-block:: python\n\n    import os\n    import sys\n    from functools import partial\n    sys.path.insert(0, os.path.abspath('../'))\n    from config_example import App\n    from tree_config.doc_gen import create_doc_listener, write_config_props_rst\n\nthe exact path added to ``sys.path`` depends on where the code is, or if it's a python\npackage that is not needed because it's already installed.\n\nWe also need to add ``'sphinx.ext.autodoc'`` to the list of extensions. Finally,\nat the end of ``conf.py`` add:\n\n.. code-block:: python\n\n    def setup(app):\n        # dump all config_example package/subpackages config docstrings to config_prop_docs.yaml\n        create_doc_listener(app, 'config_example', 'config_prop_docs.yaml')\n\n        # then get docstrings from yaml file, walk all config properties from App and\n        # dump formatted config docs to source/config.rst\n        app.connect(\n            'build-finished', partial(\n                write_config_props_rst, App, 'config_example',\n                filename='config_prop_docs.yaml', rst_filename='source/config.rst')\n        )\n\nFinally, to the sphinx generated ``index.rst`` we added ``config.rst`` (the filename\nof the file that will be automatically created under source).\nWe also need to add somewhere in the index or files it references the auto-doc\nreferences for all the classes, otherwise we won't get the relevant docstrings.\nWe added it as:\n\n.. code-block:: rst\n\n    .. toctree::\n       :maxdepth: 2\n       :caption: Contents:\n\n       config.rst\n\n\n    API\n    ===\n\n    .. automodule:: config_example\n       :members:\n\nin ``index.rst``.\n\nFinally, we run:\n\n.. code-block:: shell\n\n    echo $'Config\\n===========' > source/config.rst\n    make html\n    make html\n\nFirst we created a mostly empty config.rst file. Otherwise sphinx doesn't\ninclude it when it is generated. Next we ran ``make html`` twice, the first\ntime it automatically generates the following ``config_prop_docs.yaml`` file:\n\n.. code-block:: yaml\n\n    config_example.App:\n      name:\n      - Some name.\n      - ''\n      size:\n      - Some filename.\n      - ''\n    config_example.AppPanel:\n      color:\n      - Color of the app.\n      - ''\n    config_example.HomePanel:\n      shape:\n      - Shape of the home.\n      - ''\n\nThe second ``make html`` extracts the docstrings from this yaml file and\nuses that create ``config.rst`` with the following contents:\n\n.. code-block:: rst\n\n    CONFIG_EXAMPLE Config\n    =====================\n\n    The following are the configuration options provided by the app. It can be configured by changing appropriate values in the ``config.yaml`` settings file. The options default to the default value of the classes for each of the options.\n\n    `name`:\n     Default value::\n\n      ''\n\n     Some name.\n\n    `size`:\n     Default value::\n\n      55\n\n     Some filename.\n\n\n    home panel\n    ----------\n\n    `shape`:\n     Default value::\n\n      ''\n\n     Shape of the home.\n\n\n    app panel\n    ---------\n\n    `color`:\n     Default value::\n\n      ''\n\n     Color of the app.\n\nThis rst is automatically rendered by sphinx to nice html with the rest of the docs and\nit looks something like:\n\n----\n\nCONFIG_EXAMPLE Config\n=====================\n\nThe following are the configuration options provided by the app. It can be configured by changing appropriate values in the ``config.yaml`` settings file. The options default to the default value of the classes for each of the options.\n\n`name`:\n Default value::\n\n  ''\n\n Some name.\n\n`size`:\n Default value::\n\n  55\n\n Some filename.\n\n\nhome panel\n----------\n\n`shape`:\n Default value::\n\n  ''\n\n Shape of the home.\n\n\napp panel\n---------\n\n`color`:\n Default value::\n\n  ''\n\n Color of the app.\n\n----\n\nClass vs instance\n-----------------\n\nThe configuration examples above save the config from the App *instance*.\nOne can also use the App *class* to dump the yaml. The major difference is that the\n``apply_config_child``, ``get_config_property``, ``apply_config_property``,\nand ``post_config_applied`` methods, which are instance methods, are skipped and\nnot used.\n\nAlso, unlike for instances, where it would fail if ``_config_children_`` lists\na child property whose value is None, for the class it will fallback on the type\nhint of the property, if one is defined.\n\nUsing the ``App`` class, rather than a ``App()`` instance is helpful during doc\nbuilding when it may not be possible to instantiate the full App\n(see the docs example above that uses the class instance with type hints).\n\nReusing other project docs\n--------------------------\n\nBecause we rely on autodoc to generate ``config_prop_docs.yaml``, tree-config\nprovides a mechanism to reuse the docstrings from other projects we depend on.\n\nE.g. imagine we depend on ``remote1`` and ``remote2`` projects who defines classes\nthat is configurable and our projects inherits and extends them with further\nconfigurable properties.\nAlso assume these remote projects dumped their configurable docstrings to\n``config_prop_docs.yaml`` like in the example and made it available in the\nroot of their sphinx generated docs e.g. on github-pages.\n\nThen, tree-config provides tools to merge those docstrings into ours to be able\nto create ``config.rst`` from them as follows:\n\n.. code-block:: shell\n\n    echo $'Config\\n===========' > source/config.rst\n    python -m tree_config.doc_gen download \\\n        -u \"https://user.github.io/remote1/config_prop_docs.yaml\" -o config_prop_docs.yaml\n    python -m tree_config.doc_gen download -f config_prop_docs.yaml \\\n        -u \"https://matham.github.io/remote2/config_prop_docs.yaml\" -o config_prop_docs.yaml\n    make html\n    make html\n\nThis downloads and merges the yaml files from our dependencies, adds to it our own\ndocs, and generates the ``config.rst``.\n\n\n","description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/matham/tree-config","keywords":"","license":"MIT","maintainer":"","maintainer_email":"","name":"tree-config","package_url":"https://pypi.org/project/tree-config/","platform":"","project_url":"https://pypi.org/project/tree-config/","project_urls":{"Bug Reports":"https://github.com/matham/tree-config/issues","Homepage":"https://github.com/matham/tree-config","Source":"https://github.com/matham/tree-config"},"provides_extra":null,"release_url":"https://pypi.org/project/tree-config/1.0.2/","requires_dist":["ruamel.yaml","pytest (>=3.6) ; extra == 'dev'","pytest-cov ; extra == 'dev'","sphinx-rtd-theme ; extra == 'dev'","coveralls ; extra == 'dev'","sphinx ; extra == 'dev'","flake8 ; extra == 'dev'","wheel ; extra == 'dev'"],"requires_python":"","summary":"Automatic app configuration of app objects.","version":"1.0.2","yanked":false,"yanked_reason":null},"last_serial":12865922,"releases":{"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"f218660546fd7d0cfdf21f7323b12bacd1e0d9b9ec960327dcd9308d216238a2","md5":"a083c52e897450ae4d23f55b500ea445","sha256":"83dc0032b1fdf7924910c4e1f4de66c78cd7e2f6108288169f3f922c9156143b"},"downloads":-1,"filename":"tree_config-0.1.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"a083c52e897450ae4d23f55b500ea445","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":13133,"upload_time":"2020-07-02T04:51:41","upload_time_iso_8601":"2020-07-02T04:51:41.182872Z","url":"https://files.pythonhosted.org/packages/f2/18/660546fd7d0cfdf21f7323b12bacd1e0d9b9ec960327dcd9308d216238a2/tree_config-0.1.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"bb9f81d3cae82779022d34e2e226b2375a09a9c4a87b414495869c1ee994d376","md5":"e804d004155efd9461b137196969094f","sha256":"72cd7e3ce440095082ffca4840484226926fd1148cc7f309d73206c8c2da0c33"},"downloads":-1,"filename":"tree-config-0.1.0.tar.gz","has_sig":false,"md5_digest":"e804d004155efd9461b137196969094f","packagetype":"sdist","python_version":"source","requires_python":null,"size":10733,"upload_time":"2020-07-02T04:51:42","upload_time_iso_8601":"2020-07-02T04:51:42.125121Z","url":"https://files.pythonhosted.org/packages/bb/9f/81d3cae82779022d34e2e226b2375a09a9c4a87b414495869c1ee994d376/tree-config-0.1.0.tar.gz","yanked":false,"yanked_reason":null}],"0.1.0.dev0":[{"comment_text":"","digests":{"blake2b_256":"eb838b2ff60b8dbadad0f0af30e3b59dcb6e140db554cd0a77db3bcf3ad83994","md5":"c88d958621d95f9b6f7da6b87e38a7df","sha256":"d64b87068123fd3536897f1eb7e83959b341c2c96af7cce5f253b86d0e1d9acf"},"downloads":-1,"filename":"tree-config-0.1.0.dev0.tar.gz","has_sig":false,"md5_digest":"c88d958621d95f9b6f7da6b87e38a7df","packagetype":"sdist","python_version":"source","requires_python":null,"size":8345,"upload_time":"2020-06-29T17:37:05","upload_time_iso_8601":"2020-06-29T17:37:05.844255Z","url":"https://files.pythonhosted.org/packages/eb/83/8b2ff60b8dbadad0f0af30e3b59dcb6e140db554cd0a77db3bcf3ad83994/tree-config-0.1.0.dev0.tar.gz","yanked":false,"yanked_reason":null}],"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"cbd1765f248c8fa8f731ca1c6689cbe7933f3a272423673cc1881950aa346290","md5":"73c0ad441a84d421c49b6e38744762cf","sha256":"7f2cbb7713737834d7ae4d72b6e778dc5fd2684971fd59144a5234427ad95ed0"},"downloads":-1,"filename":"tree_config-0.1.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"73c0ad441a84d421c49b6e38744762cf","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":13190,"upload_time":"2021-03-20T06:37:29","upload_time_iso_8601":"2021-03-20T06:37:29.311937Z","url":"https://files.pythonhosted.org/packages/cb/d1/765f248c8fa8f731ca1c6689cbe7933f3a272423673cc1881950aa346290/tree_config-0.1.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"cb4b847fa27db89558067e862ce51783dc344d3adfeff1b4dfc05e19fcd2f1d8","md5":"1836e552a47fce6306cc0ce5479c67ea","sha256":"217d3946b23f2ddec5de590f34f74a1e71faacd76cdae8b46d8fc247de9e8175"},"downloads":-1,"filename":"tree-config-0.1.1.tar.gz","has_sig":false,"md5_digest":"1836e552a47fce6306cc0ce5479c67ea","packagetype":"sdist","python_version":"source","requires_python":null,"size":10772,"upload_time":"2021-03-20T06:37:30","upload_time_iso_8601":"2021-03-20T06:37:30.261432Z","url":"https://files.pythonhosted.org/packages/cb/4b/847fa27db89558067e862ce51783dc344d3adfeff1b4dfc05e19fcd2f1d8/tree-config-0.1.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0":[{"comment_text":"","digests":{"blake2b_256":"807ef879dc038502b163fe229e7339474dd95ec5425b9382e364930cf642c482","md5":"c1712cc99feeb11fad50ad9e7bb15fbd","sha256":"720f4ebc89b4cb2dced4ed00494bb458df2983397597ac385b9bdf6c9f008536"},"downloads":-1,"filename":"tree_config-1.0.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"c1712cc99feeb11fad50ad9e7bb15fbd","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":23635,"upload_time":"2021-06-16T01:25:55","upload_time_iso_8601":"2021-06-16T01:25:55.472869Z","url":"https://files.pythonhosted.org/packages/80/7e/f879dc038502b163fe229e7339474dd95ec5425b9382e364930cf642c482/tree_config-1.0.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"cf6f9ccfeae045c4d130064da3c78d5f082b7c5eeba957d6ec4a9eb20553c47e","md5":"52a839f2d48c378f8dd9c0cebcba29f8","sha256":"d9a40a423e4aca16d6e75630f8313cde478f741d6c552d4bbc1e11bbbefe873e"},"downloads":-1,"filename":"tree-config-1.0.0.tar.gz","has_sig":false,"md5_digest":"52a839f2d48c378f8dd9c0cebcba29f8","packagetype":"sdist","python_version":"source","requires_python":null,"size":28034,"upload_time":"2021-06-16T01:25:57","upload_time_iso_8601":"2021-06-16T01:25:57.315418Z","url":"https://files.pythonhosted.org/packages/cf/6f/9ccfeae045c4d130064da3c78d5f082b7c5eeba957d6ec4a9eb20553c47e/tree-config-1.0.0.tar.gz","yanked":false,"yanked_reason":null}],"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"460b553774e782818d5f04a55e602b035a6dc7aa78613dd91ae8731a047b0009","md5":"ed2d6706153b8b30fc4d2392925b1d4a","sha256":"35c8ab578fb1c1ad6382d4f20b3858d9ffb76d7f4a6029ca5c65d5fd25c571db"},"downloads":-1,"filename":"tree_config-1.0.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"ed2d6706153b8b30fc4d2392925b1d4a","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":23650,"upload_time":"2021-07-13T22:50:45","upload_time_iso_8601":"2021-07-13T22:50:45.044119Z","url":"https://files.pythonhosted.org/packages/46/0b/553774e782818d5f04a55e602b035a6dc7aa78613dd91ae8731a047b0009/tree_config-1.0.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"a56922fdf7068eba7c7fcd5a80c0f1466a556cead68a2299e5895e3ec146199e","md5":"cdf76cf96ebe49dfd44c8dfada8a34a6","sha256":"309b494278c29816b13bf2ea1bb23ca297692b153548a4f9ee3af03583a1d24f"},"downloads":-1,"filename":"tree-config-1.0.1.tar.gz","has_sig":false,"md5_digest":"cdf76cf96ebe49dfd44c8dfada8a34a6","packagetype":"sdist","python_version":"source","requires_python":null,"size":28044,"upload_time":"2021-07-13T22:50:46","upload_time_iso_8601":"2021-07-13T22:50:46.886951Z","url":"https://files.pythonhosted.org/packages/a5/69/22fdf7068eba7c7fcd5a80c0f1466a556cead68a2299e5895e3ec146199e/tree-config-1.0.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.2":[{"comment_text":"","digests":{"blake2b_256":"78428b03ce708c151eb8f3fbaa4fa30b41d43a09182316dee86ca12e670c56c0","md5":"0f5201498c256c45ec9354a83a0671c1","sha256":"11e2c7e90aea5ef84d796a64a12e702d0898d9c51e1954fc55e4a8eac15b89c5"},"downloads":-1,"filename":"tree_config-1.0.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"0f5201498c256c45ec9354a83a0671c1","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":23990,"upload_time":"2022-02-11T21:26:24","upload_time_iso_8601":"2022-02-11T21:26:24.221458Z","url":"https://files.pythonhosted.org/packages/78/42/8b03ce708c151eb8f3fbaa4fa30b41d43a09182316dee86ca12e670c56c0/tree_config-1.0.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f4f0540551b439e0efdecf76ab6262aec36f14fa3ce488696a18c481f270d7ea","md5":"8f2797800747e7be133ac80215b16ab7","sha256":"44ac550f25a741a408fbb4379d99ce1d744dc6035089559d5adce8e356dfef2b"},"downloads":-1,"filename":"tree-config-1.0.2.tar.gz","has_sig":false,"md5_digest":"8f2797800747e7be133ac80215b16ab7","packagetype":"sdist","python_version":"source","requires_python":null,"size":26751,"upload_time":"2022-02-11T21:26:26","upload_time_iso_8601":"2022-02-11T21:26:26.748529Z","url":"https://files.pythonhosted.org/packages/f4/f0/540551b439e0efdecf76ab6262aec36f14fa3ce488696a18c481f270d7ea/tree-config-1.0.2.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"78428b03ce708c151eb8f3fbaa4fa30b41d43a09182316dee86ca12e670c56c0","md5":"0f5201498c256c45ec9354a83a0671c1","sha256":"11e2c7e90aea5ef84d796a64a12e702d0898d9c51e1954fc55e4a8eac15b89c5"},"downloads":-1,"filename":"tree_config-1.0.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"0f5201498c256c45ec9354a83a0671c1","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":23990,"upload_time":"2022-02-11T21:26:24","upload_time_iso_8601":"2022-02-11T21:26:24.221458Z","url":"https://files.pythonhosted.org/packages/78/42/8b03ce708c151eb8f3fbaa4fa30b41d43a09182316dee86ca12e670c56c0/tree_config-1.0.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f4f0540551b439e0efdecf76ab6262aec36f14fa3ce488696a18c481f270d7ea","md5":"8f2797800747e7be133ac80215b16ab7","sha256":"44ac550f25a741a408fbb4379d99ce1d744dc6035089559d5adce8e356dfef2b"},"downloads":-1,"filename":"tree-config-1.0.2.tar.gz","has_sig":false,"md5_digest":"8f2797800747e7be133ac80215b16ab7","packagetype":"sdist","python_version":"source","requires_python":null,"size":26751,"upload_time":"2022-02-11T21:26:26","upload_time_iso_8601":"2022-02-11T21:26:26.748529Z","url":"https://files.pythonhosted.org/packages/f4/f0/540551b439e0efdecf76ab6262aec36f14fa3ce488696a18c481f270d7ea/tree-config-1.0.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
