{"info":{"author":"","author_email":"Dan O'Reilly <oreilldf@gmail.com>","bugtrack_url":null,"classifiers":["Development Status :: 3 - Alpha","Intended Audience :: Developers","License :: OSI Approved :: BSD License","Natural Language :: English","Operating System :: Microsoft :: Windows","Operating System :: POSIX","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: Implementation :: CPython","Topic :: Software Development :: Libraries :: Python Modules"],"description":"aioprocessing\n=============\n[![Build Status](https://github.com/dano/aioprocessing/workflows/aioprocessing%20tests/badge.svg?branch=master)](https://github.com/dano/aioprocessing/actions)\n\n\n`aioprocessing` provides asynchronous, [`asyncio`](https://docs.python.org/3/library/asyncio.html) compatible, coroutine \nversions of many blocking instance methods on objects in the [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html) \nlibrary. To use [`dill`](https://pypi.org/project/dill) for universal pickling, install using `pip install aioprocessing[dill]`. Here's an example demonstrating the `aioprocessing` versions of \n`Event`, `Queue`, and `Lock`:\n\n```python\nimport time\nimport asyncio\nimport aioprocessing\n\n\ndef func(queue, event, lock, items):\n    \"\"\" Demo worker function.\n\n    This worker function runs in its own process, and uses\n    normal blocking calls to aioprocessing objects, exactly \n    the way you would use oridinary multiprocessing objects.\n\n    \"\"\"\n    with lock:\n        event.set()\n        for item in items:\n            time.sleep(3)\n            queue.put(item+5)\n    queue.close()\n\n\nasync def example(queue, event, lock):\n    l = [1,2,3,4,5]\n    p = aioprocessing.AioProcess(target=func, args=(queue, event, lock, l))\n    p.start()\n    while True:\n        result = await queue.coro_get()\n        if result is None:\n            break\n        print(\"Got result {}\".format(result))\n    await p.coro_join()\n\nasync def example2(queue, event, lock):\n    await event.coro_wait()\n    async with lock:\n        await queue.coro_put(78)\n        await queue.coro_put(None) # Shut down the worker\n\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    queue = aioprocessing.AioQueue()\n    lock = aioprocessing.AioLock()\n    event = aioprocessing.AioEvent()\n    tasks = [\n        asyncio.ensure_future(example(queue, event, lock)), \n        asyncio.ensure_future(example2(queue, event, lock)),\n    ]\n    loop.run_until_complete(asyncio.wait(tasks))\n    loop.close()\n```\n\nThe aioprocessing objects can be used just like their multiprocessing\nequivalents - as they are in `func` above - but they can also be \nseamlessly used inside of `asyncio` coroutines, without ever blocking\nthe event loop.\n\n\nWhat's new\n----------\n`v2.0.1`\n- Fixed a bug that kept the `AioBarrier` and `AioEvent` proxies returned from `AioManager` instances from working. Thanks to Giorgos Apostolopoulos for the fix.\n\n`v2.0.0`\n\n- Add support for universal pickling using [`dill`](https://github.com/uqfoundation/dill), installable with `pip install aioprocessing[dill]`. The library will now attempt to import [`multiprocess`](https://github.com/uqfoundation/multiprocess), falling back to stdlib `multiprocessing`. Force stdlib behaviour by setting a non-empty environment variable `AIOPROCESSING_DILL_DISABLED=1`. This can be used to avoid [errors](https://github.com/dano/aioprocessing/pull/36#discussion_r631178933) when attempting to combine `aioprocessing[dill]` with stdlib `multiprocessing` based objects like `concurrent.futures.ProcessPoolExecutor`.\n\n\nHow does it work?\n-----------------\n\nIn most cases, this library makes blocking calls to `multiprocessing` methods\nasynchronous by executing the call in a [`ThreadPoolExecutor`](https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor), using\n[`asyncio.run_in_executor()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.run_in_executor). \nIt does *not* re-implement multiprocessing using asynchronous I/O. This means \nthere is extra overhead added when you use `aioprocessing` objects instead of \n`multiprocessing` objects, because each one is generally introducing a\n`ThreadPoolExecutor` containing at least one [`threading.Thread`](https://docs.python.org/2/library/threading.html#thread-objects). It also means \nthat all the normal risks you get when you mix threads with fork apply here, too \n(See http://bugs.python.org/issue6721 for more info).\n\nThe one exception to this is `aioprocessing.AioPool`, which makes use of the \nexisting `callback` and `error_callback` keyword arguments in the various \n[`Pool.*_async`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.apply_async) methods to run them as `asyncio` coroutines. Note that \n`multiprocessing.Pool` is actually using threads internally, so the thread/fork\nmixing caveat still applies.\n\nEach `multiprocessing` class is replaced by an equivalent `aioprocessing` class,\ndistinguished by the `Aio` prefix. So, `Pool` becomes `AioPool`, etc. All methods\nthat could block on I/O also have a coroutine version that can be used with `asyncio`. For example, `multiprocessing.Lock.acquire()` can be replaced with `aioprocessing.AioLock.coro_acquire()`. You can pass an `asyncio` EventLoop object to any `coro_*` method using the `loop` keyword argument. For example, `lock.coro_acquire(loop=my_loop)`.\n\nNote that you can also use the `aioprocessing` synchronization primitives as replacements \nfor their equivalent `threading` primitives, in single-process, multi-threaded programs \nthat use `asyncio`.\n\n\nWhat parts of multiprocessing are supported?\n--------------------------------------------\n\nMost of them! All methods that could do blocking I/O in the following objects\nhave equivalent versions in `aioprocessing` that extend the `multiprocessing`\nversions by adding coroutine versions of all the blocking methods.\n\n- `Pool`\n- `Process`\n- `Pipe`\n- `Lock`\n- `RLock`\n- `Semaphore`\n- `BoundedSemaphore`\n- `Event`\n- `Condition`\n- `Barrier`\n- `connection.Connection`\n- `connection.Listener`\n- `connection.Client`\n- `Queue`\n- `JoinableQueue`\n- `SimpleQueue`\n- All `managers.SyncManager` `Proxy` versions of the items above (`SyncManager.Queue`, `SyncManager.Lock()`, etc.).\n\n\nWhat versions of Python are compatible?\n---------------------------------------\n\n`aioprocessing` will work out of the box on Python 3.5+.\n\nGotchas\n-------\nKeep in mind that, while the API exposes coroutines for interacting with\n`multiprocessing` APIs, internally they are almost always being delegated\nto a `ThreadPoolExecutor`, this means the caveats that apply with using\n`ThreadPoolExecutor` with `asyncio` apply: namely, you won't be able to\ncancel any of the coroutines, because the work being done in the worker\nthread can't be interrupted.\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"asyncio,multiprocessing,coroutine","license":"","maintainer":"","maintainer_email":"","name":"aioprocessing","package_url":"https://pypi.org/project/aioprocessing/","platform":null,"project_url":"https://pypi.org/project/aioprocessing/","project_urls":{"Home":"https://github.com/dano/aioprocessing"},"provides_extra":null,"release_url":"https://pypi.org/project/aioprocessing/2.0.1/","requires_dist":["multiprocess ; extra == \"dill\""],"requires_python":">=3.5","summary":"A Python 3.5+ library that integrates the multiprocessing module with asyncio.","version":"2.0.1","yanked":false,"yanked_reason":null},"last_serial":15109335,"releases":{"0.0.1":[{"comment_text":"","digests":{"blake2b_256":"cce8c03a42f33657ae377a2285a53d1568f4915f31aa61fea848dbb50da99983","md5":"d519eaa5bc795c0ed9fe7615063b13ec","sha256":"49c770a1026099f351d1383bf70cdd0e89f6fcdf3ea770ac0b0523a4b0506568"},"downloads":-1,"filename":"aioprocessing-0.0.1.tar.gz","has_sig":false,"md5_digest":"d519eaa5bc795c0ed9fe7615063b13ec","packagetype":"sdist","python_version":"source","requires_python":null,"size":8504,"upload_time":"2014-09-20T05:30:59","upload_time_iso_8601":"2014-09-20T05:30:59.820429Z","url":"https://files.pythonhosted.org/packages/cc/e8/c03a42f33657ae377a2285a53d1568f4915f31aa61fea848dbb50da99983/aioprocessing-0.0.1.tar.gz","yanked":false,"yanked_reason":null}],"0.0.2":[{"comment_text":"","digests":{"blake2b_256":"468c13e99b7af7dfdc3de1497fe9c549938ba83f51d1bc33fd611130d828ef6c","md5":"0fbacf44bfe8f0478cb966def94f5b3f","sha256":"1aa20e60c3215396762c5ae0e9cba25d2ea89c71f978dc4ee6bf15efe3b02486"},"downloads":-1,"filename":"aioprocessing-0.0.2.linux-x86_64.tar.gz","has_sig":false,"md5_digest":"0fbacf44bfe8f0478cb966def94f5b3f","packagetype":"sdist","python_version":"source","requires_python":null,"size":18779,"upload_time":"2016-11-24T05:23:31","upload_time_iso_8601":"2016-11-24T05:23:31.383137Z","url":"https://files.pythonhosted.org/packages/46/8c/13e99b7af7dfdc3de1497fe9c549938ba83f51d1bc33fd611130d828ef6c/aioprocessing-0.0.2.linux-x86_64.tar.gz","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"752a0012c515104f4ff573f1c2273a01fb3f5946fc9c77a328360a57489884ae","md5":"59bee8c6eda94009dd9e3086cead59a3","sha256":"9123e25c0eeef2e9c09f76205159f7c709028f04dcade502602f7353bc778307"},"downloads":-1,"filename":"aioprocessing-0.0.2.tar.gz","has_sig":false,"md5_digest":"59bee8c6eda94009dd9e3086cead59a3","packagetype":"sdist","python_version":"source","requires_python":null,"size":9198,"upload_time":"2016-11-24T05:23:33","upload_time_iso_8601":"2016-11-24T05:23:33.850309Z","url":"https://files.pythonhosted.org/packages/75/2a/0012c515104f4ff573f1c2273a01fb3f5946fc9c77a328360a57489884ae/aioprocessing-0.0.2.tar.gz","yanked":false,"yanked_reason":null}],"0.0.3":[{"comment_text":"","digests":{"blake2b_256":"9cd98057ceb331b5744539bc4c1eb371a0fd918a85e08e011e8b23e17651eddf","md5":"b6fd692127b6c5d816bf18260f8a2acf","sha256":"2b354b3e99224e613bc0558fda94c3c04c53a86390e1a6e1fae5ba7a36de6901"},"downloads":-1,"filename":"aioprocessing-0.0.3.tar.gz","has_sig":false,"md5_digest":"b6fd692127b6c5d816bf18260f8a2acf","packagetype":"sdist","python_version":"source","requires_python":null,"size":10653,"upload_time":"2017-02-01T13:05:57","upload_time_iso_8601":"2017-02-01T13:05:57.452986Z","url":"https://files.pythonhosted.org/packages/9c/d9/8057ceb331b5744539bc4c1eb371a0fd918a85e08e011e8b23e17651eddf/aioprocessing-0.0.3.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0":[{"comment_text":"","digests":{"blake2b_256":"1c6b239dc26f33d146e0bb3b753c31977dc6f94902d847930dcb085c5f99a086","md5":"5f72f29e2e67f73f376dc5c841b32081","sha256":"7cc8cb25499017655868759db91c36c30e820c64da582aeef418ab424f7c3579"},"downloads":-1,"filename":"aioprocessing-1.0.0.tar.gz","has_sig":false,"md5_digest":"5f72f29e2e67f73f376dc5c841b32081","packagetype":"sdist","python_version":"source","requires_python":null,"size":10657,"upload_time":"2017-05-31T13:32:01","upload_time_iso_8601":"2017-05-31T13:32:01.463114Z","url":"https://files.pythonhosted.org/packages/1c/6b/239dc26f33d146e0bb3b753c31977dc6f94902d847930dcb085c5f99a086/aioprocessing-1.0.0.tar.gz","yanked":false,"yanked_reason":null}],"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"a287edcfc09731bd94f9776e34587939948ba5f67b995773990e5896657e9655","md5":"7a6be1d600cda7e117caabd70db2c180","sha256":"9b88f4e51b7358e7a53ea2b6cfd1e000848270a1b09532a410b6d38e015b7de5"},"downloads":-1,"filename":"aioprocessing-1.0.1-py3-none-any.whl","has_sig":false,"md5_digest":"7a6be1d600cda7e117caabd70db2c180","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":12827,"upload_time":"2018-07-01T19:51:06","upload_time_iso_8601":"2018-07-01T19:51:06.018386Z","url":"https://files.pythonhosted.org/packages/a2/87/edcfc09731bd94f9776e34587939948ba5f67b995773990e5896657e9655/aioprocessing-1.0.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"38b17c24e264f240f89310ed95bf5257566deb4ae719e306e7eb6e654459383d","md5":"868ead8536e0bcaa5e573f6df8da7192","sha256":"b6952b476586c2a2e0d2802f42d73e6898ab474213ffda788d720a3fb57b01fb"},"downloads":-1,"filename":"aioprocessing-1.0.1.tar.gz","has_sig":false,"md5_digest":"868ead8536e0bcaa5e573f6df8da7192","packagetype":"sdist","python_version":"source","requires_python":null,"size":12143,"upload_time":"2018-07-01T19:51:07","upload_time_iso_8601":"2018-07-01T19:51:07.153486Z","url":"https://files.pythonhosted.org/packages/38/b1/7c24e264f240f89310ed95bf5257566deb4ae719e306e7eb6e654459383d/aioprocessing-1.0.1.tar.gz","yanked":false,"yanked_reason":null}],"1.1.0":[{"comment_text":"","digests":{"blake2b_256":"d9d0f8282cd77b8eb88ed581c7b7bdbe19fe9d834f5661b92c8a8327a511fac7","md5":"eb08764520895beff49a9fc5e2ee948f","sha256":"21a61c9c3d9089349e4847206028308ba2146e081f5ecd9195cca3e12ed45345"},"downloads":-1,"filename":"aioprocessing-1.1.0-py3-none-any.whl","has_sig":false,"md5_digest":"eb08764520895beff49a9fc5e2ee948f","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":14035,"upload_time":"2020-12-07T17:00:39","upload_time_iso_8601":"2020-12-07T17:00:39.621662Z","url":"https://files.pythonhosted.org/packages/d9/d0/f8282cd77b8eb88ed581c7b7bdbe19fe9d834f5661b92c8a8327a511fac7/aioprocessing-1.1.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"695795688231f241f327122d53c8fc633a4adc10521b2891506247fa5a57f5bb","md5":"b4bcffc4283aec295338bbd36ecfd8cc","sha256":"4603c86ff3fea673d4c643ad3adc519988cd778771b75079bc3be9e5ed4c5b66"},"downloads":-1,"filename":"aioprocessing-1.1.0.tar.gz","has_sig":false,"md5_digest":"b4bcffc4283aec295338bbd36ecfd8cc","packagetype":"sdist","python_version":"source","requires_python":null,"size":23662,"upload_time":"2020-12-07T17:00:40","upload_time_iso_8601":"2020-12-07T17:00:40.765662Z","url":"https://files.pythonhosted.org/packages/69/57/95688231f241f327122d53c8fc633a4adc10521b2891506247fa5a57f5bb/aioprocessing-1.1.0.tar.gz","yanked":false,"yanked_reason":null}],"2.0.0":[{"comment_text":"","digests":{"blake2b_256":"7932b6c2b59e4580cccfc4d589f277e92d6924bd94047c95e2a3b1edf19ac7e2","md5":"8ee47282665a2c2d8cc2843093b15a4c","sha256":"00757aa3ae8d99a7e41079d7b5fcdcbb7794b1d454961e8c6601e3d4be63c03f"},"downloads":-1,"filename":"aioprocessing-2.0.0-py3-none-any.whl","has_sig":false,"md5_digest":"8ee47282665a2c2d8cc2843093b15a4c","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":14791,"upload_time":"2021-06-05T01:31:11","upload_time_iso_8601":"2021-06-05T01:31:11.380360Z","url":"https://files.pythonhosted.org/packages/79/32/b6c2b59e4580cccfc4d589f277e92d6924bd94047c95e2a3b1edf19ac7e2/aioprocessing-2.0.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"8e3e54266241660fb026bfd27f660d44cd81a4b7f8a145d8e2db010de12622a0","md5":"838b6aa073f1373bd42204f86b0e3196","sha256":"469dfb746e8c4e0c727ba135cfabf9e034c554f6a73c27f908bfe3625dd74b9e"},"downloads":-1,"filename":"aioprocessing-2.0.0.tar.gz","has_sig":false,"md5_digest":"838b6aa073f1373bd42204f86b0e3196","packagetype":"sdist","python_version":"source","requires_python":null,"size":24963,"upload_time":"2021-06-05T01:31:12","upload_time_iso_8601":"2021-06-05T01:31:12.489834Z","url":"https://files.pythonhosted.org/packages/8e/3e/54266241660fb026bfd27f660d44cd81a4b7f8a145d8e2db010de12622a0/aioprocessing-2.0.0.tar.gz","yanked":false,"yanked_reason":null}],"2.0.1":[{"comment_text":"","digests":{"blake2b_256":"ea7b34129c3bb87078f37b1ca64b547e8669fdde00db9fa724f0b3a8ec54bb27","md5":"47a9b48a62583b15ec38975edc084553","sha256":"8fcac4b0108b72eb9df76e06a9d7e05720ee1e8330829d3fd53fa059879be586"},"downloads":-1,"filename":"aioprocessing-2.0.1-py3-none-any.whl","has_sig":false,"md5_digest":"47a9b48a62583b15ec38975edc084553","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":14415,"upload_time":"2022-09-15T20:33:25","upload_time_iso_8601":"2022-09-15T20:33:25.610312Z","url":"https://files.pythonhosted.org/packages/ea/7b/34129c3bb87078f37b1ca64b547e8669fdde00db9fa724f0b3a8ec54bb27/aioprocessing-2.0.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4d859a75151e7049bf144c01384279201d82d99484bd658f8e6fb013552d8724","md5":"e533c65f5879374c27f266c2040405ea","sha256":"fe01c7b1a38c78168611d3040e73d93036c3b7c8a649d636dc9ed7a3bc9b1ba2"},"downloads":-1,"filename":"aioprocessing-2.0.1.tar.gz","has_sig":false,"md5_digest":"e533c65f5879374c27f266c2040405ea","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":12818,"upload_time":"2022-09-15T20:33:26","upload_time_iso_8601":"2022-09-15T20:33:26.765370Z","url":"https://files.pythonhosted.org/packages/4d/85/9a75151e7049bf144c01384279201d82d99484bd658f8e6fb013552d8724/aioprocessing-2.0.1.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"ea7b34129c3bb87078f37b1ca64b547e8669fdde00db9fa724f0b3a8ec54bb27","md5":"47a9b48a62583b15ec38975edc084553","sha256":"8fcac4b0108b72eb9df76e06a9d7e05720ee1e8330829d3fd53fa059879be586"},"downloads":-1,"filename":"aioprocessing-2.0.1-py3-none-any.whl","has_sig":false,"md5_digest":"47a9b48a62583b15ec38975edc084553","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":14415,"upload_time":"2022-09-15T20:33:25","upload_time_iso_8601":"2022-09-15T20:33:25.610312Z","url":"https://files.pythonhosted.org/packages/ea/7b/34129c3bb87078f37b1ca64b547e8669fdde00db9fa724f0b3a8ec54bb27/aioprocessing-2.0.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4d859a75151e7049bf144c01384279201d82d99484bd658f8e6fb013552d8724","md5":"e533c65f5879374c27f266c2040405ea","sha256":"fe01c7b1a38c78168611d3040e73d93036c3b7c8a649d636dc9ed7a3bc9b1ba2"},"downloads":-1,"filename":"aioprocessing-2.0.1.tar.gz","has_sig":false,"md5_digest":"e533c65f5879374c27f266c2040405ea","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":12818,"upload_time":"2022-09-15T20:33:26","upload_time_iso_8601":"2022-09-15T20:33:26.765370Z","url":"https://files.pythonhosted.org/packages/4d/85/9a75151e7049bf144c01384279201d82d99484bd658f8e6fb013552d8724/aioprocessing-2.0.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
