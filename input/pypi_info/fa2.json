{"info":{"author":"Bhargav Chippada","author_email":"bhargavchippada19@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Intended Audience :: Science/Research","License :: OSI Approved :: GNU General Public License v3 (GPLv3)","Programming Language :: Python :: 2","Programming Language :: Python :: 3","Topic :: Scientific/Engineering :: Mathematics"],"description":"## ForceAtlas2 for Python\n\nA port of Gephi's Force Atlas 2 layout algorithm to Python 2 and Python 3 (with a wrapper for NetworkX and igraph). This is the fastest python implementation available with most of the features complete. It also supports Barnes Hut approximation for maximum speedup.\n\nForceAtlas2 is a very fast layout algorithm for force-directed graphs. It's used to spatialize a **weighted undirected** graph in 2D (Edge weight defines the strength of the connection). The implementation is based on this [paper](http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0098679) and the corresponding [gephi-java-code](https://github.com/gephi/gephi/blob/master/modules/LayoutPlugin/src/main/java/org/gephi/layout/plugin/forceAtlas2/ForceAtlas2.java). Its really quick compared to the fruchterman reingold algorithm (spring layout) of networkx and scales well to high number of nodes (>10000).\n\n<p align=\"center\" text-align=\"center\">\n    <b>Spatialize a random Geometric Graph</b>\n</p>\n<p align=\"center\">\n  <img width=\"460\" height=\"300\" src=\"https://raw.githubusercontent.com/bhargavchippada/forceatlas2/master/examples/geometric_graph.png\" alt=\"Geometric Graph\">\n</p>\n\n## Installation\n\nInstall from pip:\n\n    pip install fa2\n\nTo build and install run from source:\n\n    python setup.py install\n\n**Cython is highly recommended if you are buidling from source as it will speed up by a factor of 10-100x depending on the graph**\n\n### Dependencies\n\n-   numpy (adjacency matrix as complete matrix)\n-   scipy (adjacency matrix as sparse matrix)\n-   tqdm (progressbar)\n-   Cython (10-100x speedup)\n-   networkx (To use the NetworkX wrapper function, you obviously need NetworkX)\n-   python-igraph (To use the igraph wrapper)\n\n<p align=\"center\" text-align=\"center\">\n    <b>Spatialize a 2D Grid</b>\n</p>\n<p align=\"center\">\n  <img width=\"460\" height=\"300\" src=\"https://raw.githubusercontent.com/bhargavchippada/forceatlas2/master/examples/grid_graph.png\" alt=\"Grid Graph\">\n</p>\n\n## Usage\n\nfrom fa2 import ForceAtlas2\n\nCreate a ForceAtlas2 object with the appropriate settings. ForceAtlas2 class contains three important methods:\n```python\nforceatlas2 (G, pos, iterations)\n# G is a graph in 2D numpy ndarray format (or) scipy sparse matrix format. You can set the edge weights (> 0) in the matrix\n# pos is a numpy array (Nx2) of initial positions of nodes\n# iterations is num of iterations to run the algorithm\n# returns a list of (x,y) pairs for each node's final position\n```\n```python\nforceatlas2_networkx_layout(G, pos, iterations)\n# G is a networkx graph. Edge weights can be set (if required) in the Networkx graph\n# pos is a dictionary, as in networkx\n# iterations is num of iterations to run the algorithm\n# returns a dictionary of node positions (2D X-Y tuples) indexed by the node name\n```\n```python\nforceatlas2_igraph_layout(G, pos, iterations, weight_attr)\n# G is an igraph graph\n# pos is a numpy array (Nx2) or list of initial positions of nodes (see that the indexing matches igraph node index)\n# iterations is num of iterations to run the algorithm\n# weight_attr denotes the weight attribute's name in G.es, None by default\n# returns an igraph layout\n```\nBelow is an example usage. You can also see the feature settings of ForceAtlas2 class.\n\n```python\nimport networkx as nx\nfrom fa2 import ForceAtlas2\nimport matplotlib.pyplot as plt\n\nG = nx.random_geometric_graph(400, 0.2)\n\nforceatlas2 = ForceAtlas2(\n                        # Behavior alternatives\n                        outboundAttractionDistribution=True,  # Dissuade hubs\n                        linLogMode=False,  # NOT IMPLEMENTED\n                        adjustSizes=False,  # Prevent overlap (NOT IMPLEMENTED)\n                        edgeWeightInfluence=1.0,\n\n                        # Performance\n                        jitterTolerance=1.0,  # Tolerance\n                        barnesHutOptimize=True,\n                        barnesHutTheta=1.2,\n                        multiThreaded=False,  # NOT IMPLEMENTED\n\n                        # Tuning\n                        scalingRatio=2.0,\n                        strongGravityMode=False,\n                        gravity=1.0,\n\n                        # Log\n                        verbose=True)\n\npositions = forceatlas2.forceatlas2_networkx_layout(G, pos=None, iterations=2000)\nnx.draw_networkx_nodes(G, positions, node_size=20, with_labels=False, node_color=\"blue\", alpha=0.4)\nnx.draw_networkx_edges(G, positions, edge_color=\"green\", alpha=0.05)\nplt.axis('off')\nplt.show()\n\n# equivalently\nimport igraph\nG = igraph.Graph.TupleList(G.edges(), directed=False)\nlayout = forceatlas2.forceatlas2_igraph_layout(G, pos=None, iterations=2000)\nigraph.plot(G, layout).show()\n```\nYou can also take a look at forceatlas2.py file for understanding the ForceAtlas2 class and its functions better.\n\n## Features Completed\n\n-   **barnesHutOptimize**: Barnes Hut optimization, n<sup>2</sup> complexity to n.ln(n)\n-   **gravity**: Attracts nodes to the center. Prevents islands from drifting away\n-   **Dissuade Hubs**: Distributes attraction along outbound edges. Hubs attract less and thus are pushed to the borders\n-   **scalingRatio**: How much repulsion you want. More makes a more sparse graph\n-   **strongGravityMode**: A stronger gravity view\n-   **jitterTolerance**: How much swinging you allow. Above 1 discouraged. Lower gives less speed and more precision\n-   **verbose**: Shows a progressbar of iterations completed. Also, shows time taken for different force computations\n-   **edgeWeightInfluence**: How much influence you give to the edges weight. 0 is \"no influence\" and 1 is \"normal\"\n\n## Documentation\n\nYou will find all the documentation in the source code\n\n## Contributors\n\nContributions are highly welcome. Please submit your pull requests and become a collaborator.\n\n## Copyright\n\n    Copyright (C) 2017 Bhargav Chippada bhargavchippada19@gmail.com.\n    Licensed under the GNU GPLv3.\n\nThe files are heavily based on the java files included in Gephi, git revision 2b9a7c8 and Max Shinn's port to python of the algorithm. Here I include the copyright information from those files:\n\n    Copyright 2008-2011 Gephi\n    Authors : Mathieu Jacomy <mathieu.jacomy@gmail.com>\n    Website : http://www.gephi.org\n    Copyright 2011 Gephi Consortium. All rights reserved.\n    Portions Copyrighted 2011 Gephi Consortium.\n    The contents of this file are subject to the terms of either the\n    GNU General Public License Version 3 only (\"GPL\") or the Common\n    Development and Distribution License(\"CDDL\") (collectively, the\n    \"License\"). You may not use this file except in compliance with\n    the License.\n\n    <https://github.com/mwshinn/forceatlas2-python>\n    Copyright 2016 Max Shinn <mws41@cam.ac.uk>\n    Available under the GPLv3\n\n    Also, thanks to Eugene Bosiakov <https://github.com/bosiakov/fa2l>\n\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":"https://github.com/bhargavchippada/forceatlas2/archive/v0.3.5.tar.gz","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/bhargavchippada/forceatlas2","keywords":"forceatlas2,networkx,force-directed-graph,force-layout,graph","license":"","maintainer":"","maintainer_email":"","name":"fa2","package_url":"https://pypi.org/project/fa2/","platform":"","project_url":"https://pypi.org/project/fa2/","project_urls":{"Download":"https://github.com/bhargavchippada/forceatlas2/archive/v0.3.5.tar.gz","Homepage":"https://github.com/bhargavchippada/forceatlas2"},"provides_extra":null,"release_url":"https://pypi.org/project/fa2/0.3.5/","requires_dist":["numpy","scipy","tqdm","python-igraph ; extra == 'igraph'","networkx ; extra == 'networkx'"],"requires_python":"","summary":"The fastest ForceAtlas2 algorithm for Python (and NetworkX)","version":"0.3.5","yanked":false,"yanked_reason":null},"last_serial":4740285,"releases":{"0.2":[{"comment_text":"","digests":{"blake2b_256":"dd10b2756c3e962c7bbe0b3cfbf93e23a5c40cafd6b0ef061318c343e2fcb475","md5":"78c84f6144739c653c03db7391e631dc","sha256":"d8dcb2b6c3a53e682fb8d15ecdcbc07aaa04140fe2174fc5a90a4c41fa2de9ba"},"downloads":-1,"filename":"fa2-0.2.tar.gz","has_sig":false,"md5_digest":"78c84f6144739c653c03db7391e631dc","packagetype":"sdist","python_version":"source","requires_python":null,"size":78787,"upload_time":"2017-10-28T13:08:26","upload_time_iso_8601":"2017-10-28T13:08:26.088945Z","url":"https://files.pythonhosted.org/packages/dd/10/b2756c3e962c7bbe0b3cfbf93e23a5c40cafd6b0ef061318c343e2fcb475/fa2-0.2.tar.gz","yanked":false,"yanked_reason":null}],"0.3":[{"comment_text":"","digests":{"blake2b_256":"1136fc99e7c9050cc4bb654dd31f90461cb531faa7b601886953310700dc1755","md5":"4f74e25577b02436c338e8afc00ed19d","sha256":"3d5cc107feb53c49a8feb2fea65dd0a4c5d049505a70df31225d423e2eb79041"},"downloads":-1,"filename":"fa2-0.3.tar.gz","has_sig":false,"md5_digest":"4f74e25577b02436c338e8afc00ed19d","packagetype":"sdist","python_version":"source","requires_python":null,"size":80486,"upload_time":"2019-01-23T12:26:13","upload_time_iso_8601":"2019-01-23T12:26:13.403818Z","url":"https://files.pythonhosted.org/packages/11/36/fc99e7c9050cc4bb654dd31f90461cb531faa7b601886953310700dc1755/fa2-0.3.tar.gz","yanked":false,"yanked_reason":null}],"0.3.4":[{"comment_text":"","digests":{"blake2b_256":"85db71b050d862f97609ad6f24f27b5062a348d68fbfd8fdf0065041e2b1881e","md5":"7fcd246a6c73d9008212163ebe89d576","sha256":"48bbd2621d1229d2cc025fd4b06ff63259604400e1d997ffbeffec3e816c5cc4"},"downloads":-1,"filename":"fa2-0.3.4-cp37-cp37m-win_amd64.whl","has_sig":false,"md5_digest":"7fcd246a6c73d9008212163ebe89d576","packagetype":"bdist_wheel","python_version":"cp37","requires_python":null,"size":149587,"upload_time":"2019-01-23T17:15:57","upload_time_iso_8601":"2019-01-23T17:15:57.533817Z","url":"https://files.pythonhosted.org/packages/85/db/71b050d862f97609ad6f24f27b5062a348d68fbfd8fdf0065041e2b1881e/fa2-0.3.4-cp37-cp37m-win_amd64.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"2c87c085b4fc3e84a4622de703a1281e15e4f34ce33b7799fea28e2b7d4a9d4f","md5":"ef9ed05ad739ea2812bffdb429f3ae2d","sha256":"959c146374100821a344de08a21663975d5c0936973e0bf8736121f83f845587"},"downloads":-1,"filename":"fa2-0.3.4.tar.gz","has_sig":false,"md5_digest":"ef9ed05ad739ea2812bffdb429f3ae2d","packagetype":"sdist","python_version":"source","requires_python":null,"size":385307,"upload_time":"2019-01-23T17:15:59","upload_time_iso_8601":"2019-01-23T17:15:59.329948Z","url":"https://files.pythonhosted.org/packages/2c/87/c085b4fc3e84a4622de703a1281e15e4f34ce33b7799fea28e2b7d4a9d4f/fa2-0.3.4.tar.gz","yanked":false,"yanked_reason":null}],"0.3.5":[{"comment_text":"","digests":{"blake2b_256":"186a8762da08a7cd4e7fdd25d51793fe6b65a90d37c17450f5d514eda84655b7","md5":"5da1eb976b569df3b32b2104b597daf8","sha256":"f4712aa75a857df35bf023e02e48739a6243a29ef95649cfc7050e18e7e8c15c"},"downloads":-1,"filename":"fa2-0.3.5-cp37-cp37m-win_amd64.whl","has_sig":false,"md5_digest":"5da1eb976b569df3b32b2104b597daf8","packagetype":"bdist_wheel","python_version":"cp37","requires_python":null,"size":151220,"upload_time":"2019-01-25T14:49:33","upload_time_iso_8601":"2019-01-25T14:49:33.047629Z","url":"https://files.pythonhosted.org/packages/18/6a/8762da08a7cd4e7fdd25d51793fe6b65a90d37c17450f5d514eda84655b7/fa2-0.3.5-cp37-cp37m-win_amd64.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"48d1aa67d917628d29b83f3413790155da575865f3eab8b6e577c5871ef987d8","md5":"3f6e4bd14b8a69e6c330b58fc66c4e95","sha256":"9a12e0a7dc228999c605beaae751424ec4a4f60281f44683c0744a72fc9141ef"},"downloads":-1,"filename":"fa2-0.3.5.tar.gz","has_sig":false,"md5_digest":"3f6e4bd14b8a69e6c330b58fc66c4e95","packagetype":"sdist","python_version":"source","requires_python":null,"size":435436,"upload_time":"2019-01-25T14:49:35","upload_time_iso_8601":"2019-01-25T14:49:35.297315Z","url":"https://files.pythonhosted.org/packages/48/d1/aa67d917628d29b83f3413790155da575865f3eab8b6e577c5871ef987d8/fa2-0.3.5.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"186a8762da08a7cd4e7fdd25d51793fe6b65a90d37c17450f5d514eda84655b7","md5":"5da1eb976b569df3b32b2104b597daf8","sha256":"f4712aa75a857df35bf023e02e48739a6243a29ef95649cfc7050e18e7e8c15c"},"downloads":-1,"filename":"fa2-0.3.5-cp37-cp37m-win_amd64.whl","has_sig":false,"md5_digest":"5da1eb976b569df3b32b2104b597daf8","packagetype":"bdist_wheel","python_version":"cp37","requires_python":null,"size":151220,"upload_time":"2019-01-25T14:49:33","upload_time_iso_8601":"2019-01-25T14:49:33.047629Z","url":"https://files.pythonhosted.org/packages/18/6a/8762da08a7cd4e7fdd25d51793fe6b65a90d37c17450f5d514eda84655b7/fa2-0.3.5-cp37-cp37m-win_amd64.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"48d1aa67d917628d29b83f3413790155da575865f3eab8b6e577c5871ef987d8","md5":"3f6e4bd14b8a69e6c330b58fc66c4e95","sha256":"9a12e0a7dc228999c605beaae751424ec4a4f60281f44683c0744a72fc9141ef"},"downloads":-1,"filename":"fa2-0.3.5.tar.gz","has_sig":false,"md5_digest":"3f6e4bd14b8a69e6c330b58fc66c4e95","packagetype":"sdist","python_version":"source","requires_python":null,"size":435436,"upload_time":"2019-01-25T14:49:35","upload_time_iso_8601":"2019-01-25T14:49:35.297315Z","url":"https://files.pythonhosted.org/packages/48/d1/aa67d917628d29b83f3413790155da575865f3eab8b6e577c5871ef987d8/fa2-0.3.5.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
