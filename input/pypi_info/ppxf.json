{"info":{"author":"Michele Cappellari","author_email":"michele.cappellari@physics.ox.ac.uk","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Intended Audience :: Developers","Intended Audience :: Science/Research","Operating System :: OS Independent","Programming Language :: Python :: 3"],"description":"\r\n**pPXF: Full Spectrum Fitting with Photometry for Stars and Galaxies**\r\n\r\n.. image:: http://www-astro.physics.ox.ac.uk/~cappellari/software/ppxf_logo.svg\r\n    :target: https://www-astro.physics.ox.ac.uk/~cappellari/software/#ppxf\r\n    :width: 100\r\n.. image:: https://img.shields.io/pypi/v/ppxf.svg\r\n    :target: https://pypi.org/project/ppxf/\r\n.. image:: https://img.shields.io/badge/arXiv-2208.14974-orange.svg\r\n    :target: https://arxiv.org/abs/2208.14974\r\n.. image:: https://img.shields.io/badge/DOI-10.1093/mnras/stad2597-green.svg\r\n    :target: https://doi.org/10.1093/mnras/stad2597\r\n\r\nThis ``pPXF`` package contains a Python implementation of the Penalized\r\nPiXel-Fitting (``pPXF``) method. It uses full-spectrum fitting with photometry\r\n(SED) to extract the stellar and gas kinematics, as well as the stellar population of\r\nstars and galaxies. The method was originally described in `Cappellari & Emsellem (2004)\r\n<https://ui.adsabs.harvard.edu/abs/2004PASP..116..138C>`_\r\nand was substantially upgraded in subsequent years and particularly in\r\n`Cappellari (2017) <https://ui.adsabs.harvard.edu/abs/2017MNRAS.466..798C>`_\r\nand with the inclusion of photometry and linear constraints in\r\n`Cappellari (2023) <https://ui.adsabs.harvard.edu/abs/2023MNRAS.526.3273C>`_.\r\n\r\n.. contents:: :depth: 1\r\n\r\nAttribution\r\n-----------\r\n\r\nIf you use this software for your research, please cite at least `Cappellari (2023)`_,\r\nor additionally some ``pPXF`` papers above. The BibTeX entry for the paper is::\r\n\r\n    @ARTICLE{Cappellari2023,\r\n        author = {{Cappellari}, M.},\r\n        title = \"{Full spectrum fitting with photometry in PPXF: stellar population\r\n            versus dynamical masses, non-parametric star formation history and\r\n            metallicity for 3200 LEGA-C galaxies at redshift $z\\approx0.8$}\",\r\n        journal = {MNRAS},\r\n        eprint = {2208.14974},\r\n        year = 2023,\r\n        volume = 526,\r\n        pages = {3273-3300},\r\n        doi = {10.1093/mnras/stad2597}\r\n    }\r\n\r\nInstallation\r\n------------\r\n\r\ninstall with::\r\n\r\n    pip install ppxf\r\n\r\nWithout write access to the global ``site-packages`` directory, use::\r\n\r\n    pip install --user ppxf\r\n\r\nTo upgrade ``pPXF`` to the latest version use::\r\n\r\n    pip install --upgrade ppxf\r\n\r\nUsage Examples\r\n--------------\r\n\r\nTo learn how to use the ``pPXF`` package, copy, modify and run\r\nthe example programs in the ``ppxf/examples`` directory. \r\nIt can be found within the main ``ppxf`` package installation folder \r\ninside `site-packages <https://stackoverflow.com/a/46071447>`_. \r\nThe detailed documentation is contained in the docstring of the file \r\n``ppxf.py``, or on `PyPi <https://pypi.org/project/ppxf/>`_ or as PDF \r\nfrom `<https://purl.org/cappellari/software>`_.\r\n\r\n.. image:: http://www-astro.physics.ox.ac.uk/~cappellari/software/jupyter_logo.svg\r\n    :target: https://github.com/micappe/ppxf_examples\r\n    :width: 100\r\n    :alt: Jupyter Notebook\r\n\r\nExamples as Jupyter Notebooks are also available on my\r\n`GitHub repository <https://github.com/micappe/ppxf_examples>`_.\r\n\r\n###########################################################################\r\n\r\npPXF Purpose\r\n------------\r\n\r\nExtract the galaxy stellar and gas kinematics, stellar population and gas\r\nemission by fitting a set of templates to an observed spectrum, or to a\r\ncombination of a spectrum and photometry (SED), via full-spectrum fitting.\r\nIt uses the Penalized PiXel-Fitting (``pPXF``) method originally described in\r\n`Cappellari & Emsellem (2004) <https://ui.adsabs.harvard.edu/abs/2004PASP..116..138C>`_\r\nand substantially upgraded in subsequent years and particularly in\r\n`Cappellari (2017) <https://ui.adsabs.harvard.edu/abs/2017MNRAS.466..798C>`_\r\nand with the inclusion of photometry and linear constraints in\r\n`Cappellari (2023) <https://ui.adsabs.harvard.edu/abs/2023MNRAS.526.3273C>`_.\r\n\r\nThe following key optional features are also available:\r\n\r\n1)  An optimal template, positive linear combination of different input\r\n    templates, can be fitted together with the kinematics.\r\n2)  One can enforce smoothness on the template weights during the fit. This\r\n    is useful to attach a physical meaning to the weights e.g. in terms of\r\n    the star formation history of a galaxy.\r\n3)  One can fit multiple kinematic components for both the stars and the\r\n    gas emission lines. Both the stellar and gas LOSVD can be penalized and\r\n    can be described by a general Gauss-Hermite series.\r\n4)  One can fit simultaneously a spectrum and a set of photometric\r\n    measurements (SED fitting).\r\n5)  Any parameter of the LOSVD (e.g. sigma) for any kinematic component can\r\n    either be fitted or held fixed to a given value, while other parameters\r\n    are fitted. Alternatively, parameters can be constrained to lie\r\n    within given limits or tied by nonlinear equalities to other parameters.\r\n6)  One can enforce linear equality/inequality constraints on either the\r\n    template weights or the kinematic parameters.\r\n7)  Additive and/or multiplicative polynomials can be included to adjust\r\n    the continuum shape of the template to the observed spectrum.\r\n8)  Iterative sigma clipping can be used to clean the spectrum.\r\n9)  It is possible to fit a mirror-symmetric LOSVD to two spectra at the\r\n    same time. This is useful for spectra taken at point-symmetric spatial\r\n    positions with respect to the center of an equilibrium stellar system.\r\n10) One can include sky spectra in the fit, to deal with cases where the\r\n    sky dominates the observed spectrum and an accurate sky subtraction is\r\n    critical.\r\n11) One can model the attenuation curve for an arbitrary number of dust\r\n    components and for user-provided attenuation curves.\r\n12) The covariance matrix can be input instead of the error spectrum, to\r\n    account for correlated errors in the spectral pixels.\r\n13) One can specify the weights fraction between two kinematics components,\r\n    e.g. to model bulge and disk contributions.\r\n14) One can use templates with higher resolution than the galaxy, to\r\n    improve the accuracy of the LOSVD extraction at low dispersion.\r\n\r\n\r\nCalling Sequence\r\n----------------\r\n\r\n.. code-block:: python\r\n\r\n    from ppxf.ppxf import ppxf\r\n\r\n    pp = ppxf(templates, galaxy, noise, velscale, start, bias=None,\r\n              bounds=None, clean=False, component=0, constr_templ=None,\r\n              constr_kinem=None, degree=4, dust=None, fixed=None,\r\n              fraction=None, ftol=1e-4, gas_component=None, gas_names=None,\r\n              gas_reddening=None, gas_reddening_func=None,\r\n              global_search=False, goodpixels=None, lam=None,\r\n              lam_temp=None, linear=False, linear_method='lsq_box',\r\n              mask=None, method='capfit', mdegree=0, moments=2, phot=None,\r\n              plot=False, quiet=False, reddening=None, reddening_func=None,\r\n              reg_dim=None, reg_ord=2, reg_step=None, regul=0,\r\n              sigma_diff=0, sky=None, templates_rfft=None, tied=None,\r\n              trig=False, velscale_ratio=1, vsyst=0, x0=None)\r\n\r\n    print(pp.sol)  # print best-fitting kinematics (V, sigma, h3, h4)\r\n    pp.plot()      # Plot best fit with gas lines and photometry\r\n\r\nExample programs are located in the ``ppxf/examples`` subdirectory,\r\naccessible within the primary ``ppxf`` package directory found in\r\n``site-packages``. For guidance on locating the installation folder, refer\r\nto this `Stack Overflow post <https://stackoverflow.com/a/46071447>`_.\r\n\r\nThese Python examples are structured using the ``py:percent`` format, and\r\ncan be opened as Jupyter Notebooks in most Python IDEs.\r\n\r\nAdditionally, one can view the Jupyter Notebook formatted examples complete\r\nwith their outputs on my `GitHub repository <https://github.com/micappe/ppxf_examples>`_.\r\n\r\n\r\nInput Parameters\r\n----------------\r\n\r\ntemplates: array_like with shape (n_pixels_temp, n_templates)\r\n    Vector containing a single log-rebinned spectral template, or an array\r\n    of shape ``(n_pixels_temp, n_templates)`` containing different\r\n    log-rebinned  stellar or gas emission spectral templates to be optimized\r\n    during the fit of the ``galaxy`` spectrum. It has to be\r\n    ``n_pixels_temp >= galaxy.size``.\r\n\r\n    To apply linear regularization to the ``weights`` via the keyword\r\n    ``regul``, ``templates`` should be an array of shape\r\n\r\n    - 2-dim: ``(n_pixels_temp, n_age)``,\r\n    - 3-dim: ``(n_pixels_temp, n_age, n_metal)``\r\n    - 4-dim: ``(n_pixels_temp, n_age, n_metal, n_alpha)``\r\n\r\n    depending on the number of population variables one wants to study.\r\n    This can be useful to try to attach a physical meaning to the output\r\n    ``weights``, in term of the galaxy star formation history and chemical\r\n    composition distribution.\r\n    In that case the templates may represent single stellar population SSP\r\n    models and should be arranged in sequence of increasing age,\r\n    metallicity or alpha (or alternative population parameters) along the\r\n    second, third or fourth dimension of the array respectively.\r\n\r\n    IMPORTANT: The templates must be normalized to unity order of\r\n    magnitude, to avoid numerical instabilities.\r\n\r\n    When studying stellar population, the relative fluxes of the templates\r\n    are important. For this reason one must scale all templates by a scalar.\r\n    This can be done with a command like::\r\n\r\n        templates /= np.median(templates)\r\n\r\n    When using individual stars as templates, the relative fluxes are\r\n    generally irrelevant and one can normalize each template independently.\r\n    This can be done with a command like::\r\n\r\n        templates /= np.median(templates, 0)\r\n\r\ngalaxy: array_like with shape (n_pixels,)\r\n    Vector containing the log-rebinned spectrum of the galaxy to be\r\n    measured. Both the templates and the galaxy spectra have to be\r\n    logarithmically rebinned and the continuum should *not* be\r\n    subtracted. The rebinning may be performed with the ``log_rebin``\r\n    routine in ``ppxf.ppxf_util``. The units of the spectrum flux are\r\n    arbitrary. One can use e.g. ``erg/(s cm^2 A)`` or ``erg/(s cm^2 pixel)``\r\n    as long as the same are used for ``templates``. But see the note at\r\n    the end of this section.\r\n\r\n    For high redshift galaxies, it is generally easier to bring the spectra\r\n    close to the restframe wavelength, before doing the ``pPXF`` fit. This\r\n    can be done by dividing the observed wavelength by ``(1 + z)``, where\r\n    ``z`` is a rough estimate of the galaxy redshift. There is no need to\r\n    modify the spectrum in any way, given that a red shift corresponds to a\r\n    linear shift of the log-rebinned spectrum. One just needs to compute\r\n    the wavelength range in the rest-frame and adjust the instrumental\r\n    resolution of the galaxy observations. See Section 2.4 of\r\n    `Cappellari (2017)`_ for details.\r\n\r\n    ``galaxy`` can also be an array of shape ``(n_pixels, 2)`` containing\r\n    two spectra to be fitted, at the same time, with a\r\n    reflection-symmetric LOSVD. This is useful for spectra taken at\r\n    point-symmetric spatial positions with respect to the center of an\r\n    equilibrium stellar system. For a discussion of the usefulness of\r\n    this two-sided fitting see e.g. Section 3.6 of `Rix & White (1992)\r\n    <http://ui.adsabs.harvard.edu/abs/1992MNRAS.254..389R>`_.\r\n\r\n    IMPORTANT: (1) For the two-sided fitting the ``vsyst`` keyword has to\r\n    be used. (2) Make sure the spectra are rescaled to be not too many\r\n    order of magnitude different from unity, to avoid numerical\r\n    instability. E.g. units of ``erg/(s cm^2 A)`` may cause problems!\r\nnoise: array_like with shape (n_pixels,)\r\n    Vector containing the ``1*sigma`` uncertainty (per spectral pixel) in\r\n    the ``galaxy`` spectrum, or covariance matrix describing the correlated\r\n    uncertainties in the galaxy spectrum. Of course this vector/matrix must\r\n    have the same units as the galaxy spectrum.\r\n\r\n    The overall normalization of the ``noise`` does not affect the location\r\n    of the ``chi2`` minimum. For this reason one can measure reliable\r\n    kinematics even when the noise is not accurately know.\r\n\r\n    If ``galaxy`` is an array of shape ``(n_pixels, 2)`` array,\r\n    then ``noise`` has to be an array with the same shape.\r\n\r\n    When ``noise`` has shape ``(n_pixels, n_pixels)`` it is assumed to\r\n    contain the covariance matrix with elements ``cov(i, j)``. When the\r\n    errors in the spectrum are uncorrelated it is mathematically equivalent\r\n    to input in ``pPXF`` an error vector ``noise=errvec`` or a\r\n    ``(n_pixels, n_pixels)`` diagonal matrix ``noise = np.diag(errvec**2)``\r\n    (note squared!).\r\n\r\n    IMPORTANT: the penalty term of the ``pPXF`` method is based on the\r\n    *relative* change of the fit residuals. For this reason, the penalty\r\n    will work as expected even if the normalization of the ``noise`` is\r\n    arbitrary. See `Cappellari & Emsellem (2004)`_ for details. If no\r\n    reliable noise is available this keyword can just be set to::\r\n\r\n        noise = np.ones_like(galaxy)  # Same uncertainty for all pixels\r\n\r\nvelscale: float\r\n    Velocity scale of the spectra in km/s per pixel. It has to be the\r\n    same for both the galaxy and the template spectra.\r\n    An exception is when the ``velscale_ratio`` keyword is used, in which\r\n    case one can input ``templates`` with smaller ``velscale`` than\r\n    ``galaxy``.\r\n\r\n    ``velscale`` is precisely *defined* in ``pPXF`` by\r\n    ``velscale = c*np.diff(np.log(lambda))``, which is approximately\r\n    ``velscale ~ c*np.diff(lambda)/lambda``.\r\n    See Section 2.3 of `Cappellari (2017)`_ for details.\r\nstart:\r\n    Vector, or list/array of vectors ``[start1, start2, ...]``, with the\r\n    initial estimate for the LOSVD parameters.\r\n\r\n    When LOSVD parameters are not held fixed, each vector only needs to\r\n    contain ``start = [velStart, sigmaStart]`` the initial guess for the\r\n    velocity and the velocity dispersion in km/s. The starting values for\r\n    h3-h6 (if they are fitted) are all set to zero by default.\r\n    In other words, when ``moments=4``::\r\n\r\n        start = [velStart, sigmaStart]\r\n\r\n    is interpreted as::\r\n\r\n        start = [velStart, sigmaStart, 0, 0]\r\n\r\n    When the LOSVD for some kinematic components is held fixed (see\r\n    ``fixed`` keyword), all values for ``[Vel, Sigma, h3, h4,...]`` can be\r\n    provided.\r\n\r\n    Unless a good initial guess is available, it is recommended to set the\r\n    starting ``sigma >= 3*velscale`` in km/s (i.e. 3 pixels). In fact, when\r\n    the sigma is very low, and far from the true solution, the ``chi^2`` of\r\n    the fit becomes weakly sensitive to small variations in sigma (see\r\n    ``pPXF`` paper). In some instances, the near-constancy of ``chi^2`` may\r\n    cause premature convergence of the optimization.\r\n\r\n    In the case of two-sided fitting a good starting value for the velocity\r\n    is ``velStart = 0.0`` (in this case ``vsyst`` will generally be\r\n    nonzero). Alternatively on should keep in mind that ``velStart`` refers\r\n    to the first input galaxy spectrum, while the second will have velocity\r\n    ``-velStart``.\r\n\r\n    With multiple kinematic components ``start`` must be a list of starting\r\n    values, one for each different component.\r\n\r\n    EXAMPLE: We want to fit two kinematic components. We fit 4 moments for\r\n    the first component and 2 moments for the second one as follows::\r\n\r\n        component = [0, 0, ... 0, 1, 1, ... 1]\r\n        moments = [4, 2]\r\n        start = [[V1, sigma1], [V2, sigma2]]\r\n\r\nOptional Keywords\r\n-----------------\r\n\r\nbias: float, optional\r\n    When ``moments > 2``, this parameter biases the ``(h3, h4, ...)``\r\n    measurements towards zero (Gaussian LOSVD) unless their inclusion\r\n    significantly decreases the error in the fit. Set this to ``bias=0``\r\n    not to bias the fit: the solution (including ``[V, sigma]``) will be\r\n    noisier in that case. This parameter is ignored if  ``moments <= 2``.\r\n    The default ``bias`` should provide acceptable results in most cases,\r\n    but it would be safe to test it with Monte Carlo simulations as\r\n    described in the section \"How to Set the Kinematic Penalty Keyword\"\r\n    near the end of the documentation. This keyword precisely corresponds\r\n    to the parameter ``lambda`` in the `Cappellari & Emsellem (2004)`_\r\n    paper.\r\n    Note that the penalty depends on the *relative* change of the fit\r\n    residuals, so it is insensitive to proper scaling of the ``noise``\r\n    vector. A nonzero ``bias`` can be safely used even without a reliable\r\n    ``noise`` spectrum, or with equal weighting for all pixels.\r\nbounds:\r\n    Lower and upper bounds for every kinematic parameter. This is an array,\r\n    or list of arrays, with the same dimensions as ``start``, except for\r\n    the last dimension, which is 2. In practice, for every element of\r\n    ``start`` one needs to specify a pair of values ``[lower, upper]``.\r\n\r\n    EXAMPLE: We want to fit two kinematic components, with 4 moments for\r\n    the first component and 2 for the second (e.g. stars and gas). In this\r\n    case::\r\n\r\n        moments = [4, 2]\r\n        start_stars = [V1, sigma1, 0, 0]\r\n        start_gas = [V2, sigma2]\r\n        start = [start_stars, start_gas]\r\n\r\n    then we can specify boundaries for each kinematic parameter as::\r\n\r\n        bounds_stars = [[V1_lo, V1_up], [sigma1_lo, sigma1_up],\r\n                        [-0.3, 0.3], [-0.3, 0.3]]\r\n        bounds_gas = [[V2_lo, V2_up], [sigma2_lo, sigma2_up]]\r\n        bounds = [bounds_stars, bounds_gas]\r\n\r\ncomponent:\r\n    When fitting more than one kinematic component, this keyword should\r\n    contain the component number of each input template. In principle,\r\n    every template can belong to a different kinematic component.\r\n\r\n    EXAMPLE: We want to fit the first 50 templates to component 0 and the\r\n    last 10 templates to component 1. In this case::\r\n\r\n        component = [0]*50 + [1]*10\r\n\r\n    which, in Python syntax, is equivalent to::\r\n\r\n        component = [0, 0, ... 0, 1, 1, ... 1]\r\n\r\n    This keyword is especially useful when fitting both emissions (gas) and\r\n    absorption (stars) templates simultaneously (see the example for the\r\n    ``moments`` keyword).\r\nconstr_kinem: dictionary, optional\r\n    It enforces linear constraints on the kinematic parameters during the\r\n    fit. This is specified by the following dictionary, where ``A_ineq``\r\n    and ``A_eq`` are arrays (have ``A.ndim = 2``), while ``b_ineq`` and\r\n    ``b_eq`` are vectors (have ``b.ndim = 1``). Either the ``_eq`` or the\r\n    ``_ineq`` keys can be omitted if not needed::\r\n\r\n        constr_kinem = {\"A_ineq\": A_ineq, \"b_ineq\": b_ineq, \"A_eq\": A_eq, \"b_eq\": b_eq}\r\n\r\n    The resulting pPXF kinematics solution will satisfy the following\r\n    linear matrix inequalities and/or equalities::\r\n\r\n        params = np.ravel(pp.sol)  # Unravel for multiple components\r\n        A_ineq @ params <= b_ineq\r\n        A_eq @ params == b_eq\r\n\r\n    IMPORTANT: the starting guess ``start`` must satisfy the constraints,\r\n    or in other words, it must lie in the feasible region.\r\n\r\n    Inequalities can be used e.g. to force one kinematic component to have\r\n    larger velocity or dispersion than another one. This is useful e.g.\r\n    when extracting two stellar kinematic components or when fitting both\r\n    narrow and broad components of gas emission lines.\r\n\r\n    EXAMPLES: We want to fit two kinematic components, with two moments for\r\n    both the first and second component. In this case::\r\n\r\n        moments = [2, 2]\r\n        start = [[V1, sigma1], [V2, sigma2]]\r\n\r\n    then we can set the constraint ``sigma1 >= 3*sigma2`` as follows::\r\n\r\n        A_ineq = [[0, -1, 0, 3]]  # 0*V1 - 1*sigma1 + 0*V2 + 3*sigma2 <= 0\r\n        b_ineq = [0]\r\n        constr_kinem = {\"A_ineq\": A_ineq, \"b_ineq\": b_ineq}\r\n\r\n    We can set the constraint ``sigma1 >= sigma2 + 2*velscale`` as follows::\r\n\r\n        A_ineq = [[0, -1, 0, 1]]  # -sigma1 + sigma2 <= -2*velscale\r\n        b_ineq = [-2]             # kinem. in pixels (-2 --> -2*velscale)!\r\n        constr_kinem =  {\"A_ineq\": A_ineq, \"b_ineq\": b_ineq}\r\n\r\n    We can set both the constraints ``V1 >= V2`` and\r\n    ``sigma1 >= sigma2 + 2*velscale`` as follows::\r\n\r\n        A_ineq = [[-1, 0, 1, 0],   # -V1 + V2 <= 0\r\n                  [0, -1, 0, 1]]   # -sigma1 + sigma2 <= -2*velscale\r\n        b_ineq = [0, -2]           # kinem. in pixels (-2 --> -2*velscale)!\r\n        constr_kinem =  {\"A_ineq\": A_ineq, \"b_ineq\": b_ineq}\r\n\r\n    We can constrain the velocity dispersion of the second kinematic\r\n    component to differ less than 10% from that of the first component\r\n    ``sigma1/1.1 <= sigma2 <= sigma1*1.1`` as follows::\r\n\r\n        A_ineq = [[0, 1/1.1, 0, -1],   # +sigma1/1.1 - sigma2 <= 0\r\n                  [0, -1.1,  0,  1]]   # -sigma1*1.1 + sigma2 <= 0\r\n        b_ineq = [0, 0]\r\n        constr_kinem =  {\"A_ineq\": A_ineq, \"b_ineq\": b_ineq}\r\n\r\n    EXAMPLE: We want to fit three kinematic components, with four moments\r\n    for the first and two for the rest. In this case::\r\n\r\n        moments = [4, 2, 2]\r\n        start = [[V1, sigma1, 0, 0], [V2, sigma2], [V3, sigma3]]\r\n\r\n    then we can set the constraints ``sigma3 >= sigma1 + 2*velscale`` and\r\n    ``V1 <= V2 <= V3`` as follows::\r\n\r\n        A_ineq = [[0, 1, 0, 0,  0, 0,  0, -1],  # sigma1 - sigma3 <= -2*velscale\r\n                  [1, 0, 0, 0, -1, 0,  0,  0],  # V1 - V2 <= 0\r\n                  [0, 0, 0, 0,  1, 0, -1,  0]]  # V2 - V3 <= 0\r\n        b_ineq = [-2, 0, 0]           # kinem. in pixels (-2 --> -2*velscale)!\r\n        constr_kinem =  {\"A_ineq\": A_ineq, \"b_ineq\": b_ineq}\r\n\r\n    NOTE: When possible, it is more efficient to set equality constraints\r\n    using the ``tied`` keyword, instead of setting ``A_eq`` and ``b_eq`` in\r\n    ``constr_kinem``.\r\nconstr_templ: dictionary, optional\r\n    It enforces linear constraints on the template weights during the fit.\r\n    This is specified by the following dictionary, where ``A_ineq`` and\r\n    ``A_eq`` are arrays (have ``A.ndim = 2``), while ``b_ineq`` and ``b_eq``\r\n    are vectors (have ``b.ndim = 1``). Either the ``_eq`` or the ``_ineq``\r\n    keys can be omitted if not needed::\r\n\r\n        constr_templ = {\"A_ineq\": A_ineq, \"b_ineq\": b_ineq, \"A_eq\": A_eq, \"b_eq\": b_eq}\r\n\r\n    The resulting pPXF solution will satisfy the following linear matrix\r\n    inequalities and/or equalities::\r\n\r\n        A_ineq @ pp.weights <= b_ineq\r\n        A_eq @ pp.weights == b_eq\r\n\r\n    Inequality can be used e.g. to constrain the fluxes of emission lines\r\n    to lie within prescribed ranges. Equalities can be used e.g. to force\r\n    the weights for different kinematic components to contain prescribed\r\n    fractions of the total weights.\r\n\r\n    EXAMPLES: We are fitting a spectrum using four templates, the first two\r\n    templates belong to one kinematic component and the rest to the other.\r\n    NOTE: This 4-templates example is for illustration, but in real\r\n    applications one will use many more than two templates per component!\r\n    This implies we have::\r\n\r\n        component=[0, 0, 1, 1]\r\n\r\n    then we can set the equality constraint that the sum of the weights of\r\n    the first kinematic component is a given ``fraction`` of the total::\r\n\r\n        pp.weights[component == 0].sum()/pp.weights.sum() == fraction\r\n\r\n    as follows [see equation 30 of `Cappellari (2017)`_]::\r\n\r\n        A_eq = [[fraction - 1, fraction - 1, fraction, fraction]]\r\n        b_eq = [0]\r\n        constr_templ = {\"A_eq\": A_eq, \"b_eq\": b_eq}\r\n\r\n    An identical result can be obtained in this case using the legacy\r\n    ``fraction`` keyword, but ``constr_templ`` additionally allows for\r\n    general linear constraints for multiple kinematic components.\r\n\r\n    Similarly, we can set the inequality constraint that the total weights\r\n    of each of the two kinematic components is larger than ``fraction``::\r\n\r\n        fraction <= pp.weights[component == 0].sum()/pp.weights.sum()\r\n        fraction <= pp.weights[component == 1].sum()/pp.weights.sum()\r\n\r\n    as follows::\r\n\r\n        A_ineq = [[fraction - 1, fraction - 1, fraction, fraction],\r\n                  [fraction, fraction, fraction - 1, fraction - 1]]\r\n        b_ineq = [0, 0]\r\n        constr_templ = {\"A_ineq\": A_ineq, \"b_ineq\": b_ineq}\r\n\r\n    We can constrain the ratio of the first two templates weights to lie in\r\n    the interval ``ratio_min <= w[0]/w[1] <= ratio_max`` as follows::\r\n\r\n        A_ineq = [[-1, ratio_min, 0, 0],    # -w[0] + ratio_min*w[1] <= 0\r\n                  [1, -ratio_max, 0, 0]]    # +w[0] - ratio_max*w[1] <= 0\r\n        b_ineq = [0, 0]\r\n        constr_templ = {\"A_ineq\": A_ineq, \"b_ineq\": b_ineq}\r\n\r\n    If we have six templates for three kinematics components::\r\n\r\n        component=[0, 0, 1, 1, 2, 2]\r\n\r\n    we can set the fractions for the first two components to be ``fraction1``\r\n    and ``fraction2`` (of the total weights) respectively as follows\r\n    (the third components will be ``1 - fraction1 - fraction2``)::\r\n\r\n        A_eq = [[fraction1 - 1, fraction1 - 1, fraction1, fraction1, fraction1, fraction1],\r\n                [fraction2, fraction2, fraction2 - 1, fraction2 - 1, fraction2, fraction2]]\r\n        b_eq = [0, 0]\r\n        constr_templ = {\"A_eq\": A_eq, \"b_eq\": b_eq}\r\n\r\nclean: bool, optional\r\n    Set this keyword to use the iterative sigma clipping method described\r\n    in Section 2.1 of `Cappellari et al. (2002)\r\n    <http://ui.adsabs.harvard.edu/abs/2002ApJ...578..787C>`_.\r\n    This is useful to remove from the fit unmasked bad pixels, residual gas\r\n    emissions or cosmic rays.\r\n\r\n    IMPORTANT: This is recommended *only* if a reliable estimate of the\r\n    ``noise`` spectrum is available. See also note below for ``.chi2``.\r\ndegree: int, optional\r\n    Degree of the *additive* Legendre polynomial used to correct the\r\n    template continuum shape during the fit (default: 4). This uses the\r\n    standard mathematical definition where e.g. ``degree=2`` is a\r\n    quadratic polynomial. Set ``degree=-1`` not to include any additive\r\n    polynomial.\r\ndust: list of dictionaries, optional\r\n    Each element of the list is a dictionary specifying the parameters\r\n    for the attenuation curve to be applied to a given set of templates.\r\n    Each dictionary can contain the following keys (only ``\"start\"`` and\r\n    ``\"component\"`` are required). The meaning is similar to the same\r\n    parameters in the ``pPXF`` call, but these are specific to the dust::\r\n\r\n        dust_1 = {\"bounds\":..., \"component\":..., \"fixed\":..., \"func\":..., \"start\":...}\r\n        dust_2 = {\"bounds\":..., \"component\":..., \"fixed\":..., \"func\":..., \"start\":...}\r\n        ...\r\n        dust_n = {\"bounds\":..., \"component\":..., \"fixed\":..., \"func\":..., \"start\":...}\r\n\r\n        dust = [dust_1, dust_2, ..., dust_n]\r\n\r\n    * ``bounds``: array_like with shape (n_start, 2) -\r\n      Lower and upper bounds for every dust attenuation parameter of the\r\n      given ``dust_j`` component. For every element of ``dust_j[\"start\"]``\r\n      one needs to specify a pair of values ``[lower, upper]``.\r\n    * ``component``: array_like with shape (n_templates,) -\r\n      Boolean vector, of the same size as the kinematic ``component``, set\r\n      to ``True`` for the templates that should be attenuated by the\r\n      ``dust_j`` component.\r\n    * ``fixed``: array_like with shape (n_start,) -\r\n      Boolean vector set to ``True`` where a ``dust_j`` attenuation parameter\r\n      has to be held fixed with the value given in ``dust_j[\"start\"]``. This is\r\n      an array, or list, with the same dimensions as ``dust_j[\"start\"]``.\r\n    * ``func``: callable, optional -\r\n      function specifying the attenuation curve for the ``dust_j`` component.\r\n      It must accept as input the same number of parameters as given in\r\n      ``dust_j[\"start\"]``. If this is not given, ``pPXF`` uses the 4-parameters\r\n      dust formulas given in `Cappellari (2023)`_ implemented in the function\r\n      ``attenuation`` in the file ``ppxf.py``.\r\n    * ``start``: array_like with shape (n_start,) -\r\n      Contains the starting values for the attenuation parameters of ``dust_j``.\r\n\r\n    EXAMPLE: We want to model two dust components, one for the gas emission\r\n    lines and another for the rest. For the gas we use a 1-parameter\r\n    `Calzetti et al. (2000)`_ attenuation curve, while for the rest we\r\n    use the default attenuation curve in `Cappellari (2023)`_, but we\r\n    only use the first two parameters ``(A_V, delta)``. In this case,\r\n    the ``dust`` keyword would be::\r\n\r\n        gas_component = component > 0   # assuming stars = 0 and gas = 1\r\n        dust_gas = {\"start\": [0.1], \"bounds\": [[0, 8]], \"component\": gas_component}\r\n        dust_stars = {\"start\": [0.1, -0.1], \"bounds\": [[0, 4], [-1, 0.4]], \"component\": ~gas_component}\r\n        dust = [dust_gas, dust_stars]\r\n\r\nfixed:\r\n    Boolean vector set to ``True`` where a given kinematic parameter has to\r\n    be held fixed with the value given in ``start``. This is an array, or\r\n    list, with the same dimensions as ``start``.\r\n\r\n    EXAMPLE: We want to fit two kinematic components, with 4 moments for\r\n    the first component and 2 for the second. In this case::\r\n\r\n        moments = [4, 2]\r\n        start = [[V1, sigma1, h3, h4], [V2, sigma2]]\r\n\r\n    then we can held fixed e.g. the sigma (only) of both components using::\r\n\r\n        fixed = [[0, 1, 0, 0], [0, 1]]\r\n\r\n    NOTE: Setting a negative ``moments`` for a kinematic component is\r\n    entirely equivalent to setting ``fixed = 1`` for all parameters of the\r\n    given kinematic component. In other words::\r\n\r\n        moments = [-4, 2]\r\n\r\n    is equivalent to::\r\n\r\n        moments = [4, 2]\r\n        fixed = [[1, 1, 1, 1], [0, 0]]\r\n\r\nfraction: float, optional\r\n    This keyword allows one to fix the ratio between the first two\r\n    kinematic components. This is a scalar defined as follows::\r\n\r\n        fraction = np.sum(weights[component == 0])\r\n                 / np.sum(weights[component < 2])\r\n\r\n    This is useful e.g. to try to kinematically decompose bulge and disk.\r\n\r\n    The remaining kinematic components (``component > 1``) are left free,\r\n    and this allows, for example, to still include gas emission line\r\n    components.\r\n    More general linear constraints, for multiple kinematic components at\r\n    the same time, can be specified using the more general and flexible\r\n    ``constr_templ`` keyword.\r\nftol: float, optional\r\n    Fractional tolerance for stopping the non-linear minimization (default\r\n    1e-4).\r\ngas_component:\r\n    Boolean vector, of the same size as ``component``, set to ``True``\r\n    where the given ``component`` describes a gas emission line. If given,\r\n    ``pPXF`` provides the ``pp.gas_flux`` and ``pp.gas_flux_error`` in\r\n    output.\r\n\r\n    EXAMPLE: In the common situation where ``component = 0`` are stellar\r\n    templates and the rest are gas emission lines, one will set::\r\n\r\n        gas_component = component > 0\r\n\r\n    This keyword is also used to plot the gas lines with a different color.\r\ngas_names:\r\n    String array specifying the names of the emission lines (e.g.\r\n    ``gas_names=[\"Hbeta\", \"[OIII]\",...]``, one per gas line. The length of\r\n    this vector must match the number of nonzero elements in\r\n    ``gas_component``. This vector is only used by ``pPXF`` to print the\r\n    line names on the console.\r\ngas_reddening: float, optional\r\n    Set this keyword to an initial estimate of the gas reddening ``A_V >= 0``\r\n    to fit a positive gas reddening together with the kinematics and\r\n    the templates. This reddening is applied only to the gas templates,\r\n    namely to the templates with the corresponding element of\r\n    ``gas_component=True``. The typical use of this keyword is when using a\r\n    single template for all the Balmer lines, with assumed intrinsic ratios\r\n    for the lines. In this way the gas fit becomes sensitive to reddening.\r\n    The fit assumes by default the extinction curve of\r\n    `Calzetti et al. (2000) <http://ui.adsabs.harvard.edu/abs/2000ApJ...533..682C>`_\r\n    but any other prescription can be passed via the ``reddening_func`` keyword.\r\n    By default ``gas_reddening=None`` and this parameter is not fitted.\r\n\r\n    NOTE: This keyword is obsolete. I recommend using the more flexible and\r\n    general ``dust`` keyword instead.\r\nglobal_search: bool or dictionary, optional\r\n    Set to ``True`` to perform a global optimization of the nonlinear\r\n    parameters (kinematics) before starting the usual local optimizer.\r\n    Alternatively, one can pass via this keyword a dictionary of options\r\n    for the function `scipy.optimize.differential_evolution\r\n    <https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.differential_evolution.html>`_.\r\n    Default options are ``global_search={'tol': 0.1, 'disp': 1}``.\r\n\r\n    The ``fixed`` and ``tied`` keywords, as well as ``constr_kinem`` are\r\n    properly supported when using ``global_search`` and one is encouraged\r\n    to use them to reduce parameters degeneracies.\r\n\r\n    NOTE: This option is computationally intensive and completely\r\n    unnecessary in most situations. It should *only* be used in special\r\n    situations where there are obvious multiple local ``chi2`` minima. An\r\n    example is when fitting multiple stellar or gas kinematic components\r\n    with well-resolved velocity differences.\r\n\r\n    IMPORTANT: when using this keyword it is recommended *not* to use\r\n    multiplicative polynomials but only additive ones to avoid\r\n    unnecessarily long computation times. After converging to a global\r\n    solution, if desired one can repeat the ``pPXF`` fit with\r\n    multiplicative polynomials but without setting ``global_search``.\r\ngoodpixels: array_like of int with shape (n_pixels,), optional\r\n    Integer vector containing the indices of the good pixels in the\r\n    ``galaxy`` spectrum (in increasing order). Only these spectral pixels\r\n    are included in the fit.\r\nlam: array_like with shape (n_pixels,), optional\r\n    Vector with the *restframe* wavelength in Angstroms of every pixel in\r\n    the input ``galaxy`` spectrum. This keyword is required when using the\r\n    keywords ``reddening``, ``gas_reddening`` or ``dust``.\r\n\r\n    If one uses my ``ppxf_util.log_rebin`` routine to rebin the spectrum\r\n    before the ``pPXF`` fit, the wavelength can be obtained as::\r\n\r\n        from ppxf.ppxf_util import log_rebin\r\n        specNew, ln_lam, velscale = log_rebin(lamRange, galaxy)\r\n        lam = np.exp(ln_lam)\r\n\r\n    When ``lam`` is given, the wavelength is shown in the best-fitting\r\n    plot, instead of the pixels.\r\nlam_temp: array_like with shape (n_pixels_temp,), optional\r\n    Vector with the *restframe* wavelength in Angstroms of every pixel in\r\n    the input ``templates`` spectra.\r\n\r\n    When both the wavelength of the templates  ``lam_temp`` and of the\r\n    galaxy ``lam`` are given, the templates are automatically truncated to\r\n    the minimal range required, for the adopted input velocity guess. In\r\n    this case it is unnecessary to use the ``vsyst`` keyword.\r\n\r\n    If ``phot`` is also given, the final plot will include a best fitting\r\n    spectrum estimated using the full ``template``, before truncation,\r\n    together with the photometric values and the truncated best fit to the\r\n    ``galaxy`` spectrum. This is useful to see the underlying best fitting\r\n    spectrum, in the wavelength range where only photometry (SED) was\r\n    fitted.\r\nlinear: bool, optional\r\n    Set to ``True`` to keep *all* nonlinear parameters fixed and *only*\r\n    perform a linear fit for the templates and additive polynomials\r\n    weights. The output solution is a copy of the input one and the errors\r\n    are zero.\r\nlinear_method: {'nnls', 'lsq_box', 'lsq_lin', 'cvxopt'} optional\r\n    Method used for the solution of the linear least-squares subproblem to\r\n    fit for the templates weights (default 'lsq_box' fast box-constrained).\r\n\r\n    The computational speed of the four alternative linear methods depends\r\n    on the size of the problem, with the default 'lsq_box' generally being\r\n    the fastest without linear inequality constraints. Note that 'lsq_lin'\r\n    is included in ``ppxf``, while 'cvxopt' is an optional external\r\n    package. The 'nnls' option (the only one before v7.0) is generally\r\n    slower and for this reason is now deprecated.\r\n\r\n    The inequality constraints in ``constr_templ`` are only supported\r\n    with ``linear_method='lsq_lin'`` or ``linear_method='cvxopt'``.\r\nmask: array_like of bool with shape (n_pixels,), optional\r\n    Boolean vector of length ``galaxy.size`` specifying with ``True`` the\r\n    pixels that should be included in the fit. This keyword is just an\r\n    alternative way of specifying the ``goodpixels``.\r\nmdegree: int, optional\r\n    Degree of the *multiplicative* Legendre polynomial (with a mean of 1)\r\n    used to correct the continuum shape during the fit (default: 0). The\r\n    zero degree multiplicative polynomial (i.e. constant) is always\r\n    included in the fit as it corresponds to the multiplicative weights\r\n    assigned to the templates. Note that the computation time is longer\r\n    with multiplicative polynomials than with the same ``degree`` of\r\n    additive polynomials.\r\nmethod: {'capfit', 'trf', 'dogbox', 'lm'}, optional.\r\n    Algorithm to perform the non-linear minimization step.\r\n    The default 'capfit' is a novel linearly-constrained non-linear\r\n    least-squares optimization program, which combines the Sequential\r\n    Quadratic Programming and the Levenberg-Marquardt methods.\r\n    For a description of the other methods ('trf', 'dogbox', 'lm'), see the\r\n    documentation of `scipy.optimize.least_squares\r\n    <https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.least_squares.html>`_.\r\n\r\n    The use of linear constraints with ``constr_kinem`` is only supported\r\n    with the default ``method='capfit'``.\r\nmoments:\r\n    Order of the Gauss-Hermite moments to fit. Set this keyword to 4 to\r\n    fit ``[h3, h4]`` and to 6 to fit ``[h3, h4, h5, h6]``. Note that in all\r\n    cases the G-H moments are fitted (non-linearly) *together* with\r\n    ``[V, sigma]``.\r\n\r\n    If ``moments=2`` or ``moments`` is not set then only ``[V, sigma]`` are\r\n    fitted.\r\n\r\n    If ``moments`` is negative then the kinematics of the given\r\n    ``component`` are kept fixed to the input values.\r\n    NOTE: Setting a negative ``moments`` for a kinematic component is\r\n    entirely equivalent to setting ``fixed = 1`` for all parameters of the\r\n    given kinematic component.\r\n\r\n    EXAMPLE: We want to keep fixed ``component = 0``, which has a LOSVD\r\n    described by ``[V, sigma, h3, h4]`` and is modelled with 100 spectral\r\n    templates; At the same time, we fit ``[V, sigma]`` for\r\n    ``component = 1``, which is described by 5 templates (this situation\r\n    may arise when fitting stellar templates with pre-determined stellar\r\n    kinematics, while fitting the gas emission).\r\n    We should give in input to ``pPXF`` the following parameters::\r\n\r\n        component = [0]*100 + [1]*5   # --> [0, 0, ... 0, 1, 1, 1, 1, 1]\r\n        moments = [-4, 2]\r\n        start = [[V, sigma, h3, h4], [V, sigma]]\r\n\r\nphot: dictionary, optional\r\n    Dictionary of parameters used to fit photometric data (SED fitting)\r\n    together with a spectrum. This is defined as follows::\r\n\r\n        phot = {\"templates\": phot_templates, \"galaxy\": phot_galaxy,\r\n                \"noise\": phot_noise, \"lam\": phot_lam}\r\n\r\n    The keys of this dictionary are analogue to the ``pPXF`` parameters\r\n    ``galaxy``, ``templates``, ``noise`` and ``lam`` for the spectra.\r\n    However, the ones in this dictionary contain photometric data instead\r\n    of spectra and will generally consist just a few values (one per\r\n    photometric band) instead of thousands of elements like the spectra.\r\n    Specifically:\r\n\r\n    * ``phot_templates``: array_like with shape (n_phot, n_templates) -\r\n      Mean flux of the templates in the observed photometric bands. This\r\n      array has the same number of dimension as the ``templates`` input\r\n      parameter. The same description applies. The only difference is that\r\n      the first dimension is ``n_phot`` instead of ``n_pixels_temp``. This\r\n      array can have 2-4 dimensions and all dimensions must match those of\r\n      the spectral ``templates``, except for the first dimension. These\r\n      templates must have the same units and normalization as the spectral\r\n      ``templates``. If the spectral templates cover the ranges of the\r\n      photometric bands, and filter responses ``resp`` are available, the\r\n      mean fluxes for each template can be computed as (e.g. equation A11\r\n      of `Bessell & Murphy 2012\r\n      <https://ui.adsabs.harvard.edu/abs/2012PASP..124..140B>`_)::\r\n\r\n          phot_template = Integrate[template*resp(lam)*lam, {lam, -inf, inf}]\r\n                        / Integrate[resp(lam)*lam, {lam, -inf, inf}]\r\n\r\n      One can use the function ``ppxf_util.photometry_from_spectra`` as\r\n      an illustration of how to compute the ``phot_templates``. This\r\n      function can be easily modified to include any additional filter.\r\n\r\n      Alternatively, the fluxes may be tabulated by the authors of the SSP\r\n      models, for the same model parameters as the spectral SSP templates.\r\n      However, this can only be used for redshift ``z ~ 0``.\r\n    * ``phot_galaxy``: array_like with shape (n_phot) - Observed\r\n      photometric measurements for the galaxy in linear flux units. These\r\n      values must be matched to the same spatial aperture used for the\r\n      spectra and they must have the same units (e.g. ``erg/(s cm^2 A)``).\r\n      This means that these values must be like the average fluxes one\r\n      would measure on the fitted galaxy spectrum if it was sufficiently\r\n      extended. One can think of these photometric values as some special\r\n      extra pixels to be added to the spectrum. The difference is that they\r\n      are not affected by the polynomials nor by the kinematics.\r\n    * ``phot_noise``: array_like with shape (n_phot) -\r\n      Vector containing the ``1*sigma`` uncertainty of each photometric\r\n      measurement in ``phot_galaxy``. One can change the normalization of\r\n      these uncertainties to vary the relative influence of the photometric\r\n      measurements versus the spectral fits.\r\n    * ``phot_lam``: array_like with shape (n_phot) or (n_phot, n_templates)\r\n      - Mean *restframe* wavelength for each photometric band in\r\n      ``phot_galaxy``. This is only used to estimate reddening of each\r\n      band and to produce the plots. It can be computed from the system\r\n      response function ``resp`` as (e.g. equation A17 of `Bessell & Murphy 2012`_)::\r\n\r\n          phot_lam = Integrate[resp(lam)*lam^2, {lam, -inf, inf}]\r\n                   / Integrate[resp(lam)*lam, {lam, -inf, inf}]\r\n\r\n      If spectral templates are available over the full extent of the\r\n      photometric bands, then one can compute a more accurate effective\r\n      wavelength for each template separately. In this case ``phot_lam``\r\n      must have the same dimensions as ``phot_templates``.\r\n      For each templates the effective wavelength can be computed as\r\n      (e.g. equation A21 of `Bessell & Murphy 2012`_)::\r\n\r\n          phot_lam = Integrate[template*resp(lam)*lam^2, {lam, -inf, inf}]\r\n                   / Integrate[template*resp(lam)*lam, {lam, -inf, inf}]\r\n\r\nplot: bool, optional\r\n    Set this keyword to plot the best fitting solution and the residuals\r\n    at the end of the fit.\r\n\r\n    One can also call separately the class function ``pp.plot()`` after the\r\n    call to ``pp = ppxf(...)``.\r\nquiet: bool, optional\r\n    Set this keyword to suppress verbose output of the best fitting\r\n    parameters at the end of the fit.\r\nreddening: float, optional\r\n    Set this keyword to an initial estimate of the stellar reddening\r\n    ``A_V >= 0`` to fit a positive stellar reddening together with the\r\n    kinematics and the templates. This reddening is applied only to the\r\n    stellar templates (both spectral and photometric ones), namely to the\r\n    templates with the corresponding element of ``gas_component=False``, or\r\n    to all templates, if ``gas_component`` is not set. The fit assumes by\r\n    default the extinction curve of `Calzetti et al. (2000)`_ but any other\r\n    prescription can be passed via the ``reddening_func`` keyword.\r\n    By default ``reddening=None`` and this parameter is not fitted.\r\n\r\n    NOTE: This keyword is obsolete. I recommend using the more flexible and\r\n    general ``dust`` keyword instead.\r\nreg_dim: tuple, optional\r\n    When using regularization with more than one kinematic component (using\r\n    the ``component`` keyword), the regularization is only applied to the\r\n    first one (``component=0``). This is useful to fit the stellar\r\n    population and gas emissions together.\r\n\r\n    In this situation, one has to use the ``reg_dim`` keyword, to give\r\n    ``pPXF`` the dimensions of the population parameters (e.g. ``n_age``,\r\n    ``n_metal``, ``n_alpha``). One should create the initial array of\r\n    population templates like e.g.\r\n    ``templates[n_pixels, n_age, n_metal, n_alpha]`` and define::\r\n\r\n        reg_dim = templates.shape[1:]   # = [n_age, n_metal, n_alpha]\r\n\r\n    The array of stellar templates is then reshaped into a 2-dim array as::\r\n\r\n        templates = templates.reshape(templates.shape[0], -1)\r\n\r\n    and the gas emission templates are appended as extra columns at the\r\n    end. An usage example is given in\r\n    ``ppxf_example_population_gas_sdss.py``.\r\n\r\n    When using regularization with a single component (the ``component``\r\n    keyword is not used, or contains identical values), the number of\r\n    population templates along different dimensions (e.g. ``n_age``,\r\n    ``n_metal``, ``n_alpha``) is inferred from the dimensions of the\r\n    ``templates`` array and this keyword is not necessary.\r\nreg_ord: int, optional\r\n    Order of the derivative that is minimized by the regularization.\r\n    The following two rotationally-symmetric estimators are supported:\r\n\r\n    * ``reg_ord=1``: minimizes the integral over the weights of the squared\r\n      gradient::\r\n\r\n        Grad[w] @ Grad[w].\r\n\r\n    * ``reg_ord=2``: minimizes the integral over the weights of the squared\r\n      curvature::\r\n\r\n        Laplacian[w]**2.\r\n\r\nreg_step: list of arrays, shape (len(reg_dim),)\r\n    Defines the step sizes for numerical estimation of derivatives during\r\n    regularization. Each array in the list corresponds to a dimension in\r\n    ``reg_dim``, specifying the step size for each interval within that\r\n    dimension. By default, if ``reg_step`` is not provided, a step size of\r\n    one is assumed for all dimensions, equivalent to \r\n    ``reg_step = [np.ones(rd - 1) for rd in reg_dim]``. To customize,\r\n    provide ``reg_step`` as a list containing arrays, where each array has\r\n    a length of ``reg_dim[j] - 1``, allowing for variable step sizes across\r\n    intervals and dimensions.\r\n\r\n    NOTE 1: Multiplying each element in ``reg_step`` by a constant factor\r\n    ``k`` has the same effect as dividing the regularization parameter\r\n    ``regul`` by ``k**reg_ord``.\r\n\r\n    NOTE 2: The standard approach consists of sampling the SPS template\r\n    spectra logarithmically in age and adopt a constant unitary step,\r\n    **without** using this keyword.\r\nregul: float, optional\r\n    If this keyword is nonzero, the program applies first or second-order\r\n    linear regularization to the ``weights`` during the ``pPXF`` fit.\r\n    Regularization is done in one, two or three dimensions depending on\r\n    whether the array of ``templates`` has two, three or four dimensions\r\n    respectively.\r\n    Large ``regul`` values correspond to smoother ``weights`` output. When\r\n    this keyword is nonzero the solution will be a trade-off between the\r\n    smoothness of ``weights`` and goodness of fit.\r\n\r\n    Section 3.5 of `Cappellari (2017)`_ describes regularization.\r\n\r\n    When fitting multiple kinematic ``component`` the regularization is\r\n    applied only to the first ``component = 0``, while additional\r\n    components are not regularized. This is useful when fitting stellar\r\n    population together with gas emission lines. In that case, the SSP\r\n    spectral templates must be given first and the gas emission templates\r\n    are given last. In this situation, one has to use the ``reg_dim``\r\n    keyword (below), to give ``pPXF`` the dimensions of the population\r\n    parameters (e.g. ``n_age``, ``n_metal``, ``n_alpha``). A usage example\r\n    is given in the file ``ppxf_example_population_gas_sdss.py``.\r\n\r\n    The effect of the regularization scheme is the following:\r\n\r\n    * With ``reg_ord=1`` it enforces the numerical first derivatives\r\n      between neighbouring weights (in the 1-dim case) to be equal to\r\n      ``w[j] - w[j+1] = 0`` with an error ``Delta = 1/regul``.\r\n\r\n    * With ``reg_ord=2`` it enforces the numerical second derivatives\r\n      between neighbouring weights (in the 1-dim case) to be equal to\r\n      ``w[j-1] - 2*w[j] + w[j+1] = 0`` with an error ``Delta = 1/regul``.\r\n\r\n    It may be helpful to define ``regul = 1/Delta`` and think of ``Delta``\r\n    as the regularization error.\r\n\r\n    IMPORTANT: ``Delta`` needs to be smaller but of the same order of\r\n    magnitude of the typical ``weights`` to play an effect on the\r\n    regularization. One quick way to achieve this is:\r\n\r\n    1. Divide the full ``templates`` array by a scalar in such a way that\r\n       the typical template has a median of one::\r\n\r\n            templates /= np.median(templates)\r\n\r\n    2. Do the same for the input galaxy spectrum::\r\n\r\n            galaxy /= np.median(galaxy)\r\n\r\n    3. In this situation, a sensible guess for ``Delta`` will be a few\r\n       percent (e.g. ``Delta=0.01 --> regul=100``).\r\n\r\n    Alternatively, for a more rigorous definition of the parameter\r\n    ``regul``:\r\n\r\n    A. Perform an unregularized fit (``regul=0``) and then rescale the\r\n       input ``noise`` spectrum so that::\r\n\r\n            Chi^2/DOF = Chi^2/goodPixels.size = 1.\r\n\r\n       This is achieved by rescaling the input ``noise`` spectrum as::\r\n\r\n            noise = noise*np.sqrt(Chi**2/DOF) = noise*np.sqrt(pp.chi2);\r\n\r\n    B. Increase ``regul`` and iteratively redo the ``pPXF`` fit until the\r\n       ``Chi^2`` increases from the unregularized value\r\n       ``Chi^2 = goodPixels.size`` by\r\n       ``DeltaChi^2 = np.sqrt(2*goodPixels.size)``.\r\n\r\n    The derived regularization corresponds to the maximum one still\r\n    consistent with the observations and the derived star formation history\r\n    will be the smoothest (minimum curvature or minimum variation) that is\r\n    still consistent with the observations.\r\nsigma_diff: float, optional\r\n    Quadratic difference in km/s defined as::\r\n\r\n        sigma_diff**2 = sigma_inst**2 - sigma_temp**2\r\n\r\n    between the instrumental dispersion of the galaxy spectrum and the\r\n    instrumental dispersion of the template spectra.\r\n\r\n    This keyword is useful when the templates have higher resolution than\r\n    the galaxy and they were not convolved to match the instrumental\r\n    dispersion of the galaxy spectrum. In this situation, the convolution\r\n    is done by ``pPXF`` with increased accuracy, using an analytic Fourier\r\n    Transform.\r\nsky:\r\n    vector containing the spectrum of the sky to be included in the fit, or\r\n    array of dimensions ``sky[n_pixels, nSky]`` containing different sky\r\n    spectra to add to the model of the observed ``galaxy`` spectrum. The\r\n    ``sky`` has to be log-rebinned as the ``galaxy`` spectrum and needs to\r\n    have the same number of pixels.\r\n\r\n    The sky is generally subtracted from the data before the ``pPXF`` fit.\r\n    However, for observations very heavily dominated by the sky spectrum,\r\n    where a very accurate sky subtraction is critical, it may be useful\r\n    *not* to subtract the sky from the spectrum, but to include it in the\r\n    fit using this keyword.\r\ntemplates_rfft:\r\n    When calling ``pPXF`` many times with an identical set of templates,\r\n    one can use this keyword to pass the real FFT of the templates,\r\n    computed in a previous ``pPXF`` call, stored in the\r\n    ``pp.templates_rfft`` attribute. This keyword mainly exists to show\r\n    that there is no need for it...\r\n\r\n    IMPORTANT: Use this keyword only if you understand what you are doing!\r\ntied:\r\n    A list of string expressions. Each expression \"ties\" the parameter to\r\n    other free or fixed parameters.  Any expression involving constants and\r\n    the parameter array ``p[j]`` are permitted. Since they are totally\r\n    constrained, tied parameters are considered to be fixed; no errors are\r\n    computed for them.\r\n\r\n    This is an array, or list of arrays, with the same dimensions as\r\n    ``start``. In practice, for every element of ``start`` one needs to\r\n    specify either an empty string ``''`` implying that the parameter is\r\n    free, or a string expression involving some of the variables ``p[j]``,\r\n    where ``j`` represents the index of the flattened list of kinematic\r\n    parameters.\r\n\r\n    EXAMPLE: We want to fit three kinematic components, with 4 moments for\r\n    the first component and 2 moments for the second and third (e.g. stars\r\n    and two gas components). In this case::\r\n\r\n        moments = [4, 2, 2]\r\n        start = [[V1, sigma1, 0, 0], [V2, sigma2], [V3, sigma3]]\r\n\r\n    then we can force the equality constraint ``V2 = V3`` as follows::\r\n\r\n        tied = [['', '', '', ''], ['', ''], ['p[4]', '']]  # p[6] = p[4]\r\n\r\n    or we can force the equality constraint ``sigma2 = sigma3`` as\r\n    follows::\r\n\r\n        tied = [['', '', '', ''], ['', ''], ['', 'p[5]']]  # p[7] = p[5]\r\n\r\n    One can also use more general formulas. For example one could constrain\r\n    ``V3 = (V1 + V2)/2`` as well as ``sigma1 = sigma2`` as follows::\r\n\r\n        # p[5] = p[1]\r\n        # p[6] = (p[0] + p[4])/2\r\n        tied = [['', '', '', ''], ['', 'p[1]'], ['(p[0] + p[4])/2', '']]\r\n\r\n    NOTE: One could in principle use the ``tied`` keyword to completely tie\r\n    the LOSVD of two kinematic components. However, this same effect is\r\n    more efficient achieved by assigning them to the same kinematic\r\n    component using the ``component`` keyword.\r\ntrig:\r\n    Set ``trig=True`` to use trigonometric series as an alternative to\r\n    Legendre polynomials, for both the additive and multiplicative\r\n    polynomials. When ``trig=True`` the fitted series below has\r\n    ``N = degree/2`` or ``N = mdegree/2``::\r\n\r\n        poly = A_0 + sum_{n=1}^{N} [A_n*cos(n*th) + B_n*sin(n*th)]\r\n\r\n    IMPORTANT: The trigonometric series has periodic boundary conditions.\r\n    This is sometimes a desirable property, but this expansion is not as\r\n    flexible as the Legendre polynomials.\r\nvelscale_ratio: int, optional\r\n    Integer. Gives the integer ``ratio >= 1`` between the ``velscale`` of\r\n    the ``galaxy`` and the ``templates``. When this keyword is used, the\r\n    templates are convolved by the LOSVD at their native resolution, and\r\n    only subsequently are integrated over the pixels and fitted to\r\n    ``galaxy``. This keyword is generally unnecessary and mostly useful for\r\n    testing.\r\n\r\n    Note that in realistic situations the uncertainty in the knowledge and\r\n    variations of the intrinsic line-spread function becomes the limiting\r\n    factor in recovering the LOSVD well below ``velscale``.\r\nvsyst: float, optional\r\n    Reference velocity in ``km/s`` (default 0). The input initial guess and\r\n    the output velocities are measured with respect to this velocity. This\r\n    keyword can be used to account for the difference in the starting\r\n    wavelength of the templates and the galaxy spectrum as follows::\r\n\r\n        vsyst = c*np.log(wave_temp[0]/wave_gal[0])\r\n\r\n    As alternative to using this keyword, one can pass the wavelengths\r\n    ``lam`` and ``lam_temp`` of both the ``galaxy`` and ``templates``\r\n    spectra. In that case  ``vsyst`` is computed automatically and should\r\n    not be given.\r\n\r\n    The value assigned to this keyword is *crucial* for the two-sided\r\n    fitting. In this case ``vsyst`` can be determined from a previous\r\n    normal one-sided fit to the galaxy velocity profile. After that initial\r\n    fit, ``vsyst`` can be defined as the measured velocity at the galaxy\r\n    center. More accurately ``vsyst`` is the value which has to be\r\n    subtracted to obtain a nearly anti-symmetric velocity profile at the\r\n    two opposite sides of the galaxy nucleus.\r\n\r\n    IMPORTANT: this value is generally *different* from the systemic\r\n    velocity one can get from the literature. Do not try to use that!\r\n\r\nOutput Parameters\r\n-----------------\r\n\r\nStored as attributes of the ``pPXF`` class:\r\n\r\n.apoly:\r\n    Vector with the best fitting additive polynomial.\r\n.bestfit:\r\n    Vector with the best fitting model for the galaxy spectrum.\r\n    This is a linear combination of the templates, convolved with the best\r\n    fitting LOSVD, multiplied by the multiplicative polynomials and\r\n    with subsequently added polynomial continuum terms or sky components.\r\n.chi2:\r\n    The reduced ``chi^2`` (namely ``chi^2/DOF``) of the fit, where\r\n    ``DOF = pp.dof``  (approximately ``DOF ~ pp.goodpixels.size``).\r\n\r\n    IMPORTANT: if ``Chi^2/DOF`` is not ~1 it means that the errors are not\r\n    properly estimated, or that the template is bad and it is *not* safe to\r\n    set the ``clean`` keyword.\r\n.dust:\r\n    List of dictionaries, one for each fitted j-th dust component. For\r\n    each dictionary, ``dust_j[\"sol\"]`` contains the best-fitting\r\n    parameter of the attenuation curve of that dust component. The other\r\n    field of the dictionary are copied from the input to the keyword\r\n    ``dust``.\r\n.error:\r\n    This variable contains a vector of *formal* uncertainty (``1*sigma``)\r\n    for the fitted parameters in the output vector ``sol``.\r\n    They are computed from the estimated covariance matrix of the standard\r\n    errors in the fitted parameters assuming it is diagonal at the minimum.\r\n    This option can be used when speed is essential, to obtain an order of\r\n    magnitude estimate of the uncertainties, but we *strongly* recommend to\r\n    run bootstrapping simulations to obtain more reliable errors. In fact,\r\n    these errors can be severely underestimated in the region where the\r\n    penalty effect is most important (``sigma < 2*velscale``).\r\n\r\n    These errors are meaningless unless ``Chi^2/DOF ~ 1``. However if one\r\n    *assumes* that the fit is good, a corrected estimate of the errors is::\r\n\r\n        error_corr = error*sqrt(chi^2/DOF) = pp.error*sqrt(pp.chi2).\r\n\r\n    IMPORTANT: when running Monte Carlo simulations to determine the error,\r\n    the penalty (``bias``) should be set to zero, or better to a very small\r\n    value. See Section 3.4 of `Cappellari & Emsellem (2004)`_ for an\r\n    explanation.\r\n.gas_bestfit:\r\n    If ``gas_component is not None``, this attribute returns the\r\n    best-fitting gas emission-lines spectrum alone.\r\n    The best-fitting stellar spectrum alone can be computed as\r\n    ``stars_bestfit = pp.bestfit - pp.gas_bestfit``\r\n.gas_bestfit_templates:\r\n    If ``gas_component is not None``, this attribute returns the individual\r\n    best-fitting gas emission-lines templates as columns of an array.\r\n    Note that ``pp.gas_bestfit = pp.gas_bestfit_templates.sum(1)``\r\n.gas_flux:\r\n    Vector with the integrated flux (in counts) of all lines set as\r\n    ``True`` in the input ``gas_component`` keyword. This is the flux of\r\n    individual gas templates, which may include multiple lines.\r\n    This implies that, if a gas template describes a doublet, the flux is\r\n    that of both lines. If the Balmer series is input as a single template,\r\n    this is the flux of the entire series.\r\n\r\n    The returned fluxes are not corrected in any way and in particular, no\r\n    reddening correction is applied. In other words, the returned\r\n    ``.gas_flux`` should be unchanged, within the errors, regardless of\r\n    whether reddening or multiplicative polynomials were fitted by ``pPXF``\r\n    or not.\r\n\r\n    IMPORTANT: ``pPXF`` makes no assumptions about the input flux units:\r\n    The returned ``.gas_flux`` has the same units and values one would\r\n    measure (with lower accuracy) by summing the pixels values, within the\r\n    given gas lines, on the continuum-subtracted input galaxy spectrum.\r\n    This implies that, if the spectrum is in units of ``erg/(s cm^2 A)``,\r\n    the ``.gas_flux`` returned by ``pPXF`` should be multiplied by the\r\n    pixel size in Angstrom at the line wavelength to obtain the integrated\r\n    line flux in units of ``erg/(s cm^2)``.\r\n\r\n    NOTE: If there is no gas reddening and each input gas template was\r\n    normalized to ``sum = 1``, then\r\n    ``pp.gas_flux = pp.weights[pp.gas_component]``.\r\n\r\n    When a gas template is identically zero within the fitted region, then\r\n    ``pp.gas_flux = pp.gas_flux_error = np.nan``. The corresponding\r\n    components of ``pp.gas_zero_template`` are set to ``True``. These\r\n    ``np.nan`` values are set at the end of the calculation to flag the\r\n    undefined values. These flags generally indicate that some of the gas\r\n    templates passed to ``pPXF`` consist of gas emission lines that fall\r\n    outside the fitted wavelength range or within a masked spectral region.\r\n    These ``np.nan`` do *not* indicate numerical issues with the actual\r\n    ``pPXF`` calculation and the rest of the ``pPXF`` output is reliable.\r\n.gas_flux_error:\r\n    *Formal* uncertainty (``1*sigma``) for the quantity ``pp.gas_flux``, in\r\n    the same units as the gas fluxes.\r\n\r\n    This error is approximate as it ignores the covariance between the gas\r\n    flux and any non-linear parameter. Bootstrapping can be used for more\r\n    accurate errors.\r\n\r\n    These errors are meaningless unless ``Chi^2/DOF ~ 1``. However if one\r\n    *assumes* that the fit is good, a corrected estimate of the errors is::\r\n\r\n        gas_flux_error_corr = gas_flux_error*sqrt(chi^2/DOF)\r\n                            = pp.gas_flux_error*sqrt(pp.chi2).\r\n\r\n.gas_mpoly:\r\n    vector with the best-fitting gas reddening curve.\r\n.gas_reddening:\r\n    Best fitting ``A_V`` value if the ``gas_reddening`` keyword is set.\r\n    This is especially useful when the Balmer series is input as a single\r\n    template with an assumed theoretically predicted decrement e.g. using\r\n    ``emission_lines(..., tie_balmer=True)`` in ``ppxf.ppxf_util`` to\r\n    compute the gas templates.\r\n.gas_zero_template:\r\n    vector of size ``gas_component.sum()`` set to ``True`` where\r\n    the gas template was identically zero within the fitted region.\r\n    For those gas components ``pp.gas_flux = pp.gas_flux_error = np.nan``.\r\n    These flags generally indicate that some of the gas templates passed to\r\n    ``pPXF`` consist of gas emission lines that fall outside the fitted\r\n    wavelength range or within a masked spectral region.\r\n.goodpixels:\r\n    Integer vector containing the indices of the good pixels in the fit.\r\n    This vector is a copy of the input ``goodpixels`` if ``clean = False``\r\n    otherwise it will be updated by removing the detected outliers.\r\n.matrix:\r\n    Prediction ``matrix[n_pixels, degree + n_templates + n_sky]`` of the\r\n    linear system.\r\n\r\n    ``pp.matrix[n_pixels, : degree]`` contains the additive polynomials if\r\n    ``degree >= 0``.\r\n\r\n    ``pp.matrix[n_pixels, degree : degree + n_templates]`` contains the\r\n    stellar/gas templates convolved by the LOSVD, and multiplied by the\r\n    multiplicative polynomials if ``mdegree > 0``.\r\n.mpoly:\r\n    Best fitting multiplicative polynomial (or reddening curve when\r\n    ``reddening`` is set).\r\n.mpolyweights:\r\n    This is largely superseded by the ``.mpoly`` attribute above.\r\n\r\n    When ``mdegree > 0`` this contains in output the coefficients of the\r\n    multiplicative Legendre polynomials of order ``1, 2,... mdegree``.\r\n    The polynomial can be explicitly evaluated as::\r\n\r\n        from numpy.polynomial import legendre\r\n        x = np.linspace(-1, 1, len(galaxy))\r\n        mpoly = legendre.legval(x, np.append(1, pp.mpolyweights))\r\n\r\n    When ``trig = True`` the polynomial is evaluated as::\r\n\r\n        mpoly = pp.trigval(x, np.append(1, pp.mpolyweights))\r\n\r\n.phot_bestfit: array_like with shape (n_phot)\r\n    When ``phot`` is given, then this attribute contains the best fitting\r\n    fluxes in the photometric bands given as input in ``phot_galaxy``.\r\n.plot: function\r\n    Call the method function ``pp.plot()`` after the call to\r\n    ``pp = ppxf(...)`` to produce a plot of the best fit. This is an\r\n    alternative to calling ``pp = ppxf(..., plot=True)``.\r\n\r\n    Use the command ``pp.plot(gas_clip=True)`` to scale the plot based on\r\n    the stellar continuum alone, while allowing for the gas emission lines\r\n    to go outside the plotting region. This is useful to inspect the fit\r\n    to the stellar continuum, in the presence of strong gas emission lines.\r\n    This has effect only if ``gas_component is not None``.\r\n\r\n    Use the command ``pp.plot(..., spec=True)`` to include the galaxy\r\n    spectrum in the plot and ``pp.plot(..., phot=True)`` to include the\r\n    photometric measurements. For example, when fitting spectra and\r\n    photometry together, one can use ``pp.plot(phot=True, spec=False)``\r\n    to plot the photometry alone and ``pp.plot(phot=False, spec=True)``\r\n    to plot the spectrum alone. By default both the spectrum and photometry\r\n    are included in a single plot.\r\n.polyweights:\r\n    This is largely superseded by the ``.apoly`` attribute above.\r\n\r\n    When ``degree >= 0`` contains the weights of the additive Legendre\r\n    polynomials of order ``0, 1,... degree``. The best-fitting additive\r\n    polynomial can be explicitly evaluated as::\r\n\r\n        from numpy.polynomial import legendre\r\n        x = np.linspace(-1, 1, len(galaxy))\r\n        apoly = legendre.legval(x, pp.polyweights)\r\n\r\n    When ``trig=True`` the polynomial is evaluated as::\r\n\r\n        apoly = pp.trigval(x, pp.polyweights)\r\n\r\n    When doing a two-sided fitting (see help for ``galaxy`` parameter), the\r\n    additive polynomials are allowed to be different for the left and right\r\n    spectrum. In that case, the output weights of the additive polynomials\r\n    alternate between the first (left) spectrum and the second (right)\r\n    spectrum.\r\n.reddening:\r\n    Best fitting ``A_V`` value if the ``reddening`` keyword is set.\r\n.sol:\r\n    Vector containing in output the parameters of the kinematics.\r\n\r\n    * If ``moments=2`` this contains ``[Vel, Sigma]``\r\n    * If ``moments=4`` this contains ``[Vel, Sigma, h3, h4]``\r\n    * If ``moments=N`` this contains ``[Vel, Sigma, h3,... hN]``\r\n\r\n    When fitting multiple kinematic ``component``, ``pp.sol`` contains a\r\n    list with the solution for all different components, one after the\r\n    other, sorted by ``component``: ``pp.sol = [sol1, sol2,...]``.\r\n\r\n    ``Vel`` is the velocity, ``Sigma`` is the velocity dispersion,\r\n    ``h3 - h6`` are the Gauss-Hermite coefficients. The model parameters\r\n    are fitted simultaneously.\r\n\r\n    IMPORTANT: The precise relation between the output ``pPXF`` velocity\r\n    and redshift is ``Vel = c*np.log(1 + z)``. See Section 2.3 of\r\n    `Cappellari (2017)`_ for a detailed explanation.\r\n\r\n    These are the default safety limits on the fitting parameters\r\n    (they can be changed using the ``bounds`` keyword):\r\n\r\n    * ``Vel`` is constrained to be ``+/-2000`` km/s from the input guess\r\n    * ``velscale/100 < Sigma < 1000`` km/s\r\n    * ``-0.3 < [h3, h4, ...] < 0.3``  (extreme value for real galaxies)\r\n\r\n    In the case of two-sided LOSVD fitting the output values refer to the\r\n    first input galaxy spectrum, while the second spectrum will have by\r\n    construction kinematics parameters ``[-Vel, Sigma, -h3, h4, -h5, h6]``.\r\n    If ``vsyst`` is nonzero (as required for two-sided fitting), then the\r\n    output velocity is measured with respect to ``vsyst``.\r\n.status:\r\n    Contains the output status of the optimization. Positive values\r\n    generally represent success (the meaning of ``status`` is defined as in\r\n    `scipy.optimize.least_squares`_).\r\n.weights:\r\n    Receives the value of the weights by which each template was\r\n    multiplied to best fit the galaxy spectrum. The optimal template can be\r\n    computed with an array-vector multiplication::\r\n\r\n        bestemp = templates @ weights\r\n\r\n    These ``.weights`` do not include the weights of the additive\r\n    polynomials which are separately stored in ``pp.polyweights``.\r\n\r\n    When the ``sky`` keyword is used ``weights[:n_templates]`` contains the\r\n    weights for the templates, while ``weights[n_templates:]`` gives the\r\n    ones for the sky. In that case the best-fitting galaxy template and sky\r\n    are given by::\r\n\r\n        bestemp = templates @ weights[:n_templates]\r\n        bestsky = sky @ weights[n_templates:]\r\n\r\n    When doing a two-sided fitting (see help for ``galaxy`` parameter)\r\n    *together* with the ``sky`` keyword, the sky weights are allowed to be\r\n    different for the left and right spectrum. In that case the output sky\r\n    weights alternate between the first (left) spectrum and the second\r\n    (right) spectrum.\r\n\r\nHow to Set the Kinematic Penalty Keyword\r\n----------------------------------------\r\n\r\nThe ``bias`` keyword is only used if ``moments > 2``, otherwise it is ignored.\r\n\r\nThe ``pPXF`` routine can give sensible quick results with the default\r\n``bias`` parameter, however, like in any penalized/filtered/regularized\r\nmethod, the optimal amount of penalization generally depends on the problem\r\nunder study.\r\n\r\nThe general rule here is that the penalty should leave the line-of-sight\r\nvelocity-distribution (LOSVD) virtually unaffected, when it is well sampled\r\nand the signal-to-noise ratio (``S/N``) is sufficiently high.\r\n\r\nEXAMPLE: If you expect a LOSVD with up to a high ``h4 ~ 0.2`` and your\r\nadopted penalty (``bias``) biases the solution towards a much lower\r\n``h4 ~ 0.1``, even when the measured ``sigma > 3*velscale`` and the S/N is\r\nhigh, then you are *misusing* the ``pPXF`` method!\r\n\r\nTHE RECIPE: The following is a simple practical recipe for a sensible\r\ndetermination of the penalty in ``pPXF``:\r\n\r\n1. Choose a minimum ``(S/N)_min`` level for your kinematics extraction and\r\n   spatially bin your data so that there are no spectra below ``(S/N)_min``;\r\n2. Perform a fit of your kinematics *without* penalty (keyword ``bias=0``).\r\n   The solution will be noisy and may be affected by spurious solutions,\r\n   however, this step will allow you to check the expected average ranges\r\n   in the Gauss-Hermite parameters ``[h3, h4]`` for the galaxy under study;\r\n3. Perform a Monte Carlo simulation of your spectra, following e.g. the\r\n   included ``ppxf_example_montecarlo_simulation.py`` routine. Adopt as\r\n   ``S/N`` in the simulation the chosen value ``(S/N)_min`` and as input\r\n   ``[h3, h4]`` the maximum representative values measured in the\r\n   non-penalized ``pPXF`` fit of the previous step;\r\n4. Choose as the penalty (``bias``) the *largest* value such that, for\r\n   ``sigma > 3*velscale``, the average difference delta between the output\r\n   ``[h3, h4]`` and the input ``[h3, h4]`` is well within (e.g.\r\n   ``delta ~ rms/3``) the rms scatter of the simulated values (see an\r\n   example in Fig. 2 of `Emsellem et al. 2004\r\n   <http://ui.adsabs.harvard.edu/abs/2004MNRAS.352..721E>`_).\r\n\r\nProblems with Your First Fit?\r\n-----------------------------\r\n\r\nCommon problems with your first ``pPXF`` fit are caused by incorrect\r\nwavelength ranges or different velocity scales between galaxy and\r\ntemplates. To quickly detect these problems try to overplot the (log\r\nrebinned) galaxy and the template just before calling the ``pPXF``\r\nprocedure.\r\n\r\nYou can use something like the following Python lines while adjusting the\r\nsmoothing window and the pixels shift. If you cannot get a rough match\r\nby eye it means something is wrong and it is unlikely that ``pPXF``\r\n(or any other program) will find a good match:\r\n\r\n.. code-block:: python\r\n\r\n    import numpy as np\r\n    import matplotlib.pyplot as plt\r\n    from scipy import ndimage\r\n\r\n    sigma = 2       # Velocity dispersion in pixels\r\n    shift = -20     # Velocity shift in pixels\r\n    template = np.roll(ndimage.gaussian_filter1d(template, sigma), shift)\r\n    plt.plot(galaxy, 'k')\r\n    plt.plot(template*np.median(galaxy)/np.median(template), 'r')\r\n\r\n###########################################################################\r\n\r\n\r\nLicense\r\n-------\r\n\r\nOther/Proprietary License\r\n\r\nCopyright (c) 2001-2024 Michele Cappellari\r\n\r\nThis software is provided as is with no warranty. You may use it for\r\nnon-commercial purposes and modify it for personal or internal use, as long\r\nas you include this copyright and disclaimer in all copies. You may not\r\nredistribute the code.\r\n\r\n###########################################################################\r\n\r\nChangelog\r\n---------\r\n\r\nV9.3.0: MC, Oxford, 28 June 2024\r\n++++++++++++++++++++++++++++++++\r\n\r\n- Converted all ``pPXF`` Python examples to ``py:percent`` format, which allows\r\n  one to open them as Jupyter Notebooks in most Python IDEs. Also added\r\n  several of my public Jupyter Notebook examples as ``py:percent`` Python files\r\n  in the ``ppxf/examples`` folder.\r\n- Updated examples and associated documentation to demonstrate the use of the\r\n  X-Shooter Stellar Library (XSL) SPS models (Verro+2022) with ``pPXF``.\r\n  The XSL template spectra can now be automatically retrieved from GitHub by\r\n  specifying ``sps_name = 'xsl'`` within the examples code.\r\n- ``sps_util.synthetic_photometry``: Swapped order of input parameters from\r\n  ``(spectrum, lam)`` to ``(lam, spectrum)`` for consistency with other\r\n  ``pPXF`` procedures. Updated corresponding examples.\r\n- ``sps_util.sps_lib``: Removed the warning regarding the template having a\r\n  lower resolution than the galaxy. This is because it could lead to false\r\n  positives, considering that the galaxy's fitted spectral range is not\r\n  generally known during template generation.\r\n\r\nV9.2.2: MC, Oxford, 20 May 2024\r\n+++++++++++++++++++++++++++++++\r\n\r\n- ``ppxf``: Fixed an issue where the absence of the ``reg_dim`` keyword could\r\n  halt the program (bug from V9.2.1). Thanks to Jesse van de Sande\r\n  (unsw.edu.au) and Luiz A. Silva-Lima (Univ. Sao Paulo, Brazil) for the\r\n  report.\r\n\r\n- ``ppxf``: Avoid possible program stop when ``templates`` are shorter than\r\n  ``galaxy`` (bug from V9.2.1).\r\n\r\n- ``ppxf``: Avoid truncating ``templates`` to ``goodpixels`` in the final plot,\r\n  when both ``lam`` and ``lam_temp`` parameters are supplied. Instead, show the\r\n  ``templates`` over the full ``galaxy`` spectral range.\r\n  \r\n- ``ppxf``: Corrected behaviour to only use the range between the first and\r\n  last ``goodpixels`` for determining the vertical plotting range.  Thanks to\r\n  David Gooding (chch.ox.ac.uk) for illustrating the problem.\r\n\r\n- ``ppxf_example_kinematics_sdss.py``: Modified the example to de-redshift the\r\n  spectrum by default, minimizing potential confusion.\r\n\r\nV9.2.1: MC, Oxford, 18 April 2024\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- ``sps_util.synthetic_photometry``: Accepts input wavelengths that are not\r\n  evenly spaced.\r\n- ``ppxf_util.mag_spectrum``: A new function to get the apparent magnitude from\r\n  a spectrum in any photometric band, at any redshift, in either the AB or Vega\r\n  magnitude system.\r\n- ``ppxf``: Now considers the given ``goodpixels`` when checking that the\r\n  ``templates`` cover the full ``galaxy`` spectrum, if both ``lam`` and\r\n  ``lam_temp`` are provided.\r\n- ``ppxf``: Allow for variable step size across intervals and dimensions in the\r\n  numerical derivatives used for regularization, with the new keyword\r\n  ``reg_step``.\r\n- ``ppxf``: Avoids new ``SyntaxWarning`` in Matplotlib LaTeX string in the\r\n  latest Python 3.12.\r\n- ``ppxf``: Avoid program stop when passing an input covariance matrix while\r\n  fitting for gas emission lines. Thanks to Jackson ODonnell (ucsc.edu) for the\r\n  report.\r\n\r\nV9.1.1: MC, Oxford, 18 January 2024\r\n+++++++++++++++++++++++++++++++++++\r\n\r\n- ``sps_util.mass_to_light``: Now it can calculate the stellar mass-to-light\r\n  ratio (``M*/L``) for any stellar population synthesis (SPS) model, any\r\n  filter, and any redshift, using the output weights from ``pPXF``. No need for\r\n  pre-computed tables anymore.\r\n- ``ppxf_util.mag_sun``: A new function to get the absolute solar magnitude in\r\n  any photometric band, at any redshift, in either the AB or Vega magnitude\r\n  system.\r\n\r\nV9.0.2: MC, Oxford, 30 November 2023\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- ``ppxf``: Fixed bug in the automatic truncation of the template wavelength,\r\n  when using ``bounds`` together with ``lam`` and ``lam_temp``.\r\n\r\nV9.0.1: MC, Oxford, 12 November 2023\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Replaced ``miles_util`` with ``sps_util``, a versatile and flexible function\r\n  that supports various stellar population synthesis (SPS) models. Currently, I\r\n  distribute (with permission) the ``E-MILES`` (Vazdekis+2016), ``GALAXEV``\r\n  (Bruzual & Charlot 2003) and ``fsps`` (Conroy+2009,2010) stellar population\r\n  templates. One can now change SPS by just modifying the filename.\r\n  \r\n  IMPORTANT: I no longer include the SPS models in the ``pPXF`` package, due to\r\n  file size constraints. One must download the SPS templates separately after\r\n  the ``pPXF`` installation, as demonstrated in all the ``pPXF`` examples.\r\n- I adapted all examples included in the package to use the new ``sps_util``. \r\n- ``ppxf.plot``: New keyword ``lam_flam`` to plot ``lam*f(lam) = nu*f(nu)``.\r\n- ``ppxf_util.synthetic_photometry``: Converted from a function to a class.\r\n  Added ``.lam_piv`` attribute to compute the pivot wavelength of each filter.\r\n- ``ppxf_util.varsmooth``: Specialized faster convolution if sigma is a scalar\r\n  while using the analytic Fourier transform to deal with undersampling.\r\n- ``ppxf``: Raised an error if ``phot`` input is not finite.\r\n\r\nV8.2.6: MC, Oxford, 6 July 2023\r\n+++++++++++++++++++++++++++++++\r\n\r\n- ``capfit``: Relaxed tolerance when checking initial guess feasibility.\r\n- ``ppxf_util``: Fixed program stop in ``gaussian_filter1d`` when ``sig=0``.\r\n  Thanks to Jesse Van de Sande (sydney.edu.au) for the report.\r\n\r\nV8.2.4: MC, Oxford, 12 May 2023\r\n+++++++++++++++++++++++++++++++\r\n\r\n- ``ppxf``: Fixed incorrectly switching to ``method='linear'`` when requesting\r\n  to fit stellar reddening alone, while all other parameters are fixed. Thanks\r\n  to Jong Chul Lee (kasi.re.kr) for a clear example of reproducing the bug.\r\n\r\nV8.2.3: MC, Oxford, 5 January 2023\r\n++++++++++++++++++++++++++++++++++\r\n\r\n- ``ppxf``: Fixed program stop when fitting both sky spectra and gas emission\r\n  lines. Many thanks to Adarsh Ranjan (kasi.re.kr) for a clear example\r\n  of reproducing the problem and for the bug fix.\r\n- ``ppxf``: Raise an error if ``velscale`` is not a scalar. Updated example\r\n  procedures. This fixes a program stop due to a change in NumPy 1.24.\r\n- ``ppxf_util``: Changed ``log_rebin`` to return ``velscale`` as a scalar.\r\n- New example procedure ``ppxf_example_gas_sdss_tied.py`` to illustrate the\r\n  use of the ``tied`` and ``constr_kinem`` keywords.\r\n\r\nV8.2.2: MC, Oxford, 11 October 2022\r\n+++++++++++++++++++++++++++++++++++\r\n\r\n- ``ppxf``: Fixed program stop with ``tied`` or ``fixed`` keywords and\r\n  nonlinear variables in addition to the kinematics. Thanks to Tobias Looser\r\n  (cam.ac.uk) for the report and fix.\r\n\r\nV8.2.1: MC, Oxford, 3 September 2022\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- ``ppxf``: New keyword ``dust`` which allows one to associate different\r\n  general attenuation functions to different sets of templates. This is useful\r\n  for example to apply three different attenuation functions to the young and\r\n  old stellar templates and to the gas emission lines respectively.\r\n- ``ppxf``: Uses ``A_V`` instead of ``E(B-V)`` to parametrize attenuation, when\r\n  using the now-obsolete keywords ``reddening`` and  ``gas_reddening``.\r\n- ``ppxf``: New default function ``attenuation()``. However, one can now use\r\n  general attenuation functions with an arbitrary number of bound or fixed\r\n  parameters.\r\n- ``ppxf``: New internal functions ``set_lam_input``, ``set_gas_input``,\r\n  ``set_dust_input``, ``set_phot_input`` to organize the code.\r\n- ``ppxf``: Improved vertical scaling of default plots.\r\n- ``ppxf``: New keywords ``pp.plot(spec=True, phot=True)`` to plot only the\r\n  photometric or spectroscopic best fits respectively.\r\n- ``ppxf_util``: New function ``varsmooth`` for Gaussian convolution with a\r\n  variable sigma. Unlike the similar ``gaussian_filter1d``, this new function\r\n  uses FFT and the analytic Fourier Transform of a Gaussian, like ``ppxf``.\r\n- ``ppxf_util``: Included additional gas emission lines in ``emission_lines()``.\r\n- ``capfit``: Use ``scipy.optimize.linprog(method='highs')`` to find feasible\r\n  starting point in ``lsq_lin``. This eliminates possible program stops in\r\n  certain situations with linearly dependent constraints.\r\n- ``capfit``: Set default ``linear_method='lsq_lin'``. This removes the need\r\n  to install ``cvxopt`` when using ``constr_kinem`` in ``pPXF``.\r\n\r\nV8.1.0: MC, Oxford, 10 June 2022\r\n++++++++++++++++++++++++++++++++\r\n\r\n- ``ppxf``: More accurate determination of the range for truncating the\r\n  templates when passing both ``lam_temp`` and ``lam``.\r\n- ``ppxf``: Check for ``lam`` or ``lam_temp`` consistency with ``velscale`` and\r\n  return an error if they do not match.\r\n- ``ppxf``: Use micrometre units and denser tick labels for the logarithmic\r\n  wavelength axis.\r\n- ``ppxf_util.synthetic_photometry``: moved from ``miles_util`` and made it\r\n  independent of the stellar library. Adopted the same filter file format as\r\n  EAZY, FAST, HyperZ... for interoperability.\r\n  Allow passing a file with user-defined filter response functions.\r\n- ``ppxf_util.log_rebin``: Support irregularly sampled input wavelength.\r\n- ``ppxf_util.gaussian_filter1d``: New keyword ``mode='constant'`` or\r\n  ``mode='wrap'``.\r\n- Updated ``ppxf_example_population_photometry.py``\r\n\r\nV8.0.2: MC, Oxford, 28 March 2022\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- ``ppxf``: Allow fitting photometric measurements (SED fitting) together with\r\n  a spectrum. This is implemented via the new keyword ``phot`` passing a\r\n  dictionary of parameters.\r\n- ``ppxf``: plot photometric fit together with spectrum when fitting\r\n  photometry.\r\n- ``ppxf``: New keyword ``lam_temp`` to input the templates wavelength. When\r\n  this is given, together with the galaxy wavelength ``lam``, the templates are\r\n  automatically truncated to an optimal wavelength range, and it becomes\r\n  unnecessary to use the keyword ``vsyst``.\r\n- ``ppxf``: Warning if ``templates`` are ``> 2x`` longer than ``galaxy``.\r\n- ``ppxf``: When fitting photometry one can input extended template spectra to\r\n  overplot the extrapolated best-fit spectrum together with the photometry.\r\n- New demo file on photometric fitting\r\n  ``ppxf_example_population_photometry.py``.\r\n- ``miles_util.photometry_from_table``: New example function to illustrate the\r\n  generation of the input photometric templates for the ``phot`` keyword, using\r\n  tabulated SSP model magnitudes.\r\n- ``miles_util.photometry_from_spectra``: New example function to illustrate\r\n  the generation of photometric templates from the spectra using filter\r\n  responses.\r\n- Replaced MILES spectral models of Vazdekis et al. (2010) with E-MILES models\r\n  of Vazdekis et al. (2016). Thanks to Alexandre Vazdekis (iac.es) for the\r\n  permission.\r\n- Adapted all ``pPXF`` examples to use the E-MILES templates.\r\n- ``miles_util.miles``: changed names of output wavelength ``.ln_lam_temp`` to\r\n  make clear they represent natural logarithms.\r\n- ``miles_util.miles``: set ``FWHM_gal=None`` to skip templates convolution.\r\n- ``ppxf``: Optionally performs global optimization of the non-linear\r\n  parameters. This is implemented via the new keyword ``global_search``.\r\n- ``ppxf``: Allow the use of multiplicative polynomials together with\r\n  reddening.\r\n- ``ppxf``: Plot individual gas emission components in addition to their sum.\r\n- ``ppxf``: Updated docstring documentation for the new features.\r\n- ``capfit``: Completely removed tied/fixed variables from the optimization and\r\n  constraints. This improves the conditioning of the Jacobian and further\r\n  strengthens the robustness of the optimization.\r\n- ``miles_util``: fixed ``flux`` array mismatch when using ``age_range`` or\r\n  ``metal_range``. Thanks to Davide Bevacqua (inaf.it) for the report.\r\n- ``ppxf``: Fixed program stop when fitting gas with a template length that is\r\n  not a multiple of ``velscale_ratio``.\r\n\r\nV7.4.5: MC, Oxford, 16 July 2021\r\n++++++++++++++++++++++++++++++++\r\n\r\n- ``ppxf``: New keyword ``pp.plot(clip_gas=True)`` to ignore the gas emission\r\n  lines while determining the plotting ranges for the best-fitting model.\r\n- ``miles_util``: New attribute ``.flux`` to convert between light-weighted\r\n  and mass-weighted stellar population quantities. Updated the corresponding\r\n  documentation in the docstring.\r\n- ``ppxf_example_population_gas_sdss``: Show how to convert between light-weighted\r\n  and mass-weighted stellar population using the new ``miles.flux`` attribute.\r\n- ``ppxf_util.log_rebin``: support fast log rebinning of all columns of 2-dim arrays.\r\n\r\nV7.4.4: MC, Oxford, 10 February 2021\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- ``ppxf``: More robust matrix scaling when using linear equality constraints\r\n  in ``constr_templ`` with ``linear_method='lsq_box'``. Thanks to Shravan Shetty\r\n  (pku.edu.cn) for a detailed report and for testing my fix.\r\n\r\nV7.4.3: MC, Oxford, 21 December 2020\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- ``capfit``: New ``linear_method`` keyword to select between ``cvxopt`` or\r\n  ``lsq_lin``, when using linear constraints, for cases where the latter stops.\r\n  The ``cvxopt`` package must be installed when setting that option.\r\n- ``ppxf``: Adapted to use ``capfit`` with ``linear_method='cvxopt'`` when\r\n  enforcing linear constraints on the kinematics with ``constr_kinem``.\r\n- ``ppxf``: Included NOTE in the documentation of ``constr_kinem``.\r\n  All changes above were after detailed reports by Kyle Westfall (ucolick.org).\r\n\r\nV7.4.2: MC, Oxford, 9 October 2020\r\n++++++++++++++++++++++++++++++++++\r\n\r\n- ``ppxf``: Corrected typo in example in the documentation of ``constr_templ``.\r\n- ``ppxf``: Check that ``constr_templ`` and ``constr_kinem`` are dictionaries.\r\n  Thanks to Davide Bevacqua (unibo.it) for the feedback.\r\n\r\nV7.4.1: MC, Oxford, 11 September 2020\r\n+++++++++++++++++++++++++++++++++++++\r\n\r\n- ``capfit``: Fixed possible infinite loop in ``lsq_box`` and ``lsq_lin``.\r\n  Thanks to Shravan Shetty (pku.edu.cn) for the detailed report and to both\r\n  him and Kyle Westfall (ucolick.org) for testing the fix.\r\n- ``capfit``: Use NumPy rather than the SciPy version of ``linalg.lstsq`` to\r\n  avoid a current SciPy bug in the default criterion for rank deficiency.\r\n- ``capfit``: Renamed ``cond`` keyword to ``rcond`` for consistency with NumPy.\r\n- ``capfit``: Passed ``rcond`` keyword to ``cov_err`` function.\r\n- ``ppxf``: removed ``rcond`` keyword in ``capfit`` call. Use default instead.\r\n\r\nV7.4.0: MC, Oxford, 20 August 2020\r\n++++++++++++++++++++++++++++++++++\r\n\r\n- ``capfit``: New function ``lsq_lin`` implementing a linear least-squares\r\n  linearly constrained algorithm supporting rank-deficient matrices and allowing\r\n  for a starting guess.\r\n- ``capfit``: Removed the ``lsqlin`` procedure which is superseded by ``lsq_lin``.\r\n- ``capfit``: Renamed ``lsqbox`` to ``lsq_box`` and revised its interface.\r\n- ``ppxf``: Modified to use the new ``lsq_lin`` and the updated ``lsq_box`` functions.\r\n- ``ppxf``: More examples for the ``constr_templ`` and ``constr_kinem`` keywords.\r\n- Set redshift ``z = 0`` when one uncomments the lines to bring the spectrum to\r\n  the rest-frame in ``ppxf_example_kinematics_sdss.py``. Thanks to\r\n  Vaidehi S. Paliya (desy.de) for pointing out the inconsistency in my example.\r\n\r\nV7.3.0: MC, Oxford, 10 July 2020\r\n++++++++++++++++++++++++++++++++\r\n\r\n- ``capfit``: New function ``lsqbox`` implementing a fast linear least-squares\r\n  box-constrained (bounds) algorithm which allows for a starting guess.\r\n  While testing I also discovered a major mistake in the current implementation\r\n  of ``scipy.optimize.lsq_linear`` (my fix was later included in Scipy 1.6).\r\n- ``ppxf``: The new ``linear_method='lsqbox'`` and ``linear_method='cvxopt'``\r\n  now use an initial guess for the solution, which significantly speeds up the\r\n  kinematic fit with multiple templates. As an example, my procedure\r\n  ``ppxf_example_population_gas_sdss`` is now about 4 times faster with the new\r\n  ``linear_method='lsqbox'`` than with the legacy ``linear_method='nnls'``.\r\n- ``ppxf``: Added support for linear equality constraints on the templates\r\n  ``constr_templ`` and for using the keyword ``fraction`` with both\r\n  ``linear_method='lsqbox'`` and ``linear_method='nnls'``.\r\n- Print ``degree`` and ``mdegree`` with the final results.\r\n- Set ``linear=True`` automatically if the fit has no free non-linear parameters,\r\n  to avoid a program stop. Thanks to Shravan Shetty (pku.edu.cn) for the report.\r\n\r\nV7.2.1: MC, Oxford, 12 June 2020\r\n++++++++++++++++++++++++++++++++\r\n\r\n- ``capfit``: New input keyword ``cond`` for Jacobian rank tolerance.\r\n- ``capfit``: Use ``bvls`` to solve quadratic subproblem with only ``bounds``.\r\n- ``ppxf``: Set ``cond=1e-7`` in ``capfit`` call, when using linear constraints.\r\n  The ``capfit`` related changes were due to detailed feedback by Kyle Westfall\r\n  (ucolick.org), to deal with situations with degenerate Jacobians, like when\r\n  there is no stellar continuum and one uses multiplicative polynomials.\r\n- ``ppxf``: Clarified documentation for ``.gas_zero_template`` and the\r\n  corresponding warning message, after feedback by Laura Salo (umn.edu).\r\n\r\nV7.2.0: MC, Oxford, 4 May 2020\r\n++++++++++++++++++++++++++++++\r\n\r\n- Allow for ``linear_method='cvxopt'`` when the optional ``cvxopt`` package\r\n  is installed.\r\n\r\nV7.1.0: MC, Oxford, 30 April 2020\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Introduced new ``ppxf`` keyword ``linear_method``, and corresponding changes\r\n  in the code, to select between the old ('nnls') and the new ('lsqlin')\r\n  approach to the solution of the linear least-squares subproblem in ``ppxf``.\r\n  Thanks to Sam Vaughan (sydney.edu.au) for a convincing minimal example\r\n  illustrating the usefulness of this keyword.\r\n\r\nV7.0.1: MC, Oxford, 8 April 2020\r\n++++++++++++++++++++++++++++++++\r\n\r\n- Support ``.gas_zero_template`` and ``fraction`` together with other\r\n  equality constraints.\r\n- Included ``np.pad(...mode='constant')`` for backward compatibility with\r\n  Numpy 1.16. Thanks to Shravan Shetty (KIAA-PKU) for the suggestion.\r\n- Fix ``rebin()`` not retaining the dimensionality of an input column-vector.\r\n  This resulted in a program stop with a single gas template and\r\n  ``velscale_ratio > 1``. Thanks to Zhiyuan Ji (astro.umass.edu) for a clear\r\n  example reproducing the bug.\r\n- ``capfit``: New keyword ``cond`` for ``lsqlin``.\r\n- ``capfit``: Relaxed assertion for inconsistent inequalities in ``lsqlin``\r\n  to avoid false positives. Thanks to Kyle Westfall (UCO Lick) for a detailed\r\n  bug report.\r\n\r\nV7.0.0: MC, Oxford, 10 January 2020\r\n+++++++++++++++++++++++++++++++++++\r\n\r\n- ``capfit``: New general linear least-squares optimization function\r\n  ``lsqlin`` which is now used to solve the quadratic subproblem.\r\n- ``capfit``: Allow for linear inequality/equality constraints\r\n  ``A_ineq``, ``b_ineq`` and  ``A_eq``, ``b_eq``.\r\n- ``ppxf``: Use (faster) ``capfit.lsqlin`` for the linear fit.\r\n- ``ppxf``: Use updated ``capfit.capfit`` for the non-linear optimization.\r\n- ``ppxf``: Allow for linear equalities/inequalities for both the template\r\n  weights and the kinematic parameters with the ``constr_templ`` and\r\n  ``constr_kinem`` optional keywords.\r\n- ``ppxf``: New ``set_linear_constraints`` function.\r\n- ``ppxf``: Updated documentation.\r\n\r\nV6.7.17: MC, Oxford, 14 November 2019\r\n+++++++++++++++++++++++++++++++++++++\r\n\r\n- ``capfit``: Written complete documentation.\r\n- ``capfit``: Improved print formatting.\r\n- ``capfit``: Return ``.message`` attribute.\r\n- ``capfit``: Improved ``xtol`` convergence test.\r\n- ``capfit``: Only accept final move if ``chi2`` decreased.\r\n- ``capfit``: Strictly satisfy bounds during Jacobian computation.\r\n\r\nV6.7.16: MC, Oxford, 12 June 2019\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- ``capfit``: Use only free parameters for ``xtol`` convergence test.\r\n- ``capfit``: Describe in words convergence status with nonzero ``verbose``.\r\n- ``capfit``: Fixed program stop when ``abs_step`` is undefined.\r\n- ``capfit``: Fixed ignoring optional ``max_nfev``.\r\n\r\nV6.7.15: MC, Oxford, 7 February 2019\r\n++++++++++++++++++++++++++++++++++++\r\n- Removed unused ``re`` import.\r\n- Removed Scipy's ``next_fast_len`` usage due to an issue with odd padding size.\r\n  Thanks to Eric Emsellem (ESO) for a clear example illustrating this rare and\r\n  subtle bug.\r\n\r\nV6.7.14: MC, Oxford, 27 November 2018\r\n++++++++++++++++++++++++++++++++++++++\r\n- Print the used ``tied`` parameters equalities, if any.\r\n- Return ``.ndof`` attribute.\r\n- Do not remove ``fixed`` or ``tied`` parameters from the DOF calculation.\r\n  Thanks to Joanna Woo (Univ. of Victoria) for the correction.\r\n- Replaced ``normalize``, ``min_age``, ``max_age`` and ``metal`` keywords with\r\n  ``norm_range``, ``age_range`` and ``metal_range`` in ``ppxf.miles_util.miles``.\r\n- Fixed ``clock`` ``DeprecationWarning`` in Python 3.7.\r\n\r\nV6.7.13: MC, Oxford, 20 September 2018\r\n++++++++++++++++++++++++++++++++++++++\r\n- Expanded documentation of ``reddening`` and ``gas_reddening``.\r\n  Thanks to Nick Boardman (Univ. Utah) for the feedback.\r\n- ``capfit`` now raises an error if one tries to tie parameters to themselves.\r\n  Thanks to Kyle Westfall (Univ. Santa Cruz) for the suggestion.\r\n- ``capfit`` uses Python 3.6 f-strings.\r\n\r\nV6.7.12: MC, Oxford, 9 July 2018\r\n++++++++++++++++++++++++++++++++\r\n- Allow for ``velscale`` and ``vsyst`` to be Numpy arrays rather than scalars.\r\n- Improved criterion for when the Balmer series is within the fitted wavelength\r\n  range in ``ppxf.ppxf_util.emission_lines``. Thanks to Sam Vaughan\r\n  (Univ. of Oxford) for the feedback.\r\n- Included ``width`` keyword in ``ppxf.ppxf_util.determine_goodpixels``.\r\n  Thanks to George Privon (Univ. of Florida) for the suggestion.\r\n- Expanded ``.gas_flux`` documentation.\r\n\r\nV6.7.11: MC, Oxford, 5 June 2018\r\n++++++++++++++++++++++++++++++++\r\n\r\n- Formatted ``ppxf.py`` docstring in reStructuredText.\r\n- Removed CHANGELOG from the code and placed it in a separate file.\r\n- Modified ``setup.py`` to show help and CHANGELOG on PyPi page.\r\n- Included ``ppxf.__version__``.\r\n\r\nV6.7.8: MC, Oxford, 21 May 2018\r\n+++++++++++++++++++++++++++++++\r\n\r\n- Moved package to the Python Package Index (PyPi).\r\n- Dropped legacy Python 2.7 support.\r\n\r\nV6.7.6: MC, Oxford, 16 April 2018\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Changed imports for the conversion of pPXF to a package.\r\n  Thanks to Joe Burchett (Santa Cruz) for the suggestion.\r\n\r\nV6.7.5: MC, Oxford, 10 April 2018\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Fixed syntax error under Python 2.7.\r\n\r\nV6.7.4: MC, Oxford, 16 February 2018\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Fixed bug in ``reddening_cal00()``. It only affected NIR lam > 1000 nm.\r\n\r\nV6.7.3: MC, Oxford, 8 February 2018\r\n+++++++++++++++++++++++++++++++++++\r\n\r\n- Plot wavelength in nm instead of Angstrom, following IAU rules.\r\n- Ensures each element of ``start`` is not longer than its ``moments``.\r\n- Removed underscore from internal function names.\r\n- Included ``ftol`` keyword.\r\n\r\nV6.7.2: MC, Oxford, 30 January 2018\r\n+++++++++++++++++++++++++++++++++++\r\n\r\n- Included dunder names as suggested by Peter Weilbacher (Potsdam).\r\n- Fixed wrong ``.gas_reddening`` when ``mdegree > 0``.\r\n- Improved formatting of the documentation.\r\n\r\nV6.7.1: MC, Oxford, 29 November 2017\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Removed import of ``misc.factorial``, deprecated in Scipy 1.0.\r\n\r\nV6.7.0: MC, Oxford, 6 November 2017\r\n+++++++++++++++++++++++++++++++++++\r\n\r\n- Allow users to input identically zero gas templates while still\r\n  producing a stable NNLS solution. In this case, warn the user and set\r\n  the .gas_zero_template attribute. This situation can indicate an input\r\n  bug or a gas line that entirely falls within a masked region.\r\n- Corrected ``gas_flux_error`` normalization, when input not normalized.\r\n- Return ``.gas_bestfit``, ``.gas_mpoly``, ``.mpoly`` and ``.apoly`` attributes.\r\n- Do not multiply gas emission lines by polynomials, instead allow for\r\n  ``gas_reddening`` (useful with tied Balmer emission lines).\r\n- Use ``axvspan`` to visualize masked regions in the plot.\r\n- Fixed program stop with ``linear`` keyword.\r\n- Introduced ``reddening_func`` keyword.\r\n\r\nV6.6.4: MC, Oxford, 5 October 2017\r\n++++++++++++++++++++++++++++++++++\r\n\r\n- Check for NaN in ``galaxy`` and check all ``bounds`` have two elements.\r\n- Allow ``start`` to be either a list or an array or vectors.\r\n\r\nV6.6.3: MC, Oxford, 25 September 2017\r\n+++++++++++++++++++++++++++++++++++++\r\n\r\n- Reduced bounds on multiplicative polynomials and clipped to positive\r\n  values. Thanks to Xihan Ji (Tsinghua University) for providing an\r\n  example of slightly negative gas emission lines, when the spectrum\r\n  contains essentially just noise.\r\n- Improved visualization of masked pixels.\r\n\r\nV6.6.2: MC, Oxford, 15 September 2017\r\n+++++++++++++++++++++++++++++++++++++\r\n\r\n- Fixed program stop with a 2-dim template array and regularization.\r\n  Thanks to Adriano Poci (Macquarie University) for the clear report and\r\n  the fix.\r\n\r\nV6.6.1: MC, Oxford, 4 August 2017\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Included note on ``.gas_flux`` output units. Thanks to Xihan Ji\r\n  (Tsinghua University) for the feedback.\r\n\r\nV6.6.0: MC, Oxford, 27 June 2017\r\n++++++++++++++++++++++++++++++++\r\n\r\n- Print and return gas fluxes and errors, if requested, with the new\r\n  ``gas_component`` and ``gas_names`` keywords.\r\n\r\nV6.5.0: MC, Oxford, 23 June 2017\r\n++++++++++++++++++++++++++++++++\r\n\r\n- Replaced ``MPFIT`` with ``capfit`` for a Levenberg-Marquardt method with\r\n  fixed or tied variables, which rigorously accounts for box constraints.\r\n\r\nV6.4.2: MC, Oxford, 2 June 2017\r\n+++++++++++++++++++++++++++++++\r\n\r\n- Fixed removal of bounds in solution, introduced in V6.4.1.\r\n  Thanks to Kyle Westfall (Univ. Santa Cruz) for reporting this.\r\n- Included ``method`` keyword to use Scipy's ``least_squares()``\r\n  as an alternative to MPFIT.\r\n- Force float division in pixel conversion of ``start`` and ``bounds``.\r\n\r\nV6.4.1: MC, Oxford, 25 May 2017\r\n+++++++++++++++++++++++++++++++\r\n\r\n- ``linear_fit()`` does not return unused status anymore, for\r\n  consistency with the corresponding change to ``cap_mpfit``.\r\n\r\nV6.4.0: MC, Oxford, 12 May 2017\r\n+++++++++++++++++++++++++++++++\r\n\r\n- Introduced ``tied`` keyword to tie parameters during fitting.\r\n- Included discussion of formal errors of ``.weights``.\r\n\r\nV6.3.2: MC, Oxford, 4 May 2017\r\n++++++++++++++++++++++++++++++\r\n\r\n- Fixed possible program stop introduced in V6.0.7 and consequently\r\n  removed unnecessary function ``_templates_rfft()``. Many thanks to\r\n  Jesus Falcon-Barroso for a very clear and useful bug report!\r\n\r\nV6.3.1: MC, Oxford, 13 April 2017\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Fixed program stop when fitting two galaxy spectra with\r\n  reflection-symmetric LOSVD.\r\n\r\nV6.3.0: MC, Oxford, 30 March 2017\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Included ``reg_ord`` keyword to allow for both first and second-order\r\n  regularization.\r\n\r\nV6.2.0: MC, Oxford, 27 March 2017\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Improved curvature criterion for regularization when ``dim > 1``.\r\n\r\nV6.1.0: MC, Oxford, 15 March 2017\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Introduced ``trig`` keyword to use a trigonometric series as\r\n  alternative to Legendre polynomials.\r\n\r\nV6.0.7: MC, Oxford, 13 March 2017\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Use ``next_fast_len()`` for optimal ``rfft()`` zero padding.\r\n- Included keyword ``gas_component`` in the ``.plot()`` method, to\r\n  distinguish gas emission lines in best-fitting plots.\r\n- Improved plot of residuals for noisy spectra.\r\n- Simplified regularization implementation.\r\n\r\nV6.0.6: MC, Oxford, 23 February 2017\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Added ``linear_fit()`` and ``nonlinear_fit()`` functions to better\r\n  clarify the code structure. Included ``templates_rfft`` keyword.\r\n- Updated documentation. Some code simplifications.\r\n\r\nV6.0.5: MC, Oxford, 21 February 2017\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Consistently use new format_output() function both with/without\r\n  the ``linear`` keyword. Added ``.status`` attribute. Changes suggested by\r\n  Kyle Westfall (Univ. Santa Cruz).\r\n\r\nV6.0.4: MC, Oxford, 30 January 2017\r\n+++++++++++++++++++++++++++++++++++\r\n\r\n- Re-introduced ``linear`` keyword to only perform a linear fit and\r\n  skip the non-linear optimization.\r\n\r\nV6.0.3: MC, Oxford, 1 December 2016\r\n+++++++++++++++++++++++++++++++++++\r\n\r\n- Return usual ``Chi**2/DOF`` instead of Biweight estimate.\r\n\r\nV6.0.2: MC, Oxford, 15 August 2016\r\n++++++++++++++++++++++++++++++++++\r\n\r\n- Improved formatting of printed output.\r\n\r\nV6.0.1: MC, Oxford, 10 August 2016\r\n++++++++++++++++++++++++++++++++++\r\n\r\n- Allow ``moments`` to be an arbitrary integer.\r\n- Allow for scalar ``moments`` with multiple kinematic components.\r\n\r\nV6.0.0: MC, Oxford, 28 July 2016\r\n++++++++++++++++++++++++++++++++\r\n\r\n- Compute the Fourier Transform of the LOSVD analytically:\r\n- Major improvement in velocity accuracy when ``sigma < velscale``.\r\n- Removed ``oversample`` keyword, which is now unnecessary.\r\n- Removed limit on velocity shift of templates.\r\n- Simplified FFT zero padding. Updated documentation.\r\n\r\nV5.3.3: MC, Oxford 24 May 2016\r\n++++++++++++++++++++++++++++++\r\n\r\n- Fixed Python 2 compatibility. Thanks to Masato Onodera (NAOJ).\r\n\r\nV5.3.2: MC, Oxford, 22 May 2016\r\n+++++++++++++++++++++++++++++++\r\n\r\n- Backward compatibility change: allow ``start`` to be smaller than\r\n  ``moments``. After feedback by Masato Onodera (NAOJ).\r\n- Updated documentation of ``bounds`` and ``fixed``.\r\n\r\nV5.3.1: MC, Oxford, 18 May 2016\r\n+++++++++++++++++++++++++++++++\r\n\r\n- Use wavelength in the plot when available. Make ``plot()`` a class function.\r\n  Changes suggested and provided by Johann Cohen-Tanugi (LUPM).\r\n\r\nV5.3.0: MC, Oxford, 9 May 2016\r\n++++++++++++++++++++++++++++++\r\n\r\n- Included ``velscale_ratio`` keyword to pass a set of templates with\r\n  higher resolution than the galaxy spectrum.\r\n- Changed ``oversample`` keyword to require integers, not Booleans.\r\n\r\nV5.2.0: MC, Baltimore, 26 April 2016\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Included ``bounds``, ``fixed`` and ``fraction`` keywords.\r\n\r\nV5.1.18: MC, Oxford, 20 April 2016\r\n++++++++++++++++++++++++++++++++++\r\n\r\n- Fixed deprecation warning in Numpy 1.11. Changed order from 1 to 3\r\n  during oversampling. Warn if sigma is under-sampled.\r\n\r\nV5.1.17: MC, Oxford, 21 January 2016\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Expanded explanation of the relationship between output velocity and redshift.\r\n\r\nV5.1.16: MC, Oxford, 9 November 2015\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Fixed potentially misleading typo in documentation of ``moments``.\r\n\r\nV5.1.15: MC, Oxford, 22 October 2015\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Updated documentation. Thanks to Peter Weilbacher (Potsdam) for\r\n  corrections.\r\n\r\nV5.1.14: MC, Oxford, 19 October 2015\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Fixed deprecation warning in Numpy 1.10.\r\n\r\nV5.1.13: MC, Oxford, 24 April 2015\r\n++++++++++++++++++++++++++++++++++\r\n\r\n- Updated documentation.\r\n\r\nV5.1.12: MC, Oxford, 25 February 2015\r\n+++++++++++++++++++++++++++++++++++++\r\n\r\n- Use ``color=`` instead of ``c=`` to avoid a new Matplotlib 1.4 bug.\r\n\r\nV5.1.11: MC, Sydney, 5 February 2015\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Reverted change introduced in V5.1.2. Thanks to Nora Lu\"tzgendorf\r\n  for reporting problems with ``oversample``.\r\n\r\nV5.1.10: MC, Oxford, 14 October 2014\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Fixed bug in saving output introduced in the previous version.\r\n\r\nV5.1.9: MC, Las Vegas Airport, 13 September 2014\r\n++++++++++++++++++++++++++++++++++++++++++++++++\r\n\r\n- Pre-compute FFT and oversampling of templates. This speeds up the\r\n  calculation for very long or highly oversampled spectra. Thanks to\r\n  Remco van den Bosch for reporting situations where this optimization\r\n  may be useful.\r\n\r\nV5.1.8: MC, Utah, 10 September 2014\r\n+++++++++++++++++++++++++++++++++++\r\n\r\n- Fixed program stop with ``reddening`` keyword. Thanks to Masatao\r\n  Onodera for reporting the problem.\r\n\r\nV5.1.7: MC, Oxford, 3 September 2014\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Relaxed requirement on input maximum velocity shift.\r\n- Minor reorganization of the code structure.\r\n\r\nV5.1.6: MC, Oxford, 6 August 2014\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Catch an additional input error. Updated documentation for Python.\r\n  Included templates ``matrix`` in output. Modified plotting colours.\r\n\r\nV5.1.5: MC, Oxford, 21 June 2014\r\n++++++++++++++++++++++++++++++++\r\n\r\n- Fixed deprecation warning.\r\n\r\nV5.1.4: MC, Oxford, 25 May 2014\r\n+++++++++++++++++++++++++++++++\r\n\r\n- Support both Python 2.7 and Python 3.\r\n\r\nV5.1.3: MC, Oxford, 7 May 2014\r\n++++++++++++++++++++++++++++++\r\n\r\n- Allow for an input covariance matrix instead of an error spectrum.\r\n\r\nV5.1.2: MC, Oxford, 6 May 2014\r\n++++++++++++++++++++++++++++++\r\n\r\n- Replaced REBIN with INTERPOLATE + /OVERSAMPLE keyword. This is\r\n  to account for the fact that the Line Spread Function of the observed\r\n  galaxy spectrum already includes pixel convolution. Thanks to Mike\r\n  Blanton for the suggestion.\r\n\r\nV5.1.1: MC, Dallas Airport, 9 February 2014\r\n+++++++++++++++++++++++++++++++++++++++++++\r\n\r\n- Fixed typo in the documentation of ``nnls_flags``.\r\n\r\nV5.1.0: MC, Oxford, 9 January 2014\r\n++++++++++++++++++++++++++++++++++\r\n\r\n- Allow for a different LOSVD for each template. Templates can be stellar or\r\n  can be gas emission lines. A pPXF version adapted for multiple kinematic\r\n  components existed for years. It was updated in JAN/2012 for the paper by\r\n  Johnston et al. (2013, MNRAS). This version merges those changes with the\r\n  public pPXF version, making sure that all previous pPXF options are still\r\n  supported.\r\n\r\nV5.0.1: MC, Oxford, 12 December 2013\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Minor cleaning and corrections.\r\n\r\nV5.0.0: MC, Oxford, 6 December 2013\r\n+++++++++++++++++++++++++++++++++++\r\n\r\n- Translated from IDL into Python and tested against the original version.\r\n\r\nV4.6.6: MC, Paranal, 8 November 2013\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Uses CAP_RANGE to avoid potential naming conflicts.\r\n\r\nV4.6.5: MC, Oxford, 15 November 2012\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Expanded documentation of REGUL keyword.\r\n\r\nV4.6.4: MC, Oxford, 9 December 2011\r\n+++++++++++++++++++++++++++++++++++\r\n\r\n- Increased oversampling factor to 30x, when the /OVERSAMPLE keyword\r\n  is used. Updated corresponding documentation. Thanks to Nora\r\n  Lu\"tzgendorf for test cases illustrating errors in the recovered\r\n  velocity when the sigma is severely undersampled.\r\n\r\nV4.6.3: MC, Oxford 25 October 2011\r\n++++++++++++++++++++++++++++++++++\r\n\r\n- Do not change TEMPLATES array in output when REGUL is nonzero.\r\n  From the feedback of Richard McDermid.\r\n\r\nV4.6.2: MC, Oxford, 17 October 2011\r\n+++++++++++++++++++++++++++++++++++\r\n\r\n- Included option for 3D regularization and updated documentation of\r\n  REGUL keyword.\r\n\r\nV4.6.1: MC, Oxford, 29 July 2011\r\n++++++++++++++++++++++++++++++++\r\n\r\n- Use Coyote Graphics (http://www.idlcoyote.com/) by David W. Fanning.\r\n  The required routines are now included in NASA IDL Astronomy Library.\r\n\r\nV4.6.0: MC, Oxford, 12 April 2011\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Important fix to /CLEAN procedure: bad pixels are now properly\r\n  updated during the 3sigma iterations.\r\n\r\nV4.5.0: MC, Oxford, 13 April 2010\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Dramatic speed up in the convolution of long spectra.\r\n\r\nV4.4.0: MC, Oxford, 18 September 2009\r\n+++++++++++++++++++++++++++++++++++++\r\n\r\n- Introduced Calzetti et al. (2000) ppxf_REDDENING_CURVE function to\r\n  estimate the reddening from the fit.\r\n\r\nV4.3.0: MC, Oxford, 4 Mach 2009\r\n+++++++++++++++++++++++++++++++\r\n\r\n- Introduced REGUL keyword to perform linear regularization of WEIGHTS\r\n  in one or two dimensions.\r\n\r\nV4.2.3: MC, Oxford, 27 November 2008\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Corrected error message for too big velocity shift.\r\n\r\nV4.2.2: MC, Windhoek, 3 July 2008\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Added keyword POLYWEIGHTS.\r\n\r\nV4.2.1: MC, Oxford, 17 May 2008\r\n+++++++++++++++++++++++++++++++\r\n\r\n- Use LA_LEAST_SQUARES (IDL 5.6) instead of SVDC when fitting a single\r\n  template. Please let me know if you need to use pPXF with an older IDL\r\n  version.\r\n\r\nV4.2.0: MC, Oxford, 15 March 2008\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Introduced optional fitting of SKY spectrum. Many thanks to\r\n  Anne-Marie Weijmans for testing.\r\n\r\nV4.1.7: MC, Oxford, 6 October 2007\r\n++++++++++++++++++++++++++++++++++\r\n\r\n- Updated documentation with an important note on penalty determination.\r\n\r\nV4.1.6: MC, Leiden, 20 January 2006\r\n+++++++++++++++++++++++++++++++++++\r\n\r\n- Print the number of nonzero templates. Do not print outliers in /QUIET mode.\r\n\r\nV4.1.5: MC, Leiden, 10 February 2005\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Verify that GOODPIXELS is monotonic and does not contain duplicated\r\n  values. After feedback from Richard McDermid.\r\n\r\nV4.1.4: MC, Leiden, 12 January 2005\r\n+++++++++++++++++++++++++++++++++++\r\n\r\n- Make sure input NOISE is a positive vector.\r\n\r\nV4.1.3: MC, Vicenza, 30 December 2004\r\n+++++++++++++++++++++++++++++++++++++\r\n\r\n- Updated documentation.\r\n\r\nV4.1.2: MC, Leiden, 11 November 2004\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Handle special case where a single template without additive\r\n  polynomials is fitted to the galaxy.\r\n\r\nV4.1.1: MC, Leiden, 21 September 2004\r\n+++++++++++++++++++++++++++++++++++++\r\n\r\n- Increased maximum number of iterations ITMAX in BVLS. Thanks to\r\n  Jesus Falcon-Barroso for reporting problems.\r\n- Introduced error message when velocity shift is too big.\r\n- Corrected output when MOMENTS=0.\r\n\r\nV4.1.0: MC, Leiden, 3 September 2004\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Corrected implementation of two-sided fitting of the LOSVD. Thanks\r\n  to Stefan van Dongen for reporting problems.\r\n\r\nV4.0.0: MC, Vicenza, 16 August 2004\r\n+++++++++++++++++++++++++++++++++++\r\n\r\n- Introduced optional two-sided fitting assuming a reflection\r\n  symmetric LOSVD for two input spectra.\r\n\r\nV3.7.3: MC, Leiden, 7 August 2004\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Corrected bug: keyword ERROR was returned in pixels instead of km/s.\r\n- Decreased lower limit on fitted dispersion. Thanks to Igor V. Chilingarian.\r\n\r\nV3.7.2: MC, Leiden, 28 April 2004\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Corrected program stop after fit when MOMENTS=2. The bug was introduced in V3.7.0.\r\n\r\nV3.7.1: MC, Leiden, 31 March 2004\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Updated documentation.\r\n\r\nV3.7.0: MC, Leiden, 23 March 2004\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Revised implementation of MDEGREE option. Nonlinear implementation:\r\n  straightforward, robust, but slower.\r\n\r\nV3.6.0: MC, Leiden, 19 March 2004\r\n+++++++++++++++++++++++++++++++++\r\n\r\n- Added MDEGREE option for multiplicative polynomials. Linear implementation:\r\n  fast, works well in most cases, but can fail in certain cases.\r\n\r\nV3.5.0: MC, Leiden, 11 December 2003\r\n++++++++++++++++++++++++++++++++++++\r\n\r\n- Included /OVERSAMPLE option.\r\n\r\nV3.4.7: MC, Leiden, 8 December 2003\r\n+++++++++++++++++++++++++++++++++++\r\n\r\n- First released version.\r\n\r\nV1.0.0: Leiden, 10 October 2001\r\n+++++++++++++++++++++++++++++++\r\n\r\n- Created by Michele Cappellari.\r\n\r\n","description_content_type":"text/x-rst","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://purl.org/cappellari/software","keywords":null,"license":"Other/Proprietary License","maintainer":null,"maintainer_email":null,"name":"ppxf","package_url":"https://pypi.org/project/ppxf/","platform":null,"project_url":"https://pypi.org/project/ppxf/","project_urls":{"Homepage":"https://purl.org/cappellari/software"},"provides_extra":null,"release_url":"https://pypi.org/project/ppxf/9.3.0/","requires_dist":["numpy","scipy","matplotlib","astropy"],"requires_python":null,"summary":"pPXF: Full Spectrum and SED Fitting of Galactic and Stellar Spectra","version":"9.3.0","yanked":false,"yanked_reason":null},"last_serial":23897388,"releases":{"6.7.11":[{"comment_text":"","digests":{"blake2b_256":"e8ad09b6cb0d9adbf9989c9cfaab2a344e5d5c019d432e032ab128b62012bae8","md5":"c8666b8a309e0fba9745f6f45fc0ff65","sha256":"ef411718f2cd1800b572d414818b356a0b64a93e96f532c9629cd14ba203b009"},"downloads":-1,"filename":"ppxf-6.7.11.tar.gz","has_sig":false,"md5_digest":"c8666b8a309e0fba9745f6f45fc0ff65","packagetype":"sdist","python_version":"source","requires_python":null,"size":3268127,"upload_time":"2018-06-05T13:55:05","upload_time_iso_8601":"2018-06-05T13:55:05.780575Z","url":"https://files.pythonhosted.org/packages/e8/ad/09b6cb0d9adbf9989c9cfaab2a344e5d5c019d432e032ab128b62012bae8/ppxf-6.7.11.tar.gz","yanked":false,"yanked_reason":null}],"6.7.12":[{"comment_text":"","digests":{"blake2b_256":"83114940cb01e78df8feeb1cd1026171fa22dbee24a5db9f1711d6415b3e2551","md5":"b8a6449a16befd961c5aa382b719d51a","sha256":"c9caab4582764a852d6a5ab452030f01235212cbe29216b25e040236379dd310"},"downloads":-1,"filename":"ppxf-6.7.12.tar.gz","has_sig":false,"md5_digest":"b8a6449a16befd961c5aa382b719d51a","packagetype":"sdist","python_version":"source","requires_python":null,"size":3269455,"upload_time":"2018-07-09T10:01:06","upload_time_iso_8601":"2018-07-09T10:01:06.797248Z","url":"https://files.pythonhosted.org/packages/83/11/4940cb01e78df8feeb1cd1026171fa22dbee24a5db9f1711d6415b3e2551/ppxf-6.7.12.tar.gz","yanked":false,"yanked_reason":null}],"6.7.13":[{"comment_text":"","digests":{"blake2b_256":"29fbc4ff828af045f1d702b45a672a33a70d515a2f4db9a21f81bed9d0ed8063","md5":"3980d0e00fceb0742a47ca9569d5a0cf","sha256":"b4bc8272bf9dafa0fe0db2bb849723eff837fbba12d5597424f77b6790843cdd"},"downloads":-1,"filename":"ppxf-6.7.13.tar.gz","has_sig":false,"md5_digest":"3980d0e00fceb0742a47ca9569d5a0cf","packagetype":"sdist","python_version":"source","requires_python":null,"size":3269942,"upload_time":"2018-09-20T15:15:55","upload_time_iso_8601":"2018-09-20T15:15:55.221332Z","url":"https://files.pythonhosted.org/packages/29/fb/c4ff828af045f1d702b45a672a33a70d515a2f4db9a21f81bed9d0ed8063/ppxf-6.7.13.tar.gz","yanked":false,"yanked_reason":null}],"6.7.14":[{"comment_text":"","digests":{"blake2b_256":"3cd0c419334ca1d3f1062202f4a54c13c5285ba717dc086d80ae3446e2bd6f19","md5":"af6832d3668467d9b999778121360f45","sha256":"c7d4f1196388c0788bd8a18e06655fe6347f09c23fd149a354e0cf3053fdbcf7"},"downloads":-1,"filename":"ppxf-6.7.14.tar.gz","has_sig":false,"md5_digest":"af6832d3668467d9b999778121360f45","packagetype":"sdist","python_version":"source","requires_python":null,"size":3271992,"upload_time":"2018-11-27T18:38:21","upload_time_iso_8601":"2018-11-27T18:38:21.899812Z","url":"https://files.pythonhosted.org/packages/3c/d0/c419334ca1d3f1062202f4a54c13c5285ba717dc086d80ae3446e2bd6f19/ppxf-6.7.14.tar.gz","yanked":false,"yanked_reason":null}],"6.7.15":[{"comment_text":"","digests":{"blake2b_256":"78c4e6b1fa4ed5a3e1a799c096a9dde010263befe17a89ce3a76971c7754ad75","md5":"c5e408260cfc23f24b130768868b2f34","sha256":"49942ace6c6d2d0903b11ebcbc9f7c3a4c529328dee1f7a0473e6eee18ab42e3"},"downloads":-1,"filename":"ppxf-6.7.15.tar.gz","has_sig":false,"md5_digest":"c5e408260cfc23f24b130768868b2f34","packagetype":"sdist","python_version":"source","requires_python":null,"size":3269778,"upload_time":"2019-02-07T16:51:53","upload_time_iso_8601":"2019-02-07T16:51:53.388436Z","url":"https://files.pythonhosted.org/packages/78/c4/e6b1fa4ed5a3e1a799c096a9dde010263befe17a89ce3a76971c7754ad75/ppxf-6.7.15.tar.gz","yanked":false,"yanked_reason":null}],"6.7.16":[{"comment_text":"","digests":{"blake2b_256":"4452bbc40f1ecfca314822ea4c10dd0bd92743e9d980a7b3e729a0f2565f1bf0","md5":"a6e21097f1517f760e8fa20022cce739","sha256":"1b50c1aae4c4932558ba8fd23bc8facddeebd4594bced5d2348d2e9a8052bfcf"},"downloads":-1,"filename":"ppxf-6.7.16.tar.gz","has_sig":false,"md5_digest":"a6e21097f1517f760e8fa20022cce739","packagetype":"sdist","python_version":"source","requires_python":null,"size":3270119,"upload_time":"2019-06-12T09:59:17","upload_time_iso_8601":"2019-06-12T09:59:17.794647Z","url":"https://files.pythonhosted.org/packages/44/52/bbc40f1ecfca314822ea4c10dd0bd92743e9d980a7b3e729a0f2565f1bf0/ppxf-6.7.16.tar.gz","yanked":false,"yanked_reason":null}],"6.7.17":[{"comment_text":"","digests":{"blake2b_256":"be78cb0704f48ee8e4e275a41e5a329684ea2fe1f01294ebc8e48526db2aafaa","md5":"335ae211d289cb588faa82f9b6116bc1","sha256":"7cf74acce92abc5af0c161f6333ba42621566cf41407412e0a8d512f0ae15270"},"downloads":-1,"filename":"ppxf-6.7.17.tar.gz","has_sig":false,"md5_digest":"335ae211d289cb588faa82f9b6116bc1","packagetype":"sdist","python_version":"source","requires_python":null,"size":3272206,"upload_time":"2019-11-14T15:39:08","upload_time_iso_8601":"2019-11-14T15:39:08.696614Z","url":"https://files.pythonhosted.org/packages/be/78/cb0704f48ee8e4e275a41e5a329684ea2fe1f01294ebc8e48526db2aafaa/ppxf-6.7.17.tar.gz","yanked":false,"yanked_reason":null}],"6.7.8":[{"comment_text":"","digests":{"blake2b_256":"266996e269d9d7ec78a63bcf08fc94f22eab530e06282a10d88c7266f2613953","md5":"6eae34bfcf8dccb2234f764cf7e83ea9","sha256":"6d2314f2ba90750b33c6236006ad1c8a0167e0c072b58b33badd354cd53bfb80"},"downloads":-1,"filename":"ppxf-6.7.8.tar.gz","has_sig":false,"md5_digest":"6eae34bfcf8dccb2234f764cf7e83ea9","packagetype":"sdist","python_version":"source","requires_python":null,"size":3231032,"upload_time":"2018-05-21T10:29:00","upload_time_iso_8601":"2018-05-21T10:29:00.717930Z","url":"https://files.pythonhosted.org/packages/26/69/96e269d9d7ec78a63bcf08fc94f22eab530e06282a10d88c7266f2613953/ppxf-6.7.8.tar.gz","yanked":false,"yanked_reason":null}],"7.0.0":[{"comment_text":"","digests":{"blake2b_256":"b63032a218a3e2f3aa05fa641d24c2ac1ca15a937226d2e91068b7e636854901","md5":"bd38efb3ef87033bfb7eb28a54fcdb2d","sha256":"b99260ed56b0bcd78d3cb8a814b03c8bbad9810514a7a5243a163e9d33a3ffec"},"downloads":-1,"filename":"ppxf-7.0.0.tar.gz","has_sig":false,"md5_digest":"bd38efb3ef87033bfb7eb28a54fcdb2d","packagetype":"sdist","python_version":"source","requires_python":null,"size":3276372,"upload_time":"2020-01-10T18:55:19","upload_time_iso_8601":"2020-01-10T18:55:19.544729Z","url":"https://files.pythonhosted.org/packages/b6/30/32a218a3e2f3aa05fa641d24c2ac1ca15a937226d2e91068b7e636854901/ppxf-7.0.0.tar.gz","yanked":false,"yanked_reason":null}],"7.0.1":[{"comment_text":"","digests":{"blake2b_256":"013e70b98d56b75a2c48b4ade6d8c3cc5bbd99ac49800de832920c3978f7b25b","md5":"f27bb7b460c6934037f31c1564f79630","sha256":"d422bc2f8e02840cf3b3b8fd36346a30630a75f7bafe47596c8e137e60b1061f"},"downloads":-1,"filename":"ppxf-7.0.1.tar.gz","has_sig":false,"md5_digest":"f27bb7b460c6934037f31c1564f79630","packagetype":"sdist","python_version":"source","requires_python":null,"size":3277788,"upload_time":"2020-04-08T18:37:25","upload_time_iso_8601":"2020-04-08T18:37:25.348022Z","url":"https://files.pythonhosted.org/packages/01/3e/70b98d56b75a2c48b4ade6d8c3cc5bbd99ac49800de832920c3978f7b25b/ppxf-7.0.1.tar.gz","yanked":false,"yanked_reason":null}],"7.1.0":[{"comment_text":"","digests":{"blake2b_256":"c717d81127baaf710afe7e1c76d6312b3edf65baee7e855e1882903b46fa9dcd","md5":"ebf58ae65888dc518929ff01006e4082","sha256":"facddb3b34f83af356e78714e8966560154ace8c134fdaa181440e72d5906faa"},"downloads":-1,"filename":"ppxf-7.1.0.tar.gz","has_sig":false,"md5_digest":"ebf58ae65888dc518929ff01006e4082","packagetype":"sdist","python_version":"source","requires_python":null,"size":3279230,"upload_time":"2020-04-30T17:35:59","upload_time_iso_8601":"2020-04-30T17:35:59.990283Z","url":"https://files.pythonhosted.org/packages/c7/17/d81127baaf710afe7e1c76d6312b3edf65baee7e855e1882903b46fa9dcd/ppxf-7.1.0.tar.gz","yanked":false,"yanked_reason":null}],"7.2.0":[{"comment_text":"","digests":{"blake2b_256":"9371e83e67d08e1aa4a35c5cb91c0b1b0362282dfe10dbeb0d3fb596b9ea0594","md5":"1c2215ac8ec6e99917b47ba39b634d0c","sha256":"8f4ae9e226a0c138f4fb90090e0e891321c777cc83fd45d9494b257c646a42b0"},"downloads":-1,"filename":"ppxf-7.2.0.tar.gz","has_sig":false,"md5_digest":"1c2215ac8ec6e99917b47ba39b634d0c","packagetype":"sdist","python_version":"source","requires_python":null,"size":3279857,"upload_time":"2020-05-04T17:20:22","upload_time_iso_8601":"2020-05-04T17:20:22.059189Z","url":"https://files.pythonhosted.org/packages/93/71/e83e67d08e1aa4a35c5cb91c0b1b0362282dfe10dbeb0d3fb596b9ea0594/ppxf-7.2.0.tar.gz","yanked":false,"yanked_reason":null}],"7.2.1":[{"comment_text":"","digests":{"blake2b_256":"e66c05721d346a9fa3f06c24888ba81d28f56573dc82a39f8b9ac7cb9c123608","md5":"d4288b93efb64d02aeeaad38fb652361","sha256":"38e73c9d68a1cbcacf7e1b975753c6584afdfb6db34ad601c07f45b9fca7cf0f"},"downloads":-1,"filename":"ppxf-7.2.1.tar.gz","has_sig":false,"md5_digest":"d4288b93efb64d02aeeaad38fb652361","packagetype":"sdist","python_version":"source","requires_python":null,"size":3283575,"upload_time":"2020-06-12T14:55:44","upload_time_iso_8601":"2020-06-12T14:55:44.488372Z","url":"https://files.pythonhosted.org/packages/e6/6c/05721d346a9fa3f06c24888ba81d28f56573dc82a39f8b9ac7cb9c123608/ppxf-7.2.1.tar.gz","yanked":false,"yanked_reason":null}],"7.3.0":[{"comment_text":"","digests":{"blake2b_256":"563a33978ef33f015bec7d9e7c6e786f4a86fa94176db737e55f4ea5b19e0cb6","md5":"0def6e071fe18fa8abe5f8a2b994e6de","sha256":"45c2b81ff465b305dc41b7a24b6f0850ee38c3e4a7ebdddbf5dc4bba518aa58f"},"downloads":-1,"filename":"ppxf-7.3.0.tar.gz","has_sig":false,"md5_digest":"0def6e071fe18fa8abe5f8a2b994e6de","packagetype":"sdist","python_version":"source","requires_python":null,"size":3286095,"upload_time":"2020-07-10T17:56:12","upload_time_iso_8601":"2020-07-10T17:56:12.322720Z","url":"https://files.pythonhosted.org/packages/56/3a/33978ef33f015bec7d9e7c6e786f4a86fa94176db737e55f4ea5b19e0cb6/ppxf-7.3.0.tar.gz","yanked":false,"yanked_reason":null}],"7.4.0":[{"comment_text":"","digests":{"blake2b_256":"d4df7db9825166cb13fa010504754415c45c37a94a3200f0127619fad0a56697","md5":"a86ec13b4028f2c4142e7c01e61e3fb0","sha256":"81f827019b3ed4e48610a814a82135a9fa828a7d251c53c9d5444592be776427"},"downloads":-1,"filename":"ppxf-7.4.0.tar.gz","has_sig":false,"md5_digest":"a86ec13b4028f2c4142e7c01e61e3fb0","packagetype":"sdist","python_version":"source","requires_python":null,"size":3289090,"upload_time":"2020-08-20T20:55:08","upload_time_iso_8601":"2020-08-20T20:55:08.813143Z","url":"https://files.pythonhosted.org/packages/d4/df/7db9825166cb13fa010504754415c45c37a94a3200f0127619fad0a56697/ppxf-7.4.0.tar.gz","yanked":false,"yanked_reason":null}],"7.4.1":[{"comment_text":"","digests":{"blake2b_256":"f715eefc58701435539ec7a8dfb8c92f83803940dbd6df1e1fcc84a39d7725b1","md5":"994a80f1d2299833ba71489e1106ab7b","sha256":"c7a146038f93dbccb09b887a7498e472ec10d09126b9bbf60c9dd4b23cbe7e52"},"downloads":-1,"filename":"ppxf-7.4.1.tar.gz","has_sig":false,"md5_digest":"994a80f1d2299833ba71489e1106ab7b","packagetype":"sdist","python_version":"source","requires_python":null,"size":3292016,"upload_time":"2020-09-11T11:04:48","upload_time_iso_8601":"2020-09-11T11:04:48.322376Z","url":"https://files.pythonhosted.org/packages/f7/15/eefc58701435539ec7a8dfb8c92f83803940dbd6df1e1fcc84a39d7725b1/ppxf-7.4.1.tar.gz","yanked":false,"yanked_reason":null}],"7.4.2":[{"comment_text":"","digests":{"blake2b_256":"b4e7f00b67eb9b0b37956e4e5fa3b27708939a68db5ad01f21aeb7e1501ae5b8","md5":"ecf9d4e4a9934d0191e9d1be9749c038","sha256":"626c9b066b2e98b66dd819193292b2e08a664114984b54f7ffbf1cb0c253a5af"},"downloads":-1,"filename":"ppxf-7.4.2.tar.gz","has_sig":false,"md5_digest":"ecf9d4e4a9934d0191e9d1be9749c038","packagetype":"sdist","python_version":"source","requires_python":null,"size":3292569,"upload_time":"2020-10-09T14:57:53","upload_time_iso_8601":"2020-10-09T14:57:53.172689Z","url":"https://files.pythonhosted.org/packages/b4/e7/f00b67eb9b0b37956e4e5fa3b27708939a68db5ad01f21aeb7e1501ae5b8/ppxf-7.4.2.tar.gz","yanked":false,"yanked_reason":null}],"7.4.3":[{"comment_text":"","digests":{"blake2b_256":"f512defbca553f90296fbb298cb3bdc88f7cb097e2d88646d1abb0e72603249c","md5":"959d2529a5c0cd21b44296c8f1d4fad4","sha256":"00ee4d2cfd3606b8d938ab59622424504223e596fc6c1f79dd6074da77cf3db4"},"downloads":-1,"filename":"ppxf-7.4.3.tar.gz","has_sig":false,"md5_digest":"959d2529a5c0cd21b44296c8f1d4fad4","packagetype":"sdist","python_version":"source","requires_python":null,"size":3294397,"upload_time":"2020-12-21T12:59:52","upload_time_iso_8601":"2020-12-21T12:59:52.110344Z","url":"https://files.pythonhosted.org/packages/f5/12/defbca553f90296fbb298cb3bdc88f7cb097e2d88646d1abb0e72603249c/ppxf-7.4.3.tar.gz","yanked":false,"yanked_reason":null}],"7.4.4":[{"comment_text":"","digests":{"blake2b_256":"884fc1112e44f802b571de62e29153a78bace577e668ac665b3bda1ad8bd510b","md5":"e839e1343e39504da8ea72d4ea3cbe6f","sha256":"ac6fce8aa1fa012cad9732f8bcb95d6ac6ca9ee9e96e3564b12d3a84f8733d22"},"downloads":-1,"filename":"ppxf-7.4.4.tar.gz","has_sig":false,"md5_digest":"e839e1343e39504da8ea72d4ea3cbe6f","packagetype":"sdist","python_version":"source","requires_python":null,"size":3295163,"upload_time":"2021-02-10T19:02:15","upload_time_iso_8601":"2021-02-10T19:02:15.137818Z","url":"https://files.pythonhosted.org/packages/88/4f/c1112e44f802b571de62e29153a78bace577e668ac665b3bda1ad8bd510b/ppxf-7.4.4.tar.gz","yanked":false,"yanked_reason":null}],"7.4.5":[{"comment_text":"","digests":{"blake2b_256":"6c755d49d9c03ad0f1cfd6bbdf6f3628054bce385d3ac0e6ac7e5122f989793b","md5":"bfd54ae6f3a1e44764d9fbad5dc7ce37","sha256":"3b82b5d4e1e1ff9d57eeec9c07486ccc1a0d3e83b72d9dd1c5642c4681e34858"},"downloads":-1,"filename":"ppxf-7.4.5.tar.gz","has_sig":false,"md5_digest":"bfd54ae6f3a1e44764d9fbad5dc7ce37","packagetype":"sdist","python_version":"source","requires_python":null,"size":3298332,"upload_time":"2021-07-16T19:09:27","upload_time_iso_8601":"2021-07-16T19:09:27.504367Z","url":"https://files.pythonhosted.org/packages/6c/75/5d49d9c03ad0f1cfd6bbdf6f3628054bce385d3ac0e6ac7e5122f989793b/ppxf-7.4.5.tar.gz","yanked":false,"yanked_reason":null}],"8.0.2":[{"comment_text":"","digests":{"blake2b_256":"254b10979db380eb09b7b07b83149b3f191ee641aed2e7bd986093c252ac12dc","md5":"efc392a1b5bb46c64c3f629530452e73","sha256":"178bffceab74ca6c05d9a8d1a437e1602b059686bb8c088182863af645bfa9fd"},"downloads":-1,"filename":"ppxf-8.0.2.tar.gz","has_sig":false,"md5_digest":"efc392a1b5bb46c64c3f629530452e73","packagetype":"sdist","python_version":"source","requires_python":null,"size":24544637,"upload_time":"2022-03-28T16:04:07","upload_time_iso_8601":"2022-03-28T16:04:07.658407Z","url":"https://files.pythonhosted.org/packages/25/4b/10979db380eb09b7b07b83149b3f191ee641aed2e7bd986093c252ac12dc/ppxf-8.0.2.tar.gz","yanked":false,"yanked_reason":null}],"8.1.0":[{"comment_text":"","digests":{"blake2b_256":"3bc3a46339f9ebcd3e26258b2372c3fbc3bcb6c48c2ca78269e6064f650ef405","md5":"dee52592e2c40b5658245756e48fcd19","sha256":"b81d01cdae9f3b26b966c8803b7ebb00b28ff35b7ef7900380a395c8f1304909"},"downloads":-1,"filename":"ppxf-8.1.0.tar.gz","has_sig":false,"md5_digest":"dee52592e2c40b5658245756e48fcd19","packagetype":"sdist","python_version":"source","requires_python":null,"size":25332657,"upload_time":"2022-06-10T14:50:23","upload_time_iso_8601":"2022-06-10T14:50:23.952211Z","url":"https://files.pythonhosted.org/packages/3b/c3/a46339f9ebcd3e26258b2372c3fbc3bcb6c48c2ca78269e6064f650ef405/ppxf-8.1.0.tar.gz","yanked":false,"yanked_reason":null}],"8.2.1":[{"comment_text":"","digests":{"blake2b_256":"0b6a2e42180ca99cf44ae6cde52ce3e084f88ef2008cc0f8528bb0eefc54a2d6","md5":"81e8cbf3b6acaf96f575c1523d3defba","sha256":"2e06505722f20c9da494589d5834fe3e41afece148cbe3264cb73720aca97312"},"downloads":-1,"filename":"ppxf-8.2.1.tar.gz","has_sig":false,"md5_digest":"81e8cbf3b6acaf96f575c1523d3defba","packagetype":"sdist","python_version":"source","requires_python":null,"size":25339123,"upload_time":"2022-09-03T12:09:52","upload_time_iso_8601":"2022-09-03T12:09:52.591002Z","url":"https://files.pythonhosted.org/packages/0b/6a/2e42180ca99cf44ae6cde52ce3e084f88ef2008cc0f8528bb0eefc54a2d6/ppxf-8.2.1.tar.gz","yanked":false,"yanked_reason":null}],"8.2.2":[{"comment_text":"","digests":{"blake2b_256":"ebf62271a4d840ae9097cd5532b4f6d56bdee99415f42b5d74b1d2aded0273bc","md5":"50d9f953ff34a174623258b7a9f7285a","sha256":"e66954a37f5a62a893b72c1dd334fa0f572763864982dfa3dfe11434dc7f263c"},"downloads":-1,"filename":"ppxf-8.2.2.tar.gz","has_sig":false,"md5_digest":"50d9f953ff34a174623258b7a9f7285a","packagetype":"sdist","python_version":"source","requires_python":null,"size":25339397,"upload_time":"2022-10-11T13:54:44","upload_time_iso_8601":"2022-10-11T13:54:44.163302Z","url":"https://files.pythonhosted.org/packages/eb/f6/2271a4d840ae9097cd5532b4f6d56bdee99415f42b5d74b1d2aded0273bc/ppxf-8.2.2.tar.gz","yanked":false,"yanked_reason":null}],"8.2.3":[{"comment_text":"","digests":{"blake2b_256":"8fc30d0cd323e135bced19777b0b028a9e86dd0716316d8b75091cd64017cf5b","md5":"12ac74641dd084ade0b209cd04cb1aa9","sha256":"8db682f923ea7657f34de9c332c7c9d50d1b783916861ecdc13bd78d99c52988"},"downloads":-1,"filename":"ppxf-8.2.3.tar.gz","has_sig":false,"md5_digest":"12ac74641dd084ade0b209cd04cb1aa9","packagetype":"sdist","python_version":"source","requires_python":null,"size":25342336,"upload_time":"2023-01-05T09:42:25","upload_time_iso_8601":"2023-01-05T09:42:25.223559Z","url":"https://files.pythonhosted.org/packages/8f/c3/0d0cd323e135bced19777b0b028a9e86dd0716316d8b75091cd64017cf5b/ppxf-8.2.3.tar.gz","yanked":false,"yanked_reason":null}],"8.2.4":[{"comment_text":"","digests":{"blake2b_256":"22cd356fdaabb3b4f5e597ecda0334e58e299a62541c313b82e282f4efacbbdb","md5":"7b29fbcde8059be0ddf4d1954858cb3d","sha256":"091f201f9a655b8a94f3721a544c90873add45dc6bb72495a1c08f151d66ca3b"},"downloads":-1,"filename":"ppxf-8.2.4.tar.gz","has_sig":false,"md5_digest":"7b29fbcde8059be0ddf4d1954858cb3d","packagetype":"sdist","python_version":"source","requires_python":null,"size":25342458,"upload_time":"2023-05-12T12:43:01","upload_time_iso_8601":"2023-05-12T12:43:01.712922Z","url":"https://files.pythonhosted.org/packages/22/cd/356fdaabb3b4f5e597ecda0334e58e299a62541c313b82e282f4efacbbdb/ppxf-8.2.4.tar.gz","yanked":false,"yanked_reason":null}],"8.2.6":[{"comment_text":"","digests":{"blake2b_256":"44984b5c981ceb8be52e8782645796d6bbf24192d11568917720bd57f26df0d5","md5":"9b754704a66c9a745528f905d3411f75","sha256":"e51249d28f12eb41c6dce325a17c7bd554b546e73de930a59f7b29b02f35c8c3"},"downloads":-1,"filename":"ppxf-8.2.6.tar.gz","has_sig":false,"md5_digest":"9b754704a66c9a745528f905d3411f75","packagetype":"sdist","python_version":"source","requires_python":null,"size":25342527,"upload_time":"2023-07-06T08:44:37","upload_time_iso_8601":"2023-07-06T08:44:37.029302Z","url":"https://files.pythonhosted.org/packages/44/98/4b5c981ceb8be52e8782645796d6bbf24192d11568917720bd57f26df0d5/ppxf-8.2.6.tar.gz","yanked":false,"yanked_reason":null}],"9.0.1":[{"comment_text":"","digests":{"blake2b_256":"390ca7f40f5bba2aab00f31274bfffd172ba998f676c2b4065517c11b0f04f9e","md5":"691321a593c15af4fd0b458bad991018","sha256":"a45107e7de90dfa555a677c2360ecdb367f96a4572752353eb1d90b3745480b9"},"downloads":-1,"filename":"ppxf-9.0.1.tar.gz","has_sig":false,"md5_digest":"691321a593c15af4fd0b458bad991018","packagetype":"sdist","python_version":"source","requires_python":null,"size":2097045,"upload_time":"2023-11-12T15:04:28","upload_time_iso_8601":"2023-11-12T15:04:28.164455Z","url":"https://files.pythonhosted.org/packages/39/0c/a7f40f5bba2aab00f31274bfffd172ba998f676c2b4065517c11b0f04f9e/ppxf-9.0.1.tar.gz","yanked":false,"yanked_reason":null}],"9.0.2":[{"comment_text":"","digests":{"blake2b_256":"355eb9c90b0a2b5de53b56633ad5b3db2ea576f804aee7450a74611f9dfebaef","md5":"55f156a55312ec5adad5d0e73c4c0d1e","sha256":"7cee0df28dc6d6183e69f44cfee0f7d6d7e5dfce9bc7e38ec02721768b1b822e"},"downloads":-1,"filename":"ppxf-9.0.2.tar.gz","has_sig":false,"md5_digest":"55f156a55312ec5adad5d0e73c4c0d1e","packagetype":"sdist","python_version":"source","requires_python":null,"size":2096696,"upload_time":"2023-11-30T11:31:09","upload_time_iso_8601":"2023-11-30T11:31:09.362129Z","url":"https://files.pythonhosted.org/packages/35/5e/b9c90b0a2b5de53b56633ad5b3db2ea576f804aee7450a74611f9dfebaef/ppxf-9.0.2.tar.gz","yanked":false,"yanked_reason":null}],"9.1.1":[{"comment_text":"","digests":{"blake2b_256":"a04004cfd45cd9ad4f0c466643558ee83638178e45e73db6da684f9506c71095","md5":"1e3aff26ea0f7fbddbb4a0ad77ab336b","sha256":"fa8318ae44611e14b724227b9c9b50710f5873f4aa5475f82657c7fb3300f557"},"downloads":-1,"filename":"ppxf-9.1.1.tar.gz","has_sig":false,"md5_digest":"1e3aff26ea0f7fbddbb4a0ad77ab336b","packagetype":"sdist","python_version":"source","requires_python":null,"size":2097100,"upload_time":"2024-01-18T19:03:36","upload_time_iso_8601":"2024-01-18T19:03:36.144244Z","url":"https://files.pythonhosted.org/packages/a0/40/04cfd45cd9ad4f0c466643558ee83638178e45e73db6da684f9506c71095/ppxf-9.1.1.tar.gz","yanked":false,"yanked_reason":null}],"9.2.1":[{"comment_text":"","digests":{"blake2b_256":"e7ac63ab5b13f09f358bf303fd9a28fd0248f91c9f9d55b0846cdf75b4b56c59","md5":"83ef183d300f03b8596623096fb9596c","sha256":"2af3132476c392a861b3b07f53f9cd1e524b386e3af596d7dafc9ceebc2993c7"},"downloads":-1,"filename":"ppxf-9.2.1.tar.gz","has_sig":false,"md5_digest":"83ef183d300f03b8596623096fb9596c","packagetype":"sdist","python_version":"source","requires_python":null,"size":2099875,"upload_time":"2024-04-18T17:21:33","upload_time_iso_8601":"2024-04-18T17:21:33.727459Z","url":"https://files.pythonhosted.org/packages/e7/ac/63ab5b13f09f358bf303fd9a28fd0248f91c9f9d55b0846cdf75b4b56c59/ppxf-9.2.1.tar.gz","yanked":false,"yanked_reason":null}],"9.2.2":[{"comment_text":"","digests":{"blake2b_256":"987061f83f59c81e1ff4840c45d80ad790aaf492ac475412c4c92f8e256f6d36","md5":"260f70a67142d4c0b2f5e859d56ce8bd","sha256":"22e97d7ec4c2e2855529f37e53b19e404623998163fb9422cd33febb163dbfab"},"downloads":-1,"filename":"ppxf-9.2.2-py3-none-any.whl","has_sig":false,"md5_digest":"260f70a67142d4c0b2f5e859d56ce8bd","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":2108285,"upload_time":"2024-05-20T10:14:10","upload_time_iso_8601":"2024-05-20T10:14:10.191537Z","url":"https://files.pythonhosted.org/packages/98/70/61f83f59c81e1ff4840c45d80ad790aaf492ac475412c4c92f8e256f6d36/ppxf-9.2.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d53c90ec0d3a1df7f4bdd0d393f4951fb3c5ac6fac42599fcaf8353ef8f49e57","md5":"58d543d3f6279740ac4d90b1426f7be2","sha256":"fe98d29d46e26c0517fd5be1757f469b624622a7c0464bb37685aea1aea1461f"},"downloads":-1,"filename":"ppxf-9.2.2.tar.gz","has_sig":false,"md5_digest":"58d543d3f6279740ac4d90b1426f7be2","packagetype":"sdist","python_version":"source","requires_python":null,"size":2101189,"upload_time":"2024-05-20T09:50:53","upload_time_iso_8601":"2024-05-20T09:50:53.145119Z","url":"https://files.pythonhosted.org/packages/d5/3c/90ec0d3a1df7f4bdd0d393f4951fb3c5ac6fac42599fcaf8353ef8f49e57/ppxf-9.2.2.tar.gz","yanked":false,"yanked_reason":null}],"9.3.0":[{"comment_text":"","digests":{"blake2b_256":"7af4cf45d2c6c079e43dec9924636db92bd9d17c31bdbba13c022bae37b386f7","md5":"5c1cd98e0f905dd78cb13b51a4c397d4","sha256":"30533fd10895603ff8babb9c4683ff3564e57cdede1300cb80b1b2e6391551ed"},"downloads":-1,"filename":"ppxf-9.3.0-py3-none-any.whl","has_sig":false,"md5_digest":"5c1cd98e0f905dd78cb13b51a4c397d4","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":1686022,"upload_time":"2024-06-28T15:31:10","upload_time_iso_8601":"2024-06-28T15:31:10.689075Z","url":"https://files.pythonhosted.org/packages/7a/f4/cf45d2c6c079e43dec9924636db92bd9d17c31bdbba13c022bae37b386f7/ppxf-9.3.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f31f289fff7117ab574a9581f1590e8852388d63382137079ad91d2edfe6ea38","md5":"40b866c7613e6db017c6c0c4bb3cee9e","sha256":"bb7b07e29224655c86a0bb4e65a1774257341691822e002aca7996156994a2cd"},"downloads":-1,"filename":"ppxf-9.3.0.tar.gz","has_sig":false,"md5_digest":"40b866c7613e6db017c6c0c4bb3cee9e","packagetype":"sdist","python_version":"source","requires_python":null,"size":1675299,"upload_time":"2024-06-28T15:31:14","upload_time_iso_8601":"2024-06-28T15:31:14.021701Z","url":"https://files.pythonhosted.org/packages/f3/1f/289fff7117ab574a9581f1590e8852388d63382137079ad91d2edfe6ea38/ppxf-9.3.0.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"7af4cf45d2c6c079e43dec9924636db92bd9d17c31bdbba13c022bae37b386f7","md5":"5c1cd98e0f905dd78cb13b51a4c397d4","sha256":"30533fd10895603ff8babb9c4683ff3564e57cdede1300cb80b1b2e6391551ed"},"downloads":-1,"filename":"ppxf-9.3.0-py3-none-any.whl","has_sig":false,"md5_digest":"5c1cd98e0f905dd78cb13b51a4c397d4","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":1686022,"upload_time":"2024-06-28T15:31:10","upload_time_iso_8601":"2024-06-28T15:31:10.689075Z","url":"https://files.pythonhosted.org/packages/7a/f4/cf45d2c6c079e43dec9924636db92bd9d17c31bdbba13c022bae37b386f7/ppxf-9.3.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f31f289fff7117ab574a9581f1590e8852388d63382137079ad91d2edfe6ea38","md5":"40b866c7613e6db017c6c0c4bb3cee9e","sha256":"bb7b07e29224655c86a0bb4e65a1774257341691822e002aca7996156994a2cd"},"downloads":-1,"filename":"ppxf-9.3.0.tar.gz","has_sig":false,"md5_digest":"40b866c7613e6db017c6c0c4bb3cee9e","packagetype":"sdist","python_version":"source","requires_python":null,"size":1675299,"upload_time":"2024-06-28T15:31:14","upload_time_iso_8601":"2024-06-28T15:31:14.021701Z","url":"https://files.pythonhosted.org/packages/f3/1f/289fff7117ab574a9581f1590e8852388d63382137079ad91d2edfe6ea38/ppxf-9.3.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
