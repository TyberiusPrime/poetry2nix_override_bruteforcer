{"info":{"author":null,"author_email":"Cameron Simpson <cs@cskk.id.au>","bugtrack_url":null,"classifiers":["Development Status :: 4 - Beta","Intended Audience :: Developers","License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Topic :: Software Development :: Libraries :: Python Modules"],"description":"Convenience functions for working with the Cmd module,\nthe BaseCommand class for constructing command line programmes,\nand other command line related stuff.\n\n*Latest release 20240709*:\nBaseCommand: support putting the top level Usage in the class docstring instead of as .USAGE_FORMAT, append full usage to the class docstring in `BaseCommand.__init_subclass__`.\n\n## Class `BaseCommand`\n\nA base class for handling nestable command lines.\n\nThis class provides the basic parse and dispatch mechanisms\nfor command lines.\nTo implement a command line\none instantiates a subclass of `BaseCommand`:\n\n    class MyCommand(BaseCommand):\n        GETOPT_SPEC = 'ab:c'\n        USAGE_FORMAT = r\"\"\"Usage: {cmd} [-a] [-b bvalue] [-c] [--] arguments...\n          -a    Do it all.\n          -b    But using bvalue.\n          -c    The 'c' option!\n        \"\"\"\n        ...\n\nand provides either a `main` method if the command has no subcommands\nor a suite of `cmd_`*subcommand* methods, one per subcommand.\n\nRunning a command is done by:\n\n    MyCommand(argv).run()\n\nModules which implement a command line mode generally look like this:\n\n    ... imports etc ...\n    def main(argv=None, **run_kw):\n        \"\"\" The command line mode.\n        \"\"\"\n        return MyCommand(argv).run(**run_kw)\n    ... other code ...\n    class MyCommand(BaseCommand):\n    ... other code ...\n    if __name__ == '__main__':\n        sys.exit(main(sys.argv))\n\nInstances have a `self.options` attribute on which optional\nmodes are set,\navoiding conflict with the attributes of `self`.\n\nSubclasses with no subcommands\ngenerally just implement a `main(argv)` method.\n\nSubclasses with subcommands\nshould implement a `cmd_`*subcommand*`(argv)` instance method\nfor each subcommand.\nIf a subcommand is itself implemented using `BaseCommand`\nthen it can be a simple attribute:\n\n    cmd_subthing = SubThingCommand\n\nReturning to methods, if there is a paragraph in the method docstring\ncommencing with `Usage:` then that paragraph is incorporated\ninto the main usage message automatically.\nExample:\n\n    def cmd_ls(self, argv):\n        \"\"\" Usage: {cmd} [paths...]\n              Emit a listing for the named paths.\n\n            Further docstring non-usage information here.\n        \"\"\"\n        ... do the \"ls\" subcommand ...\n\nThe subclass is customised by overriding the following methods:\n* `apply_opt(opt,val)`:\n  apply an individual getopt global command line option\n  to `self.options`.\n* `apply_opts(opts)`:\n  apply the `opts` to `self.options`.\n  `opts` is an `(option,value)` sequence\n  as returned by `getopot.getopt`.\n  The default implementation iterates over these and calls `apply_opt`.\n* `run_context()`:\n  a context manager to provide setup or teardown actions\n  to occur before and after the command implementation respectively,\n  such as to open and close a database.\n* `cmd_`*subcmd*`(argv)`:\n  if the command line options are followed by an argument\n  whose value is *subcmd*,\n  then the method `cmd_`*subcmd*`(subcmd_argv)`\n  will be called where `subcmd_argv` contains the command line arguments\n  following *subcmd*.\n* `main(argv)`:\n  if there are no `cmd_`*subcmd*` methods then method `main(argv)`\n  will be called where `argv` contains the command line arguments.\n\nEditorial: why not arparse?\nPrimarily because when incorrectly invoked\nan argparse command line prints the help/usage messgae\nand aborts the whole programme with `SystemExit`.\nBut also, I find the whole argparse `add_argument` thing cumbersome.\n\n*Method `BaseCommand.__init__(self, argv=None, *, cmd=None, options=None, **kw_options)`*:\nInitialise the command line.\nRaises `GetoptError` for unrecognised options.\n\nParameters:\n* `argv`:\n  optional command line arguments\n  including the main command name if `cmd` is not specified.\n  The default is `sys.argv`.\n  The contents of `argv` are copied,\n  permitting desctructive parsing of `argv`.\n* `cmd`:\n  optional keyword specifying the command name for context;\n  if this is not specified it is taken from `argv.pop(0)`.\n* `options`:\n  an optional keyword providing object for command state and context.\n  If not specified a new `self.Options` instance\n  is allocated for use as `options`.\n  The default `Options` class is `BaseCommandOptions`,\n  a dataclass with some prefilled attributes and properties\n  to aid use later.\nOther keyword arguments are applied to `self.options`\nas attributes.\n\nThe `cmd` and `argv` parameters have some fiddly semantics for convenience.\nThere are 3 basic ways to initialise:\n* `BaseCommand()`: `argv` comes from `sys.argv`\n  and the value for `cmd` is derived from `argv[0]`\n* `BaseCommand(argv)`: `argv` is the complete command line\n  including the command name and the value for `cmd` is\n  derived from `argv[0]`\n* `BaseCommand(argv, cmd=foo)`: `argv` is the command\n  arguments _after_ the command name and `cmd` is set to\n  `foo`\n\nThe command line arguments are parsed according to\nthe optional `GETOPT_SPEC` class attribute (default `''`).\nIf `getopt_spec` is not empty\nthen `apply_opts(opts)` is called\nto apply the supplied options to the state\nwhere `opts` is the return from `getopt.getopt(argv,getopt_spec)`.\n\nAfter the option parse,\nif the first command line argument *foo*\nhas a corresponding method `cmd_`*foo*\nthen that argument is removed from the start of `argv`\nand `self.cmd_`*foo*`(argv,options,cmd=`*foo*`)` is called\nand its value returned.\nOtherwise `self.main(argv,options)` is called\nand its value returned.\n\nIf the command implementation requires some setup or teardown\nthen this may be provided by the `run_context`\ncontext manager method,\ncalled with `cmd=`*subcmd* for subcommands\nand with `cmd=None` for `main`.\n\n*`BaseCommand.Options`*\n\n*Method `BaseCommand.apply_opt(self, opt, val)`*:\nHandle an individual global command line option.\n\nThis default implementation raises a `RuntimeError`.\nIt only fires if `getopt` actually gathered arguments\nand would imply that a `GETOPT_SPEC` was supplied\nwithout an `apply_opt` or `apply_opts` method to implement the options.\n\n*Method `BaseCommand.apply_opts(self, opts)`*:\nApply command line options.\n\nSubclasses can override this\nbut it is usually easier to override `apply_opt(opt,val)`.\n\n*Method `BaseCommand.apply_preargv(self, argv)`*:\nDo any preparsing of `argv` before the subcommand/main-args.\nReturn the remaining arguments.\n\nThis default implementation applies the default options\nsupported by `self.options` (an instance of `self.Options`\nclass).\n\n*Method `BaseCommand.cmd_help(self, argv)`*:\nUsage: {cmd} [-l] [subcommand-names...]\nPrint help for subcommands.\nThis outputs the full help for the named subcommands,\nor the short help for all subcommands if no names are specified.\n-l  Long help even if no subcommand-names provided.\n\n*Method `BaseCommand.cmd_shell(*a, upd: Optional[cs.upd.Upd] = <function uses_upd.<locals>.<lambda> at 0x10f792ac0>, **kw)`*:\nUsage: {cmd}\nRun a command prompt via cmd.Cmd using this command's subcommands.\n\n*Method `BaseCommand.cmdloop(self, intro=None)`*:\nUse `cmd.Cmd` to run a command loop which calls the `cmd_`* methods.\n\n*Method `BaseCommand.getopt_error_handler(cmd, options, e, usage, subcmd=None)`*:\nThe `getopt_error_handler` method\nis used to control the handling of `GetoptError`s raised\nduring the command line parse\nor during the `main` or `cmd_`*subcmd*` calls.\n\nThis default handler issues a warning containing the exception text,\nprints the usage message to standard error,\nand returns `True` to indicate that the error has been handled.\n\nThe handler is called with these parameters:\n* `cmd`: the command name\n* `options`: the `options` object\n* `e`: the `GetoptError` exception\n* `usage`: the command usage or `None` if this was not provided\n* `subcmd`: optional subcommand name;\n  if not `None`, is the name of the subcommand which caused the error\n\nIt returns a true value if the exception is considered handled,\nin which case the main `run` method returns 2.\nIt returns a false value if the exception is considered unhandled,\nin which case the main `run` method reraises the `GetoptError`.\n\nTo let the exceptions out unhandled\nthis can be overridden with a method which just returns `False`.\n\nOtherwise,\nthe handler may perform any suitable action\nand return `True` to contain the exception\nor `False` to cause the exception to be reraised.\n\n*Method `BaseCommand.handle_signal(self, sig, frame, *, runstate: Optional[cs.resources.RunState] = <function uses_runstate.<locals>.<lambda> at 0x10f792340>)`*:\nThe default signal handler, which cancels the default `RunState`.\n\n*Method `BaseCommand.has_subcommands(self)`*:\nTest whether the class defines additional subcommands.\n\n*Method `BaseCommand.method_cmdname(method_name: str)`*:\nThe `cmd` value from a method name.\n\n*Method `BaseCommand.poparg(argv: List[str], *a, unpop_on_error=False)`*:\nPop the leading argument off `argv` and parse it.\nReturn the parsed argument.\nRaises `getopt.GetoptError` on a missing or invalid argument.\n\nThis is expected to be used inside a `main` or `cmd_*`\ncommand handler method or inside `apply_preargv`.\n\nYou can just use:\n\n    value = argv.pop(0)\n\nbut this method provides conversion and valuation\nand a richer failure mode.\n\nParameters:\n* `argv`: the argument list, which is modified in place with `argv.pop(0)`\n* the argument list `argv` may be followed by some help text\n  and/or an argument parser function.\n* `validate`: an optional function to validate the parsed value;\n  this should return a true value if valid,\n  or return a false value or raise a `ValueError` if invalid\n* `unvalidated_message`: an optional message after `validate`\n  for values failing the validation\n* `unpop_on_error`: optional keyword parameter, default `False`;\n  if true then push the argument back onto the front of `argv`\n  if it fails to parse; `GetoptError` is still raised\n\nTypical use inside a `main` or `cmd_*` method might look like:\n\n    self.options.word = self.poparg(argv, int, \"a count value\")\n    self.options.word = self.poparg(\n        argv, int, \"a count value\",\n       lambda count: count > 0, \"count should be positive\")\n\nBecause it raises `GetoptError` on a bad argument\nthe normal usage message failure mode follows automatically.\n\nDemonstration:\n\n    >>> argv = ['word', '3', 'nine', '4']\n    >>> BaseCommand.poparg(argv, \"word to process\")\n    'word'\n    >>> BaseCommand.poparg(argv, int, \"count value\")\n    3\n    >>> BaseCommand.poparg(argv, float, \"length\")\n    Traceback (most recent call last):\n      ...\n    getopt.GetoptError: length 'nine': float('nine'): could not convert string to float: 'nine'\n    >>> BaseCommand.poparg(argv, float, \"width\", lambda width: width > 5)\n    Traceback (most recent call last):\n      ...\n    getopt.GetoptError: width '4': invalid value\n    >>> BaseCommand.poparg(argv, float, \"length\")\n    Traceback (most recent call last):\n      ...\n    getopt.GetoptError: length: missing argument\n    >>> argv = ['-5', 'zz']\n    >>> BaseCommand.poparg(argv, float, \"size\", lambda f: f>0, \"size should be >0\")\n    Traceback (most recent call last):\n      ...\n    getopt.GetoptError: size '-5': size should be >0\n    >>> argv  # -5 was still consumed\n    ['zz']\n    >>> BaseCommand.poparg(argv, float, \"size2\", unpop_on_error=True)\n    Traceback (most recent call last):\n      ...\n    getopt.GetoptError: size2 'zz': float('zz'): could not convert string to float: 'zz'\n    >>> argv  # zz was pushed back\n    ['zz']\n\n*Method `BaseCommand.popopts(argv, attrfor=None, **opt_specs)`*:\nParse option switches from `argv`, a list of command line strings\nwith leading option switches.\nModify `argv` in place and return a dict mapping switch names to values.\n\nThe optional positional argument `attrfor`\nmay supply an object whose attributes may be set by the options,\nfor example:\n\n    def cmd_foo(self, argv):\n        self.popopts(argv, self.options, a='all', j_=('jobs', int))\n        ... use self.options.jobs etc ...\n\nThe expected options are specified by the keyword parameters\nin `opt_specs`:\n* options not starting with a letter may be preceeded by an underscore\n  to allow use in the parameter list, for example `_1='once'`\n  for a `-1` option setting the `once` option name\n* a single letter name specifies a short option\n  and a multiletter name specifies a long option\n* options requiring an argument have a trailing underscore\n* options not requiring an argument normally imply a value\n  of `True`; if their synonym commences with a dash they will\n  imply a value of `False`, for example `n='dry_run',y='-dry_run'`\n\nThe `BaseCommandOptions` class provides a `popopts` method\nwhich is a shim for this method with `attrfor=self` i.e.\nthe options object.\nSo common use in a command method usually looks like this:\n\n    class SomeCommand(BaseCommand):\n\n        def cmd_foo(self, argv):\n            options = self.options\n            # accept a -j or --jobs options\n            options.popopts(argv, jobs=1, j='jobs')\n            print(\"jobs =\", options.jobs)\n\nThe `self.options` object is preprovided as an instance of\nthe `self.Options` class, which is `BaseCommandOptions` by\ndefault. This presupplies support for some basic options\nlike `-v` for \"verbose\" and so forth, and a subcommand\nneed not describe these in a call to `self.options.popopts()`.\n\nExample:\n\n    >>> import os.path\n    >>> from typing import Optional\n    >>> @dataclass\n    ... class DemoOptions(BaseCommandOptions):\n    ...   all: bool = False\n    ...   jobs: int = 1\n    ...   number: int = 0\n    ...   once: bool = False\n    ...   path: Optional[str] = None\n    ...   trace_exec: bool = False\n    ...\n    >>> options = DemoOptions()\n    >>> argv = ['-1', '-v', '-y', '-j4', '--path=/foo', 'bah', '-x']\n    >>> opt_dict = options.popopts(\n    ...   argv,\n    ...   _1='once',\n    ...   a='all',\n    ...   j_=('jobs',int),\n    ...   x='-trace_exec',\n    ...   y='-dry_run',\n    ...   dry_run=None,\n    ...   path_=(str, os.path.isabs, 'not an absolute path'),\n    ...   verbose=None,\n    ... )\n    >>> opt_dict\n    {'once': True, 'verbose': True, 'dry_run': False, 'jobs': 4, 'path': '/foo'}\n    >>> options # doctest: +ELLIPSIS\n    DemoOptions(cmd=None, dry_run=False, force=False, quiet=False, runstate_signals=(...), verbose=True, all=False, jobs=4, number=0, once=True, path='/foo', trace_exec=False)\n\n*Method `BaseCommand.repl(self, *argv, banner=None, local=None)`*:\nRun an interactive Python prompt with some predefined local names.\nAka REPL (Read Evaluate Print Loop).\n\nParameters:\n* `argv`: any notional command line arguments\n* `banner`: optional banner string\n* `local`: optional local names mapping\n\nThe default `local` mapping is a `dict` containing:\n* `argv`: from `argv`\n* `options`: from `self.options`\n* `self`: from `self`\n* the attributes of `options`\n* the attributes of `self`\n\nThis is not presented automatically as a subcommand, but\ncommands wishing such a command should provide something\nlike this:\n\n    def cmd_repl(self, argv):\n        \"\"\" Usage: {cmd}\n              Run an interactive Python prompt with some predefined local names.\n        \"\"\"\n        return self.repl(*argv)\n\n*Method `BaseCommand.run(self, **kw_options)`*:\nRun a command.\nReturns the exit status of the command.\nMay raise `GetoptError` from subcommands.\n\nAny keyword arguments are used to override `self.options` attributes\nfor the duration of the run,\nfor example to presupply a shared `Upd` from an outer context.\n\nIf the first command line argument *foo*\nhas a corresponding method `cmd_`*foo*\nthen that argument is removed from the start of `argv`\nand `self.cmd_`*foo*`(cmd=`*foo*`)` is called\nand its value returned.\nOtherwise `self.main(argv)` is called\nand its value returned.\n\nIf the command implementation requires some setup or teardown\nthen this may be provided by the `run_context()`\ncontext manager method.\n\n*Method `BaseCommand.run_context(*a, upd: Optional[cs.upd.Upd] = <function uses_upd.<locals>.<lambda> at 0x10f792480>, **kw)`*:\nThe context manager which surrounds `main` or `cmd_`*subcmd*.\n\nThis default does several things, and subclasses should\noverride it like this:\n\n    @contextmanager\n    def run_context(self):\n      with super().run_context():\n        try:\n          ... subclass context setup ...\n            yield\n        finally:\n          ... any unconditional cleanup ...\n\n*Method `BaseCommand.subcommand_usage_text(self, subcmd, usage_format_mapping=None, short=False)`*:\nReturn the usage text for a subcommand.\n\nParameters:\n* `subcmd`: the subcommand name\n* `short`: just include the first line of the usage message,\n  intented for when there are many subcommands\n\n*`BaseCommand.subcommands`*\n\n*Method `BaseCommand.usage_text(self, *, cmd=None, format_mapping=None, short=False, show_subcmds=None)`*:\nCompute the \"Usage:\" message for this class\nfrom the top level `USAGE_FORMAT`\nand the `'Usage:'`-containing docstrings of its `cmd_*` methods.\n\nParameters:\n* `cmd`: optional command name, default derived from the class name\n* `format_mapping`: an optional format mapping for filling\n  in format strings in the usage text\n* `short`: default `False`; if true then just provide the opening sentence\n* `show_subcmds`: constrain the usage to particular subcommands\n  named in `show_subcmds`; this is used to produce a shorter\n  usage for subcommand usage failures\n\n## Class `BaseCommandCmd(cmd.Cmd)`\n\nA `cmd.Cmd` subclass used to provide interactive use of a\ncommand's subcommands.\n\nThe `BaseCommand.cmdloop()` class method instantiates an\ninstance of this and calls its `.cmdloop()` method\ni.e. `cmd.Cmd.cmdloop`.\n\n## Class `BaseCommandOptions(cs.threads.HasThreadState)`\n\nA base class for the `BaseCommand` `options` object.\n\nThis is the default class for the `self.options` object\navailable during `BaseCommand.run()`,\nand available as the `BaseCommand.Options` attribute.\n\nAny keyword arguments are applied as field updates to the instance.\n\nIt comes prefilled with:\n* `.dry_run=False`\n* `.force=False`\n* `.quiet=False`\n* `.verbose=False`\nand a `.doit` property which is the inverse of `.dry_run`.\n\nIt is recommended that if ``BaseCommand` subclasses use a\ndifferent type for their `Options` that it should be a\nsubclass of `BaseCommandOptions`.\nSince `BaseCommandOptions` is a data class, this typically looks like:\n\n    @dataclass\n    class Options(BaseCommand.Options):\n        ... optional extra fields etc ...\n\n*Method `BaseCommandOptions.__call__(self, **updates)`*:\nCalling the options object returns a context manager whose\nvalue is a shallow copy of the options with any `suboptions` applied.\n\nExample showing the semantics:\n\n    >>> from cs.cmdutils import BaseCommandOptions\n    >>> @dataclass\n    ... class DemoOptions(BaseCommandOptions):\n    ...   x: int = 0\n    ...\n    >>> options = DemoOptions(x=1)\n    >>> assert options.x == 1\n    >>> assert not options.verbose\n    >>> with options(verbose=True) as subopts:\n    ...     assert options is not subopts\n    ...     assert options.x == 1\n    ...     assert not options.verbose\n    ...     assert subopts.x == 1\n    ...     assert subopts.verbose\n    ...\n    >>> assert options.x == 1\n    >>> assert not options.verbose\n\n*Method `BaseCommandOptions.as_dict(self)`*:\nReturn the optionas as a `dict`.\n\n*Method `BaseCommandOptions.copy(self, **updates)`*:\nReturn a new instance of `BaseCommandOptions` (well, `type(self)`)\nwhich is a shallow copy of the public attributes from `self.__dict__`.\n\nAny keyword arguments are applied as attribute updates to the copy.\n\n*Property `BaseCommandOptions.doit`*:\nI usually use a `doit` flag,\nthe inverse of `dry_run`.\n\n*`BaseCommandOptions.perthread_state`*\n\n*Method `BaseCommandOptions.popopts(self, argv, **opt_specs)`*:\nConvenience method to appply `BaseCommand.popopts` to the options (`self`).\n\nExample for a `BaseCommand` `cmd_foo` method:\n\n    def cmd_foo(self, argv):\n        self.options.popopts(\n            c_='config',\n            l='long',\n            x='trace',\n        )\n        if self.options.dry_run:\n            print(\"dry run!\")\n\nThe class attribute `COMMON_OPT_SPECS` is a mapping of\noptions which are always supported. `BaseCommandOptions`\nhas: `COMMON_OPT_SPECS={'n': 'dry_run', 'q': 'quiet', 'v': 'verbose'}`.\n\nA subclass with more common options might extend this like so,\nfrom `cs.hashindex`:\n\n    COMMON_OPT_SPECS = dict(\n        e='ssh_exe',\n        h_='hashname',\n        H_='hashindex_exe',\n        **BaseCommand.Options.COMMON_OPT_SPECS,\n    )\n\n*Method `BaseCommandOptions.update(self, **updates)`*:\nModify the options in place with the mapping `updates`.\nIt would be more normal to call the options in a `with` statement\nas shown for `__call__`.\n\n## Function `docmd(dofunc)`\n\nDecorator for `cmd.Cmd` subclass methods\nto supply some basic quality of service.\n\nThis decorator:\n- wraps the function call in a `cs.pfx.Pfx` for context\n- intercepts `getopt.GetoptError`s, issues a `warning`\n  and runs `self.do_help` with the method name,\n  then returns `None`\n- intercepts other `Exception`s,\n  issues an `exception` log message\n  and returns `None`\n\nThe intended use is to decorate `cmd.Cmd` `do_`* methods:\n\n    from cmd import Cmd\n    from cs.cmdutils import docmd\n    ...\n    class MyCmd(Cmd):\n        @docmd\n        def do_something(...):\n            ... do something ...\n\n## Function `extract_usage_from_doc(doc: str | None, usage_marker='Usage:') -> Tuple[str, str]`\n\nExtract a `\"Usage:\"`paragraph from a docstring\nand return the unindented usage and the docstring with that paragraph elided.\n\nIf the usage paragraph is not present, return `(None,doc)`.\n\n## Class `SubCommand`\n\nAn implementation for a subcommand.\n\n*Method `SubCommand.__call__(self, argv: List[str])`*:\nRun the subcommand.\n\nParameters:\n* `argv`: the command line arguments after the subcommand name\n\n*Method `SubCommand.default_usage(self)`*:\nReturn `'{cmd} [options...]'` or `'{cmd} subcommand [options...]'`.\n\n*Method `SubCommand.get_subcmds(self)`*:\nReturn the names of `self.method`'s subcommands in lexical order.\n\n*Method `SubCommand.get_subcommands(self)`*:\nReturn `self.method`'s mapping of subcommand name to `SubCommand`.\n\n*Method `SubCommand.get_usage_format(self) -> str`*:\nReturn the usage format string for this subcommand.\n*Note*: no leading \"Usage:\" prefix.\n\nThis first tries `self.method.USAGE_FORMAT`, falling back\nto deriving it from `obj_docstring(self.method)`.\nUsually a subcommand which is another `BaseCommand` instance\nwill have a `.USAGE_FORMAT` attribute and a subcommand which\nis a method will derive the usage from its docstring.\n\nWhen deriving from the docstring we look for a paragraph\ncommencing with the string `Usage:` and otherwise fall back\nto its first parapgraph.\n\n*Method `SubCommand.get_usage_keywords(self)`*:\nReturn a mapping to be used when formatting the usage format string.\n\n*Property `SubCommand.instance`*:\nAn instance of the class for `self.method`.\n\n*Method `SubCommand.usage_text(self, *, short: bool, recurse: bool = False, show_subcmds: Union[bool, str, List[str], NoneType] = None, usage_mapping: Optional[Mapping] = None) -> str`*:\nReturn the filled out usage text for this subcommand.\n\n## Function `uses_cmd_options(func, cls=<class 'cs.cmdutils.BaseCommandOptions'>, options_param_name='options')`\n\nA decorator to provide a default parameter containing the\nprevailing `BaseCommandOptions` instance as the `options` keyword\nargument, using the `cs.deco.default_params` decorator factory.\n\nThis allows functions to utilitse global options set by a\ncommand such as `options.dry_run` or `options.verbose` without\nthe tedious plumbing through the entire call stack.\n\nParameters:\n* `cls`: the `BaseCommandOptions` or `BaseCommand` class,\n  default `BaseCommandOptions`. If a `BaseCommand` subclass is\n  provided its `cls.Options` class is used.\n* `options_param_name`: the parameter name to provide, default `options`\n\nExamples:\n\n    @uses_cmd_options\n    def f(x,*,options):\n        \"\"\" Run directly from the prevailing options. \"\"\"\n        if options.verbose:\n            print(\"doing f with x =\", x)\n        ....\n\n    @uses_cmd_options\n    def f(x,*,verbose=None,options):\n        \"\"\" Get defaults from the prevailing options. \"\"\"\n        if verbose is None:\n            verbose = options.verbose\n        if verbose:\n            print(\"doing f with x =\", x)\n        ....\n\n# Release Log\n\n\n\n*Release 20240709*:\nBaseCommand: support putting the top level Usage in the class docstring instead of as .USAGE_FORMAT, append full usage to the class docstring in `BaseCommand.__init_subclass__`.\n\n*Release 20240630*:\n* BaseCommand: make SUBCOMMAND_ARGV_DEFAULT be 'shell' for an interactive prompt, still a little unsure how sensible this is, aiming at the very cool submode stuff from the Cisco switch config command line.\n* BaseCommandOptions: new as_dict() method.\n* New SubCommand.usage_text() to compose the full usage text for this SubCommand.\n* Many small improvements and internal refactors.\n\n*Release 20240519*:\nBaseCommand.run_context: attach the runstate to the options.\n\n*Release 20240422*:\n* BaseCommandOptions.popopts: return the dict from BaseCommand.popopts().\n* BaseCommand.apply_preargv: apply the default options supported by self.options.\n* BaseCommandOptions.update(mapping) method, useful for dropping subcommand-specific defaults onto the options ahead of the local popopts() call.\n\n*Release 20240412*:\n* BaseCommand.run_context: do not store .upd and .runstate on the options (it confuses options in subcommands and we have @uses_runstate and @uses_upd forthis anyway these days).\n* BaseCommand.run_context: catch SIGQUIT, present the default handler as BaseCommand.handle_signal.\n\n*Release 20240316*:\n* New @uses_cmd_options decorator to provide an \"options\" parameter being the prevailing BaseCommandOptions instance.\n* BaseCommandOptions.popopts: get common options from BaseCommandOptions.COMMON_OPT_SPECS.\n\n*Release 20240211*:\n* Include the first sentence of the subcommand description in the short help.\n* BaseCommandOptions: move the runstate_signals into this directly.\n* BaseCommand: move the run() options stuff into run_context() and have it work on a copy of the original options.\n* BaseCommandCmd: implement get_names(), provide docstrings for the do_* attributes, thus help.\n* BaseCommand.run_context: make runstate and upd keyword only parameters.\n\n*Release 20240201*:\n* BaseCommand.run: catch CancellationError and return 1.\n* BaseCommandCmd.__getattr__: recognise EOF, exit and quit to terminate the cmdloop.\n\n*Release 20231129*:\nBaseCommandOptions: define a runstate field.\n\n*Release 20230703*:\nSmall internal changes.\n\n*Release 20230612*:\n* BaseCommand.cmdloop: fix intro parameter.\n* Other small fixes.\n\n*Release 20230407*:\n* BaseCommand: use @uses_runstate when preparing the command, store as self.options.runstate.\n* Make BaseCommandOptions a data class.\n* Drop any pretence at python 2 support, we're long past that.\n* BaseCommand: new cmdloop method to run a cmd.Cmd instance to run subcommand interactively.\n* BaseCommand: rename shell to repl, add cmd_shell to call cmdloop().\n* Drop BaseCommand.apply_defaults in favour of the Options dataclass.\n* BaseCommand: do setup_logging before initiating the Options instance.\n\n*Release 20230212*:\n* BaseCommand.run_context: update RunState support.\n* BaseCommand.run_context: always be having an self.options.upd.\n\n*Release 20230211*:\nBaseCommand: new shell() method to present an interactive Python prompt for use by subclasses cmd_shell method if desired.\n\n*Release 20221228*:\nMove a lot of the context logic from BaseCommand.run to BaseCommand.run_context, which now must be correctly overridden in subclasses.\n\n*Release 20220918*:\n* BaseCommand.run_context: expand default signals to include SIGHUP, expose as BaseCommand.DEFAULT_SIGNALS.\n* BaseCommand.run: pass in the subclass handle_signal method if present.\n\n*Release 20220626*:\n* BaseCommand.poparg: fix positional argument handling.\n* BaseCommand.poparg: new unpop_on_error=False parameter to support pushing a bad argument back onto the front of the argument list.\n\n*Release 20220606*:\nBaseCommand.run: remove the Upd bodge, too annoying, now fixed in cs.upd I believe.\n\n*Release 20220605*:\n* BaseCommand: new popopts(argv,...) compact getopt wrapper.\n* BaseCommand: new poparg(argv,...) compact validating argument consumer.\n* BaseCommand: drop run_argv, provided no utility.\n* BaseCommand.run: get the RunState signal list from self.options.runstate_signals.\n* BaseCommand.apply_opts: support multiple individual options raising GetoptError, as I hate commands which abort at the first bad option.\n* Assorted other small things.\n\n*Release 20220429*:\n* BaseCommand: fold dots in argv[0] into underscores, supports subcommands like \"setup.py\".\n* BaseCommand: new popargv(argv[,help_text[,parse[,validate[,unvalidated_message]]]]) helper class method.\n* BaseCommand: accept dashed-form of the underscored_form subcommand name.\n* BaseCommand: new self.options.runstate_signals=SIGINT,SIGTERM specifying singals to catch-and-cancel, shuffle run() context managers.\n\n*Release 20220318*:\nBaseCommand.__init__: handle main() method in the New Scheme.\n\n*Release 20220315*:\n_BaseSubCommand.__init__: hook in the class USAGE_KEYWORDS for methods.\n\n*Release 20220311*:\nBaseCommand: big refactor of subcommand internals and make the \"cmd_foo=FooCommand\" implementation work properly.\n\n*Release 20211208*:\nBaseCommand: better handle an unknown subcommand.\n\n*Release 20210927*:\n* Usage: show only the per subcommand usage for in-subcommand GetoptError.\n* Usage: show terse usage when the subcommand cannot be recognised.\n* Usage: support bare -h, -help, --help.\n\n*Release 20210913*:\nNew BaseCommand.apply_preargv method to gather special arguments before subcommands.\n\n*Release 20210906*:\n* BaseCommand.cmd_help: bugfix obsolete parameter list.\n* BaseCommand.SUBCOMMAND_ARGV_DEFAULT: support a single str value, turn into list.\n\n*Release 20210809*:\nBugfix BaseCommand.cmd_help for modern API.\n\n*Release 20210731*:\n* BaseCommand.run: apply optional keyword arguments to self.options during the run.\n* Look for self.SUBCOMMAND_ARGV_DEFAULT if no subcommand is supplied.\n* Bugfix case for \"main\" method and no \"cmd_*\" methods.\n* Bugfix BaseCommand.cmd_help.\n\n*Release 20210420*:\n* BaseCommand.getopt_error_handler: replace error print() with warning().\n* Docstring improvements.\n\n*Release 20210407.1*:\nBaseCommand: bugfix for __init_subclass__ docstring update.\n\n*Release 20210407*:\n* BaseCommand.__init_subclass__: behave sanely if the subclass has no initial __doc__.\n* BaseCommand: new .run_argv convenience method, obviates the \"def main\" boilerplate.\n\n*Release 20210404*:\nBaseCommand subclasses: automatically add the main usage message to the subclass docstring.\n\n*Release 20210306*:\n* BREAKING CHANGE: rework BaseCommand as a more normal class instantiated with argv and with most methods being instance methods, getting the former `options` parameter from self.options.\n* BaseCommand: provide default `apply_opt` and `apply_opts` methods; subclasses will generally just override the former.\n\n*Release 20210123*:\nBaseCommand: propagate the format mapping (cmd, USAGE_KEYWORDS) to the subusage generation.\n\n*Release 20201102*:\n* BaseCommand.cmd_help: supply usage only for \"all commands\", full docstring for specified commands.\n* BaseCommand: honour presupplied options.log_level.\n* BaseCommand.usage_text: handle missing USAGE_FORMAT better.\n* BaseCommand.run: provide options.upd.\n* BaseCommand subclasses may now override BaseCommand.OPTIONS_CLASS (default SimpleNamespace) in order to provide convenience methods on the options.\n* BaseCommand.run: separate variable for subcmd with dash translated to underscore to match method names.\n* Minor fixes.\n\n*Release 20200615*:\nBaseCommand.usage_text: do not mention the \"help\" command if it is the only subcommand (it won't be available if there are no other subcommands).\n\n*Release 20200521.1*:\nFix DISTINFO.install_requires.\n\n*Release 20200521*:\n* BaseCommand.run: support using BaseCommand subclasses as cmd_* names to make it easy to nest BaseCommands.\n* BaseCommand: new hack_postopts_argv method called after parsing the main command line options, for inferring subcommands or the like.\n* BaseCommand: extract \"Usage:\" paragraphs from subcommand method docstrings to build the main usage message.\n* BaseCommand: new cmd_help default command.\n* Assorted bugfixes and small improvements.\n\n*Release 20200318*:\n* BaseCommand.run: make argv optional, get additional usage keywords from self.USAGE_KEYWORDS.\n* @BaseCommand.add_usage_to_docstring: honour cls.USAGE_KEYWORDS.\n* BaseCommand: do not require GETOPT_SPEC for commands with no defined options.\n* BaseCommand.run: call cs.logutils.setup_logging.\n\n*Release 20200229*:\nImprove subcommand selection logic, replace StackableValues with stackattrs, drop `cmd` from arguments passed to main/cmd_* methods (present in `options`).\n\n*Release 20200210*:\n* New BaseCommand.add_usage_to_docstring class method to be called after class setup, to append the usage message to the class docstring.\n* BaseCommand.run: remove spurious Pfx(cmd), as logutils does this for us already.\n\n*Release 20190729*:\nBaseCommand: support for a USAGE_FORMAT usage message format string and a getopt_error_handler method.\n\n*Release 20190619.1*:\nAnother niggling docstring formatting fix.\n\n*Release 20190619*:\nMinor documentation updates.\n\n*Release 20190617.2*:\nLint.\n\n*Release 20190617.1*:\nInitial release with @docmd decorator and alpha quality BaseCommand command line assistance class.\n","description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"python2, python3","license":"GNU General Public License v3 or later (GPLv3+)","maintainer":null,"maintainer_email":null,"name":"cs.cmdutils","package_url":"https://pypi.org/project/cs.cmdutils/","platform":null,"project_url":"https://pypi.org/project/cs.cmdutils/","project_urls":{"MonoRepo Commits":"https://bitbucket.org/cameron_simpson/css/commits/branch/main","Monorepo Git Mirror":"https://github.com/cameron-simpson/css","Monorepo Hg/Mercurial Mirror":"https://hg.sr.ht/~cameron-simpson/css","Source":"https://github.com/cameron-simpson/css/blob/main/lib/python/cs/cmdutils.py"},"provides_extra":null,"release_url":"https://pypi.org/project/cs.cmdutils/20240709/","requires_dist":["cs.context>=20240630","cs.deco>=20240709","cs.lex>=20240630","cs.logutils>=20240630","cs.pfx>=20240630","cs.py.doc>=20240709","cs.resources>=20240630","cs.result>=20240630","cs.threads>=20240630","cs.typingutils>=20230331","cs.upd>=20240630","typeguard"],"requires_python":null,"summary":"Convenience functions for working with the Cmd module, the BaseCommand class for constructing command line programmes, and other command line related stuff.","version":"20240709","yanked":false,"yanked_reason":null},"last_serial":24042568,"releases":{"20190617.2":[{"comment_text":"","digests":{"blake2b_256":"0c4b1e1b56b66e296e8d7311fd75136418bf2d5f24b25795764fa3eed01613f8","md5":"c0946fb581c57a2bc78ed3b0e263935f","sha256":"2f3e976c71275591d209284374c8db92b2065870f4d8354994a8fee444fac151"},"downloads":-1,"filename":"cs.cmdutils-20190617.2.tar.gz","has_sig":false,"md5_digest":"c0946fb581c57a2bc78ed3b0e263935f","packagetype":"sdist","python_version":"source","requires_python":null,"size":4820,"upload_time":"2019-06-17T02:23:59","upload_time_iso_8601":"2019-06-17T02:23:59.954766Z","url":"https://files.pythonhosted.org/packages/0c/4b/1e1b56b66e296e8d7311fd75136418bf2d5f24b25795764fa3eed01613f8/cs.cmdutils-20190617.2.tar.gz","yanked":false,"yanked_reason":null}],"20190619":[{"comment_text":"","digests":{"blake2b_256":"05855356f1808dc1baf4e4e9edf64f02ed485926e3a44573313329b281623ced","md5":"26472cb47bf238d811293ad312a392c3","sha256":"5217cfe769a2ed67a3482453587f6e7af9b6206218040e8f8bc05a9c8a52c422"},"downloads":-1,"filename":"cs.cmdutils-20190619.tar.gz","has_sig":false,"md5_digest":"26472cb47bf238d811293ad312a392c3","packagetype":"sdist","python_version":"source","requires_python":null,"size":4875,"upload_time":"2019-06-18T22:35:04","upload_time_iso_8601":"2019-06-18T22:35:04.711457Z","url":"https://files.pythonhosted.org/packages/05/85/5356f1808dc1baf4e4e9edf64f02ed485926e3a44573313329b281623ced/cs.cmdutils-20190619.tar.gz","yanked":false,"yanked_reason":null}],"20190619.1":[{"comment_text":"","digests":{"blake2b_256":"ae84d229a41b5e44c2ca1efb13bb94bd95fb9f756516bc857113abe5937351cc","md5":"bbd044426d5325341c6ce1c7c6aa5f51","sha256":"74acf65e9c2af4392433b044e318245f4cca11fc487bb776c03b34b0cfadf609"},"downloads":-1,"filename":"cs.cmdutils-20190619.1.tar.gz","has_sig":false,"md5_digest":"bbd044426d5325341c6ce1c7c6aa5f51","packagetype":"sdist","python_version":"source","requires_python":null,"size":4879,"upload_time":"2019-06-18T22:40:20","upload_time_iso_8601":"2019-06-18T22:40:20.400512Z","url":"https://files.pythonhosted.org/packages/ae/84/d229a41b5e44c2ca1efb13bb94bd95fb9f756516bc857113abe5937351cc/cs.cmdutils-20190619.1.tar.gz","yanked":false,"yanked_reason":null}],"20190729":[{"comment_text":"","digests":{"blake2b_256":"e9fbd44898656696d1d0ad6a2f1af51fef8ace330447e97b47a8c646ef91595c","md5":"b023766b580eb5d489e888d4d0e78fae","sha256":"a05f77c248396ec5f152c4d950b52b77782498ae5f4b85849e50c2fc00d5f27d"},"downloads":-1,"filename":"cs.cmdutils-20190729.tar.gz","has_sig":false,"md5_digest":"b023766b580eb5d489e888d4d0e78fae","packagetype":"sdist","python_version":"source","requires_python":null,"size":5626,"upload_time":"2019-07-29T05:05:18","upload_time_iso_8601":"2019-07-29T05:05:18.698005Z","url":"https://files.pythonhosted.org/packages/e9/fb/d44898656696d1d0ad6a2f1af51fef8ace330447e97b47a8c646ef91595c/cs.cmdutils-20190729.tar.gz","yanked":false,"yanked_reason":null}],"20200210":[{"comment_text":"","digests":{"blake2b_256":"ad350efe8d3c02594e1ddbb7b3bd344ccd93ffd42b348f9b753fe88812476d15","md5":"a71d6a6d556904661dd8e7ae7a3959cc","sha256":"731a50c6396504347916636804fe1f23819917b66448a4afbdc70b91d3429597"},"downloads":-1,"filename":"cs.cmdutils-20200210.tar.gz","has_sig":false,"md5_digest":"a71d6a6d556904661dd8e7ae7a3959cc","packagetype":"sdist","python_version":"source","requires_python":null,"size":6166,"upload_time":"2020-02-10T10:17:51","upload_time_iso_8601":"2020-02-10T10:17:51.038431Z","url":"https://files.pythonhosted.org/packages/ad/35/0efe8d3c02594e1ddbb7b3bd344ccd93ffd42b348f9b753fe88812476d15/cs.cmdutils-20200210.tar.gz","yanked":false,"yanked_reason":null}],"20200229":[{"comment_text":"","digests":{"blake2b_256":"e9ff491e2daf1504422830482c2563e7207f4882fc76ab688aaac2e210732ea4","md5":"0e55ec7729fdf7d36ee4c832054e0e4e","sha256":"d31cd773bfe1c989ab98b2c6cb114788e2d36d63b0920ce3c97f8143c6b5971b"},"downloads":-1,"filename":"cs.cmdutils-20200229.tar.gz","has_sig":false,"md5_digest":"0e55ec7729fdf7d36ee4c832054e0e4e","packagetype":"sdist","python_version":"source","requires_python":null,"size":7141,"upload_time":"2020-02-29T04:53:48","upload_time_iso_8601":"2020-02-29T04:53:48.954868Z","url":"https://files.pythonhosted.org/packages/e9/ff/491e2daf1504422830482c2563e7207f4882fc76ab688aaac2e210732ea4/cs.cmdutils-20200229.tar.gz","yanked":false,"yanked_reason":null}],"20200318":[{"comment_text":"","digests":{"blake2b_256":"fcb0bdac044cac53c8fb14da911f1bb661eb7cf3faeb061ced1b4e690b685e01","md5":"4599546d184952558cb361a0a729c73a","sha256":"8378af59548e4aa173abc13b3d30e1503d9befa9ab70e5b87c1bb58421cd1d25"},"downloads":-1,"filename":"cs.cmdutils-20200318.tar.gz","has_sig":false,"md5_digest":"4599546d184952558cb361a0a729c73a","packagetype":"sdist","python_version":"source","requires_python":null,"size":7531,"upload_time":"2020-03-17T22:49:25","upload_time_iso_8601":"2020-03-17T22:49:25.239408Z","url":"https://files.pythonhosted.org/packages/fc/b0/bdac044cac53c8fb14da911f1bb661eb7cf3faeb061ced1b4e690b685e01/cs.cmdutils-20200318.tar.gz","yanked":false,"yanked_reason":null}],"20200521":[{"comment_text":"","digests":{"blake2b_256":"1a4d3faf95bc236b31b3066049fcf8dc3c680a7016cceda89ba806caa92484e9","md5":"615c1dd5e4a783405950e25d35b699d8","sha256":"6c67f152453f0573aeafa38a188d988e5a1f3368b56f45decf5e6808a333cf00"},"downloads":-1,"filename":"cs.cmdutils-20200521.tar.gz","has_sig":false,"md5_digest":"615c1dd5e4a783405950e25d35b699d8","packagetype":"sdist","python_version":"source","requires_python":null,"size":8878,"upload_time":"2020-05-21T01:30:36","upload_time_iso_8601":"2020-05-21T01:30:36.352983Z","url":"https://files.pythonhosted.org/packages/1a/4d/3faf95bc236b31b3066049fcf8dc3c680a7016cceda89ba806caa92484e9/cs.cmdutils-20200521.tar.gz","yanked":false,"yanked_reason":null}],"20200615":[{"comment_text":"","digests":{"blake2b_256":"1655c47a9a717aca9747efb682dc5cbbc7aad5f42d8581e6473c6ff544e367fa","md5":"24bd3d91e34df156be9ff042e6a0b4aa","sha256":"bf65b9d6a628ebfee1121ae8498a9a694f5bd1e5c2ee2a92da05fcb1ae6a5789"},"downloads":-1,"filename":"cs.cmdutils-20200615.tar.gz","has_sig":false,"md5_digest":"24bd3d91e34df156be9ff042e6a0b4aa","packagetype":"sdist","python_version":"source","requires_python":null,"size":8150,"upload_time":"2020-06-15T03:28:30","upload_time_iso_8601":"2020-06-15T03:28:30.562228Z","url":"https://files.pythonhosted.org/packages/16/55/c47a9a717aca9747efb682dc5cbbc7aad5f42d8581e6473c6ff544e367fa/cs.cmdutils-20200615.tar.gz","yanked":false,"yanked_reason":null}],"20201102":[{"comment_text":"","digests":{"blake2b_256":"dba22f37597ab0a3617946fa89c491d92bb6a3b3de9dcaf2352a4448e570d0f0","md5":"cc7ad8ca7004aef6c99574736d5ad6cf","sha256":"a8c691d797fd4914fc57b1d2a9b98886c7c61801dcbbbb11755d83a1af6d43cc"},"downloads":-1,"filename":"cs.cmdutils-20201102.tar.gz","has_sig":false,"md5_digest":"cc7ad8ca7004aef6c99574736d5ad6cf","packagetype":"sdist","python_version":"source","requires_python":null,"size":11947,"upload_time":"2020-11-01T21:48:16","upload_time_iso_8601":"2020-11-01T21:48:16.471826Z","url":"https://files.pythonhosted.org/packages/db/a2/2f37597ab0a3617946fa89c491d92bb6a3b3de9dcaf2352a4448e570d0f0/cs.cmdutils-20201102.tar.gz","yanked":false,"yanked_reason":null}],"20210123":[{"comment_text":"","digests":{"blake2b_256":"488a0ac69c11ac62c15f7a2df0fb171ce9e2fe7455b8516efb85f2ea83b9e274","md5":"b8fac8da9c98f55232a43bbb54bd5968","sha256":"bef37e0438b0a57ea9d95253729a0e83632ceaa5c79ec8acb523b83165cffef5"},"downloads":-1,"filename":"cs.cmdutils-20210123.tar.gz","has_sig":false,"md5_digest":"b8fac8da9c98f55232a43bbb54bd5968","packagetype":"sdist","python_version":"source","requires_python":null,"size":12181,"upload_time":"2021-01-22T22:23:35","upload_time_iso_8601":"2021-01-22T22:23:35.578486Z","url":"https://files.pythonhosted.org/packages/48/8a/0ac69c11ac62c15f7a2df0fb171ce9e2fe7455b8516efb85f2ea83b9e274/cs.cmdutils-20210123.tar.gz","yanked":false,"yanked_reason":null}],"20210306":[{"comment_text":"","digests":{"blake2b_256":"b447c784d28e23d78b6dd063f11d47ff9b74c980be8ee2e8fb822dbda760256d","md5":"f9ce202a066756ec629addcef43b8a48","sha256":"ba8415b80b1b8f4dd45857379405e5dca5349076f61ce5721eb72f59bf84077b"},"downloads":-1,"filename":"cs.cmdutils-20210306.tar.gz","has_sig":false,"md5_digest":"f9ce202a066756ec629addcef43b8a48","packagetype":"sdist","python_version":"source","requires_python":null,"size":13558,"upload_time":"2021-03-05T23:19:55","upload_time_iso_8601":"2021-03-05T23:19:55.776998Z","url":"https://files.pythonhosted.org/packages/b4/47/c784d28e23d78b6dd063f11d47ff9b74c980be8ee2e8fb822dbda760256d/cs.cmdutils-20210306.tar.gz","yanked":false,"yanked_reason":null}],"20210404":[{"comment_text":"","digests":{"blake2b_256":"59a70d39d33dc9213f29a5e1d8f62a75761be581b4e88be2bc8e2000a7a61344","md5":"43758d4695ae159ee303cf94e784723f","sha256":"71f3f0bdb79a2155215f22375489b979ae8d2aaf7040d61e9b134a9caf306056"},"downloads":-1,"filename":"cs.cmdutils-20210404.tar.gz","has_sig":false,"md5_digest":"43758d4695ae159ee303cf94e784723f","packagetype":"sdist","python_version":"source","requires_python":null,"size":14006,"upload_time":"2021-04-03T23:07:44","upload_time_iso_8601":"2021-04-03T23:07:44.321434Z","url":"https://files.pythonhosted.org/packages/59/a7/0d39d33dc9213f29a5e1d8f62a75761be581b4e88be2bc8e2000a7a61344/cs.cmdutils-20210404.tar.gz","yanked":false,"yanked_reason":null}],"20210407":[{"comment_text":"","digests":{"blake2b_256":"1801008be23c3b8f09bd19fb822b699fcac241b01964a668fccdadbac3758653","md5":"91a06a43fee551b3f90b4a52159f9c7e","sha256":"a339cb2cfc3036252ccb1a70404cbe584ce58998e17f77e75b858b3162b31db3"},"downloads":-1,"filename":"cs.cmdutils-20210407.tar.gz","has_sig":false,"md5_digest":"91a06a43fee551b3f90b4a52159f9c7e","packagetype":"sdist","python_version":"source","requires_python":null,"size":14533,"upload_time":"2021-04-06T23:06:29","upload_time_iso_8601":"2021-04-06T23:06:29.695564Z","url":"https://files.pythonhosted.org/packages/18/01/008be23c3b8f09bd19fb822b699fcac241b01964a668fccdadbac3758653/cs.cmdutils-20210407.tar.gz","yanked":false,"yanked_reason":null}],"20210407.1":[{"comment_text":"","digests":{"blake2b_256":"84472c3fad03557f080f4482da9d4f04624de229b3066445f0b590374f078a74","md5":"629034b2385d27429201e3441ef6b268","sha256":"51f96bf30eed726db1be68bb6133e4230313bdbb5b550dde4338b0f227c945b7"},"downloads":-1,"filename":"cs.cmdutils-20210407.1.tar.gz","has_sig":false,"md5_digest":"629034b2385d27429201e3441ef6b268","packagetype":"sdist","python_version":"source","requires_python":null,"size":14596,"upload_time":"2021-04-06T23:16:58","upload_time_iso_8601":"2021-04-06T23:16:58.672498Z","url":"https://files.pythonhosted.org/packages/84/47/2c3fad03557f080f4482da9d4f04624de229b3066445f0b590374f078a74/cs.cmdutils-20210407.1.tar.gz","yanked":false,"yanked_reason":null}],"20210420":[{"comment_text":"","digests":{"blake2b_256":"8254e9daaf48f74a0f63d1fec117de14cecb620e0c0273552742cca144c347a6","md5":"45a3ff71afdcb75202981e74c99c7142","sha256":"da70fcabf9f46f2d53db2e1c6aaaa8df0a8c8117d4693812b337be9736b66152"},"downloads":-1,"filename":"cs.cmdutils-20210420.tar.gz","has_sig":false,"md5_digest":"45a3ff71afdcb75202981e74c99c7142","packagetype":"sdist","python_version":"source","requires_python":null,"size":14696,"upload_time":"2021-04-20T01:53:49","upload_time_iso_8601":"2021-04-20T01:53:49.256141Z","url":"https://files.pythonhosted.org/packages/82/54/e9daaf48f74a0f63d1fec117de14cecb620e0c0273552742cca144c347a6/cs.cmdutils-20210420.tar.gz","yanked":false,"yanked_reason":null}],"20210731":[{"comment_text":"","digests":{"blake2b_256":"0df114727dc6dbe730d7fe077aa4a2b276a6ac514ff0e9f5f4e1757f209378b3","md5":"9c72d0ba60a9449497f79ef8499b60bb","sha256":"0e67fd969d4e5825c727840a3170f535084a11f2503e4cb4145466c194b80e89"},"downloads":-1,"filename":"cs.cmdutils-20210731.tar.gz","has_sig":false,"md5_digest":"9c72d0ba60a9449497f79ef8499b60bb","packagetype":"sdist","python_version":"source","requires_python":null,"size":15149,"upload_time":"2021-07-31T05:42:42","upload_time_iso_8601":"2021-07-31T05:42:42.215594Z","url":"https://files.pythonhosted.org/packages/0d/f1/14727dc6dbe730d7fe077aa4a2b276a6ac514ff0e9f5f4e1757f209378b3/cs.cmdutils-20210731.tar.gz","yanked":false,"yanked_reason":null}],"20210809":[{"comment_text":"","digests":{"blake2b_256":"d5f11e72547fb5d62dcf0d704f604528e6ade1d1963536872338e81bada1bde1","md5":"830255a957dca16ed5f98d6cb6d9cc52","sha256":"aadd4a621cdf7c704e9b9064b48943a3cc2bb047e3f7d820942bb8486f5314ef"},"downloads":-1,"filename":"cs.cmdutils-20210809.tar.gz","has_sig":false,"md5_digest":"830255a957dca16ed5f98d6cb6d9cc52","packagetype":"sdist","python_version":"source","requires_python":null,"size":15208,"upload_time":"2021-08-09T01:08:52","upload_time_iso_8601":"2021-08-09T01:08:52.338534Z","url":"https://files.pythonhosted.org/packages/d5/f1/1e72547fb5d62dcf0d704f604528e6ade1d1963536872338e81bada1bde1/cs.cmdutils-20210809.tar.gz","yanked":false,"yanked_reason":null}],"20210906":[{"comment_text":"","digests":{"blake2b_256":"914b49c2488a5dcae95bee73e1bd656e6c034defefe65207dd8ca4f32bc39037","md5":"e6bf6733909040c37893e45f067986dd","sha256":"7392ea787e0977bdf62d68e16072bb76d931da9ba282ac3756b3d58ae02b93f0"},"downloads":-1,"filename":"cs.cmdutils-20210906.tar.gz","has_sig":false,"md5_digest":"e6bf6733909040c37893e45f067986dd","packagetype":"sdist","python_version":"source","requires_python":null,"size":15347,"upload_time":"2021-09-05T23:03:27","upload_time_iso_8601":"2021-09-05T23:03:27.007150Z","url":"https://files.pythonhosted.org/packages/91/4b/49c2488a5dcae95bee73e1bd656e6c034defefe65207dd8ca4f32bc39037/cs.cmdutils-20210906.tar.gz","yanked":false,"yanked_reason":null}],"20210913":[{"comment_text":"","digests":{"blake2b_256":"db67acb0ea113b2603e8740c520e8c97a16da7c01bd588d742fc28df2b5693a3","md5":"d3f90a28497234ce1dd9908c1a827129","sha256":"bb168de0d3e8af22e3f6c4a1713d521d0e466dcbe6375fe518abf0595410d48b"},"downloads":-1,"filename":"cs.cmdutils-20210913.tar.gz","has_sig":false,"md5_digest":"d3f90a28497234ce1dd9908c1a827129","packagetype":"sdist","python_version":"source","requires_python":null,"size":15962,"upload_time":"2021-09-13T10:06:07","upload_time_iso_8601":"2021-09-13T10:06:07.407500Z","url":"https://files.pythonhosted.org/packages/db/67/acb0ea113b2603e8740c520e8c97a16da7c01bd588d742fc28df2b5693a3/cs.cmdutils-20210913.tar.gz","yanked":false,"yanked_reason":null}],"20210927":[{"comment_text":"","digests":{"blake2b_256":"e57fe19278798a4555f0a14d24ec29f24daf18b5186cb080a53ea9657a6ed0d8","md5":"2c2e8ba284a6d27c9b6d15d43eede896","sha256":"9112383b80f97422f8b43d4a77fdb54423eb2100fb4f2d2732e9f61f08bf0dc2"},"downloads":-1,"filename":"cs.cmdutils-20210927.tar.gz","has_sig":false,"md5_digest":"2c2e8ba284a6d27c9b6d15d43eede896","packagetype":"sdist","python_version":"source","requires_python":null,"size":16928,"upload_time":"2021-09-27T01:26:51","upload_time_iso_8601":"2021-09-27T01:26:51.107209Z","url":"https://files.pythonhosted.org/packages/e5/7f/e19278798a4555f0a14d24ec29f24daf18b5186cb080a53ea9657a6ed0d8/cs.cmdutils-20210927.tar.gz","yanked":false,"yanked_reason":null}],"20211208":[{"comment_text":"","digests":{"blake2b_256":"0c30ff338da0a8b125b7ea7525c1a0abc6dbc5293dee69d9c50e5cc060cb7ff2","md5":"50ae37036e327e90ad7e3ca92860fb13","sha256":"3b511f993506a8bb7cc17a01cfd9b5ec07154d4eddfec0dc1b8282a760135b67"},"downloads":-1,"filename":"cs.cmdutils-20211208.tar.gz","has_sig":false,"md5_digest":"50ae37036e327e90ad7e3ca92860fb13","packagetype":"sdist","python_version":"source","requires_python":null,"size":16177,"upload_time":"2021-12-08T09:56:28","upload_time_iso_8601":"2021-12-08T09:56:28.481069Z","url":"https://files.pythonhosted.org/packages/0c/30/ff338da0a8b125b7ea7525c1a0abc6dbc5293dee69d9c50e5cc060cb7ff2/cs.cmdutils-20211208.tar.gz","yanked":false,"yanked_reason":null}],"20220311":[{"comment_text":"","digests":{"blake2b_256":"3c3de8a0e775f5b6c78e224c209fa155c02cf4b81e890b56f7aad5ed4f90b934","md5":"bf1e776c10f5a35a3ed264288cefa56f","sha256":"2f3b2dd94a3fe6f1215423ad9b1ce3b0e33618ff84dbdd920bd184d136a5fb65"},"downloads":-1,"filename":"cs.cmdutils-20220311.tar.gz","has_sig":false,"md5_digest":"bf1e776c10f5a35a3ed264288cefa56f","packagetype":"sdist","python_version":"source","requires_python":null,"size":16812,"upload_time":"2022-03-11T00:41:41","upload_time_iso_8601":"2022-03-11T00:41:41.661346Z","url":"https://files.pythonhosted.org/packages/3c/3d/e8a0e775f5b6c78e224c209fa155c02cf4b81e890b56f7aad5ed4f90b934/cs.cmdutils-20220311.tar.gz","yanked":false,"yanked_reason":null}],"20220315":[{"comment_text":"","digests":{"blake2b_256":"40a1001a1e7f7f9ba65eb364715a6b9b26f733a2c60de1625779297f2546f96e","md5":"5142e2e590c3edf829ead99097f1cd85","sha256":"028f462059c3517f520e8fe6b5104b4a2564852164ad1530ee0e5e802c0edfa9"},"downloads":-1,"filename":"cs.cmdutils-20220315.tar.gz","has_sig":false,"md5_digest":"5142e2e590c3edf829ead99097f1cd85","packagetype":"sdist","python_version":"source","requires_python":null,"size":16943,"upload_time":"2022-03-15T03:30:39","upload_time_iso_8601":"2022-03-15T03:30:39.579287Z","url":"https://files.pythonhosted.org/packages/40/a1/001a1e7f7f9ba65eb364715a6b9b26f733a2c60de1625779297f2546f96e/cs.cmdutils-20220315.tar.gz","yanked":false,"yanked_reason":null}],"20220318":[{"comment_text":"","digests":{"blake2b_256":"c261d79951e7a6b724447c5d21d80569e516f04e23071ab4a91869f32c0628da","md5":"c74644c31a4bfdae9e4192630c8dfa90","sha256":"746074414f68b8b526e71127e961ef6bca8a11fac8333ed109faa73a9181d871"},"downloads":-1,"filename":"cs.cmdutils-20220318.tar.gz","has_sig":false,"md5_digest":"c74644c31a4bfdae9e4192630c8dfa90","packagetype":"sdist","python_version":"source","requires_python":null,"size":17045,"upload_time":"2022-03-18T01:06:17","upload_time_iso_8601":"2022-03-18T01:06:17.487580Z","url":"https://files.pythonhosted.org/packages/c2/61/d79951e7a6b724447c5d21d80569e516f04e23071ab4a91869f32c0628da/cs.cmdutils-20220318.tar.gz","yanked":false,"yanked_reason":null}],"20220429":[{"comment_text":"","digests":{"blake2b_256":"8610df0d46944d92236290143290351a1c745d991a0c41574137dacbf4c28b18","md5":"ecb5a76914eba208b860a51fe91eedfd","sha256":"561810be09a9e07157c89df73a57a65fa020e283b0f9a3a4ef3962d09e2c33a8"},"downloads":-1,"filename":"cs.cmdutils-20220429-py3-none-any.whl","has_sig":false,"md5_digest":"ecb5a76914eba208b860a51fe91eedfd","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":14124,"upload_time":"2022-04-29T08:59:08","upload_time_iso_8601":"2022-04-29T08:59:08.045683Z","url":"https://files.pythonhosted.org/packages/86/10/df0d46944d92236290143290351a1c745d991a0c41574137dacbf4c28b18/cs.cmdutils-20220429-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"56dbe7294ef6af2336eb58f9b14cdf07403bfa873afd89489c74c8d8728ee9b7","md5":"ed41ba3af631c3b479caaca925a530ce","sha256":"719183ac8a06cc0d1979222f57f4078c49e1889d4d2643af6891be16f586f112"},"downloads":-1,"filename":"cs.cmdutils-20220429.tar.gz","has_sig":false,"md5_digest":"ed41ba3af631c3b479caaca925a530ce","packagetype":"sdist","python_version":"source","requires_python":null,"size":17525,"upload_time":"2022-04-29T08:59:10","upload_time_iso_8601":"2022-04-29T08:59:10.634326Z","url":"https://files.pythonhosted.org/packages/56/db/e7294ef6af2336eb58f9b14cdf07403bfa873afd89489c74c8d8728ee9b7/cs.cmdutils-20220429.tar.gz","yanked":false,"yanked_reason":null}],"20220605":[{"comment_text":"","digests":{"blake2b_256":"7a0cdf6e4acecac5ebd2b5189ec58d628421f3d8fa9598d59793b9200a3b4de3","md5":"48d4fef356237b226373426117f159ee","sha256":"3daa38e680cbabc532ccb9ddaeeaae418b66fb845cb13ce9b75966fee30570f9"},"downloads":-1,"filename":"cs.cmdutils-20220605-py3-none-any.whl","has_sig":false,"md5_digest":"48d4fef356237b226373426117f159ee","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":16698,"upload_time":"2022-06-05T11:25:49","upload_time_iso_8601":"2022-06-05T11:25:49.510343Z","url":"https://files.pythonhosted.org/packages/7a/0c/df6e4acecac5ebd2b5189ec58d628421f3d8fa9598d59793b9200a3b4de3/cs.cmdutils-20220605-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"5a68f91902219d3b0b94555a9bd5e2b86a270f30ccb8a004dba3d6917d13e03c","md5":"edfa743adf2121a04e4bd39aa986e131","sha256":"bc80c188ede173e6922ee407f145b3f6fa38306963768f3a7398cc77829a1b02"},"downloads":-1,"filename":"cs.cmdutils-20220605.tar.gz","has_sig":false,"md5_digest":"edfa743adf2121a04e4bd39aa986e131","packagetype":"sdist","python_version":"source","requires_python":null,"size":23250,"upload_time":"2022-06-05T11:25:52","upload_time_iso_8601":"2022-06-05T11:25:52.086184Z","url":"https://files.pythonhosted.org/packages/5a/68/f91902219d3b0b94555a9bd5e2b86a270f30ccb8a004dba3d6917d13e03c/cs.cmdutils-20220605.tar.gz","yanked":false,"yanked_reason":null}],"20220606":[{"comment_text":"","digests":{"blake2b_256":"c1d6ab4576002d5f4f1ee6eaae04c7b9550f8cc5c58442aab2d4512ad86629df","md5":"4d4395ef9a771ec6230630e1049946bf","sha256":"2aff33641fb3ea3610a1d511d9895c46f59ce6e9023e82d5f19e11d3a43fe981"},"downloads":-1,"filename":"cs.cmdutils-20220606-py3-none-any.whl","has_sig":false,"md5_digest":"4d4395ef9a771ec6230630e1049946bf","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":16714,"upload_time":"2022-06-06T05:41:06","upload_time_iso_8601":"2022-06-06T05:41:06.680505Z","url":"https://files.pythonhosted.org/packages/c1/d6/ab4576002d5f4f1ee6eaae04c7b9550f8cc5c58442aab2d4512ad86629df/cs.cmdutils-20220606-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c63465a2e026de342752081348d6cdbda19ced92e27aa441b590e14b923cb020","md5":"75f05a2d3ac6a74015e4d189045767d0","sha256":"7ff7efe734805fb0e8afe5266158dfe8f13a9d66ba27bf64049bb5a1efbe0404"},"downloads":-1,"filename":"cs.cmdutils-20220606.tar.gz","has_sig":false,"md5_digest":"75f05a2d3ac6a74015e4d189045767d0","packagetype":"sdist","python_version":"source","requires_python":null,"size":23214,"upload_time":"2022-06-06T05:41:09","upload_time_iso_8601":"2022-06-06T05:41:09.365060Z","url":"https://files.pythonhosted.org/packages/c6/34/65a2e026de342752081348d6cdbda19ced92e27aa441b590e14b923cb020/cs.cmdutils-20220606.tar.gz","yanked":false,"yanked_reason":null}],"20220626":[{"comment_text":"","digests":{"blake2b_256":"b049d4d41abd8510cdfd323f043ffa2ae83bfa16698ac9e742910b7de34e35aa","md5":"b3a6aa3eb7098b9e9384b2f2512ecd13","sha256":"ff53b0c48ebc8ee005b5d69c7b9a87a53c2c10b86aa27419e34742f561acdc56"},"downloads":-1,"filename":"cs.cmdutils-20220626-py3-none-any.whl","has_sig":false,"md5_digest":"b3a6aa3eb7098b9e9384b2f2512ecd13","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":16972,"upload_time":"2022-06-26T09:40:50","upload_time_iso_8601":"2022-06-26T09:40:50.840119Z","url":"https://files.pythonhosted.org/packages/b0/49/d4d41abd8510cdfd323f043ffa2ae83bfa16698ac9e742910b7de34e35aa/cs.cmdutils-20220626-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"8be086c0e6657d08b758999ac573167f001161f155f51e39686a6772033544b5","md5":"df6e139093d836609d99913012f0a05b","sha256":"b6c6ccf42d61f1cd14360102157c1f5d57e20f50aac227f07d588dd91d60216c"},"downloads":-1,"filename":"cs.cmdutils-20220626.tar.gz","has_sig":false,"md5_digest":"df6e139093d836609d99913012f0a05b","packagetype":"sdist","python_version":"source","requires_python":null,"size":23819,"upload_time":"2022-06-26T09:40:52","upload_time_iso_8601":"2022-06-26T09:40:52.508913Z","url":"https://files.pythonhosted.org/packages/8b/e0/86c0e6657d08b758999ac573167f001161f155f51e39686a6772033544b5/cs.cmdutils-20220626.tar.gz","yanked":false,"yanked_reason":null}],"20220918":[{"comment_text":"","digests":{"blake2b_256":"92824220978c557dc261a9cdbddcaa4a16078eb87d4fd97a870b192c95b9fe91","md5":"789116e50591bfa18044c578877dcb0d","sha256":"3f88087f0ecdb7114f255c1faeaea92a40a9764485e42a56a9db41a95c39fcec"},"downloads":-1,"filename":"cs.cmdutils-20220918-py3-none-any.whl","has_sig":false,"md5_digest":"789116e50591bfa18044c578877dcb0d","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":17059,"upload_time":"2022-09-17T23:16:49","upload_time_iso_8601":"2022-09-17T23:16:49.240414Z","url":"https://files.pythonhosted.org/packages/92/82/4220978c557dc261a9cdbddcaa4a16078eb87d4fd97a870b192c95b9fe91/cs.cmdutils-20220918-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"375e6885396598339641901d77d3b3d937631a715cd4ac132f90593c48a5641b","md5":"59c2644a114e1f8af38205c234f4075d","sha256":"96d8ac094dc4babdcd29e34daf354f36052843598f96fa49dfabaaa4555db53a"},"downloads":-1,"filename":"cs.cmdutils-20220918.tar.gz","has_sig":false,"md5_digest":"59c2644a114e1f8af38205c234f4075d","packagetype":"sdist","python_version":"source","requires_python":null,"size":23990,"upload_time":"2022-09-17T23:16:51","upload_time_iso_8601":"2022-09-17T23:16:51.023474Z","url":"https://files.pythonhosted.org/packages/37/5e/6885396598339641901d77d3b3d937631a715cd4ac132f90593c48a5641b/cs.cmdutils-20220918.tar.gz","yanked":false,"yanked_reason":null}],"20221228":[{"comment_text":"","digests":{"blake2b_256":"ca5ea55d3439fde552f9bd68b8e6c2473a6a8e6018a0204728656ee9a9f8972d","md5":"89b9d90c4b35ff2efc34fd30a0326a92","sha256":"8e5e26cf67b3569e60490d0d2a547e2bdad045aa4db7320d64921b2c89fdcd51"},"downloads":-1,"filename":"cs.cmdutils-20221228-py3-none-any.whl","has_sig":false,"md5_digest":"89b9d90c4b35ff2efc34fd30a0326a92","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":17198,"upload_time":"2022-12-27T23:45:13","upload_time_iso_8601":"2022-12-27T23:45:13.919552Z","url":"https://files.pythonhosted.org/packages/ca/5e/a55d3439fde552f9bd68b8e6c2473a6a8e6018a0204728656ee9a9f8972d/cs.cmdutils-20221228-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e745b74a72c0fdca730001974a4266d8818acfb86852767fb8b98ee643f48535","md5":"0ea093bc42a4d66aedcb55a23bdd8d8a","sha256":"af148b2493167de59e7186d877631afc5d6c24e0bddaf31f665a7cca81ca99a4"},"downloads":-1,"filename":"cs.cmdutils-20221228.tar.gz","has_sig":false,"md5_digest":"0ea093bc42a4d66aedcb55a23bdd8d8a","packagetype":"sdist","python_version":"source","requires_python":null,"size":24284,"upload_time":"2022-12-27T23:45:15","upload_time_iso_8601":"2022-12-27T23:45:15.631493Z","url":"https://files.pythonhosted.org/packages/e7/45/b74a72c0fdca730001974a4266d8818acfb86852767fb8b98ee643f48535/cs.cmdutils-20221228.tar.gz","yanked":false,"yanked_reason":null}],"20230211":[{"comment_text":"","digests":{"blake2b_256":"c730682eb3f30cfd7d11d13f479ab3ab1f40c3c8345235ee79fa7a1958d5ee7b","md5":"cfbe7cf92ce18a029765ab4673c4911f","sha256":"aeef4aff7288c33694d7865baa4354ca4d5942e147854a008aef770dc3509e83"},"downloads":-1,"filename":"cs.cmdutils-20230211-py3-none-any.whl","has_sig":false,"md5_digest":"cfbe7cf92ce18a029765ab4673c4911f","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":17607,"upload_time":"2023-02-11T09:11:48","upload_time_iso_8601":"2023-02-11T09:11:48.084269Z","url":"https://files.pythonhosted.org/packages/c7/30/682eb3f30cfd7d11d13f479ab3ab1f40c3c8345235ee79fa7a1958d5ee7b/cs.cmdutils-20230211-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d80a7881b8bdfec11a866499726de81ece9555ef6c61b89bb1cd742d1d412715","md5":"96f41dc98027be23dee4772eb770b1e7","sha256":"8cda2a0634735a454102a1b5c06aa1b1780d743a6369b23cd00851b5f8b630be"},"downloads":-1,"filename":"cs.cmdutils-20230211.tar.gz","has_sig":false,"md5_digest":"96f41dc98027be23dee4772eb770b1e7","packagetype":"sdist","python_version":"source","requires_python":null,"size":24897,"upload_time":"2023-02-11T09:11:50","upload_time_iso_8601":"2023-02-11T09:11:50.231853Z","url":"https://files.pythonhosted.org/packages/d8/0a/7881b8bdfec11a866499726de81ece9555ef6c61b89bb1cd742d1d412715/cs.cmdutils-20230211.tar.gz","yanked":false,"yanked_reason":null}],"20230212":[{"comment_text":"","digests":{"blake2b_256":"66f7689eae369ee6b897cccf31bae0890308418390f0d6ed686f168144615aa5","md5":"ffcdd07b13d9649cbb18511e4d063ac2","sha256":"f385a67ad9278f49448b7b5c0178cf410489e7e402afb620532cbb145083ea15"},"downloads":-1,"filename":"cs.cmdutils-20230212-py3-none-any.whl","has_sig":false,"md5_digest":"ffcdd07b13d9649cbb18511e4d063ac2","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":17695,"upload_time":"2023-02-12T00:28:42","upload_time_iso_8601":"2023-02-12T00:28:42.511189Z","url":"https://files.pythonhosted.org/packages/66/f7/689eae369ee6b897cccf31bae0890308418390f0d6ed686f168144615aa5/cs.cmdutils-20230212-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"190d148647fa6475890a859399d798f169c6bc0832b053ce67ff3644a45755ac","md5":"c55ddbdc706f527af70de2994c9b4d5b","sha256":"b7d07d5c03ffbadcf2c8fe65c2dbfe654ef5e0cf4f14518dc0f67989e804e90f"},"downloads":-1,"filename":"cs.cmdutils-20230212.tar.gz","has_sig":false,"md5_digest":"c55ddbdc706f527af70de2994c9b4d5b","packagetype":"sdist","python_version":"source","requires_python":null,"size":25037,"upload_time":"2023-02-12T00:28:44","upload_time_iso_8601":"2023-02-12T00:28:44.647465Z","url":"https://files.pythonhosted.org/packages/19/0d/148647fa6475890a859399d798f169c6bc0832b053ce67ff3644a45755ac/cs.cmdutils-20230212.tar.gz","yanked":false,"yanked_reason":null}],"20230407":[{"comment_text":"","digests":{"blake2b_256":"0e3394ed4a57dd31e0c844dc7ad4e96d0dbd2677c2e9535f55e1725e8bdcc624","md5":"5b9b2a13f064b760f28ddb31f475927c","sha256":"fd2e23f910ea5e43d09879d9d1e669789695f78324614d0abe958a933e6b9a2b"},"downloads":-1,"filename":"cs.cmdutils-20230407-py3-none-any.whl","has_sig":false,"md5_digest":"5b9b2a13f064b760f28ddb31f475927c","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":19222,"upload_time":"2023-04-06T23:58:40","upload_time_iso_8601":"2023-04-06T23:58:40.213743Z","url":"https://files.pythonhosted.org/packages/0e/33/94ed4a57dd31e0c844dc7ad4e96d0dbd2677c2e9535f55e1725e8bdcc624/cs.cmdutils-20230407-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"439b5fcfe2b303e7189729e2410d0b9d500ebca0b9e6ea849828323d737b6c83","md5":"4154b12b5fc97575c85f065e3a9cdfa9","sha256":"9987d3cb6e09149b86df905870bc4a051d0cd3627aa45be0de5c823a8548378e"},"downloads":-1,"filename":"cs.cmdutils-20230407.tar.gz","has_sig":false,"md5_digest":"4154b12b5fc97575c85f065e3a9cdfa9","packagetype":"sdist","python_version":"source","requires_python":null,"size":26981,"upload_time":"2023-04-06T23:58:42","upload_time_iso_8601":"2023-04-06T23:58:42.909194Z","url":"https://files.pythonhosted.org/packages/43/9b/5fcfe2b303e7189729e2410d0b9d500ebca0b9e6ea849828323d737b6c83/cs.cmdutils-20230407.tar.gz","yanked":false,"yanked_reason":null}],"20230612":[{"comment_text":"","digests":{"blake2b_256":"6b7d5003502c46be5831bd71e5a24e6ea3d7b197881020b99e3adf5da4a47000","md5":"3132a2aa2b8cebff0f19374121fa52c2","sha256":"45c7a2c205dc245525e00cfdb48ed0fb0405891c6a032a0da2bbd3cbfa15bfab"},"downloads":-1,"filename":"cs.cmdutils-20230612-py3-none-any.whl","has_sig":false,"md5_digest":"3132a2aa2b8cebff0f19374121fa52c2","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":19134,"upload_time":"2023-06-12T03:20:50","upload_time_iso_8601":"2023-06-12T03:20:50.484420Z","url":"https://files.pythonhosted.org/packages/6b/7d/5003502c46be5831bd71e5a24e6ea3d7b197881020b99e3adf5da4a47000/cs.cmdutils-20230612-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"2be0a892f880eeb71c5c9edb5fedc2999272d1b3403e6bea1ce6e2c8da13c999","md5":"ebcd0aee596187245735f71eb5287e82","sha256":"a226c19879b8f324740e9a6d7769cf3e1d0f94530159bfa3250feeec76fe7c4b"},"downloads":-1,"filename":"cs.cmdutils-20230612.tar.gz","has_sig":false,"md5_digest":"ebcd0aee596187245735f71eb5287e82","packagetype":"sdist","python_version":"source","requires_python":null,"size":26911,"upload_time":"2023-06-12T03:20:52","upload_time_iso_8601":"2023-06-12T03:20:52.492638Z","url":"https://files.pythonhosted.org/packages/2b/e0/a892f880eeb71c5c9edb5fedc2999272d1b3403e6bea1ce6e2c8da13c999/cs.cmdutils-20230612.tar.gz","yanked":false,"yanked_reason":null}],"20230703":[{"comment_text":"","digests":{"blake2b_256":"f30b2af7f4094552d9933e0a86e051be49c956f3538ee66991e7e74e1a2cf92e","md5":"981caa313992f796ef8b12773d6dc8ca","sha256":"7952e2a68efc28448b58253f2d719d6cb8b48b73991ae0ac7f83ec5ed1fb3e9d"},"downloads":-1,"filename":"cs.cmdutils-20230703-py3-none-any.whl","has_sig":false,"md5_digest":"981caa313992f796ef8b12773d6dc8ca","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":19208,"upload_time":"2023-07-03T10:02:47","upload_time_iso_8601":"2023-07-03T10:02:47.533660Z","url":"https://files.pythonhosted.org/packages/f3/0b/2af7f4094552d9933e0a86e051be49c956f3538ee66991e7e74e1a2cf92e/cs.cmdutils-20230703-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"2b78f557eb1ea5c1a4abb7266561a8256f3a8073b4cabf23d98ea947227a8d6d","md5":"6a8f3d5ac211975c992c0f73275bd265","sha256":"e7d19e100dd73f577be7ca04940cb5d86035a17a521374f553d72ff7d0e00d3b"},"downloads":-1,"filename":"cs.cmdutils-20230703.tar.gz","has_sig":false,"md5_digest":"6a8f3d5ac211975c992c0f73275bd265","packagetype":"sdist","python_version":"source","requires_python":null,"size":26976,"upload_time":"2023-07-03T10:02:49","upload_time_iso_8601":"2023-07-03T10:02:49.523541Z","url":"https://files.pythonhosted.org/packages/2b/78/f557eb1ea5c1a4abb7266561a8256f3a8073b4cabf23d98ea947227a8d6d/cs.cmdutils-20230703.tar.gz","yanked":false,"yanked_reason":null}],"20231129":[{"comment_text":"","digests":{"blake2b_256":"d32302019ccede64677294092d858aee0868f00c8b315dd75d48eb6d3a20dc80","md5":"cd5f96127b336e08268cd6d00ae6228b","sha256":"bf490fa2ca8d8e96d6e9634ab73280a756596e937dda0e1839469bae8d338ba6"},"downloads":-1,"filename":"cs.cmdutils-20231129-py3-none-any.whl","has_sig":false,"md5_digest":"cd5f96127b336e08268cd6d00ae6228b","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":19251,"upload_time":"2023-11-29T10:40:24","upload_time_iso_8601":"2023-11-29T10:40:24.411704Z","url":"https://files.pythonhosted.org/packages/d3/23/02019ccede64677294092d858aee0868f00c8b315dd75d48eb6d3a20dc80/cs.cmdutils-20231129-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"52343cfc9eb0f82a9abf2d9be449de393ca3a95de629241efb1d812a0c8e2c50","md5":"2aafaf55b17703a42c160669669dbe0f","sha256":"77b73aaeb7a134a6a1465b46f8e715eca404994f03c7f8ca3e95cf40ef2cb42b"},"downloads":-1,"filename":"cs.cmdutils-20231129.tar.gz","has_sig":false,"md5_digest":"2aafaf55b17703a42c160669669dbe0f","packagetype":"sdist","python_version":"source","requires_python":null,"size":27136,"upload_time":"2023-11-29T10:40:26","upload_time_iso_8601":"2023-11-29T10:40:26.439332Z","url":"https://files.pythonhosted.org/packages/52/34/3cfc9eb0f82a9abf2d9be449de393ca3a95de629241efb1d812a0c8e2c50/cs.cmdutils-20231129.tar.gz","yanked":false,"yanked_reason":null}],"20240201":[{"comment_text":"","digests":{"blake2b_256":"240fcdbbfee7cf0f44cdc279200d54b405f997fec4a1aee7058a5428979dd128","md5":"4a964975b86beb155547433a1f9e0631","sha256":"26690756e919eb64ad10d0e3affc3ccff82d0dd6403de174ed860918b04ec9f1"},"downloads":-1,"filename":"cs.cmdutils-20240201-py3-none-any.whl","has_sig":false,"md5_digest":"4a964975b86beb155547433a1f9e0631","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":19549,"upload_time":"2024-01-31T23:42:11","upload_time_iso_8601":"2024-01-31T23:42:11.503745Z","url":"https://files.pythonhosted.org/packages/24/0f/cdbbfee7cf0f44cdc279200d54b405f997fec4a1aee7058a5428979dd128/cs.cmdutils-20240201-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ef1a2f288cf6aee571e3087aa08c65769f8698949adf38d503f29a9695ead580","md5":"a1386d6cae8fa0b71e524277c7acd5b3","sha256":"4f935fc85a57061c25353ee00c63e20e8fc2fa2823d4c756bd2792e63f5d6b62"},"downloads":-1,"filename":"cs.cmdutils-20240201.tar.gz","has_sig":false,"md5_digest":"a1386d6cae8fa0b71e524277c7acd5b3","packagetype":"sdist","python_version":"source","requires_python":null,"size":27760,"upload_time":"2024-01-31T23:42:14","upload_time_iso_8601":"2024-01-31T23:42:14.006055Z","url":"https://files.pythonhosted.org/packages/ef/1a/2f288cf6aee571e3087aa08c65769f8698949adf38d503f29a9695ead580/cs.cmdutils-20240201.tar.gz","yanked":false,"yanked_reason":null}],"20240211":[{"comment_text":"","digests":{"blake2b_256":"ed233e446ce1d8fa856bf2a4fb42b2d627514f468350cf454fb72f8cfb56fd83","md5":"1e5530d59f7f01b868c2d709614929e7","sha256":"19e7ebdf2a99d653488a592f204eb7ce6e418f82285b9ca6ae79a52de8e8ad98"},"downloads":-1,"filename":"cs.cmdutils-20240211-py3-none-any.whl","has_sig":false,"md5_digest":"1e5530d59f7f01b868c2d709614929e7","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":20198,"upload_time":"2024-02-11T04:42:29","upload_time_iso_8601":"2024-02-11T04:42:29.337063Z","url":"https://files.pythonhosted.org/packages/ed/23/3e446ce1d8fa856bf2a4fb42b2d627514f468350cf454fb72f8cfb56fd83/cs.cmdutils-20240211-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b58a65c3d7e796247117d873b040d0498b517684a18bf8c5f74544aaeca8245d","md5":"14a8d0abb943044c69c47754ea703538","sha256":"7731705607114fb2a506597b6ebfc2aec2b2593b215bfd6ffb771ba860c180e5"},"downloads":-1,"filename":"cs.cmdutils-20240211.tar.gz","has_sig":false,"md5_digest":"14a8d0abb943044c69c47754ea703538","packagetype":"sdist","python_version":"source","requires_python":null,"size":28771,"upload_time":"2024-02-11T04:42:31","upload_time_iso_8601":"2024-02-11T04:42:31.957556Z","url":"https://files.pythonhosted.org/packages/b5/8a/65c3d7e796247117d873b040d0498b517684a18bf8c5f74544aaeca8245d/cs.cmdutils-20240211.tar.gz","yanked":false,"yanked_reason":null}],"20240316":[{"comment_text":"","digests":{"blake2b_256":"ee3554abfa446cfd247a1391dffa4277808415c2ce95e560fcb01687622f901d","md5":"06e880aae0e6e0b4ca05900fdd634ba5","sha256":"06e68c1b10f4359e4704c6e970ce6f54964123bf3df24d2fb42f115e74c42c71"},"downloads":-1,"filename":"cs.cmdutils-20240316-py3-none-any.whl","has_sig":false,"md5_digest":"06e880aae0e6e0b4ca05900fdd634ba5","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":21233,"upload_time":"2024-03-16T06:46:51","upload_time_iso_8601":"2024-03-16T06:46:51.848335Z","url":"https://files.pythonhosted.org/packages/ee/35/54abfa446cfd247a1391dffa4277808415c2ce95e560fcb01687622f901d/cs.cmdutils-20240316-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f53e69f84f17284fbfa81aa20a4aea9d698f21c5549fc44a576ce8dc46df1de1","md5":"d08f35977eaed30474e2550c2c8a7038","sha256":"393479af6d2a0d5afc53c62e785efa00d9cc01ef53f9f25e7b1659e4e74abc5c"},"downloads":-1,"filename":"cs.cmdutils-20240316.tar.gz","has_sig":false,"md5_digest":"d08f35977eaed30474e2550c2c8a7038","packagetype":"sdist","python_version":"source","requires_python":null,"size":29575,"upload_time":"2024-03-16T06:46:54","upload_time_iso_8601":"2024-03-16T06:46:54.375344Z","url":"https://files.pythonhosted.org/packages/f5/3e/69f84f17284fbfa81aa20a4aea9d698f21c5549fc44a576ce8dc46df1de1/cs.cmdutils-20240316.tar.gz","yanked":false,"yanked_reason":null}],"20240412":[{"comment_text":"","digests":{"blake2b_256":"448be6151a0ed7f8910bccb65c785299feaf86ebcc5ffc039edc899f8a751970","md5":"cfc322da42473df1781a7ab065819cd7","sha256":"956d9fc86fe3194aa96a246d24a1aff879053f104442f8cee432aec8b7c3d29f"},"downloads":-1,"filename":"cs.cmdutils-20240412-py3-none-any.whl","has_sig":false,"md5_digest":"cfc322da42473df1781a7ab065819cd7","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":24952,"upload_time":"2024-04-12T05:42:29","upload_time_iso_8601":"2024-04-12T05:42:29.139188Z","url":"https://files.pythonhosted.org/packages/44/8b/e6151a0ed7f8910bccb65c785299feaf86ebcc5ffc039edc899f8a751970/cs.cmdutils-20240412-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4a3de3d6fb1680e9cfd297212f5a7f2caabe284fd1820a01395edd1b265f8e81","md5":"f70eb9e9a4e92af51cb5c6b81f4b24a6","sha256":"d2a8249134e08d832e72094509331c583c429d4a5a8c6d3d12c0adbb1ccca735"},"downloads":-1,"filename":"cs.cmdutils-20240412.tar.gz","has_sig":false,"md5_digest":"f70eb9e9a4e92af51cb5c6b81f4b24a6","packagetype":"sdist","python_version":"source","requires_python":null,"size":40218,"upload_time":"2024-04-12T05:42:31","upload_time_iso_8601":"2024-04-12T05:42:31.761153Z","url":"https://files.pythonhosted.org/packages/4a/3d/e3d6fb1680e9cfd297212f5a7f2caabe284fd1820a01395edd1b265f8e81/cs.cmdutils-20240412.tar.gz","yanked":false,"yanked_reason":null}],"20240422":[{"comment_text":"","digests":{"blake2b_256":"801f1aa595dc779a299465e15cd1e3ce328589b3a458319c4ba47495bf7c636f","md5":"a3cf6b6544b765d0ff24112f8ca88e2e","sha256":"9b29a408041c1a6c907b2ee6b54d42a7bb0e82810fb4412d7bc24c3bf928c0d4"},"downloads":-1,"filename":"cs.cmdutils-20240422-py3-none-any.whl","has_sig":false,"md5_digest":"a3cf6b6544b765d0ff24112f8ca88e2e","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":25778,"upload_time":"2024-04-22T02:56:54","upload_time_iso_8601":"2024-04-22T02:56:54.629805Z","url":"https://files.pythonhosted.org/packages/80/1f/1aa595dc779a299465e15cd1e3ce328589b3a458319c4ba47495bf7c636f/cs.cmdutils-20240422-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"07c1404cb89a74e50f75723271d78fb5e0c8ecc8657e9e6a447b5a53954cbb98","md5":"ffc96c12848df1554a2823780840bd65","sha256":"b979004301322f0e64798ae77d8bef6278322d42c102d5cad10ffcc628eacd88"},"downloads":-1,"filename":"cs.cmdutils-20240422.tar.gz","has_sig":false,"md5_digest":"ffc96c12848df1554a2823780840bd65","packagetype":"sdist","python_version":"source","requires_python":null,"size":49858,"upload_time":"2024-04-22T02:56:57","upload_time_iso_8601":"2024-04-22T02:56:57.400316Z","url":"https://files.pythonhosted.org/packages/07/c1/404cb89a74e50f75723271d78fb5e0c8ecc8657e9e6a447b5a53954cbb98/cs.cmdutils-20240422.tar.gz","yanked":false,"yanked_reason":null}],"20240519":[{"comment_text":"","digests":{"blake2b_256":"d0a9dacb2eabc46e9ac5a58e41a1d2cc3c46a837d96e930fbb23247a0f8ca2ac","md5":"161f66bf5da9b8f6bf311cefee89d907","sha256":"e240f14ac5e604f785896347e28ed60b5a7ce9e9de01ee67b8e9a67bacd0ed8a"},"downloads":-1,"filename":"cs.cmdutils-20240519-py3-none-any.whl","has_sig":false,"md5_digest":"161f66bf5da9b8f6bf311cefee89d907","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":25788,"upload_time":"2024-05-19T02:29:01","upload_time_iso_8601":"2024-05-19T02:29:01.889787Z","url":"https://files.pythonhosted.org/packages/d0/a9/dacb2eabc46e9ac5a58e41a1d2cc3c46a837d96e930fbb23247a0f8ca2ac/cs.cmdutils-20240519-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"26ad3b6714e7f63b8a87e0acb59c758952513967a59c333a487bcefcafa20859","md5":"b9be0eb212df083fe4677e5571a69f48","sha256":"d512fbbe6220514e25d149968e7d764949810e329bc752f704b760f5391e18cd"},"downloads":-1,"filename":"cs.cmdutils-20240519.tar.gz","has_sig":false,"md5_digest":"b9be0eb212df083fe4677e5571a69f48","packagetype":"sdist","python_version":"source","requires_python":null,"size":41951,"upload_time":"2024-05-19T02:29:04","upload_time_iso_8601":"2024-05-19T02:29:04.900939Z","url":"https://files.pythonhosted.org/packages/26/ad/3b6714e7f63b8a87e0acb59c758952513967a59c333a487bcefcafa20859/cs.cmdutils-20240519.tar.gz","yanked":false,"yanked_reason":null}],"20240709":[{"comment_text":"","digests":{"blake2b_256":"f9bc3e50408e0962146be380c741d48d1d5828915c15fc94b8ab46d534ca11d4","md5":"c89b6fc8ad0aecddffa7afaaeded361c","sha256":"0f4a0a3f05b8b05da87954658fa3abaf515752b4e333dc4aad5223d7362f18ad"},"downloads":-1,"filename":"cs.cmdutils-20240709-py3-none-any.whl","has_sig":false,"md5_digest":"c89b6fc8ad0aecddffa7afaaeded361c","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":27118,"upload_time":"2024-07-09T00:55:21","upload_time_iso_8601":"2024-07-09T00:55:21.810833Z","url":"https://files.pythonhosted.org/packages/f9/bc/3e50408e0962146be380c741d48d1d5828915c15fc94b8ab46d534ca11d4/cs.cmdutils-20240709-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"527a3a5a398a089476d19812dfbb90c9cde8c997c07ca5ff56d560d525390510","md5":"a988097a0522b82c7c63a344ca781423","sha256":"0f83532c692e263b687251d76c011abb3fadc6e58a20f499aa16c07082a8d467"},"downloads":-1,"filename":"cs_cmdutils-20240709.tar.gz","has_sig":false,"md5_digest":"a988097a0522b82c7c63a344ca781423","packagetype":"sdist","python_version":"source","requires_python":null,"size":54208,"upload_time":"2024-07-09T00:55:24","upload_time_iso_8601":"2024-07-09T00:55:24.520270Z","url":"https://files.pythonhosted.org/packages/52/7a/3a5a398a089476d19812dfbb90c9cde8c997c07ca5ff56d560d525390510/cs_cmdutils-20240709.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"f9bc3e50408e0962146be380c741d48d1d5828915c15fc94b8ab46d534ca11d4","md5":"c89b6fc8ad0aecddffa7afaaeded361c","sha256":"0f4a0a3f05b8b05da87954658fa3abaf515752b4e333dc4aad5223d7362f18ad"},"downloads":-1,"filename":"cs.cmdutils-20240709-py3-none-any.whl","has_sig":false,"md5_digest":"c89b6fc8ad0aecddffa7afaaeded361c","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":27118,"upload_time":"2024-07-09T00:55:21","upload_time_iso_8601":"2024-07-09T00:55:21.810833Z","url":"https://files.pythonhosted.org/packages/f9/bc/3e50408e0962146be380c741d48d1d5828915c15fc94b8ab46d534ca11d4/cs.cmdutils-20240709-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"527a3a5a398a089476d19812dfbb90c9cde8c997c07ca5ff56d560d525390510","md5":"a988097a0522b82c7c63a344ca781423","sha256":"0f83532c692e263b687251d76c011abb3fadc6e58a20f499aa16c07082a8d467"},"downloads":-1,"filename":"cs_cmdutils-20240709.tar.gz","has_sig":false,"md5_digest":"a988097a0522b82c7c63a344ca781423","packagetype":"sdist","python_version":"source","requires_python":null,"size":54208,"upload_time":"2024-07-09T00:55:24","upload_time_iso_8601":"2024-07-09T00:55:24.520270Z","url":"https://files.pythonhosted.org/packages/52/7a/3a5a398a089476d19812dfbb90c9cde8c997c07ca5ff56d560d525390510/cs_cmdutils-20240709.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
