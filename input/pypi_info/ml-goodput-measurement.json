{"info":{"author":null,"author_email":"Cloud TPU Team <cloud-tpu-eng@google.com>","bugtrack_url":null,"classifiers":["Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],"description":"<!--\n Copyright 2023 Google LLC\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n      https://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n -->\n# ML Goodput Measurement\n\n## Overview\n\n ML Goodput Measurement is a library intended to be used with Cloud TPU to log the\n necessary information and query a job's Goodput. It can be pip installed to\n import its modules, and retrieve information about a training job's overall\n productive Goodput. The package exposes API interfaces to log useful\n information from the user application and query Goodput for the job run, gain\n insight into the productivity of ML workloads and utilization of compute\n resources.\n\n The package also exposes Goodput Monitoring APIs which allow asynchronous query\n and export of the job's Goodput to Tensorboard with configurable upload interval.\n\n## Components\n\n\n The ML Goodput Measurement library consists of the following main components: \n\n  - `GoodputRecorder`\n\n  - `GoodputCalculator`\n  - `GoodputMonitor`\n\n\n The `GoodputRecorder`\n exposes APIs to the client to export key timestamps while a training job makes\n progress, namely APIs that allow logging of productive step time and total job\n run time. The library will serialize and store this data in Google Cloud\n Logging.\n\n The `GoodputCalculator` exposes APIs to compute Goodput based on the\n recorded data. Cloud Logging handles its internal operations asynchronously.\n The recommended way to compute Goodput is to run an analysis program separate\n from the training application, either on a CPU instance or on the users'\n development machine.\n\n The `GoodputMonitor` exposes APIs to query and upload goodput data to\n Tensorboard asynchronously. It does this by instantiating a `GoodputCaluclator`\n under the hood.\n\n## Installation\n\n To install the ML Goodput Measurement package, run the following command on TPU VM:\n\n ```bash\n pip install ml-goodput-measurement\n ```\n\n## Usage\n\nThe usage of this package requires the setup of a Google Cloud project with\nbilling enabled to properly use Google Cloud Logging. If you don't have a Google\nCloud project, or if you don't have billing enabled for your Google Cloud\nproject, then do the following:\n\n1. In the Google Cloud console, on the project selector page,\n [select or create a Google Cloud project](https://cloud.google.com/resource-manager/docs/creating-managing-projects).\n\n2. Make sure that billing is enabled for your Google Cloud project. Instructions can be found [here](https://cloud.google.com/billing/docs/how-to/verify-billing-enabled#console)\n\nTo run your training on Cloud TPU, set up the Cloud TPU environment by following\ninstructions [here](https://cloud.google.com/tpu/docs/setup-gcp-account).\n\nTo learn more about Google Cloud Logging, visit this [page](https://cloud.google.com/logging/docs).\n\n\n### Import\n\n To use this package, import the `goodput` module:\n\n\n ```python\n from ml_goodput_measurement import goodput\n ```\n\n### Define the name of the Google Cloud Logging logger.\n\n Create a run-specific logger name where Cloud Logging entries can be written to and read from.\n\n For example:\n\n ```python\n goodput_logger_name = f'goodput_{config.run_name}'\n ```\n\n### Create a `GoodputRecorder` object\n\n Next, create a recorder object with the following parameters:\n\n 1. `job_name`: The full run name of the job.\n 2. `logger_name`: The name of the Cloud Logging logger object (created in the previous step).\n 3. `logging_enabled`: Whether or not this process has Cloud Logging enabled.\n\n \n \n  > **_NOTE:_** For a multi-worker setup, please ensure that only one worker\n   writes the logs to avoid the duplication. In JAX, for example, the check \n   could be `if jax.process_index() == 0`\n\n\n  > **_NOTE:_** `logging_enabled` defaults to `False` and Goodput computations cannot be completed if no logs are ever written.\n\n For example:\n\n\n ```python\n goodput_recorder = goodput.GoodputRecorder(job_name=config.run_name, logger_name=goodput_logger_name, logging_enabled=(jax.process_index() == 0))\n ```\n\n\n### Record Data with `GoodputRecorder`\n\n#### Record Job Start and End Time\n\n Use the recorder object to record the job's overall start and end time.\n \n For example:\n\n ```python\n def main(argv: Sequence[str]) -> None:\n # Initialize configs…\n goodput_recorder.record_job_start_time(datetime.datetime.now())\n # TPU Initialization and device scanning…\n # Set up other things for the main training loop…\n # Main training loop\n train_loop(config)\n goodput_recorder.record_job_end_time(datetime.datetime.now())\n ```\n\n\n#### Record Step Time\n\n Use the recorder object to record a step's start time using `record_step_start_time(step_count)`:\n\nFor example:\n\n ```python\n def train_loop(config, state=None):\n # Set up mesh, model, state, checkpoint manager…\n\n # Initialize functional train arguments and model parameters…\n\n # Define the compilation\n\n for step in np.arange(start_step, config.steps):\n   goodput_recorder.record_step_start_time(step)\n   # Training step…\n\n return state\n ```\n\n### Retrieve Goodput with `GoodputCalculator`\n\nIn order to retrieve the Goodput of a job run, all you need to do is instantiate\na `GoodputCalculator` object with the job's run name and the Cloud Logging\nlogger name used to record data for that job run. Then call the `get_job_goodput`\nAPI to get the computed Goodput for the job run. \n\nIt is recommended to make the `get_job_goodput` calls for a job run from an\ninstance that runs elsewhere from your training machine.\n\n\n#### Create a `GoodputCalculator` object\n\nCreate the calculator object:\n\n```python\ngoodput_logger_name = f'goodput_{config.run_name}' # You can choose your own logger name.\ngoodput_calculator = goodput.GoodputCalculator(job_name=config.run_name, logger_name=goodput_logger_name)\n```\n\n#### Retrieve Goodput\n\nFinally, call the `get_job_goodput` API to retrieve Goodput for the entire job run.\n\n```python\ntotal_goodput = goodput_calculator.get_job_goodput()\nprint(f\"Total job goodput: {total_goodput:.2f}%\")\n```\n\n### Monitor Goodput with `GoodputMonitor`\n\nIn order to monitor the Goodput of a job run on Tensorboard, all you need to do\nis instantiate a `GoodputMonitor` object with the job's run name, cloud logger \nname and Goodput monitoring configurations (as described below). Then call the \n`start_goodput_uploader` API to asynchronously query and upload measured Goodput\nto the specified Tensorboard directory. \n\n\n#### Create a `GoodputMonitor` object\n\nCreate a `GoodputMonitor` object with the following parameters:\n\n 1. `job_name`: The full run name of the job.\n 2. `logger_name`: The name of the Cloud Logging logger object (created in the previous step).\n 3. `tensorboard_dir`: The directory to write TensorBoard data to.\n 4. `upload_interval`: The time interval at which to query and upload data to TensorBoard.\n 5. `monitoring_enabled`: Whether or not monitoring is enabled. If the application is\n      interested in monitoring Goodput, it should set this value to True. Only one worker \n      should enable monitoring.\n\n> **_NOTE:_** Please ensure that only **one** worker enables monitoring of Goodput.\n   In JAX, for example, the check could be `if jax.process_index() == 0`\n\nFor example:\n\n```python\ngoodput_logger_name = f'goodput_{config.run_name}' # You can choose your own logger name.\ngoodput_monitoring_enabled = config.monitor_goodput and jax.process_index() == 0 # Check for configs whether or not the enable monitoring.\n\ngoodput_monitor = goodput.GoodputMonitor(job_name=config.run_name, logger_name=logger_name, tensorboard_dir=config.tensorboard_dir, upload_interval=config.goodput_upload_interval_seconds, monitoring_enabled=goodput_monitoring_enabled)\n```\n\n#### Start asynchronous \"query and upload\" of Goodput\n\nCall the `start_goodput_uploader` API to spin off a thread which continuously queries and uploads Goodput.\n\n```python\ngoodput_monitor.start_goodput_uploader()\n```\n\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":null,"license":null,"maintainer":null,"maintainer_email":null,"name":"ml-goodput-measurement","package_url":"https://pypi.org/project/ml-goodput-measurement/","platform":null,"project_url":"https://pypi.org/project/ml-goodput-measurement/","project_urls":{"Bug Tracker":"https://github.com/google/cloud_tpu_goodput/issues","Homepage":"https://github.com/google/cloud_tpu_goodput"},"provides_extra":null,"release_url":"https://pypi.org/project/ml-goodput-measurement/0.0.3/","requires_dist":["google-cloud-logging>=3.5.0","numpy","scipy","tensorboard"],"requires_python":">=3.8","summary":"Package to retrieve Goodput of jobs running on Cloud TPU.","version":"0.0.3","yanked":false,"yanked_reason":null},"last_serial":23421202,"releases":{"0.0.1":[{"comment_text":"","digests":{"blake2b_256":"f498353bc7df34c1d06f8eceb816cfdde63ede71953c79f8a59da093408bd79e","md5":"fd5d3510e44115bfd4a7b81996ad2107","sha256":"d3e2ed02ac88cbaa1ade18ce886eff780d807ad791ebcd91e2cbc92094b6e273"},"downloads":-1,"filename":"ml_goodput_measurement-0.0.1-py3-none-any.whl","has_sig":false,"md5_digest":"fd5d3510e44115bfd4a7b81996ad2107","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":9445,"upload_time":"2024-02-27T00:41:40","upload_time_iso_8601":"2024-02-27T00:41:40.854422Z","url":"https://files.pythonhosted.org/packages/f4/98/353bc7df34c1d06f8eceb816cfdde63ede71953c79f8a59da093408bd79e/ml_goodput_measurement-0.0.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"6d9b88d9fdbc60ee517a77c380a8eac7c8510994b52230b785bbd41343181ea0","md5":"bd373879c298c7ce5ec5de361a6f5beb","sha256":"c329758807000e7623064b67c0ded7101d6ad6e33841a9c5f81927eed60ad40b"},"downloads":-1,"filename":"ml_goodput_measurement-0.0.1.tar.gz","has_sig":false,"md5_digest":"bd373879c298c7ce5ec5de361a6f5beb","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":9890,"upload_time":"2024-02-27T00:41:43","upload_time_iso_8601":"2024-02-27T00:41:43.889254Z","url":"https://files.pythonhosted.org/packages/6d/9b/88d9fdbc60ee517a77c380a8eac7c8510994b52230b785bbd41343181ea0/ml_goodput_measurement-0.0.1.tar.gz","yanked":false,"yanked_reason":null}],"0.0.2":[{"comment_text":"","digests":{"blake2b_256":"d50b45cc07b0a8ed4f288d396b55467fc45cb6448857be4a1ec8b31daa95ac08","md5":"e48b7c54aaaf0f462a5b107e9ec9abd9","sha256":"a20b799134dcdabab2ddb6419c00799d67ffc58d6f6455cdca3ebd5b0a31884b"},"downloads":-1,"filename":"ml_goodput_measurement-0.0.2-py3-none-any.whl","has_sig":false,"md5_digest":"e48b7c54aaaf0f462a5b107e9ec9abd9","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":9452,"upload_time":"2024-03-01T02:10:52","upload_time_iso_8601":"2024-03-01T02:10:52.128224Z","url":"https://files.pythonhosted.org/packages/d5/0b/45cc07b0a8ed4f288d396b55467fc45cb6448857be4a1ec8b31daa95ac08/ml_goodput_measurement-0.0.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"302521a1bc98bac8d304a1235e2896b2b512704eed88144b693cebb5735d55b1","md5":"b6dd06ee582936e7a5a4434525e22d1b","sha256":"5d3d9214a1925a441cdd98a005847b31358dd5787bb65ca5230731b184836564"},"downloads":-1,"filename":"ml_goodput_measurement-0.0.2.tar.gz","has_sig":false,"md5_digest":"b6dd06ee582936e7a5a4434525e22d1b","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":9906,"upload_time":"2024-03-01T02:10:53","upload_time_iso_8601":"2024-03-01T02:10:53.800566Z","url":"https://files.pythonhosted.org/packages/30/25/21a1bc98bac8d304a1235e2896b2b512704eed88144b693cebb5735d55b1/ml_goodput_measurement-0.0.2.tar.gz","yanked":false,"yanked_reason":null}],"0.0.3":[{"comment_text":"","digests":{"blake2b_256":"972b4726e3fa97d828470aa24d2d1148503516a093eb3aeb15410d3e0f26f178","md5":"2f22d5f5b7176654b7a5a4e61f38b937","sha256":"12f85921255caf0b47b5f748d536844b1ac5b5021e203fa8d542d158b7ce802e"},"downloads":-1,"filename":"ml_goodput_measurement-0.0.3-py3-none-any.whl","has_sig":false,"md5_digest":"2f22d5f5b7176654b7a5a4e61f38b937","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":15628,"upload_time":"2024-05-29T00:19:02","upload_time_iso_8601":"2024-05-29T00:19:02.691879Z","url":"https://files.pythonhosted.org/packages/97/2b/4726e3fa97d828470aa24d2d1148503516a093eb3aeb15410d3e0f26f178/ml_goodput_measurement-0.0.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1f476bcf7746e3b362d234e43e99f3fa986607ffb5649db11448a844c7c737ab","md5":"831f23045815b41c6c694cc538c2cf34","sha256":"ed23fdc4a824076e6b964f19cd5a3eaf6b058e67d0116bdbb73730e7b683f62b"},"downloads":-1,"filename":"ml_goodput_measurement-0.0.3.tar.gz","has_sig":false,"md5_digest":"831f23045815b41c6c694cc538c2cf34","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":16559,"upload_time":"2024-05-29T00:19:04","upload_time_iso_8601":"2024-05-29T00:19:04.642647Z","url":"https://files.pythonhosted.org/packages/1f/47/6bcf7746e3b362d234e43e99f3fa986607ffb5649db11448a844c7c737ab/ml_goodput_measurement-0.0.3.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"972b4726e3fa97d828470aa24d2d1148503516a093eb3aeb15410d3e0f26f178","md5":"2f22d5f5b7176654b7a5a4e61f38b937","sha256":"12f85921255caf0b47b5f748d536844b1ac5b5021e203fa8d542d158b7ce802e"},"downloads":-1,"filename":"ml_goodput_measurement-0.0.3-py3-none-any.whl","has_sig":false,"md5_digest":"2f22d5f5b7176654b7a5a4e61f38b937","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":15628,"upload_time":"2024-05-29T00:19:02","upload_time_iso_8601":"2024-05-29T00:19:02.691879Z","url":"https://files.pythonhosted.org/packages/97/2b/4726e3fa97d828470aa24d2d1148503516a093eb3aeb15410d3e0f26f178/ml_goodput_measurement-0.0.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1f476bcf7746e3b362d234e43e99f3fa986607ffb5649db11448a844c7c737ab","md5":"831f23045815b41c6c694cc538c2cf34","sha256":"ed23fdc4a824076e6b964f19cd5a3eaf6b058e67d0116bdbb73730e7b683f62b"},"downloads":-1,"filename":"ml_goodput_measurement-0.0.3.tar.gz","has_sig":false,"md5_digest":"831f23045815b41c6c694cc538c2cf34","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":16559,"upload_time":"2024-05-29T00:19:04","upload_time_iso_8601":"2024-05-29T00:19:04.642647Z","url":"https://files.pythonhosted.org/packages/1f/47/6bcf7746e3b362d234e43e99f3fa986607ffb5649db11448a844c7c737ab/ml_goodput_measurement-0.0.3.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
