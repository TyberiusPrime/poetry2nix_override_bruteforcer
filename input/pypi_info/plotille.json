{"info":{"author":"Tammo Ippen","author_email":"tammo.ippen@posteo.de","bugtrack_url":null,"classifiers":["Environment :: Console","Intended Audience :: Science/Research","License :: OSI Approved :: MIT License","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: Implementation :: CPython","Programming Language :: Python :: Implementation :: PyPy","Topic :: Scientific/Engineering :: Visualization","Topic :: Terminals"],"description":"![Hero Plotille](https://github.com/tammoippen/plotille/raw/master/imgs/hero.png)\n\n# Plotille\n\n[![CI](https://github.com/tammoippen/plotille/actions/workflows/CI.yml/badge.svg)](https://github.com/tammoippen/plotille/actions/workflows/CI.yml)\n[![codecov](https://codecov.io/gh/tammoippen/plotille/branch/master/graph/badge.svg?token=OGWI832JNM)](https://codecov.io/gh/tammoippen/plotille)\n[![Language grade: Python](https://img.shields.io/lgtm/grade/python/g/tammoippen/plotille.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/tammoippen/plotille/context:python)\n[![Tested CPython Versions](https://img.shields.io/badge/cpython-3.7%2C%203.8%2C%203.9%2C%203.10%2C%203.11-brightgreen.svg)](https://img.shields.io/badge/cpython-3.7%2C%203.8%2C%203.9%2C%203.10%2C%203.11-brightgreen.svg)\n[![Tested PyPy Versions](https://img.shields.io/badge/pypy-3.8%2C%203.9-brightgreen.svg)](https://img.shields.io/badge/pypy-3.8%2C%203.9-brightgreen.svg)\n[![PyPi version](https://img.shields.io/pypi/v/plotille.svg)](https://pypi.python.org/pypi/plotille)\n[![Downloads](https://pepy.tech/badge/plotille/month)](https://pepy.tech/project/plotille)\n[![PyPi license](https://img.shields.io/pypi/l/plotille.svg)](https://pypi.python.org/pypi/plotille)\n\nPlots, scatter plots, histograms and heatmaps in the terminal using braille dots, and foreground and background colors - with no dependancies. Make complex figures using the Figure class or make fast and simple plots using graphing function - similar to a very small sibling to matplotlib. Or use the canvas to plot dots, lines and images yourself.\n\nInstall:\n\n```sh\npip install plotille\n```\n\nSimilar to other libraries:\n\n- like [drawille](https://github.com/asciimoo/drawille), but focused on graphing â€“ plus X/Y-axis.\n- like [termplot](https://github.com/justnoise/termplot), but with braille (finer dots), left to right histogram and linear interpolation for plotting function.\n- like [termgraph](https://github.com/sgeisler/termgraph) (not on pypi), but very different style.\n- like [terminalplot](https://github.com/kressi/terminalplot), but with braille, X/Y-axis, histogram, linear interpolation.\n\nBasic support for timeseries plotting is provided with release 3.2: for any `X` or `Y` values you can also add `datetime.datetime`, `pendulum.datetime` or `numpy.datetime64` values. Labels are generated respecting the difference of `x_limits` and `y_limits`.\n\nSupport for heatmaps using background colors for figures and displaying images binary with braille, or in color with background colors using the canvas - provided with release 4.0\n\nIf you are still using python 2.7, please use plotille v4 or before. With v5 I am dropping support for python 2.7, as the effort to maintain the discontinued version is too much.\n\n## Documentation\n\n```python\nIn [1]: import plotille\nIn [2]: import numpy as np\nIn [3]: X = np.sort(np.random.normal(size=1000))\n```\n\n### Figure\n\nTo construct plots the recomended way is to use a `Figure`:\n\n```python\nIn [12]: plotille.Figure?\nInit signature: plotille.Figure()\nDocstring:\nFigure class to compose multiple plots.\n\nWithin a Figure you can easily compose many plots, assign labels to plots\nand define the properties of the underlying Canvas. Possible properties that\ncan be defined are:\n\n    width, height: int    Define the number of characters in X / Y direction\n                          which are used for plotting.\n    x_limits: float       Define the X limits of the reference coordinate system,\n                          that will be plottered.\n    y_limits: float       Define the Y limits of the reference coordinate system,\n                          that will be plottered.\n    color_mode: str       Define the used color mode. See `plotille.color()`.\n    with_colors: bool     Define, whether to use colors at all.\n    background: multiple  Define the background color.\n    x_label, y_label: str Define the X / Y axis label.\n```\n\nBasically, you create a `Figure`, define the properties and add your plots. Using the `show()` function, the `Figure` generates the plot using a new canvas:\n\n```python\nIn [13] fig = plotille.Figure()\nIn [14] fig.width = 60\nIn [15] fig.height = 30\nIn [16] fig.set_x_limits(min_=-3, max_=3)\nIn [17] fig.set_y_limits(min_=-1, max_=1)\nIn [18] fig.color_mode = 'byte'\nIn [19] fig.plot([-0.5, 1], [-1, 1], lc=25, label='First line')\nIn [20] fig.scatter(X, np.sin(X), lc=100, label='sin')\nIn [21] fig.plot(X, (X+2)**2 , lc=200, label='square')\nIn [22] print(fig.show(legend=True))\n```\n\n![Example figure](https://github.com/tammoippen/plotille/raw/master/imgs/figure.png)\n\nThe available plotting functions are:\n\n```python\n# create a plot with linear interpolation between points\nFigure.plot(self, X, Y, lc=None, interp='linear', label=None, marker=None)\n# create a scatter plot with no interpolation between points\nFigure.scatter(self, X, Y, lc=None, label=None, marker=None)\n# create a histogram over X\nFigure.histogram(self, X, bins=160, lc=None)\n# print texts at coordinates X, Y\nFigure.text(self, X, Y, texts, lc=None)\n\n# The following functions use relative coordinates on the canvas\n# i.e. all coordinates are \\in [0, 1]\n# plot a vertical line at x\nFigure.axvline(self, x, ymin=0, ymax=1, lc=None)\n# plot a vertical rectangle from (xmin,ymin) to (xmax, ymax).\nFigure.axvspan(self, xmin, xmax, ymin=0, ymax=1, lc=None)\n# plot a horizontal line at y\nFigure.axhline(self, y, xmin=0, xmax=1, lc=None)\n# plot a horizontal rectangle from (xmin,ymin) to (xmax, ymax).\nFigure.axhspan(self, ymin, ymax, xmin=0, xmax=1, lc=None)\n\n# Display data as an image, i.e. on a 2D regular raster.\nFigure.imgshow(self, X, cmap=None)\n```\n\nOther interesting functions are:\n\n```python\n# remove all plots, texts, spans and images from the figure\nFigure.clear(self)\n# Create a canvas, plot the registered plots and return the string for displaying the plot\nFigure.show(self, legend=False)\n```\n\nPlease have a look at the [`examples/`](./examples) folder.\n\n### Graphing\n\nThere are some utility functions for fast graphing of single plots.\n\n#### Plot\n\n```python\nIn [4]: plotille.plot?\nSignature:\nplotille.plot(\n    X,\n    Y,\n    width=80,\n    height=40,\n    X_label='X',\n    Y_label='Y',\n    linesep=os.linesep,\n    interp='linear',\n    x_min=None,\n    x_max=None,\n    y_min=None,\n    y_max=None,\n    lc=None,\n    bg=None,\n    color_mode='names',\n    origin=True,\n    marker=None,\n)\nDocstring:\nCreate plot with X , Y values and linear interpolation between points\n\nParameters:\n    X: List[float]         X values.\n    Y: List[float]         Y values. X and Y must have the same number of entries.\n    width: int             The number of characters for the width (columns) of the canvas.\n    hight: int             The number of characters for the hight (rows) of the canvas.\n    X_label: str           Label for X-axis.\n    Y_label: str           Label for Y-axis. max 8 characters.\n    linesep: str           The requested line seperator. default: os.linesep\n    interp: Optional[str]  Specify interpolation; values None, 'linear'\n    x_min, x_max: float    Limits for the displayed X values.\n    y_min, y_max: float    Limits for the displayed Y values.\n    lc: multiple           Give the line color.\n    bg: multiple           Give the background color.\n    color_mode: str        Specify color input mode; 'names' (default), 'byte' or 'rgb'\n                           see plotille.color.__docs__\n    origin: bool           Whether to print the origin. default: True\n    marker: str            Instead of braille dots set a marker char for actual values.\n\nReturns:\n    str: plot over `X`, `Y`.\n\nIn [5]: print(plotille.plot(X, np.sin(X), height=30, width=60))\n```\n\n![Example plot](https://github.com/tammoippen/plotille/raw/master/imgs/plot.png)\n\n#### Scatter\n\n```python\nIn [6]: plotille.scatter?\nSignature:\nplotille.scatter(\n    X,\n    Y,\n    width=80,\n    height=40,\n    X_label='X',\n    Y_label='Y',\n    linesep='\\n',\n    x_min=None,\n    x_max=None,\n    y_min=None,\n    y_max=None,\n    lc=None,\n    bg=None,\n    color_mode='names',\n    origin=True,\n    marker=None,\n)\nDocstring:\nCreate scatter plot with X , Y values\n\nBasically plotting without interpolation:\n    `plot(X, Y, ... , interp=None)`\n\nParameters:\n    X: List[float]       X values.\n    Y: List[float]       Y values. X and Y must have the same number of entries.\n    width: int           The number of characters for the width (columns) of the canvas.\n    hight: int           The number of characters for the hight (rows) of the canvas.\n    X_label: str         Label for X-axis.\n    Y_label: str         Label for Y-axis. max 8 characters.\n    linesep: str         The requested line seperator. default: os.linesep\n    x_min, x_max: float  Limits for the displayed X values.\n    y_min, y_max: float  Limits for the displayed Y values.\n    lc: multiple         Give the line color.\n    bg: multiple         Give the background color.\n    color_mode: str      Specify color input mode; 'names' (default), 'byte' or 'rgb'\n                         see plotille.color.__docs__\n    origin: bool         Whether to print the origin. default: True\n    marker: str          Instead of braille dots set a marker char.\n\nReturns:\n    str: scatter plot over `X`, `Y`.\n\nIn [7]: print(plotille.scatter(X, np.sin(X), height=30, width=60))\n```\n\n![Example scatter](https://github.com/tammoippen/plotille/raw/master/imgs/scatter.png)\n\n#### Hist\n\nInspired by [crappyhist](http://kevinastraight.x10host.com/2013/12/28/python-histograms-from-the-console/) (link is gone, but I made a [gist](https://gist.github.com/tammoippen/4474e838e969bf177155231ebba52386)).\n\n```python\nIn [8]: plotille.hist?\nSignature:\nplotille.hist(\n    X,\n    bins=40,\n    width=80,\n    log_scale=False,\n    linesep='\\n',\n    lc=None,\n    bg=None,\n    color_mode='names',\n)\nDocstring:\nCreate histogram over `X` from left to right\n\nThe values on the left are the center of the bucket, i.e. `(bin[i] + bin[i+1]) / 2`.\nThe values on the right are the total counts of this bucket.\n\nParameters:\n    X: List[float]       The items to count over.\n    bins: int            The number of bins to put X entries in (rows).\n    width: int           The number of characters for the width (columns).\n    log_scale: bool      Scale the histogram with `log` function.\n    linesep: str         The requested line seperator. default: os.linesep\n    lc: multiple         Give the line color.\n    bg: multiple         Give the background color.\n    color_mode: str      Specify color input mode; 'names' (default), 'byte' or 'rgb'\n                         see plotille.color.__docs__\n\nReturns:\n    str: histogram over `X` from left to right.\n\nIn [9]: print(plotille.hist(np.random.normal(size=10000)))\n```\n\n![Example hist](https://github.com/tammoippen/plotille/raw/master/imgs/hist.png)\n\n#### Hist (aggregated)\n\nThis function allows you to create a histogram when your data is already aggregated (aka you don't have access to raw values, but you have access to bins and counts for each bin).\n\nThis comes handy when working with APIs such as [OpenTelemetry Metrics API](https://opentelemetry-python.readthedocs.io/en/latest/api/metrics.html)\nwhere views such as [ExplicitBucketHistogramAggregation](https://opentelemetry-python.readthedocs.io/en/latest/sdk/metrics.view.html#opentelemetry.sdk.metrics.view.ExplicitBucketHistogramAggregation)\nonly expose access to aggregated values (counts for each bin / bucket).\n\n```python\nIn [8]: plotille.hist_aggregated?\nSignature:\nplotille.hist_aggregated(\n    counts,\n    bins,\n    width=80,\n    log_scale=False,\n    linesep='\\n',\n    lc=None,\n    bg=None,\n    color_mode='names',\n)\nDocstring:\nCreate histogram for aggregated data.\n\nParameters:\n    counts: List[int]    Counts for each bucket.\n    bins: List[float]    Limits for the bins for the provided counts: limits for\n                         bin `i` are `[bins[i], bins[i+1])`.\n                         Hence, `len(bins) == len(counts) + 1`.\n    width: int           The number of characters for the width (columns).\n    log_scale: bool      Scale the histogram with `log` function.\n    linesep: str         The requested line seperator. default: os.linesep\n    lc: multiple         Give the line color.\n    bg: multiple         Give the background color.\n    color_mode: str      Specify color input mode; 'names' (default), 'byte' or 'rgb'\n                         see plotille.color.__docs__\nReturns:\n    str: histogram over `X` from left to right.\n\nIn [9]: counts = [1945, 0, 0, 0, 0, 0, 10555, 798, 0, 28351, 0]\nIn [10]: bins = [float('-inf'), 10, 50, 100, 200, 300, 500, 800, 1000, 2000, 10000, float('+inf')]\nIn [11]: print(plotille.hist_aggregated(counts, bins))\n```\n\nKeep in mind that there must always be n+1 bins (n is a total number of count values, 11 in the example above).\n\nIn this example the first bin is from [-inf, 10) with a count of 1945 and the last bin is from [10000, +inf] with a count of 0.\n\n![Example hist](https://github.com/tammoippen/plotille/raw/master/imgs/hist_aggregated.png)\n\n#### Histogram\n\nThere is also another more 'usual' histogram function available:\n\n```python\nIn [10]: plotille.histogram?\nSignature:\nplotille.histogram(\n    X,\n    bins=160,\n    width=80,\n    height=40,\n    X_label='X',\n    Y_label='Counts',\n    linesep='\\n',\n    x_min=None,\n    x_max=None,\n    y_min=None,\n    y_max=None,\n    lc=None,\n    bg=None,\n    color_mode='names',\n)\nDocstring:\nCreate histogram over `X`\n\nIn contrast to `hist`, this is the more `usual` histogram from bottom\nto up. The X-axis represents the values in `X` and the Y-axis is the\ncorresponding frequency.\n\nParameters:\n    X: List[float]       The items to count over.\n    bins: int            The number of bins to put X entries in (columns).\n    height: int          The number of characters for the height (rows).\n    X_label: str         Label for X-axis.\n    Y_label: str         Label for Y-axis. max 8 characters.\n    linesep: str         The requested line seperator. default: os.linesep\n    x_min, x_max: float  Limits for the displayed X values.\n    y_min, y_max: float  Limits for the displayed Y values.\n    lc: multiple         Give the line color.\n    bg: multiple         Give the background color.\n    color_mode: str      Specify color input mode; 'names' (default), 'byte' or 'rgb'\n                         see plotille.color.__docs__\n\nReturns:\n    str: histogram over `X`.\n\nIn [11]: print(plotille.histogram(np.random.normal(size=10000)))\n```\n\n![Example histogram](https://github.com/tammoippen/plotille/raw/master/imgs/histogram.png)\n\n### Canvas\n\nThe underlying plotting area is modeled as the `Canvas` class:\n\n```python\nIn [12]:  plotille.Canvas?\nInit signature:\nplotille.Canvas(\n    width,\n    height,\n    xmin=0,\n    ymin=0,\n    xmax=1,\n    ymax=1,\n    background=None,\n    **color_kwargs,\n)\nDocstring:\nA canvas object for plotting braille dots\n\nA Canvas object has a `width` x `height` characters large canvas, in which it\ncan plot indivitual braille point, lines out of braille points, rectangles,...\nSince a full braille character has 2 x 4 dots (â£¿), the canvas has `width` * 2, `height` * 4\ndots to plot into in total.\n\nIt maintains two coordinate systems: a reference system with the limits (xmin, ymin)\nin the lower left corner to (xmax, ymax) in the upper right corner is transformed\ninto the canvas discrete, i.e. dots, coordinate system (0, 0) to (`width` * 2, `height` * 4).\nIt does so transparently to clients of the Canvas, i.e. all plotting functions\nonly accept coordinates in the reference system. If the coordinates are outside\nthe reference system, they are not plotted.\nInit docstring:\nInitiate a Canvas object\n\nParameters:\n    width: int            The number of characters for the width (columns) of the canvas.\n    hight: int            The number of characters for the hight (rows) of the canvas.\n    xmin, ymin: float     Lower left corner of reference system.\n    xmax, ymax: float     Upper right corner of reference system.\n    background: multiple  Background color of the canvas.\n    **color_kwargs:       More arguments to the color-function. See `plotille.color()`.\n\nReturns:\n    Canvas object\n```\n\nThe most interesting functions are:\n\n_point:_\n\n```python\nIn [11]: plotille.Canvas.point?\nSignature: plotille.Canvas.point(self, x, y, set_=True, color=None, marker=None)\nDocstring:\nPut a point into the canvas at (x, y) [reference coordinate system]\n\nParameters:\n    x: float         x-coordinate on reference system.\n    y: float         y-coordinate on reference system.\n    set_: bool       Whether to plot or remove the point.\n    color: multiple  Color of the point.\n    marker: str      Instead of braille dots set a marker char.\n```\n\n_line:_\n\n```python\nIn [14]: plotille.Canvas.line?\nSignature: plotille.Canvas.line(self, x0, y0, x1, y1, set_=True, color=None)\nDocstring:\nPlot line between point (x0, y0) and (x1, y1) [reference coordinate system].\n\nParameters:\n    x0, y0: float    Point 0\n    x1, y1: float    Point 1\n    set_: bool       Whether to plot or remove the line.\n    color: multiple  Color of the line.\n```\n\n_rect:_\n\n```python\nIn [15]: plotille.Canvas.rect?\nSignature: plotille.Canvas.rect(self, xmin, ymin, xmax, ymax, set_=True, color=None)\nDocstring:\nPlot rectangle with bbox (xmin, ymin) and (xmax, ymax) [reference coordinate system].\n\nParameters:\n    xmin, ymin: float  Lower left corner of rectangle.\n    xmax, ymax: float  Upper right corner of rectangle.\n    set_: bool         Whether to plot or remove the rect.\n    color: multiple    Color of the rect.\n```\n\n_text:_\n\n```python\nIn [16]: plotille.Canvas.text?\nSignature: plotille.Canvas.text(self, x, y, text, set_=True, color=None)\nDocstring:\nPut some text into the canvas at (x, y) [reference coordinate system]\n\nParameters:\n    x: float         x-coordinate on reference system.\n    y: float         y-coordinate on reference system.\n    set_: bool       Whether to set the text or clear the characters.\n    text: str        The text to add.\n    color: multiple  Color of the point.\n```\n\n_braille_image:_\n\n```python\nIn [17]: plotille.Canvas.braille_image?\nSignature:\nplotille.Canvas.braille_image(\n    self,\n    pixels,\n    threshold=127,\n    inverse=False,\n    set_=True,\n)\nDocstring:\nPrint an image using braille dots into the canvas.\n\nThe pixels and braille dots in the canvas are a 1-to-1 mapping, hence\na 80 x 80 pixel image will need a 40 x 20 canvas.\n\nExample:\n    from PIL import Image\n    import plotille as plt\n\n    img = Image.open(\"/path/to/image\")\n    img = img.convert('L')\n    img = img.resize((80, 80))\n    cvs = plt.Canvas(40, 20)\n    cvs.braille_image(img.getdata(), 125)\n    print(cvs.plot())\n\nParameters:\n    pixels: list[number]  All pixels of the image in one list.\n    threshold: float      All pixels above this threshold will be\n                          drawn.\n    inverse: bool         Whether to invert the image.\n    set_: bool            Whether to plot or remove the dots.\n```\n\n_image:_\n\n```python\nIn [18]: plotille.Canvas.image?\nSignature: plotille.Canvas.image(self, pixels, set_=True)\nDocstring:\nPrint an image using background colors into the canvas.\n\nThe pixels of the image and the characters in the canvas are a\n1-to-1 mapping, hence a 80 x 80 image will need a 80 x 80 canvas.\n\nExample:\n    from PIL import Image\n    import plotille as plt\n\n    img = Image.open(\"/path/to/image\")\n    img = img.convert('RGB')\n    img = img.resize((40, 40))\n    cvs = plt.Canvas(40, 40, mode='rgb')\n    cvs.image(img.getdata())\n    print(cvs.plot())\n\nParameters:\n    pixels: list[(R,G,B)]  All pixels of the image in one list.\n    set_: bool             Whether to plot or remove the background\n                           colors.\n```\n\n_plot:_\n\n```python\nIn [16]: plotille.Canvas.plot?\nSignature: plotille.Canvas.plot(self, linesep='\\n')\nDocstring:\nTransform canvas into `print`-able string\n\nParameters:\n    linesep: str  The requested line seperator. default: os.linesep\n\nReturns:\n    unicode: The canvas as a string.\n```\n\nYou can use it for example to plot a house in the terminal:\n\n```python\nIn [17]: c = Canvas(width=40, height=20)\nIn [18]: c.rect(0.1, 0.1, 0.6, 0.6)\nIn [19]: c.line(0.1, 0.1, 0.6, 0.6)\nIn [20]: c.line(0.1, 0.6, 0.6, 0.1)\nIn [21]: c.line(0.1, 0.6, 0.35, 0.8)\nIn [22]: c.line(0.35, 0.8, 0.6, 0.6)\nIn [23]: print(c.plot())\n```\n\n![House](https://github.com/tammoippen/plotille/raw/master/imgs/house.png)\n\nOr you could render images with braille dots:\n\n```python\nIn [24]: img = Image.open('https://github.com/tammoippen/plotille/raw/master/imgs/ich.jpg')\nIn [25]: img = img.convert('L')\nIn [26]: img = img.resize((80, 80))\nIn [27]: cvs = Canvas(40, 20)\nIn [28]: cvs.braille_image(img.getdata())\nIn [29]: print(cvs.plot())\n```\n\n![Me with dots](https://github.com/tammoippen/plotille/raw/master/imgs/ich-dots.png)\n\nOr you could render images with the background color of characters:\n\n```python\nIn [24]: img = Image.open('https://github.com/tammoippen/plotille/raw/master/imgs/ich.jpg')\nIn [25]: img = img.convert('RGB')\nIn [25]: img = img.resize((80, 40))\nIn [27]: cvs = Canvas(80, 40, mode=\"rgb\")\nIn [28]: cvs.image(img.getdata())\nIn [29]: print(cvs.plot())\n```\n\n![Me with chars](https://github.com/tammoippen/plotille/raw/master/imgs/ich-chars.png)\n\n## Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/tammoippen/plotille.svg)](https://starchart.cc/tammoippen/plotille)\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/tammoippen/plotille","keywords":"plot,scatter,histogram,terminal,braille,unicode,timeseries","license":"MIT","maintainer":"","maintainer_email":"","name":"plotille","package_url":"https://pypi.org/project/plotille/","platform":null,"project_url":"https://pypi.org/project/plotille/","project_urls":{"Homepage":"https://github.com/tammoippen/plotille","Repository":"https://github.com/tammoippen/plotille"},"provides_extra":null,"release_url":"https://pypi.org/project/plotille/5.0.0/","requires_dist":null,"requires_python":">=3.7,<4.0","summary":"Plot in the terminal using braille dots.","version":"5.0.0","yanked":false,"yanked_reason":null},"last_serial":15953131,"releases":{"1.0":[{"comment_text":"","digests":{"blake2b_256":"a0285e36201897aa6333bde1918b8b42a2a8bface7b18cdef4fc9bfd01ad5e0a","md5":"372337a32601d01bcc00e88bcf878426","sha256":"9430a5742b2596fe2375a1a3aceb8a4bd7bdcc88a3a0bb357a361b76b8132e36"},"downloads":-1,"filename":"plotille-1.0.tar.gz","has_sig":false,"md5_digest":"372337a32601d01bcc00e88bcf878426","packagetype":"sdist","python_version":"source","requires_python":null,"size":8593,"upload_time":"2017-09-27T14:26:39","upload_time_iso_8601":"2017-09-27T14:26:39.399865Z","url":"https://files.pythonhosted.org/packages/a0/28/5e36201897aa6333bde1918b8b42a2a8bface7b18cdef4fc9bfd01ad5e0a/plotille-1.0.tar.gz","yanked":false,"yanked_reason":null}],"1.1":[{"comment_text":"","digests":{"blake2b_256":"dbd8c83495c72baea351ac5ee87bd26c5a69434f89af531098da8a98f2ada0b9","md5":"4ba807cfe0b7a9599189102b1cc69442","sha256":"2e2e49a4977ff80f7e1c183b5bcc4c8a572c4f5db3ad132435fb89e7b2970502"},"downloads":-1,"filename":"plotille-1.1.tar.gz","has_sig":false,"md5_digest":"4ba807cfe0b7a9599189102b1cc69442","packagetype":"sdist","python_version":"source","requires_python":null,"size":15862,"upload_time":"2017-09-28T08:47:31","upload_time_iso_8601":"2017-09-28T08:47:31.386421Z","url":"https://files.pythonhosted.org/packages/db/d8/c83495c72baea351ac5ee87bd26c5a69434f89af531098da8a98f2ada0b9/plotille-1.1.tar.gz","yanked":false,"yanked_reason":null}],"1.2":[{"comment_text":"","digests":{"blake2b_256":"ddec40070bf2c788361dd9eba775d4389caf103a76eb663f240e1177f0f9c585","md5":"4ebae3d534cb1b5d1cfec2b19d07f1e9","sha256":"6a307c5bc88744f1dbef1d1f2c373c15978c8ff5e45305d50f881ff308cac01d"},"downloads":-1,"filename":"plotille-1.2.tar.gz","has_sig":false,"md5_digest":"4ebae3d534cb1b5d1cfec2b19d07f1e9","packagetype":"sdist","python_version":"source","requires_python":null,"size":15867,"upload_time":"2017-09-28T09:41:00","upload_time_iso_8601":"2017-09-28T09:41:00.239919Z","url":"https://files.pythonhosted.org/packages/dd/ec/40070bf2c788361dd9eba775d4389caf103a76eb663f240e1177f0f9c585/plotille-1.2.tar.gz","yanked":false,"yanked_reason":null}],"1.3":[{"comment_text":"","digests":{"blake2b_256":"f72578be7ba03bc7fa63bde0c90c466e5334a1622884bac250d2ba2c3bc637fd","md5":"48e2ce3d489a6f687fe6820a88def541","sha256":"5e18e6c77c7c073d1882f69c1f04dbb88a7df85e6e10476d2ba4b60039ac25f5"},"downloads":-1,"filename":"plotille-1.3.tar.gz","has_sig":false,"md5_digest":"48e2ce3d489a6f687fe6820a88def541","packagetype":"sdist","python_version":"source","requires_python":null,"size":7495,"upload_time":"2017-10-04T09:57:59","upload_time_iso_8601":"2017-10-04T09:57:59.430424Z","url":"https://files.pythonhosted.org/packages/f7/25/78be7ba03bc7fa63bde0c90c466e5334a1622884bac250d2ba2c3bc637fd/plotille-1.3.tar.gz","yanked":false,"yanked_reason":null}],"1.4":[{"comment_text":"","digests":{"blake2b_256":"a9d1082f201016a8c40c7d671308e4b092ee2b3e345c560df53ebb01d519cec1","md5":"fdd655dd86e951b50d4601ad4bf2a7d3","sha256":"e6d546cc34dac8d764dc39fcb6e0f7e143dddb96684008460204df97564c3d2e"},"downloads":-1,"filename":"plotille-1.4.tar.gz","has_sig":false,"md5_digest":"fdd655dd86e951b50d4601ad4bf2a7d3","packagetype":"sdist","python_version":"source","requires_python":null,"size":7745,"upload_time":"2017-10-06T11:27:15","upload_time_iso_8601":"2017-10-06T11:27:15.018349Z","url":"https://files.pythonhosted.org/packages/a9/d1/082f201016a8c40c7d671308e4b092ee2b3e345c560df53ebb01d519cec1/plotille-1.4.tar.gz","yanked":false,"yanked_reason":null}],"1.5":[{"comment_text":"","digests":{"blake2b_256":"258708246c39fd2c034c566bd30f19ad92811f2a0572dfc4ebdf96701cba03a7","md5":"c4b04449a840269c533360eaf3f44201","sha256":"98ff71cee0f4f547ba9dd755dac754d2993dab2c5c13580bdc4c2ecb58eae2c0"},"downloads":-1,"filename":"plotille-1.5.tar.gz","has_sig":false,"md5_digest":"c4b04449a840269c533360eaf3f44201","packagetype":"sdist","python_version":"source","requires_python":null,"size":7911,"upload_time":"2017-11-01T22:06:14","upload_time_iso_8601":"2017-11-01T22:06:14.519949Z","url":"https://files.pythonhosted.org/packages/25/87/08246c39fd2c034c566bd30f19ad92811f2a0572dfc4ebdf96701cba03a7/plotille-1.5.tar.gz","yanked":false,"yanked_reason":null}],"2.0":[{"comment_text":"","digests":{"blake2b_256":"8a9d925d76770ee0be7b1b310b9a74c35911ec15d9659c21fb8a00262bd13f50","md5":"31a178871994aaa3de4b2e4f50aee54c","sha256":"1777d2a14eb1a1e25dbff160650a0de6481a1bf83a551c77b30c493e04b45520"},"downloads":-1,"filename":"plotille-2.0.tar.gz","has_sig":false,"md5_digest":"31a178871994aaa3de4b2e4f50aee54c","packagetype":"sdist","python_version":"source","requires_python":null,"size":18633,"upload_time":"2017-11-08T23:20:11","upload_time_iso_8601":"2017-11-08T23:20:11.351397Z","url":"https://files.pythonhosted.org/packages/8a/9d/925d76770ee0be7b1b310b9a74c35911ec15d9659c21fb8a00262bd13f50/plotille-2.0.tar.gz","yanked":false,"yanked_reason":null}],"2.1":[{"comment_text":"","digests":{"blake2b_256":"239c26f803da70b1c7b455141413084169990daaa0cac59396c7cbe91694e825","md5":"233c9fc33b4fa0f06f01239acc755af2","sha256":"ff6a306fa89d9b28c2485ccb37ef64a85dcf6d8dbbae3d0784dda49e007eb2c1"},"downloads":-1,"filename":"plotille-2.1.tar.gz","has_sig":false,"md5_digest":"233c9fc33b4fa0f06f01239acc755af2","packagetype":"sdist","python_version":"source","requires_python":null,"size":19178,"upload_time":"2017-11-09T11:02:45","upload_time_iso_8601":"2017-11-09T11:02:45.992266Z","url":"https://files.pythonhosted.org/packages/23/9c/26f803da70b1c7b455141413084169990daaa0cac59396c7cbe91694e825/plotille-2.1.tar.gz","yanked":false,"yanked_reason":null}],"3.0":[{"comment_text":"","digests":{"blake2b_256":"27e8530998e97a609ce4a6a586df2d6564dfca841895dea90faa06335563b7d4","md5":"7a2ea13f29f8d16e079e44d6c8ec928e","sha256":"ce8f8f03360982ba85c7aa500703b7ce8511bca3920cae8060b3298b85fb5f02"},"downloads":-1,"filename":"plotille-3.0.tar.gz","has_sig":false,"md5_digest":"7a2ea13f29f8d16e079e44d6c8ec928e","packagetype":"sdist","python_version":"source","requires_python":null,"size":31735,"upload_time":"2017-12-15T12:52:32","upload_time_iso_8601":"2017-12-15T12:52:32.976735Z","url":"https://files.pythonhosted.org/packages/27/e8/530998e97a609ce4a6a586df2d6564dfca841895dea90faa06335563b7d4/plotille-3.0.tar.gz","yanked":false,"yanked_reason":null}],"3.1":[{"comment_text":"","digests":{"blake2b_256":"175927e449b694ca22c7cbfccf107959b9a34b344d9e7fec3a4cb7d8a761bf5a","md5":"a79438e601a64dc99cea7e7e75af9b2e","sha256":"a6734851e33adf8268d455d7abe30f2004a76f9cdbd4bfae4a74fd2bb6f33b96"},"downloads":-1,"filename":"plotille-3.1.tar.gz","has_sig":false,"md5_digest":"a79438e601a64dc99cea7e7e75af9b2e","packagetype":"sdist","python_version":"source","requires_python":null,"size":31730,"upload_time":"2017-12-19T08:50:39","upload_time_iso_8601":"2017-12-19T08:50:39.034205Z","url":"https://files.pythonhosted.org/packages/17/59/27e449b694ca22c7cbfccf107959b9a34b344d9e7fec3a4cb7d8a761bf5a/plotille-3.1.tar.gz","yanked":false,"yanked_reason":null}],"3.2":[{"comment_text":"","digests":{"blake2b_256":"79a73c6d90f190347eb763bfda6d9ebed6dacbc2779f650bfc414c4f26927f56","md5":"ad82c63f071d2fa86a372fca4cf377de","sha256":"cdfa26de6c11a20d999b1fea9d559e12d7aee07bb393ff7b86d22fe20763ddf4"},"downloads":-1,"filename":"plotille-3.2.tar.gz","has_sig":false,"md5_digest":"ad82c63f071d2fa86a372fca4cf377de","packagetype":"sdist","python_version":"source","requires_python":null,"size":37504,"upload_time":"2018-02-01T18:57:11","upload_time_iso_8601":"2018-02-01T18:57:11.086612Z","url":"https://files.pythonhosted.org/packages/79/a7/3c6d90f190347eb763bfda6d9ebed6dacbc2779f650bfc414c4f26927f56/plotille-3.2.tar.gz","yanked":false,"yanked_reason":null}],"3.3":[{"comment_text":"","digests":{"blake2b_256":"c1a3bd99782c73368820bdcf1a068cf24f6cbbd1d55e2ab56e9ef561bc203a57","md5":"61a19ea741d8cd74f38b0393bd239944","sha256":"46a92f83caed6d75b32d551fd4ea3283760d83d7f6afffa41b259a19df82246e"},"downloads":-1,"filename":"plotille-3.3.tar.gz","has_sig":false,"md5_digest":"61a19ea741d8cd74f38b0393bd239944","packagetype":"sdist","python_version":"source","requires_python":null,"size":38704,"upload_time":"2018-02-14T12:06:25","upload_time_iso_8601":"2018-02-14T12:06:25.003166Z","url":"https://files.pythonhosted.org/packages/c1/a3/bd99782c73368820bdcf1a068cf24f6cbbd1d55e2ab56e9ef561bc203a57/plotille-3.3.tar.gz","yanked":false,"yanked_reason":null}],"3.4":[{"comment_text":"","digests":{"blake2b_256":"79e15f6bd323fe54e0a7f8ae23de485b3728054850defd4c85f5a5799aa0d2fe","md5":"ccdd365236a3ca52b8b604bd7bc8c1f9","sha256":"6c769771d92f58b073a0dce7704d04d121ab7c3cc64899c0c353d8748f3cea1d"},"downloads":-1,"filename":"plotille-3.4.tar.gz","has_sig":false,"md5_digest":"ccdd365236a3ca52b8b604bd7bc8c1f9","packagetype":"sdist","python_version":"source","requires_python":null,"size":38684,"upload_time":"2018-04-26T14:46:10","upload_time_iso_8601":"2018-04-26T14:46:10.241454Z","url":"https://files.pythonhosted.org/packages/79/e1/5f6bd323fe54e0a7f8ae23de485b3728054850defd4c85f5a5799aa0d2fe/plotille-3.4.tar.gz","yanked":false,"yanked_reason":null}],"3.5":[{"comment_text":"","digests":{"blake2b_256":"f0ac7189188586c3d3b9988b0238cd089e7495e2b7946bcbdaeb24127a3946b7","md5":"51709d1bc154150a1b180c9d61c8983f","sha256":"d2d11bf0bd013982d7703590188b43815dff8ff7af2755f2ff4f065cff5e4b6e"},"downloads":-1,"filename":"plotille-3.5.tar.gz","has_sig":false,"md5_digest":"51709d1bc154150a1b180c9d61c8983f","packagetype":"sdist","python_version":"source","requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*","size":20628,"upload_time":"2018-12-17T08:39:05","upload_time_iso_8601":"2018-12-17T08:39:05.633327Z","url":"https://files.pythonhosted.org/packages/f0/ac/7189188586c3d3b9988b0238cd089e7495e2b7946bcbdaeb24127a3946b7/plotille-3.5.tar.gz","yanked":false,"yanked_reason":null}],"3.6":[{"comment_text":"","digests":{"blake2b_256":"8e573b59580d3abe1c6b0b634a52f52488cff924d54c088d12561db0c8b48e96","md5":"be714b41311a70a06f56f1b2135a48e9","sha256":"ec8db66473a81290f794fc9d86c0b2fd9486dda9ee5a97835ead05a8e64cd6fe"},"downloads":-1,"filename":"plotille-3.6.tar.gz","has_sig":false,"md5_digest":"be714b41311a70a06f56f1b2135a48e9","packagetype":"sdist","python_version":"source","requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*","size":20918,"upload_time":"2019-03-29T10:54:37","upload_time_iso_8601":"2019-03-29T10:54:37.004511Z","url":"https://files.pythonhosted.org/packages/8e/57/3b59580d3abe1c6b0b634a52f52488cff924d54c088d12561db0c8b48e96/plotille-3.6.tar.gz","yanked":false,"yanked_reason":null}],"3.7":[{"comment_text":"","digests":{"blake2b_256":"2216219daf27f7af6bec6b8f6dd1fe928e2723e4f9def04139aa5be8adea1800","md5":"37f4d0ae326185a6bb95958bd9a72510","sha256":"44afcfaf9d276c6eeef9978bf480127f33f046fe4f88d177bd4899b2acd266a2"},"downloads":-1,"filename":"plotille-3.7.tar.gz","has_sig":false,"md5_digest":"37f4d0ae326185a6bb95958bd9a72510","packagetype":"sdist","python_version":"source","requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*","size":22263,"upload_time":"2019-07-17T12:54:37","upload_time_iso_8601":"2019-07-17T12:54:37.996096Z","url":"https://files.pythonhosted.org/packages/22/16/219daf27f7af6bec6b8f6dd1fe928e2723e4f9def04139aa5be8adea1800/plotille-3.7.tar.gz","yanked":false,"yanked_reason":null}],"3.7.1":[{"comment_text":"","digests":{"blake2b_256":"0803109ec5035ca215c9ef249d9bcbc8606f97f80e32ae54bb8d2e5793aad9da","md5":"d20f6779dd2a05dc2359eb104a854508","sha256":"8dac93703d2b1e936a13cefa74842d3a32caa01229ba47fad42990240f7b0de3"},"downloads":-1,"filename":"plotille-3.7.1.tar.gz","has_sig":false,"md5_digest":"d20f6779dd2a05dc2359eb104a854508","packagetype":"sdist","python_version":"source","requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*","size":22687,"upload_time":"2020-08-31T20:08:29","upload_time_iso_8601":"2020-08-31T20:08:29.609834Z","url":"https://files.pythonhosted.org/packages/08/03/109ec5035ca215c9ef249d9bcbc8606f97f80e32ae54bb8d2e5793aad9da/plotille-3.7.1.tar.gz","yanked":false,"yanked_reason":null}],"3.7.2":[{"comment_text":"","digests":{"blake2b_256":"c94f3dc20a4a0d7f064d10687baf172568b5873938090ff374b7683eaf40a57b","md5":"a28552c1e7ce916654f6b1a8578d4041","sha256":"3160ab0330c3c44aa5d4363c60ef8fd2b12f13778998ab499d2c6721dc7c0628"},"downloads":-1,"filename":"plotille-3.7.2.tar.gz","has_sig":false,"md5_digest":"a28552c1e7ce916654f6b1a8578d4041","packagetype":"sdist","python_version":"source","requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*","size":22737,"upload_time":"2020-09-11T15:12:13","upload_time_iso_8601":"2020-09-11T15:12:13.866778Z","url":"https://files.pythonhosted.org/packages/c9/4f/3dc20a4a0d7f064d10687baf172568b5873938090ff374b7683eaf40a57b/plotille-3.7.2.tar.gz","yanked":false,"yanked_reason":null}],"3.8.0":[{"comment_text":"","digests":{"blake2b_256":"4ba2cb9a0f1837f39a6b90916dbf75a16f5cc9a61f213b971ceee3a96f7be0f3","md5":"f69a81faca6537d0d41fb4ee72891407","sha256":"6bc4e386c5e0684fb1a6fb0854df9465e652912502f45a6b7a4fe4c550de53ec"},"downloads":-1,"filename":"plotille-3.8.0.tar.gz","has_sig":false,"md5_digest":"f69a81faca6537d0d41fb4ee72891407","packagetype":"sdist","python_version":"source","requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*","size":26433,"upload_time":"2021-07-06T09:20:48","upload_time_iso_8601":"2021-07-06T09:20:48.089451Z","url":"https://files.pythonhosted.org/packages/4b/a2/cb9a0f1837f39a6b90916dbf75a16f5cc9a61f213b971ceee3a96f7be0f3/plotille-3.8.0.tar.gz","yanked":false,"yanked_reason":null}],"4.0.0":[{"comment_text":"","digests":{"blake2b_256":"26121068fbc5b1444f1d6bed0050b138c7c0e4e9b65f1cf7f60beab706115531","md5":"79dbfa8e4b69bcb316709dcdd03826a8","sha256":"9f17b69255d30250c84966150dbbbf7341bf042e572d400600bbf4dc406f2676"},"downloads":-1,"filename":"plotille-4.0.0.tar.gz","has_sig":false,"md5_digest":"79dbfa8e4b69bcb316709dcdd03826a8","packagetype":"sdist","python_version":"source","requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*","size":51998,"upload_time":"2021-12-14T16:55:25","upload_time_iso_8601":"2021-12-14T16:55:25.201107Z","url":"https://files.pythonhosted.org/packages/26/12/1068fbc5b1444f1d6bed0050b138c7c0e4e9b65f1cf7f60beab706115531/plotille-4.0.0.tar.gz","yanked":false,"yanked_reason":null}],"4.0.1":[{"comment_text":"","digests":{"blake2b_256":"aa06469a59dd919ec27dcd42b76271b5f19db26d8c3bdfa813718821684e2a94","md5":"51deaa6b9acb448a149889b83e66c1ac","sha256":"8298ad16b508cc46fb50584c6d7ea1fb4ae85a0add20b00090c5744e1ae537e0"},"downloads":-1,"filename":"plotille-4.0.1.tar.gz","has_sig":false,"md5_digest":"51deaa6b9acb448a149889b83e66c1ac","packagetype":"sdist","python_version":"source","requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*","size":52016,"upload_time":"2021-12-14T17:17:58","upload_time_iso_8601":"2021-12-14T17:17:58.178902Z","url":"https://files.pythonhosted.org/packages/aa/06/469a59dd919ec27dcd42b76271b5f19db26d8c3bdfa813718821684e2a94/plotille-4.0.1.tar.gz","yanked":false,"yanked_reason":null}],"4.0.2":[{"comment_text":"","digests":{"blake2b_256":"03c7323294800b0fa097f7c6fccceca28feb2840deed7abe7210585d651dc0f0","md5":"0d7a673961e06e45dd252a393f726cfa","sha256":"12ea212ce561d0d2bc131b16ea5768b2a43d642e0016403c86f0ba4e9f997a3b"},"downloads":-1,"filename":"plotille-4.0.2.tar.gz","has_sig":false,"md5_digest":"0d7a673961e06e45dd252a393f726cfa","packagetype":"sdist","python_version":"source","requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*","size":52175,"upload_time":"2022-02-19T09:57:35","upload_time_iso_8601":"2022-02-19T09:57:35.570570Z","url":"https://files.pythonhosted.org/packages/03/c7/323294800b0fa097f7c6fccceca28feb2840deed7abe7210585d651dc0f0/plotille-4.0.2.tar.gz","yanked":false,"yanked_reason":null}],"5.0.0":[{"comment_text":"","digests":{"blake2b_256":"8a733f342572f7f916e387e546cc502d6cad35e7162ba0bcde203669e15aa3af","md5":"eb3321c57d043b91d5a136e175445391","sha256":"99e5ca51a2e4c922ead3a3b0863cc2c6a9a4b3f701944589df10f42ce02ab3dc"},"downloads":-1,"filename":"plotille-5.0.0.tar.gz","has_sig":false,"md5_digest":"eb3321c57d043b91d5a136e175445391","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":53392,"upload_time":"2022-12-01T09:55:22","upload_time_iso_8601":"2022-12-01T09:55:22.008023Z","url":"https://files.pythonhosted.org/packages/8a/73/3f342572f7f916e387e546cc502d6cad35e7162ba0bcde203669e15aa3af/plotille-5.0.0.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"8a733f342572f7f916e387e546cc502d6cad35e7162ba0bcde203669e15aa3af","md5":"eb3321c57d043b91d5a136e175445391","sha256":"99e5ca51a2e4c922ead3a3b0863cc2c6a9a4b3f701944589df10f42ce02ab3dc"},"downloads":-1,"filename":"plotille-5.0.0.tar.gz","has_sig":false,"md5_digest":"eb3321c57d043b91d5a136e175445391","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":53392,"upload_time":"2022-12-01T09:55:22","upload_time_iso_8601":"2022-12-01T09:55:22.008023Z","url":"https://files.pythonhosted.org/packages/8a/73/3f342572f7f916e387e546cc502d6cad35e7162ba0bcde203669e15aa3af/plotille-5.0.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
