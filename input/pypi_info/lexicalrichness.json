{"info":{"author":"Lucas Shen YS","author_email":"lucas@lucasshen.com","bugtrack_url":null,"classifiers":["Development Status :: 2 - Pre-Alpha","Intended Audience :: Developers","License :: OSI Approved :: MIT License","Natural Language :: English","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],"description":"===============\nLexicalRichness\n===============\n|\t|pypi| |conda-forge| |latest-release| |python-ver| \n|\t|ci-status| |rtfd| |maintained|\n|\t|PRs| |codefactor| |isort|\n|\t|license| |mybinder| |zenodo|\n\n`LexicalRichness <https://github.com/lsys/lexicalrichness>`__ is a small Python module to compute textual lexical richness (aka lexical diversity) measures.\n\nLexical richness refers to the range and variety of vocabulary deployed in a text by a speaker/writer `(McCarthy and Jarvis 2007) <https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.1028.8657&rep=rep1&type=pdf>`_ . Lexical richness is used interchangeably with lexical diversity, lexical variation, lexical density, and vocabulary richness and is measured by a wide variety of indices. Uses include (but not limited to) measuring writing quality, vocabulary knowledge `(Šišková 2012) <https://www.researchgate.net/publication/305999633_Lexical_Richness_in_EFL_Students'_Narratives>`_ , speaker competence, and socioeconomic status `(McCarthy and Jarvis 2007) <https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.1028.8657&rep=rep1&type=pdf>`_. \nSee the `notebook <https://nbviewer.org/github/LSYS/LexicalRichness/blob/master/docs/example.ipynb>`_ for examples.\n\n.. TOC\n.. contents:: **Table of Contents**\n   :depth: 1\n   :local:\n\t\n1. Installation\n---------------\n**Install using PIP**\n\n.. code-block:: bash\n\n\tpip install lexicalrichness\n\nIf you encounter, \n\n.. code-block:: python\n\n\tModuleNotFoundError: No module named 'textblob'\n\ninstall textblob:\n\n.. code-block:: bash\n\n\tpip install textblob\n\n*Note*: This error should only exist for :code:`versions <= v0.1.3`. Fixed in \n`v0.1.4 <https://github.com/LSYS/LexicalRichness/releases/tag/0.1.4>`__ by `David Lesieur <https://github.com/davidlesieur>`__ and `Christophe Bedetti <https://github.com/cbedetti>`__.\n\n\n**Install from Conda-Forge**\n\n*LexicalRichness* is now also available on conda-forge. If you have are using the `Anaconda <https://www.anaconda.com/distribution/#download-section>`__ or `Miniconda <https://docs.conda.io/en/latest/miniconda.html>`__ distribution, you can create a conda environment and install the package from conda.\n\n.. code-block:: bash\n\n\tconda create -n lex\n\tconda activate lex \n\tconda install -c conda-forge lexicalrichness\n\n*Note*: If you get the error :code:`CommandNotFoundError: Your shell has not been properly configured to use 'conda activate'` with :code:`conda activate lex` in *Bash* either try\n\n\t* :code:`conda activate bash` in the *Anaconda Prompt* and then retry :code:`conda activate lex` in *Bash*\n\t* or just try :code:`source activate lex` in *Bash*\n\n**Install manually using Git and GitHub**\n\n.. code-block:: bash\n\n\tgit clone https://github.com/LSYS/LexicalRichness.git\n\tcd LexicalRichness\n\tpip install .\n\n**Run from the cloud**\n\nTry the package on the cloud (without setting anything up on your local machine) by clicking the icon here:  \n\n|mybinder|\n\n\n\n2. Quickstart\n-------------\n\n.. code-block:: python\n\n\t>>> from lexicalrichness import LexicalRichness\n\n\t# text example\n\t>>> text = \"\"\"Measure of textual lexical diversity, computed as the mean length of sequential words in\n            \t\ta text that maintains a minimum threshold TTR score.\n\n            \t\tIterates over words until TTR scores falls below a threshold, then increase factor\n            \t\tcounter by 1 and start over. McCarthy and Jarvis (2010, pg. 385) recommends a factor\n            \t\tthreshold in the range of [0.660, 0.750].\n            \t\t(McCarthy 2005, McCarthy and Jarvis 2010)\"\"\"\n\n\t# instantiate new text object (use the tokenizer=blobber argument to use the textblob tokenizer)\n\t>>> lex = LexicalRichness(text)\n\n\t# Return word count.\n\t>>> lex.words\n\t57\n\n\t# Return (unique) word count.\n\t>>> lex.terms\n\t39\n\n\t# Return type-token ratio (TTR) of text.\n\t>>> lex.ttr\n\t0.6842105263157895\n\n\t# Return root type-token ratio (RTTR) of text.\n\t>>> lex.rttr\n\t5.165676192553671\n\n\t# Return corrected type-token ratio (CTTR) of text.\n\t>>> lex.cttr\n\t3.6526846651686067\n\n\t# Return mean segmental type-token ratio (MSTTR).\n\t>>> lex.msttr(segment_window=25)\n\t0.88\n\n\t# Return moving average type-token ratio (MATTR).\n\t>>> lex.mattr(window_size=25)\n\t0.8351515151515151\n\n\t# Return Measure of Textual Lexical Diversity (MTLD).\n\t>>> lex.mtld(threshold=0.72)\n\t46.79226361031519\n\n\t# Return hypergeometric distribution diversity (HD-D) measure.\n\t>>> lex.hdd(draws=42)\n\t0.7468703323966486\n\t\n\t# Return voc-D measure.\n\t>>> lex.vocd(ntokens=50, within_sample=100, iterations=3)\n\t46.27679899103406\n\n\t# Return Herdan's lexical diversity measure.\n\t>>> lex.Herdan\n\t0.9061378160786574\n\n\t# Return Summer's lexical diversity measure.\n\t>>> lex.Summer\n\t0.9294460323356605\n\n\t# Return Dugast's lexical diversity measure.\n\t>>> lex.Dugast\n\t43.074336212149774\n\n\t# Return Maas's lexical diversity measure.\n\t>>> lex.Maas\n\t0.023215679867353005\n\n\t# Return Yule's K.\n\t>>> lex.yulek\n\t153.8935056940597\n\n\t# Return Yule's I.\n\t>>> lex.yulei\n\t22.36764705882353\n\t\n\t# Return Herdan's Vm.\n\t>>> lex.herdanvm\n\t0.08539428890448784\n\n\t# Return Simpson's D.\n\t>>> lex.simpsond\n\t0.015664160401002505\n\n\t\n3. Use LexicalRichness in your own pipeline\n-------------------------------------------\n:code:`LexicalRichness` comes packaged with minimal preprocessing + tokenization for a quick start. \n\nBut for intermediate users, you likely have your preferred :code:`nlp_pipeline`:\n\n.. code-block:: python\n\n\t# Your preferred preprocessing + tokenization pipeline\n\tdef nlp_pipeline(text):\n\t    ...\n\t    return list_of_tokens\n\nUse :code:`LexicalRichness` with your own :code:`nlp_pipeline`:\n\n.. code-block:: python\n\n\t# Initiate new LexicalRichness object with your preprocessing pipeline as input\n\tlex = LexicalRichness(text, preprocessor=None, tokenizer=nlp_pipeline)\n\n\t# Compute lexical richness\n\tmtld = lex.mtld()\n\t\nOr use :code:`LexicalRichness` at the end of your pipeline and input the :code:`list_of_tokens` with :code:`preprocessor=None` and :code:`tokenizer=None`:\n\t\n.. code-block:: python\n\n\t# Preprocess the text\n\tlist_of_tokens = nlp_pipeline(text)\n\t\n\t# Initiate new LexicalRichness object with your list of tokens as input\n\tlex = LexicalRichness(list_of_tokens, preprocessor=None, tokenizer=None)\n\n\t# Compute lexical richness\n\tmtld = lex.mtld()\t\n\t\n4. Using with Pandas\n--------------------\nHere's a minimal example using `lexicalrichness` with a `Pandas` `dataframe` with a column containing text:\n\n.. code-block:: python\n\n\tdef mtld(text):\n\t    lex = LexicalRichness(text)\n\t    return lex.mtld()\n\t\t\n\tdf['mtld'] = df['text'].apply(mtld)\n\n\n5. Attributes\n-------------\n\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``wordlist``            | list of words                                                   \t\t      |\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``words``  \t\t  | number of words (w) \t\t\t\t   \t\t\t      |\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``terms``\t\t  | number of unique terms (t)\t\t\t                                      |\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``preprocessor``        | preprocessor used\t\t                                                      |\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``tokenizer``           | tokenizer used\t\t                                                      |\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``ttr``\t\t  | type-token ratio computed as t / w (Chotlos 1944, Templin 1957)         \t      |\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``rttr``\t          | root TTR computed as t / sqrt(w) (Guiraud 1954, 1960)                             |\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``cttr``\t          | corrected TTR computed as t / sqrt(2w) (Carrol 1964)\t\t              |\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``Herdan`` \t          | log(t) / log(w) (Herdan 1960, 1964)                                               |\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``Summer``    \t  | log(log(t)) / log(log(w)) (Summer 1966)                                           |\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``Dugast``          \t  | (log(w) ** 2) / (log(w) - log(t) (Dugast 1978)\t\t\t\t      |\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``Maas`` \t          | (log(w) - log(t)) / (log(w) ** 2) (Maas 1972)                                     |\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``yulek``\t          | Yule's K (Yule 1944, Tweedie and Baayen 1998)                                     |\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``yulei``\t          | Yule's I (Yule 1944, Tweedie and Baayen 1998)                                     |\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``herdanvm``\t          | Herdan's Vm (Herdan 1955, Tweedie and Baayen 1998)                                |\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``simpsond``\t          | Simpson's D (Simpson 1949, Tweedie and Baayen 1998)                               |\n+-------------------------+-----------------------------------------------------------------------------------+\n\n6. Methods\n----------\n\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``msttr``            \t  | Mean segmental TTR (Johnson 1944)\t\t\t\t\t\t      |\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``mattr``  \t\t  | Moving average TTR (Covington 2007, Covington and McFall 2010)\t\t      |\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``mtld``\t\t  | Measure of Lexical Diversity (McCarthy 2005, McCarthy and Jarvis 2010)            |\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``hdd``                 | HD-D (McCarthy and Jarvis 2007)                                                   |\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``vocd``                | voc-D (Mckee, Malvern, and Richards 2010)                                         |\n+-------------------------+-----------------------------------------------------------------------------------+\n| ``vocd_fig``            | Utility to plot empirical voc-D curve \t                                      |\n+-------------------------+-----------------------------------------------------------------------------------+\n\n**Plot the empirical voc-D curve**\n\n.. code-block:: python\n\n\tlex.vocd_fig(\n\t    ntokens=50,  # Maximum number for the token/word size in the random samplings\n\t    within_sample=100,  # Number of samples\n\t    seed=42,  # Seed for reproducibility\n\t)\n\n.. image:: https://raw.githubusercontent.com/LSYS/LexicalRichness/master/docs/images/vocd.png\n\t:width: 450\n\n\n**Assessing method docstrings**\n\n.. code-block:: python\n\n\t>>> import inspect\n\n\t# docstring for hdd (HD-D)\n\t>>> print(inspect.getdoc(LexicalRichness.hdd))\n\n\tHypergeometric distribution diversity (HD-D) score.\n\n\tFor each term (t) in the text, compute the probabiltiy (p) of getting at least one appearance\n\tof t with a random draw of size n < N (text size). The contribution of t to the final HD-D\n\tscore is p * (1/n). The final HD-D score thus sums over p * (1/n) with p computed for\n\teach term t. Described in McCarthy and Javis 2007, p.g. 465-466.\n\t(McCarthy and Jarvis 2007)\n\n\tParameters\n\t__________\n\tdraws: int\n\t    Number of random draws in the hypergeometric distribution (default=42).\n\n\tReturns\n\t_______\n\tfloat\n\t\nAlternatively, just do\n\n.. code-block:: python\n\n\t>>> print(lex.hdd.__doc__)\n\t\n\tHypergeometric distribution diversity (HD-D) score.\n\n            For each term (t) in the text, compute the probabiltiy (p) of getting at least one appearance\n            of t with a random draw of size n < N (text size). The contribution of t to the final HD-D\n            score is p * (1/n). The final HD-D score thus sums over p * (1/n) with p computed for\n            each term t. Described in McCarthy and Javis 2007, p.g. 465-466.\n            (McCarthy and Jarvis 2007)\n\n            Parameters\n            ----------\n            draws: int\n                Number of random draws in the hypergeometric distribution (default=42).\n\n            Returns\n            -------\n            float\t\n\t    \n7. Formulation & Algorithmic Details\n------------------------------------\nFor details under the hood, please see `this section <https://lexicalrichness.readthedocs.io/en/latest/#details-of-lexical-richness-measures>`_ in the docs (or `see here <https://www.lucasshen.com/software/lexicalrichness/doc#details-of-lexical-richness-measures>`_).\n\n\t    \n8. Example use cases\n--------------------\n* `[1] <https://doi.org/10.1007/s10579-021-09562-4>`_ **SENTiVENT** used the metrics that LexicalRichness provides to estimate the classification difficulty of annotated categories in their corpus (Jacobs & Hoste 2020). The metrics show which categories will be more difficult for modeling approaches that rely on linguistic inputs because greater lexical diversity means greater data scarcity and more need for generalization. (h/t Gilles Jacobs)\n\n\tJacobs, Gilles, and Véronique Hoste. \"SENTiVENT: enabling supervised information extraction of company-specific events in economic and financial news.\" Language Resources and Evaluation (2021): 1-33.\n\n    \n* | `[2] <https://www.lucasshen.com/research/media.pdf>`_ **Measuring political media using text data.** This chapter of my thesis investigates whether political media bias manifests by coverage accuracy. As covaraites, I use characteristics of the text data (political speech and news article transcripts). One of the ways speeches can be characterized is via lexical richness.\n\n* `[3] <https://github.com/notnews/unreadable_news>`_ **Unreadable News: How Readable is American News?** This study characterizes modern news by readability and lexical richness. Focusing on the NYT, they find increasing readability and lexical richness, suggesting that NYT feels competition from alternative sources to be accessible while maintaining its key demographic of college-educated Americans. \n\n* `[4] <https://github.com/g-hurst/Comparing-Properties-of-German-and-English-Books>`_ **German is more complicated than English** This study analyses a small sample of English books and compares them to their German translation. Within the sample, it can be observed that the German translations tend to be shorter in length, but contain more unique terms than their English counterparts. LexicalRichness was used to generate the statistics modeled within the study. \n\n\t    \n9. Contributing\n---------------\n**Author**\n\n`Lucas Shen <https://www.lucasshen.com/>`__\n\n**Contributors**\n\n.. image:: https://contrib.rocks/image?repo=lsys/lexicalrichness\n   :target: https://github.com/lsys/lexicalrichness/graphs/contributors\n\nContributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. \nSee here for `how to contribute  <./docs//CONTRIBUTING.rst>`__ to this project.\nSee here for `Contributor Code of\nConduct <http://contributor-covenant.org/version/1/0/0/>`__.\n\nIf you'd like to contribute via a Pull Request (PR), feel free to open an issue on the `Issue Tracker\n<https://github.com/LSYS/LexicalRichness/issues>`__ to discuss the potential contribution via a PR.\n\n10. Citing\n----------\nIf you have used this codebase and wish to cite it, here is the citation metadata.\n\nCodebase:\n\n.. code-block:: bib\n\n\t@misc{lex,\n\t\tauthor = {Shen, Lucas},\n\t\tdoi = {10.5281/zenodo.6607007},\n\t\tlicense = {MIT license},\n\t\ttitle = {{LexicalRichness: A small module to compute textual lexical richness}},\n\t\turl = {https://github.com/LSYS/lexicalrichness},\n\t\tyear = {2022}\n\t}\n\nDocumentation on formulations and algorithms:\n\n.. code-block:: bib\n\n\t@misc{accuracybias, \n\t\ttitle={Measuring Political Media Slant Using Text Data},\n\t\tauthor={Shen, Lucas},\n\t\turl={https://www.lucasshen.com/research/media.pdf},\n\t\tyear={2021}\n\t}\n\nThe package is released under the `MIT\nLicense <https://opensource.org/licenses/MIT>`__.\n\n.. macros -------------------------------------------------------------------------------------------------------\n.. badges\n.. |pypi| image:: https://badge.fury.io/py/lexicalrichness.svg\n\t:target: https://pypi.org/project/lexicalrichness/\n.. |conda-forge| image:: https://img.shields.io/conda/vn/conda-forge/lexicalrichness   \n\t:target: https://anaconda.org/conda-forge/lexicalrichness\n.. |latest-release| image:: https://img.shields.io/github/v/release/lsys/lexicalrichness   \n\t:target: https://github.com/LSYS/LexicalRichness/releases\n.. |ci-status| image:: https://github.com/LSYS/LexicalRichness/actions/workflows/build.yml/badge.svg?branch=master   \n\t:target: https://github.com/LSYS/LexicalRichness/actions/workflows/build.yml\n.. |python-ver| image:: https://img.shields.io/pypi/pyversions/lexicalrichness   \n\t:target: https://img.shields.io/pypi/pyversions/lexicalrichness\n.. |codefactor| image:: https://www.codefactor.io/repository/github/lsys/lexicalrichness/badge\n\t:target: https://www.codefactor.io/repository/github/lsys/lexicalrichness     \n.. |lgtm| image:: https://img.shields.io/lgtm/grade/python/g/LSYS/LexicalRichness.svg?logo=lgtm&logoWidth=18)\n\t:target: https://lgtm.com/projects/g/LSYS/LexicalRichness/context:python   \n.. |maintained| image:: https://img.shields.io/badge/Maintained%3F-yes-green.svg\n   :target: https://GitHub.com/Naereen/StrapDown.js/graphs/commit-   \n.. |PRs| image:: https://img.shields.io/badge/PRs-welcome-brightgreen.svg\n\t:target: http://makeapullrequest.com   \n.. |license| image:: https://img.shields.io/github/license/LSYS/LexicalRichness?color=blue&label=License  \n\t:target: https://github.com/LSYS/LexicalRichness/blob/master/LICENSE   \n.. |mybinder| image:: https://mybinder.org/badge_logo.svg\n   :target: https://mybinder.org/v2/gh/LSYS/lexicaldiversity-example/main?labpath=example.ipynb\t\n.. |zenodo| image:: https://zenodo.org/badge/DOI/10.5281/zenodo.6607007.svg\n   :target: https://doi.org/10.5281/zenodo.6607007\n\t\t\n.. |rtfd| image:: https://readthedocs.org/projects/lexicalrichness/badge/?version=latest\n    :target: https://lexicalrichness.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n.. |isort| image:: https://img.shields.io/badge/%20imports-isort-%231674b1?style=flat&amp;labelColor=ef8336\n\t:target: https://pycqa.github.io/isort\n\t:alt: Imports: isort\n","description_content_type":"text/x-rst","docs_url":null,"download_url":"https://github.com/LSYS/LexicalRichness/archive/refs/tags/v0.5.1.tar.gz","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/LSYS/lexicalrichness","keywords":"lexical diversity,lexical richness,vocabulary diversity,lexical density,lexical,nlp,data science,natural language processing,information retrieval,data mining,natural langauge,lexical analysis,api,lexical analyzer,linguistic analysis,statistics","license":"MIT license","maintainer":"","maintainer_email":"","name":"lexicalrichness","package_url":"https://pypi.org/project/lexicalrichness/","platform":null,"project_url":"https://pypi.org/project/lexicalrichness/","project_urls":{"Download":"https://github.com/LSYS/LexicalRichness/archive/refs/tags/v0.5.1.tar.gz","Homepage":"https://github.com/LSYS/lexicalrichness"},"provides_extra":null,"release_url":"https://pypi.org/project/lexicalrichness/0.5.1/","requires_dist":null,"requires_python":"","summary":"A small module to compute textual lexical richness (aka lexical diversity).","version":"0.5.1","yanked":false,"yanked_reason":null},"last_serial":19468625,"releases":{"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"aec5e855e3250bc155b79bd30fb5b500833c78d26d186442c63651b54d4366c1","md5":"fd4aef0b16a97ae6aca9091c0f8491ae","sha256":"6a31c65ee5b5fa2f7a115677fbd0ab9a4f22e99f95748be476f806028c083407"},"downloads":-1,"filename":"lexicalrichness-0.1.0.zip","has_sig":false,"md5_digest":"fd4aef0b16a97ae6aca9091c0f8491ae","packagetype":"sdist","python_version":"source","requires_python":null,"size":23187,"upload_time":"2018-05-09T06:09:45","upload_time_iso_8601":"2018-05-09T06:09:45.251704Z","url":"https://files.pythonhosted.org/packages/ae/c5/e855e3250bc155b79bd30fb5b500833c78d26d186442c63651b54d4366c1/lexicalrichness-0.1.0.zip","yanked":false,"yanked_reason":null}],"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"5cf257554457e97666a9bef85e762688f368c6654a1921afa5cc118ae5a470b4","md5":"1b7fb4353482c49e6088f5d578cb92c9","sha256":"a5536d40985ad79f9d891acb6266ed2d3dfd838fba92bf706faf3f8d2293435f"},"downloads":-1,"filename":"lexicalrichness-0.1.1.tar.gz","has_sig":false,"md5_digest":"1b7fb4353482c49e6088f5d578cb92c9","packagetype":"sdist","python_version":"source","requires_python":null,"size":11459,"upload_time":"2018-05-09T06:34:09","upload_time_iso_8601":"2018-05-09T06:34:09.363135Z","url":"https://files.pythonhosted.org/packages/5c/f2/57554457e97666a9bef85e762688f368c6654a1921afa5cc118ae5a470b4/lexicalrichness-0.1.1.tar.gz","yanked":false,"yanked_reason":null}],"0.1.10":[{"comment_text":"","digests":{"blake2b_256":"d39cfba1e6c38702002b2c45f76c74a6762405a8a09ccdf4e8c236fa741d7beb","md5":"6cbfca3aed8eb0e68460d1832e3d96f2","sha256":"f5458b080700803d2dc7cb053df3fb892dc758715dd72c45187b63d61a829c63"},"downloads":-1,"filename":"lexicalrichness-0.1.10.tar.gz","has_sig":false,"md5_digest":"6cbfca3aed8eb0e68460d1832e3d96f2","packagetype":"sdist","python_version":"source","requires_python":null,"size":70291,"upload_time":"2022-08-20T08:49:16","upload_time_iso_8601":"2022-08-20T08:49:16.626665Z","url":"https://files.pythonhosted.org/packages/d3/9c/fba1e6c38702002b2c45f76c74a6762405a8a09ccdf4e8c236fa741d7beb/lexicalrichness-0.1.10.tar.gz","yanked":false,"yanked_reason":null}],"0.1.2":[{"comment_text":"","digests":{"blake2b_256":"6d6ec7c7a1eb1e8ef0a9e084bc42500faf6951c63bcc33dd6bb9652d9cedaf58","md5":"625cc6a916560e89513d5a03c247d4d1","sha256":"5e4f0dbe62eb88b6e4e3d33e71c986d6a05641d69bf79cba9d08a0fa13368815"},"downloads":-1,"filename":"lexicalrichness-0.1.2.tar.gz","has_sig":false,"md5_digest":"625cc6a916560e89513d5a03c247d4d1","packagetype":"sdist","python_version":"source","requires_python":null,"size":15404,"upload_time":"2018-05-09T07:14:35","upload_time_iso_8601":"2018-05-09T07:14:35.666425Z","url":"https://files.pythonhosted.org/packages/6d/6e/c7c7a1eb1e8ef0a9e084bc42500faf6951c63bcc33dd6bb9652d9cedaf58/lexicalrichness-0.1.2.tar.gz","yanked":false,"yanked_reason":null}],"0.1.3":[{"comment_text":"","digests":{"blake2b_256":"1f3a0e07cec04fea93aa215187a633d7e87b8cba1a7973aec6aedbb9cd269b8c","md5":"f29747daac03d480634a983562586c81","sha256":"6cd01115dca19b360ca765640810402d992b3e1262b8739f7976b6a2e01f74a2"},"downloads":-1,"filename":"lexicalrichness-0.1.3.tar.gz","has_sig":false,"md5_digest":"f29747daac03d480634a983562586c81","packagetype":"sdist","python_version":"source","requires_python":null,"size":15561,"upload_time":"2018-05-27T16:00:01","upload_time_iso_8601":"2018-05-27T16:00:01.067958Z","url":"https://files.pythonhosted.org/packages/1f/3a/0e07cec04fea93aa215187a633d7e87b8cba1a7973aec6aedbb9cd269b8c/lexicalrichness-0.1.3.tar.gz","yanked":false,"yanked_reason":null}],"0.1.4":[{"comment_text":"","digests":{"blake2b_256":"b048e78c877826b6100d0d9145ad3b99fe6fa2066a0f1b999daff98c44bdf1e3","md5":"512f0b909a8ba6087f0172d39b6b1a94","sha256":"a25d20cf0113a62ecf62a539eb5854edddb3f7627c8db6b72196f6043fee2859"},"downloads":-1,"filename":"lexicalrichness-0.1.4.tar.gz","has_sig":false,"md5_digest":"512f0b909a8ba6087f0172d39b6b1a94","packagetype":"sdist","python_version":"source","requires_python":null,"size":18713,"upload_time":"2021-11-13T08:05:19","upload_time_iso_8601":"2021-11-13T08:05:19.162434Z","url":"https://files.pythonhosted.org/packages/b0/48/e78c877826b6100d0d9145ad3b99fe6fa2066a0f1b999daff98c44bdf1e3/lexicalrichness-0.1.4.tar.gz","yanked":false,"yanked_reason":null}],"0.1.6":[{"comment_text":"","digests":{"blake2b_256":"1e9bdb5c352a1e13b69f085cd19e08fdcffa5c4cd81132780388af0802ba0af6","md5":"ec30c278981f07875b2856d930d93a32","sha256":"7c79dcd50906876d62777808222d2c51b7f465c355a4ca799535a5d016fa9151"},"downloads":-1,"filename":"lexicalrichness-0.1.6.tar.gz","has_sig":false,"md5_digest":"ec30c278981f07875b2856d930d93a32","packagetype":"sdist","python_version":"source","requires_python":null,"size":18209,"upload_time":"2022-06-03T08:16:10","upload_time_iso_8601":"2022-06-03T08:16:10.521119Z","url":"https://files.pythonhosted.org/packages/1e/9b/db5c352a1e13b69f085cd19e08fdcffa5c4cd81132780388af0802ba0af6/lexicalrichness-0.1.6.tar.gz","yanked":false,"yanked_reason":null}],"0.1.9":[{"comment_text":"","digests":{"blake2b_256":"4477ba6d1d42a3a9771b97a6b78f1d29f5a670afab25c45e3c10f280027c1895","md5":"47c79ec45e94e8d927b6d49f2c3a4e21","sha256":"188961d139866ea4645c6412e8536f230243e5e0f02c4f53f23d028902f979cf"},"downloads":-1,"filename":"lexicalrichness-0.1.9.tar.gz","has_sig":false,"md5_digest":"47c79ec45e94e8d927b6d49f2c3a4e21","packagetype":"sdist","python_version":"source","requires_python":null,"size":21028,"upload_time":"2022-06-04T01:28:07","upload_time_iso_8601":"2022-06-04T01:28:07.706486Z","url":"https://files.pythonhosted.org/packages/44/77/ba6d1d42a3a9771b97a6b78f1d29f5a670afab25c45e3c10f280027c1895/lexicalrichness-0.1.9.tar.gz","yanked":false,"yanked_reason":null}],"0.2.0":[{"comment_text":"","digests":{"blake2b_256":"a79bcff5a7b9c8ab7bd0690597ebf3e0f18a17646a66fa319e59c681d1111c75","md5":"280f18db731f76f45364972dd447dc6b","sha256":"46fa32e49b480083352486d3743e2dcb24dec477774826ddee7d71810ed71af7"},"downloads":-1,"filename":"lexicalrichness-0.2.0.tar.gz","has_sig":false,"md5_digest":"280f18db731f76f45364972dd447dc6b","packagetype":"sdist","python_version":"source","requires_python":null,"size":70301,"upload_time":"2022-08-20T09:10:07","upload_time_iso_8601":"2022-08-20T09:10:07.996483Z","url":"https://files.pythonhosted.org/packages/a7/9b/cff5a7b9c8ab7bd0690597ebf3e0f18a17646a66fa319e59c681d1111c75/lexicalrichness-0.2.0.tar.gz","yanked":false,"yanked_reason":null}],"0.3.0":[{"comment_text":"","digests":{"blake2b_256":"077ce7040420a134f6acd9dd2fcc0345b882765b1a5e387e1887e2449c5ba5dd","md5":"1f500f642d16458d3fb8ae1b74847b1c","sha256":"457363b9d9ef84bcf0cf93c28e4150960be1bc60bf55b57ce67fbda2dd566214"},"downloads":-1,"filename":"lexicalrichness-0.3.0.tar.gz","has_sig":false,"md5_digest":"1f500f642d16458d3fb8ae1b74847b1c","packagetype":"sdist","python_version":"source","requires_python":null,"size":74111,"upload_time":"2022-10-29T06:03:06","upload_time_iso_8601":"2022-10-29T06:03:06.534595Z","url":"https://files.pythonhosted.org/packages/07/7c/e7040420a134f6acd9dd2fcc0345b882765b1a5e387e1887e2449c5ba5dd/lexicalrichness-0.3.0.tar.gz","yanked":false,"yanked_reason":null}],"0.3.1":[{"comment_text":"","digests":{"blake2b_256":"464de65b636f07655331ea936bff9c1fa65be2635dd86984e63208cfb53046d8","md5":"4ca1b35ff80c5870b44ae9e49dc38519","sha256":"7225bacf0e51c8b24176a61b2ccb4fecca9074f8d68c3d48a959b6a4810794d8"},"downloads":-1,"filename":"lexicalrichness-0.3.1.tar.gz","has_sig":false,"md5_digest":"4ca1b35ff80c5870b44ae9e49dc38519","packagetype":"sdist","python_version":"source","requires_python":null,"size":76601,"upload_time":"2022-12-25T15:01:49","upload_time_iso_8601":"2022-12-25T15:01:49.343348Z","url":"https://files.pythonhosted.org/packages/46/4d/e65b636f07655331ea936bff9c1fa65be2635dd86984e63208cfb53046d8/lexicalrichness-0.3.1.tar.gz","yanked":false,"yanked_reason":null}],"0.4.0":[{"comment_text":"","digests":{"blake2b_256":"4fca589d436ed043d072d6184f84c47dbaf14459097ea0c8036f59b04a7c3713","md5":"c7d01673d221ef1d73b85d01f3f8d1a9","sha256":"2c0e23ebcd88bbd078e35f84ddc39eb2435ff787868c1ea484a61453294cdccc"},"downloads":-1,"filename":"lexicalrichness-0.4.0.tar.gz","has_sig":false,"md5_digest":"c7d01673d221ef1d73b85d01f3f8d1a9","packagetype":"sdist","python_version":"source","requires_python":null,"size":97363,"upload_time":"2023-01-11T03:18:58","upload_time_iso_8601":"2023-01-11T03:18:58.474534Z","url":"https://files.pythonhosted.org/packages/4f/ca/589d436ed043d072d6184f84c47dbaf14459097ea0c8036f59b04a7c3713/lexicalrichness-0.4.0.tar.gz","yanked":false,"yanked_reason":null}],"0.4.1":[{"comment_text":"","digests":{"blake2b_256":"96bf4b5f1f5238083c10f53e7073f935bd73fd736c8660737e5625879085c942","md5":"5bb644b8684b3fd4cdff7549940d8e67","sha256":"68fd0e42a102ea2df04d1173e9a3f27b15efc42ea74c3006f9d52c06b73a591a"},"downloads":-1,"filename":"lexicalrichness-0.4.1.tar.gz","has_sig":false,"md5_digest":"5bb644b8684b3fd4cdff7549940d8e67","packagetype":"sdist","python_version":"source","requires_python":null,"size":96278,"upload_time":"2023-02-07T05:30:56","upload_time_iso_8601":"2023-02-07T05:30:56.520468Z","url":"https://files.pythonhosted.org/packages/96/bf/4b5f1f5238083c10f53e7073f935bd73fd736c8660737e5625879085c942/lexicalrichness-0.4.1.tar.gz","yanked":false,"yanked_reason":null}],"0.5.0":[{"comment_text":"","digests":{"blake2b_256":"f0318971ab300aceb7f70af1d211950334c3c0f9a0c2fa3c4c0e03f3e0c85bb5","md5":"2291bafe826b5d0328e122dae7464bb8","sha256":"128734f0347c5c0a5a21f7b8e505ba79d5d54a45a7cf21b063902c5b0034c82d"},"downloads":-1,"filename":"lexicalrichness-0.5.0.tar.gz","has_sig":false,"md5_digest":"2291bafe826b5d0328e122dae7464bb8","packagetype":"sdist","python_version":"source","requires_python":null,"size":96475,"upload_time":"2023-03-06T06:33:15","upload_time_iso_8601":"2023-03-06T06:33:15.116065Z","url":"https://files.pythonhosted.org/packages/f0/31/8971ab300aceb7f70af1d211950334c3c0f9a0c2fa3c4c0e03f3e0c85bb5/lexicalrichness-0.5.0.tar.gz","yanked":false,"yanked_reason":null}],"0.5.1":[{"comment_text":"","digests":{"blake2b_256":"d64af67555e6cce1f3c44291e429cb5377c6117bbe7c0fc6fa77a15674f292da","md5":"94732797f878c938e57f340a9a094af4","sha256":"e38ba6753d4c48c58cb9bd7c12d548e1565e4d4a657976fb2e02dc196f44d97f"},"downloads":-1,"filename":"lexicalrichness-0.5.1.tar.gz","has_sig":false,"md5_digest":"94732797f878c938e57f340a9a094af4","packagetype":"sdist","python_version":"source","requires_python":null,"size":97765,"upload_time":"2023-08-27T05:26:20","upload_time_iso_8601":"2023-08-27T05:26:20.835656Z","url":"https://files.pythonhosted.org/packages/d6/4a/f67555e6cce1f3c44291e429cb5377c6117bbe7c0fc6fa77a15674f292da/lexicalrichness-0.5.1.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"d64af67555e6cce1f3c44291e429cb5377c6117bbe7c0fc6fa77a15674f292da","md5":"94732797f878c938e57f340a9a094af4","sha256":"e38ba6753d4c48c58cb9bd7c12d548e1565e4d4a657976fb2e02dc196f44d97f"},"downloads":-1,"filename":"lexicalrichness-0.5.1.tar.gz","has_sig":false,"md5_digest":"94732797f878c938e57f340a9a094af4","packagetype":"sdist","python_version":"source","requires_python":null,"size":97765,"upload_time":"2023-08-27T05:26:20","upload_time_iso_8601":"2023-08-27T05:26:20.835656Z","url":"https://files.pythonhosted.org/packages/d6/4a/f67555e6cce1f3c44291e429cb5377c6117bbe7c0fc6fa77a15674f292da/lexicalrichness-0.5.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
