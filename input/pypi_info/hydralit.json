{"info":{"author":"Jackson Storm","author_email":"c6lculus8ntr0py@gmail.com","bugtrack_url":null,"classifiers":["Operating System :: OS Independent","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],"description":" \r\n # **Hydralit** <img src=\"https://github.com/TangleSpace/hydralit/raw/main/docs/images/hydra.png\" alt=\"hydra\" width=\"50\"/>\r\nThe Hydralit package is a wrapping and template project to combine multiple independant (or somewhat dependant) Streamlit applications into a multi-page application.\r\n\r\nCurrently the project implements a host application HydraApp and each child application simply needs to be either a class deriving from the HydraHeadApp class and implementing a single, simple method, run() for maximum profit, or you can use a Flask style decorator on your functions to add them directly as seperate Streamlit pages.\r\n\r\nWhen converting existing applications, you can effectively put all the existing code inside the run() method and create a wrapper class deriving from HydraHeadApp or put a decorator over the function. Then you create the parent app as an instance of HydraApp, add your child apps to it (see example [secure_app.py](\"https://github.com/TangleSpace/hydralit-example/blob/main/secure_app.py\")) and with only a few lines of code everything will magically come together.\r\n\r\n<br>\r\n\r\n## **Version 1.0.14 fixes session state refactor performed by Streamlit, maybe after changing it 10 times they'll settle on a way forward, or they're just trying to constantly break the Hydralit package, wtf knows.**\r\n - Now compatible with Streamlit >=1.12, thanks to the tireless efforts of [saikumarmk](https://github.com/saikumarmk)\r\n\r\n <br>\r\n\r\n## **Version 1.0.13 fixes the long standing stupidty of Streamlit constantly changing the method name of the session context manager, now works with Streamlit 1.9.x and above.**\r\n - Added the ability to disable to use of the app loader within the constructor.\r\n<br>\r\n\r\n## **Version 1.0.12 fixes an edge case when installing with Streamlit for the first time.**\r\n<br>\r\n\r\n## **Hydralit now fully supports all versions of Streamlit, including 1.4.0, despite the odd changes made in version 1.4.0 that completely broke Hydralit.**\r\n<br>\r\n\r\n## **Hydralit >=1.0.3 now requires a minimum version of Streamlit >=0.86.x to fully support the recently migrated beta containers, if using Streamlit <=0.85.x please continue to use Hydralit <=1.0.2**\r\n\r\n\r\n<br>\r\n<p align=\"center\">\r\n\t<a href=\"https://pepy.tech/project/hydralit/\" alt=\"PyPI downloads\">\r\n\t<img src=\"https://pepy.tech/badge/hydralit\" />\r\n\t</a>\r\n    <a href=\"https://www.python.org/\" alt=\"Python version\">\r\n        <img src=\"https://img.shields.io/pypi/pyversions/hydralit\" /></a>\r\n    <a href=\"https://pypi.org/project/hydralit/\" alt=\"PyPI version\">\r\n        <img src=\"https://img.shields.io/pypi/v/hydralit\" /></a>\r\n    <a href=\"https://hydralit.aur-license.org/\" alt=\"License\">\r\n        <img src=\"http://img.shields.io/:license-Apache-blue.svg?style=flat-square\"></a>\r\n    <a href=\"https://streamlit.io/\" alt=\"Streamlit\">\r\n        <img src=\"http://img.shields.io/:streamlit->=0.86.0-blue.svg?style=flat-square\"></a>\r\n</p>\r\n\r\n## Installation\r\nHydralit can be installed from PyPI:\r\n\r\n```bash\r\npip install -U hydralit\r\n```\r\n\r\n<h1><a href=\"https://hydralit-secure-sample.herokuapp.com/\">You can see what's possible using Hydralit here!</a></h1>\r\n\r\n# Lightning Example\r\n ```python\r\n#when we import hydralit, we automatically get all of Streamlit\r\nimport hydralit as hy\r\n\r\napp = hy.HydraApp(title='Simple Multi-Page App')\r\n\r\n@app.addapp()\r\ndef my_home():\r\n  hy.info('Hello from app1')\r\n\r\n@app.addapp()\r\ndef app2():\r\n  hy.info('Hello from app 2')\r\n\r\n\r\n#Run the whole lot, we get navbar, state management and app isolation, all with this tiny amount of work.\r\napp.run()\r\n ```\r\n \r\n This tiny amount of code creates a menu and pages that render when the target function is called by selecting it from the menu.\r\n <p align=\"center\">\r\n<img src=\"https://github.com/TangleSpace/hydralit_components/blob/main/resources/baby_demo.gif?raw=true\" title=\"Quick Example\" alt=\"Quick Example\", width=\"100%\" height=\"100%\">\r\n</p>\r\n\r\n\r\n## Latest features (version 1.0.11)\r\n - Fully supports all versions of Streamlit, including 1.4.0 (big thanks to [oggers](https://github.com/oggers) for some amazing support!).\r\n - Fixed the missing error handling bug, now all exceptions are raised to be handled however the user chooses instead of capturing and displaying an image. (big thanks to [rambam613](https://github.com/rambam613) for finding and fixing this bug, very nice!).\r\n - Can completely customise the Home and Logout menu entries, title and icon data from the add_app entry will be used for these items now as well as the existing.\r\n<p align=\"center\">\r\n<img src=\"https://github.com/TangleSpace/hydralit_components/blob/main/resources/customised_navbar.PNG?raw=true\" title=\"Navbar\" alt=\"Navbar\", width=\"100%\" height=\"100%\">\r\n</p>\r\n\r\n - Cleaned up the formatting when running in sticky and hiding Streamlit headers and footers, yes, they will come back now when using the navbar.\r\n - Removed the background effort for all loader animations (everyone hated this).\r\n - Smaller, sleeker navbar, including a much nicer non-animated mode.\r\n  <p align=\"center\">\r\n<img src=\"https://github.com/TangleSpace/hydralit_components/blob/main/resources/non-animated_navbar.PNG?raw=true\" title=\"Navbar\" alt=\"Navbar\", width=\"100%\" height=\"100%\">\r\n</p>\r\n\r\n - Full offline support for Font Awesome and Bootstrap icons for navbar entries, as well as all emojis.\r\n - Improved performance with some refactoring of the session and transition code, apps load faster now.\r\n\r\n<br><br\r\n\r\n## Version 1.0.10 features\r\n - Added Flask like decorators to convert any function into a child app (see example below)\r\n - Can set auto login with guest account when using a secure app\r\n - Support for a non-secure app in a secure app (like a signup app)\r\n - Full integration with the Hydralit Navbar that now supports complex nav!\r\n - some bug fixes where app to app redirect was inconsistant\r\n - Banners\r\n - Compression behind download button\r\n - Hydralit Navbar\r\n - Can turn off the navbar animation now! (must be using Hydralit_components >=1.0.4)\r\n\r\n## NOTE\r\nDue to the Streamlit execution model, the ability to use internal nav links from a child app is one-shot when using the navbar. This means that the internal link will redirect to the child, however if a script rerun request is made within the child app (changing the value of a widget for example), the nav will bounce back to the calling app. You can disable the navbar and the Streamlit core components nav menu will appear and the internal links will work as expected.\r\n\r\n\r\n## Complex and sticky nav with no Streamlit markers is as easy as a couple of parameters in the Hydralit constructor.\r\n ```python\r\napp = HydraApp(title='Secure Hydralit Data Explorer',favicon=\"üêô\",hide_streamlit_markers=True,use_navbar=True, navbar_sticky=True)\r\n ```\r\n\r\n## Now powered by [Hydralit Components](https://github.com/TangleSpace/hydralit_components).\r\nThe Hydralit Navbar is fully integrated, theme aware and animated (you can turn it off if you like), just add your child apps and go, the navbar will appear automatically.\r\n# Navbar - Responsive, theme aware and animated.\r\n<p align=\"center\">\r\n<img src=\"https://raw.githubusercontent.com/tanglespace/hydralit_components/master/resources/hydralit_navbar.gif\" title=\"Quick Example\" alt=\"Quick Example\", width=\"60%\" height=\"100%\">\r\n</p>\r\n\r\n# Spinners and Loaders\r\nOut of the box you get a nice loader/spinner when navigating between apps/pages. You can also create your own loader app and completely customise every part of how it looks and when it loads, even creating different effects depending on the target application. See the [Hydralit secure example code](https://github.com/TangleSpace/hydralit-example/blob/main/apps/myloading_app.py) to see what is possible.\r\n\r\n<p align=\"center\">\r\n<img src=\"https://github.com/TangleSpace/hydralit_components/blob/main/resources/standard_loaders.gif?raw=true\" title=\"HyLoaders\" alt=\"HyLoaders\", width=\"45%\" height=\"45%\">\r\n<img src=\"https://github.com/TangleSpace/hydralit_components/blob/main/resources/pretty_loaders.gif?raw=true\" title=\"HyLoaderspretty\" alt=\"HyLoaders\", width=\"45%\" height=\"45%\">\r\n<img src=\"https://github.com/TangleSpace/hydralit_components/blob/main/resources/pulse_bars.gif?raw=true\" title=\"HyLoaderspretty\" alt=\"HyLoaders\", width=\"100%\" height=\"60%\">\r\n\r\n\r\n## Quick Start\r\nIf you have some functions and want them to run like seperate pages, you can quickly get going with a Flask style decorator over your functions.\r\n ```python\r\n#when we import hydralit, we automatically get all of Streamlit\r\nimport hydralit as hy\r\n\r\napp = hy.HydraApp(title='Simple Multi-Page App')\r\n\r\n@app.addapp(is_home=True)\r\ndef my_home():\r\n  hy.info('Hello from Home!')\r\n\r\n@app.addapp()\r\ndef app2():\r\n  hy.info('Hello from app 2')\r\n\r\n@app.addapp(title='The Best', icon=\"ü•∞\")\r\ndef app3():\r\n  hy.info('Hello from app 3, A.K.A, The Best ü•∞')\r\n\r\n#Run the whole lot, we get navbar, state management and app isolation, all with this tiny amount of work.\r\napp.run()\r\n ```\r\nThis tiny amount of code creates a nice custom multi-page app as below.\r\n <p align=\"center\">\r\n<img src=\"https://github.com/TangleSpace/hydralit_components/blob/main/resources/quick_demo.gif?raw=true\" title=\"Quick Example\" alt=\"Quick Example\", width=\"100%\" height=\"100%\">\r\n</p>\r\n\r\n\r\n### Examples\r\nYou can try it out by running the two sample applications with their children that are located in the [hydralit-example repository](https://github.com/TangleSpace/hydralit-example).\r\n```bash\r\nhydralit_example> pip install -r requirements.txt\r\n\r\nhydralit_example> streamlit run secure.app\r\n```\r\n\r\n<h1><a href=\"https://hydralit-secure-sample.herokuapp.com/\">You can see this example running here</a></h1>\r\n\r\n\r\n# Converting existing applications\r\nThis code sample comes directly from the [Streamlit example data explorer](https://docs.streamlit.io/en/stable/tutorial/create_a_data_explorer_app.html#let-s-put-it-all-together)\r\n```python\r\nimport streamlit as st\r\nimport pandas as pd\r\nimport numpy as np\r\n\r\nst.title('Uber pickups in NYC')\r\n\r\nDATE_COLUMN = 'date/time'\r\nDATA_URL = ('https://s3-us-west-2.amazonaws.com/'\r\n            'streamlit-demo-data/uber-raw-data-sep14.csv.gz')\r\n\r\n@st.cache\r\ndef load_data(nrows):\r\n    data = pd.read_csv(DATA_URL, nrows=nrows)\r\n    lowercase = lambda x: str(x).lower()\r\n    data.rename(lowercase, axis='columns', inplace=True)\r\n    data[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN])\r\n    return data\r\n\r\ndata_load_state = st.text('Loading data...')\r\ndata = load_data(10000)\r\ndata_load_state.text(\"Done! (using st.cache)\")\r\n\r\nif st.checkbox('Show raw data'):\r\n    st.subheader('Raw data')\r\n    st.write(data)\r\n\r\nst.subheader('Number of pickups by hour')\r\nhist_values = np.histogram(data[DATE_COLUMN].dt.hour, bins=24, range=(0,24))[0]\r\nst.bar_chart(hist_values)\r\n\r\n# Some number in the range 0-23\r\nhour_to_filter = st.slider('hour', 0, 23, 17)\r\nfiltered_data = data[data[DATE_COLUMN].dt.hour == hour_to_filter]\r\n\r\nst.subheader('Map of all pickups at %s:00' % hour_to_filter)\r\nst.map(filtered_data)\r\n```\r\n\r\nLet's also use a simple application to combine with the demo above.\r\n```python\r\nimport streamlit as st\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom data.create_data import create_table\r\n\r\ndef app():\r\n    st.title('Small Application with a table and chart.')\r\n\r\n    st.write(\"See `apps/simple.py` to know how to use it.\")\r\n\r\n    st.markdown(\"### Plot\")\r\n    df = create_table()\r\n\r\n    st.line_chart(df)\r\n```\r\n\r\n\r\nYou can easily convert these apps to be used within Hydralit by simply wrapping each in a class derived from HydraHeadApp within Hydralit and putting all the code in the run() method.\r\n\r\nFor the above Streamlit demo application, this means all that is needed is a slight modification, we create a file sample_app.py and add;\r\n```python\r\nimport streamlit as st\r\nimport pandas as pd\r\nimport numpy as np\r\n\r\n#add an import to Hydralit\r\nfrom hydralit import HydraHeadApp\r\n\r\n#create a wrapper class\r\nclass MySampleApp(HydraHeadApp):\r\n\r\n#wrap all your code in this method and you should be done\r\n    def run(self):\r\n        #-------------------existing untouched code------------------------------------------\r\n        st.title('Uber pickups in NYC')\r\n\r\n        DATE_COLUMN = 'date/time'\r\n        DATA_URL = ('https://s3-us-west-2.amazonaws.com/'\r\n                    'streamlit-demo-data/uber-raw-data-sep14.csv.gz')\r\n\r\n        @st.cache\r\n        def load_data(nrows):\r\n            data = pd.read_csv(DATA_URL, nrows=nrows)\r\n            lowercase = lambda x: str(x).lower()\r\n            data.rename(lowercase, axis='columns', inplace=True)\r\n            data[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN])\r\n            return data\r\n\r\n        data_load_state = st.text('Loading data...')\r\n        data = load_data(10000)\r\n        data_load_state.text(\"Done! (using st.cache)\")\r\n\r\n        if st.checkbox('Show raw data'):\r\n            st.subheader('Raw data')\r\n            st.write(data)\r\n\r\n        st.subheader('Number of pickups by hour')\r\n        hist_values = np.histogram(data[DATE_COLUMN].dt.hour, bins=24, range=(0,24))[0]\r\n        st.bar_chart(hist_values)\r\n\r\n        # Some number in the range 0-23\r\n        hour_to_filter = st.slider('hour', 0, 23, 17)\r\n        filtered_data = data[data[DATE_COLUMN].dt.hour == hour_to_filter]\r\n\r\n        st.subheader('Map of all pickups at %s:00' % hour_to_filter)\r\n        st.map(filtered_data)\r\n        #-------------------existing untouched code------------------------------------------\r\n```\r\nFor the other small application, again we can convert this very easily by wrapping in a class derived from HydraHeadApp from Hydralit and putting all the code in the run() method, we create a file small_app.py and add;\r\n```python\r\nimport streamlit as st\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom data.create_data import create_table\r\n\r\n#add an import to Hydralit\r\nfrom hydralit import HydraHeadApp\r\n\r\n#create a wrapper class\r\nclass MySmallApp(HydraHeadApp):\r\n\r\n#wrap all your code in this method and you should be done\r\n    def run(self):\r\n        #-------------------existing untouched code------------------------------------------\r\n        st.title('Small Application with a table and chart.')\r\n\r\n        st.markdown(\"### Plot\")\r\n        df = create_table()\r\n\r\n        st.line_chart(df)\r\n```\r\n\r\nThese are is now ready to be used within a Hydralit application. We just need to create a simple host application that derives from the HydraApp class in Hydralit, add the children and we are done! we create a file host_app.py and add;\r\n```python\r\nfrom hydralit import HydraApp\r\nimport streamlit as st\r\nfrom sample_app import MySampleApp\r\nfrom small_app import MySmallApp\r\n\r\n\r\nif __name__ == '__main__':\r\n\r\n    #this is the host application, we add children to it and that's it!\r\n    app = HydraApp(title='Sample Hydralit App',favicon=\"üêô\")\r\n  \r\n    #add all your application classes here\r\n    app.add_app(\"Small App\", icon=\"üè†\", app=MySmallApp())\r\n    app.add_app(\"Sample App\",icon=\"üîä\", app=MySampleApp())\r\n\r\n    #run the whole lot\r\n    app.run()\r\n```\r\n\r\n### Or you could use the decorator method shown in the Lightning example and simply wrap your functions, both ways work, you can get access to more controls with the class method as the template class allows access to the Hydralit internal state for access and navigation information.\r\n\r\nThis super simple example is made of 3 files.\r\n```\r\nhydralit sample project\r\n‚îÇ   host_app.py\r\n‚îÇ   small_app.py\r\n‚îÇ   sample_app.py\r\n```\r\n### Run this sample\r\n```bash\r\nhydralit sample project> pip install hydralit\r\n\r\nhydralit sample project> streamlit run host.app\r\n```\r\n\r\n### Examples\r\nThe code for a host application that is secured with a login app is shown below, the entire example is located in the [hydralit-example repository](https://github.com/TangleSpace/hydralit-example).\r\n\r\n```python\r\nfrom hydralit import HydraApp\r\nimport streamlit as st\r\nimport apps\r\n\r\n\r\nif __name__ == '__main__':\r\n    over_theme = {'txc_inactive': '#FFFFFF'}\r\n    #this is the host application, we add children to it and that's it!\r\n    app = HydraApp(\r\n        title='Secure Hydralit Data Explorer',\r\n        favicon=\"üêô\",\r\n        hide_streamlit_markers=False,\r\n        #add a nice banner, this banner has been defined as 5 sections with spacing defined by the banner_spacing array below.\r\n        use_banner_images=[\"./resources/hydra.png\",None,{'header':\"<h1 style='text-align:center;padding: 0px 0px;color:black;font-size:200%;'>Secure Hydralit Explorer</h1><br>\"},None,\"./resources/lock.png\"], \r\n        banner_spacing=[5,30,60,30,5],\r\n        use_navbar=True, \r\n        navbar_sticky=False,\r\n        navbar_theme=over_theme\r\n    )\r\n\r\n    #Home button will be in the middle of the nav list now\r\n    app.add_app(\"Home\", icon=\"üè†\", app=apps.HomeApp(title='Home'),is_home=True)\r\n\r\n    #add all your application classes here\r\n    app.add_app(\"Cheat Sheet\", icon=\"üìö\", app=apps.CheatApp(title=\"Cheat Sheet\"))\r\n    app.add_app(\"Sequency Denoising\",icon=\"üîä\", app=apps.WalshApp(title=\"Sequency Denoising\"))\r\n    app.add_app(\"Sequency (Secure)\",icon=\"üîäüîí\", app=apps.WalshAppSecure(title=\"Sequency (Secure)\"))\r\n    app.add_app(\"Solar Mach\", icon=\"üõ∞Ô∏è\", app=apps.SolarMach(title=\"Solar Mach\"))\r\n    app.add_app(\"Spacy NLP\", icon=\"‚å®Ô∏è\", app=apps.SpacyNLP(title=\"Spacy NLP\"))\r\n    app.add_app(\"Uber Pickups\", icon=\"üöñ\", app=apps.UberNYC(title=\"Uber Pickups\"))\r\n    app.add_app(\"Solar Mach\", icon=\"üõ∞Ô∏è\", app=apps.SolarMach(title=\"Solar Mach\"))\r\n\r\n    #we have added a sign-up app to demonstrate the ability to run an unsecure app\r\n    #only 1 unsecure app is allowed\r\n    app.add_app(\"Signup\", icon=\"üõ∞Ô∏è\", app=apps.SignUpApp(title='Signup'), is_unsecure=True)\r\n\r\n    #we want to have secure access for this HydraApp, so we provide a login application\r\n    #optional logout label, can be blank for something nicer!\r\n    app.add_app(\"Login\", apps.LoginApp(title='Login'),is_login=True) \r\n\r\n    #specify a custom loading app for a custom transition between apps, this includes a nice custom spinner\r\n    app.add_loader_app(apps.MyLoadingApp(delay=5))\r\n    #app.add_loader_app(apps.QuickLoaderApp())\r\n\r\n    #we can inject a method to be called everytime a user logs out\r\n    @app.logout_callback\r\n    def mylogout_cb():\r\n        print('I was called from Hydralit at logout!')\r\n\r\n    #we can inject a method to be called everytime a user logs in\r\n    @app.login_callback\r\n    def mylogin_cb():\r\n        print('I was called from Hydralit at login!')\r\n\r\n    #if we want to auto login a guest but still have a secure app, we can assign a guest account and go straight in\r\n    app.enable_guest_access()\r\n\r\n    #--------------------------------------------------------------------------------------------------------------------\r\n    #if the menu is looking shit, use some sections\r\n    #check user access level to determine what should be shown on the menu\r\n    user_access_level, username = app.check_access()\r\n\r\n    # If the menu is cluttered, just rearrange it into sections!\r\n    # completely optional, but if you have too many entries, you can make it nicer by using accordian menus\r\n    if user_access_level > 1:\r\n        complex_nav = {\r\n            'Home': ['Home'],\r\n            'Intro üèÜ': ['Cheat Sheet',\"Solar Mach\"],\r\n            'Hotstepper üî•': [\"Sequency Denoising\",\"Sequency (Secure)\"],\r\n            'Clustering': [\"Uber Pickups\"],\r\n            'NLP': [\"Spacy NLP\"],\r\n        }\r\n    elif user_access_level == 1:\r\n        complex_nav = {\r\n            'Home': ['Home'],\r\n            'Intro üèÜ': ['Cheat Sheet',\"Solar Mach\"],\r\n            'Hotstepper üî•': [\"Sequency Denoising\"],\r\n            'Clustering': [\"Uber Pickups\"],\r\n            'NLP': [\"Spacy NLP\"],\r\n        }\r\n    else:\r\n        complex_nav = {\r\n            'Home': ['Home'],\r\n        }\r\n\r\n  \r\n    #and finally just the entire app and all the children.\r\n    app.run(complex_nav)\r\n\r\n    #(DEBUG) print user movements and current login details used by Hydralit\r\n    #---------------------------------------------------------------------\r\n    user_access_level, username = app.check_access()\r\n    prev_app, curr_app = app.get_nav_transition()\r\n    print(prev_app,'- >', curr_app)\r\n    print(int(user_access_level),'- >', username)\r\n    #---------------------------------------------------------------------\r\n```\r\n\r\nYou can try it out by running the two sample applications with their children that are located in the [hydralit-example repository](https://github.com/TangleSpace/hydralit-example).\r\n```bash\r\nhydralit_example> pip install -r requirements.txt\r\n\r\nhydralit_example> streamlit run secure.app\r\n```\r\n\r\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/tanglespace/hydralit","keywords":"Streamlit,Web,Machine Learning,Deployment,Web Application,Analysis,Data Modelling,Presentation","license":"Apache 2","maintainer":"","maintainer_email":"","name":"hydralit","package_url":"https://pypi.org/project/hydralit/","platform":null,"project_url":"https://pypi.org/project/hydralit/","project_urls":{"Documentation":"https://github.com/tanglespace/hydralit","Homepage":"https://github.com/tanglespace/hydralit","Source":"https://github.com/tanglespace/hydralit","Tracker":"https://github.com/tanglespace/hydralit/issues"},"provides_extra":null,"release_url":"https://pypi.org/project/hydralit/1.0.14/","requires_dist":null,"requires_python":">=3.6","summary":"Multi-app Streamlit library.","version":"1.0.14","yanked":false,"yanked_reason":null},"last_serial":15183601,"releases":{"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"5adfc02d3a3b431bf954bc93b12522601dafbd31fe84dd01e7be07ed2cd19504","md5":"73f65590a6f2a933143a95a5efcbfec7","sha256":"cd009fdbb72bc728149f9e806de356a807ee13dcd78548b516a1ed06361df65b"},"downloads":-1,"filename":"hydralit-1.0.1.tar.gz","has_sig":false,"md5_digest":"73f65590a6f2a933143a95a5efcbfec7","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":14878,"upload_time":"2021-07-18T00:06:06","upload_time_iso_8601":"2021-07-18T00:06:06.599334Z","url":"https://files.pythonhosted.org/packages/5a/df/c02d3a3b431bf954bc93b12522601dafbd31fe84dd01e7be07ed2cd19504/hydralit-1.0.1.tar.gz","yanked":true,"yanked_reason":null}],"1.0.10":[{"comment_text":"","digests":{"blake2b_256":"4036a2e1bfd93ed38049f04e98f82e63188b8034bd69c0b44d946bee6cdfd3e5","md5":"d4184536602e904070c55d36490c139e","sha256":"32478bce4a8dc79fa499e59c37f9107edb47783690ce2aa875540072a586a2a2"},"downloads":-1,"filename":"hydralit-1.0.10.tar.gz","has_sig":false,"md5_digest":"d4184536602e904070c55d36490c139e","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":24075,"upload_time":"2021-10-03T23:43:19","upload_time_iso_8601":"2021-10-03T23:43:19.113677Z","url":"https://files.pythonhosted.org/packages/40/36/a2e1bfd93ed38049f04e98f82e63188b8034bd69c0b44d946bee6cdfd3e5/hydralit-1.0.10.tar.gz","yanked":true,"yanked_reason":null}],"1.0.11":[{"comment_text":"","digests":{"blake2b_256":"9d57a39e497c87fb8f8c59e593c290d2fff1e27a23d626fc799f706f9f724455","md5":"36383aa491177084308a71a6b99d2133","sha256":"9bbd69828141e10ecc4303c84de4f9cb47dac60a02af979116a04193d1f4f1dc"},"downloads":-1,"filename":"hydralit-1.0.11.tar.gz","has_sig":false,"md5_digest":"36383aa491177084308a71a6b99d2133","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":28522,"upload_time":"2022-01-22T21:23:24","upload_time_iso_8601":"2022-01-22T21:23:24.452700Z","url":"https://files.pythonhosted.org/packages/9d/57/a39e497c87fb8f8c59e593c290d2fff1e27a23d626fc799f706f9f724455/hydralit-1.0.11.tar.gz","yanked":true,"yanked_reason":null}],"1.0.12":[{"comment_text":"","digests":{"blake2b_256":"4134971b45223d2c7710e4ee56d1063045318e2a94f9427f3fbe90d4a4232fcb","md5":"9585fbb2bd487c3137ae037cfdf11fe0","sha256":"6df3b79d2dd2d622ce8ab780936fd14dfcb8a18414dc57f2d48cd3f1cab61590"},"downloads":-1,"filename":"hydralit-1.0.12.tar.gz","has_sig":false,"md5_digest":"9585fbb2bd487c3137ae037cfdf11fe0","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":28591,"upload_time":"2022-01-28T19:39:56","upload_time_iso_8601":"2022-01-28T19:39:56.011224Z","url":"https://files.pythonhosted.org/packages/41/34/971b45223d2c7710e4ee56d1063045318e2a94f9427f3fbe90d4a4232fcb/hydralit-1.0.12.tar.gz","yanked":false,"yanked_reason":null}],"1.0.13":[{"comment_text":"","digests":{"blake2b_256":"ecdc9462f83020b07687912c7870f407283e44932f822afbb9edae5147316a99","md5":"1b3df7b93be7daec31c6ada544a427c2","sha256":"fdd7e2f0d15d0e10eb2df99d24217f46ee6cbe7b52e91d87c0acf5acb4806d63"},"downloads":-1,"filename":"hydralit-1.0.13.tar.gz","has_sig":false,"md5_digest":"1b3df7b93be7daec31c6ada544a427c2","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":28754,"upload_time":"2022-06-22T03:54:05","upload_time_iso_8601":"2022-06-22T03:54:05.640617Z","url":"https://files.pythonhosted.org/packages/ec/dc/9462f83020b07687912c7870f407283e44932f822afbb9edae5147316a99/hydralit-1.0.13.tar.gz","yanked":false,"yanked_reason":null}],"1.0.14":[{"comment_text":"","digests":{"blake2b_256":"94db69dab2a24b5653cd5c9ad53f1232cdcbd91e53148f57f8d199f576eb5dd6","md5":"b6c433a61421f55d7a8e49e0e2e7d7eb","sha256":"d06bfce4601f55b4d752f838ea9a04defa565332f22b2037ea098ec3d15343e4"},"downloads":-1,"filename":"hydralit-1.0.14.tar.gz","has_sig":false,"md5_digest":"b6c433a61421f55d7a8e49e0e2e7d7eb","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":29090,"upload_time":"2022-09-22T21:24:39","upload_time_iso_8601":"2022-09-22T21:24:39.550389Z","url":"https://files.pythonhosted.org/packages/94/db/69dab2a24b5653cd5c9ad53f1232cdcbd91e53148f57f8d199f576eb5dd6/hydralit-1.0.14.tar.gz","yanked":false,"yanked_reason":null}],"1.0.6":[{"comment_text":"","digests":{"blake2b_256":"73ca370d23f74ae0270a5251fe267da08c63088313f206d22aa7898a4d1e12b3","md5":"e0cc17bd80f20129c7b50b3e6a003195","sha256":"3395e42ea5377e32179c6423e43ba1f613f450641f8ab98e3c4c242c32febaca"},"downloads":-1,"filename":"hydralit-1.0.6.tar.gz","has_sig":false,"md5_digest":"e0cc17bd80f20129c7b50b3e6a003195","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":18067,"upload_time":"2021-09-15T05:40:08","upload_time_iso_8601":"2021-09-15T05:40:08.650857Z","url":"https://files.pythonhosted.org/packages/73/ca/370d23f74ae0270a5251fe267da08c63088313f206d22aa7898a4d1e12b3/hydralit-1.0.6.tar.gz","yanked":true,"yanked_reason":"error in requirements, please update to 1.0.7"}],"1.0.8":[{"comment_text":"","digests":{"blake2b_256":"334c808b3de13c51dd220b0cc7c175661e0890ec840d543b38a3efa0a95a735c","md5":"c1a8d2a340bfd5273602cc4786fc56fe","sha256":"3727d445f8e2ca1852f7597087da0b3af32c5a54787629f732dde8725c4f0b46"},"downloads":-1,"filename":"hydralit-1.0.8.tar.gz","has_sig":false,"md5_digest":"c1a8d2a340bfd5273602cc4786fc56fe","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":19951,"upload_time":"2021-09-19T19:29:00","upload_time_iso_8601":"2021-09-19T19:29:00.243682Z","url":"https://files.pythonhosted.org/packages/33/4c/808b3de13c51dd220b0cc7c175661e0890ec840d543b38a3efa0a95a735c/hydralit-1.0.8.tar.gz","yanked":true,"yanked_reason":null}],"1.0.9":[{"comment_text":"","digests":{"blake2b_256":"a22c99aed36a67465a6557b89a00388088665e6bfb7d180ae0891d8f0e7bc649","md5":"dc085d769af18f1acdbf06dfafef94a6","sha256":"4daa54ad2eaf660dffba16b98b67e81c35a1fcdde2c27130d4fe0c2f28fc212e"},"downloads":-1,"filename":"hydralit-1.0.9.tar.gz","has_sig":false,"md5_digest":"dc085d769af18f1acdbf06dfafef94a6","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":21402,"upload_time":"2021-09-30T09:37:07","upload_time_iso_8601":"2021-09-30T09:37:07.139365Z","url":"https://files.pythonhosted.org/packages/a2/2c/99aed36a67465a6557b89a00388088665e6bfb7d180ae0891d8f0e7bc649/hydralit-1.0.9.tar.gz","yanked":true,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"94db69dab2a24b5653cd5c9ad53f1232cdcbd91e53148f57f8d199f576eb5dd6","md5":"b6c433a61421f55d7a8e49e0e2e7d7eb","sha256":"d06bfce4601f55b4d752f838ea9a04defa565332f22b2037ea098ec3d15343e4"},"downloads":-1,"filename":"hydralit-1.0.14.tar.gz","has_sig":false,"md5_digest":"b6c433a61421f55d7a8e49e0e2e7d7eb","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":29090,"upload_time":"2022-09-22T21:24:39","upload_time_iso_8601":"2022-09-22T21:24:39.550389Z","url":"https://files.pythonhosted.org/packages/94/db/69dab2a24b5653cd5c9ad53f1232cdcbd91e53148f57f8d199f576eb5dd6/hydralit-1.0.14.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
