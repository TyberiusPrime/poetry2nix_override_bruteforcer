{"info":{"author":null,"author_email":"Cameron Simpson <cs@cskk.id.au>","bugtrack_url":null,"classifiers":["Development Status :: 4 - Beta","Intended Audience :: Developers","License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 2","Programming Language :: Python :: 3","Topic :: Software Development :: Libraries :: Python Modules"],"description":"Assorted context managers.\n\n*Latest release 20240630*:\n* New closeall(Iterable) wrapping withall() and returning the close step as a callable.\n* contextif: document the lambda shuffle needed if cmgr is callable.\n* New @with_self decorator for methods which should `with(self)` while the method runs (unused?)\n\n## Function `closeall(objs: Iterable) -> Callable`\n\nEnter all the objects from `objs` using `with`\nand return a function to close them all.\n\nThis is for situations where resources must be obtained now\nbut released at a later time on completion of some operation,\nfor example where we are dispatching a thread to work with\nthe resources.\n\n## Function `contextif(cmgr, *cmgr_args, **cmgr_kwargs)`\n\nA context manager to use `cmgr` conditionally,\nwith a flexible call signature.\nThis yields the context manager if `cmgr` is used or `None`\nif it is not used, allowing the enclosed code to test whether\nthe context is active.\n\nThis is to ease uses where the context object is optional\ni.e. `None` if not present. Example from `cs.vt.stream`:\n\n    @contextmanager\n    def startup_shutdown(self):\n      \"\"\" Open/close `self.local_store` if not `None`.\n      \"\"\"\n      with super().startup_shutdown():\n        with contextif(self.local_store):\n          with self._packet_connection(self.recv, self.send) as conn:\n            with stackattrs(self, _conn=conn):\n              yield\n\nHere `self.local_store` might be `None` if there's no local\nstore to present. We still want a nice nested `with` statement\nduring the setup. By using `contextif` we run a context manager\nwhich behaves correctly when `self.local_store=None`.\n\nThe signature is flexible, offering 2 basic modes of use.\n\n*Flagged use*: `contextif(flag,cmgr,*a,**kw)`: if `flag` is a\nBoolean then it governs whether the context manager `cmgr`\nis used. Historically the driving use case was verbosity\ndependent status lines or progress bars. Example:\n\n    from cs.upd import run_task\n    with contextif(verbose, run_task, ....) as proxy:\n        ... do stuff, updating proxy if not None ...\n\nIn the `cs.upd` example above, `run_task` is a context manager\nfunction which pops up an updatable status line, normally\nused as:\n\n    with run_task(\"doing thing\") as proxy:\n        ... do the thing, setting proxy.text as needed ...\n\n*Unflagged use*: `contextif(cmgr,*a,**kw)`: use `cmgr` as the\nflag: if false (eg `None`) then `cmgr` is not used.\n\nAdditionally, `cmgr` may be a callable, in which case the\ncontext manager itself is obtained by calling\n`cmgr(*cmgr_args,**cmgr_kwargs)`. Otherwise `cmgr` is assumed\nto be a context manager already, and it is an error to provide\n`cmgr_args` or `cmgr_kwargs`.\n\nThis last mode can be a bit fiddly. If `cmgr` is a context\nmanager _but is also callable for other purposes_ you will\nneed to do a little shuffle to avoid the implied call:\n\n    with contexif(flag, lambda: cmgr):\n        ... do stuff ...\n\nThis provides a callable (the lambda) which returns the context\nmanager itself.\n\n## Class `ContextManagerMixin`\n\nA mixin to provide context manager `__enter__` and `__exit__` methods\nrunning the first and second steps of a single `__enter_exit__` generator method.\n\n*Note*: the `__enter_exit__` method is _not_ a context manager,\nbut a short generator method.\n\nThis makes it easy to use context managers inside `__enter_exit__`\nas the setup/teardown process, for example:\n\n    def __enter_exit__(self):\n        with open(self.datafile, 'r') as f:\n            yield f\n\nLike a context manager created via `@contextmanager`\nit performs the setup phase and then `yield`s the value for the `with` statement.\nIf `None` is `yield`ed (as from a bare `yield`)\nthen `self` is returned from `__enter__`.\nAs with `@contextmanager`,\nif there was an exception in the managed suite\nthen that exception is raised on return from the `yield`.\n\n*However*, and _unlike_ a `@contextmanager` method,\nthe `__enter_exit__` generator _may_ also `yield`\nan additional true/false value to use as the result\nof the `__exit__` method, to indicate whether the exception was handled.\nThis extra `yield` is _optional_ and if it is omitted the `__exit__` result\nwill be `False` indicating that an exception was not handled.\n\nHere is a sketch of a method which can handle a `SomeException` specially:\n\n    class CMgr(ContextManagerMixin):\n        def __enter_exit__(self):\n            ... do some setup here ...\n            # Returning self is common, but might be any relevant value.\n            # Note that if you want `self`, you can just use a bare yield\n            # and ContextManagerMixin will provide `self` as the default.\n            enter_result = self\n            exit_result = False\n            try:\n                yield enter_result\n            except SomeException as e:\n                ... handle e ...\n                exit_result = True\n            finally:\n                ... do tear down here ...\n            yield exit_result\n\n*Method `ContextManagerMixin.__enter__(self)`*:\nRun `super().__enter__` (if any)\nthen the `__enter__` phase of `self.__enter_exit__()`.\n\n*Method `ContextManagerMixin.__exit__(self, exc_type, exc_value, traceback)`*:\nRun the `__exit__` step of `self.__enter_exit__()`,\nthen `super().__exit__` (if any).\n\n*Method `ContextManagerMixin.as_contextmanager(self)`*:\nRun the generator from the `cls` class specific `__enter_exit__`\nmethod via `self` as a context manager.\n\nExample from `RunState` which subclasses `HasThreadState`,\nboth of which are `ContextManagerMixin` subclasses:\n\n    class RunState(HasThreadState):\n        .....\n        def __enter_exit__(self):\n            with HasThreadState.as_contextmanager(self):\n                ... RunState context manager stuff ...\n\nThis runs the `HasThreadState` context manager\naround the main `RunState` context manager.\n\n## Function `pop_cmgr(o, attr)`\n\nRun the `__exit__` phase of a context manager commenced with `push_cmgr`.\nRestore `attr` as it was before `push_cmgr`.\nReturn the result of `__exit__`.\n\n## Function `popattrs(o, attr_names, old_values)`\n\nThe \"pop\" part of `stackattrs`.\nRestore previous attributes of `o`\nnamed by `attr_names` with previous state in `old_values`.\n\nThis can be useful in hooks/signals/callbacks,\nwhere you cannot inline a context manager.\n\n## Function `popkeys(d, key_names, old_values)`\n\nThe \"pop\" part of `stackkeys`.\nRestore previous key values of `d`\nnamed by `key_names` with previous state in `old_values`.\n\nThis can be useful in hooks/signals/callbacks,\nwhere you cannot inline a context manager.\n\n## Function `push_cmgr(o, attr, cmgr)`\n\nA convenience wrapper for `twostep(cmgr)`\nto run the `__enter__` phase of `cmgr` and save its value as `o.`*attr*`.\nReturn the result of the `__enter__` phase.\n\nThe `__exit__` phase is run by `pop_cmgr(o,attr)`,\nreturning the return value of the exit phase.\n\nExample use in a unit test:\n\n    class TestThing(unittest.TestCase):\n        def setUp(self):\n            # save the temp dir path as self.dirpath\n            push_cmgr(self, 'dirpath', TemporaryDirectory())\n        def tearDown(self):\n            # clean up the temporary directory, discard self.dirpath\n            pop_cmgr(self, 'dirpath')\n\nThe `cs.testutils` `SetupTeardownMixin` class does this\nallowing the provision of a single `setupTeardown()` context manager method\nfor test case setUp/tearDown.\n\nDoc test:\n\n    >>> from os.path import isdir as isdirpath\n    >>> from tempfile import TemporaryDirectory\n    >>> from types import SimpleNamespace\n    >>> obj = SimpleNamespace()\n    >>> dirpath = push_cmgr(obj, 'path', TemporaryDirectory())\n    >>> assert dirpath == obj.path\n    >>> assert isdirpath(dirpath)\n    >>> pop_cmgr(obj, 'path')\n    >>> assert not hasattr(obj, 'path')\n    >>> assert not isdirpath(dirpath)\n\n## Function `pushattrs(o, **attr_values)`\n\nThe \"push\" part of `stackattrs`.\nPush `attr_values` onto `o` as attributes,\nreturn the previous attribute values in a `dict`.\n\nThis can be useful in hooks/signals/callbacks,\nwhere you cannot inline a context manager.\n\n## Function `pushkeys(d, kv=None, **kw)`\n\nThe \"push\" part of `stackkeys`.\nUse the mapping provided as `kv` or `kw` to update `d`.\nReturn the previous key values in a `dict`.\n\nThis can be useful in hooks/signals/callbacks,\nwhere you cannot inline a context manager using `stackkeys`.\n\n## Function `reconfigure_file(f, **kw)`\n\nContext manager flavour of `TextIOBase.reconfigure`.\n\n## Function `setup_cmgr(cmgr)`\n\nRun the set up phase of the context manager `cmgr`\nand return a callable which runs the tear down phase.\n\nThis is a convenience wrapper for the lower level `twostep()` function\nwhich produces a two iteration generator from a context manager.\n\nPlease see the `push_cmgr` function, a superior wrapper for `twostep()`.\n\n*Note*:\nthis function expects `cmgr` to be an existing context manager.\nIn particular, if you define some context manager function like this:\n\n    @contextmanager\n    def my_cmgr_func(...):\n        ...\n        yield\n        ...\n\nthen the correct use of `setup_cmgr()` is:\n\n    teardown = setup_cmgr(my_cmgr_func(...))\n\nand _not_:\n\n    cmgr_iter = setup_cmgr(my_cmgr_func)\n    ...\n\nThe purpose of `setup_cmgr()` is to split any context manager's operation\nacross two steps when the set up and teardown phases must operate\nin different parts of your code.\nA common situation is the `__enter__` and `__exit__` methods\nof another context manager class.\n\nThe call to `setup_cmgr()` performs the \"enter\" phase\nand returns the tear down callable.\nCalling that performs the tear down phase.\n\nExample use in a class:\n\n    class SomeClass:\n        def __init__(self, foo)\n            self.foo = foo\n            self._teardown = None\n        def __enter__(self):\n            self._teardown = setup_cmgr(stackattrs(o, setting=foo))\n        def __exit__(self, *_):\n            teardown, self._teardown = self._teardown, None\n            teardown()\n\n## Function `stack_signals(signums, handler, additional=False)`\n\nContext manager to apply a handler function to `signums`\nusing `signal.signal`.\nThe old handlers are restored on exit from the context manager.\n\nIf the optional `additional` argument is true,\napply a handler which calls both the new handler and the old handler.\n\n## Function `stackattrs(o, **attr_values)`\n\nContext manager to push new values for the attributes of `o`\nand to restore them afterward.\nReturns a `dict` containing a mapping of the previous attribute values.\nAttributes not present are not present in the returned mapping.\n\nRestoration includes deleting attributes which were not present\ninitially.\n\nThis makes it easy to adjust temporarily some shared context object\nwithout having to pass it through the call stack.\n\nSee `stackkeys` for a flavour of this for mappings.\n\nSee `cs.threads.ThreadState` for a convenient wrapper class.\n\nExample of fiddling a programme's \"verbose\" mode:\n\n    >>> class RunModes:\n    ...     def __init__(self, verbose=False):\n    ...         self.verbose = verbose\n    ...\n    >>> runmode = RunModes()\n    >>> if runmode.verbose:\n    ...     print(\"suppressed message\")\n    ...\n    >>> with stackattrs(runmode, verbose=True):\n    ...     if runmode.verbose:\n    ...         print(\"revealed message\")\n    ...\n    revealed message\n    >>> if runmode.verbose:\n    ...     print(\"another suppressed message\")\n    ...\n\nExample exhibiting restoration of absent attributes:\n\n    >>> class O:\n    ...     def __init__(self):\n    ...         self.a = 1\n    ...\n    >>> o = O()\n    >>> print(o.a)\n    1\n    >>> print(o.b)\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    AttributeError: 'O' object has no attribute 'b'\n    >>> with stackattrs(o, a=3, b=4):\n    ...     print(o.a)\n    ...     print(o.b)\n    ...     o.b = 5\n    ...     print(o.b)\n    ...     delattr(o, 'a')\n    ...\n    3\n    4\n    5\n    >>> print(o.a)\n    1\n    >>> print(o.b)\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    AttributeError: 'O' object has no attribute 'b'\n\n## Function `stackkeys(d, kv=None, **kw)`\n\nA context manager to push new values for the key values of `d`\nand to restore them afterward.\nThe new values are provided as `kv` or `kw` as convenient.\nReturns a `dict` containing a mapping of the previous key values.\nKeys not present are not present in the mapping.\n\nRestoration includes deleting key values which were not present\ninitially.\n\nThis makes it easy to adjust temporarily some shared context object\nwithout having to pass it through the call stack.\n\nSee `stackattrs` for a flavour of this for object attributes.\n\nExample of making log entries which may reference\nsome higher level context log entry:\n\n    >>> import time\n    >>> global_context = {\n    ...     'parent': None,\n    ... }\n    >>> def log_entry(desc, **kw):\n    ...     print(\"log_entry: global_context =\", repr(global_context))\n    ...     entry = dict(global_context)\n    ...     entry.update(desc=desc, when=time.time())\n    ...     entry.update(kw)\n    ...     return entry\n    ...\n    >>> log_entry(\"stand alone entry\")    #doctest: +ELLIPSIS\n    log_entry: global_context = {'parent': None}\n    {'parent': None, 'desc': 'stand alone entry', 'when': ...}\n    >>> context_entry = log_entry(\"high level entry\")\n    log_entry: global_context = {'parent': None}\n    >>> context_entry                     #doctest: +ELLIPSIS\n    {'parent': None, 'desc': 'high level entry', 'when': ...}\n    >>> with stackkeys(global_context, parent=context_entry): #doctest: +ELLIPSIS\n    ...     print(repr(log_entry(\"low level event\")))\n    ...\n    log_entry: global_context = {'parent': {'parent': None, 'desc': 'high level entry', 'when': ...}}\n    {'parent': {'parent': None, 'desc': 'high level entry', 'when': ...}, 'desc': 'low level event', 'when': ...}\n    >>> log_entry(\"another standalone entry\")    #doctest: +ELLIPSIS\n    log_entry: global_context = {'parent': None}\n    {'parent': None, 'desc': 'another standalone entry', 'when': ...}\n\n## Function `stackset(s, element, lock=None)`\n\nContext manager to add `element` to the set `s` and remove it on return.\nThe element is neither added nor removed if it is already present.\n\n## Function `twostep(cmgr)`\n\nReturn a generator which operates the context manager `cmgr`.\n\nThe first iteration performs the \"enter\" phase and yields the result.\nThe second iteration performs the \"exit\" phase and yields `None`.\n\nSee also the `push_cmgr(obj,attr,cmgr)` function\nand its partner `pop_cmgr(obj,attr)`\nwhich form a convenient wrapper for this low level generator.\n\nThe purpose of `twostep()` is to split any context manager's operation\nacross two steps when the set up and tear down phases must operate\nin different parts of your code.\nA common situation is the `__enter__` and `__exit__` methods\nof another context manager class\nor the `setUp` and `tearDown` methods of a unit test case.\n\n*Note*:\nthis function expects `cmgr` to be an existing context manager\nand _not_ the function which returns the context manager.\n\nIn particular, if you define some function like this:\n\n    @contextmanager\n    def my_cmgr_func(...):\n        ...\n        yield\n        ...\n\nthen `my_cmgr_func(...)` returns a context manager instance\nand so the correct use of `twostep()` is like this:\n\n    # steps broken out for clarity\n    cmgr = my_cmgr_func(...)\n    cmgr_iter = twostep(cmgr)\n    next(cmgr_iter)   # set up\n    next(cmgr_iter)   # tear down\n\nand _not_:\n\n    cmgr_iter = twostep(my_cmgr_func)\n    next(cmgr_iter)   # set up\n    next(cmgr_iter)   # tear down\n\nExample use in a class (but really you should use\n`push_cmgr`/`pop_cmgr` instead):\n\n    class SomeClass:\n        def __init__(self, foo)\n            self.foo = foo\n            self._cmgr_ = None\n        def __enter__(self):\n            self._cmgr_stepped = twostep(stackattrs(o, setting=foo))\n            self._cmgr = next(self._cmgr_stepped)\n            return self._cmgr\n        def __exit__(self, *_):\n            next(self._cmgr_stepped)\n            self._cmgr = None\n\n## Function `with_self(*da, **dkw)`\n\nA decorator to run a method inside `with self:` for classes\nwhich need to be \"held open\"/\"marked as in use\" while the\nmethod runs.\n\n## Function `withall(objs)`\n\nEnter every object `obj` in `objs` except those which are `None`\nusing `with obj:`, then yield.\n\n## Function `withif(obj)`\n\nReturn a context manager for `obj`.\nIf `obj` has an `__enter__` attribute, return `obj`\notherwise return `nullcontext()`.\n\nExample:\n\n    with withif(inner_mapping):\n      ... work with inner_mapping ...\n\n# Release Log\n\n\n\n*Release 20240630*:\n* New closeall(Iterable) wrapping withall() and returning the close step as a callable.\n* contextif: document the lambda shuffle needed if cmgr is callable.\n* New @with_self decorator for methods which should `with(self)` while the method runs (unused?)\n\n*Release 20240412*:\n* contextif: rework to be much easier to use, add new call modes.\n* pushkeys, stackkeys: support update dicts whose keys are not identifier strings i.e. a non **kw call mode.\n* New withif() function returning a context manager even for objects which do not provide one.\n* New withall(iterable-of-context-managers) context manager.\n\n*Release 20240316*:\nFixed release upload artifacts.\n\n*Release 20240212.1*:\nMinor doc updates.\n\n*Release 20240212*:\nNew reconfigure_file(f,**kw), a context manager flavour of `TextIOBase.reconfigure`.\n\n*Release 20240201*:\ncontextif: require the flag to be a bool.\n\n*Release 20230331*:\nstackset: accept optional lock to guard modification of the set.\n\n*Release 20230212*:\n* BREAKING: drop StackableState, superceded by cs.threads.State.\n* New stackset(set,element) to push and then pop an element to a set unless it is already there.\n\n*Release 20230125*:\nNew ContextManagerMixin.as_contextmanager(cls,self) class method to run the __enter_exit__ from a specific class, useful in subclasses.\n\n*Release 20230109*:\nNew contextif(flag,cmgr_func,...) context manager to use cmgr_func if flag is true otherwise nullcontext.\n\n*Release 20221118*:\nstackattrs: improve docstring.\n\n*Release 20220619*:\ntwostep: the returned \"tear down\" phase function needs to ignore StopIteration from the context manager, see PEP 479.\n\n*Release 20220227*:\nNew stack_signals context manager to push signal handlers.\n\n*Release 20211115.1*:\nDocstring grammar/phrasing updates.\n\n*Release 20211115*:\nRename `enter_exit` to `__enter_exit__` - the user doesn't call this overtly and it aligns better with `__enter__` and `__exit__`.\n\n*Release 20211114.1*:\nContextManagerMixin: the default __enter__ return is self, supporting a trivial bare `yield` in the generator.\n\n*Release 20211114*:\nNew ContextManagerMixin mixin class to implement the __enter__/__exit__ methods using a simple generator function named enter_exit.\n\n*Release 20210727*:\n* twostep: iteration 1 now returns the result of __enter__, iteration 2 now returns None.\n* New functions push_cmgr(obj,attr,cmgr) and partner pop_cmgr(obj,attr) to run a twostep()ed context manager conveniently, more conveniently than setup_cmgr().\n\n*Release 20210420.1*:\nRerelease after completing stalled merge: docstring updates.\n\n*Release 20210420*:\nDocstring corrections and improvements.\n\n*Release 20210306*:\n* New twostep() and setup_cmgr() functions to split a context manager into set up and teardown phases for when these must occur in different parts of the code.\n* New thread local StackableState class which can be called to push attribute changes with stackattrs - intended for use as shared global state to avoiod passing through deep function call chains.\n\n*Release 20200725.1*:\nDocstring improvements.\n\n*Release 20200725*:\nNew stackkeys and components pushkeys and popkeys doing \"stackattrs for dicts/mappings\".\n\n*Release 20200517*:\n* Add `nullcontext` like the one from recent contextlib.\n* stackattrs: expose the push and pop parts as pushattrs() and popattrs().\n\n*Release 20200228.1*:\nInitial release with stackattrs context manager.\n","description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"python2, python3","license":"GNU General Public License v3 or later (GPLv3+)","maintainer":null,"maintainer_email":null,"name":"cs.context","package_url":"https://pypi.org/project/cs.context/","platform":null,"project_url":"https://pypi.org/project/cs.context/","project_urls":{"MonoRepo Commits":"https://bitbucket.org/cameron_simpson/css/commits/branch/main","Monorepo Git Mirror":"https://github.com/cameron-simpson/css","Monorepo Hg/Mercurial Mirror":"https://hg.sr.ht/~cameron-simpson/css","Source":"https://github.com/cameron-simpson/css/blob/main/lib/python/cs/context.py"},"provides_extra":null,"release_url":"https://pypi.org/project/cs.context/20240630/","requires_dist":["cs.deco>=20240630","cs.gimmicks>=20240316"],"requires_python":null,"summary":"Assorted context managers.","version":"20240630","yanked":false,"yanked_reason":null},"last_serial":23911212,"releases":{"20200228.1":[{"comment_text":"","digests":{"blake2b_256":"0f3f07d94ccfae7d952deaf5d8ebe5c6f631a798d71918985396124058f12234","md5":"e11bba4391a774a55d874e2923620002","sha256":"daebd13267ebcc6519bde0d8a20f1dd5f570776c2fa40fa46293839733840d73"},"downloads":-1,"filename":"cs.context-20200228.1.tar.gz","has_sig":false,"md5_digest":"e11bba4391a774a55d874e2923620002","packagetype":"sdist","python_version":"source","requires_python":null,"size":2923,"upload_time":"2020-02-28T09:48:43","upload_time_iso_8601":"2020-02-28T09:48:43.700208Z","url":"https://files.pythonhosted.org/packages/0f/3f/07d94ccfae7d952deaf5d8ebe5c6f631a798d71918985396124058f12234/cs.context-20200228.1.tar.gz","yanked":false,"yanked_reason":null}],"20200517":[{"comment_text":"","digests":{"blake2b_256":"26033a61303cb90a5c57fc0c9164311d6d37984c08a3306ae05e2f92aaa16bfd","md5":"42dfdd1a4c66387a1a92a489ebba93bf","sha256":"0307b1f7386394a4fc27d28c7ba9e6d30eaafb8768d8119f494e6d7ece94d1bc"},"downloads":-1,"filename":"cs.context-20200517.tar.gz","has_sig":false,"md5_digest":"42dfdd1a4c66387a1a92a489ebba93bf","packagetype":"sdist","python_version":"source","requires_python":null,"size":3036,"upload_time":"2020-05-17T06:34:02","upload_time_iso_8601":"2020-05-17T06:34:02.627584Z","url":"https://files.pythonhosted.org/packages/26/03/3a61303cb90a5c57fc0c9164311d6d37984c08a3306ae05e2f92aaa16bfd/cs.context-20200517.tar.gz","yanked":false,"yanked_reason":null}],"20200725":[{"comment_text":"","digests":{"blake2b_256":"11cf5e16d3f30d3908211c51b816ceb721d9e121da9d0a0bc1019b1c3a19fd4a","md5":"f76910e444b9ff37b07145fd98ffeda6","sha256":"573679735105b92bbec21ecc72265f0d026cb305157a23915f49c60a3cc50194"},"downloads":-1,"filename":"cs.context-20200725.tar.gz","has_sig":false,"md5_digest":"f76910e444b9ff37b07145fd98ffeda6","packagetype":"sdist","python_version":"source","requires_python":null,"size":4596,"upload_time":"2020-07-24T23:07:20","upload_time_iso_8601":"2020-07-24T23:07:20.681114Z","url":"https://files.pythonhosted.org/packages/11/cf/5e16d3f30d3908211c51b816ceb721d9e121da9d0a0bc1019b1c3a19fd4a/cs.context-20200725.tar.gz","yanked":false,"yanked_reason":null}],"20200725.1":[{"comment_text":"","digests":{"blake2b_256":"159c86c62e37b0007a36298dead7554a13a170c4a3c454bbac77ab0e88c24e1f","md5":"bebd18ffee6b12e8604ae69d10329983","sha256":"ccb176f5d0c0c8f6916b5e988ff98ddd9c3ccc47472a59a83461ddf710f4b51b"},"downloads":-1,"filename":"cs.context-20200725.1.tar.gz","has_sig":false,"md5_digest":"bebd18ffee6b12e8604ae69d10329983","packagetype":"sdist","python_version":"source","requires_python":null,"size":4751,"upload_time":"2020-07-24T23:13:01","upload_time_iso_8601":"2020-07-24T23:13:01.258895Z","url":"https://files.pythonhosted.org/packages/15/9c/86c62e37b0007a36298dead7554a13a170c4a3c454bbac77ab0e88c24e1f/cs.context-20200725.1.tar.gz","yanked":false,"yanked_reason":null}],"20210306":[{"comment_text":"","digests":{"blake2b_256":"b60f0959b1010d1394dfee5fc688e1d04759a42f813dd3c98a90db0eb5ebd381","md5":"910cfe7b747b740aa24a02122fa83f83","sha256":"fbec01d61608c25c1bba20b9788341092da7cf846da5fe18d51e19b9cbd6e7f5"},"downloads":-1,"filename":"cs.context-20210306.tar.gz","has_sig":false,"md5_digest":"910cfe7b747b740aa24a02122fa83f83","packagetype":"sdist","python_version":"source","requires_python":null,"size":7464,"upload_time":"2021-03-05T23:13:24","upload_time_iso_8601":"2021-03-05T23:13:24.566064Z","url":"https://files.pythonhosted.org/packages/b6/0f/0959b1010d1394dfee5fc688e1d04759a42f813dd3c98a90db0eb5ebd381/cs.context-20210306.tar.gz","yanked":false,"yanked_reason":null}],"20210420":[{"comment_text":"","digests":{"blake2b_256":"603a5acc487e1ec11598c970e9042b389c3533db7edef347685220de2cd2648c","md5":"a08bd1cb16d93e5760501c4cb223b958","sha256":"29c7054309a31d03566b3da203fe052b91b5ffa2bee3bdade91447a4349247cb"},"downloads":-1,"filename":"cs.context-20210420.tar.gz","has_sig":false,"md5_digest":"a08bd1cb16d93e5760501c4cb223b958","packagetype":"sdist","python_version":"source","requires_python":null,"size":7527,"upload_time":"2021-04-20T01:42:51","upload_time_iso_8601":"2021-04-20T01:42:51.118216Z","url":"https://files.pythonhosted.org/packages/60/3a/5acc487e1ec11598c970e9042b389c3533db7edef347685220de2cd2648c/cs.context-20210420.tar.gz","yanked":false,"yanked_reason":null}],"20210420.1":[{"comment_text":"","digests":{"blake2b_256":"c4e0c00038e6f765c9006b62ed6490e99bbc9a6e859e0927db7611616180fb0c","md5":"5744b11fc7967714df8bda102f149516","sha256":"28eeb66c044d3c97a1a0003d1650ac229d458485f9469951fb666ef8ac5dda94"},"downloads":-1,"filename":"cs.context-20210420.1.tar.gz","has_sig":false,"md5_digest":"5744b11fc7967714df8bda102f149516","packagetype":"sdist","python_version":"source","requires_python":null,"size":8369,"upload_time":"2021-04-20T01:47:18","upload_time_iso_8601":"2021-04-20T01:47:18.227912Z","url":"https://files.pythonhosted.org/packages/c4/e0/c00038e6f765c9006b62ed6490e99bbc9a6e859e0927db7611616180fb0c/cs.context-20210420.1.tar.gz","yanked":false,"yanked_reason":null}],"20210727":[{"comment_text":"","digests":{"blake2b_256":"a3de9c418123e5c5cbba4a97eb5d2e288d20c03415cac17988fcb61598986610","md5":"8cb6b2aaf3e189640beb21af2ecbdf8e","sha256":"ecbd0cc660613c65d4601494a0c327093c379af79ebc8bdfb17e2b976a9fc0d0"},"downloads":-1,"filename":"cs.context-20210727.tar.gz","has_sig":false,"md5_digest":"8cb6b2aaf3e189640beb21af2ecbdf8e","packagetype":"sdist","python_version":"source","requires_python":null,"size":9785,"upload_time":"2021-07-27T00:11:13","upload_time_iso_8601":"2021-07-27T00:11:13.828033Z","url":"https://files.pythonhosted.org/packages/a3/de/9c418123e5c5cbba4a97eb5d2e288d20c03415cac17988fcb61598986610/cs.context-20210727.tar.gz","yanked":false,"yanked_reason":null}],"20211114":[{"comment_text":"","digests":{"blake2b_256":"e02e6388a0d735e9c9be977c9dcf34812ca0ac02092e44d4c338375f6581d013","md5":"a9945295834cd3821f808d3935ca4dd0","sha256":"eb6294b1190b46232ec13b82de11388238b8a1d61c29b5a594299f498c0f4486"},"downloads":-1,"filename":"cs.context-20211114.tar.gz","has_sig":false,"md5_digest":"a9945295834cd3821f808d3935ca4dd0","packagetype":"sdist","python_version":"source","requires_python":null,"size":11368,"upload_time":"2021-11-14T00:42:44","upload_time_iso_8601":"2021-11-14T00:42:44.349279Z","url":"https://files.pythonhosted.org/packages/e0/2e/6388a0d735e9c9be977c9dcf34812ca0ac02092e44d4c338375f6581d013/cs.context-20211114.tar.gz","yanked":false,"yanked_reason":null}],"20211114.1":[{"comment_text":"","digests":{"blake2b_256":"0e8263419618fca17fb06d6514865a14314a38db0433899efd345b57d72784d6","md5":"d5819af72a6252ab22b6d9f4b2c050d0","sha256":"b92d836ec733820fcfe04efc64537dd4bca4a600eafc16d92643e3c01b8d8056"},"downloads":-1,"filename":"cs.context-20211114.1.tar.gz","has_sig":false,"md5_digest":"d5819af72a6252ab22b6d9f4b2c050d0","packagetype":"sdist","python_version":"source","requires_python":null,"size":11722,"upload_time":"2021-11-14T02:29:27","upload_time_iso_8601":"2021-11-14T02:29:27.161778Z","url":"https://files.pythonhosted.org/packages/0e/82/63419618fca17fb06d6514865a14314a38db0433899efd345b57d72784d6/cs.context-20211114.1.tar.gz","yanked":false,"yanked_reason":null}],"20211115":[{"comment_text":"","digests":{"blake2b_256":"05a031de46bd406d9eda82474bd9d92e89e45fa9540a2c49bbf8490236fb8f56","md5":"fd61c837adec98838f24e14edcd845e6","sha256":"6d74223e12e642d8191efd309052c9ca22f871e5bec262330402f13f0ce56f82"},"downloads":-1,"filename":"cs.context-20211115.tar.gz","has_sig":false,"md5_digest":"fd61c837adec98838f24e14edcd845e6","packagetype":"sdist","python_version":"source","requires_python":null,"size":11999,"upload_time":"2021-11-14T21:15:26","upload_time_iso_8601":"2021-11-14T21:15:26.029363Z","url":"https://files.pythonhosted.org/packages/05/a0/31de46bd406d9eda82474bd9d92e89e45fa9540a2c49bbf8490236fb8f56/cs.context-20211115.tar.gz","yanked":false,"yanked_reason":null}],"20211115.1":[{"comment_text":"","digests":{"blake2b_256":"f0f81e870bbb9332e94952a1fd09c41d825f323ae6eb46f07443452ee96b40f2","md5":"4fa629f38fe674efc02bef2405a01a56","sha256":"c8f90e1125c7f0dea6212f86fe4ac41d1912d606f577c89eb7959c6e834e40da"},"downloads":-1,"filename":"cs.context-20211115.1.tar.gz","has_sig":false,"md5_digest":"4fa629f38fe674efc02bef2405a01a56","packagetype":"sdist","python_version":"source","requires_python":null,"size":12101,"upload_time":"2021-11-14T21:20:33","upload_time_iso_8601":"2021-11-14T21:20:33.300406Z","url":"https://files.pythonhosted.org/packages/f0/f8/1e870bbb9332e94952a1fd09c41d825f323ae6eb46f07443452ee96b40f2/cs.context-20211115.1.tar.gz","yanked":false,"yanked_reason":null}],"20220227":[{"comment_text":"","digests":{"blake2b_256":"437e44ba3789adc98debca8c2921b0f425fb266253872c10f41851c37d30f4bc","md5":"9aeb6635f9f1330b524c0c1b9190c45a","sha256":"bdfc3c798698cb707e2be76e01384f19a86a5cd2c306bbf82aa8018916f6561f"},"downloads":-1,"filename":"cs.context-20220227.tar.gz","has_sig":false,"md5_digest":"9aeb6635f9f1330b524c0c1b9190c45a","packagetype":"sdist","python_version":"source","requires_python":null,"size":12141,"upload_time":"2022-02-26T23:13:28","upload_time_iso_8601":"2022-02-26T23:13:28.133716Z","url":"https://files.pythonhosted.org/packages/43/7e/44ba3789adc98debca8c2921b0f425fb266253872c10f41851c37d30f4bc/cs.context-20220227.tar.gz","yanked":false,"yanked_reason":null}],"20220619":[{"comment_text":"","digests":{"blake2b_256":"da4b4fa44d9829991d0d53fc41a88c2e10eb2304b26661ac440780abbde5706b","md5":"6b30e3454d0cf555060975247e2c7819","sha256":"3ae3a4c0a5f3276c3bb8afade9809b4c603af1b8b3f68b72de60948540c05ef3"},"downloads":-1,"filename":"cs.context-20220619-py3-none-any.whl","has_sig":false,"md5_digest":"6b30e3454d0cf555060975247e2c7819","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":9864,"upload_time":"2022-06-19T09:19:32","upload_time_iso_8601":"2022-06-19T09:19:32.752090Z","url":"https://files.pythonhosted.org/packages/da/4b/4fa44d9829991d0d53fc41a88c2e10eb2304b26661ac440780abbde5706b/cs.context-20220619-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"a3bdd4c3aaec6c1940c001432abd86cc8ccdff5a8f5e643692bf2b945a3dddef","md5":"98313402ea6bbacd9730b19783ab5f96","sha256":"4b12087d94cfbf9ab9b50aaa9bceb486d642e091e4408814bbf1c5692c93930a"},"downloads":-1,"filename":"cs.context-20220619.tar.gz","has_sig":false,"md5_digest":"98313402ea6bbacd9730b19783ab5f96","packagetype":"sdist","python_version":"source","requires_python":null,"size":11069,"upload_time":"2022-06-19T09:19:34","upload_time_iso_8601":"2022-06-19T09:19:34.646446Z","url":"https://files.pythonhosted.org/packages/a3/bd/d4c3aaec6c1940c001432abd86cc8ccdff5a8f5e643692bf2b945a3dddef/cs.context-20220619.tar.gz","yanked":false,"yanked_reason":null}],"20221118":[{"comment_text":"","digests":{"blake2b_256":"bae9086f96b90f250e2d58740570e0d8940fee7779b26d6529a68932a86795bc","md5":"f7f9a7c353b483dec8de48ff42787672","sha256":"e3979d51723e80f02441af877231eafe5d643c356c01a3f48ad835915c442f81"},"downloads":-1,"filename":"cs.context-20221118-py3-none-any.whl","has_sig":false,"md5_digest":"f7f9a7c353b483dec8de48ff42787672","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":9946,"upload_time":"2022-11-18T03:45:57","upload_time_iso_8601":"2022-11-18T03:45:57.013925Z","url":"https://files.pythonhosted.org/packages/ba/e9/086f96b90f250e2d58740570e0d8940fee7779b26d6529a68932a86795bc/cs.context-20221118-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"31ba8e0397a2d45b5ae3945417c6004a77a7679cef3a75567f869497a87fdc46","md5":"3676e70d6c556784079c44e8c499f44a","sha256":"eaf3c106e7341e20582847570bd3c86894d449ca36962556111b8e1fc413bf2c"},"downloads":-1,"filename":"cs.context-20221118.tar.gz","has_sig":false,"md5_digest":"3676e70d6c556784079c44e8c499f44a","packagetype":"sdist","python_version":"source","requires_python":null,"size":11160,"upload_time":"2022-11-18T03:45:58","upload_time_iso_8601":"2022-11-18T03:45:58.519920Z","url":"https://files.pythonhosted.org/packages/31/ba/8e0397a2d45b5ae3945417c6004a77a7679cef3a75567f869497a87fdc46/cs.context-20221118.tar.gz","yanked":false,"yanked_reason":null}],"20230109":[{"comment_text":"","digests":{"blake2b_256":"ed73dccca80acd172129a313c8460907d7c2d5f8dbe90b53e939f390884a2d2f","md5":"7c7775c38604ca2122da8dd773ff7698","sha256":"c53e6d79e8b665f2c57b7c61dd37b508882287d52503af142f7ca93db3c2da24"},"downloads":-1,"filename":"cs.context-20230109-py3-none-any.whl","has_sig":false,"md5_digest":"7c7775c38604ca2122da8dd773ff7698","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":10343,"upload_time":"2023-01-09T09:57:12","upload_time_iso_8601":"2023-01-09T09:57:12.083444Z","url":"https://files.pythonhosted.org/packages/ed/73/dccca80acd172129a313c8460907d7c2d5f8dbe90b53e939f390884a2d2f/cs.context-20230109-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"0b0aeb2405e0c6a9ca74a09acdd239e207db60f2e0c2c95ee3261088d18f8af5","md5":"7cddd050ddb03a0ac23f81393e81ee83","sha256":"5bc9bf8bcc2e0840acdf24b58d5b1897f0b7560cc44b5a74c878e30dccfc1963"},"downloads":-1,"filename":"cs.context-20230109.tar.gz","has_sig":false,"md5_digest":"7cddd050ddb03a0ac23f81393e81ee83","packagetype":"sdist","python_version":"source","requires_python":null,"size":11512,"upload_time":"2023-01-09T09:57:13","upload_time_iso_8601":"2023-01-09T09:57:13.623282Z","url":"https://files.pythonhosted.org/packages/0b/0a/eb2405e0c6a9ca74a09acdd239e207db60f2e0c2c95ee3261088d18f8af5/cs.context-20230109.tar.gz","yanked":false,"yanked_reason":null}],"20230125":[{"comment_text":"","digests":{"blake2b_256":"091824ba1d0f9cb88bf5c769e90936a2bd3834cd548c1c2d39b5cfcd524d90b7","md5":"76aed3faa995f46777eb435e891f0859","sha256":"3198fba6152b500ac60a4fb620c29a91cf6ed9153e84a5710149dbc4ba12a22d"},"downloads":-1,"filename":"cs.context-20230125-py3-none-any.whl","has_sig":false,"md5_digest":"76aed3faa995f46777eb435e891f0859","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":10626,"upload_time":"2023-01-25T09:39:22","upload_time_iso_8601":"2023-01-25T09:39:22.269805Z","url":"https://files.pythonhosted.org/packages/09/18/24ba1d0f9cb88bf5c769e90936a2bd3834cd548c1c2d39b5cfcd524d90b7/cs.context-20230125-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d0fadb7958a191767608712db4b235aa3bec233dfbf0f8bd13fece291ee7d96c","md5":"1c1fee26985396d517b2a6398ac52ce9","sha256":"7644e1ce7fa06cf04d2e4fd834319fe246a355e24b3bc949aec6e374d5accaef"},"downloads":-1,"filename":"cs.context-20230125.tar.gz","has_sig":false,"md5_digest":"1c1fee26985396d517b2a6398ac52ce9","packagetype":"sdist","python_version":"source","requires_python":null,"size":11961,"upload_time":"2023-01-25T09:39:23","upload_time_iso_8601":"2023-01-25T09:39:23.671840Z","url":"https://files.pythonhosted.org/packages/d0/fa/db7958a191767608712db4b235aa3bec233dfbf0f8bd13fece291ee7d96c/cs.context-20230125.tar.gz","yanked":false,"yanked_reason":null}],"20230212":[{"comment_text":"","digests":{"blake2b_256":"a724f28133ccf0e233797ec92342e61f2fb106da98ad3ae29501c269bdfbdae9","md5":"febad9d6759b6c92248bef44715d600e","sha256":"ba9ba759ff22243c5082fb5189b1b289e30c1e35b47dfc4ea25d39e64b578d11"},"downloads":-1,"filename":"cs.context-20230212-py3-none-any.whl","has_sig":false,"md5_digest":"febad9d6759b6c92248bef44715d600e","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":10412,"upload_time":"2023-02-11T23:46:49","upload_time_iso_8601":"2023-02-11T23:46:49.910362Z","url":"https://files.pythonhosted.org/packages/a7/24/f28133ccf0e233797ec92342e61f2fb106da98ad3ae29501c269bdfbdae9/cs.context-20230212-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ed07c08dd8ab8ada43697e879f5b7b29ecf2f7046e6cc1f710cf71413a4ebea1","md5":"fd626127b2fd03b322cabb3edae2ae72","sha256":"9cefb7a277ca9db1fc379f54b2ba3b0fe8cc41154f74262cce12ed6bf97131aa"},"downloads":-1,"filename":"cs.context-20230212.tar.gz","has_sig":false,"md5_digest":"fd626127b2fd03b322cabb3edae2ae72","packagetype":"sdist","python_version":"source","requires_python":null,"size":11674,"upload_time":"2023-02-11T23:46:52","upload_time_iso_8601":"2023-02-11T23:46:52.747602Z","url":"https://files.pythonhosted.org/packages/ed/07/c08dd8ab8ada43697e879f5b7b29ecf2f7046e6cc1f710cf71413a4ebea1/cs.context-20230212.tar.gz","yanked":false,"yanked_reason":null}],"20230331":[{"comment_text":"","digests":{"blake2b_256":"4c04a47939363384c2b1439adb6bce9bba0284bfcef2f99c6aedf0da04c66eda","md5":"c8551db9fe090a202ae0a27bef411356","sha256":"80b8363a1fa5c9d18c817aae0a8b2457a4844316f8b9ada175408dfc363d7408"},"downloads":-1,"filename":"cs.context-20230331-py3-none-any.whl","has_sig":false,"md5_digest":"c8551db9fe090a202ae0a27bef411356","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":10499,"upload_time":"2023-03-31T10:12:51","upload_time_iso_8601":"2023-03-31T10:12:51.153788Z","url":"https://files.pythonhosted.org/packages/4c/04/a47939363384c2b1439adb6bce9bba0284bfcef2f99c6aedf0da04c66eda/cs.context-20230331-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"5f9ebfd6383e1b5a0555ad3574e7b469d2947cd5da4319edf2c05fd932805382","md5":"41359a4d577bf928c7f0bf2c8f7b4a8e","sha256":"bde8774e84557c4dda6eb27056839fa5fb9ad307efe28e32eb85931c562fdbc1"},"downloads":-1,"filename":"cs.context-20230331.tar.gz","has_sig":false,"md5_digest":"41359a4d577bf928c7f0bf2c8f7b4a8e","packagetype":"sdist","python_version":"source","requires_python":null,"size":11822,"upload_time":"2023-03-31T10:12:52","upload_time_iso_8601":"2023-03-31T10:12:52.628210Z","url":"https://files.pythonhosted.org/packages/5f/9e/bfd6383e1b5a0555ad3574e7b469d2947cd5da4319edf2c05fd932805382/cs.context-20230331.tar.gz","yanked":false,"yanked_reason":null}],"20240201":[{"comment_text":"","digests":{"blake2b_256":"8a15e4ad1a134551f29902ebcea6fc9533a947d69b36297aa0ead235bfbd9535","md5":"befa512afccc18fc5ed53faed3af3673","sha256":"be73067d7819c691bd39e54f38f504b9e77c1e4f1f67101a0222b5a91dfe71f1"},"downloads":-1,"filename":"cs.context-20240201-py3-none-any.whl","has_sig":false,"md5_digest":"befa512afccc18fc5ed53faed3af3673","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":10925,"upload_time":"2024-02-01T11:05:29","upload_time_iso_8601":"2024-02-01T11:05:29.823057Z","url":"https://files.pythonhosted.org/packages/8a/15/e4ad1a134551f29902ebcea6fc9533a947d69b36297aa0ead235bfbd9535/cs.context-20240201-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"054cb90255a0331ea7c264ff9e1ce25153649ed19bcd7ffa0eb82a29d3b04952","md5":"238f11a9677e92799b99ed189d66c385","sha256":"dbee9350ff233b1d23a61fd257818d37c761a4081f8a1426980a5178e29caed0"},"downloads":-1,"filename":"cs.context-20240201.tar.gz","has_sig":false,"md5_digest":"238f11a9677e92799b99ed189d66c385","packagetype":"sdist","python_version":"source","requires_python":null,"size":12558,"upload_time":"2024-02-01T11:05:31","upload_time_iso_8601":"2024-02-01T11:05:31.399095Z","url":"https://files.pythonhosted.org/packages/05/4c/b90255a0331ea7c264ff9e1ce25153649ed19bcd7ffa0eb82a29d3b04952/cs.context-20240201.tar.gz","yanked":false,"yanked_reason":null}],"20240212":[{"comment_text":"","digests":{"blake2b_256":"9be6f78f6eab1c6189a9238aab6224aa37321de430ec059db96820c9889e2de4","md5":"f538cfba90b9a9a0e1eae2e887f92f59","sha256":"2924c94e00eebbfd03facf5d50d46913d6fffdcd01e984d82bae038291206846"},"downloads":-1,"filename":"cs.context-20240212-py3-none-any.whl","has_sig":false,"md5_digest":"f538cfba90b9a9a0e1eae2e887f92f59","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":11073,"upload_time":"2024-02-11T20:40:44","upload_time_iso_8601":"2024-02-11T20:40:44.953594Z","url":"https://files.pythonhosted.org/packages/9b/e6/f78f6eab1c6189a9238aab6224aa37321de430ec059db96820c9889e2de4/cs.context-20240212-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"56361e22e16eb892278c5a96174f916a0f6b146f7b2f3d3ac58eb6ec2730c667","md5":"eccbcd5a9e0f8c794dba4ebef65d7e75","sha256":"56e34b409c83f09c1729300219927583c79885d46ede8f178a17a24790d13966"},"downloads":-1,"filename":"cs.context-20240212.tar.gz","has_sig":false,"md5_digest":"eccbcd5a9e0f8c794dba4ebef65d7e75","packagetype":"sdist","python_version":"source","requires_python":null,"size":12729,"upload_time":"2024-02-11T20:40:47","upload_time_iso_8601":"2024-02-11T20:40:47.337512Z","url":"https://files.pythonhosted.org/packages/56/36/1e22e16eb892278c5a96174f916a0f6b146f7b2f3d3ac58eb6ec2730c667/cs.context-20240212.tar.gz","yanked":false,"yanked_reason":null}],"20240212.1":[{"comment_text":"","digests":{"blake2b_256":"2ae9c93959523b6d84baf57bb300ee59faf12be6c394a15914a74ce545d7258c","md5":"5a5d05a8a3c068b18abfae0b8dc0a185","sha256":"f29aae33079e21a69d85b69c95e8a11e67435390be823686cbea7f3a0fcc1a80"},"downloads":-1,"filename":"cs.context-20240212.1-py3-none-any.whl","has_sig":false,"md5_digest":"5a5d05a8a3c068b18abfae0b8dc0a185","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":11097,"upload_time":"2024-02-11T22:11:03","upload_time_iso_8601":"2024-02-11T22:11:03.616413Z","url":"https://files.pythonhosted.org/packages/2a/e9/c93959523b6d84baf57bb300ee59faf12be6c394a15914a74ce545d7258c/cs.context-20240212.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f0cf7b40360d24de4d8f1b848bb5c2f395ed039d7c895de02a13b60946c4c9c7","md5":"a8efaa47d7df6ed4c5d083b102120cf3","sha256":"8b1802608fce218cc118cbcdb9d3a891baa94ac4fe4af0060aabb19997a2beea"},"downloads":-1,"filename":"cs.context-20240212.1.tar.gz","has_sig":false,"md5_digest":"a8efaa47d7df6ed4c5d083b102120cf3","packagetype":"sdist","python_version":"source","requires_python":null,"size":12735,"upload_time":"2024-02-11T22:11:05","upload_time_iso_8601":"2024-02-11T22:11:05.844081Z","url":"https://files.pythonhosted.org/packages/f0/cf/7b40360d24de4d8f1b848bb5c2f395ed039d7c895de02a13b60946c4c9c7/cs.context-20240212.1.tar.gz","yanked":false,"yanked_reason":null}],"20240316":[{"comment_text":"","digests":{"blake2b_256":"d8f9b573a4caa46d294dcc80fd9ec8a9f661c1d083aeed7f2e4eea78e5215a8f","md5":"ea21af60a8a50eec427b1b3c06070b4a","sha256":"081e565840905bebdf02baa0b6b26d537387460080359c906060ab86cb979a16"},"downloads":-1,"filename":"cs.context-20240316-py3-none-any.whl","has_sig":false,"md5_digest":"ea21af60a8a50eec427b1b3c06070b4a","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":11088,"upload_time":"2024-03-16T07:01:23","upload_time_iso_8601":"2024-03-16T07:01:23.692217Z","url":"https://files.pythonhosted.org/packages/d8/f9/b573a4caa46d294dcc80fd9ec8a9f661c1d083aeed7f2e4eea78e5215a8f/cs.context-20240316-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"5c5fece5ae79fffe37846c7eb51932a1013129bc6562458d6f8930795e08633a","md5":"a11f0e5c0c44e790bd08a574f716bde3","sha256":"d2fd38eb85e62243053931fa30d4a55eb5b92a7b3739dec209868d75541a7221"},"downloads":-1,"filename":"cs.context-20240316.tar.gz","has_sig":false,"md5_digest":"a11f0e5c0c44e790bd08a574f716bde3","packagetype":"sdist","python_version":"source","requires_python":null,"size":12288,"upload_time":"2024-03-16T07:01:25","upload_time_iso_8601":"2024-03-16T07:01:25.857846Z","url":"https://files.pythonhosted.org/packages/5c/5f/ece5ae79fffe37846c7eb51932a1013129bc6562458d6f8930795e08633a/cs.context-20240316.tar.gz","yanked":false,"yanked_reason":null}],"20240412":[{"comment_text":"","digests":{"blake2b_256":"d795b36e2f142f63e0a3c959d7de342fa09a937f5d73721642a20580599c63b1","md5":"ee7692a894ef1bd054d130f57a531680","sha256":"7f7ccc2f6bba332e0c05e39497564807d2c460095103c0fa898a6eac209841e9"},"downloads":-1,"filename":"cs.context-20240412-py3-none-any.whl","has_sig":false,"md5_digest":"ee7692a894ef1bd054d130f57a531680","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":13383,"upload_time":"2024-04-12T02:33:04","upload_time_iso_8601":"2024-04-12T02:33:04.819493Z","url":"https://files.pythonhosted.org/packages/d7/95/b36e2f142f63e0a3c959d7de342fa09a937f5d73721642a20580599c63b1/cs.context-20240412-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"0a420722b3b34cb5d455acc6d5ba81b9b02fd260240f25a6cad61aa2d7b24a87","md5":"35fc042133ef5462b2f6a7aa5a6f1d57","sha256":"e9a2edbf6c76adba4b1e00686b1a2ff4e2d29fabef6fca73ac74d021f4bbcc2d"},"downloads":-1,"filename":"cs.context-20240412.tar.gz","has_sig":false,"md5_digest":"35fc042133ef5462b2f6a7aa5a6f1d57","packagetype":"sdist","python_version":"source","requires_python":null,"size":14544,"upload_time":"2024-04-12T02:33:06","upload_time_iso_8601":"2024-04-12T02:33:06.917384Z","url":"https://files.pythonhosted.org/packages/0a/42/0722b3b34cb5d455acc6d5ba81b9b02fd260240f25a6cad61aa2d7b24a87/cs.context-20240412.tar.gz","yanked":false,"yanked_reason":null}],"20240630":[{"comment_text":"","digests":{"blake2b_256":"f98f21edb45e346381bf41853ed94f955e29a60af9a193f6d6eea302b85151fb","md5":"8441718b01616aac6c6620a16cc2f5c0","sha256":"8cad272edc169a455913e8419058472e8ff281971abc24ba6b3f5d828386d943"},"downloads":-1,"filename":"cs.context-20240630-py3-none-any.whl","has_sig":false,"md5_digest":"8441718b01616aac6c6620a16cc2f5c0","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":14333,"upload_time":"2024-06-30T01:05:41","upload_time_iso_8601":"2024-06-30T01:05:41.636237Z","url":"https://files.pythonhosted.org/packages/f9/8f/21edb45e346381bf41853ed94f955e29a60af9a193f6d6eea302b85151fb/cs.context-20240630-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"92bf7bc63e0b38ea300b677cfb44b5466d95f8f5529377da654566b6c33bee0d","md5":"c442832c60de06422827993732320c1f","sha256":"ed30bf2054319f48f4e9fed54b213f9dfb036dae61f090433d56db805c37fc35"},"downloads":-1,"filename":"cs.context-20240630.tar.gz","has_sig":false,"md5_digest":"c442832c60de06422827993732320c1f","packagetype":"sdist","python_version":"source","requires_python":null,"size":16280,"upload_time":"2024-06-30T01:05:43","upload_time_iso_8601":"2024-06-30T01:05:43.600653Z","url":"https://files.pythonhosted.org/packages/92/bf/7bc63e0b38ea300b677cfb44b5466d95f8f5529377da654566b6c33bee0d/cs.context-20240630.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"f98f21edb45e346381bf41853ed94f955e29a60af9a193f6d6eea302b85151fb","md5":"8441718b01616aac6c6620a16cc2f5c0","sha256":"8cad272edc169a455913e8419058472e8ff281971abc24ba6b3f5d828386d943"},"downloads":-1,"filename":"cs.context-20240630-py3-none-any.whl","has_sig":false,"md5_digest":"8441718b01616aac6c6620a16cc2f5c0","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":14333,"upload_time":"2024-06-30T01:05:41","upload_time_iso_8601":"2024-06-30T01:05:41.636237Z","url":"https://files.pythonhosted.org/packages/f9/8f/21edb45e346381bf41853ed94f955e29a60af9a193f6d6eea302b85151fb/cs.context-20240630-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"92bf7bc63e0b38ea300b677cfb44b5466d95f8f5529377da654566b6c33bee0d","md5":"c442832c60de06422827993732320c1f","sha256":"ed30bf2054319f48f4e9fed54b213f9dfb036dae61f090433d56db805c37fc35"},"downloads":-1,"filename":"cs.context-20240630.tar.gz","has_sig":false,"md5_digest":"c442832c60de06422827993732320c1f","packagetype":"sdist","python_version":"source","requires_python":null,"size":16280,"upload_time":"2024-06-30T01:05:43","upload_time_iso_8601":"2024-06-30T01:05:43.600653Z","url":"https://files.pythonhosted.org/packages/92/bf/7bc63e0b38ea300b677cfb44b5466d95f8f5529377da654566b6c33bee0d/cs.context-20240630.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
