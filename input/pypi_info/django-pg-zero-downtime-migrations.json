{"info":{"author":"Paveł Tyślacki","author_email":"pavel.tyslacki@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 4 - Beta","Framework :: Django","Framework :: Django :: 3.2","Framework :: Django :: 4.0","Framework :: Django :: 4.1","Framework :: Django :: 4.2","Framework :: Django :: 5.0","Intended Audience :: Developers","License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],"description":"[![PyPI](https://img.shields.io/pypi/v/django-pg-zero-downtime-migrations.svg)](https://pypi.org/project/django-pg-zero-downtime-migrations/)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/django-pg-zero-downtime-migrations.svg)\n![PyPI - Django Version](https://img.shields.io/pypi/djversions/django-pg-zero-downtime-migrations.svg?label=django)\n![Postgres Version](https://img.shields.io/badge/postgres-12%20|%2013%20|%2014%20|%2015%20|%2016%20-blue.svg)\n[![PyPI - License](https://img.shields.io/pypi/l/django-pg-zero-downtime-migrations.svg)](https://raw.githubusercontent.com/tbicr/django-pg-zero-downtime-migrations/master/LICENSE)\n\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/django-pg-zero-downtime-migrations.svg)](https://pypistats.org/packages/django-pg-zero-downtime-migrations)\n[![GitHub last commit](https://img.shields.io/github/last-commit/tbicr/django-pg-zero-downtime-migrations/master.svg)](https://github.com/tbicr/django-pg-zero-downtime-migrations/commits/master)\n[![Build Status](https://github.com/tbicr/django-pg-zero-downtime-migrations/actions/workflows/check.yml/badge.svg?branch=master)](https://github.com/tbicr/django-pg-zero-downtime-migrations/actions)\n\n# django-pg-zero-downtime-migrations\n\nDjango postgresql backend that apply migrations with respect to database locks.\n\n## Installation\n\n    pip install django-pg-zero-downtime-migrations\n\n## Usage\n\nTo enable zero downtime migrations for postgres just setup django backend provided by this package and add most safe settings:\n\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django_zero_downtime_migrations.backends.postgres',\n            #'ENGINE': 'django_zero_downtime_migrations.backends.postgis',\n            ...\n        }\n    }\n    ZERO_DOWNTIME_MIGRATIONS_LOCK_TIMEOUT = '2s'\n    ZERO_DOWNTIME_MIGRATIONS_STATEMENT_TIMEOUT = '2s'\n    ZERO_DOWNTIME_MIGRATIONS_FLEXIBLE_STATEMENT_TIMEOUT = True\n    ZERO_DOWNTIME_MIGRATIONS_RAISE_FOR_UNSAFE = True\n\n> _NOTE:_ this backend brings zero downtime improvements only for migrations (schema and `RunSQL` operations, but not for `RunPython` operation), for other purpose it works the same as standard django backend.\n\n> _NOTE:_ this package is in beta, please check your migrations SQL before applying on production and submit issue for any question.\n\n### Differences with standard django backend\n\nThis backend provides same result state (except of `ZERO_DOWNTIME_MIGRATIONS_KEEP_DEFAULT=True` usage for django < 5.0), but different way and with additional guarantees for avoiding stuck table locks.\n\nThis backend doesn't use transactions for migrations (except `RunPython` operation), because not all SQL fixes can be run in transaction and it allows to avoid deadlocks for complex migration. So when your migration will down in the middle of migration file operations you need to fix db state manually (instead potential downtime). For that reason good practice to make migration modules small as possible. Also `ZERO_DOWNTIME_MIGRATIONS_IDEMPOTENT_SQL=True` allows to automate manual db state fixing.\n\n### Deployment flow\n\nThere are requirements for zero downtime deployment:\n\n1. We have one database;\n1. We have several instances with application - application always should be available, even you restart one of instances;\n1. We have balancer before instances;\n1. Our application works fine before, on and after migration - old application works fine with old and new database schema version;\n1. Our application works fine before, on and after instance updating - old and new application versions work fine with new database schema version.\n\n![deployment timeline](https://raw.githubusercontent.com/tbicr/django-pg-zero-downtime-migrations/0.16/images/timeline.png \"deployment timeline\")\n\nFlow:\n\n1. apply migrations\n1. disconnect instance form balancer, restart it and back to balancer - repeat this operation one by one for all instances\n\nIf our deployment don't satisfy zero downtime deployment rules, then we split it to smaller deployments.\n\n![deployment flow](https://raw.githubusercontent.com/tbicr/django-pg-zero-downtime-migrations/0.16/images/deployment.gif \"deployment flow\")\n\n### Settings\n\n#### ZERO_DOWNTIME_MIGRATIONS_LOCK_TIMEOUT\n\nApply [`lock_timeout`](https://www.postgresql.org/docs/current/static/runtime-config-client.html#GUC-LOCK-TIMEOUT) for SQL statements that require `ACCESS EXCLUSIVE` lock, default `None`:\n\n    ZERO_DOWNTIME_MIGRATIONS_LOCK_TIMEOUT = '2s'\n\nAllowed values:\n\n- `None` - current postgres setting used\n- other - timeout will be applied, `0` and equivalents mean that timeout will be disabled\n\n#### ZERO_DOWNTIME_MIGRATIONS_STATEMENT_TIMEOUT\n\nApply [`statement_timeout`](https://www.postgresql.org/docs/current/static/runtime-config-client.html#GUC-STATEMENT-TIMEOUT) for SQL statements that require `ACCESS EXCLUSIVE` lock, default `None`:\n\n    ZERO_DOWNTIME_MIGRATIONS_STATEMENT_TIMEOUT = '2s'\n\nAllowed values:\n\n- `None` - current postgres setting used\n- other - timeout will be applied, `0` and equivalents mean that timeout will be disabled\n\n#### ZERO_DOWNTIME_MIGRATIONS_FLEXIBLE_STATEMENT_TIMEOUT\n\nSet [`statement_timeout`](https://www.postgresql.org/docs/current/static/runtime-config-client.html#GUC-STATEMENT-TIMEOUT) to `0ms` for SQL statements that require `SHARE UPDATE EXCLUSIVE` lock that useful in case when `statement_timeout` enabled globally and you try run long-running operations like index creation or constraint validation, default `False`:\n\n    ZERO_DOWNTIME_MIGRATIONS_FLEXIBLE_STATEMENT_TIMEOUT = True\n\n#### ZERO_DOWNTIME_MIGRATIONS_RAISE_FOR_UNSAFE\n\nEnabled option doesn't allow run potential unsafe migration, default `False`:\n\n    ZERO_DOWNTIME_MIGRATIONS_RAISE_FOR_UNSAFE = True\n\n#### ZERO_DOWNTIME_DEFERRED_SQL\n\nDefine way to apply deferred sql, default `True`:\n\n    ZERO_DOWNTIME_DEFERRED_SQL = True\n\nAllowed values:\n- `True` - run deferred sql similar to default django way\n- `False` - run deferred sql as soon as possible\n\n#### ZERO_DOWNTIME_MIGRATIONS_IDEMPOTENT_SQL\n\nDefine idempotent mode, default `False`:\n\n    ZERO_DOWNTIME_MIGRATIONS_IDEMPOTENT_SQL = False\n\nAllowed values:\n- `True` - skip already applied sql migrations\n- `False` - standard non atomic django behaviour\n\nAs this backend doesn't use transactions for migrations any failed migration can be cause of stopped process in intermediate state.\nTo avoid manual schema manipulation idempotent mode allows to rerun failed migration after fixed issue (eg. data issue or long running CRUD queries).\n\n> _NOTE:_ idempotent mode checks rely only on name and index and constraint valid state, so it can ignore name collisions and recommended do not use it for CI checks.\n\n#### ZERO_DOWNTIME_MIGRATIONS_EXPLICIT_CONSTRAINTS_DROP\n\nDefine way to drop foreign key, unique constraints and indexes before drop table or column, default `True`:\n\n    ZERO_DOWNTIME_MIGRATIONS_EXPLICIT_CONSTRAINTS_DROP = True\n\nAllowed values:\n- `True` - before dropping table drop all foreign keys related to this table and before dropping column drop all foreign keys related to this column, unique constraints on this column and indexes used this column.\n- `False` - standard django behaviour that will drop constraints with `CASCADE` mode (some constraints can be dropped explicitly too).\n\nExplicitly dropping constraints and indexes before dropping tables or columns allows for splitting schema-only changes with an `ACCESS EXCLUSIVE` lock and the deletion of physical files, which can take significant time and cause downtime.\n\n#### ZERO_DOWNTIME_MIGRATIONS_KEEP_DEFAULT\n\nDefine way keep or drop code defaults on database level when adding new column, default `False`:\n\n    ZERO_DOWNTIME_MIGRATIONS_KEEP_DEFAULT = False\n\nAllowed values:\n- `True` - after adding column with code default this default will not be dropped, this option allows to use `ALTER TABLE ADD COLUMN SET DEFAULT NOT NULL` as safe operation that much more simple and efficient than creating column without default on database level and populating column next\n- `False` - after adding column with code default this default will be dropped, this is standard django behaviour\n\n> _NOTE:_ this option works only for django < 5.0, in django 5.0+ explicit [`db_default`](https://docs.djangoproject.com/en/dev/ref/models/fields/#db-default) should be used instead.\n\n#### PgBouncer and timeouts\n\nIn case you using [PgBouncer](https://www.pgbouncer.org/) and expect timeouts will work as expected you need make sure that run migrations using [session pool_mode](https://www.pgbouncer.org/config.html#pool_mode) or use direct database connection.\n\n## How it works\n\n### Postgres table level locks\n\nPostgres has different locks on table level that can conflict with each other https://www.postgresql.org/docs/current/static/explicit-locking.html#LOCKING-TABLES:\n\n|                          | `ACCESS SHARE` | `ROW SHARE` | `ROW EXCLUSIVE` | `SHARE UPDATE EXCLUSIVE` | `SHARE` | `SHARE ROW EXCLUSIVE` | `EXCLUSIVE` | `ACCESS EXCLUSIVE` |\n| ------------------------ | :------------: | :---------: | :-------------: | :----------------------: | :-----: | :-------------------: | :---------: | :----------------: |\n| `ACCESS SHARE`           |                |             |                 |                          |         |                       |             |         X          |\n| `ROW SHARE`              |                |             |                 |                          |         |                       |      X      |         X          |\n| `ROW EXCLUSIVE`          |                |             |                 |                          |    X    |           X           |      X      |         X          |\n| `SHARE UPDATE EXCLUSIVE` |                |             |                 |            X             |    X    |           X           |      X      |         X          |\n| `SHARE`                  |                |             |        X        |            X             |         |           X           |      X      |         X          |\n| `SHARE ROW EXCLUSIVE`    |                |             |        X        |            X             |    X    |           X           |      X      |         X          |\n| `EXCLUSIVE`              |                |      X      |        X        |            X             |    X    |           X           |      X      |         X          |\n| `ACCESS EXCLUSIVE`       |       X        |      X      |        X        |            X             |    X    |           X           |      X      |         X          |\n\n### Migration and business logic locks\n\nLets split this lock to migration and business logic operations.\n\n- Migration operations work synchronously in one thread and cover schema migrations (data migrations conflict with business logic operations same as business logic conflict concurrently).\n- Business logic operations work concurrently.\n\n#### Migration locks\n\n| lock                     | operations                                                                                            |\n| ------------------------ | ----------------------------------------------------------------------------------------------------- |\n| `ACCESS EXCLUSIVE`       | `CREATE SEQUENCE`, `DROP SEQUENCE`, `CREATE TABLE`, `DROP TABLE` \\*, `ALTER TABLE` \\*\\*, `DROP INDEX` |\n| `SHARE`                  | `CREATE INDEX`                                                                                        |\n| `SHARE UPDATE EXCLUSIVE` | `CREATE INDEX CONCURRENTLY`, `DROP INDEX CONCURRENTLY`, `ALTER TABLE VALIDATE CONSTRAINT` \\*\\*\\*      |\n\n\\*: `CREATE SEQUENCE`, `DROP SEQUENCE`, `CREATE TABLE`, `DROP TABLE` shouldn't have conflicts, because your business logic shouldn't yet operate with created tables and shouldn't already operate with deleted tables.\n\n\\*\\*: Not all `ALTER TABLE` operations take `ACCESS EXCLUSIVE` lock, but all current django's migrations take it https://github.com/django/django/blob/master/django/db/backends/base/schema.py, https://github.com/django/django/blob/master/django/db/backends/postgresql/schema.py and https://www.postgresql.org/docs/current/static/sql-altertable.html.\n\n\\*\\*\\*: Django doesn't have `VALIDATE CONSTRAINT` logic, but we will use it for some cases.\n\n#### Business logic locks\n\n| lock            | operations                   | conflict with lock                                              | conflict with operations                    |\n| --------------- | ---------------------------- | --------------------------------------------------------------- | ------------------------------------------- |\n| `ACCESS SHARE`  | `SELECT`                     | `ACCESS EXCLUSIVE`                                              | `ALTER TABLE`, `DROP INDEX`                 |\n| `ROW SHARE`     | `SELECT FOR UPDATE`          | `ACCESS EXCLUSIVE`, `EXCLUSIVE`                                 | `ALTER TABLE`, `DROP INDEX`                 |\n| `ROW EXCLUSIVE` | `INSERT`, `UPDATE`, `DELETE` | `ACCESS EXCLUSIVE`, `EXCLUSIVE`, `SHARE ROW EXCLUSIVE`, `SHARE` | `ALTER TABLE`, `DROP INDEX`, `CREATE INDEX` |\n\nSo you can find that all django schema changes for exist table conflicts with business logic, but fortunately they are safe or has safe alternative in general.\n\n### Postgres row level locks\n\nAs business logic mostly works with table rows it's also important to understand lock conflicts on row level https://www.postgresql.org/docs/current/static/explicit-locking.html#LOCKING-ROWS:\n\n| lock                | `FOR KEY SHARE` | `FOR SHARE` | `FOR NO KEY UPDATE` | `FOR UPDATE` |\n| ------------------- | :-------------: | :---------: | :-----------------: | :----------: |\n| `FOR KEY SHARE`     |                 |             |                     |      X       |\n| `FOR SHARE`         |                 |             |          X          |      X       |\n| `FOR NO KEY UPDATE` |                 |      X      |          X          |      X       |\n| `FOR UPDATE`        |        X        |      X      |          X          |      X       |\n\nMain point there is if you have two transactions that update one row, then second transaction will wait until first will be completed. So for business logic and data migrations better to avoid updates for whole table and use batch operations instead.\n\n> _NOTE:_ batch operations also can work faster because postgres can use more optimal execution plan with indexes for small data range.\n\n### Transactions FIFO waiting\n\n![postgres FIFO](https://raw.githubusercontent.com/tbicr/django-pg-zero-downtime-migrations/0.16/images/fifo-diagram.png \"postgres FIFO\")\n\nFound same diagram in interesting article http://pankrat.github.io/2015/django-migrations-without-downtimes/.\n\nIn this diagram we can extract several metrics:\n\n1. operation time - time spent changing schema, in the case of long running operations on many rows tables like `CREATE INDEX` or `ALTER TABLE ADD CONSTRAINT`, so you need a safe equivalent.\n2. waiting time - your migration will wait until all transactions complete, so there is issue for long running operations/transactions like analytic, so you need avoid it or disable during migration.\n3. queries per second + execution time and connections pool - if executing many queries, especially long running ones, they can consume all available database connections until the lock is released, so you need different optimizations there: run migrations when least busy, decrease query count and execution time, split data.\n4. too many operations in one transaction - you have issues in all previous points for one operation so if you have many operations in one transaction then you have more likelihood to get this issue, so you need avoid too many simultaneous operations in a single transaction (or even not run it in a transaction at all but being careful when an operation fails).\n\n### Dealing with timeouts\n\nPostgres has two settings to dealing with `waiting time` and `operation time` presented in diagram: `lock_timeout` and `statement_timeout`.\n\n`SET lock_timeout TO '2s'` allow you to avoid downtime when you have long running query/transaction before run migration (https://www.postgresql.org/docs/current/static/runtime-config-client.html#GUC-LOCK-TIMEOUT).\n\n`SET statement_timeout TO '2s'` allow you to avoid downtime when you have long running migration query (https://www.postgresql.org/docs/current/static/runtime-config-client.html#GUC-STATEMENT-TIMEOUT).\n\n### Deadlocks\n\nThere no downtime issues for deadlocks, but too many operations in one transaction can take most conflicted lock and release it only after transaction commit or rollback. So it's a good idea to avoid `ACCESS EXCLUSIVE` lock operations and long time operations in one transaction. Deadlocks also can make you migration stuck on production deployment when different tables will be locked, for example, for FOREIGN KEY that take `ACCESS EXCLUSIVE` lock for two tables.\n\n### Rows and values storing\n\nPostgres store values of different types different ways. If you try to convert one type to another and it stored different way then postgres will rewrite all values. Fortunately some types stored same way and postgres need to do nothing to change type, but in some cases postgres need to check that all values have same with new type limitations, for example string length.\n\n### Multiversion Concurrency Control\n\nRegarding documentation https://www.postgresql.org/docs/current/static/mvcc-intro.html data consistency in postgres is maintained by using a multiversion model. This means that each SQL statement sees a snapshot of data. It has advantage for adding and deleting columns without any indexes, CONSTRAINTS and defaults do not change exist data, new version of data will be created on `INSERT` and `UPDATE`, delete just mark you record expired. All garbage will be collected later by `VACUUM` or `AUTO VACUUM`.\n\n### Django migrations hacks\n\nAny schema changes can be processed with creation of new table and copy data to it, but it can take significant time.\n\n|   # | name                                          | safe |       safe alternative        | description                                                                                                                                                                                                                                                                                                                                     |\n| --: |-----------------------------------------------|:----:|:-----------------------------:|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|   1 | `CREATE SEQUENCE`                             |  X   |                               | safe operation, because your business logic shouldn't operate with new sequence on migration time \\*                                                                                                                                                                                                                                            |\n|   2 | `DROP SEQUENCE`                               |  X   |                               | safe operation, because your business logic shouldn't operate with this sequence on migration time \\*                                                                                                                                                                                                                                           |\n|   3 | `CREATE TABLE`                                |  X   |                               | safe operation, because your business logic shouldn't operate with new table on migration time \\*                                                                                                                                                                                                                                               |\n|   4 | `DROP TABLE`                                  |  X   |                               | safe operation, because your business logic shouldn't operate with this table on migration time \\*                                                                                                                                                                                                                                              |\n|   5 | `ALTER TABLE RENAME TO`                       |      |      use updatable view       | **unsafe operation**, because it's too hard write business logic that operate with two tables simultaneously, so propose to use temporary updatable view and switch names in transaction \\*                                                                                                                                                     |\n|   6 | `ALTER TABLE SET TABLESPACE`                  |      |  add new table and copy data  | **unsafe operation**, but probably you don't need it at all or often \\*                                                                                                                                                                                                                                                                         |\n|   7 | `ALTER TABLE ADD COLUMN`                      |  X   |                               | safe operation if without `SET NOT NULL`, `PRIMARY KEY`, `UNIQUE` \\*                                                                                                                                                                                                                                                                            |\n|   8 | `ALTER TABLE ADD COLUMN SET DEFAULT`          |  X   |                               | safe operation, however it can be unsafe if code default used within `NOT NULL`, for `db_default` or `NULL` there are no issue \\*                                                                                                                                                                                                               |\n|   9 | `ALTER TABLE ADD COLUMN SET NOT NULL`         |      |              +/-              | **unsafe operation**, because doesn't work without `SET DEFAULT` or after migration old code can insert rows without new column and raise exception, so propose to use `ALTER TABLE ADD COLUMN SET DEFAULT` with `db_default` or `ALTER TABLE ADD COLUMN` and then populate column and then `ALTER TABLE ALTER COLUMN SET NOT NULL` \\* and \\*\\* |\n|  10 | `ALTER TABLE ADD COLUMN PRIMARY KEY`          |      | add index and add constraint  | **unsafe operation**, because you spend time in migration to `CREATE INDEX`, so propose `ALTER TABLE ADD COLUMN` and then `CREATE INDEX CONCURRENTLY` and then `ALTER TABLE ADD CONSTRAINT PRIMARY KEY USING INDEX` \\*\\*\\*                                                                                                                      |\n|  11 | `ALTER TABLE ADD COLUMN UNIQUE`               |      | add index and add constraint  | **unsafe operation**, because you spend time in migration to `CREATE INDEX`, so propose `ALTER TABLE ADD COLUMN` and then `CREATE INDEX CONCURRENTLY` and then `ALTER TABLE ADD CONSTRAINT UNIQUE USING INDEX` \\*\\*\\*                                                                                                                           |\n|  12 | `ALTER TABLE ALTER COLUMN TYPE`               |      |              +/-              | **unsafe operation**, because you spend time in migration to check that all items in column valid or to change type, but some operations can be safe \\*\\*\\*\\*                                                                                                                                                                                   |\n|  13 | `ALTER TABLE ALTER COLUMN SET NOT NULL`       |      |  add check constraint before  | **unsafe operation**, because you spend time in migration to check that all items in column `NOT NULL`, so propose `ALTER TABLE ADD CONSTRAINT CHECK` and then `ALTER TABLE VALIDATE CONSTRAINT` and then `ALTER TABLE ALTER COLUMN SET NOT NULL` *\\*                                                                                           |\n|  14 | `ALTER TABLE ALTER COLUMN DROP NOT NULL`      |  X   |                               | safe operation                                                                                                                                                                                                                                                                                                                                  |\n|  15 | `ALTER TABLE ALTER COLUMN SET DEFAULT`        |  X   |                               | safe operation                                                                                                                                                                                                                                                                                                                                  |\n|  16 | `ALTER TABLE ALTER COLUMN DROP DEFAULT`       |  X   |                               | safe operation                                                                                                                                                                                                                                                                                                                                  |\n|  17 | `ALTER TABLE DROP COLUMN`                     |  X   |                               | safe operation, because your business logic shouldn't operate with this column on migration time, however better `ALTER TABLE ALTER COLUMN DROP NOT NULL`, `ALTER TABLE DROP CONSTRAINT` and `DROP INDEX` before \\* and \\*\\*\\*\\*\\*                                                                                                              |\n|  18 | `ALTER TABLE RENAME COLUMN`                   |      |      use updatable view       | **unsafe operation**, because it's too hard write business logic that operate with two columns simultaneously, so propose to use temporary updatable view and switch names in transaction \\*                                                                                                                                                    |\n|  19 | `ALTER TABLE ADD CONSTRAINT CHECK`            |      | add as not valid and validate | **unsafe operation**, because you spend time in migration to check constraint                                                                                                                                                                                                                                                                   |\n|  20 | `ALTER TABLE DROP CONSTRAINT` (`CHECK`)       |  X   |                               | safe operation                                                                                                                                                                                                                                                                                                                                  |\n|  21 | `ALTER TABLE ADD CONSTRAINT FOREIGN KEY`      |      | add as not valid and validate | **unsafe operation**, because you spend time in migration to check constraint, lock two tables                                                                                                                                                                                                                                                  |\n|  22 | `ALTER TABLE DROP CONSTRAINT` (`FOREIGN KEY`) |  X   |                               | safe operation, lock two tables                                                                                                                                                                                                                                                                                                                 |\n|  23 | `ALTER TABLE ADD CONSTRAINT PRIMARY KEY`      |      | add index and add constraint  | **unsafe operation**, because you spend time in migration to create index \\*\\*\\*                                                                                                                                                                                                                                                                |\n|  24 | `ALTER TABLE DROP CONSTRAINT` (`PRIMARY KEY`) |  X   |                               | safe operation \\*\\*\\*                                                                                                                                                                                                                                                                                                                           |\n|  25 | `ALTER TABLE ADD CONSTRAINT UNIQUE`           |      | add index and add constraint  | **unsafe operation**, because you spend time in migration to create index \\*\\*\\*                                                                                                                                                                                                                                                                |\n|  26 | `ALTER TABLE DROP CONSTRAINT` (`UNIQUE`)      |  X   |                               | safe operation \\*\\*\\*                                                                                                                                                                                                                                                                                                                           |\n|  27 | `ALTER TABLE ADD CONSTRAINT EXCLUDE`          |      |  add new table and copy data  |                                                                                                                                                                                                                                                                                                                                                 |\n|  28 | `ALTER TABLE DROP CONSTRAINT (EXCLUDE)`       |  X   |                               |                                                                                                                                                                                                                                                                                                                                                 |\n|  29 | `CREATE INDEX`                                |      |  `CREATE INDEX CONCURRENTLY`  | **unsafe operation**, because you spend time in migration to create index                                                                                                                                                                                                                                                                       |\n|  30 | `DROP INDEX`                                  |  X   |   `DROP INDEX CONCURRENTLY`   | safe operation \\*\\*\\*                                                                                                                                                                                                                                                                                                                           |\n|  31 | `CREATE INDEX CONCURRENTLY`                   |  X   |                               | safe operation                                                                                                                                                                                                                                                                                                                                  |\n|  32 | `DROP INDEX CONCURRENTLY`                     |  X   |                               | safe operation \\*\\*\\*                                                                                                                                                                                                                                                                                                                           |\n\n\\*: main point with migration on production without downtime that your old and new code should correctly work before and after migration, lets look this point closely in [Dealing with logic that should work before and after migration](#dealing-with-logic-that-should-work-before-and-after-migration) section.\n\n\\*\\*: postgres will check that all items in column `NOT NULL` that take time, lets look this point closely in [Dealing with `NOT NULL` constraint](#dealing-with-not-null-constraint) section.\n\n\\*\\*\\*: postgres will have same behaviour when you skip `ALTER TABLE ADD CONSTRAINT UNIQUE USING INDEX` and still unclear difference with `CONCURRENTLY` except difference in locks, lets look this point closely in [Dealing with `UNIQUE` constraint](#dealing-with-unique-constraint).\n\n\\*\\*\\*\\*: lets look this point closely in [Dealing with `ALTER TABLE ALTER COLUMN TYPE`](#dealing-with-alter-table-alter-column-type) section.\n\n\\*\\*\\*\\*\\*: if you check migration on CI with `python manage.py makemigrations --check` you can't drop column in code without migration creation, so in this case you can be useful _back migration flow_: apply code on all instances and then migrate database\n\n#### Dealing with logic that should work before and after migration\n\n##### Adding and removing models and columns\n\nMigrations: `CREATE SEQUENCE`, `DROP SEQUENCE`, `CREATE TABLE`, `DROP TABLE`, `ALTER TABLE ADD COLUMN`, `ALTER TABLE DROP COLUMN`.\n\nThis migrations are pretty safe, because your logic doesn't work with this data before migration\n\n##### Rename models\n\nMigrations: `ALTER TABLE RENAME TO`.\n\nStandard django's approach does not allow to operate simultaneously for old and new code with old and new table name, hopefully next workaround allows to rename table by splitting migration to few steps:\n1. provide code changes but replace standard migration with [SeparateDatabaseAndState](https://docs.djangoproject.com/en/dev/ref/migration-operations/#separatedatabaseandstate) sql operation that **in transaction** rename table and create [updatable view](https://www.postgresql.org/docs/current/sql-createview.html#SQL-CREATEVIEW-UPDATABLE-VIEWS) that has old table name \n   - old code can work with [updatable view](https://www.postgresql.org/docs/current/sql-createview.html#SQL-CREATEVIEW-UPDATABLE-VIEWS) by old name\n   - new code can work with table by new name \n2. after new code deployment old code is not used anymore, so we can drop view\n   - new code can work with renamed table\n\n##### Rename columns\n\nMigrations: `ALTER TABLE RENAME COLUMN`.\n\nStandard django's approach does not allow to operate simultaneously for old and new code with old and new column name, hopefully next workaround allows to rename column by splitting migration to few steps:\n1. provide code changes but replace standard migration with [SeparateDatabaseAndState](https://docs.djangoproject.com/en/dev/ref/migration-operations/#separatedatabaseandstate) sql operation that **in transaction** rename column, rename table to temporary and create [updatable view](https://www.postgresql.org/docs/current/sql-createview.html#SQL-CREATEVIEW-UPDATABLE-VIEWS) that has old table name with both old and new columns \n   - old code can work with new [updatable view](https://www.postgresql.org/docs/current/sql-createview.html#SQL-CREATEVIEW-UPDATABLE-VIEWS) and use old column\n   - new code can work with new [updatable view](https://www.postgresql.org/docs/current/sql-createview.html#SQL-CREATEVIEW-UPDATABLE-VIEWS) and use new column \n2. after new code deployment old code is not used anymore, so **in transaction** we can drop view and rename table back\n   - new code can work with renamed column\n\n##### Changes for working logic\n\nMigrations: `ALTER TABLE SET TABLESPACE`, `ALTER TABLE ADD CONSTRAINT EXCLUDE`.\n\nFor this migration too hard implement logic that will work correctly for all instances, so there are two ways to dealing with it:\n\n1. create new table, copy exist data, drop old table\n2. downtime\n\n##### Create column not null\n\nMigrations: `ALTER TABLE ADD COLUMN NOT NULL`.\n\nPostgres doesn't allow to create column with `NOT NULL` if table not empty and `DEFAULT` is not provided. So you want to `ALTER TABLE ADD COLUMN DEFAULT NOT NULL`.\nDjango has two ways to create column default: [code `default`](https://docs.djangoproject.com/en/dev/ref/models/fields/#default) and [`db_default` for django 5.0+](https://docs.djangoproject.com/en/dev/ref/models/fields/#db-default).\nMain difference between them for us in operations they do for migration and old code inserts handling after migration:\n\nCode `default` migration and business logic SQL:\n```sql\n-- migration\nALTER TABLE tbl ADD COLUMN new_col integer DEFAULT 0 NOT NULL;\nALTER TABLE tbl ALTER COLUMN new_col DROP DEFAULT;\n\n-- business logic\nINSERT INTO tbl (old_col) VALUES (1);  -- old code inserts fail\nINSERT INTO tbl (old_col, new_col) VALUES (1, 1);  -- new code inserts work fine\n```\n\n`db_default` migration and business logic SQL:\n```sql\n-- migration\nALTER TABLE tbl ADD COLUMN new_col integer DEFAULT 0 NOT NULL;\n\n-- business logic\nINSERT INTO tbl (old_col) VALUES (1);  -- old code inserts work fine with default\nINSERT INTO tbl (old_col, new_col) VALUES (1, 1);  -- new code inserts work fine\n```\n\n`db_default` is most robust way to apply default and it's works fine with `NOT NULL` constraints too.\nIn django<5.0 you can use `ZERO_DOWNTIME_MIGRATIONS_KEEP_DEFAULT=True` to emulate `db_default` behaviour for `default` field.\n\n#### Dealing with `NOT NULL` column constraint\n\nPostgres checks that all column values `NOT NULL` (full table scan) when you are applying `ALTER TABLE ALTER COLUMN SET NOT NULL`, this check skipped if appropriate valid `CHECK CONSTRAINT` exists for postgres 12+. So to make existing column `NOT NULL` safe way you can follow next steps:\n- `ALTER TABLE ADD CONSTRAINT CHECK (column IS NOT NULL) NOT VALID` - create invalid check constraint for column, this operation takes `ACCESS EXCLUSIVE` lock only for table metadata update\n- `ALTER TABLE VALIDATE CONSTRAINT` - validate constraint, at this moment all column values should be `NOT NULL`, this operation takes `SHARE UPDATE EXCLUSIVE` lock until full table scan will be completed\n- `ALTER TABLE ALTER COLUMN SET NOT NULL` - set column `NOT NULL` don't check column values if appropriate valid `CHECK CONSTRAINT` exists, in this case this operation takes `ACCESS EXCLUSIVE` lock only for table metadata update\n- `ALTER TABLE DROP CONSTRAINT` - clean up `CHECK CONSTRAINT` that duplicates column `NOT NULL`, this operation takes `ACCESS EXCLUSIVE` lock only for table metadata update\n\n#### Dealing with `UNIQUE` constraint\n\nPostgres has two approaches for uniqueness: `CREATE UNIQUE INDEX` and `ALTER TABLE ADD CONSTRAINT UNIQUE` - both use unique index inside. Difference that we can find that we cannot apply `DROP INDEX CONCURRENTLY` for constraint. However it still unclear what difference for `DROP INDEX` and `DROP INDEX CONCURRENTLY` except difference in locks, but as we seen before both marked as safe - we don't spend time in `DROP INDEX`, just wait for lock. So as django use constraint for uniqueness we also have a hacks to use constraint safely.\n\n#### Dealing with `ALTER TABLE ALTER COLUMN TYPE`\n\nNext operations are safe:\n\n1. `varchar(LESS)` to `varchar(MORE)` where LESS < MORE\n2. `varchar(ANY)` to `text`\n3. `numeric(LESS, SAME)` to `numeric(MORE, SAME)` where LESS < MORE and SAME == SAME\n\nFor other operations propose to create new column and copy data to it. Eg. some types can be also safe, but you should check yourself.\n\n\n# django-pg-zero-downtime-migrations changelog\n\n## 0.16\n  - changed `ADD COLUMN DEFAULT NULL` to safe operation for code default\n  - changed `ADD COLUMN DEFAULT NOT NULL` to safe operation for `db_default` in django 5.0+\n  - added `ZERO_DOWNTIME_MIGRATIONS_KEEP_DEFAULT` settings and changed `ADD COLUMN DEFAULT NOT NULL` with this settings to safe operation for django<5.0\n  - added `ZERO_DOWNTIME_MIGRATIONS_EXPLICIT_CONSTRAINTS_DROP` settings and added dropping constraints and indexes before drop column or table\n  - fixed sqlmigrate in idempotent mode\n  - fixed creation unique constraint with include parameter\n  - fixed idempotent mode tests\n  - updated unsafe migrations links to documentation\n  - updated patched code to latest django version\n  - updated test image to ubuntu 24.04\n  - improved README\n\n## 0.15\n  - added idempotent mode and `ZERO_DOWNTIME_MIGRATIONS_IDEMPOTENT_SQL` setting\n  - fixed django 3.2 degradation with missing `skip_default_on_alter` method\n  - improved readme\n  - updated release github action\n\n## 0.14\n  - fixed deferred sql errors\n  - added django 5.0 support\n  - added python 3.12 support\n  - added postgres 16 support\n  - drop postgres 11 support\n  - drop `ZERO_DOWNTIME_MIGRATIONS_USE_NOT_NULL` setting\n  - marked `migrate_isnotnull_check_constraints` command deprecated\n\n## 0.13\n  - added django 4.2 support\n  - marked django 3.2 support deprecated\n  - marked django 4.0 support deprecated\n  - marked django 4.1 support deprecated\n  - marked postgres 11 support deprecated\n  - drop postgres 10 support\n  - updated test docker image to ubuntu 22.04\n\n## 0.12\n  - added `serial` and `integer`, `bigserial` and `bigint`, `smallserial` and `smallint`, same types changes as safe migrations\n  - fixed `AutoField` type changing and concurrent insertions issue for `django<4.1`\n  - added sequence dropping and creation timeouts as they can be used with `CASCADE` keyword and affect other tables\n  - added django 4.1 support\n  - added python 3.11 support\n  - added postgres 15 support\n  - marked postgres 10 support deprecated\n  - drop django 2.2 support\n  - drop django 3.0 support\n  - drop django 3.1 support\n  - drop postgres 9.5 support\n  - drop postgres 9.6 support\n  - add github actions checks for pull requests\n\n## 0.11\n  - fixed rename model with keeping `db_table` raises `ALTER_TABLE_RENAME` error #26\n  - added django 3.2 support\n  - added django 4.0 support\n  - added python 3.9 support\n  - added python 3.10 support\n  - added postgres 14 support\n  - marked django 2.2 support deprecated\n  - marked django 3.0 support deprecated\n  - marked django 3.1 support deprecated\n  - marked python 3.6 support deprecated\n  - marked python 3.7 support deprecated\n  - marked postgres 9.5 support deprecated\n  - marked postgres 9.6 support deprecated\n  - move to github actions for testing\n\n## 0.10\n  - added django 3.1 support\n  - added postgres 13 support\n  - drop python 3.5 support\n  - updated test environment\n\n## 0.9\n  - fixed decimal to float migration error\n  - fixed django 3.0.2+ tests\n\n## 0.8\n  - added django 3.0 support\n  - added concurrently index creation and removal operations\n  - added exclude constraint support as unsafe operation\n  - drop postgres 9.4 support\n  - drop django 2.0 support\n  - drop django 2.1 support\n  - drop deprecated `django_zero_downtime_migrations_postgres_backend` module\n\n## 0.7\n  - added python 3.8 support\n  - added postgres specific indexes support\n  - improved tests clearness\n  - fixed regexp escaping warning for management command\n  - fixed style check\n  - improved README\n  - marked python 3.5 support deprecated\n  - marked postgres 9.4 support deprecated\n  - marked django 2.0 support deprecated\n  - marked django 2.1 support deprecated\n\n## 0.6\n  - marked `ZERO_DOWNTIME_MIGRATIONS_USE_NOT_NULL` option deprecated for postgres 12+\n  - added management command for migration to real `NOT NULL` from `CHECK IS NOT NULL` constraint\n  - added integration tests for pg 12, pg 11 root, pg 11 compatible not null constraint, pg 11 standard not null constraint and pg 10, 9.6, 9.5, 9.4, postgis databases\n  - fixed compatible check not null constraint deletion and creation via pg_attribute bugs\n  - minimized side affect with deferred sql execution between operations in one migration module\n  - added postgres 12 safe `NOT NULL` constraint creation\n  - added safe `NOT NULL` constraint creation for extra permissions for `pg_catalog.pg_attribute` with `ZERO_DOWNTIME_MIGRATIONS_USE_NOT_NULL=USE_PG_ATTRIBUTE_UPDATE_FOR_SUPERUSER` option enabled\n  - marked `AddField` with `null=False` parameter and compatible `CHECK IS NOT NULL` constraint option as unsafe operation and avoid `ZERO_DOWNTIME_MIGRATIONS_USE_NOT_NULL` value in this case\n  - added version to package\n  - fixed pypi README images links\n  - improved README\n\n## 0.5\n  - extracted zero-downtime-schema to mixin to allow use this logic with other backends\n  - moved module from `django_zero_downtime_migrations_postgres_backend` to `django_zero_downtime_migrations.backends.postgres`\n  - marked `django_zero_downtime_migrations_postgres_backend` module as deprecated\n  - added postgis backend support\n  - improved README\n\n## 0.4\n  - changed defaults for `ZERO_DOWNTIME_MIGRATIONS_LOCK_TIMEOUT` and `ZERO_DOWNTIME_MIGRATIONS_STATEMENT_TIMEOUT` from `0ms` to `None` to get same with default django behavior that respect default postgres timeouts\n  - added updates to documentations with options defaults\n  - added updates to documentations with best options usage\n  - fixed adding nullable field with default had no error and warning issue\n  - added links to documentation with issue describing and safe alternatives usage for errors and warnings\n  - added updates to documentations with type casting workarounds\n  \n## 0.3\n  - added django 2.2 support with `Meta.indexes` and `Meta.constraints` attributes\n  - fixed python deprecation warnings for regexp\n  - removed unused `TimeoutException`\n  - improved README and PYPI description\n\n## 0.2\n  - added option that allow disable `statement_timeout` for long operations like index creation on constraint validation when statement_timeout set globally\n\n## 0.1.1\n  - added long description content type\n\n## 0.1\n  - replaced default sql queries with more safe\n  - added options for `statement_timeout` and `lock_timeout`\n  - added option for `NOT NULL` constraint behaviour\n  - added option for unsafe operation restriction\n","description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/tbicr/django-pg-zero-downtime-migrations","keywords":"django postgres postgresql migrations","license":"MIT","maintainer":null,"maintainer_email":null,"name":"django-pg-zero-downtime-migrations","package_url":"https://pypi.org/project/django-pg-zero-downtime-migrations/","platform":null,"project_url":"https://pypi.org/project/django-pg-zero-downtime-migrations/","project_urls":{"Homepage":"https://github.com/tbicr/django-pg-zero-downtime-migrations"},"provides_extra":null,"release_url":"https://pypi.org/project/django-pg-zero-downtime-migrations/0.16/","requires_dist":["django>=3.2"],"requires_python":">=3.6","summary":"Django postgresql backend that apply migrations with respect to database locks","version":"0.16","yanked":false,"yanked_reason":null},"last_serial":23579674,"releases":{"0.1":[{"comment_text":"","digests":{"blake2b_256":"2331bbc6a17b567c67afb171ec6fd162b936979d557a731b3d5b08c471355f7e","md5":"e6d12bb695aedc2d93a8f48e0de0857c","sha256":"9dc287d5aa345e35acc921ec2c545a9b91ad69d029028e70b8dfc098f49f9722"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.1-py3-none-any.whl","has_sig":false,"md5_digest":"e6d12bb695aedc2d93a8f48e0de0857c","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":16951,"upload_time":"2018-08-22T20:39:35","upload_time_iso_8601":"2018-08-22T20:39:35.570657Z","url":"https://files.pythonhosted.org/packages/23/31/bbc6a17b567c67afb171ec6fd162b936979d557a731b3d5b08c471355f7e/django_pg_zero_downtime_migrations-0.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"dcccd481de21adddbbc61a85c1820b9675af9c79f1c84e92019534e4b8800715","md5":"a91aa66e2fc08c84aa7d97fb8cda45db","sha256":"1a028520471f871b284e301f35e7a936a8c601a3fb010e6136077fcc874123c7"},"downloads":-1,"filename":"django-pg-zero-downtime-migrations-0.1.tar.gz","has_sig":false,"md5_digest":"a91aa66e2fc08c84aa7d97fb8cda45db","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":18864,"upload_time":"2018-08-22T20:39:37","upload_time_iso_8601":"2018-08-22T20:39:37.276214Z","url":"https://files.pythonhosted.org/packages/dc/cc/d481de21adddbbc61a85c1820b9675af9c79f1c84e92019534e4b8800715/django-pg-zero-downtime-migrations-0.1.tar.gz","yanked":false,"yanked_reason":null}],"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"c6f6c1a6932795871b22f9fcf6fe8c7a0b7278b5dc697b01cdf39d5b78ea7df2","md5":"a86c870301827670f5e19fc3ddf74233","sha256":"790e65f8b5f16529a1e4e7d5e12c46a5ee89d6fbe0ea8334df5eda8f0178a453"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.1.1-py3-none-any.whl","has_sig":false,"md5_digest":"a86c870301827670f5e19fc3ddf74233","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":16981,"upload_time":"2018-08-22T20:42:47","upload_time_iso_8601":"2018-08-22T20:42:47.249384Z","url":"https://files.pythonhosted.org/packages/c6/f6/c1a6932795871b22f9fcf6fe8c7a0b7278b5dc697b01cdf39d5b78ea7df2/django_pg_zero_downtime_migrations-0.1.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ce1f4a2164f62784076aacfbd184b43b7543c4995e2960ac0ae92e8550ab830e","md5":"edbf37b757d9a43c42f889ceb4c38b1a","sha256":"6f4d62d648b3c75a2bba5427e089782f3f7af30459fb2bc19638bc39eae17886"},"downloads":-1,"filename":"django-pg-zero-downtime-migrations-0.1.1.tar.gz","has_sig":false,"md5_digest":"edbf37b757d9a43c42f889ceb4c38b1a","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":18899,"upload_time":"2018-08-22T20:42:49","upload_time_iso_8601":"2018-08-22T20:42:49.802722Z","url":"https://files.pythonhosted.org/packages/ce/1f/4a2164f62784076aacfbd184b43b7543c4995e2960ac0ae92e8550ab830e/django-pg-zero-downtime-migrations-0.1.1.tar.gz","yanked":false,"yanked_reason":null}],"0.10":[{"comment_text":"","digests":{"blake2b_256":"db9535823a7c969addfec4c55c09ae0accbf933ce86745ccdb301fb4beee4d53","md5":"2a8bca968099d00be5b3e098f5c61a7c","sha256":"342aadf6f6bdd94877124b58d90e054044221f91e88951c3fa1fc1ab185a1286"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.10-py3-none-any.whl","has_sig":false,"md5_digest":"2a8bca968099d00be5b3e098f5c61a7c","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":20980,"upload_time":"2020-09-30T22:47:34","upload_time_iso_8601":"2020-09-30T22:47:34.771085Z","url":"https://files.pythonhosted.org/packages/db/95/35823a7c969addfec4c55c09ae0accbf933ce86745ccdb301fb4beee4d53/django_pg_zero_downtime_migrations-0.10-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"58a2ba97672fa7cb0fd80fdd469e2d236bc7d7e94bbc9cd332ee233d1798eefb","md5":"e488df4973324af7dfe9c921d1af093f","sha256":"d728fafb2bda25167d7dfe35b7edbf4742a49773043119e4f28e56b51a14e57e"},"downloads":-1,"filename":"django-pg-zero-downtime-migrations-0.10.tar.gz","has_sig":false,"md5_digest":"e488df4973324af7dfe9c921d1af093f","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":26255,"upload_time":"2020-09-30T22:47:37","upload_time_iso_8601":"2020-09-30T22:47:37.807433Z","url":"https://files.pythonhosted.org/packages/58/a2/ba97672fa7cb0fd80fdd469e2d236bc7d7e94bbc9cd332ee233d1798eefb/django-pg-zero-downtime-migrations-0.10.tar.gz","yanked":false,"yanked_reason":null}],"0.11":[{"comment_text":"","digests":{"blake2b_256":"70e23e15cce8f882e290facbb848dff93b0ddacfc61d71fea8e0d8ebfd87261b","md5":"c7818e765ad7200b356ce16239c19683","sha256":"91fe3658a0982bc7a5881c93dafaafe3e41f3eebcb982c7c5384c7e3bc141ebe"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.11-py3-none-any.whl","has_sig":false,"md5_digest":"c7818e765ad7200b356ce16239c19683","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":20349,"upload_time":"2022-01-01T23:00:08","upload_time_iso_8601":"2022-01-01T23:00:08.329224Z","url":"https://files.pythonhosted.org/packages/70/e2/3e15cce8f882e290facbb848dff93b0ddacfc61d71fea8e0d8ebfd87261b/django_pg_zero_downtime_migrations-0.11-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b80bb3dd9c4052ce282fdfcfee834785eb197b086adb3d941c9ab8b1053b92cc","md5":"5f4514a96d455a079ac013922b2b48a4","sha256":"6b3eb27682c0d056176131ecb38fe272f88c76867f416fe44bd394fa73b22e95"},"downloads":-1,"filename":"django-pg-zero-downtime-migrations-0.11.tar.gz","has_sig":false,"md5_digest":"5f4514a96d455a079ac013922b2b48a4","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":26616,"upload_time":"2022-01-01T23:00:10","upload_time_iso_8601":"2022-01-01T23:00:10.003671Z","url":"https://files.pythonhosted.org/packages/b8/0b/b3dd9c4052ce282fdfcfee834785eb197b086adb3d941c9ab8b1053b92cc/django-pg-zero-downtime-migrations-0.11.tar.gz","yanked":false,"yanked_reason":null}],"0.12":[{"comment_text":"","digests":{"blake2b_256":"611bc99b76c684abce81be514fb59087be82169ad0f1d2b8933ccfadc373284b","md5":"31f5d80873bd7307fdff882c082c5db9","sha256":"c3181eca4f99c4d93c4fcfcdfec50886e12f2f75ba5926998bc415968a597d8c"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.12-py3-none-any.whl","has_sig":false,"md5_digest":"31f5d80873bd7307fdff882c082c5db9","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":21274,"upload_time":"2022-11-02T00:55:02","upload_time_iso_8601":"2022-11-02T00:55:02.187450Z","url":"https://files.pythonhosted.org/packages/61/1b/c99b76c684abce81be514fb59087be82169ad0f1d2b8933ccfadc373284b/django_pg_zero_downtime_migrations-0.12-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"812bb12086f9cf57c77f4d5a644e1ac18750af69d9c0fd6365b6e96bf25b9142","md5":"26134ff3f3a398dcf110a0f5654a8cb1","sha256":"e1901f9e5d14547eaa4cfbbc681026b6cc9985997479bb8bced4f1d1f39fd6cc"},"downloads":-1,"filename":"django-pg-zero-downtime-migrations-0.12.tar.gz","has_sig":false,"md5_digest":"26134ff3f3a398dcf110a0f5654a8cb1","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":34461,"upload_time":"2022-11-02T00:55:03","upload_time_iso_8601":"2022-11-02T00:55:03.781642Z","url":"https://files.pythonhosted.org/packages/81/2b/b12086f9cf57c77f4d5a644e1ac18750af69d9c0fd6365b6e96bf25b9142/django-pg-zero-downtime-migrations-0.12.tar.gz","yanked":false,"yanked_reason":null}],"0.13":[{"comment_text":"","digests":{"blake2b_256":"e169a1b963c8f24bc30fadd7db178d73bd09ac6a99e14815afbbe0b96453f3b5","md5":"742ba515def0b7e9b851f5e9c1064171","sha256":"da615ca9491f0436f4fece45f348a4c4ac2ca45dcbac7a0872ddd7906cddd9af"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.13-py3-none-any.whl","has_sig":false,"md5_digest":"742ba515def0b7e9b851f5e9c1064171","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":21438,"upload_time":"2023-06-24T23:41:16","upload_time_iso_8601":"2023-06-24T23:41:16.417906Z","url":"https://files.pythonhosted.org/packages/e1/69/a1b963c8f24bc30fadd7db178d73bd09ac6a99e14815afbbe0b96453f3b5/django_pg_zero_downtime_migrations-0.13-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e8443ef0fc3dd6837d485fced4994d7dff700915476c68689aba4f935b534efc","md5":"cc015dd40d16d4aa1cdfba56b318a65e","sha256":"e7df28b26758f6d519ac49444bdd194dd1c033382ff57ce1fe5ff1c59b49d969"},"downloads":-1,"filename":"django-pg-zero-downtime-migrations-0.13.tar.gz","has_sig":false,"md5_digest":"cc015dd40d16d4aa1cdfba56b318a65e","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":34741,"upload_time":"2023-06-24T23:41:17","upload_time_iso_8601":"2023-06-24T23:41:17.982062Z","url":"https://files.pythonhosted.org/packages/e8/44/3ef0fc3dd6837d485fced4994d7dff700915476c68689aba4f935b534efc/django-pg-zero-downtime-migrations-0.13.tar.gz","yanked":false,"yanked_reason":null}],"0.14":[{"comment_text":"","digests":{"blake2b_256":"27f49772f1022fbe972d7790707c7345ff18a08207b23d531b626a573126403c","md5":"eb2853194f85b19e0b64d608cd9771e2","sha256":"3e49eec23c82dd0b9e259c6474a687426a38d4cec844452129d82d71202b04d6"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.14-py3-none-any.whl","has_sig":false,"md5_digest":"eb2853194f85b19e0b64d608cd9771e2","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":20564,"upload_time":"2024-02-21T22:55:08","upload_time_iso_8601":"2024-02-21T22:55:08.101499Z","url":"https://files.pythonhosted.org/packages/27/f4/9772f1022fbe972d7790707c7345ff18a08207b23d531b626a573126403c/django_pg_zero_downtime_migrations-0.14-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"0d77130a34cd0dba95d50d8eefbe74687c6af7436b2b2e97053503d500969e5e","md5":"2fa4a74b1694609bfb3233275e97c7c6","sha256":"a231436d05b0e7c3a052be21e559e9239c1428dc2cc2c4f1ab8711bdbeedf48f"},"downloads":-1,"filename":"django-pg-zero-downtime-migrations-0.14.tar.gz","has_sig":false,"md5_digest":"2fa4a74b1694609bfb3233275e97c7c6","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":33547,"upload_time":"2024-02-21T22:55:09","upload_time_iso_8601":"2024-02-21T22:55:09.915526Z","url":"https://files.pythonhosted.org/packages/0d/77/130a34cd0dba95d50d8eefbe74687c6af7436b2b2e97053503d500969e5e/django-pg-zero-downtime-migrations-0.14.tar.gz","yanked":false,"yanked_reason":null}],"0.15":[{"comment_text":"","digests":{"blake2b_256":"ef46638f442ec78d5abb5eb034009ba4cca3f75bfb72b0ba6be1f872b4953f8c","md5":"896f2551f30b28c221f5498567c3b0f1","sha256":"17f7d21c1dcd854d385dc405a3ab2bf180134869739582cd594affd534691aae"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.15-py3-none-any.whl","has_sig":false,"md5_digest":"896f2551f30b28c221f5498567c3b0f1","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":22299,"upload_time":"2024-04-29T17:23:36","upload_time_iso_8601":"2024-04-29T17:23:36.899916Z","url":"https://files.pythonhosted.org/packages/ef/46/638f442ec78d5abb5eb034009ba4cca3f75bfb72b0ba6be1f872b4953f8c/django_pg_zero_downtime_migrations-0.15-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3943a129f07cc39b3038127a12a79b39b9a42478ccdd7f2198489f355a60e007","md5":"20208fe207be8bc6b8f593f0e9a783d5","sha256":"f99c6620d5731d75dede52170d3280c5a79eaa0d876c6de665f7b9addd3b1da1"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.15.tar.gz","has_sig":false,"md5_digest":"20208fe207be8bc6b8f593f0e9a783d5","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":36985,"upload_time":"2024-04-29T17:23:38","upload_time_iso_8601":"2024-04-29T17:23:38.821280Z","url":"https://files.pythonhosted.org/packages/39/43/a129f07cc39b3038127a12a79b39b9a42478ccdd7f2198489f355a60e007/django_pg_zero_downtime_migrations-0.15.tar.gz","yanked":false,"yanked_reason":null}],"0.16":[{"comment_text":"","digests":{"blake2b_256":"ecb74882635a67cb9f0ea275ac042837e9802c9f048bb758a51199e62a44f7b8","md5":"7b6365f91e6aa47ded28bc61173d5b5e","sha256":"6b1dc75814514c651a8e3fc1b3d9eb4d9ea7b5d7f02267cb04d47c719d59c9ad"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.16-py3-none-any.whl","has_sig":false,"md5_digest":"7b6365f91e6aa47ded28bc61173d5b5e","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":24945,"upload_time":"2024-06-07T21:29:21","upload_time_iso_8601":"2024-06-07T21:29:21.478031Z","url":"https://files.pythonhosted.org/packages/ec/b7/4882635a67cb9f0ea275ac042837e9802c9f048bb758a51199e62a44f7b8/django_pg_zero_downtime_migrations-0.16-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3797032494ffc65811c154e062ab2820323f11f7be3600eee7cb3b91caa0fd4e","md5":"a03bcdcbbe25211abade29fc394f96a6","sha256":"47105e5a9bc677560a31ee6df5def66596b63e9dc063fa5ec152c42316e3c280"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.16.tar.gz","has_sig":false,"md5_digest":"a03bcdcbbe25211abade29fc394f96a6","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":41208,"upload_time":"2024-06-07T21:29:22","upload_time_iso_8601":"2024-06-07T21:29:22.959459Z","url":"https://files.pythonhosted.org/packages/37/97/032494ffc65811c154e062ab2820323f11f7be3600eee7cb3b91caa0fd4e/django_pg_zero_downtime_migrations-0.16.tar.gz","yanked":false,"yanked_reason":null}],"0.2":[{"comment_text":"","digests":{"blake2b_256":"630cc431ec21d5e11024fd1bc0092e52d6c3c1591cf9dff6b014674eca52ee19","md5":"63b0be71ce74c61167267eb0c61ef780","sha256":"347b496f7a141020c221faf2fe6d0b06aa4c97d984c39c53e17d259b7633d196"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.2-py3-none-any.whl","has_sig":false,"md5_digest":"63b0be71ce74c61167267eb0c61ef780","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":17820,"upload_time":"2018-09-01T20:30:47","upload_time_iso_8601":"2018-09-01T20:30:47.992460Z","url":"https://files.pythonhosted.org/packages/63/0c/c431ec21d5e11024fd1bc0092e52d6c3c1591cf9dff6b014674eca52ee19/django_pg_zero_downtime_migrations-0.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"6bfa953bcd77c5a2a7ae2df546e9b92b41653a16b28ed6987f185506a1f14010","md5":"8c3b02afea7a140f2012a343f6b7e655","sha256":"59dcc5404acf52fb667fe1dee9d6ddc1253cbf9fccd026f892eaef7c680ad733"},"downloads":-1,"filename":"django-pg-zero-downtime-migrations-0.2.tar.gz","has_sig":false,"md5_digest":"8c3b02afea7a140f2012a343f6b7e655","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":19999,"upload_time":"2018-09-01T20:30:49","upload_time_iso_8601":"2018-09-01T20:30:49.732665Z","url":"https://files.pythonhosted.org/packages/6b/fa/953bcd77c5a2a7ae2df546e9b92b41653a16b28ed6987f185506a1f14010/django-pg-zero-downtime-migrations-0.2.tar.gz","yanked":false,"yanked_reason":null}],"0.3":[{"comment_text":"","digests":{"blake2b_256":"0a2341a2d69f6a2d54688f1a5f87f0d99495f0895fd9ee4720eb5ad255626330","md5":"6820e347b2743c509897c631a5bab735","sha256":"b7b90545477b65e6f8c3a098af091828e968d54cafe2d270fe84a1e85382f6b8"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.3-py3-none-any.whl","has_sig":false,"md5_digest":"6820e347b2743c509897c631a5bab735","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":13691,"upload_time":"2019-04-01T19:21:00","upload_time_iso_8601":"2019-04-01T19:21:00.263665Z","url":"https://files.pythonhosted.org/packages/0a/23/41a2d69f6a2d54688f1a5f87f0d99495f0895fd9ee4720eb5ad255626330/django_pg_zero_downtime_migrations-0.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"9c9e4db581800b02395e0a5ba7ab9fcbcb02d1c02a00c38e53c8d58a95d8fdbf","md5":"301224bd610554f23624a0128585c4b9","sha256":"6921026b4fcff862e7a56452c9f17f0ad698cb1d727d38d55bd830c37b96e168"},"downloads":-1,"filename":"django-pg-zero-downtime-migrations-0.3.tar.gz","has_sig":false,"md5_digest":"301224bd610554f23624a0128585c4b9","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":19840,"upload_time":"2019-04-01T19:21:01","upload_time_iso_8601":"2019-04-01T19:21:01.677006Z","url":"https://files.pythonhosted.org/packages/9c/9e/4db581800b02395e0a5ba7ab9fcbcb02d1c02a00c38e53c8d58a95d8fdbf/django-pg-zero-downtime-migrations-0.3.tar.gz","yanked":false,"yanked_reason":null}],"0.4":[{"comment_text":"","digests":{"blake2b_256":"6a9b367d8f01c765ce1e3ea3156ab4ab041c4ec0dcb8dac2de294bfc250394c3","md5":"92f712e466621e5e9df2d8b78d8cc461","sha256":"e0a916103c2c9441a8f2f176e541eb0abc176402d42340bb0cde9d818ddd3c89"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.4-py3-none-any.whl","has_sig":false,"md5_digest":"92f712e466621e5e9df2d8b78d8cc461","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":14144,"upload_time":"2019-05-05T00:34:43","upload_time_iso_8601":"2019-05-05T00:34:43.588025Z","url":"https://files.pythonhosted.org/packages/6a/9b/367d8f01c765ce1e3ea3156ab4ab041c4ec0dcb8dac2de294bfc250394c3/django_pg_zero_downtime_migrations-0.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"8f8babedae9f39927e6c426b850b6b7bee155f08d86ae801c1a29866df5f50b6","md5":"4b0c324046ace9b0ac489c130ba8f537","sha256":"036375b166ab19fa80c3858602a6dba9e509b514424f455ca1ed63a308408d0d"},"downloads":-1,"filename":"django-pg-zero-downtime-migrations-0.4.tar.gz","has_sig":false,"md5_digest":"4b0c324046ace9b0ac489c130ba8f537","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":20919,"upload_time":"2019-05-05T00:34:45","upload_time_iso_8601":"2019-05-05T00:34:45.737322Z","url":"https://files.pythonhosted.org/packages/8f/8b/abedae9f39927e6c426b850b6b7bee155f08d86ae801c1a29866df5f50b6/django-pg-zero-downtime-migrations-0.4.tar.gz","yanked":false,"yanked_reason":null}],"0.5":[{"comment_text":"","digests":{"blake2b_256":"dc06b0b8a6d05e1d249c99cfb44c1e2c81940d9fe9c5a12848eb371dc58e6231","md5":"e0df990266f933dabb3cee2ccaeac89d","sha256":"9d0865efdc7f716f80a6d19bcba5867f259044936c4ce456d12d6dfaed2ae4b1"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.5-py3-none-any.whl","has_sig":false,"md5_digest":"e0df990266f933dabb3cee2ccaeac89d","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":16646,"upload_time":"2019-06-01T22:18:07","upload_time_iso_8601":"2019-06-01T22:18:07.141315Z","url":"https://files.pythonhosted.org/packages/dc/06/b0b8a6d05e1d249c99cfb44c1e2c81940d9fe9c5a12848eb371dc58e6231/django_pg_zero_downtime_migrations-0.5-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ae36adad0db67e9fb3a5bfdfdccb97da3b868b5663ebe46aef8f873e1d0731a6","md5":"38c55b356dadb739b749a1fb14468ebc","sha256":"82a71f8faf8fcf3b03c53018177b9d46d56efd8631bb178d624784dd9df3e436"},"downloads":-1,"filename":"django-pg-zero-downtime-migrations-0.5.tar.gz","has_sig":false,"md5_digest":"38c55b356dadb739b749a1fb14468ebc","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":21955,"upload_time":"2019-06-01T22:18:11","upload_time_iso_8601":"2019-06-01T22:18:11.003696Z","url":"https://files.pythonhosted.org/packages/ae/36/adad0db67e9fb3a5bfdfdccb97da3b868b5663ebe46aef8f873e1d0731a6/django-pg-zero-downtime-migrations-0.5.tar.gz","yanked":false,"yanked_reason":null}],"0.6":[{"comment_text":"","digests":{"blake2b_256":"1ff6fd48893f17cf12e27ba7818316a0f2deda060d381c03a015b17b449dbef4","md5":"a2a57f83219cb29f0b3364b480d0cbab","sha256":"e82c12b6e8154d30d5e3641d350defdb0247b22fc93f9beda4bafee2129c2db0"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.6-py3-none-any.whl","has_sig":false,"md5_digest":"a2a57f83219cb29f0b3364b480d0cbab","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":20894,"upload_time":"2019-09-24T23:53:44","upload_time_iso_8601":"2019-09-24T23:53:44.286781Z","url":"https://files.pythonhosted.org/packages/1f/f6/fd48893f17cf12e27ba7818316a0f2deda060d381c03a015b17b449dbef4/django_pg_zero_downtime_migrations-0.6-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"eee67c36c693b0bdcc461f114e92b2a913bfd9d5c754f6b7e8507276dfaecb47","md5":"fa6be31a88e35a254966a35d565577d8","sha256":"028c6559aac18ebae77e9c6810dda1dffecb53b98f1927e11779ad1211e5aac8"},"downloads":-1,"filename":"django-pg-zero-downtime-migrations-0.6.tar.gz","has_sig":false,"md5_digest":"fa6be31a88e35a254966a35d565577d8","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":25432,"upload_time":"2019-09-24T23:53:46","upload_time_iso_8601":"2019-09-24T23:53:46.694809Z","url":"https://files.pythonhosted.org/packages/ee/e6/7c36c693b0bdcc461f114e92b2a913bfd9d5c754f6b7e8507276dfaecb47/django-pg-zero-downtime-migrations-0.6.tar.gz","yanked":false,"yanked_reason":null}],"0.7":[{"comment_text":"","digests":{"blake2b_256":"89d14110567a42402a827badc99f16045a1b67d5ce59c92197ccafe4ed239ead","md5":"b25e638f2d864f67d87ec86a98c45c0f","sha256":"e3d9828104e7ec19ce2a1efb6f5f4ae91fda7d29a981d4163ba91a990bf2f632"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.7-py3-none-any.whl","has_sig":false,"md5_digest":"b25e638f2d864f67d87ec86a98c45c0f","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":20995,"upload_time":"2019-12-02T19:40:06","upload_time_iso_8601":"2019-12-02T19:40:06.963268Z","url":"https://files.pythonhosted.org/packages/89/d1/4110567a42402a827badc99f16045a1b67d5ce59c92197ccafe4ed239ead/django_pg_zero_downtime_migrations-0.7-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"a2f512fed78b2fa41c7df6a4fe13eddcb4812ffff8eaa8cc2fec90b3b4a09d79","md5":"fe667553e35a696370f39aa76b78fd11","sha256":"2e03af739bb3caa45b629a2988f8997a3ac5e5349b15e5b195fcae29668fa955"},"downloads":-1,"filename":"django-pg-zero-downtime-migrations-0.7.tar.gz","has_sig":false,"md5_digest":"fe667553e35a696370f39aa76b78fd11","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":26570,"upload_time":"2019-12-02T19:40:09","upload_time_iso_8601":"2019-12-02T19:40:09.202390Z","url":"https://files.pythonhosted.org/packages/a2/f5/12fed78b2fa41c7df6a4fe13eddcb4812ffff8eaa8cc2fec90b3b4a09d79/django-pg-zero-downtime-migrations-0.7.tar.gz","yanked":false,"yanked_reason":null}],"0.8":[{"comment_text":"","digests":{"blake2b_256":"635277bfdf3de3a364c9f60a4329efcfe415531e0741bd4b59c26d999c57e780","md5":"41c34d3977e8706b752f5271c5a1b868","sha256":"1c44541fae885d363d020cec80e4d072ebc1899e42250529fe3ce870df5b0577"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.8-py3-none-any.whl","has_sig":false,"md5_digest":"41c34d3977e8706b752f5271c5a1b868","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":20889,"upload_time":"2019-12-11T07:19:24","upload_time_iso_8601":"2019-12-11T07:19:24.142880Z","url":"https://files.pythonhosted.org/packages/63/52/77bfdf3de3a364c9f60a4329efcfe415531e0741bd4b59c26d999c57e780/django_pg_zero_downtime_migrations-0.8-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"5d938c76dcf429fff19c30202d3044aa03f683616625ef1ced7238e73d50fd19","md5":"efe1c2ebae34380a2249be1b3d182e92","sha256":"b67a8a2824ad9b460a2568be430c7b0db79fb2ce13dfaffa7b9afddcaee3eaf6"},"downloads":-1,"filename":"django-pg-zero-downtime-migrations-0.8.tar.gz","has_sig":false,"md5_digest":"efe1c2ebae34380a2249be1b3d182e92","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":25542,"upload_time":"2019-12-11T07:19:30","upload_time_iso_8601":"2019-12-11T07:19:30.793910Z","url":"https://files.pythonhosted.org/packages/5d/93/8c76dcf429fff19c30202d3044aa03f683616625ef1ced7238e73d50fd19/django-pg-zero-downtime-migrations-0.8.tar.gz","yanked":false,"yanked_reason":null}],"0.9":[{"comment_text":"","digests":{"blake2b_256":"2eaeb4df4a345577e60afe441e4fd6e5530d39306268bbd91df0778227d86952","md5":"c7752730aa123d01883c163c40d60438","sha256":"2dc41f7b3ebd80d9eb301890b6dc886e9d25d2be207fc8bb533a06454529ebb7"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.9-py3-none-any.whl","has_sig":false,"md5_digest":"c7752730aa123d01883c163c40d60438","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":20933,"upload_time":"2020-07-28T18:20:19","upload_time_iso_8601":"2020-07-28T18:20:19.720481Z","url":"https://files.pythonhosted.org/packages/2e/ae/b4df4a345577e60afe441e4fd6e5530d39306268bbd91df0778227d86952/django_pg_zero_downtime_migrations-0.9-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"0a64b8b84b5f4969f9287633ab92c43389eaad3c3fe93b6cce6409036b6d6c51","md5":"a49e8482853415614497d90d40ee9d24","sha256":"a03550093864748158ec4aef0def171170f4f6acdc82eba52a8934373c5b9901"},"downloads":-1,"filename":"django-pg-zero-downtime-migrations-0.9.tar.gz","has_sig":false,"md5_digest":"a49e8482853415614497d90d40ee9d24","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":26192,"upload_time":"2020-07-28T18:20:21","upload_time_iso_8601":"2020-07-28T18:20:21.344234Z","url":"https://files.pythonhosted.org/packages/0a/64/b8b84b5f4969f9287633ab92c43389eaad3c3fe93b6cce6409036b6d6c51/django-pg-zero-downtime-migrations-0.9.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"ecb74882635a67cb9f0ea275ac042837e9802c9f048bb758a51199e62a44f7b8","md5":"7b6365f91e6aa47ded28bc61173d5b5e","sha256":"6b1dc75814514c651a8e3fc1b3d9eb4d9ea7b5d7f02267cb04d47c719d59c9ad"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.16-py3-none-any.whl","has_sig":false,"md5_digest":"7b6365f91e6aa47ded28bc61173d5b5e","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":24945,"upload_time":"2024-06-07T21:29:21","upload_time_iso_8601":"2024-06-07T21:29:21.478031Z","url":"https://files.pythonhosted.org/packages/ec/b7/4882635a67cb9f0ea275ac042837e9802c9f048bb758a51199e62a44f7b8/django_pg_zero_downtime_migrations-0.16-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3797032494ffc65811c154e062ab2820323f11f7be3600eee7cb3b91caa0fd4e","md5":"a03bcdcbbe25211abade29fc394f96a6","sha256":"47105e5a9bc677560a31ee6df5def66596b63e9dc063fa5ec152c42316e3c280"},"downloads":-1,"filename":"django_pg_zero_downtime_migrations-0.16.tar.gz","has_sig":false,"md5_digest":"a03bcdcbbe25211abade29fc394f96a6","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":41208,"upload_time":"2024-06-07T21:29:22","upload_time_iso_8601":"2024-06-07T21:29:22.959459Z","url":"https://files.pythonhosted.org/packages/37/97/032494ffc65811c154e062ab2820323f11f7be3600eee7cb3b91caa0fd4e/django_pg_zero_downtime_migrations-0.16.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
