{"info":{"author":"lonelyenvoy","author_email":"petrinchor@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.4","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Software Development :: Libraries","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description":"# python-memoization\n\n[![Repository][repositorysvg]][repository] [![Build Status][travismaster]][travis] [![Codacy Badge][codacysvg]][codacy]\n[![Coverage Status][coverallssvg]][coveralls] [![Downloads][downloadssvg]][repository]\n<br>\n[![PRs welcome][prsvg]][pr] [![License][licensesvg]][license] [![Supports Python][pythonsvg]][python]\n\n\nA powerful caching library for Python, with TTL support and multiple algorithm options.\n\nIf you like this work, please [star](https://github.com/lonelyenvoy/python-memoization) it on GitHub.\n\n## Why choose this library?\n\nPerhaps you know about [```functools.lru_cache```](https://docs.python.org/3/library/functools.html#functools.lru_cache)\nin Python 3, and you may be wondering why we are reinventing the wheel.\n\nWell, actually not. This lib is based on ```functools```. Please find below the comparison with ```lru_cache```.\n\n|Features|```functools.lru_cache```|```memoization```|\n|--------|-------------------|-----------|\n|Configurable max size|✔️|✔️|\n|Thread safety|✔️|✔️|\n|Flexible argument typing (typed & untyped)|✔️|Always typed|\n|Cache statistics|✔️|✔️|\n|LRU (Least Recently Used) as caching algorithm|✔️|✔️|\n|LFU (Least Frequently Used) as caching algorithm|No support|✔️|\n|FIFO (First In First Out) as caching algorithm|No support|✔️|\n|Extensibility for new caching algorithms|No support|✔️|\n|TTL (Time-To-Live) support|No support|✔️|\n|Support for unhashable arguments (dict, list, etc.)|No support|✔️|\n|Custom cache keys|No support|✔️|\n|On-demand partial cache clearing|No support|✔️|\n|Iterating through the cache|No support|✔️|\n|Python version|3.2+|3.4+|\n\n```memoization``` solves some drawbacks of ```functools.lru_cache```:\n\n1. ```lru_cache``` does not support __unhashable types__, which means function arguments cannot contain dict or list.\n\n```python\n>>> from functools import lru_cache\n>>> @lru_cache()\n... def f(x): return x\n... \n>>> f([1, 2])  # unsupported\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: unhashable type: 'list'\n```\n\n2. ```lru_cache``` is vulnerable to [__hash collision attack__](https://learncryptography.com/hash-functions/hash-collision-attack)\n   and can be hacked or compromised. Using this technique, attackers can make your program __unexpectedly slow__ by\n   feeding the cached function with certain cleverly designed inputs. However, in ```memoization```, caching is always\n   typed, which means ```f(3)``` and ```f(3.0)``` will be treated as different calls and cached separately. Also,\n   you can build your own cache key with a unique hashing strategy. These measures __prevents the attack__ from\n   happening (or at least makes it a lot harder).\n\n```python\n>>> hash((1,))\n3430019387558\n>>> hash(3430019387558.0)  # two different arguments with an identical hash value\n3430019387558\n```\n\n3. Unlike `lru_cache`, `memoization` is designed to be highly extensible, which make it easy for developers to add and integrate\n__any caching algorithms__ (beyond FIFO, LRU and LFU) into this library. See [Contributing Guidance](https://github.com/lonelyenvoy/python-memoization/blob/master/CONTRIBUTING.md) for further detail.\n\n\n## Installation\n\n```bash\npip install -U memoization\n```\n\n\n## 1-Minute Tutorial\n\n```python\nfrom memoization import cached\n\n@cached\ndef func(arg):\n    ...  # do something slow\n```\n\nSimple enough - the results of ```func()``` are cached. \nRepetitive calls to ```func()``` with the same arguments run ```func()``` only once, enhancing performance.\n\n>:warning:__WARNING:__ for functions with unhashable arguments, the default setting may not enable `memoization` to work properly. See [custom cache keys](https://github.com/lonelyenvoy/python-memoization#custom-cache-keys) section below for details.\n\n## 15-Minute Tutorial\n\nYou will learn about the advanced features in the following tutorial, which enable you to customize `memoization` .\n\nConfigurable options include `ttl`, `max_size`, `algorithm`, `thread_safe`, `order_independent` and `custom_key_maker`.\n\n### TTL (Time-To-Live)\n\n```python\n@cached(ttl=5)  # the cache expires after 5 seconds\ndef expensive_db_query(user_id):\n    ...\n```\n\nFor impure functions, TTL (in second) will be a solution. This will be useful when the function returns resources that is valid only for a short time, e.g. fetching something from databases.\n\n### Limited cache capacity\n \n```python\n@cached(max_size=128)  # the cache holds no more than 128 items\ndef get_a_very_large_object(filename):\n    ...\n```\n\nBy default, if you don't specify ```max_size```, the cache can hold unlimited number of items.\nWhen the cache is fully occupied, the former data will be overwritten by a certain algorithm described below.\n\n### Choosing your caching algorithm\n\n```python\nfrom memoization import cached, CachingAlgorithmFlag\n\n@cached(max_size=128, algorithm=CachingAlgorithmFlag.LFU)  # the cache overwrites items using the LFU algorithm\ndef func(arg):\n    ...\n```\n\nPossible values for ```algorithm``` are:\n\n- `CachingAlgorithmFlag.LRU`: _Least Recently Used_  (default)\n- `CachingAlgorithmFlag.LFU`: _Least Frequently Used_ \n- `CachingAlgorithmFlag.FIFO`: _First In First Out_ \n\nThis option is valid only when a ```max_size``` is explicitly specified.\n\n### Thread safe?\n\n```python\n@cached(thread_safe=False)\ndef func(arg):\n    ...\n```\n\n```thread_safe``` is ```True``` by default. Setting it to ```False``` enhances performance.\n\n### Order-independent cache key\n\nBy default, the following function calls will be treated differently and cached twice, which means the cache misses at the second call.\n\n```python\nfunc(a=1, b=1)\nfunc(b=1, a=1)\n```\n\nYou can avoid this behavior by passing an `order_independent` argument to the decorator, although it will slow down the performance a little bit. \n\n```python\n@cached(order_independent=True)\ndef func(**kwargs):\n    ...\n```\n\n### Custom cache keys\n\nPrior to memorize your function inputs and outputs (i.e. putting them into a cache), `memoization` needs to\nbuild a __cache key__ using the inputs, so that the outputs can be retrieved later.\n\n> By default, `memoization` tries to combine all your function\narguments and calculate its hash value using `hash()`. If it turns out that parts of your arguments are\nunhashable, `memoization` will fall back to turning them into a string using `str()`. This behavior relies\non the assumption that the string exactly represents the internal state of the arguments, which is true for\nbuilt-in types.\n\nHowever, this is not true for all objects. __If you pass objects which are\ninstances of non-built-in classes, sometimes you will need to override the default key-making procedure__,\nbecause the `str()` function on these objects may not hold the correct information about their states.\n\nHere are some suggestions. __Implementations of a valid key maker__:\n\n- MUST be a function with the same signature as the cached function.\n- MUST produce unique keys, which means two sets of different arguments always map to two different keys.\n- MUST produce hashable keys, and a key is comparable with another key (`memoization` only needs to check for their equality).\n- should compute keys efficiently and produce small objects as keys.\n\nExample:\n\n```python\ndef get_employee_id(employee):\n    return employee.id  # returns a string or a integer\n\n@cached(custom_key_maker=get_employee_id)\ndef calculate_performance(employee):\n    ...\n```\n\nNote that writing a robust key maker function can be challenging in some situations. If you find it difficult,\nfeel free to ask for help by submitting an [issue](https://github.com/lonelyenvoy/python-memoization/issues).\n\n\n### Knowing how well the cache is behaving\n\n```python\n>>> @cached\n... def f(x): return x\n... \n>>> f.cache_info()\nCacheInfo(hits=0, misses=0, current_size=0, max_size=None, algorithm=<CachingAlgorithmFlag.LRU: 2>, ttl=None, thread_safe=True, order_independent=False, use_custom_key=False)\n```\n\nWith ```cache_info```, you can retrieve the number of ```hits``` and ```misses``` of the cache, and other information indicating the caching status.\n\n- `hits`: the number of cache hits\n- `misses`: the number of cache misses\n- `current_size`: the number of items that were cached\n- `max_size`: the maximum number of items that can be cached (user-specified)\n- `algorithm`: caching algorithm (user-specified)\n- `ttl`: Time-To-Live value (user-specified)\n- `thread_safe`: whether the cache is thread safe (user-specified)\n- `order_independent`: whether the cache is kwarg-order-independent (user-specified)\n- `use_custom_key`: whether a custom key maker is used\n\n### Other APIs\n\n- Access the original undecorated function `f` by `f.__wrapped__`.\n- Clear the cache by `f.cache_clear()`.\n- Check whether the cache is empty by `f.cache_is_empty()`.\n- Check whether the cache is full by `f.cache_is_full()`.\n- Disable `SyntaxWarning` by `memoization.suppress_warnings()`.\n\n## Advanced API References\n\n<details>\n<summary>Details</summary>\n\n### Checking whether the cache contains something\n\n#### cache_contains_argument(function_arguments, alive_only)\n\n```\nReturn True if the cache contains a cached item with the specified function call arguments\n\n:param function_arguments:  Can be a list, a tuple or a dict.\n                            - Full arguments: use a list to represent both positional arguments and keyword\n                              arguments. The list contains two elements, a tuple (positional arguments) and\n                              a dict (keyword arguments). For example,\n                                f(1, 2, 3, a=4, b=5, c=6)\n                              can be represented by:\n                                [(1, 2, 3), {'a': 4, 'b': 5, 'c': 6}]\n                            - Positional arguments only: when the arguments does not include keyword arguments,\n                              a tuple can be used to represent positional arguments. For example,\n                                f(1, 2, 3)\n                              can be represented by:\n                                (1, 2, 3)\n                            - Keyword arguments only: when the arguments does not include positional arguments,\n                              a dict can be used to represent keyword arguments. For example,\n                                f(a=4, b=5, c=6)\n                              can be represented by:\n                                {'a': 4, 'b': 5, 'c': 6}\n\n:param alive_only:          Whether to check alive cache item only (default to True).\n\n:return:                    True if the desired cached item is present, False otherwise.\n```\n\n#### cache_contains_result(return_value, alive_only)\n\n```\nReturn True if the cache contains a cache item with the specified user function return value. O(n) time\ncomplexity.\n\n:param return_value:        A return value coming from the user function.\n\n:param alive_only:          Whether to check alive cache item only (default to True).\n\n:return:                    True if the desired cached item is present, False otherwise.\n```\n\n### Iterating through the cache\n\n#### cache_arguments()\n\n```\nGet user function arguments of all alive cache elements\n\nsee also: cache_items()\n\nExample:\n   @cached\n   def f(a, b, c, d):\n       ...\n   f(1, 2, c=3, d=4)\n   for argument in f.cache_arguments():\n       print(argument)  # ((1, 2), {'c': 3, 'd': 4})\n\n:return: an iterable which iterates through a list of a tuple containing a tuple (positional arguments) and\n        a dict (keyword arguments)\n```\n\n#### cache_results()\n\n```\nGet user function return values of all alive cache elements\n\nsee also: cache_items()\n\nExample:\n   @cached\n   def f(a):\n       return a\n   f('hello')\n   for result in f.cache_results():\n       print(result)  # 'hello'\n\n:return: an iterable which iterates through a list of user function result (of any type)\n```\n\n#### cache_items()\n\n```\nGet cache items, i.e. entries of all alive cache elements, in the form of (argument, result).\n\nargument: a tuple containing a tuple (positional arguments) and a dict (keyword arguments).\nresult: a user function return value of any type.\n\nsee also: cache_arguments(), cache_results().\n\nExample:\n   @cached\n   def f(a, b, c, d):\n       return 'the answer is ' + str(a)\n   f(1, 2, c=3, d=4)\n   for argument, result in f.cache_items():\n       print(argument)  # ((1, 2), {'c': 3, 'd': 4})\n       print(result)    # 'the answer is 1'\n\n:return: an iterable which iterates through a list of (argument, result) entries\n```\n\n#### cache_for_each()\n\n```\nPerform the given action for each cache element in an order determined by the algorithm until all\nelements have been processed or the action throws an error\n\n:param consumer:           an action function to process the cache elements. Must have 3 arguments:\n                             def consumer(user_function_arguments, user_function_result, is_alive): ...\n                           user_function_arguments is a tuple holding arguments in the form of (args, kwargs).\n                             args is a tuple holding positional arguments.\n                             kwargs is a dict holding keyword arguments.\n                             for example, for a function: foo(a, b, c, d), calling it by: foo(1, 2, c=3, d=4)\n                             user_function_arguments == ((1, 2), {'c': 3, 'd': 4})\n                           user_function_result is a return value coming from the user function.\n                           is_alive is a boolean value indicating whether the cache is still alive\n                           (if a TTL is given).\n```\n\n### Removing something from the cache\n\n#### cache_clear()\n\n```\nClear the cache and its statistics information\n```\n\n#### cache_remove_if(predicate)\n\n```\nRemove all cache elements that satisfy the given predicate\n\n:param predicate:           a predicate function to judge whether the cache elements should be removed. Must\n                            have 3 arguments, and returns True or False:\n                              def consumer(user_function_arguments, user_function_result, is_alive): ...\n                            user_function_arguments is a tuple holding arguments in the form of (args, kwargs).\n                              args is a tuple holding positional arguments.\n                              kwargs is a dict holding keyword arguments.\n                              for example, for a function: foo(a, b, c, d), calling it by: foo(1, 2, c=3, d=4)\n                              user_function_arguments == ((1, 2), {'c': 3, 'd': 4})\n                            user_function_result is a return value coming from the user function.\n                            is_alive is a boolean value indicating whether the cache is still alive\n                            (if a TTL is given).\n\n:return:                    True if at least one element is removed, False otherwise.\n```\n\n</details>\n\n## Q&A\n\n1. **Q: There are duplicated code in `memoization` and most of them can be eliminated by using another level of\nabstraction (e.g. classes and multiple inheritance). Why not refactor?**\n\n   A: We would like to keep the code in a proper level of abstraction. However, these abstractions make it run slower.\nAs this is a caching library focusing on speed, we have to give up some elegance for better performance. Refactoring\nis our future work.\n\n\n2. **Q: I have submitted an issue and not received a reply for a long time. Anyone can help me?**\n\n   A: Sorry! We are not working full-time, but working voluntarily on this project, so you might experience some delay.\nWe appreciate your patience.\n\n\n## Contributing\n\nThis project welcomes contributions from anyone.\n- [Read Contributing Guidance](https://github.com/lonelyenvoy/python-memoization/blob/master/CONTRIBUTING.md) first.\n- [Submit bugs](https://github.com/lonelyenvoy/python-memoization/issues) and help us verify fixes.\n- [Submit pull requests](https://github.com/lonelyenvoy/python-memoization/pulls) for bug fixes and features and discuss existing proposals. Please make sure that your PR passes the tests in ```test.py```.\n- [See contributors](https://github.com/lonelyenvoy/python-memoization/blob/master/CONTRIBUTORS.md) of this project.\n\n\n## License\n\n[The MIT License](https://github.com/lonelyenvoy/python-memoization/blob/master/LICENSE)\n\n\n[pythonsvg]: https://img.shields.io/pypi/pyversions/memoization.svg\n[python]: https://www.python.org\n\n[travismaster]: https://travis-ci.com/lonelyenvoy/python-memoization.svg?branch=master\n[travis]: https://travis-ci.com/lonelyenvoy/python-memoization\n\n[coverallssvg]: https://coveralls.io/repos/github/lonelyenvoy/python-memoization/badge.svg?branch=master\n[coveralls]: https://coveralls.io/github/lonelyenvoy/python-memoization?branch=master\n\n[repositorysvg]: https://img.shields.io/pypi/v/memoization\n[repository]: https://pypi.org/project/memoization\n\n[downloadssvg]: https://img.shields.io/pypi/dm/memoization\n\n[prsvg]: https://img.shields.io/badge/pull_requests-welcome-blue.svg\n[pr]: https://github.com/lonelyenvoy/python-memoization#contributing\n\n[licensesvg]: https://img.shields.io/badge/license-MIT-blue.svg\n[license]: https://github.com/lonelyenvoy/python-memoization/blob/master/LICENSE\n\n[codacysvg]: https://api.codacy.com/project/badge/Grade/52c68fb9de6b4b149e77e8e173616db6\n[codacy]: https://www.codacy.com/manual/petrinchor/python-memoization?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=lonelyenvoy/python-memoization&amp;utm_campaign=Badge_Grade\n\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/lonelyenvoy/python-memoization","keywords":"memoization memorization remember decorator cache caching function callable functional ttl limited capacity fast high-performance optimization","license":"MIT","maintainer":"","maintainer_email":"","name":"memoization","package_url":"https://pypi.org/project/memoization/","platform":"","project_url":"https://pypi.org/project/memoization/","project_urls":{"Homepage":"https://github.com/lonelyenvoy/python-memoization"},"provides_extra":null,"release_url":"https://pypi.org/project/memoization/0.4.0/","requires_dist":null,"requires_python":">=3, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4","summary":"A powerful caching library for Python, with TTL support and multiple algorithm options. (https://github.com/lonelyenvoy/python-memoization)","version":"0.4.0","yanked":false,"yanked_reason":null},"last_serial":11063743,"releases":{"0.0.10":[{"comment_text":"","digests":{"blake2b_256":"9c1b68e687bf5b501bc3158f968c1b88e5148a4bfc6d289355d674b52905d7a2","md5":"fc59f33778f289d67130ca296598fb4e","sha256":"8505f40330ec128d571a717bd45fdca5e15fc1b9f57d573b681d918ff1bc1618"},"downloads":-1,"filename":"memoization-0.0.10.tar.gz","has_sig":false,"md5_digest":"fc59f33778f289d67130ca296598fb4e","packagetype":"sdist","python_version":"source","requires_python":null,"size":3200,"upload_time":"2018-08-16T13:28:10","upload_time_iso_8601":"2018-08-16T13:28:10.607837Z","url":"https://files.pythonhosted.org/packages/9c/1b/68e687bf5b501bc3158f968c1b88e5148a4bfc6d289355d674b52905d7a2/memoization-0.0.10.tar.gz","yanked":false,"yanked_reason":null}],"0.0.6":[{"comment_text":"","digests":{"blake2b_256":"07818d7fcf215f4b36f89e12bdadd8a29d28b3763560b238db365831732564c3","md5":"69c7a80c479e68c8bfffe1ed6a9cb7ed","sha256":"38b0d8b592c420695b880a5afa01943c228ae497f34eb6fd40a2b703f959fe64"},"downloads":-1,"filename":"memoization-0.0.6.tar.gz","has_sig":false,"md5_digest":"69c7a80c479e68c8bfffe1ed6a9cb7ed","packagetype":"sdist","python_version":"source","requires_python":null,"size":782,"upload_time":"2018-08-15T19:49:38","upload_time_iso_8601":"2018-08-15T19:49:38.381082Z","url":"https://files.pythonhosted.org/packages/07/81/8d7fcf215f4b36f89e12bdadd8a29d28b3763560b238db365831732564c3/memoization-0.0.6.tar.gz","yanked":false,"yanked_reason":null}],"0.0.7":[{"comment_text":"","digests":{"blake2b_256":"5e2e0f721f7d24c53fdcb9c715186aeb65392727023d67ec3f58e3b092169e85","md5":"e7dd6a3e6dcfe3fb979c65a021b798bc","sha256":"c611ed913efe2727ad6efb20a1c14d8da12d90eda2c89c7245a4ec22c05893bf"},"downloads":-1,"filename":"memoization-0.0.7.tar.gz","has_sig":false,"md5_digest":"e7dd6a3e6dcfe3fb979c65a021b798bc","packagetype":"sdist","python_version":"source","requires_python":null,"size":962,"upload_time":"2018-08-16T12:13:04","upload_time_iso_8601":"2018-08-16T12:13:04.518695Z","url":"https://files.pythonhosted.org/packages/5e/2e/0f721f7d24c53fdcb9c715186aeb65392727023d67ec3f58e3b092169e85/memoization-0.0.7.tar.gz","yanked":false,"yanked_reason":null}],"0.0.9":[{"comment_text":"","digests":{"blake2b_256":"a4965316661fc585d542f2764acbfd829136a1b037810f6e5c745651043efaa9","md5":"492f4fc3eca27a73892597a1116d231d","sha256":"21097958f3a33ff20134b45ced682727401310e7c57e9db96dfa622e4ea8e9c2"},"downloads":-1,"filename":"memoization-0.0.9.tar.gz","has_sig":false,"md5_digest":"492f4fc3eca27a73892597a1116d231d","packagetype":"sdist","python_version":"source","requires_python":null,"size":999,"upload_time":"2018-08-16T13:09:51","upload_time_iso_8601":"2018-08-16T13:09:51.338317Z","url":"https://files.pythonhosted.org/packages/a4/96/5316661fc585d542f2764acbfd829136a1b037810f6e5c745651043efaa9/memoization-0.0.9.tar.gz","yanked":false,"yanked_reason":null}],"0.1.4":[{"comment_text":"","digests":{"blake2b_256":"08fc28e480593bb9fa3475f5bc9d4c2090e381aac1fb8fedf1c6678c9e7c10de","md5":"deb9fb6384817a1a18768a4f62b71960","sha256":"fb7116356b6183b3baae55aedc81f287200ad852be88730c3cca304844bd5793"},"downloads":-1,"filename":"memoization-0.1.4-py3-none-any.whl","has_sig":false,"md5_digest":"deb9fb6384817a1a18768a4f62b71960","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4","size":25333,"upload_time":"2019-05-13T07:04:00","upload_time_iso_8601":"2019-05-13T07:04:00.183908Z","url":"https://files.pythonhosted.org/packages/08/fc/28e480593bb9fa3475f5bc9d4c2090e381aac1fb8fedf1c6678c9e7c10de/memoization-0.1.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4b60023e8952dbebea9f6d6bdbbefcddf64303273969c12f64bdaa2f20551746","md5":"c00887b545be063b5225a01851235a9b","sha256":"bb141c5f950e32f6318ed50861876a4c47e551d816fd5b800af7e96ddb7c5615"},"downloads":-1,"filename":"memoization-0.1.4.tar.gz","has_sig":false,"md5_digest":"c00887b545be063b5225a01851235a9b","packagetype":"sdist","python_version":"source","requires_python":">=2.6, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4","size":24076,"upload_time":"2019-05-13T07:04:02","upload_time_iso_8601":"2019-05-13T07:04:02.160758Z","url":"https://files.pythonhosted.org/packages/4b/60/023e8952dbebea9f6d6bdbbefcddf64303273969c12f64bdaa2f20551746/memoization-0.1.4.tar.gz","yanked":false,"yanked_reason":null}],"0.2.2":[{"comment_text":"","digests":{"blake2b_256":"3119f74e5fbc70e4d9d7633b11f133676e10cf51478cab164d7afb2f5f1fbb6a","md5":"68f7d4417e5da23e800f5bd5bc353bcb","sha256":"a1de1e2e2e83c0adf23d77b3e0f27d52a4bfae6b07950a969ba6a7c3bd35c591"},"downloads":-1,"filename":"memoization-0.2.2-py3-none-any.whl","has_sig":false,"md5_digest":"68f7d4417e5da23e800f5bd5bc353bcb","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4","size":29609,"upload_time":"2020-01-11T17:16:39","upload_time_iso_8601":"2020-01-11T17:16:39.790425Z","url":"https://files.pythonhosted.org/packages/31/19/f74e5fbc70e4d9d7633b11f133676e10cf51478cab164d7afb2f5f1fbb6a/memoization-0.2.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"072c4645c0ba62929a8c53e407c8ddc19b13a0f42854f72cb684624b63ac6c80","md5":"dfb3a124e05922f046d7cf8c4be63f62","sha256":"dc595d6e929a1e05c197c1fd94abe36b8c3479ee3c80c76c4a46777cc9d3d626"},"downloads":-1,"filename":"memoization-0.2.2.tar.gz","has_sig":false,"md5_digest":"dfb3a124e05922f046d7cf8c4be63f62","packagetype":"sdist","python_version":"source","requires_python":">=3, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4","size":24209,"upload_time":"2020-01-11T17:16:41","upload_time_iso_8601":"2020-01-11T17:16:41.545166Z","url":"https://files.pythonhosted.org/packages/07/2c/4645c0ba62929a8c53e407c8ddc19b13a0f42854f72cb684624b63ac6c80/memoization-0.2.2.tar.gz","yanked":false,"yanked_reason":null}],"0.2.3":[{"comment_text":"","digests":{"blake2b_256":"f64f70addf81a3a1293ccbfa2f2abc0e2554b5592b28c3cd5025984fa9555c7c","md5":"3094f2f181be3ca036709c5d49b470f0","sha256":"621d59ddb104a9496639b568d381474f821392b80d10b6e49f019b9c9fbd993b"},"downloads":-1,"filename":"memoization-0.2.3-py3-none-any.whl","has_sig":false,"md5_digest":"3094f2f181be3ca036709c5d49b470f0","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4","size":30873,"upload_time":"2020-02-26T13:35:14","upload_time_iso_8601":"2020-02-26T13:35:14.908448Z","url":"https://files.pythonhosted.org/packages/f6/4f/70addf81a3a1293ccbfa2f2abc0e2554b5592b28c3cd5025984fa9555c7c/memoization-0.2.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e174bc6a22ec0b1a79175f81a7e0c708fc4d62a092b453870bc2c3e94a6a5df8","md5":"7de5ccb216eccb41e956ad81bd55ae13","sha256":"2d2950bfb3e74bce569b9a5c000173beb9f3ed3c3a4d7bef11b6520202dbd46a"},"downloads":-1,"filename":"memoization-0.2.3.tar.gz","has_sig":false,"md5_digest":"7de5ccb216eccb41e956ad81bd55ae13","packagetype":"sdist","python_version":"source","requires_python":">=3, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4","size":25187,"upload_time":"2020-02-26T13:35:16","upload_time_iso_8601":"2020-02-26T13:35:16.900086Z","url":"https://files.pythonhosted.org/packages/e1/74/bc6a22ec0b1a79175f81a7e0c708fc4d62a092b453870bc2c3e94a6a5df8/memoization-0.2.3.tar.gz","yanked":false,"yanked_reason":null}],"0.3.1":[{"comment_text":"","digests":{"blake2b_256":"04d09656ccb7434946e592d5350073b4c612be0691d1de050b0b1d6c56a9cd67","md5":"359e8b3d3750ba5bf0265539113f0a7f","sha256":"b012e5a8be2e88ae0ad7ceb439142dcf6056f3c7d580af7e92b3a523dd84abaa"},"downloads":-1,"filename":"memoization-0.3.1-py3-none-any.whl","has_sig":false,"md5_digest":"359e8b3d3750ba5bf0265539113f0a7f","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4","size":32748,"upload_time":"2020-05-12T05:26:21","upload_time_iso_8601":"2020-05-12T05:26:21.795947Z","url":"https://files.pythonhosted.org/packages/04/d0/9656ccb7434946e592d5350073b4c612be0691d1de050b0b1d6c56a9cd67/memoization-0.3.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b76ba4876529c527fb8b605670c2dcadfa87c9fb941cd5ff3be732bc7bea6b77","md5":"ea63b6dbd6b1069afb44b31657095350","sha256":"6237152a6e4d76b75b3045d8423b1d637437f0a65484f10a504c0da93b1eaeaf"},"downloads":-1,"filename":"memoization-0.3.1.tar.gz","has_sig":false,"md5_digest":"ea63b6dbd6b1069afb44b31657095350","packagetype":"sdist","python_version":"source","requires_python":">=3, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4","size":29106,"upload_time":"2020-05-12T05:26:22","upload_time_iso_8601":"2020-05-12T05:26:22.945452Z","url":"https://files.pythonhosted.org/packages/b7/6b/a4876529c527fb8b605670c2dcadfa87c9fb941cd5ff3be732bc7bea6b77/memoization-0.3.1.tar.gz","yanked":false,"yanked_reason":null}],"0.3.2":[{"comment_text":"","digests":{"blake2b_256":"168737229296c2a9506867d5f5440b9aac015d97af54c951cdfc129bb4bb8d75","md5":"0cf0eed0364c398e03fda2f5ef79bd2b","sha256":"6109bcfdbd6fc6c33004fcdc5d8e291c1223a7416c5dad61ec777d260f6038d2"},"downloads":-1,"filename":"memoization-0.3.2-py3-none-any.whl","has_sig":false,"md5_digest":"0cf0eed0364c398e03fda2f5ef79bd2b","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4","size":38522,"upload_time":"2020-12-19T10:51:55","upload_time_iso_8601":"2020-12-19T10:51:55.228552Z","url":"https://files.pythonhosted.org/packages/16/87/37229296c2a9506867d5f5440b9aac015d97af54c951cdfc129bb4bb8d75/memoization-0.3.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"2cf0f6ed99bf501df174f2fd94e546fba24314e4c4da2285db4c134ba7bfd5ec","md5":"f846ed37355a99c9479a94b5f2d69f77","sha256":"65d19404b9acc74a764d3e584d8fb17c56bc446d386a28afb93f2247507c99cc"},"downloads":-1,"filename":"memoization-0.3.2.tar.gz","has_sig":false,"md5_digest":"f846ed37355a99c9479a94b5f2d69f77","packagetype":"sdist","python_version":"source","requires_python":">=3, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4","size":31694,"upload_time":"2020-12-19T10:51:56","upload_time_iso_8601":"2020-12-19T10:51:56.928002Z","url":"https://files.pythonhosted.org/packages/2c/f0/f6ed99bf501df174f2fd94e546fba24314e4c4da2285db4c134ba7bfd5ec/memoization-0.3.2.tar.gz","yanked":false,"yanked_reason":null}],"0.4.0":[{"comment_text":"","digests":{"blake2b_256":"af53e948a943e16423a87ced16e34ea7583c300e161a4c3e85d47d77d83830bf","md5":"1238251cd1c439afee630fac9e5830bd","sha256":"fde5e7cd060ef45b135e0310cfec17b2029dc472ccb5bbbbb42a503d4538a135"},"downloads":-1,"filename":"memoization-0.4.0.tar.gz","has_sig":false,"md5_digest":"1238251cd1c439afee630fac9e5830bd","packagetype":"sdist","python_version":"source","requires_python":">=3, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4","size":41209,"upload_time":"2021-08-01T18:48:53","upload_time_iso_8601":"2021-08-01T18:48:53.002284Z","url":"https://files.pythonhosted.org/packages/af/53/e948a943e16423a87ced16e34ea7583c300e161a4c3e85d47d77d83830bf/memoization-0.4.0.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"af53e948a943e16423a87ced16e34ea7583c300e161a4c3e85d47d77d83830bf","md5":"1238251cd1c439afee630fac9e5830bd","sha256":"fde5e7cd060ef45b135e0310cfec17b2029dc472ccb5bbbbb42a503d4538a135"},"downloads":-1,"filename":"memoization-0.4.0.tar.gz","has_sig":false,"md5_digest":"1238251cd1c439afee630fac9e5830bd","packagetype":"sdist","python_version":"source","requires_python":">=3, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4","size":41209,"upload_time":"2021-08-01T18:48:53","upload_time_iso_8601":"2021-08-01T18:48:53.002284Z","url":"https://files.pythonhosted.org/packages/af/53/e948a943e16423a87ced16e34ea7583c300e161a4c3e85d47d77d83830bf/memoization-0.4.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
