{"info":{"author":"NetInvent - Orsiris de Jong","author_email":"contact@netinvent.fr","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Intended Audience :: Developers","License :: OSI Approved :: BSD License","Operating System :: Microsoft","Operating System :: Microsoft :: Windows","Operating System :: POSIX :: BSD :: FreeBSD","Operating System :: POSIX :: BSD :: NetBSD","Operating System :: POSIX :: BSD :: OpenBSD","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: Implementation :: CPython","Programming Language :: Python :: Implementation :: PyPy","Topic :: Software Development","Topic :: System","Topic :: System :: Operating System","Topic :: System :: Shells"],"description":"# command_runner\r\n# Platform agnostic command execution, timed background jobs with live stdout/stderr output capture, and UAC/sudo elevation\r\n\r\n[![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\r\n[![Percentage of issues still open](http://isitmaintained.com/badge/open/netinvent/command_runner.svg)](http://isitmaintained.com/project/netinvent/command_runner \"Percentage of issues still open\")\r\n[![Maintainability](https://api.codeclimate.com/v1/badges/defbe10a354d3705f287/maintainability)](https://codeclimate.com/github/netinvent/command_runner/maintainability)\r\n[![codecov](https://codecov.io/gh/netinvent/command_runner/branch/master/graph/badge.svg?token=rXqlphOzMh)](https://codecov.io/gh/netinvent/command_runner)\r\n[![linux-tests](https://github.com/netinvent/command_runner/actions/workflows/linux.yaml/badge.svg)](https://github.com/netinvent/command_runner/actions/workflows/linux.yaml)\r\n[![windows-tests](https://github.com/netinvent/command_runner/actions/workflows/windows.yaml/badge.svg)](https://github.com/netinvent/command_runner/actions/workflows/windows.yaml)\r\n[![GitHub Release](https://img.shields.io/github/release/netinvent/command_runner.svg?label=Latest)](https://github.com/netinvent/command_runner/releases/latest)\r\n\r\n\r\ncommand_runner's purpose is to run external commands from python, just like subprocess on which it relies, \r\nwhile solving various problems a developer may face among:\r\n   - Handling of all possible subprocess.popen / subprocess.check_output scenarios / python versions in one handy function without encoding / timeout hassle\r\n   - Allow stdout/stderr stream output to be redirected to callback functions / output queues / files so you get to handle output in your application while commands are running\r\n   - Callback to optional stop check so we can stop execution from outside command_runner\r\n   - Callback with optional process information so we get to control the process from outside command_runner\r\n   - Callback once we're finished to easen thread usage\r\n   - Optional process priority and io_priority settings\r\n   - System agnostic functionality, the developer shouldn't carry the burden of Windows & Linux differences\r\n   - Optional Windows UAC elevation module compatible with CPython, PyInstaller & Nuitka\r\n   - Optional Linux sudo elevation compatible with CPython, PyInstaller & Nuitka\r\n\r\nIt is compatible with Python 2.7+, tested up to Python 3.11 (backports some newer Python 3.5 functionality) and is tested on both Linux and Windows.\r\nIt is also compatible with PyPy Python implementation.\r\n...and yes, keeping Python 2.7 compatibility has proven to be quite challenging.\r\n\r\n## command_runner\r\n\r\ncommand_runner is a replacement package for subprocess.popen and subprocess.check_output\r\nThe main promise command_runner can do is to make sure to never have a blocking command, and always get results.\r\n\r\nIt works as wrapper for subprocess.popen and subprocess.communicate that solves:\r\n   - Platform differences\r\n      - Handle timeouts even for windows GUI applications that don't return anything to stdout\r\n   - Python language version differences\r\n      - Handle timeouts even on earlier Python implementations\r\n      - Handle encoding even on earlier Python implementations\r\n   - Keep the promise to always return an exit code (so we don't have to deal with exit codes and exception logic at the same time)\r\n   - Keep the promise to always return the command output regardless of the execution state (even with timeouts, callback interrupts and keyboard interrupts)\r\n   - Can show command output on the fly without waiting the end of execution (with `live_output=True` argument)\r\n   - Can give command output on the fly to application by using queues or callback functions\r\n   - Catch all possible exceptions and log them properly with encoding fixes\r\n   - Be compatible, and always return the same result regarless of platform\r\n\r\ncommand_runner also promises to properly kill commands when timeouts are reached, including spawned subprocesses of such commands.\r\nThis specific behavior is achieved via psutil module, which is an optional dependency.\r\n\r\n   \r\n### command_runner in a nutshell\r\n\r\nInstall with `pip install command_runner`\r\n\r\nThe following example will work regardless of the host OS and the Python version.\r\n\r\n```python\r\nfrom command_runner import command_runner\r\n\r\nexit_code, output = command_runner('ping 127.0.0.1', timeout=10)\r\n```\r\n\r\n\r\n## Guide to command_runner\r\n\r\n### Setup\r\n\r\n`pip install command_runner` or download the latest git release\r\n\r\n\r\n### Advanced command_runner usage\r\n\r\n\r\n#### Special exit codes\r\n\r\nIn order to keep the promise to always provide an exit_code, spcial exit codes have been added for the case where none is given.\r\nThose exit codes are:\r\n\r\n- -250 : command_runner called with incompatible arguments\r\n- -251 : stop_on function returned True\r\n- -252 : KeyboardInterrupt\r\n- -253 : FileNotFoundError, OSError, IOError\r\n- -254 : Timeout\r\n- -255 : Any other uncatched exceptions\r\n\r\nThis allows you to use the standard exit code logic, without having to deal with various exceptions.\r\n\r\n#### Default encoding\r\n\r\ncommand_runner has an `encoding` argument which defaults to `utf-8` for Unixes and `cp437` for Windows platforms.\r\nUsing `cp437` ensures that most `cmd.exe` output is encoded properly, including accents and special characters, on most locale systems.\r\nStill you can specify your own encoding for other usages, like Powershell where `unicode_escape` is preferred.\r\n\r\n```python\r\nfrom command_runner import command_runner\r\n\r\ncommand = r'C:\\Windows\\sysnative\\WindowsPowerShell\\v1.0\\powershell.exe --help'\r\nexit_code, output = command_runner(command, encoding='unicode_escape')\r\n```\r\n\r\nEarlier subprocess.popen implementations didn't have an encoding setting so command_runner will deal with encoding for those.   \r\nYou can also disable command_runner's internal encoding in order to get raw process output (bytes) by passing False boolean.\r\n\r\nExample:\r\n```python\r\nfrom command_runner import command_runner\r\n\r\nexit_code, raw_output = command_runner('ping 127.0.0.1', encoding=False)\r\n```\r\n\r\n#### On the fly (interactive screen) output\r\n\r\n**Note: for live output capture and threading, see stream redirection. If you want to run your application while command_runner gives back command output, the best way to go is queues / callbacks.**\r\n\r\ncommand_runner can output a command output on the fly to stdout, eg show output on screen during execution.\r\nThis is helpful when the command is long, and we need to know the output while execution is ongoing.\r\nIt is also helpful in order to catch partial command output when timeout is reached or a CTRL+C signal is received.\r\nExample:\r\n\r\n```python\r\nfrom command_runner import command_runner\r\n\r\nexit_code, output = command_runner('ping 127.0.0.1', shell=True, live_output=True)\r\n```\r\n\r\nNote: using live output relies on stdout pipe polling, which has lightly higher cpu usage.\r\n\r\n#### Timeouts\r\n\r\n**command_runner has a `timeout` argument which defaults to 3600 seconds.**\r\nThis default setting ensures commands will not block the main script execution.\r\nFeel free to lower / higher that setting with `timeout` argument.\r\nNote that a command_runner kills the whole process tree that the command may have generated, even under Windows.\r\n\r\n```python\r\nfrom command_runner import command_runner\r\n\r\nexit_code, output = command_runner('ping 127.0.0.1', timeout=30)\r\n```\r\n\r\n#### Remarks on processes\r\n\r\nUsing `shell=True` will spawn a shell which will spawn the desired child process.\r\nBe aware that under MS Windows, no direct process tree is available.\r\nWe fixed this by walking processes during runtime. The drawback is that orphaned processes cannot be identified this way.\r\n\r\n\r\n#### Disabling logs / silencing\r\n\r\n`command_runner` has it's own logging system, which will log all sorts of error logs.\r\nIf you need to disable it's logging, just run with argument silent.\r\nBe aware that logging.DEBUG log levels won't be silenced, by design.\r\n\r\nExample:\r\n```python\r\nfrom command_runner import command_runner\r\n\r\nexit_code, output = command_runner('ping 127.0.0.1', silent=True)\r\n```\r\n\r\nIf you also need to disable logging.DEBUG level, you can run the following code which will required logging.CRITICAL only messages which `command_runner` never does:\r\n\r\n```python\r\nimport logging\r\nimport command_runner\r\n\r\nlogging.getLogger('command_runner').setLevel(logging.CRITICAL)\r\n```\r\n\r\n#### Capture method\r\n\r\n`command_runner` allows two different process output capture methods:\r\n\r\n`method='monitor'` which is default:\r\n - A thread is spawned in order to check stop conditions and kill process if needed\r\n - A main loop waits for the process to finish, then uses proc.communicate() to get it's output\r\n - Pros:\r\n     - less CPU usage\r\n     - less threads\r\n - Cons:\r\n     - cannot read partial output on KeyboardInterrupt or stop_on (still works for partial timeout output)\r\n     - cannot use queues or callback functions redirectors\r\n     - is 0.1 seconds slower than poller method\r\n     \r\n\r\n`method='poller'`:\r\n - A thread is spawned and reads stdout/stderr pipes into output queues\r\n - A poller loop reads from the output queues, checks stop conditions and kills process if needed\r\n - Pros: \r\n      - Reads on the fly, allowing interactive commands (is also used with `live_output=True`)\r\n      - Allows stdout/stderr output to be written live to callback functions, queues or files (useful when threaded)\r\n      - is 0.1 seconds faster than monitor method, is preferred method for fast batch runnings\r\n - Cons:\r\n      - lightly higher CPU usage\r\n\r\nExample:\r\n```python\r\nfrom command_runner import command_runner\r\n\r\n\r\nexit_code, output = command_runner('ping 127.0.0.1', method='poller')\r\nexit_code, output = command_runner('ping 127.0.0.1', method='monitor')\r\n```\r\n\r\n#### stdin stream redirection\r\n\r\n`command_runner` allows to redirect some stream directly into the subprocess it spawns.\r\n\r\nExample code\r\n```python\r\nimport sys\r\nfrom command_runner import command_runner\r\n\r\n\r\nexit_code, output = command_runner(\"gzip -d\", stdin=sys.stdin.buffer)\r\nprint(\"Uncompressed data\", output)\r\n```\r\nThe above program, when run with `echo \"Hello, World!\" | gzip | python myscript.py` will show the uncompressed  string `Hello, World!`\r\n\r\nYou can use whatever file descriptor you want, basic ones being sys.stdin for text input and sys.stdin.buffer for binary input.\r\n\r\n#### stdout / stderr stream redirection\r\n\r\ncommand_runner can redirect stdout and/or stderr streams to different outputs:\r\n - subprocess pipes\r\n - /dev/null or NUL\r\n - files\r\n - queues\r\n - callback functions\r\n\r\nUnless an output redirector is given for `stderr` argument, stderr will be redirected to `stdout` stream.\r\nNote that both queues and callback function redirectors require `poller` method and will fail if method is not set.\r\n\r\nPossible output redirection options are:\r\n\r\n- subprocess pipes\r\n\r\nBy default, stdout writes into a subprocess.PIPE which is read by command_runner and returned as `output` variable.\r\nYou may also pass any other subprocess.PIPE int values to `stdout` or `stderr` arguments.\r\n\r\n- /dev/null or NUL\r\n\r\nIf `stdout=False` and/or `stderr=False` argument(s) are given, command output will not be saved.\r\nstdout/stderr streams will be redirected to `/dev/null` or `NUL` depending on platform.\r\n\r\nOutput will always be `None`. See `split_streams` for more details using multiple outputs.\r\n\r\n- files\r\n\r\nGiving `stdout` and/or `stderr` arguments a string, `command_runner` will consider the string to be a file path where stream output will be written live.\r\n\r\nExamples:\r\n```python\r\nfrom command_runner import command_runner\r\nexit_code, output = command_runner('dir', stdout=r\"C:/tmp/command_result\", stderr=r\"C:/tmp/command_error\", shell=True)\r\n```\r\n```python\r\nfrom command_runner import command_runner\r\nexit_code, output = command_runner('dir', stdout='/tmp/stdout.log', stderr='/tmp/stderr.log', shell=True)\r\n```\r\n\r\nOpening a file with the wrong encoding (especially opening a CP437 encoded file on Windows with UTF-8 coded might endup with UnicodedecodeError.)\r\n\r\n- queues\r\n\r\nQueue(s) will be filled up by command_runner.\r\n\r\nIn order to keep your program \"live\", we'll use the threaded version of command_runner which is basically the same except it returns a future result instead of a tuple.\r\n\r\nNote: With all the best will, there's no good way to achieve this under Python 2.7 without using more queues, so the threaded version is only compatible with Python 3.3+.\r\n\r\nFor Python 2.7, you must create your thread and queue reader yourself (see footnote for a Python 2.7 comaptible example).\r\n\r\nThreaded command_runner plus queue example:\r\n\r\n```python\r\nimport queue\r\nfrom command_runner import command_runner_threaded\r\n\r\noutput_queue = queue.Queue()\r\nstream_output = \"\"\r\nthread_result = command_runner_threaded('ping 127.0.0.1', shell=True, method='poller', stdout=output_queue)\r\n\r\nread_queue = True\r\nwhile read_queue:\r\n    try:\r\n        line = output_queue.get(timeout=0.1)\r\n    except queue.Empty:\r\n        pass\r\n    else:\r\n        if line is None:\r\n            read_queue = False\r\n        else:\r\n            stream_output += line\r\n            # ADD YOUR LIVE CODE HERE\r\n\r\n# Now we may get exit_code and output since result has become available at this point\r\nexit_code, output = thread_result.result()\r\n```\r\nYou might also want to read both stdout and stderr queues. In that case, you can create a read loop just like in the following example.\r\nHere we're reading both queues in one loop, so we need to observe a couple of conditions before stopping the loop, in order to catch all queue output:\r\n```python\r\nimport queue\r\nfrom time import sleep\r\nfrom command_runner import command_runner_threaded\r\n\r\nstdout_queue = queue.Queue()\r\nstderr_queue = queue.Queue()\r\nthread_result = command_runner_threaded('ping 127.0.0.1', method='poller', shell=True, stdout=stdout_queue, stderr=stderr_queue)\r\n\r\nread_stdout = read_stderr = True\r\nwhile read_stdout or read_stderr:\r\n\r\n    try:\r\n        stdout_line = stdout_queue.get(timeout=0.1)\r\n    except queue.Empty:\r\n        pass\r\n    else:\r\n        if stdout_line is None:\r\n            read_stdout = False\r\n        else:\r\n            print('STDOUT:', stdout_line)\r\n\r\n    try:\r\n        stderr_line = stderr_queue.get(timeout=0.1)\r\n    except queue.Empty:\r\n        pass\r\n    else:\r\n        if stderr_line is None:\r\n            read_stderr = False\r\n        else:\r\n            print('STDERR:', stderr_line)\r\n    \r\n    # ADD YOUR LIVE CODE HERE\r\n\r\nexit_code, output = thread_result.result()\r\nassert exit_code == 0, 'We did not succeed in running the thread'\r\n\r\n```\r\n\r\n- callback functions\r\n\r\nThe callback function will get one argument, being a str of current stream readings.\r\nIt will be executed on every line that comes from streams.\r\nExample:\r\n```python\r\nfrom command_runner import command_runner\r\n\r\ndef callback_function(string):\r\n    # ADD YOUR CODE HERE\r\n    print('CALLBACK GOT:', string)\r\n    \r\n# Launch command_runner\r\nexit_code, output = command_runner('ping 127.0.0.1', stdout=callback_function, method='poller')\r\n```\r\n\r\n#### stop_on\r\n\r\nIn some situations, you want a command to be aborted on some external triggers.\r\nThat's where `stop_on` argument comes in handy.\r\nJust pass a function to `stop_on`, as soon as function result becomes True, execution will halt with exit code -251.\r\n\r\nExample:\r\n```python\r\nfrom command_runner import command_runner\r\n\r\ndef some_function():\r\n    return True if we_must_stop_execution\r\nexit_code, output = command_runner('ping 127.0.0.1', stop_on=some_function)\r\n```\r\n\r\n#### Checking intervals\r\n\r\nBy default, command_runner checks timeouts and outputs every 0.05 seconds.\r\nYou can increase/decrease this setting via `check_interval` setting which accepts floats.\r\nExample: `command_runner(cmd, check_interval=0.2)`\r\nNote that lowering `check_interval` will increase CPU usage.\r\n\r\n#### Getting current process information\r\n\r\n`command_runner` can provide a subprocess.Popen instance of currently run process as external data.\r\nIn order to do so, just declare a function and give it as `process_callback` argument.\r\n\r\nExample:\r\n```python\r\nfrom command_runner import command_runner\r\n\r\ndef show_process_info(process):\r\n    print('My process has pid: {}'.format(process.pid))\r\n\r\nexit_code, output = command_runner('ping 127.0.0.1', process_callback=show_process_info)\r\n```\r\n\r\n#### Split stdout and stderr\r\n\r\nBy default, `command_runner` returns a tuple like `(exit_code, output)` in which output contains both stdout and stderr stream outputs.\r\nYou can alter that behavior by using argument `split_stream=True`.\r\nIn that case, `command_runner` will return a tuple like `(exit_code, stdout, stderr)`.\r\n\r\nExample:\r\n```python\r\nfrom command_runner import command_runner\r\n\r\nexit_code, stdout, stderr = command_runner('ping 127.0.0.1', split_streams=True)\r\nprint('exit code:', exit_code)\r\nprint('stdout', stdout)\r\nprint('stderr', stderr)\r\n```\r\n\r\n#### On-exit Callback\r\n\r\n`command_runner` allows to execute a callback function once it has finished it's execution.\r\nThis might help building threaded programs where a callback is needed to disable GUI elements for example.\r\n\r\nExample:\r\n```python\r\nfrom command_runner import command_runner\r\n\r\ndef do_something():\r\n    print(\"We're done running\")\r\n\r\nexit_code, output = command_runner('ping 127.0.0.1', on_exit=do_something)\r\n```\r\n\r\n### Process and IO priority\r\n`command_runner` can set it's subprocess priority to 'low', 'normal' or 'high', which translate to 15, 0, -15 niceness on Linux and BELOW_NORMAL_PRIORITY_CLASS and HIGH_PRIORITY_CLASS in Windows.\r\nOn Linux, you may also directly use priority with niceness int values.\r\n\r\nYou may also set subprocess io priority to 'low', 'normal' or 'high'.\r\n\r\nExample:\r\n```python\r\nfrom command_runner import command_runner\r\n\r\nexit_code, output = command_runner('some_intensive_process', priority='low', io_priority='high')\r\n```\r\n\r\n#### Other arguments\r\n\r\n`command_runner` takes **any** argument that `subprocess.Popen()` would take.\r\n\r\nIt also uses the following standard arguments:\r\n - command (str/list): The command, doesn't need to be a list, a simple string works\r\n - valid_exit_codes (list): List of exit codes which won't trigger error logs\r\n - timeout (int): seconds before a process tree is killed forcefully, defaults to 3600\r\n - shell (bool): Shall we use the cmd.exe or /usr/bin/env shell for command execution, defaults to False\r\n - encoding (str/bool): Which text encoding the command produces, defaults to cp437 under Windows and utf-8 under Linux\r\n - stdin (sys.stdin/int): Optional stdin file descriptor, sent to the process command_runner spawns\r\n - stdout (str/queue.Queue/function/False/None): Optional path to filename where to dump stdout, or queue where to write stdout, or callback function which is called when stdout has output\r\n - stderr (str/queue.Queue/function/False/None): Optional path to filename where to dump stderr, or queue where to write stderr, or callback function which is called when stderr has output\r\n - no_close_queues (bool): Normally, command_runner sends None to stdout / stderr queues when process is finished. This behavior can be disabled allowing to reuse those queues for other functions wrapping command_runner\r\n - windows_no_window (bool): Shall a command create a console window (MS Windows only), defaults to False\r\n - live_output (bool): Print output to stdout while executing command, defaults to False\r\n - method (str): Accepts 'poller' or 'monitor' stdout capture and timeout monitoring methods\r\n - check interval (float): Defaults to 0.05 seconds, which is the time between stream readings and timeout checks\r\n - stop_on (function): Optional function that when returns True stops command_runner execution\r\n - on_exit (function): Optional function that gets executed when command_runner has finished (callback function)\r\n - process_callback (function): Optional function that will take command_runner spawned process as argument, in order to deal with process info outside of command_runner\r\n - split_streams (bool): Split stdout and stderr into two separate results\r\n - silent (bool): Allows to disable command_runner's internal logs, except for logging.DEBUG levels which for obvious reasons should never be silenced\r\n - priority (str): Allows to set CPU bound process priority (takes 'low', 'normal' or 'high' parameter)\r\n - io_priority (str): Allows to set IO priority for process (takes 'low', 'normal' or 'high' parameter)\r\n - close_fds (bool): Like Popen, defaults to True on Linux and False on Windows\r\n - universal_newlines (bool): Like Popen, defaults to False\r\n - creation_flags (int): Like Popen, defaults to 0\r\n - bufsize (int): Like Popen, defaults to 16384. Line buffering (bufsize=1) is deprecated since Python 3.7\r\n\r\n**Note that ALL other subprocess.Popen arguments are supported, since they are directly passed to subprocess.**\r\n\r\n\r\n## UAC Elevation / sudo elevation\r\n\r\ncommand_runner package allowing privilege elevation.\r\nBecoming an admin is fairly easy with command_runner.elevate\r\nYou only have to import the elevate module, and then launch your main function with the elevate function.\r\n\r\n### elevation In a nutshell\r\n\r\n```python\r\nfrom command_runner.elevate import elevate\r\n\r\ndef main():\r\n    \"\"\"My main function that should be elevated\"\"\"\r\n    print(\"Who's the administrator, now ?\")\r\n\r\nif __name__ == '__main__':\r\n    elevate(main)\r\n```\r\n\r\nelevate function handles arguments (positional and keyword arguments).\r\n`elevate(main, arg, arg2, kw=somearg)` will call `main(arg, arg2, kw=somearg)`\r\n\r\n### Advanced elevate usage\r\n\r\n#### is_admin() function\r\n\r\nThe elevate module has a nifty is_admin() function that returns a boolean according to your current root/administrator privileges.\r\nUsage:\r\n\r\n```python\r\nfrom command_runner.elevate import is_admin\r\n\r\nprint('Am I an admin ? %s' % is_admin())\r\n```\r\n\r\n#### sudo elevation\r\n\r\nInitially designed for Windows UAC, command_runner.elevate can also elevate privileges on Linux, using the sudo command.\r\nThis is mainly designed for PyInstaller / Nuitka executables, as it's really not safe to allow automatic privilege elevation of a Python interpreter.\r\n\r\nExample for a binary in `/usr/local/bin/my_compiled_python_binary`\r\n\r\nYou'll have to allow this file to be run with sudo without a password prompt.\r\nThis can be achieved in `/etc/sudoers` file.\r\n\r\nExample for Redhat / Rocky Linux, where adding the following line will allow the elevation process to succeed without password:\r\n```\r\nsomeuser ALL= NOPASSWD:/usr/local/bin/my_compiled_python_binary\r\n```\r\n\r\n## Footnotes\r\n\r\n#### command_runner Python 2.7 compatible queue reader\r\n\r\nThe following example is a Python 2.7 compatible threaded implementation that reads stdout / stderr queue in a thread.\r\nThis only exists for compatibility reasons.\r\n\r\n```python\r\nimport queue\r\nimport threading\r\nfrom command_runner import command_runner\r\n\r\ndef read_queue(output_queue):\r\n    \"\"\"\r\n    Read the queue as thread\r\n    Our problem here is that the thread can live forever if we don't check a global value, which is...well ugly\r\n    \"\"\"\r\n    stream_output = \"\"\r\n    read_queue = True\r\n    while read_queue:\r\n        try:\r\n            line = output_queue.get(timeout=1)\r\n        except queue.Empty:\r\n            pass\r\n        else:\r\n            # The queue reading can be stopped once 'None' is received.\r\n            if line is None:\r\n                read_queue = False\r\n            else:\r\n                stream_output += line\r\n                # ADD YOUR LIVE CODE HERE\r\n\r\n\r\n# Create a new queue that command_runner will fill up\r\noutput_queue = queue.Queue()\r\n\r\n# Create a thread of read_queue() in order to read the queue while command_runner executes the command\r\nread_thread = threading.Thread(\r\n    target=read_queue, args=(output_queue)\r\n)\r\nread_thread.daemon = True  # thread dies with the program\r\nread_thread.start()\r\n\r\n# Launch command_runner, which will be blocking. Your live code goes directly into the threaded function\r\nexit_code, output = command_runner('ping 127.0.0.1', stdout=output_queue, method='poller')\r\n```\r\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/netinvent/command_runner","keywords":"shell,execution,subprocess,check_output,wrapper,uac,sudo,elevate,privilege","license":"BSD","maintainer":"","maintainer_email":"","name":"command-runner","package_url":"https://pypi.org/project/command-runner/","platform":null,"project_url":"https://pypi.org/project/command-runner/","project_urls":{"Homepage":"https://github.com/netinvent/command_runner"},"provides_extra":null,"release_url":"https://pypi.org/project/command-runner/1.6.0/","requires_dist":["psutil >=5.6.0"],"requires_python":">=2.7","summary":"Platform agnostic command and shell execution tool, also allows UAC/sudo privilege elevation","version":"1.6.0","yanked":false,"yanked_reason":null},"last_serial":21360300,"releases":{"0.6.0":[{"comment_text":"","digests":{"blake2b_256":"57e91b4e571710f7df5e01afd0d522f79646f51e74d2cc1a74923d98b6c870ad","md5":"f7eee8523796c93aad4e6c21a6d4244d","sha256":"8d624b9936694bd9d44ec792fac81a8fb9e013743a3e62d2ec94973bcc9be6ef"},"downloads":-1,"filename":"command_runner-0.6.0-py3-none-any.whl","has_sig":false,"md5_digest":"f7eee8523796c93aad4e6c21a6d4244d","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.7","size":11688,"upload_time":"2020-12-22T11:28:43","upload_time_iso_8601":"2020-12-22T11:28:43.871665Z","url":"https://files.pythonhosted.org/packages/57/e9/1b4e571710f7df5e01afd0d522f79646f51e74d2cc1a74923d98b6c870ad/command_runner-0.6.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"2c18dfa37ba1fe2eb9166cfd21620e45f6ed8d23c4e2f08cac481e61f5219730","md5":"b69ddab0aac789531d274d4c198c31cd","sha256":"85b88aeb5556946753a2fc902e600595de76d59249d23570cc004347c9f1c4c8"},"downloads":-1,"filename":"command_runner-0.6.0.tar.gz","has_sig":false,"md5_digest":"b69ddab0aac789531d274d4c198c31cd","packagetype":"sdist","python_version":"source","requires_python":">=2.7","size":10745,"upload_time":"2020-12-22T11:28:45","upload_time_iso_8601":"2020-12-22T11:28:45.134881Z","url":"https://files.pythonhosted.org/packages/2c/18/dfa37ba1fe2eb9166cfd21620e45f6ed8d23c4e2f08cac481e61f5219730/command_runner-0.6.0.tar.gz","yanked":false,"yanked_reason":null}],"0.6.1":[{"comment_text":"","digests":{"blake2b_256":"5dbd00741f60a5635bb4535a8c7249d290793cb099bafa080713da45969ac03a","md5":"26ae2f396acf229a5c6a86b214ac76ba","sha256":"08a657c8f661c2edf7e9e90d14332ec1d01a95a7b52e2c7502d194c46c7653f5"},"downloads":-1,"filename":"command_runner-0.6.1-py3-none-any.whl","has_sig":false,"md5_digest":"26ae2f396acf229a5c6a86b214ac76ba","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":9456,"upload_time":"2021-02-22T11:31:20","upload_time_iso_8601":"2021-02-22T11:31:20.504003Z","url":"https://files.pythonhosted.org/packages/5d/bd/00741f60a5635bb4535a8c7249d290793cb099bafa080713da45969ac03a/command_runner-0.6.1-py3-none-any.whl","yanked":true,"yanked_reason":"Project description empty ;("},{"comment_text":"","digests":{"blake2b_256":"0e3971c5bb3d87cc322e384cdb548b04e5a327ea04f291c6d253b4eb9ded55ab","md5":"60b887a910798419aadafab4207b10bd","sha256":"bde1f657f76680eb22d6d6f056900519b8e990763ed749152a0db4bf01737733"},"downloads":-1,"filename":"command_runner-0.6.1.tar.gz","has_sig":false,"md5_digest":"60b887a910798419aadafab4207b10bd","packagetype":"sdist","python_version":"source","requires_python":null,"size":13395,"upload_time":"2021-02-22T11:36:17","upload_time_iso_8601":"2021-02-22T11:36:17.378783Z","url":"https://files.pythonhosted.org/packages/0e/39/71c5bb3d87cc322e384cdb548b04e5a327ea04f291c6d253b4eb9ded55ab/command_runner-0.6.1.tar.gz","yanked":true,"yanked_reason":"Project description empty ;("}],"0.6.2":[{"comment_text":"","digests":{"blake2b_256":"15851157ee2684b31e16e6204e2a7d21b8cec0099bf62db1b3fb65c5eed56995","md5":"338e4f29b19929f3906849c333e30039","sha256":"ff87ca807c023e1d3e7377194ad344ea3b7b75d6ce92124955df2513f0f789fe"},"downloads":-1,"filename":"command_runner-0.6.2-py3-none-any.whl","has_sig":false,"md5_digest":"338e4f29b19929f3906849c333e30039","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.7","size":12012,"upload_time":"2021-02-22T11:41:40","upload_time_iso_8601":"2021-02-22T11:41:40.385590Z","url":"https://files.pythonhosted.org/packages/15/85/1157ee2684b31e16e6204e2a7d21b8cec0099bf62db1b3fb65c5eed56995/command_runner-0.6.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"9592fb84aa12bc2ca1cc9b33f753a2b9e48f09f7b08b4eef760031f8e5fdab45","md5":"829a868d4bfa331eac70047b350d099d","sha256":"5d276926c98697305f7843eb3ec37443c351ced1fd9b16eceff3b1fee050260b"},"downloads":-1,"filename":"command_runner-0.6.2.tar.gz","has_sig":false,"md5_digest":"829a868d4bfa331eac70047b350d099d","packagetype":"sdist","python_version":"source","requires_python":">=2.7","size":13380,"upload_time":"2021-02-22T11:41:41","upload_time_iso_8601":"2021-02-22T11:41:41.250367Z","url":"https://files.pythonhosted.org/packages/95/92/fb84aa12bc2ca1cc9b33f753a2b9e48f09f7b08b4eef760031f8e5fdab45/command_runner-0.6.2.tar.gz","yanked":false,"yanked_reason":null}],"0.6.3":[{"comment_text":"","digests":{"blake2b_256":"6ad8f3e0dabadd9891ca2d88c630f0e92526e05db914e25f779aec9472e3c2d9","md5":"68e0fb7e13750cb49555393a065197e3","sha256":"243edb87a3eaa5ed1cb7651b8aed82dd92d185844df6ef7506b5a40028446c2b"},"downloads":-1,"filename":"command_runner-0.6.3-py3-none-any.whl","has_sig":false,"md5_digest":"68e0fb7e13750cb49555393a065197e3","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.7","size":12018,"upload_time":"2021-03-15T15:28:07","upload_time_iso_8601":"2021-03-15T15:28:07.002531Z","url":"https://files.pythonhosted.org/packages/6a/d8/f3e0dabadd9891ca2d88c630f0e92526e05db914e25f779aec9472e3c2d9/command_runner-0.6.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4bc2895ec4dd16f03c8c1d0018ff294a243c401042ad241e68b8aa45ec0c31aa","md5":"79ebb1307e0cb0b5645ce0d2bcea843a","sha256":"1be100ac52f691d82c5eee712a4974d0685b50c3c3834bbcdaaae9303de45d6e"},"downloads":-1,"filename":"command_runner-0.6.3.tar.gz","has_sig":false,"md5_digest":"79ebb1307e0cb0b5645ce0d2bcea843a","packagetype":"sdist","python_version":"source","requires_python":">=2.7","size":13494,"upload_time":"2021-03-15T15:28:08","upload_time_iso_8601":"2021-03-15T15:28:08.061489Z","url":"https://files.pythonhosted.org/packages/4b/c2/895ec4dd16f03c8c1d0018ff294a243c401042ad241e68b8aa45ec0c31aa/command_runner-0.6.3.tar.gz","yanked":false,"yanked_reason":null}],"0.6.4":[{"comment_text":"","digests":{"blake2b_256":"399253d8d60f96550dbd791c3f39e0716c3a6af8fad214063f59564b0875d062","md5":"74d6b4dda1ba0dc3ae192c7f137238b1","sha256":"8bfb648b53c329312bdb27952626f20ade54f28e59df38835a8e51d8c9c6c938"},"downloads":-1,"filename":"command_runner-0.6.4-py3-none-any.whl","has_sig":false,"md5_digest":"74d6b4dda1ba0dc3ae192c7f137238b1","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.7","size":12132,"upload_time":"2021-06-03T13:12:08","upload_time_iso_8601":"2021-06-03T13:12:08.328703Z","url":"https://files.pythonhosted.org/packages/39/92/53d8d60f96550dbd791c3f39e0716c3a6af8fad214063f59564b0875d062/command_runner-0.6.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"79fdde2d0f43336e4c4c0c9e1299cce6fd425c17991e297f2e45e99fbe6e8609","md5":"17821ba696a7d5cc08aba19ae95b1abd","sha256":"59416495cf7a89182c931c3db177f855a539d80d300f0c70d5adf1da8977683f"},"downloads":-1,"filename":"command_runner-0.6.4.tar.gz","has_sig":false,"md5_digest":"17821ba696a7d5cc08aba19ae95b1abd","packagetype":"sdist","python_version":"source","requires_python":">=2.7","size":13611,"upload_time":"2021-06-03T13:12:09","upload_time_iso_8601":"2021-06-03T13:12:09.682313Z","url":"https://files.pythonhosted.org/packages/79/fd/de2d0f43336e4c4c0c9e1299cce6fd425c17991e297f2e45e99fbe6e8609/command_runner-0.6.4.tar.gz","yanked":false,"yanked_reason":null}],"0.7.0":[{"comment_text":"","digests":{"blake2b_256":"51834677e4887ebfcd093ade84cb9d1d79d3bb8fd1a36655240438ba7310e63e","md5":"43dc24e86143730a8db9dcf7806ba496","sha256":"dab61d4c9e79451e1f50f5caf780a495430e741450bd40f8dc15a49cfaea812f"},"downloads":-1,"filename":"command_runner-0.7.0-py3-none-any.whl","has_sig":false,"md5_digest":"43dc24e86143730a8db9dcf7806ba496","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.7","size":12497,"upload_time":"2021-07-02T10:02:27","upload_time_iso_8601":"2021-07-02T10:02:27.061308Z","url":"https://files.pythonhosted.org/packages/51/83/4677e4887ebfcd093ade84cb9d1d79d3bb8fd1a36655240438ba7310e63e/command_runner-0.7.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d12b4f51f34feb6f10704b3a749bc4a780d196d974835c432e31411249533024","md5":"7cdff17dbf6994a518b8a25c65c64e26","sha256":"8039fba98be89ae1abf18b920c76d186353f11cf33454ef9bc7e0e83c7f91945"},"downloads":-1,"filename":"command_runner-0.7.0.tar.gz","has_sig":false,"md5_digest":"7cdff17dbf6994a518b8a25c65c64e26","packagetype":"sdist","python_version":"source","requires_python":">=2.7","size":13969,"upload_time":"2021-07-02T10:02:28","upload_time_iso_8601":"2021-07-02T10:02:28.166094Z","url":"https://files.pythonhosted.org/packages/d1/2b/4f51f34feb6f10704b3a749bc4a780d196d974835c432e31411249533024/command_runner-0.7.0.tar.gz","yanked":false,"yanked_reason":null}],"1.2.0":[{"comment_text":"","digests":{"blake2b_256":"ec98d7edd81945d528d25ea4429f121c3e48e560ef6835aec98dec1ecaa9a6e5","md5":"54f23c7cc66fb84195ffc7f568a2c680","sha256":"42e834872ffb5b5611ac07321d4e0ed096120378d5e472917925218369f46bef"},"downloads":-1,"filename":"command_runner-1.2.0-py3-none-any.whl","has_sig":false,"md5_digest":"54f23c7cc66fb84195ffc7f568a2c680","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.7","size":17455,"upload_time":"2021-09-07T17:14:21","upload_time_iso_8601":"2021-09-07T17:14:21.430731Z","url":"https://files.pythonhosted.org/packages/ec/98/d7edd81945d528d25ea4429f121c3e48e560ef6835aec98dec1ecaa9a6e5/command_runner-1.2.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"2e72cbffd23cb5b39d5492318091f422ba1b1aaf15944622854e38bd0dc7cbba","md5":"a62a687b3fa2876cc5904e4ccb8eeb34","sha256":"967a5699764c8c58bfbc610513b5d01e056181912714a36cc1c54a68219512be"},"downloads":-1,"filename":"command_runner-1.2.0.tar.gz","has_sig":false,"md5_digest":"a62a687b3fa2876cc5904e4ccb8eeb34","packagetype":"sdist","python_version":"source","requires_python":">=2.7","size":19540,"upload_time":"2021-09-07T17:14:22","upload_time_iso_8601":"2021-09-07T17:14:22.777994Z","url":"https://files.pythonhosted.org/packages/2e/72/cbffd23cb5b39d5492318091f422ba1b1aaf15944622854e38bd0dc7cbba/command_runner-1.2.0.tar.gz","yanked":false,"yanked_reason":null}],"1.2.1":[{"comment_text":"","digests":{"blake2b_256":"71e9773380fdba4beffe360dde941f9ff829a82d1671e19fa70d774e023f056c","md5":"d5c75d4109c7b45807a86a787e5d450b","sha256":"e0f82f4fd76a2657deb9c3b63acdb4319145edebc000d003e31776bede7b980a"},"downloads":-1,"filename":"command_runner-1.2.1-py3-none-any.whl","has_sig":false,"md5_digest":"d5c75d4109c7b45807a86a787e5d450b","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.7","size":17829,"upload_time":"2021-09-09T19:51:27","upload_time_iso_8601":"2021-09-09T19:51:27.562523Z","url":"https://files.pythonhosted.org/packages/71/e9/773380fdba4beffe360dde941f9ff829a82d1671e19fa70d774e023f056c/command_runner-1.2.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b971032dc8349aedfe3ea3767243e6b8b4ab1a533afef4d2907cb8b4925b2742","md5":"52da042240ade2a9418379e3f642f214","sha256":"be083f5970aceb45b0184735c77c88b1c4b38ad8eb21485b63d24aeb3b4e49de"},"downloads":-1,"filename":"command_runner-1.2.1.tar.gz","has_sig":false,"md5_digest":"52da042240ade2a9418379e3f642f214","packagetype":"sdist","python_version":"source","requires_python":">=2.7","size":19853,"upload_time":"2021-09-09T19:51:29","upload_time_iso_8601":"2021-09-09T19:51:29.238051Z","url":"https://files.pythonhosted.org/packages/b9/71/032dc8349aedfe3ea3767243e6b8b4ab1a533afef4d2907cb8b4925b2742/command_runner-1.2.1.tar.gz","yanked":false,"yanked_reason":null}],"1.3.0":[{"comment_text":"","digests":{"blake2b_256":"6f777c6f201fd83365c7e02cc9c2773f9fe8803a9a9e5997eccfbe6773c1fa8b","md5":"9f0661dfb25c70c14b3ccff68ceca765","sha256":"0d5efe68ebcf76eaeacbd0a8e417a4a0c9c730c16f6cd4bd49efa97fd4193b9b"},"downloads":-1,"filename":"command_runner-1.3.0-py2.7.egg","has_sig":false,"md5_digest":"9f0661dfb25c70c14b3ccff68ceca765","packagetype":"bdist_egg","python_version":"2.7","requires_python":">=2.7","size":27929,"upload_time":"2022-04-16T14:16:43","upload_time_iso_8601":"2022-04-16T14:16:43.848282Z","url":"https://files.pythonhosted.org/packages/6f/77/7c6f201fd83365c7e02cc9c2773f9fe8803a9a9e5997eccfbe6773c1fa8b/command_runner-1.3.0-py2.7.egg","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e1931e38da0b691435caa09378d6beaf6834986392b931c053fc8927085aa571","md5":"1b7633827c459d4423859ac64d903781","sha256":"7d6000fdd149e2e6b010e1ffcb470342442904d869b7219e5767d8935c8c1b2a"},"downloads":-1,"filename":"command_runner-1.3.0-py3-none-any.whl","has_sig":false,"md5_digest":"1b7633827c459d4423859ac64d903781","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.7","size":17886,"upload_time":"2021-10-14T13:36:21","upload_time_iso_8601":"2021-10-14T13:36:21.409123Z","url":"https://files.pythonhosted.org/packages/e1/93/1e38da0b691435caa09378d6beaf6834986392b931c053fc8927085aa571/command_runner-1.3.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e4933be1636bc0213d30433149a30d97a9e98e8b0a65906dcf011600010be23d","md5":"41a8aa471cda932de4951bcb685ee635","sha256":"d76c68d25bfd7fa089de82e1de03f72e2adbf3689aa2350a77b6fb68014665da"},"downloads":-1,"filename":"command_runner-1.3.0.tar.gz","has_sig":false,"md5_digest":"41a8aa471cda932de4951bcb685ee635","packagetype":"sdist","python_version":"source","requires_python":">=2.7","size":20857,"upload_time":"2021-10-14T13:36:23","upload_time_iso_8601":"2021-10-14T13:36:23.301062Z","url":"https://files.pythonhosted.org/packages/e4/93/3be1636bc0213d30433149a30d97a9e98e8b0a65906dcf011600010be23d/command_runner-1.3.0.tar.gz","yanked":false,"yanked_reason":null}],"1.3.1":[{"comment_text":"","digests":{"blake2b_256":"ef9b37950ac3ff0f5265d26ef6fa8c17dd2d578cc1dd0c86fb3b71b1cac76c3e","md5":"04b98110e61cc713d8deb13fe01d11c5","sha256":"2dbb92bfe8d8e557db48e166f1f309ab066a5b11e3f3d7690a4369c5ffa4605a"},"downloads":-1,"filename":"command_runner-1.3.1-py3-none-any.whl","has_sig":false,"md5_digest":"04b98110e61cc713d8deb13fe01d11c5","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.7","size":17908,"upload_time":"2022-04-16T14:16:42","upload_time_iso_8601":"2022-04-16T14:16:42.405249Z","url":"https://files.pythonhosted.org/packages/ef/9b/37950ac3ff0f5265d26ef6fa8c17dd2d578cc1dd0c86fb3b71b1cac76c3e/command_runner-1.3.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f61dd0c17f11de1ed36e10f188503c522ba2c5bdf1d01ae75570e31136f0f29a","md5":"eb76bcd9504ab4662ab4373ecb66d994","sha256":"4d02518d3e8c211267a0f3fff9aedd77faea1574b0d08d89718ba0c1b2d1fe0c"},"downloads":-1,"filename":"command_runner-1.3.1.tar.gz","has_sig":false,"md5_digest":"eb76bcd9504ab4662ab4373ecb66d994","packagetype":"sdist","python_version":"source","requires_python":">=2.7","size":20962,"upload_time":"2022-04-16T14:16:45","upload_time_iso_8601":"2022-04-16T14:16:45.171737Z","url":"https://files.pythonhosted.org/packages/f6/1d/d0c17f11de1ed36e10f188503c522ba2c5bdf1d01ae75570e31136f0f29a/command_runner-1.3.1.tar.gz","yanked":false,"yanked_reason":null}],"1.4.0":[{"comment_text":"","digests":{"blake2b_256":"337d79593d66147c2345c5b84dcda73cae10c2613d731eb5e340defc7115d4d2","md5":"6ccc0fc2355b7b0eb5c0619f2e1029e7","sha256":"6d98efc5d0ffc8a1a7a831f653ae833fe5f1496ebb3236694784ac2e4553e5f1"},"downloads":-1,"filename":"command_runner-1.4.0-py3-none-any.whl","has_sig":false,"md5_digest":"6ccc0fc2355b7b0eb5c0619f2e1029e7","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.7","size":22775,"upload_time":"2022-05-30T14:15:00","upload_time_iso_8601":"2022-05-30T14:15:00.196571Z","url":"https://files.pythonhosted.org/packages/33/7d/79593d66147c2345c5b84dcda73cae10c2613d731eb5e340defc7115d4d2/command_runner-1.4.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"fddce84a729cd99750029a9486291a00e4a255eb796a512f61cb63eef321f3b9","md5":"9b6b03a89b25b745e51abff104afa9b3","sha256":"9fe14403e52b875de4260bf763fe670595f73fdc9a076806254f494fadad9b21"},"downloads":-1,"filename":"command_runner-1.4.0.tar.gz","has_sig":false,"md5_digest":"9b6b03a89b25b745e51abff104afa9b3","packagetype":"sdist","python_version":"source","requires_python":">=2.7","size":29338,"upload_time":"2022-05-30T14:15:01","upload_time_iso_8601":"2022-05-30T14:15:01.870764Z","url":"https://files.pythonhosted.org/packages/fd/dc/e84a729cd99750029a9486291a00e4a255eb796a512f61cb63eef321f3b9/command_runner-1.4.0.tar.gz","yanked":false,"yanked_reason":null}],"1.4.1":[{"comment_text":"","digests":{"blake2b_256":"15c1cbbebfb3a74924323851577eb7006b1d2f8dbaa1e6a8f53f272c01fab64b","md5":"abee4a73fd02bd42718789de62f02a4d","sha256":"6ffae9329a73538037b9317406c3112299c1f8aa3441d2cb89c5c8135a440e74"},"downloads":-1,"filename":"command_runner-1.4.1-py3-none-any.whl","has_sig":false,"md5_digest":"abee4a73fd02bd42718789de62f02a4d","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.7","size":22969,"upload_time":"2023-01-10T11:22:57","upload_time_iso_8601":"2023-01-10T11:22:57.647074Z","url":"https://files.pythonhosted.org/packages/15/c1/cbbebfb3a74924323851577eb7006b1d2f8dbaa1e6a8f53f272c01fab64b/command_runner-1.4.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"16d5f460225fa623c438fbb3146de7f605e78553cff8052095151b0eca39a01c","md5":"4b0f3a15c7f46f28244778d91a0d7e44","sha256":"bbcf7c502ba7cfe6b93ed8c2d2857d45db16ef072608f4130e0ebe957f9a8b55"},"downloads":-1,"filename":"command_runner-1.4.1.tar.gz","has_sig":false,"md5_digest":"4b0f3a15c7f46f28244778d91a0d7e44","packagetype":"sdist","python_version":"source","requires_python":">=2.7","size":29915,"upload_time":"2023-01-10T11:22:59","upload_time_iso_8601":"2023-01-10T11:22:59.579544Z","url":"https://files.pythonhosted.org/packages/16/d5/f460225fa623c438fbb3146de7f605e78553cff8052095151b0eca39a01c/command_runner-1.4.1.tar.gz","yanked":false,"yanked_reason":null}],"1.5.0":[{"comment_text":"","digests":{"blake2b_256":"d52c441ea9692009b0cdd75458c47ea1e183f0a0a53735be4d9c373b3d951e5b","md5":"ce84de30fbd8f1a6776a192df54c1f66","sha256":"ceae4f2ca7b9814cff91d46bd6aed745f3ddc20fece1f77a652aed6e28aad2b9"},"downloads":-1,"filename":"command_runner-1.5.0-py3-none-any.whl","has_sig":false,"md5_digest":"ce84de30fbd8f1a6776a192df54c1f66","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.7","size":24287,"upload_time":"2023-01-26T11:50:38","upload_time_iso_8601":"2023-01-26T11:50:38.625017Z","url":"https://files.pythonhosted.org/packages/d5/2c/441ea9692009b0cdd75458c47ea1e183f0a0a53735be4d9c373b3d951e5b/command_runner-1.5.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"38525eb93d67e1ec6ee947b265401056cd9aa191d0522213bf411b6260655c19","md5":"6297c2aef038a85892584559266c75e1","sha256":"5080f32cb226ebd5b9de3bd2f4cd8b55c94cf8ea916262edbee5d502fe7896d8"},"downloads":-1,"filename":"command_runner-1.5.0.tar.gz","has_sig":false,"md5_digest":"6297c2aef038a85892584559266c75e1","packagetype":"sdist","python_version":"source","requires_python":">=2.7","size":31590,"upload_time":"2023-01-26T11:50:40","upload_time_iso_8601":"2023-01-26T11:50:40.341024Z","url":"https://files.pythonhosted.org/packages/38/52/5eb93d67e1ec6ee947b265401056cd9aa191d0522213bf411b6260655c19/command_runner-1.5.0.tar.gz","yanked":false,"yanked_reason":null}],"1.5.1":[{"comment_text":"","digests":{"blake2b_256":"ab3f63f7998d101020c755f71a365c76d3780343df422c55f9b27744a27625d4","md5":"e21565a684d181f5155b7a9bb3882e04","sha256":"ba11f7787eac19e9e11df4bd68c84ebc27be3bc649ee7e0396470c54637f76b3"},"downloads":-1,"filename":"command_runner-1.5.1-py3-none-any.whl","has_sig":false,"md5_digest":"e21565a684d181f5155b7a9bb3882e04","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.7","size":24444,"upload_time":"2023-12-11T14:29:59","upload_time_iso_8601":"2023-12-11T14:29:59.807944Z","url":"https://files.pythonhosted.org/packages/ab/3f/63f7998d101020c755f71a365c76d3780343df422c55f9b27744a27625d4/command_runner-1.5.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"00e29b4f708fab941cf8cbc1b0c6e20d97b21cad6c384eff0c107b015cdb995f","md5":"db5f97417761b16d4e84efbd073dfd36","sha256":"7c1d6b2126df6024628ab99c0e040e652d3c65810aae8353440ba6de4d37407e"},"downloads":-1,"filename":"command_runner-1.5.1.tar.gz","has_sig":false,"md5_digest":"db5f97417761b16d4e84efbd073dfd36","packagetype":"sdist","python_version":"source","requires_python":">=2.7","size":37673,"upload_time":"2023-12-11T14:30:02","upload_time_iso_8601":"2023-12-11T14:30:02.991701Z","url":"https://files.pythonhosted.org/packages/00/e2/9b4f708fab941cf8cbc1b0c6e20d97b21cad6c384eff0c107b015cdb995f/command_runner-1.5.1.tar.gz","yanked":false,"yanked_reason":null}],"1.5.2":[{"comment_text":"","digests":{"blake2b_256":"cbf57e946e7bec2056eac9347688bfccc00c0484df498938e2eeda1849253e4f","md5":"bca90ca77bbe18999b5c06ca79bd8c7f","sha256":"7ddd86fd87113d19b29cd350a1311e45127e56d4404090e689596e6108b3eb57"},"downloads":-1,"filename":"command_runner-1.5.2-py3-none-any.whl","has_sig":false,"md5_digest":"bca90ca77bbe18999b5c06ca79bd8c7f","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.7","size":24720,"upload_time":"2023-12-28T18:17:44","upload_time_iso_8601":"2023-12-28T18:17:44.869940Z","url":"https://files.pythonhosted.org/packages/cb/f5/7e946e7bec2056eac9347688bfccc00c0484df498938e2eeda1849253e4f/command_runner-1.5.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"9b9481d62bc3d764baae7869d8cc7a3389c43a593265f3704d6d304984c271d4","md5":"accfff4a788f49381ee042af88494ece","sha256":"8f34dc9310d0c58f2722f404de5d114dfa4e1fc455232952dd83778b3afb36cf"},"downloads":-1,"filename":"command_runner-1.5.2.tar.gz","has_sig":false,"md5_digest":"accfff4a788f49381ee042af88494ece","packagetype":"sdist","python_version":"source","requires_python":">=2.7","size":38396,"upload_time":"2023-12-28T18:17:47","upload_time_iso_8601":"2023-12-28T18:17:47.466318Z","url":"https://files.pythonhosted.org/packages/9b/94/81d62bc3d764baae7869d8cc7a3389c43a593265f3704d6d304984c271d4/command_runner-1.5.2.tar.gz","yanked":false,"yanked_reason":null}],"1.6.0":[{"comment_text":"","digests":{"blake2b_256":"edf08440eeddd9f9bc59fa07f0ede2a33c46835d4c67fd64fe9e19d9671b12d9","md5":"d1abbc94a5aef7844411407b372d7c5a","sha256":"59f59293b0ba2f8e862a7558ea616b4b157ac7da294be70363ad9082d91f537e"},"downloads":-1,"filename":"command_runner-1.6.0-py3-none-any.whl","has_sig":false,"md5_digest":"d1abbc94a5aef7844411407b372d7c5a","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.7","size":24974,"upload_time":"2024-01-09T19:45:53","upload_time_iso_8601":"2024-01-09T19:45:53.962516Z","url":"https://files.pythonhosted.org/packages/ed/f0/8440eeddd9f9bc59fa07f0ede2a33c46835d4c67fd64fe9e19d9671b12d9/command_runner-1.6.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"fb38f2a02537b014876d9d674a2839fdacfbacfd433ba154fe7c4e93562c667b","md5":"e724f6455b1ef58efe4b0689829ed30d","sha256":"973b7552186b3ea42b04ab1198f86a86d3887c5942b5e42aa3ab19eab3aeb740"},"downloads":-1,"filename":"command_runner-1.6.0.tar.gz","has_sig":false,"md5_digest":"e724f6455b1ef58efe4b0689829ed30d","packagetype":"sdist","python_version":"source","requires_python":">=2.7","size":38917,"upload_time":"2024-01-09T19:45:58","upload_time_iso_8601":"2024-01-09T19:45:58.433948Z","url":"https://files.pythonhosted.org/packages/fb/38/f2a02537b014876d9d674a2839fdacfbacfd433ba154fe7c4e93562c667b/command_runner-1.6.0.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"edf08440eeddd9f9bc59fa07f0ede2a33c46835d4c67fd64fe9e19d9671b12d9","md5":"d1abbc94a5aef7844411407b372d7c5a","sha256":"59f59293b0ba2f8e862a7558ea616b4b157ac7da294be70363ad9082d91f537e"},"downloads":-1,"filename":"command_runner-1.6.0-py3-none-any.whl","has_sig":false,"md5_digest":"d1abbc94a5aef7844411407b372d7c5a","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=2.7","size":24974,"upload_time":"2024-01-09T19:45:53","upload_time_iso_8601":"2024-01-09T19:45:53.962516Z","url":"https://files.pythonhosted.org/packages/ed/f0/8440eeddd9f9bc59fa07f0ede2a33c46835d4c67fd64fe9e19d9671b12d9/command_runner-1.6.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"fb38f2a02537b014876d9d674a2839fdacfbacfd433ba154fe7c4e93562c667b","md5":"e724f6455b1ef58efe4b0689829ed30d","sha256":"973b7552186b3ea42b04ab1198f86a86d3887c5942b5e42aa3ab19eab3aeb740"},"downloads":-1,"filename":"command_runner-1.6.0.tar.gz","has_sig":false,"md5_digest":"e724f6455b1ef58efe4b0689829ed30d","packagetype":"sdist","python_version":"source","requires_python":">=2.7","size":38917,"upload_time":"2024-01-09T19:45:58","upload_time_iso_8601":"2024-01-09T19:45:58.433948Z","url":"https://files.pythonhosted.org/packages/fb/38/f2a02537b014876d9d674a2839fdacfbacfd433ba154fe7c4e93562c667b/command_runner-1.6.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
