{"info":{"author":"Allen Barker","author_email":"Allen.L.Barker@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Intended Audience :: End Users/Desktop","License :: OSI Approved :: GNU General Public License (GPL)","Operating System :: Microsoft :: Windows","Operating System :: POSIX","Operating System :: Unix","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: Implementation :: CPython","Programming Language :: Python :: Implementation :: PyPy","Topic :: Utilities"],"description":"==============\npdfCropMargins\n==============\n\nThe pdfCropMargins program is a command-line application to automatically crop\nthe margins of PDF files.  Cropping the margins can make it easier to read the\npages of a PDF document -- whether the document is printed or displayed on a\nscreen -- because the display fonts are larger.  This program is similar to the\nPerl script pdfcrop except with many more options.\n\nFeatures\n========\n\n- Automatically detects the margins and can crop a given percentage of them.\n- Can crop all the pages to the same size to give a uniform appearance (such as\n  in two-up).\n- Works on Linux, Windows, Cygwin, and OS X/Darwin.\n- Has an optional graphical user interface (GUI) for interactive cropping.\n- Renders and analyzes page images to find the bounding boxes, which allows it\n  to deal with noisy scanned PDFs.\n- A rudimentary 'undo' capability is implemented by default. \n- Can crop pages uniformly based on the nth smallest crop values, which helps\n  with noisy images or documents where a few pages have unwanted markings in\n  their margins.\n- Can automatically run a document previewer on the output file.\n- The format of automatically-generated output-file names is easily\n  modifiable.\n- Preserves document catalog information such as outlines if possible.\n- Crops rotated pages according to their appearance in the document viewer.\n- Can deal with at least simple cases of password-encrypted files.\n- Works with either MuPDF, the pdftoppm program, or the Ghostscript program to\n  find the bounding boxes.\n- Can automatically apply a Ghostscript repair operation to attempt to fix\n  corrupt PDF files.\n\nThis GIF shows the optional GUI, before and after cropping a document:\n\n.. image:: https://user-images.githubusercontent.com/1791335/63413846-9c9e3400-c3c8-11e9-90f5-6e429ae2d74b.gif\n    :width: 450px\n    :align: center\n    :alt: [GIF of pdfCropMargins]\n\nWhat's New\n==========\n\nSee the `CHANGELOG\n<https://github.com/abarker/pdfCropMargins/blob/master/CHANGELOG.rst>`_ for\nrecent changes and new features.\n\n* Version 2.1.2 has new options to center text on the pages after cropping.\n  They are ``--centerText``,  ``--centerTextHoriz``, ``--centerTextVert``,  and\n  ``--centeringStrict``.\n\n* New in version 2.0.1, the option ``--setSamePageSize`` (``-ssp``) allows a\n  custom page box size to be passed in rather than having the program calculate\n  the largest containing box size.\n\nInstalling \n==========\n\nThe easiest way to install the pdfCropMargins program is by using pip.\n\nThe basic features work out of the box, some of the options require either the\nexternal program pdftoppm or Ghostscript.  For information on installing those\nprograms on Linux and Windows, see: `Installing pdftoppm and/or Ghostscript\n<https://github.com/abarker/pdfCropMargins/tree/master/doc/installing_pdftoppm_and_ghostscript.rst>`_\n.\n\nLinux/Ubuntu\n------------\n\nIf you are installing via pip with the ``--user`` option be sure\n``$HOME/.local/bin`` is in your system ``PATH``.  (To install system-wide\nwithout ``--user`` the ``pip3`` command below would need to be run with\n``sudo``.)\n\n.. code-block:: sh\n\n   sudo apt install python3-tk\n   sudo apt install ghostscript poppler-utils # Optional, for ghostscript and pdftoppm.\n   pip3 install pdfCropMargins --user --upgrade\n\n**Troubleshooting:** If you have problems with the install of PyMuPDF, the\nfirst thing to try is to upgrade your version of the pip program and then\nretry:\n\n.. code-block:: sh\n\n   pip3 install pip --upgrade --user\n\nIf you still get an error \"Failed building wheel for pymupdf\" with the GUI\ninstall you can try forcing a binary install of PyMuPDF:\n\n.. code-block:: sh\n\n   pip3 install pdfCropMargins --user --upgrade --only-binary pymupdf\n\nWindows\n-------\n\nThe install command is:\n\n.. code-block:: sh\n\n   pip install pdfCropMargins --upgrade\n\nThe ``pip`` program should be automatically installed along with Python.  If\nyou cannot find the pip executable you can usually run it like this:\n\n.. code-block:: sh\n\n   python -m pip <arguments-to-pip>\n\nNote that on some Windows installs the executable for Python is ``py`` rather\nthan ``python``.\n\nIn order for the command ``pdfcropmargins`` to work from the command line the\nPython ``bin`` directory must be on the Windows ``Path``.  The system-wide\nPython ``bin`` directory should already be on the path if you checked the box\nto modify ``Path`` when you installed Python; otherwise it should be added.\n(Note that if you install with the ``--user`` option to pip then you need to be\nsure that the *local* Python ``bin`` directory is in the Windows ``Path``.)\n\nRunning\n=======\n\nThe program can be run 1) from the command line, 2) from the command line with\na GUI, 3) from a Python program, or 3) from the source repo.\n\nRunning from the command line\n-----------------------------\n\nAfter installation via pip the program can be run with either the command\n``pdfcropmargins`` or the command ``pdf-crop-margins``.  For example:\n\n.. code-block:: sh\n\n   pdfcropmargins -v -s -u your-file.pdf\n\nThat command prints verbose output, forces all pages to be the same size\n(``-s``) and then crops each page by the same amount (``-u``) for a uniform\nappearance, retaining the default of 10% of the margins.  To run the\nsame command with the GUI for fine-tuning, use:\n\n.. code-block:: sh\n\n   pdfcropmargins -v -s -u -gui your-file.pdf\n\nFor help and to see the many command-line options that are available, run:\n\n.. code-block:: sh\n\n   pdfcropmargins -h | more\n\nThe full output of that command is also listed below, at the bottom of this\npage.  On Windows you may need to explicitly put the Python distribution's\n``Scripts`` directory into your environment ``PATH`` in order to avoid having\nto use the full pathname.\n\nRunning with the GUI\n--------------------\n\nTo run the GUI, assuming that version of pdfCropMargins has been installed,\njust pass the ``-gui`` flag in addition to any other flags.  The program is\nstill a command-line application, and still respects all the flags, but the GUI\nlets you fine-tune the values of some of the command-line arguments such as the\npercent to crop, etc.  The output filenames, etc., are all the same as for the\ncommand-line version.  Options modifiable from the GUI are initially set to any\nvalues passed in on the command line.\n\nThe graphical display shows the effect of each crop when you hit the 'Crop'\nbutton.  Multiple cropping calls for the same document tend to be faster\nbecause the PDF pages usually only need to be rendered to images one time.\n\nPython interface\n----------------\n\nThe program can also be called from a user's Python program (when the\n``pdfCropMargins`` package is discoverable in the Python path).  Just import\nthe ``crop`` function and then call it with a list containing the usual\ncommand-line arguments as separate items.  For example:\n  \n.. code-block:: python\n\n   from pdfCropMargins import crop\n   crop([\"-p\", \"20\", \"-u\", \"-s\", \"paper1.pdf\"])\n   crop([\"-p\", \"0\", \"-gui\", \"paper2.pdf\"])\n\nAny necessary exception handling should be performed by the calling code.  The\ncode may call ``sys.exit``, so checking for ``SystemExit`` or ``BaseException`` may\nbe required.\n\nThe ``crop`` function always returns four values, some of which may be set to\n``None``:\n\n* the output file path,\n\n* the exit code,\n\n* the text written to standard input,\n\n* the text written to standard output.\n\nIf the keyword argument ``string_io`` is set true (the default is false) then\nstandard output and standard error streams are temporarily redirected to\ncapture any output text as strings, which are returned as the final two\narguments.  Otherwise those values are set to ``None``.  The keyword argument\n``quiet`` implies the ``string_io`` argument, but does not echo anything to the\nterminal while the ``crop`` function runs.\n\nAn example usage:\n\n.. code-block:: python\n\n   output_doc_pathname, exit_code, stdout_str, stderr_str = crop(\n                            [\"-p4\", \"0\", \"10\", \"0\", \"10\", \"paper2.pdf\"],\n                            string_io=True, quiet=False)\n\nRunning from the source distribution\n------------------------------------\n\nThe pdfCropMargins program can be run directly from the source code directory\ntree, provided the dependencies are installed.  Just clone the repo and run the\nprogram ``pdfCropMargins.py`` located in the ``bin`` directory.\n\nTo pip install the program and its dependencies from the cloned repo rather\nthan from PyPI just go to the root of the source directory and run ``pip install .``\n(As usual, for code development use the ``-e`` option to make the code\neditable.)\n\nGetting good crops\n------------------\n\n* To diagnose unexpected crops, look at the pages with the smallest delta values,\n  as indicated in the verbose (``-v``) output or at the bottom of the GUI.\n  This tells you the page with the smallest crop amount for a margin.\n\n* Running without the ``-u`` or ``-s`` options will crop each page separately,\n  so you can see which pages might be causing problems (such as pages with\n  noise near the borders or margin text).\n\n* To get cropped pages all the same size be sure to use both ``-s`` to first\n  make pages the same size and ``-u`` to crop each page by the same amount.\n\n* Sometimes a small pre-crop is needed (``-ap`` or ``-ap4``) to get past small,\n  unwanted markings near the edges of pages.\n\nDocumentation\n=============\n\n.. In vim use this to get output:\n       :read !pdf-crop-margins -h\n\nTo see the documentation, run::\n\n   pdf-crop-margins -h | more\n\nThe output of that command follows::\n\n   Usage: pdfcropmargins [-h] [-o OUTFILE_PATH_OR_DIR] [-v] [-gui] [-p PCT]\n                         [-p4 PCT PCT PCT PCT] [-pt] [-a BP] [-a4 BP BP BP BP]\n                         [-cs] [-csm4 BP BP BP BP] [-ap BP] [-ap4 BP BP BP BP]\n                         [-u] [-m INT] [-m4 INT INT INT INT] [-mp INT] [-s]\n                         [-ms INT] [-ssp FLOAT FLOAT FLOAT FLOAT] [-e]\n                         [-g PAGESTR] [-c [d|m|p|gr|gb|o]] [-gs] [-gsr]\n                         [-t BYTEVAL] [-nb INT] [-ns INT] [-x DPI] [-y DPI]\n                         [-sr STR] [-gf INT] [-b [m|c|t|a|b]] [-f [m|c|t|a|b]]\n                         [-r] [-A] [-gsf] [-nc] [-pv PROG] [-mo] [-q] [-nco]\n                         [-pf] [-sc STR] [-su STR] [-ss STR] [-pw PASSWD] [-pc]\n                         [-khc] [-kvc] [-spr FLOAT:FLOAT]\n                         [-prw FLOAT FLOAT FLOAT FLOAT] [-ct] [-ch] [-cv] [-cst]\n                         [-i] [-pdl] [-gsp PATH] [-ppp PATH] [--version]\n                         [-wcdf FILEPATH]\n                         PDF_FILE [PDF_FILE ...]\n\n   Description:\n\n        A command-line application to crop the margins of PDF files. Cropping\n        the margins can make it easier to read the pages of a PDF document --\n        whether the document is printed or displayed on a screen -- because the\n        display fonts are larger. Margin-cropping is also sometimes useful when\n        a PDF file is included in a document as a graphic.\n\n        By default 10% of the existing margins will be retained; the rest will\n        be eliminated. There are many options which can be set, however,\n        including the percentage of existing margins to retain.\n\n        Here is a simple example of cropping a file named document.pdf and\n        writing the cropped output-document to a file named\n        croppedDocument.pdf:\n\n           pdfcropmargins document.pdf -o croppedDocument.pdf\n\n        The alias 'pdf-crop-margins' can also be used to launch the program in\n        place of 'pdfcropmargins'. If no destination is provided a filename\n        will be automatically generated from the name of the source file (see\n        below).\n\n        The pdfCropMargins program works by changing the page sizes which are\n        stored in the PDF file (and are interpreted by programs like Acrobat\n        Reader). Both the CropBox and the MediaBox are set to the newly-\n        computed cropped size. After this the view of the document in most\n        programs will be the new, cropped view.\n\n        In order to reduce the number of copies of a document which must be\n        saved, a basic '--restore' option is provided. When cropping a file not\n        produced by the pdfCropMargins program the default is to save the\n        intersections of the MediaBox and any existing CropBox for each page as\n        XML metadata. This saves the \"usual\" view of the original document in\n        programs like Acrobat Reader. Subsequent crops of a file produced by\n        pdfCropMargins do not by default alter the saved data. The restore\n        option simply copies the saved values back to the MediaBox and CropBox.\n        (Old versions of the program saved to the ArtBox; if these are cropped\n        again the data is migrated to XML metadata.)\n\n        Below are several examples using more of the command-line options, each\n        applied to an input file called doc.pdf. The output filename is\n        unspecified in most of these examples, so the program will\n        automatically generate the filename (or an output filename can always\n        be explicitly provided with '-o'):\n\n        1) Crop doc.pdf so that all the pages are set to the same size and the\n        cropping amount is uniform across all the pages (this gives a nice two-up\n        appearance).  The default of retaining 10% of the existing margins is\n        used.  Note carefully that '-u' only makes the amount to be cropped uniform\n        for each page; if the pages do not have the same size to begin with they\n        will not have the same size afterward unless the '-s' option is also used.\n\n           pdfcropmargins -u -s doc.pdf\n\n        2) Crop each page of doc.pdf individually (i.e., not uniformly), keeping 50%\n        of the existing margins.\n\n           pdfcropmargins -p 50 doc.pdf\n\n        3) Crop doc.pdf uniformly, keeping 50% of the left margin, 20% of the bottom\n        margin, 40% of the right margin, and 10% of the top margin.\n\n           pdfcropmargins -u -p4 50 20 40 10 doc.pdf\n\n        4) Crop doc.pdf retaining 20% of the margins, and then reduce the right page\n        margins only by an absolute 12 points.\n\n           pdfcropmargins -p 20 -a4 0 0 12 0 doc.pdf\n\n        5) Add a constant 5bp around the bare bounding boxes on all pages (note the\n        negative value passed to the `-a` option, which adds space rather than\n        removing it).\n\n           pdfcropmargins -p 0 -a -5 doc.pdf\n\n        6) Pre-crop the document by 5bp on each side before computing the bounding\n        boxes.  Then crop retaining 50% of the computed margins.  This can be\n        useful for difficult documents such as scanned books with page-edge noise\n        or other \"features\" inside the current margins.\n\n           pdfcropmargins -ap 5 -p 50 doc.pdf\n\n        7) Crop doc.pdf, re-naming the cropped output file to doc.pdf and backing\n        up the original file in a file named backup_doc.pdf.\n\n           pdfcropmargins -mo -pf -su \"backup\" doc.pdf\n\n        8) Crop the margins of doc.pdf to 120% of their original size, increasing\n        the margins.  Use Ghostscript to find the bounding boxes without explicit\n        rendering by pdfCropMargins.\n\n           pdfcropmargins -p 120 -c gb doc.pdf\n\n        9) Crop the margins of doc.pdf ignoring the 10 largest margins on each edge\n        (over the whole document).  This is especially good for noisy documents\n        where all the pages have very similar margins, or when you want to ignore\n        marginal annotations which only occur on a few pages.\n\n           pdfcropmargins -m 10 doc.pdf\n\n        10) Crop doc.pdf, launch the acroread viewer on the cropped output, and then\n        query as to whether or not to rename the cropped file doc.pdf and back up\n        the original file as doc_uncropped.pdf.\n\n           pdfcropmargins -mo -q doc.pdf\n\n        11) Crop pages 1-100 of doc.pdf, cropping all even pages uniformly and all odd\n        pages uniformly.\n\n           pdfcropmargins -g 1-100 -e doc.pdf\n\n        12) Try to restore doc.pdf to its original margins, assuming it was cropped\n        with pdfCropMargins previously.  Note that the default output filename is\n        still named doc_cropped.pdf, even though it is the recovered file.  Use the\n        '-mo' option to modify doc.pdf and backup the previous version.\n\n           pdfcropmargins -r doc.pdf\n\n        There are many different ways to use this program. After finding a\n        method which works well for a particular task or workflow pattern it is\n        often convenient to make a simple shell script (batch file) which\n        invokes the program with those particular options and settings. Simple\n        template scripts for Bash and Windows are packaged with the program, in\n        the bin directory. The program can also be called from a user's Python\n        program (when discoverable in the Python path) by using code such as\n\n           from pdfCropMargins import crop\n           crop([\"-p\", \"20\", \"-u\", \"-s\", \"paper.pdf\"])\n\n        When printing a document with closely-cropped pages it may be necessary\n        to use options such as \"Fit to Printable Area\". It may also be\n        necessary to fine-tune the size of the retained margins if the edges of\n        the text are being cut off.\n\n        Sometimes a PDF file is corrupted or non-standard to the point where\n        the routines used by this program raise an error and exit. In that case\n        it can sometimes help to repair the PDF file before attempting to crop\n        it. If it is readable by Ghostscript then the following command will\n        often repair it sufficiently:\n\n           gs -o repaired.pdf -sDEVICE=pdfwrite -dPDFSETTINGS=/prepress corrupted.pdf\n\n        This command can also be used to convert some PostScript (.ps) files to\n        PDF. The option '--gsFix' (or '-gsf') will automatically attempt to\n        apply this fix, provided Ghostscript is available. See the description\n        of that option for more information.\n\n        The pdfCropMargins program handles rotated pages (such as pages in\n        landscape mode versus portrait mode) as follows. All rotated pages are\n        un-rotated as soon as they are read in. All the cropping is then\n        calculated. Finally, as the crops are applied to the pages, the\n        rotation is re-applied. This may give unexpected results in documents\n        which mix pages at different rotations, especially with the '--uniform'\n        or '--samePageSize' options. For rotated pages the arguments of all the\n        options which take four arguments, one for each margin, are shifted so\n        the left, bottom, right, and top margins correspond to the screen\n        appearance (regardless of any internal rotation).\n\n        All the command-line options to pdfCropMargins are described below. The\n        following definition is useful in precisely defining what several of\n        the options do. The \"delta values\" are the absolute reduction lengths,\n        in points, which are applied to each original page to get the final\n        cropped page. There is a delta value for each margin, on each page. In\n        the usual case where all the margin sizes decrease, all the deltas are\n        positive. A delta value can, however, be negative (e.g., when\n        percentRetain > 100 or when a negative absolute offset is used). When a\n        delta value is negative the corresponding margin size will increase.\n      \n\n   Positional arguments:\n\n     PDF_FILE     The pathname of the PDF file to crop. Use quotes around any\n                  file or directory name which contains a space. If no filename\n                  is given for the cropped PDF output file via the '-o' flag then\n                  a default output filename will be generated. By default it is\n                  the same as the source filename except that the suffix \".pdf\"\n                  is replaced by \"_cropped.pdf\", overwriting by default if the\n                  file already exists. The file will be written to the working\n                  directory at the time when the program was run. If the input\n                  file has no extension or has an extension other than '.pdf' or\n                  '.PDF' then the suffix '.pdf' will be appended to the existing\n                  (possibly-null) extension. Globbing of wildcards and shell\n                  variable expansions are performed on the path.\n\n\n   Optional arguments:\n\n     -h, --help   Show this help message and exit.\n\n     -o OUTFILE_PATH_OR_DIR, --outfile OUTFILE_PATH_OR_DIR\n                  An optional argument specifying the directory or file path that\n                  the cropped output document should be written to. If this\n                  option is not given the program will generate an output\n                  filename from the input filename and write to the current\n                  working directory. By default the string \"_cropped\" is appended\n                  to the input filename just before the file extension. (If the\n                  extension is not '.pdf' or '.PDF' then '.pdf' is also appended\n                  to the extension.) The options '--usePrefix', '--stringCropped'\n                  and '--stringSeparator' can be used to customize the generated\n                  filenames. By default any existing file with the same name will\n                  be silently overwritten; this can be avoided with the '--\n                  noclobber' option. Globbing of wildcards and shell variable\n                  expansions are performed on the directory path but not on the\n                  filename part.\n\n     -v, --verbose\n                  Print more information about the program's actions and\n                  progress. Without this switch only warning and error messages\n                  are printed to the screen.\n\n     -gui, --gui  Run the graphical user interface. This mode allows you to\n                  interactively preview and test different cropping options\n                  without having to recalculate the bounding boxes each time\n                  (which can be slow). All the usual command-line options to the\n                  program are still respected. Clicking the 'Crop' button in the\n                  GUI crops with the current settings, writing out a cropped PDF\n                  file to the same filename that the command-line version would\n                  write to. Note that successive changes to the margins in the\n                  GUI are not cumulative: settings are always applied to the\n                  original document as it was passed in to the program. The\n                  'Original' button reverts the display back to that original\n                  version.\n\n     -p PCT, --percentRetain PCT\n                  Set the percent of margin space to retain in the image. This is\n                  a percentage of the original margin space. By default the\n                  percent value is set to 10. Setting the percentage to 0 gives a\n                  tight bounding box. Percent values greater than 100 increase\n                  the margin sizes from their original sizes, and negative values\n                  decrease the margins even more than a tight bounding box.\n\n     -p4 PCT PCT PCT PCT, -pppp PCT PCT PCT PCT, --percentRetain4 PCT PCT PCT PCT\n                  Set the percent of margin space to retain in the image,\n                  individually for the left, bottom, right, and top margins,\n                  respectively. The four arguments should be percent values.\n                  Percent values greater than 100 increase the margin sizes from\n                  their original sizes, and negative values decrease the margins\n                  even more than a tight bounding box.\n\n     -pt, --percentText\n                  Normally the percentage values passed to '--percentRetain' or '\n                  --percentRetain4' define the percentage of existing margins to\n                  retain. This flag alters the interpretation of those percent\n                  values. The margins are instead set to the given percentage of\n                  the text width or height. The left and right margins are set to\n                  a percentage of the bounding box width and the bottom and top\n                  margins are set to a percentage of the bounding box height.\n\n     -a BP, --absoluteOffset BP\n                  Decrease each margin size by an absolute floating point offset\n                  value, to be subtracted from each margin's size after the\n                  'percentRetain' option is applied. The units are big points,\n                  bp, which is the unit used in PDF files. There are 72 bp in an\n                  inch. A single bp is approximately equal to a TeX point, pt\n                  (with 72.27pt in an inch). Negative values are allowed;\n                  positive numbers always decrease the margin size and negative\n                  numbers always increase it. Absolute offsets are always applied\n                  after any percentage change operations.\n\n     -a4 BP BP BP BP, -aaaa BP BP BP BP, --absoluteOffset4 BP BP BP BP\n                  Decrease the margin sizes individually with four absolute\n                  offset values. The four floating point arguments should be the\n                  left, bottom, right, and top offset values, respectively. See\n                  the '--absoluteOffset' option for information on the units.\n\n     -cs, --cropSafe\n                  Guarantee that all crops are safe in the sense that no crop\n                  ever goes beyond the tight bounding box on any margin. This\n                  does not apply to pre-crops using the '--absolutePreCrop'\n                  option. It also does not apply to any margins on pages where\n                  that margin is ignored due to the '--uniformOrderStat' or '--\n                  uniformOrderStat4' option. The latter effect works well with\n                  uniform cropping in the GUI: the value of 'uniformOrderStat'\n                  can be incremented for the margin with the minimum delta value\n                  (as seen by clicking that button) if no useful text would be\n                  cropped out. The '--cropSafeMin' option allows for modifying\n                  the minimum margin value, adding to the bounding box.\n\n     -csm4 BP BP BP BP, --cropSafeMin4 BP BP BP BP\n                  The '--cropSafe' option will not perform any crops that cut\n                  into the bounding box. This option modifies the behavior of\n                  that option (assuming that `--cropSafe` is also selected).\n                  Instead of stopping at the bounding box, it will not crop past\n                  the bounding box plus the corresponding margin values passed\n                  in. This applies to all margins. The option takes four floats,\n                  in units of big points, for the left, bottom, right, and top\n                  margins, respectively. Negative values are allowed and allow\n                  some of the bounding box to be cropped.\n\n     -ap BP, --absolutePreCrop BP\n                  This option is like '--absoluteOffset' except that it is\n                  applied before any bounding box calculations (or any other\n                  operations). The argument is the same, in units of bp. All\n                  successive operations are then relative to this pre-crop box,\n                  considered to be the full-page box. Note that since this\n                  absolute crop is applied before any bounding boxes are computed\n                  it is relative to the original full-page boxes of the document\n                  (unlike 'absoluteOffset', which is a crop relative to the\n                  newly-cropped margin after 'percentRetain' is applied). As a\n                  consequence, the number of points may need to be larger than\n                  what would work for 'absoluteOffset'. This option can be used\n                  to ignore text and markings out at the edge of the margins by\n                  cropping it out before the bounding boxes are calculated.\n\n     -ap4 BP BP BP BP, --absolutePreCrop4 BP BP BP BP\n                  This is the same as '--absolutePreCrop' except that four\n                  separate arguments can be given. The four floating point\n                  arguments should be the left, bottom, right, and top absolute\n                  pre-crop values, respectively.\n\n     -u, --uniform\n                  Crop all the pages uniformly. This forces the magnitude of\n                  margin-cropping (absolute, not relative) to be the same on each\n                  page. This option is applied after all the delta values have\n                  been calculated for each page, individually. Then all the left-\n                  margin delta values, for each page, are set to the smallest\n                  left-margin delta value over every page. The bottom, right, and\n                  top margins are processed similarly. Note that this effectively\n                  adds some margin space (relative to the margins obtained by\n                  cropping pages individually) to some of the pages. If the pages\n                  of the original document are all the same size then the cropped\n                  pages will again all be the same size. The '--samePageSize'\n                  option can be used in combination with this option to force all\n                  pages to be the same size after cropping.\n\n     -m INT, --uniformOrderStat INT\n                  Choosing this option implies the '--uniform' option, but the\n                  smallest delta value over all the pages is no longer chosen.\n                  Instead, for each margin the nth smallest delta value (with n\n                  numbered starting at zero) is chosen over all the pages. The\n                  argument is the integer n, for example '-m 4'. Choosing n to be\n                  half the number of pages gives the median delta value. This\n                  option is useful for cropping noisy scanned PDFs which have a\n                  common margin size on most of the pages, or for ignoring\n                  annotations which only appear in the margins of a few pages.\n                  This option essentially causes the program to ignores the n\n                  largest tight-crop margins when computing common delta values\n                  over all the pages. Increasing n always either increases the\n                  cropping amount or leaves it unchanged. Some trial-and-error\n                  may be needed to choose the best number. Using '-m 1' tends to\n                  work well with arXiv papers (which have a date in the margin of\n                  the first page).\n\n     -m4 INT INT INT INT, -mmmm INT INT INT INT, --uniformOrderStat4 INT INT INT INT\n                  This option is the same as '--uniformOrderStat' (or '-m')\n                  except that separate values are specified for each margin\n                  individually. The margins are ordered as left, bottom, right,\n                  and top.\n\n     -mp INT, --uniformOrderPercent INT\n                  This option is the same as '--uniformOrderStat' except that the\n                  order number n is automatically set to a given percentage of\n                  the number of pages which are set to be cropped (either the\n                  full number or the ones set with '--pages'). This option\n                  overrides '--uniformOrderStat' if both are set. The argument is\n                  a float percent value; rounding is done to get the final order-\n                  number. Setting the percent to 0 is equivalent to n=1, setting\n                  the percent to 100 is equivalent to setting n to the full\n                  number of pages, and setting the percent to 50 gives the median\n                  (for odd numbers of pages).\n\n     -s, --samePageSize\n                  Set all the page sizes to be equal. This option only has an\n                  effect when the page sizes are different. The pages sizes are\n                  set to the size of the union of all the page regions, i.e., to\n                  the smallest bounding box which contains all the pages. This\n                  operation is always done before any others (except '--\n                  absolutePreCrop'). The cropping is then done as usual, but note\n                  that any margin percentages (such as for '--percentRetain') are\n                  now relative to this new, possibly larger, page size. The\n                  resulting pages are still cropped independently by default, and\n                  will not necessarily all have the same size unless '--uniform'\n                  is also selected to force the cropping amounts to be the same\n                  for each page. If pages are selected with '--pages' then this\n                  option is only applied to those selected pages.\n\n     -ms INT, --samePageSizeOrderStat INT\n                  Choosing this option implies the '--samePageSize' option, but\n                  the calculations for each edge of the smallest bounding box\n                  ignore the largest (or smallest for left and bottom edges) n\n                  values. The argument is the nonnegative number n. Each edge is\n                  calculated independently. This is an order statistic for\n                  selecting the uniform size to make the pages. Note that this\n                  will cut off parts of some pages if n>0.\n\n     -ssp FLOAT FLOAT FLOAT FLOAT, --setSamePageSize FLOAT FLOAT FLOAT FLOAT\n                  This option is like the '--samePageSize' option except the page\n                  size to set is passed in as four floating point arguments\n                  rather than being calculated. The numbers should represent the\n                  left, bottom, right, and top margin values, respectively. The\n                  origin is at the lower left. The numbers should be in points\n                  and are absolute, i.e., not relative to any current margins.\n                  The `--samePageSize` option will override this option if it is\n                  set.\n\n     -e, --evenodd\n                  Crop all the odd pages uniformly, and all the even pages\n                  uniformly. The largest amount of cropping that works for all\n                  the pages in each group is chosen. If the '--uniform' ('-u')\n                  option is simultaneously set then the vertical cropping will be\n                  uniform over all the pages and only the horizontal cropping\n                  will differ between even and odd pages. See also the '--\n                  percentText' option which can be used for a similar effect.\n\n     -g PAGESTR, -pg PAGESTR, --pages PAGESTR\n                  Apply the cropping operation only to the selected pages. The\n                  argument should be a list of the usual form such as\n                  \"2-4,5,9,20-30\". The page-numbering is assumed to start at 1.\n                  Ordering in the argument list is unimportant, negative ranges\n                  are ignored, and pages falling outside the document are\n                  ignored. Note that restore information is always saved for all\n                  the pages (in the ArtBox) unless '--noundosave' is selected.\n\n     -c [d|m|p|gr|gb|o], --calcbb [d|m|p|gr|gb|o]\n                  Choose the method to calculate bounding boxes (or to render the\n                  PDF pages in order to calculate the boxes). The default option\n                  'd' will currently choose the MuPDF rendering option. The\n                  options to force a particular method are MuPDF ('m'), pdftoppm\n                  ('p'), or Ghostscript ('gr') for rendering, or direct\n                  Ghostscript bounding-box calculation ('gb'). For pdftoppm or\n                  Ghostscript options the corresponding program must be installed\n                  and locatable (see the path-setting options below if the\n                  default locator fails). Only the explicit rendering methods\n                  will work for scanned pages (see '--gsBbox'). Choosing 'o'\n                  reverts to the old default behavior of first looking for\n                  pdftoppm and then looking for Ghostscript for rendering.\n\n     -gs, --gsBbox\n                  This option is maintained for backward compatibility; using '-c\n                  gb' is now preferred. Use Ghostscript to directly find the\n                  bounding boxes for the pages, with no explict rendering of the\n                  pages. (The default is to explicitly render the PDF pages to\n                  image files and calculate bounding boxes from the images.) This\n                  method tends to be much faster, but it does not work with\n                  scanned PDF documents. It also does not allow for choosing the\n                  threshold value, applying blurs, etc. Any resolution options\n                  are passed to the Ghostscript bbox device. This option requires\n                  that Ghostscript be available in the PATH as \"gswin32c.exe\" or\n                  \"gswin64c.exe\" on Windows, or as \"gs\" on Linux. When this\n                  option is set the Pillow image library for Python is not\n                  required.\n\n     -gsr, --gsRender\n                  This is maintained for backward compatibility; using '-c gr' is\n                  now preferred. Use Ghostscript to render the PDF pages to\n                  images. By default the pdftoppm program will be preferred for\n                  the rendering, if it is found. Note that this option has no\n                  effect if '--gsBbox' is chosen, since then no explicit\n                  rendering is done.\n\n     -t BYTEVAL, --threshold BYTEVAL\n                  Set the threshold for determining what is background space\n                  (white). The value can be from 0 to 255, with 191 the default\n                  (75 percent). This option may not be available for some\n                  configurations since the PDF must be internally rendered as an\n                  image of pixels. In particular, it is ignored when '--gsBbox'\n                  is selected. Any pixel value over the threshold is considered\n                  to be background (white), and any value below it is considered\n                  to be text (black). Lowering the value should tend to make the\n                  bounding boxes smaller. The threshold may need to be lowered,\n                  for example, for scanned images with greyish backgrounds. For\n                  pages with dark backgrounds and light text a negative threshold\n                  value can be used. In that case the absolute value is used as\n                  the threshold but the test is reversed to consider pixel values\n                  greater than or equal to the threshold to be background.\n\n     -nb INT, --numBlurs INT\n                  When PDF files are explicitly rendered to image files, apply a\n                  blur operation to the resulting images this many times. This\n                  can be useful for noisy images.\n\n     -ns INT, --numSmooths INT\n                  When PDF files are explicitly rendered to image files, apply a\n                  smoothing operation to the resulting images this many times.\n                  This can be useful for noisy images.\n\n     -x DPI, --resX DPI\n                  The x-resolution in dots per inch to use when the image is\n                  rendered to find the bounding boxes. The default is 150. Higher\n                  values produce more precise bounding boxes but require more\n                  time and memory.\n\n     -y DPI, --resY DPI\n                  The y-resolution in dots per inch to use when the image is\n                  rendered to find the bounding boxes. The default is 150. Higher\n                  values produce more precise bounding boxes but require more\n                  time and memory.\n\n     -sr STR, --screenRes STR\n                  Pass in an X-windows style geometry string for the GUI to use\n                  as the fullscreen resolution and for the upper-left placement\n                  of the window. This is mainly for when the screen-size\n                  detection algorithm fails for a particular system. For example,\n                  with a screen of size \"1024x720\" that string should be used\n                  with the option. To also place the window at (0,0) the string\n                  would be \"1024x728+0+0\". See also the '--guiFontSize' option\n                  which can be used to decrease the overall size of the GUI\n                  window.\n\n     -gf INT, --guiFontSize INT\n                  Choose the GUI font size. Making this smaller than the default\n                  of 11 can also make the GUI smaller if it does not fit on a\n                  smaller monitor.\n\n     -b [m|c|t|a|b], --boxesToSet [m|c|t|a|b]\n                  By default the pdfCropMargins program sets the MediaBox for\n                  each page of the cropped PDF document to the new, cropped page\n                  size. This default setting is usually sufficient, but this\n                  option can be used to select different PDF boxes to set. The\n                  option takes one argument, which is the first letter\n                  (lowercase) of a type of box. The choices are MediaBox (m),\n                  CropBox (c), TrimBox (t), ArtBox (a), and BleedBox (b). This\n                  option overrides the default and can be repeated multiple times\n                  to set several box types. Note that the program now uses\n                  PyMuPDF to set the boxes, and it will refuse to set any non-\n                  MediaBox boxes unless they are fully contained in the MediaBox.\n                  In that case a warning will be issued and the box will not be\n                  set.\n\n     -f [m|c|t|a|b], --fullPageBox [m|c|t|a|b]\n                  By default the program first (before any cropping is\n                  calculated) sets the MediaBox of each page in (a copy of) the\n                  document to the intersection of its previous MediaBox and\n                  CropBox. This ensures that the cropping is relative to the\n                  usual document-view in programs like Acrobat Reader. This\n                  essentially defines what is assumed to be the full size of\n                  pages in the document, and all cropping is then performed\n                  relative to that full-page size. This option can be used to\n                  alternately use the MediaBox, the CropBox, the TrimBox, the\n                  ArtBox, or the BleedBox in defining the full-page size. The\n                  option takes one argument, which is the first letter\n                  (lowercase) of the type of box to use. If the option is\n                  repeated then the intersection of all the box arguments is\n                  used. Only one choice is allowed in combination with the '-gs'\n                  option since Ghostscript does its own internal rendering when\n                  finding bounding boxes. The default with '-gs' is the\n                  CropBox.\n\n     -r, --restore\n                  This is a simple undo operation which essentially undoes all\n                  the crops ever made by pdfCropMargins and returns to the\n                  original margins (provided no other program modified the saved\n                  XML data for the pdfCropMargins key). By default, whenever this\n                  program crops a file for the first time it saves the MediaBox\n                  intersected with the CropBox for each page as XML metadata. The\n                  XML metadata is is checked to see if there is any existing\n                  restore data. If so, the saved metadata for each page is simply\n                  copied to the MediaBox and the CropBox for the page. This\n                  restores the earlier view of the document, such as in Acrobat\n                  Reader (but does not completely restore the previous condition\n                  in cases where the MediaBox and CropBox differed). Any options\n                  such as '-u', '-p', and '-a' which do not make sense in a\n                  restore operation are ignored. Note that as far as default\n                  filenames the operation is treated as just another crop\n                  operation (the default-generated output filename still has a\n                  \"_cropped.pdf\" suffix). The '--modifyOriginal' option (or its\n                  query variant) can be used with this option. Saving restore\n                  data as XML metadata can be disabled by using the '--\n                  noundosave' option.\n\n     -A, --noundosave\n                  Do not save any restore data as XML metadata. Note that the '--\n                  restore' operation will not work correctly for the cropped\n                  document later if this option is included in the cropping\n                  command.\n\n     -gsf, --gsFix\n                  Attempt to repair the input PDF file with Ghostscript before it\n                  is read-in. This requires that Ghostscript be available. (See\n                  the general description text above for the actual command that\n                  is run.) This can also be used to automatically convert some\n                  PostScript files (.ps) to PDF for cropping. The repaired PDF is\n                  written to a temporary file; the original PDF file is not\n                  modified. The original filename is treated as usual as far as\n                  automatic name-generation, the '--modify-original' option, and\n                  so forth. This option is often helpful if the program hangs or\n                  raises an error due to a corrupted PDF file. Note that when re-\n                  cropping a file already cropped by pdfCropMargins this option\n                  is probably not necessary, and if it is used in a re-crop (at\n                  least with current versions of Ghostscript) it will reset the\n                  Producer metadata which the pdfCropMargins program uses to tell\n                  if the file was already cropped by the program (so the '--\n                  restore' option will not work in combination with this option).\n                  This option is not recommended as something to use by default\n                  unless you encounter many corrupted PDF files and do not need\n                  to restore back to the original margins.\n\n     -nc, --noclobber\n                  Never overwrite an existing file with the cropped output\n                  file.\n\n     -pv PROG, --preview PROG\n                  Run a PDF viewer on the cropped PDF output. The viewer process\n                  is run in the background. The viewer is launched after\n                  pdfCropMargins has finished all the other options. The only\n                  exception is when the '--queryModifyOriginal' option is also\n                  selected. In that case the viewer is launched before the query\n                  so that the user can look at the output before deciding whether\n                  or not to modify the original. (Note that answering 'y' will\n                  then move the file out from under the running viewer; close and\n                  re-open the file before adding annotations, highlighting, etc.)\n                  The single argument should be the path of the executable file\n                  or script to run the chosen viewer. The viewer is assumed to\n                  take exactly one argument, a PDF filename. For example, on\n                  Linux the Acrobat Reader could be chosen with /usr/bin/acroread\n                  or, if it is in the PATH, simply acroread. A shell script or\n                  batch file wrapper can be used to set any additional options\n                  for the viewer.\n\n     -mo, --modifyOriginal\n                  This option moves (renames) the original document file to a\n                  backup filename and then moves the cropped file to the original\n                  document's filename (and directory path). Thus it effectively\n                  crops the original document file in-place and makes a backup\n                  copy of the original file in the output directory. The backup\n                  filename for the original document is always generated from the\n                  original filename; any prefix or suffix which would be added by\n                  the program to generate a filename (by default a \"_cropped\"\n                  suffix) is modified accordingly (by default to \"_uncropped\").\n                  The '--usePrefix', '--stringUncropped', and '--stringSeparator'\n                  options can all be used to customize the generated backup\n                  filename. If an output path is specified via the '--outfile'\n                  ('-o') option then the backup document is written to that\n                  directory (the same directory the cropped file was first\n                  written to). This operation is performed last, so if a previous\n                  operation fails the original document will be unchanged. Be\n                  warned that running pdfCropMargins twice on the same source\n                  path with this option will modify the backed-up original file;\n                  the '--noclobberOriginal' option can be used to avoid this.\n\n     -q, --queryModifyOriginal\n                  This option selects the '--modifyOriginal' option, but queries\n                  the user about whether to actually do the final move operation.\n                  This works well with the '--preview' or '--gui' options: if the\n                  preview looks good you can opt to modify the original file\n                  (keeping a copy of the original). If you decline then the files\n                  are not swapped (and are just as if the '--modifyOriginal'\n                  option had not been set).\n\n     -nco, --noclobberOriginal\n                  If the '--modifyOriginal' option is selected, do not ever\n                  overwrite an existing file as the backup copy for the original\n                  file. This essentially does the move operations for the '--\n                  modifyOriginal' option in noclobber mode, and prints a warning\n                  if it fails. On failure the result is exactly as if the '--\n                  modifyOriginal' option had not been selected. This option is\n                  redundant if the ordinary '--noclobber' option is also set.\n\n     -pf, --usePrefix\n                  Prepend a prefix-string when generating default file names\n                  rather than appending a suffix-string. The same string value is\n                  used, either the default or the one set via the '--\n                  stringCropped' or '--stringUncropped' option. With the default\n                  values for the other options and no output file specified, this\n                  option causes the cropped output for the input file\n                  \"document.pdf\" to be written to the file named\n                  \"cropped_document.pdf\" (instead of to the default filename\n                  \"document_cropped.pdf\").\n\n     -sc STR, --stringCropped STR\n                  This option can be used to set the string which will be\n                  appended (or prepended) to the document filename when\n                  automatically generating the output filename for a cropped\n                  file. The default value is \"cropped\".\n\n     -su STR, --stringUncropped STR\n                  This option can be used to set the string which will be\n                  appended (or prepended) to the document filename when\n                  automatically generating the output filename for the original,\n                  uncropped file. The default value is \"uncropped\".\n\n     -ss STR, --stringSeparator STR\n                  This option can be used to set the separator string which will\n                  be used when appending or prepending string values to\n                  automatically generate filenames. The default value is \"_\".\n\n     -pw PASSWD, --password PASSWD\n                  Specify a password to be used to decrypt an encrypted PDF file.\n                  Note that decrypting with an empty password is always tried, so\n                  this option is only needed for non-empty passwords. The\n                  resulting cropped file will not be encrypted, so use caution if\n                  important data is involved.\n\n     -pc, --prevCropped\n                  Test whether or not the document was previously cropped with\n                  the pdfCropMargins program. If so, exit with exit code 0. If\n                  not, exit with exit code 1. This option is intended mainly for\n                  scripting, for example to only crop documents that have not\n                  been previously cropped. Requires a document filename option.\n                  No other options are honored when this option is selected\n                  except '--gsFix', '--version', and '--help'.\n\n     -khc, --keepHorizCenter\n                  This option keeps the horizontal center point of a PDF fixed.\n                  The usual crops are calculated, but for each page the left and\n                  right delta values are both set to the smallest of the two\n                  values (so the cropping amount is the same on each side). This\n                  option does not apply to pre-crops.\n\n     -kvc, --keepVertCenter\n                  This option keeps the vertical center point of a PDF fixed. The\n                  usual crops are calculated, but for each page the upper and\n                  lower delta values are both set to the smallest of the two\n                  values (so the cropping amount is the same on the top and\n                  bottom). This option does not apply to pre-crops.\n\n     -spr FLOAT:FLOAT, --setPageRatios FLOAT:FLOAT\n                  Force all the cropped page ratios to equal the given ratio. All\n                  crops are calculated and applied as usual, but either the left\n                  and right margins will be increased equally or else the top and\n                  bottom margins will be increased equally in order to make the\n                  ratio of width to height equal the set value. Margins are only\n                  ever increased. The format for the ratio is either a string\n                  width-to-height ratio such as '4.5:3' or else a floating point\n                  number like '0.75' which is the width divided by the height.\n                  This option can be useful in some PDF viewers.\n\n     -prw FLOAT FLOAT FLOAT FLOAT, --pageRatioWeights FLOAT FLOAT FLOAT FLOAT\n                  This option weights any whitespace added by the '--\n                  setPageRatios' argument. It takes four weight arguments, one\n                  per margin. The four floating point arguments should be the\n                  left, bottom, right, and top weights, respectively. The weights\n                  determine what proportion of the total height(width) increase\n                  necessary to achieve the target page ratio is added to the\n                  corresponding margin. All weights must be greater than zero.\n\n     -ct, --centerText\n                  Center the text horizontally and vertically after cropping. The\n                  crop for each page is adjusted so that the tight bounding box\n                  is centered in the page (if possible). If an order statistic\n                  method like '--uniformOrderStat' is applied then, for ignored\n                  edges, the bounding box edge that was actually used to\n                  calculate the crop values is used. If the '--centeringStrict'\n                  flag is set then each page will be centered regardless of any\n                  order statistic calculation.\n\n     -ch, --centerTextHoriz\n                  This is the same as '--centerText' except pages are only\n                  centered horizontally.\n\n     -cv, --centerTextVert\n                  This is the same as '--centerText' except pages are only\n                  centered vertically.\n\n     -cst, --centeringStrict\n                  This flag modifies the behavior of bounding-box-centering\n                  options like '--centerText'. Normally pages ignored for order\n                  statistic operations like '--uniformOrderStat' are also ignored\n                  for centering and the page actually used for cropping is used\n                  for centering. This option forces strict centering of each\n                  page.\n\n     -i, --showImages\n                  When explicitly rendering PDF files to image files, display the\n                  inverse image files that are used to find the bounding boxes.\n                  Useful for debugging and for choosing some of the other\n                  parameters (such as the threshold). This option requires a\n                  default external viewer program selected by the Pillow image\n                  manipulation package (xv on Unix, and usually Paint on\n                  Windows).\n\n     -pdl, --pdftoppmLocal\n                  This option is deprecated. Use a locally-packaged pdftoppm\n                  executable rather than the system version. This option is only\n                  available on Windows machines; it is ignored otherwise. By\n                  default the first pdftoppm executable found in the directories\n                  in the PATH environment variable is used. On Windows the\n                  program will revert to this option if PDF image-rendering is\n                  required, PyMuPDF is not installed, and no system pdftoppm or\n                  Ghostscript executable can be found.\n\n     -gsp PATH, --ghostscriptPath PATH\n                  Pass in a pathname to the ghostscript executable that the\n                  program should use. No globbing is done. Useful when the\n                  program is in a nonstandard location.\n\n     -ppp PATH, --pdftoppmPath PATH\n                  Pass in a pathname to the pdftoppm executable that the program\n                  should use. No globbing is done. Useful when the program is in\n                  a nonstandard location.\n\n     --version    Return the pdfCropMargins version number and exit immediately.\n                  All other options are ignored.\n\n     -wcdf FILEPATH, --writeCropDataToFile FILEPATH\n                  Write out the calculated list of crops to the file with the\n                  file pathname that is passed in and exit. Mostly used for\n                  automated testing and debugging.\n\n\n   The pdfCropMargins program is Copyright (c) 2014 by Allen Barker.\n   Released under the GNU GPL license, version 3 or later.\n","description_content_type":null,"docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/abarker/pdfCropMargins","keywords":"pdf, crop, margins, resize","license":"GPL","maintainer":null,"maintainer_email":null,"name":"pdfCropMargins","package_url":"https://pypi.org/project/pdfCropMargins/","platform":null,"project_url":"https://pypi.org/project/pdfCropMargins/","project_urls":{"Homepage":"https://github.com/abarker/pdfCropMargins"},"provides_extra":null,"release_url":"https://pypi.org/project/pdfCropMargins/2.1.3/","requires_dist":["wheel","pillow>=10.1.0","PyMuPDF>=1.19.6"],"requires_python":null,"summary":"A command-line program to crop the margins of PDF files, with many options.","version":"2.1.3","yanked":false,"yanked_reason":null},"last_serial":23549823,"releases":{"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"7d18fa402d4173830349304a11845fb05dfdd94d9109ae0943ee97fd1e5dfa56","md5":"3049ff46d8ea8a416c7dbcad41f802a9","sha256":"af04d578f40a70d18777576023e3943cefc62e7cc92fc2db9e6e204ddff089f5"},"downloads":-1,"filename":"pdfCropMargins-0.1.0.tar.gz","has_sig":false,"md5_digest":"3049ff46d8ea8a416c7dbcad41f802a9","packagetype":"sdist","python_version":"source","requires_python":null,"size":1608048,"upload_time":"2017-02-27T23:25:15","upload_time_iso_8601":"2017-02-27T23:25:15.613243Z","url":"https://files.pythonhosted.org/packages/7d/18/fa402d4173830349304a11845fb05dfdd94d9109ae0943ee97fd1e5dfa56/pdfCropMargins-0.1.0.tar.gz","yanked":false,"yanked_reason":null}],"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"ca110088e2d4e0bdd141b2887b73b1e9e386569ce5246c043a9254abae445934","md5":"4b984518c5b787cb34332dd9f7d409c1","sha256":"c19aad492a2e9c80464dfcc2264b083a0fd86b62cdecb08829a17ea9a4ec8c09"},"downloads":-1,"filename":"pdfCropMargins-0.1.1.tar.gz","has_sig":false,"md5_digest":"4b984518c5b787cb34332dd9f7d409c1","packagetype":"sdist","python_version":"source","requires_python":null,"size":1607709,"upload_time":"2017-02-27T23:57:23","upload_time_iso_8601":"2017-02-27T23:57:23.411997Z","url":"https://files.pythonhosted.org/packages/ca/11/0088e2d4e0bdd141b2887b73b1e9e386569ce5246c043a9254abae445934/pdfCropMargins-0.1.1.tar.gz","yanked":false,"yanked_reason":null}],"0.1.2":[{"comment_text":"","digests":{"blake2b_256":"9514cf56925c83628775bf850ac318024c66f98a80f63fc67e6ecee74bbff0fb","md5":"67870246bb1b36c49514ceef43cda033","sha256":"75a290e945799477607a7cded7a85770641f957e44fc7929ab94a7f053b70fb3"},"downloads":-1,"filename":"pdfCropMargins-0.1.2.tar.gz","has_sig":false,"md5_digest":"67870246bb1b36c49514ceef43cda033","packagetype":"sdist","python_version":"source","requires_python":null,"size":1609114,"upload_time":"2017-03-14T22:38:00","upload_time_iso_8601":"2017-03-14T22:38:00.759682Z","url":"https://files.pythonhosted.org/packages/95/14/cf56925c83628775bf850ac318024c66f98a80f63fc67e6ecee74bbff0fb/pdfCropMargins-0.1.2.tar.gz","yanked":false,"yanked_reason":null}],"0.1.3":[{"comment_text":"","digests":{"blake2b_256":"9c58fe2ea9d7a5f6822aa66c475c13f54a09249066ab49a54b6f3f9b11cb408c","md5":"4d1680e557bcce43112812fc553ff864","sha256":"7dae0eebb85b5a1a0ec8f04a281b3c0b3c0b5b12f95abf671d2effeaa532bcf2"},"downloads":-1,"filename":"pdfCropMargins-0.1.3.tar.gz","has_sig":false,"md5_digest":"4d1680e557bcce43112812fc553ff864","packagetype":"sdist","python_version":"source","requires_python":null,"size":1616165,"upload_time":"2017-04-09T16:24:08","upload_time_iso_8601":"2017-04-09T16:24:08.187152Z","url":"https://files.pythonhosted.org/packages/9c/58/fe2ea9d7a5f6822aa66c475c13f54a09249066ab49a54b6f3f9b11cb408c/pdfCropMargins-0.1.3.tar.gz","yanked":false,"yanked_reason":null}],"0.1.4":[{"comment_text":"","digests":{"blake2b_256":"1c52136bf2a46189584dde91c598e5d3a1d5ad4bb1e70cc9a58be4b36b450e4e","md5":"1e21af81456381c87e82a54ee83ab7de","sha256":"91649dd9b07e376205964d6fbef599df868b55481f6a20676095f1bff9eea464"},"downloads":-1,"filename":"pdfCropMargins-0.1.4.tar.gz","has_sig":false,"md5_digest":"1e21af81456381c87e82a54ee83ab7de","packagetype":"sdist","python_version":"source","requires_python":null,"size":1615801,"upload_time":"2019-02-08T01:59:50","upload_time_iso_8601":"2019-02-08T01:59:50.422902Z","url":"https://files.pythonhosted.org/packages/1c/52/136bf2a46189584dde91c598e5d3a1d5ad4bb1e70cc9a58be4b36b450e4e/pdfCropMargins-0.1.4.tar.gz","yanked":false,"yanked_reason":null}],"0.1.5":[{"comment_text":"","digests":{"blake2b_256":"a85cec63ca92f142447c41d5ff98f45ab8b1f01fa54cece68f6286a131e8b54a","md5":"210bd60184218f3c8a10664b90f4c2c6","sha256":"b3270b416af85ba73a8db935416d7a7c8a79f20748b39ef88da81747cdeb01a7"},"downloads":-1,"filename":"pdfCropMargins-0.1.5.tar.gz","has_sig":false,"md5_digest":"210bd60184218f3c8a10664b90f4c2c6","packagetype":"sdist","python_version":"source","requires_python":null,"size":1632109,"upload_time":"2019-08-20T01:48:40","upload_time_iso_8601":"2019-08-20T01:48:40.423024Z","url":"https://files.pythonhosted.org/packages/a8/5c/ec63ca92f142447c41d5ff98f45ab8b1f01fa54cece68f6286a131e8b54a/pdfCropMargins-0.1.5.tar.gz","yanked":false,"yanked_reason":null}],"0.1.6":[{"comment_text":"","digests":{"blake2b_256":"fb653d0538fbcb7411e444449e110cca3154c67942080e7d43e65dabe231aadf","md5":"8cbe539dc11b8d30ef1b43ace657c934","sha256":"8b1ade412ab815249d297516eb40ff10f1b2568b74e87f7269961d7d7bb177b3"},"downloads":-1,"filename":"pdfCropMargins-0.1.6.tar.gz","has_sig":false,"md5_digest":"8cbe539dc11b8d30ef1b43ace657c934","packagetype":"sdist","python_version":"source","requires_python":null,"size":1632172,"upload_time":"2019-08-20T02:53:37","upload_time_iso_8601":"2019-08-20T02:53:37.033418Z","url":"https://files.pythonhosted.org/packages/fb/65/3d0538fbcb7411e444449e110cca3154c67942080e7d43e65dabe231aadf/pdfCropMargins-0.1.6.tar.gz","yanked":false,"yanked_reason":null}],"0.2.0":[{"comment_text":"","digests":{"blake2b_256":"0a9de029f809515c981ecd252acb558757c3e5ad19cf006a9b67364d644f82df","md5":"e3f7330e5f3f6d9063c77bb9b8b461a3","sha256":"9206032cd21376e726bc003bf250c85135ab68a586f50e77ed354ae82486556a"},"downloads":-1,"filename":"pdfCropMargins-0.2.0.tar.gz","has_sig":false,"md5_digest":"e3f7330e5f3f6d9063c77bb9b8b461a3","packagetype":"sdist","python_version":"source","requires_python":null,"size":1632266,"upload_time":"2019-08-20T09:33:06","upload_time_iso_8601":"2019-08-20T09:33:06.608861Z","url":"https://files.pythonhosted.org/packages/0a/9d/e029f809515c981ecd252acb558757c3e5ad19cf006a9b67364d644f82df/pdfCropMargins-0.2.0.tar.gz","yanked":false,"yanked_reason":null}],"0.2.1":[{"comment_text":"","digests":{"blake2b_256":"dcce29f3a7b00867473b3830f53eee7b157f524fac7c34e5104dca8225f796ff","md5":"9e985023941ff99a6ec56f26b388fe67","sha256":"a1552c76e8620c89f4e1d7828d022d96422a9d27e05bcbd6674ca6acc88a1a0f"},"downloads":-1,"filename":"pdfCropMargins-0.2.1.tar.gz","has_sig":false,"md5_digest":"9e985023941ff99a6ec56f26b388fe67","packagetype":"sdist","python_version":"source","requires_python":null,"size":1632952,"upload_time":"2019-08-21T08:28:31","upload_time_iso_8601":"2019-08-21T08:28:31.011751Z","url":"https://files.pythonhosted.org/packages/dc/ce/29f3a7b00867473b3830f53eee7b157f524fac7c34e5104dca8225f796ff/pdfCropMargins-0.2.1.tar.gz","yanked":false,"yanked_reason":null}],"0.2.10":[{"comment_text":"","digests":{"blake2b_256":"f647db9e660136b612d4683e380ca7ead787f79d5a9bab5d937c362fa4f7bbef","md5":"884c7df584d57dab511d5ebf64118e4d","sha256":"3b213d12f420a8554306f126605b362782408eecc20cb03d5a4281bf6bb115e7"},"downloads":-1,"filename":"pdfCropMargins-0.2.10.tar.gz","has_sig":false,"md5_digest":"884c7df584d57dab511d5ebf64118e4d","packagetype":"sdist","python_version":"source","requires_python":null,"size":1830934,"upload_time":"2020-08-23T09:27:07","upload_time_iso_8601":"2020-08-23T09:27:07.640534Z","url":"https://files.pythonhosted.org/packages/f6/47/db9e660136b612d4683e380ca7ead787f79d5a9bab5d937c362fa4f7bbef/pdfCropMargins-0.2.10.tar.gz","yanked":false,"yanked_reason":null}],"0.2.11":[{"comment_text":"","digests":{"blake2b_256":"1e83dc8e4c0eddbc6bbb514d8ecac245c16049d25316d0f10341d231c442920e","md5":"39c03fa7ec91ca8ecb9edd55616b1d83","sha256":"5d280f3142ef2f72b39ab06532eae55654d3b30e50f2d50d137b136225321242"},"downloads":-1,"filename":"pdfCropMargins-0.2.11.tar.gz","has_sig":false,"md5_digest":"39c03fa7ec91ca8ecb9edd55616b1d83","packagetype":"sdist","python_version":"source","requires_python":null,"size":1832016,"upload_time":"2020-09-12T20:36:17","upload_time_iso_8601":"2020-09-12T20:36:17.366556Z","url":"https://files.pythonhosted.org/packages/1e/83/dc8e4c0eddbc6bbb514d8ecac245c16049d25316d0f10341d231c442920e/pdfCropMargins-0.2.11.tar.gz","yanked":false,"yanked_reason":null}],"0.2.12":[{"comment_text":"","digests":{"blake2b_256":"a996ba348c46297b1f6051ffb5f1c7b99bb74bd7b8e0cd5e77f35cc3f53d8d80","md5":"a82bce545b339046546d514157ea8d94","sha256":"a67b1600ac5742b7906b0f54341cd95dde10c217a4d90650312aab3f1242d43f"},"downloads":-1,"filename":"pdfCropMargins-0.2.12.tar.gz","has_sig":false,"md5_digest":"a82bce545b339046546d514157ea8d94","packagetype":"sdist","python_version":"source","requires_python":null,"size":1831424,"upload_time":"2020-09-22T08:25:56","upload_time_iso_8601":"2020-09-22T08:25:56.786845Z","url":"https://files.pythonhosted.org/packages/a9/96/ba348c46297b1f6051ffb5f1c7b99bb74bd7b8e0cd5e77f35cc3f53d8d80/pdfCropMargins-0.2.12.tar.gz","yanked":false,"yanked_reason":null}],"0.2.13":[{"comment_text":"","digests":{"blake2b_256":"1b914fa326649b64c3bf39d242cf1f2f2af8a18ba10bbb5c50069a43b30cb408","md5":"dec841bbde9c2bf36095860771574b78","sha256":"dc7a742f9b78fa27532faa1079a7e64826ee9725c48305e168c6b57c14a86a1d"},"downloads":-1,"filename":"pdfCropMargins-0.2.13.tar.gz","has_sig":false,"md5_digest":"dec841bbde9c2bf36095860771574b78","packagetype":"sdist","python_version":"source","requires_python":null,"size":1831464,"upload_time":"2020-09-22T11:17:28","upload_time_iso_8601":"2020-09-22T11:17:28.278975Z","url":"https://files.pythonhosted.org/packages/1b/91/4fa326649b64c3bf39d242cf1f2f2af8a18ba10bbb5c50069a43b30cb408/pdfCropMargins-0.2.13.tar.gz","yanked":false,"yanked_reason":null}],"0.2.14":[{"comment_text":"","digests":{"blake2b_256":"6c4ba217ff7748b41b5bf875c1ce7d232c47b4d8da10b690fa240f858858b7cd","md5":"f839dbf10cbff1f27b3e5f1b50daf149","sha256":"4d405b39256e8c5688e6a36ac74094554b081d147ca9ea224109a0076e053694"},"downloads":-1,"filename":"pdfCropMargins-0.2.14.tar.gz","has_sig":false,"md5_digest":"f839dbf10cbff1f27b3e5f1b50daf149","packagetype":"sdist","python_version":"source","requires_python":null,"size":1831725,"upload_time":"2020-09-22T13:05:10","upload_time_iso_8601":"2020-09-22T13:05:10.352226Z","url":"https://files.pythonhosted.org/packages/6c/4b/a217ff7748b41b5bf875c1ce7d232c47b4d8da10b690fa240f858858b7cd/pdfCropMargins-0.2.14.tar.gz","yanked":false,"yanked_reason":null}],"0.2.15":[{"comment_text":"","digests":{"blake2b_256":"cbf31c7759222ccc063003293101db77aea9cfc08b4c4378b6942152b7f5f3ab","md5":"271ca9a70e73c384d0452cbfeb57d210","sha256":"c40953f31072348ce287decfd58d81799ef1e3c9a359cd27f9f0e73047502341"},"downloads":-1,"filename":"pdfCropMargins-0.2.15.tar.gz","has_sig":false,"md5_digest":"271ca9a70e73c384d0452cbfeb57d210","packagetype":"sdist","python_version":"source","requires_python":null,"size":1831711,"upload_time":"2020-09-22T13:35:02","upload_time_iso_8601":"2020-09-22T13:35:02.242108Z","url":"https://files.pythonhosted.org/packages/cb/f3/1c7759222ccc063003293101db77aea9cfc08b4c4378b6942152b7f5f3ab/pdfCropMargins-0.2.15.tar.gz","yanked":false,"yanked_reason":null}],"0.2.16":[{"comment_text":"","digests":{"blake2b_256":"1c7a6eb0cd2fb6554f00efd09321df6c15b91868135817431d2bdf1b74520f35","md5":"017270cd6bb2a051c114d82f17da5e1a","sha256":"72673fe1b4b223119b61bb82c71eb13dda40fadaa2c15dd0148bed509fd06d42"},"downloads":-1,"filename":"pdfCropMargins-0.2.16.tar.gz","has_sig":false,"md5_digest":"017270cd6bb2a051c114d82f17da5e1a","packagetype":"sdist","python_version":"source","requires_python":null,"size":1834529,"upload_time":"2020-10-18T21:02:12","upload_time_iso_8601":"2020-10-18T21:02:12.964590Z","url":"https://files.pythonhosted.org/packages/1c/7a/6eb0cd2fb6554f00efd09321df6c15b91868135817431d2bdf1b74520f35/pdfCropMargins-0.2.16.tar.gz","yanked":false,"yanked_reason":null}],"0.2.2":[{"comment_text":"","digests":{"blake2b_256":"9cd3fca96c6f566d908ffe1793c4b7c55aa4daff7a753115117dceb703afb65d","md5":"06012aca2943727535fd0b65d85b0e36","sha256":"e1cf8f09da71599167a2d1982a7b11d2e1f6827079b4b3fa46c7ae1805e2c825"},"downloads":-1,"filename":"pdfCropMargins-0.2.2.tar.gz","has_sig":false,"md5_digest":"06012aca2943727535fd0b65d85b0e36","packagetype":"sdist","python_version":"source","requires_python":null,"size":1632945,"upload_time":"2019-08-21T09:05:35","upload_time_iso_8601":"2019-08-21T09:05:35.734683Z","url":"https://files.pythonhosted.org/packages/9c/d3/fca96c6f566d908ffe1793c4b7c55aa4daff7a753115117dceb703afb65d/pdfCropMargins-0.2.2.tar.gz","yanked":false,"yanked_reason":null}],"0.2.3":[{"comment_text":"","digests":{"blake2b_256":"b60aa9cb7d34deae650fe386748c04ecc3d2bfb0a86bd7703abe39077f3b3df1","md5":"f9591bbbf7cfefddafb46268c329670e","sha256":"44373f8fd0ae96c999dd831e86edd9be149cfeb594d92b1acd9849e2e2842a95"},"downloads":-1,"filename":"pdfCropMargins-0.2.3.tar.gz","has_sig":false,"md5_digest":"f9591bbbf7cfefddafb46268c329670e","packagetype":"sdist","python_version":"source","requires_python":null,"size":1633218,"upload_time":"2019-09-09T00:00:13","upload_time_iso_8601":"2019-09-09T00:00:13.334989Z","url":"https://files.pythonhosted.org/packages/b6/0a/a9cb7d34deae650fe386748c04ecc3d2bfb0a86bd7703abe39077f3b3df1/pdfCropMargins-0.2.3.tar.gz","yanked":false,"yanked_reason":null}],"0.2.4":[{"comment_text":"","digests":{"blake2b_256":"412bc9855513d9819ffeae4d821ef24cd593d3a35c5fb988c93ae4a8b5a49eef","md5":"39be0c622d05fcf83d918155e40dd065","sha256":"e63a45fa60810bf3833bcfa324c8420b4be598cbcbeeda912da9e1ea2f343535"},"downloads":-1,"filename":"pdfCropMargins-0.2.4.tar.gz","has_sig":false,"md5_digest":"39be0c622d05fcf83d918155e40dd065","packagetype":"sdist","python_version":"source","requires_python":null,"size":3358656,"upload_time":"2019-09-09T01:20:02","upload_time_iso_8601":"2019-09-09T01:20:02.187973Z","url":"https://files.pythonhosted.org/packages/41/2b/c9855513d9819ffeae4d821ef24cd593d3a35c5fb988c93ae4a8b5a49eef/pdfCropMargins-0.2.4.tar.gz","yanked":false,"yanked_reason":null}],"0.2.5":[{"comment_text":"","digests":{"blake2b_256":"d1ae3cb5de295ca7a0226d5e92c64dfe68ad0963a24b701ccd61eee136e011f5","md5":"724b1f634acd3cef8eab1283f7038ff8","sha256":"430d98f40bb7093544f528e3a10a15ff104480d7306fb81604694c8d03542e2e"},"downloads":-1,"filename":"pdfCropMargins-0.2.5.tar.gz","has_sig":false,"md5_digest":"724b1f634acd3cef8eab1283f7038ff8","packagetype":"sdist","python_version":"source","requires_python":null,"size":3359067,"upload_time":"2019-09-09T03:03:45","upload_time_iso_8601":"2019-09-09T03:03:45.072921Z","url":"https://files.pythonhosted.org/packages/d1/ae/3cb5de295ca7a0226d5e92c64dfe68ad0963a24b701ccd61eee136e011f5/pdfCropMargins-0.2.5.tar.gz","yanked":false,"yanked_reason":null}],"0.2.6":[{"comment_text":"","digests":{"blake2b_256":"c233622baca4910c48c9d4b29d804b4690389dff6b0d6730d31a7b4d9ed9fd66","md5":"ec662f0d5ebc99a9d97a63526fefbbfd","sha256":"f4f8f58460638bdd972b81bc8d8e4a6077865e41a43d605eb3943366c6e943ea"},"downloads":-1,"filename":"pdfCropMargins-0.2.6.tar.gz","has_sig":false,"md5_digest":"ec662f0d5ebc99a9d97a63526fefbbfd","packagetype":"sdist","python_version":"source","requires_python":null,"size":3359993,"upload_time":"2019-09-09T04:31:47","upload_time_iso_8601":"2019-09-09T04:31:47.434934Z","url":"https://files.pythonhosted.org/packages/c2/33/622baca4910c48c9d4b29d804b4690389dff6b0d6730d31a7b4d9ed9fd66/pdfCropMargins-0.2.6.tar.gz","yanked":false,"yanked_reason":null}],"0.2.7":[{"comment_text":"","digests":{"blake2b_256":"c8cfa5dc0874a8d5b6d8b025a00d57b6e0e631f7d1d18dcf98d4d283cb1c1eb6","md5":"8a49c42366fb7602de2d76063bf65a70","sha256":"0dc9674650a702acf91b4a2bc88e9a3605b81dc98ed0d0502c6c2c36c84b8dec"},"downloads":-1,"filename":"pdfCropMargins-0.2.7.tar.gz","has_sig":false,"md5_digest":"8a49c42366fb7602de2d76063bf65a70","packagetype":"sdist","python_version":"source","requires_python":null,"size":1827339,"upload_time":"2020-05-17T00:59:13","upload_time_iso_8601":"2020-05-17T00:59:13.599314Z","url":"https://files.pythonhosted.org/packages/c8/cf/a5dc0874a8d5b6d8b025a00d57b6e0e631f7d1d18dcf98d4d283cb1c1eb6/pdfCropMargins-0.2.7.tar.gz","yanked":false,"yanked_reason":null}],"0.2.8":[{"comment_text":"","digests":{"blake2b_256":"e5133528e5efef1e4b927d59040dccda5453dc54692d824250c1ba348da1d7af","md5":"7622b45ae6104372fbb694d876dad4f0","sha256":"455635896401f2d8b5f92799c00095b6d1b64a0d1ff25ebcda482871b7934384"},"downloads":-1,"filename":"pdfCropMargins-0.2.8.tar.gz","has_sig":false,"md5_digest":"7622b45ae6104372fbb694d876dad4f0","packagetype":"sdist","python_version":"source","requires_python":null,"size":1827364,"upload_time":"2020-05-17T01:28:20","upload_time_iso_8601":"2020-05-17T01:28:20.592622Z","url":"https://files.pythonhosted.org/packages/e5/13/3528e5efef1e4b927d59040dccda5453dc54692d824250c1ba348da1d7af/pdfCropMargins-0.2.8.tar.gz","yanked":false,"yanked_reason":null}],"0.2.9":[{"comment_text":"","digests":{"blake2b_256":"79624672a0a9ebdc6d6a932fae35b6245a476c6a011a4d9bc6fcacf965c6348c","md5":"d21bc3cb77d04554e2beb0b819c68844","sha256":"94f5522816efb13b3fd33c8428dbc99d1e793eb45138e9c580da5f56f8f03560"},"downloads":-1,"filename":"pdfCropMargins-0.2.9.tar.gz","has_sig":false,"md5_digest":"d21bc3cb77d04554e2beb0b819c68844","packagetype":"sdist","python_version":"source","requires_python":null,"size":1829171,"upload_time":"2020-07-28T20:58:06","upload_time_iso_8601":"2020-07-28T20:58:06.488441Z","url":"https://files.pythonhosted.org/packages/79/62/4672a0a9ebdc6d6a932fae35b6245a476c6a011a4d9bc6fcacf965c6348c/pdfCropMargins-0.2.9.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0":[{"comment_text":"","digests":{"blake2b_256":"8bda4333b746252b77217dab65dbb7be7a82b8a0692687d7ea0bb3635fa4ff21","md5":"5a553964c4f9c9b3b83b0f21049e9aba","sha256":"361f99e9ebff330fc582d8e96c1b647047452da928ce932557ea28abddf841da"},"downloads":-1,"filename":"pdfCropMargins-1.0.0.tar.gz","has_sig":false,"md5_digest":"5a553964c4f9c9b3b83b0f21049e9aba","packagetype":"sdist","python_version":"source","requires_python":null,"size":1836240,"upload_time":"2020-10-23T19:26:06","upload_time_iso_8601":"2020-10-23T19:26:06.789950Z","url":"https://files.pythonhosted.org/packages/8b/da/4333b746252b77217dab65dbb7be7a82b8a0692687d7ea0bb3635fa4ff21/pdfCropMargins-1.0.0.tar.gz","yanked":false,"yanked_reason":null}],"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"3709f3cf20ea17bf6df13f6ecce5a24b5cb3751f2f3a26538d474145e086dda1","md5":"9744924d9fffda6dc025284050380d37","sha256":"0b142fecaf7eaba1c190d3ce38e9de9f15db058fc906a5e2c15db36155883799"},"downloads":-1,"filename":"pdfCropMargins-1.0.1.tar.gz","has_sig":false,"md5_digest":"9744924d9fffda6dc025284050380d37","packagetype":"sdist","python_version":"source","requires_python":null,"size":1836493,"upload_time":"2020-11-12T13:34:16","upload_time_iso_8601":"2020-11-12T13:34:16.660585Z","url":"https://files.pythonhosted.org/packages/37/09/f3cf20ea17bf6df13f6ecce5a24b5cb3751f2f3a26538d474145e086dda1/pdfCropMargins-1.0.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.2":[{"comment_text":"","digests":{"blake2b_256":"466f8c839866414f1aad0e2a29b4d0296923730fcdfeb4a079b24e8139dcbe6d","md5":"ddc33bb0c35df4e3e50b385757670ae5","sha256":"6e45028135fed7eaf2cba05dfcb87477f4b4fbb0c312d854a152262515ef0f71"},"downloads":-1,"filename":"pdfCropMargins-1.0.2.tar.gz","has_sig":false,"md5_digest":"ddc33bb0c35df4e3e50b385757670ae5","packagetype":"sdist","python_version":"source","requires_python":null,"size":1836565,"upload_time":"2020-11-16T04:34:04","upload_time_iso_8601":"2020-11-16T04:34:04.864399Z","url":"https://files.pythonhosted.org/packages/46/6f/8c839866414f1aad0e2a29b4d0296923730fcdfeb4a079b24e8139dcbe6d/pdfCropMargins-1.0.2.tar.gz","yanked":false,"yanked_reason":null}],"1.0.3":[{"comment_text":"","digests":{"blake2b_256":"b309fe0f1871bcecf1f2a3043cdfb9027d8d68d5261b9eafd60fad64a7094705","md5":"09797b84150bb846e424836ad97ee1ed","sha256":"0d54e7374f051f719c3cc29dd79b3e936ca7f47692a57ce85b408330fc7b5ea4"},"downloads":-1,"filename":"pdfCropMargins-1.0.3.tar.gz","has_sig":false,"md5_digest":"09797b84150bb846e424836ad97ee1ed","packagetype":"sdist","python_version":"source","requires_python":null,"size":1840791,"upload_time":"2021-02-14T06:23:47","upload_time_iso_8601":"2021-02-14T06:23:47.140128Z","url":"https://files.pythonhosted.org/packages/b3/09/fe0f1871bcecf1f2a3043cdfb9027d8d68d5261b9eafd60fad64a7094705/pdfCropMargins-1.0.3.tar.gz","yanked":false,"yanked_reason":null}],"1.0.4":[{"comment_text":"","digests":{"blake2b_256":"023d40d2a5f4db1653065a8eac5d3f45e7fffbbe0d87a7516bd0950044ec4634","md5":"634802377cdd2a54a2ba86e646fc3bea","sha256":"34f3982c934ad37084297092f6461ddd97a5271d053d57a9dfec368828c307b6"},"downloads":-1,"filename":"pdfCropMargins-1.0.4.tar.gz","has_sig":false,"md5_digest":"634802377cdd2a54a2ba86e646fc3bea","packagetype":"sdist","python_version":"source","requires_python":null,"size":1842797,"upload_time":"2021-03-01T23:00:36","upload_time_iso_8601":"2021-03-01T23:00:36.469203Z","url":"https://files.pythonhosted.org/packages/02/3d/40d2a5f4db1653065a8eac5d3f45e7fffbbe0d87a7516bd0950044ec4634/pdfCropMargins-1.0.4.tar.gz","yanked":false,"yanked_reason":null}],"1.0.5":[{"comment_text":"","digests":{"blake2b_256":"7ff1cfa4875dd77fb0d0a992c8579264ba75b665393d9a58533bb2231ae9f368","md5":"4fa2397e4aaefdc6a1ce677d8bf1bc90","sha256":"76fd16b3955e11b2a9fc3ad839342d6528f10324908a4a8f04f94ecda68205b3"},"downloads":-1,"filename":"pdfCropMargins-1.0.5.tar.gz","has_sig":false,"md5_digest":"4fa2397e4aaefdc6a1ce677d8bf1bc90","packagetype":"sdist","python_version":"source","requires_python":null,"size":1842794,"upload_time":"2021-03-09T03:32:14","upload_time_iso_8601":"2021-03-09T03:32:14.802183Z","url":"https://files.pythonhosted.org/packages/7f/f1/cfa4875dd77fb0d0a992c8579264ba75b665393d9a58533bb2231ae9f368/pdfCropMargins-1.0.5.tar.gz","yanked":false,"yanked_reason":null}],"1.0.6":[{"comment_text":"","digests":{"blake2b_256":"f4ada468aa2ce81001bbfe77ebbc5988dda795d392bd02f141e8f05efd6700ac","md5":"f51822ac877f7861afad6012ac6fbbd7","sha256":"d60b60687681fdcc2aa7e14449f2077ce715d7239c31f63e46c5c526a95509d8"},"downloads":-1,"filename":"pdfCropMargins-1.0.6.tar.gz","has_sig":false,"md5_digest":"f51822ac877f7861afad6012ac6fbbd7","packagetype":"sdist","python_version":"source","requires_python":null,"size":1842859,"upload_time":"2022-06-15T20:07:17","upload_time_iso_8601":"2022-06-15T20:07:17.463128Z","url":"https://files.pythonhosted.org/packages/f4/ad/a468aa2ce81001bbfe77ebbc5988dda795d392bd02f141e8f05efd6700ac/pdfCropMargins-1.0.6.tar.gz","yanked":false,"yanked_reason":null}],"1.0.7":[{"comment_text":"","digests":{"blake2b_256":"453ffe13f960ed7833d1b9eb54f60ec049ac503016ae341f89325c0d06792bae","md5":"c390778c7ad5150dc8560a8bfc0d7db4","sha256":"666544855417b595ac23d23c120d8775e37df8f2a2535889edecfb5049380cbb"},"downloads":-1,"filename":"pdfCropMargins-1.0.7.tar.gz","has_sig":false,"md5_digest":"c390778c7ad5150dc8560a8bfc0d7db4","packagetype":"sdist","python_version":"source","requires_python":null,"size":1842774,"upload_time":"2022-06-20T18:46:07","upload_time_iso_8601":"2022-06-20T18:46:07.556368Z","url":"https://files.pythonhosted.org/packages/45/3f/fe13f960ed7833d1b9eb54f60ec049ac503016ae341f89325c0d06792bae/pdfCropMargins-1.0.7.tar.gz","yanked":false,"yanked_reason":null}],"1.0.8":[{"comment_text":"","digests":{"blake2b_256":"859dec327c75f0cfaa6af6b72af5c52f62ed724ee94fffa34d21b2916ba9e4ee","md5":"ad016c46797a54a887e39c28a3eb564e","sha256":"0cd37b2fc81b25bd70f3c581b3e948cbad35d6bbf790b3656456b066fe45a93d"},"downloads":-1,"filename":"pdfCropMargins-1.0.8.tar.gz","has_sig":false,"md5_digest":"ad016c46797a54a887e39c28a3eb564e","packagetype":"sdist","python_version":"source","requires_python":null,"size":1843914,"upload_time":"2022-06-20T21:59:34","upload_time_iso_8601":"2022-06-20T21:59:34.845222Z","url":"https://files.pythonhosted.org/packages/85/9d/ec327c75f0cfaa6af6b72af5c52f62ed724ee94fffa34d21b2916ba9e4ee/pdfCropMargins-1.0.8.tar.gz","yanked":false,"yanked_reason":null}],"1.0.9":[{"comment_text":"","digests":{"blake2b_256":"24d9d9bb0286d9c8e0aa2a752c7bad654f6491daefaab6b1737544ab62caf0db","md5":"e60e276060faa5ba9316dce475e2fa50","sha256":"e9b1304e07955eeb0a3b440534f5ee8c0d849ff98dd433db0cee1346be4a05e2"},"downloads":-1,"filename":"pdfCropMargins-1.0.9.tar.gz","has_sig":false,"md5_digest":"e60e276060faa5ba9316dce475e2fa50","packagetype":"sdist","python_version":"source","requires_python":null,"size":1843993,"upload_time":"2022-07-15T01:27:20","upload_time_iso_8601":"2022-07-15T01:27:20.105419Z","url":"https://files.pythonhosted.org/packages/24/d9/d9bb0286d9c8e0aa2a752c7bad654f6491daefaab6b1737544ab62caf0db/pdfCropMargins-1.0.9.tar.gz","yanked":false,"yanked_reason":null}],"1.1.0":[{"comment_text":"","digests":{"blake2b_256":"80de1bd6f5dd3ff574014854a5e96e36bd627be5d0e9d36f5971a59adcb7d255","md5":"2ded83e30c3efb7dee5b23c2344edffd","sha256":"d7ae1f2f619460a45defb810c74560512bf4fe96d6ea4e271c4b49bc78838ac0"},"downloads":-1,"filename":"pdfCropMargins-1.1.0-py3-none-any.whl","has_sig":false,"md5_digest":"2ded83e30c3efb7dee5b23c2344edffd","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":1828704,"upload_time":"2022-12-07T18:04:10","upload_time_iso_8601":"2022-12-07T18:04:10.109952Z","url":"https://files.pythonhosted.org/packages/80/de/1bd6f5dd3ff574014854a5e96e36bd627be5d0e9d36f5971a59adcb7d255/pdfCropMargins-1.1.0-py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.1.1":[{"comment_text":"","digests":{"blake2b_256":"2bba581c47540efe18cd63e430c2261f01101771ac16a03bd8aa20d2890b985b","md5":"90508bae4aa7f1b9aca5c3ab4292c7a1","sha256":"18e35c8dc7055a40a2b4ec93b1d916a257e3d0a059e190b8bb3b6642e869077b"},"downloads":-1,"filename":"pdfCropMargins-1.1.1-py3-none-any.whl","has_sig":false,"md5_digest":"90508bae4aa7f1b9aca5c3ab4292c7a1","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":1829032,"upload_time":"2022-12-07T18:34:21","upload_time_iso_8601":"2022-12-07T18:34:21.632520Z","url":"https://files.pythonhosted.org/packages/2b/ba/581c47540efe18cd63e430c2261f01101771ac16a03bd8aa20d2890b985b/pdfCropMargins-1.1.1-py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.1.10":[{"comment_text":"","digests":{"blake2b_256":"50559fd2dc427681556fac33b055422793153b33ff88386f85fb4135b6681db0","md5":"feab8421587a737651a55f6c8e243d8c","sha256":"a4fa84f05859b43e5e2f9224650908c418f8204d8761b368f9e7a7cb8fbdc4d0"},"downloads":-1,"filename":"pdfCropMargins-1.1.10-py2.py3-none-any.whl","has_sig":false,"md5_digest":"feab8421587a737651a55f6c8e243d8c","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1833951,"upload_time":"2023-01-01T22:29:51","upload_time_iso_8601":"2023-01-01T22:29:51.735662Z","url":"https://files.pythonhosted.org/packages/50/55/9fd2dc427681556fac33b055422793153b33ff88386f85fb4135b6681db0/pdfCropMargins-1.1.10-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.1.11":[{"comment_text":"","digests":{"blake2b_256":"59101309ac613fe8fceaba78467befadef6c783c1d7810feef5dc3aed7a1a75b","md5":"d4f1651366efa1a8a0ca3ac8b2c50109","sha256":"8af389394ba0107e8e0a57ed1629ea0f5431984db9419b7cee5b6b83f531e007"},"downloads":-1,"filename":"pdfCropMargins-1.1.11-py2.py3-none-any.whl","has_sig":false,"md5_digest":"d4f1651366efa1a8a0ca3ac8b2c50109","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1833984,"upload_time":"2023-01-01T23:09:12","upload_time_iso_8601":"2023-01-01T23:09:12.650122Z","url":"https://files.pythonhosted.org/packages/59/10/1309ac613fe8fceaba78467befadef6c783c1d7810feef5dc3aed7a1a75b/pdfCropMargins-1.1.11-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.1.12":[{"comment_text":"","digests":{"blake2b_256":"7ec43b6cbb754e35294521ecdaaa3d367e0af1d16d18d46eaa82abe760c1d754","md5":"4afc6d783434cc9ef7ae96ad8fac1de8","sha256":"bc7efca583aa35adbdac9a91c2e02e22b5f8ca4a4015e1ba90958d57c12d2b17"},"downloads":-1,"filename":"pdfCropMargins-1.1.12-py2.py3-none-any.whl","has_sig":false,"md5_digest":"4afc6d783434cc9ef7ae96ad8fac1de8","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1834132,"upload_time":"2023-01-25T03:16:11","upload_time_iso_8601":"2023-01-25T03:16:11.418071Z","url":"https://files.pythonhosted.org/packages/7e/c4/3b6cbb754e35294521ecdaaa3d367e0af1d16d18d46eaa82abe760c1d754/pdfCropMargins-1.1.12-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.1.13":[{"comment_text":"","digests":{"blake2b_256":"aa2b856dcfb66b77ab086549af093a3608240ac7a93d0f534d51eb3d38728868","md5":"2060bc8849d2789bcc66bef17874e822","sha256":"978c76ce184411073844ce16eda890151e8559cb5c9ef98efbe163330f153436"},"downloads":-1,"filename":"pdfCropMargins-1.1.13-py2.py3-none-any.whl","has_sig":false,"md5_digest":"2060bc8849d2789bcc66bef17874e822","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1834230,"upload_time":"2023-01-25T20:58:31","upload_time_iso_8601":"2023-01-25T20:58:31.004378Z","url":"https://files.pythonhosted.org/packages/aa/2b/856dcfb66b77ab086549af093a3608240ac7a93d0f534d51eb3d38728868/pdfCropMargins-1.1.13-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.1.14":[{"comment_text":"","digests":{"blake2b_256":"f893095a03240e3c952cd5393860cd6e9400aafd6655a4829d1e7c3438aacb8d","md5":"568a5e334a3c0839d477dc1ff95dbaa3","sha256":"df21f89be3678a3f9e08fe28fe05f0efea7ef927f5960ca337bbec4de333c462"},"downloads":-1,"filename":"pdfCropMargins-1.1.14-py2.py3-none-any.whl","has_sig":false,"md5_digest":"568a5e334a3c0839d477dc1ff95dbaa3","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1837433,"upload_time":"2023-03-04T02:00:47","upload_time_iso_8601":"2023-03-04T02:00:47.195963Z","url":"https://files.pythonhosted.org/packages/f8/93/095a03240e3c952cd5393860cd6e9400aafd6655a4829d1e7c3438aacb8d/pdfCropMargins-1.1.14-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.1.15":[{"comment_text":"","digests":{"blake2b_256":"4705022c3276a025f5c816e90afcf2417ceea6777cae698dd6757900bba16fb8","md5":"b13d6a16bd8181ed69c13f97ff83b92f","sha256":"0f7477f822025d1a953958a78e82b8afc8a031891c97321e9f3516edd7482bb8"},"downloads":-1,"filename":"pdfCropMargins-1.1.15-py2.py3-none-any.whl","has_sig":false,"md5_digest":"b13d6a16bd8181ed69c13f97ff83b92f","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1837438,"upload_time":"2023-03-04T04:17:31","upload_time_iso_8601":"2023-03-04T04:17:31.685412Z","url":"https://files.pythonhosted.org/packages/47/05/022c3276a025f5c816e90afcf2417ceea6777cae698dd6757900bba16fb8/pdfCropMargins-1.1.15-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.1.16":[{"comment_text":"","digests":{"blake2b_256":"05179d47973c54335ddcbcb1da7cfd0d26dab3e34c5d5c1510258525148a7e68","md5":"e673b53bb658f934943a2a75cce432c9","sha256":"40ba1aecb3542ff53768e0373cd90dcaaf2422673fc2aab4ab2aa4006777fe64"},"downloads":-1,"filename":"pdfCropMargins-1.1.16-py2.py3-none-any.whl","has_sig":false,"md5_digest":"e673b53bb658f934943a2a75cce432c9","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1837820,"upload_time":"2023-03-10T02:49:00","upload_time_iso_8601":"2023-03-10T02:49:00.246036Z","url":"https://files.pythonhosted.org/packages/05/17/9d47973c54335ddcbcb1da7cfd0d26dab3e34c5d5c1510258525148a7e68/pdfCropMargins-1.1.16-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.1.17":[{"comment_text":"","digests":{"blake2b_256":"2695dddfbd77076f00a970286bc50b86342c64628a84ed2fa8b55d104027bbb0","md5":"a89012caafeb4c43327f0d22ddce795a","sha256":"b45bcb8ee82059ee3eac39b64c21408753ea87cf195c524cb115ec0ca8cf457f"},"downloads":-1,"filename":"pdfCropMargins-1.1.17-py2.py3-none-any.whl","has_sig":false,"md5_digest":"a89012caafeb4c43327f0d22ddce795a","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1839659,"upload_time":"2023-03-12T01:22:32","upload_time_iso_8601":"2023-03-12T01:22:32.157960Z","url":"https://files.pythonhosted.org/packages/26/95/dddfbd77076f00a970286bc50b86342c64628a84ed2fa8b55d104027bbb0/pdfCropMargins-1.1.17-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.1.18":[{"comment_text":"","digests":{"blake2b_256":"d89dc5ae21fa7b7108dcf27ad3cbd4ec7300773f20eb0854f43f8b99c14f1ae8","md5":"2ef978dbdfdbc18c1382916ee0e6a58a","sha256":"b98136229d829c8d5a3ab93574cb45e04d32d3f64159535d74a67798e16b31cc"},"downloads":-1,"filename":"pdfCropMargins-1.1.18-py2.py3-none-any.whl","has_sig":false,"md5_digest":"2ef978dbdfdbc18c1382916ee0e6a58a","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1840822,"upload_time":"2023-03-12T23:01:53","upload_time_iso_8601":"2023-03-12T23:01:53.641062Z","url":"https://files.pythonhosted.org/packages/d8/9d/c5ae21fa7b7108dcf27ad3cbd4ec7300773f20eb0854f43f8b99c14f1ae8/pdfCropMargins-1.1.18-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.1.2":[{"comment_text":"","digests":{"blake2b_256":"e4904e02a42a6464c897ad98395e30c4864722a369eb9a71460d71212fb46e24","md5":"ab344c3b0c1a47d94fb6d40e5fc644cd","sha256":"e962719be1b9ef69fb3e80d2f205fece7a7a87068818ff522652cd85b6deb19c"},"downloads":-1,"filename":"pdfCropMargins-1.1.2-py3-none-any.whl","has_sig":false,"md5_digest":"ab344c3b0c1a47d94fb6d40e5fc644cd","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":1830078,"upload_time":"2022-12-10T02:21:11","upload_time_iso_8601":"2022-12-10T02:21:11.167995Z","url":"https://files.pythonhosted.org/packages/e4/90/4e02a42a6464c897ad98395e30c4864722a369eb9a71460d71212fb46e24/pdfCropMargins-1.1.2-py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.1.3":[{"comment_text":"","digests":{"blake2b_256":"713687bf5a5791650957ab0aa7353041a57e00b1cec1fa991c4d633cd16ea211","md5":"f2800aec11a87da71cb3c910118453c9","sha256":"25e95ae7e1207243d5a61b018b55cef453baeb1719070ac36cf16246545deb9b"},"downloads":-1,"filename":"pdfCropMargins-1.1.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"f2800aec11a87da71cb3c910118453c9","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1830090,"upload_time":"2022-12-10T04:04:49","upload_time_iso_8601":"2022-12-10T04:04:49.290486Z","url":"https://files.pythonhosted.org/packages/71/36/87bf5a5791650957ab0aa7353041a57e00b1cec1fa991c4d633cd16ea211/pdfCropMargins-1.1.3-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.1.4":[{"comment_text":"","digests":{"blake2b_256":"a6ef4ae38f90ed56cf0087006fad9c0ea06ab17981dfed7bce636241c53a9fb6","md5":"12437d20fd304bbdbdf13a9f78788809","sha256":"b0b1d4c775dc83c0b5324e55f04079a997e8f829cfa5784b08a7fa6da4a99a7a"},"downloads":-1,"filename":"pdfCropMargins-1.1.4-py2.py3-none-any.whl","has_sig":false,"md5_digest":"12437d20fd304bbdbdf13a9f78788809","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1830274,"upload_time":"2022-12-12T23:08:15","upload_time_iso_8601":"2022-12-12T23:08:15.561568Z","url":"https://files.pythonhosted.org/packages/a6/ef/4ae38f90ed56cf0087006fad9c0ea06ab17981dfed7bce636241c53a9fb6/pdfCropMargins-1.1.4-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.1.5":[{"comment_text":"","digests":{"blake2b_256":"0ffb73228692fcfd91f1c0493ebb8e6bbea8b0fce4db0b8448c366e7b9d81435","md5":"8ac2040f96880dc6dfd02c326edcbf0d","sha256":"fa58a5ca7e406aa50bc1752a2a46632cb8f84639ee5146a1109a80279392373c"},"downloads":-1,"filename":"pdfCropMargins-1.1.5-py2.py3-none-any.whl","has_sig":false,"md5_digest":"8ac2040f96880dc6dfd02c326edcbf0d","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1830308,"upload_time":"2022-12-13T22:20:38","upload_time_iso_8601":"2022-12-13T22:20:38.550653Z","url":"https://files.pythonhosted.org/packages/0f/fb/73228692fcfd91f1c0493ebb8e6bbea8b0fce4db0b8448c366e7b9d81435/pdfCropMargins-1.1.5-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.1.6":[{"comment_text":"","digests":{"blake2b_256":"8dc6e3c89f46d9576f0fe4b4e3ea7e8cf938bfcf1e7415f1ac8a6b94c3f7423f","md5":"c9ea985636b6d8ba8060f7d430b3a1fc","sha256":"67f5e56eff4de2a16e52ec8c957bad230e3e908efd3816004e1c1e2140cc21f3"},"downloads":-1,"filename":"pdfCropMargins-1.1.6-py2.py3-none-any.whl","has_sig":false,"md5_digest":"c9ea985636b6d8ba8060f7d430b3a1fc","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1830343,"upload_time":"2022-12-13T23:46:33","upload_time_iso_8601":"2022-12-13T23:46:33.081997Z","url":"https://files.pythonhosted.org/packages/8d/c6/e3c89f46d9576f0fe4b4e3ea7e8cf938bfcf1e7415f1ac8a6b94c3f7423f/pdfCropMargins-1.1.6-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.1.7":[{"comment_text":"","digests":{"blake2b_256":"57cd4e036d84627e20814f20d8cdea476790519fcfd588e0ab1fdcbb59c68147","md5":"13f211fc8e35a1ef1df0fb1fd6a22fd3","sha256":"09f5286aad3b2ece4f6f3f323cc42150c7e865aea50154dcf2f1cad62a1c87c3"},"downloads":-1,"filename":"pdfCropMargins-1.1.7-py2.py3-none-any.whl","has_sig":false,"md5_digest":"13f211fc8e35a1ef1df0fb1fd6a22fd3","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1831671,"upload_time":"2022-12-15T01:07:00","upload_time_iso_8601":"2022-12-15T01:07:00.202842Z","url":"https://files.pythonhosted.org/packages/57/cd/4e036d84627e20814f20d8cdea476790519fcfd588e0ab1fdcbb59c68147/pdfCropMargins-1.1.7-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.1.8":[{"comment_text":"","digests":{"blake2b_256":"1895dac8d168c2db2a03c6e3eb5010895ada6d3854563650ec162060c3c71964","md5":"23890eb57332d0137f2869bbfb9258ec","sha256":"45b7ee0116f5923caa67ee8c9b54fda82dbf2dbb5dcaae8498d430369aa2d21c"},"downloads":-1,"filename":"pdfCropMargins-1.1.8-py2.py3-none-any.whl","has_sig":false,"md5_digest":"23890eb57332d0137f2869bbfb9258ec","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1832923,"upload_time":"2022-12-17T01:30:03","upload_time_iso_8601":"2022-12-17T01:30:03.131819Z","url":"https://files.pythonhosted.org/packages/18/95/dac8d168c2db2a03c6e3eb5010895ada6d3854563650ec162060c3c71964/pdfCropMargins-1.1.8-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.1.9":[{"comment_text":"","digests":{"blake2b_256":"2f0d049c5fffd4d4e0b36b61e60844d896facf9dbe6b9e593885e3b1347f757a","md5":"42e2ed259ba73ee38979dd02d93d1d8c","sha256":"fc39d93f266814d9ad23a5e2be66a01692a94adede303f73c01d8f43ce73a835"},"downloads":-1,"filename":"pdfCropMargins-1.1.9-py2.py3-none-any.whl","has_sig":false,"md5_digest":"42e2ed259ba73ee38979dd02d93d1d8c","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1832933,"upload_time":"2022-12-29T22:12:53","upload_time_iso_8601":"2022-12-29T22:12:53.148932Z","url":"https://files.pythonhosted.org/packages/2f/0d/049c5fffd4d4e0b36b61e60844d896facf9dbe6b9e593885e3b1347f757a/pdfCropMargins-1.1.9-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.2.0":[{"comment_text":"","digests":{"blake2b_256":"73c9deb58ed614a84837ecdca7c91bc4956e7fc5f61c868cc0ea63918c71693b","md5":"9e07c9f1fc4508c6776aeccb2835ba94","sha256":"e1dbfeb316f6407081cbf6a2edd45feded5ad16bc7a087c97fe4448511e15236"},"downloads":-1,"filename":"pdfCropMargins-1.2.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"9e07c9f1fc4508c6776aeccb2835ba94","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1839751,"upload_time":"2023-05-31T00:07:11","upload_time_iso_8601":"2023-05-31T00:07:11.878098Z","url":"https://files.pythonhosted.org/packages/73/c9/deb58ed614a84837ecdca7c91bc4956e7fc5f61c868cc0ea63918c71693b/pdfCropMargins-1.2.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"2.0.0":[{"comment_text":"","digests":{"blake2b_256":"92907eabf2918df35824fbbb62ffce32fd3aea753a3790a20baf12ab63c8b292","md5":"a09dcaf9e7382ad47480a86bc1f3147e","sha256":"369f55f0a44cb5fdbe7e543043751d6f7bb71a814fa30afb66af9ff3ab186183"},"downloads":-1,"filename":"pdfCropMargins-2.0.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"a09dcaf9e7382ad47480a86bc1f3147e","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1839346,"upload_time":"2023-06-09T17:58:57","upload_time_iso_8601":"2023-06-09T17:58:57.824689Z","url":"https://files.pythonhosted.org/packages/92/90/7eabf2918df35824fbbb62ffce32fd3aea753a3790a20baf12ab63c8b292/pdfCropMargins-2.0.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"2.0.1":[{"comment_text":"","digests":{"blake2b_256":"6eca4c1eaa83cedadd7d3d339e89edb20c76f6350257987bf1994d5faf68d1d0","md5":"b1336abd2eedc880d8b731b8dc251cf5","sha256":"13f189f642da7d86e1257f6691447f36ada116f67dc949b7de2251395b636483"},"downloads":-1,"filename":"pdfCropMargins-2.0.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"b1336abd2eedc880d8b731b8dc251cf5","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1839921,"upload_time":"2023-06-22T20:29:11","upload_time_iso_8601":"2023-06-22T20:29:11.855742Z","url":"https://files.pythonhosted.org/packages/6e/ca/4c1eaa83cedadd7d3d339e89edb20c76f6350257987bf1994d5faf68d1d0/pdfCropMargins-2.0.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"2.0.2":[{"comment_text":"","digests":{"blake2b_256":"025a0a4f125ee1dbeb97f42e959544a5b3f13df1fd0e767fea7caf889ab981b1","md5":"2969bd06c7988e4ad9189b5b9ce5a20c","sha256":"c4baae3bd24c3dcf7a6e9f00b446bd027597d2ed12e4baf90f3238178e7cce4a"},"downloads":-1,"filename":"pdfCropMargins-2.0.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"2969bd06c7988e4ad9189b5b9ce5a20c","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1840199,"upload_time":"2023-06-22T21:18:36","upload_time_iso_8601":"2023-06-22T21:18:36.996589Z","url":"https://files.pythonhosted.org/packages/02/5a/0a4f125ee1dbeb97f42e959544a5b3f13df1fd0e767fea7caf889ab981b1/pdfCropMargins-2.0.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"2.0.3":[{"comment_text":"","digests":{"blake2b_256":"92ece5869bafd3d41243f7f9ed047fb073f9be1ca897b577bfafb15a36f9e433","md5":"d7ad34cc2f4f83cbe8c158ccf9133382","sha256":"4aca57022f84a49e366ef7e5ed836f43ac09f28854f4649274e1bb258dcb2ce2"},"downloads":-1,"filename":"pdfCropMargins-2.0.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"d7ad34cc2f4f83cbe8c158ccf9133382","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1840612,"upload_time":"2023-07-04T23:05:05","upload_time_iso_8601":"2023-07-04T23:05:05.019589Z","url":"https://files.pythonhosted.org/packages/92/ec/e5869bafd3d41243f7f9ed047fb073f9be1ca897b577bfafb15a36f9e433/pdfCropMargins-2.0.3-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"2.1.0":[{"comment_text":"","digests":{"blake2b_256":"bb410f61983c06e1ad36bb81762ca70a861ef348bb9a27019b78bccd4ce0272a","md5":"66013407a8ce18a47d8a9bf7a0eca4e0","sha256":"e1805bd6038f96488853f41cddac91e9688c1d96485d85ca144f3cf47d7e912e"},"downloads":-1,"filename":"pdfCropMargins-2.1.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"66013407a8ce18a47d8a9bf7a0eca4e0","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1841294,"upload_time":"2024-03-29T19:47:23","upload_time_iso_8601":"2024-03-29T19:47:23.437992Z","url":"https://files.pythonhosted.org/packages/bb/41/0f61983c06e1ad36bb81762ca70a861ef348bb9a27019b78bccd4ce0272a/pdfCropMargins-2.1.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"2.1.1":[{"comment_text":"","digests":{"blake2b_256":"657c75e83350be2d55de194a8c36ea5599cef360df784901c5f9c4f969783c1f","md5":"83b18bbdf0cb1f0c84c6a6b647aa85d2","sha256":"7f3f912d6285b4de46cf4bc1d86c9f545e103bd441e392a0ca0e337d5a4f8237"},"downloads":-1,"filename":"pdfCropMargins-2.1.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"83b18bbdf0cb1f0c84c6a6b647aa85d2","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1841262,"upload_time":"2024-03-31T17:54:22","upload_time_iso_8601":"2024-03-31T17:54:22.209486Z","url":"https://files.pythonhosted.org/packages/65/7c/75e83350be2d55de194a8c36ea5599cef360df784901c5f9c4f969783c1f/pdfCropMargins-2.1.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"2.1.2":[{"comment_text":"","digests":{"blake2b_256":"adaf17707613067642f6ca164e9772ac4af3d81647b44778cbf62cb8ba4a0d9a","md5":"d5e3f85db0266045da472bf2069c3582","sha256":"3c30f697d051d854edcdbb4d64fa2f79882ed849505ebbbfe16b8609f34ac7e0"},"downloads":-1,"filename":"pdfCropMargins-2.1.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"d5e3f85db0266045da472bf2069c3582","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":1841793,"upload_time":"2024-04-13T22:06:54","upload_time_iso_8601":"2024-04-13T22:06:54.598246Z","url":"https://files.pythonhosted.org/packages/ad/af/17707613067642f6ca164e9772ac4af3d81647b44778cbf62cb8ba4a0d9a/pdfCropMargins-2.1.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"2.1.3":[{"comment_text":"","digests":{"blake2b_256":"0ff6d346a813966d4b8d968f96271a198854cc35c5ed83656c34795b12cc5d45","md5":"58da6c780a3a4d5fc2a0f86ff1cdd5ad","sha256":"f9d38a2a8b451b850e20d6e9e76e65bc1f7e4c99ca8a2877fd7d002337e5b4e2"},"downloads":-1,"filename":"pdfCropMargins-2.1.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"58da6c780a3a4d5fc2a0f86ff1cdd5ad","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":2525777,"upload_time":"2024-06-06T01:45:21","upload_time_iso_8601":"2024-06-06T01:45:21.892675Z","url":"https://files.pythonhosted.org/packages/0f/f6/d346a813966d4b8d968f96271a198854cc35c5ed83656c34795b12cc5d45/pdfCropMargins-2.1.3-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"0ff6d346a813966d4b8d968f96271a198854cc35c5ed83656c34795b12cc5d45","md5":"58da6c780a3a4d5fc2a0f86ff1cdd5ad","sha256":"f9d38a2a8b451b850e20d6e9e76e65bc1f7e4c99ca8a2877fd7d002337e5b4e2"},"downloads":-1,"filename":"pdfCropMargins-2.1.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"58da6c780a3a4d5fc2a0f86ff1cdd5ad","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":2525777,"upload_time":"2024-06-06T01:45:21","upload_time_iso_8601":"2024-06-06T01:45:21.892675Z","url":"https://files.pythonhosted.org/packages/0f/f6/d346a813966d4b8d968f96271a198854cc35c5ed83656c34795b12cc5d45/pdfCropMargins-2.1.3-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
