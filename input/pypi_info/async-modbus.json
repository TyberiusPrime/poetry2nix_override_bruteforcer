{"info":{"author":"Tiago Coutinho","author_email":"coutinhotiago@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 2 - Pre-Alpha","Intended Audience :: Developers","Natural Language :: English","Programming Language :: Python :: 3","Programming Language :: Python :: 3 :: Only","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: Implementation :: CPython"],"description":"# Async ModBus\n\n[![Async Modbus][pypi-version]](https://pypi.python.org/pypi/async_modbus)\n[![Python Versions][pypi-python-versions]](https://pypi.python.org/pypi/async_modbus)\n[![CI Status][CI]](https://github.com/tiagocoutinho/async_modbus/actions/workflows/ci.yml)\n![License][license]\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)\n\n\nAsynchronous (as in python async/await) modbus python 3 client library.\nA thin layer on on top of the venerable\n[umodbus](https://github.com/AdvancedClimateSystems/uModbus) library providing\nan object oriented client API.\n\nasync_modbus is async library agnostic. You should be able to use it with\n[asyncio](https://docs.python.org/3/library/asyncio.html),\n[curio](https://curio.rtfd.io), [trio](https://trio.rtfd.io) or\n[anyio](https://anyio.rtfd.io).\n\nIt expects an object with the same interface as\n[StreamReader](https://docs.python.org/3/library/asyncio-stream.html#streamreader)\nand\n[StreamWriter](https://docs.python.org/3/library/asyncio-stream.html#streamwriter)\nso you may need to write a thin wrapper if you are not using asyncio.\nThe examples below show how to use it with curio.\n\nNote: the `modbus_for_url()` relies on the\n[connio](https://github.com/tiagocoutinho/connio) library which relies on\nthe asyncio event loop so you it's usage is limited to asyncio applications.\n\n\n## Why another modbus library?\n\nThis library is not a re-implementation of the ModBus communication protocol.\nYou can view it instead as a complement to the\n[umodbus](https://github.com/AdvancedClimateSystems/uModbus) library.\n\nHere is what async_modbus provides on top of umodbus:\n\n* Simple yet powerful object oriented API\n* Convenient `modbus_for_url()` helper function. Type an URL and you're ready\n  to go.\n* when appropriate, [numpy](https://numpy.org) arrays are used. It's usage not\n  only reduces the memory footprint and increases speed, but also makes it easy\n  for users to efficiently reformat data.\n* Compatible with the [connio](https://github.com/tiagocoutinho/connio),\n  [sockio](https://github.com/tiagocoutinho/sockio) and\n  [serialio](https://github.com/tiagocoutinho/serialio) libraries which provide\n  transparent socket re-connection among other features.\n\n\n## Installation\n\nFrom within your favorite python environment type:\n\n`$ pip install async_modbus`\n\nNumpy will be used if installed. You can install it yourself, or include the optional dependency:\n\n`$ pip install async_modbus[numpy]`\n\n## Library\n\nThe core of the async_modbus library consists of a `modbus_for_url()` function\nand the two classes `AsyncTCPClient` and `AsyncRTUClient`.\n\nHere are some examples:\n\n### asyncio examples\n\n*simple TCP client*\n\n```python\nimport asyncio\n\nimport numpy\n\nfrom async_modbus import modbus_for_url\n\n\nasync def main():\n\n    client = modbus_for_url(\"tcp://localhost:15020\")\n\n    values = numpy.array([1, 0, 1, 1])  # would also work with list<bool or int>\n    reply = await client.write_coils(slave_id=1, starting_address=1, values=values)\n    assert reply is len(values)\n\n    reply = await client.read_coils(slave_id=1, starting_address=1, quantity=len(values))\n    assert (reply == values).all()\n\n\nasyncio.run(main())\n```\n\n*RTU on local serial line with custom serial options*\n\n```python\nimport asyncio\n\nfrom async_modbus import modbus_for_url\n\n\nasync def main():\n\n    client = modbus_for_url(\"serial:///dev/ttyS0\", {\"baudrate\":19200, \"parity\":\"E\"})\n\n    values = [1, 0, 1, 1]\n    reply = await client.write_coils(slave_id=1, starting_address=1, values=values)\n    assert reply is len(values)\n\n    reply = await client.read_discrete_inputs(slave_id=1, starting_address=1, quantity=len(values))\n    assert (reply == values).all()\n\n\nasyncio.run(main())\n```\n\n*RTU over remote serial line using RFC2217*\n\n```python\nimport asyncio\n\nfrom async_modbus import modbus_for_url\n\n\nasync def main():\n\n    client = modbus_for_url(\"rfc2217://moxa.acme.org:6610\")\n\n    values = [1, 0, 1, 1]\n    reply = await client.write_coils(slave_id=1, starting_address=1, values=values)\n    assert reply is len(values)\n\n    reply = await client.read_discrete_inputs(slave_id=1, starting_address=1, quantity=len(values))\n    assert (reply == values).all()\n\n\nasyncio.run(main())\n```\n\n*asyncio TCP streams*\n\n```python\nimport asyncio\n\nimport numpy\n\nfrom async_modbus import AsyncTCPClient\n\n\nasync def main():\n\n    reader, writer = await asyncio.open_connection('localhost', 15020)\n    client = AsyncTCPClient((reader, writer))\n\n    values = numpy.array([0, 2**15 - 1, 10, 3, 32766])\n    reply = await client.write_registers(slave_id=1, starting_address=1, values=values)\n    assert reply is len(values)\n\n    reply = await client.read_holding_registers(slave_id=1, starting_address=1, quantity=len(values))\n    assert (reply == values).all()\n\n    writer.close()\n    await writer.wait_closed()\n\n\nasyncio.run(main())\n```\n\n*async serial line RTU using remote raw TCP*\n\n```python\nimport asyncio\n\nimport numpy\n\nfrom async_modbus import AsyncRTUClient\nfrom serial_asyncio import open_serial_connection\n\n\nasync def main():\n\n    reader, writer = await open_serial_connection(url=\"socket://moxa.acme.org:6610\")\n    client = AsyncRTUClient((reader, writer))\n\n    values = [0, 2**15 - 1, 10, 3, 32766]\n    reply = await client.write_registers(slave_id=1, starting_address=1, values=values)\n    assert reply is len(values)\n\n    reply = await client.read_input_registers(slave_id=1, starting_address=1, quantity=len(values))\n    assert (reply == values).all()\n\n    writer.close()\n    await writer.wait_closed()\n\n\nasyncio.run(main())\n```\n\n### curio examples\n\n**curio TCP streams**\n\n```python\nimport curio\nfrom async_modbus import AsyncTCPClient\n\n\nasync def main():\n\n    sock = await curio.open_connection(\"0\", 15020)\n    client = AsyncTCPClient(sock.as_stream())\n\n    values = [1, 0, 1, 1]\n    reply = await client.write_coils(slave_id=1, starting_address=1, values=values)\n    assert reply is len(values)\n\n    reply = await client.read_coils(slave_id=1, starting_address=1, quantity=len(values))\n    assert (reply == values).all()\n\n    await sock.close()\n```\n\n\n## Credits\n\n### Development Lead\n\n* Tiago Coutinho <coutinhotiago@gmail.com>\n\n### Contributors\n\nNone yet. Why not be the first?\n\n### Special thanks to\n\n* [umodbus](https://github.com/AdvancedClimateSystems/uModbus)\n* [numpy](https://numpy.org)\n\n\n[pypi-python-versions]: https://img.shields.io/pypi/pyversions/async_modbus.svg\n[pypi-version]: https://img.shields.io/pypi/v/async_modbus.svg\n[pypi-status]: https://img.shields.io/pypi/status/async_modbus.svg\n[license]: https://img.shields.io/pypi/l/async_modbus.svg\n[CI]: https://github.com/tiagocoutinho/async_modbus/actions/workflows/ci.yml/badge.svg\n\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/tiagocoutinho/async-modbus","keywords":"modbus,tcp,rtu,async_modbus,asyncio","license":"GNU General Public License v3","maintainer":"","maintainer_email":"","name":"async-modbus","package_url":"https://pypi.org/project/async-modbus/","platform":null,"project_url":"https://pypi.org/project/async-modbus/","project_urls":{"Homepage":"https://github.com/tiagocoutinho/async-modbus"},"provides_extra":null,"release_url":"https://pypi.org/project/async-modbus/0.2.1/","requires_dist":["connio (>=0.2.0)","umodbus (>=1.0.4)","numpy (>=1.1) ; extra == 'numpy'","pytest (>=6) ; extra == 'tests'","pytest-asyncio ; extra == 'tests'","pytest-cov ; extra == 'tests'"],"requires_python":">=3.6","summary":"Async ModBus python library","version":"0.2.1","yanked":false,"yanked_reason":null},"last_serial":13129282,"releases":{"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"13da0a8f590375a6a5085a4a9070e82fd5bdc648b9a75c947f709c0233e09b89","md5":"7b2c4cb7994e63149e2945b0aeee4418","sha256":"86f4f98e64a5a3e8032532e51d8d1a8986433605b3b9d7274541c7e406fbf76a"},"downloads":-1,"filename":"async_modbus-0.1.0.tar.gz","has_sig":false,"md5_digest":"7b2c4cb7994e63149e2945b0aeee4418","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":9716,"upload_time":"2020-11-08T18:48:32","upload_time_iso_8601":"2020-11-08T18:48:32.227958Z","url":"https://files.pythonhosted.org/packages/13/da/0a8f590375a6a5085a4a9070e82fd5bdc648b9a75c947f709c0233e09b89/async_modbus-0.1.0.tar.gz","yanked":false,"yanked_reason":null}],"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"225f202f8dc687530be8f5f2f4259ca0664ebd8eb293a3b52556644f5f53a150","md5":"17425fe1b295d5eae9299e5fb7917fe2","sha256":"ea8372bc0cfeb74e96f1af7e400715fbe54d3eec1edc4948ff92b1c38218bdb3"},"downloads":-1,"filename":"async_modbus-0.1.1.tar.gz","has_sig":false,"md5_digest":"17425fe1b295d5eae9299e5fb7917fe2","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":9786,"upload_time":"2020-11-08T18:55:43","upload_time_iso_8601":"2020-11-08T18:55:43.639232Z","url":"https://files.pythonhosted.org/packages/22/5f/202f8dc687530be8f5f2f4259ca0664ebd8eb293a3b52556644f5f53a150/async_modbus-0.1.1.tar.gz","yanked":false,"yanked_reason":null}],"0.1.2":[{"comment_text":"","digests":{"blake2b_256":"59481516e8a49e59401ef5fb0c52805a620bf625d0575a804b9c3796a1799ea7","md5":"787996288f3c1e6f01386bd0a2f9e0ee","sha256":"981ea3769ac779582f5f96caf1de2350040b065e04cfd79bd0b2b4aa36015a90"},"downloads":-1,"filename":"async_modbus-0.1.2.tar.gz","has_sig":false,"md5_digest":"787996288f3c1e6f01386bd0a2f9e0ee","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":12886,"upload_time":"2022-01-21T05:26:03","upload_time_iso_8601":"2022-01-21T05:26:03.225956Z","url":"https://files.pythonhosted.org/packages/59/48/1516e8a49e59401ef5fb0c52805a620bf625d0575a804b9c3796a1799ea7/async_modbus-0.1.2.tar.gz","yanked":false,"yanked_reason":null}],"0.1.3":[{"comment_text":"","digests":{"blake2b_256":"df11d4f03772746da7fb3c626235641a52c7bfd03f961ba76c17d056a8979799","md5":"563de8bfd0de3b59dff7e684952fe8d9","sha256":"440782817e91178d3a269ca1ffcaf06fa69b7936d92932a33f7fd0d729179f3e"},"downloads":-1,"filename":"async_modbus-0.1.3.tar.gz","has_sig":false,"md5_digest":"563de8bfd0de3b59dff7e684952fe8d9","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":12904,"upload_time":"2022-01-21T06:40:46","upload_time_iso_8601":"2022-01-21T06:40:46.920045Z","url":"https://files.pythonhosted.org/packages/df/11/d4f03772746da7fb3c626235641a52c7bfd03f961ba76c17d056a8979799/async_modbus-0.1.3.tar.gz","yanked":false,"yanked_reason":null}],"0.1.4":[{"comment_text":"","digests":{"blake2b_256":"47b54e8df3742eb55334afce4ee879e3ec5408c2f3ff711a36fea8debc6e8161","md5":"50bb3f53a0bed841fd2367d93a255bef","sha256":"d342c7a908b01e49374da40b348b26b900ec21282384a59c64061c6b351307e1"},"downloads":-1,"filename":"async_modbus-0.1.4.tar.gz","has_sig":false,"md5_digest":"50bb3f53a0bed841fd2367d93a255bef","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":12912,"upload_time":"2022-02-16T07:35:29","upload_time_iso_8601":"2022-02-16T07:35:29.806072Z","url":"https://files.pythonhosted.org/packages/47/b5/4e8df3742eb55334afce4ee879e3ec5408c2f3ff711a36fea8debc6e8161/async_modbus-0.1.4.tar.gz","yanked":false,"yanked_reason":null}],"0.2.0":[{"comment_text":"","digests":{"blake2b_256":"eb3718b98b9adc046a23411509f437090fd4e9a292e70677dbdf8999a0cdf80a","md5":"bbdbf7b6d3a59286cf8c9e4248f96f1b","sha256":"5b5dc4949315f01ac37c3bfbe76b4b6b77fd592a10fa79c4f95331b5cba65f37"},"downloads":-1,"filename":"async_modbus-0.2.0-py3-none-any.whl","has_sig":false,"md5_digest":"bbdbf7b6d3a59286cf8c9e4248f96f1b","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":9194,"upload_time":"2022-02-19T07:06:03","upload_time_iso_8601":"2022-02-19T07:06:03.836236Z","url":"https://files.pythonhosted.org/packages/eb/37/18b98b9adc046a23411509f437090fd4e9a292e70677dbdf8999a0cdf80a/async_modbus-0.2.0-py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.2.1":[{"comment_text":"","digests":{"blake2b_256":"9bfa5304c31df450a74529f9931f99f433b3dd7d590a4c6f8164e77e23877951","md5":"5a8f62d8297587b142dfa654e2cee4c3","sha256":"a0a43d963b4ddd514fb1de00a94e1dbc60dae8d100773a8853f2770a4c01ec26"},"downloads":-1,"filename":"async_modbus-0.2.1-py3-none-any.whl","has_sig":false,"md5_digest":"5a8f62d8297587b142dfa654e2cee4c3","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":10939,"upload_time":"2022-03-09T19:32:16","upload_time_iso_8601":"2022-03-09T19:32:16.955032Z","url":"https://files.pythonhosted.org/packages/9b/fa/5304c31df450a74529f9931f99f433b3dd7d590a4c6f8164e77e23877951/async_modbus-0.2.1-py3-none-any.whl","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"9bfa5304c31df450a74529f9931f99f433b3dd7d590a4c6f8164e77e23877951","md5":"5a8f62d8297587b142dfa654e2cee4c3","sha256":"a0a43d963b4ddd514fb1de00a94e1dbc60dae8d100773a8853f2770a4c01ec26"},"downloads":-1,"filename":"async_modbus-0.2.1-py3-none-any.whl","has_sig":false,"md5_digest":"5a8f62d8297587b142dfa654e2cee4c3","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":10939,"upload_time":"2022-03-09T19:32:16","upload_time_iso_8601":"2022-03-09T19:32:16.955032Z","url":"https://files.pythonhosted.org/packages/9b/fa/5304c31df450a74529f9931f99f433b3dd7d590a4c6f8164e77e23877951/async_modbus-0.2.1-py3-none-any.whl","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
