{"info":{"author":"yshavit, Bluepuff","author_email":"","bugtrack_url":null,"classifiers":["License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python :: 3"],"description":"Python-like indentation tokens for ANTLR4\n=========================================\n\nA mostly-readymade solution to INDENT/DEDENT tokens in ANTLR v4. Just plug in the `DenterHelper` and you'll be good to go! See [this blog post](http://blog.yuvalshavit.com/2014/02/python-like-indentation-using-antlr4.html) for some of the motivations behind this project.\n\nantlr-helper is released under [the MIT license](http://opensource.org/licenses/MIT), which basically means you can do whatever you want with it. That said, I'd really appreciate hearing from you if you find this project useful! Maybe star the project?\n\nUsage (Java)\n=====\n\nmaven\n-----\n\n    <dependency>\n      <groupId>com.yuvalshavit</groupId>\n      <artifactId>antlr-denter</artifactId>\n      <version>1.1</version>\n    </dependency>\n\nAdding INDENT / DEDENT tokens to your lexer\n-------------------------------------------\n\n1. Define INDENT and DEDENT tokens in your grammar\n2. In your `@lexer::members` section, instantiate a `DenterHelper` whose `pullToken` method delegates to your lexer's `super.nextToken()`\n3. Override your lexer's `super.nextToken` method to use `DenterHelper::nextToken` instead.\n4. **Modify your `NL` token** to also grab any whitespace that follows (in other words, have it end in `' '*`, `'\\t'*` or similar).\n\n`DenterHelper` is an abstract class, and it also takes three arguments for its constructor: the token types for newline, INDENT and DEDENT. It's probably easiest to instantiate it as an anonymous class. The whole thing should look something like this:\n\n    tokens { INDENT, DEDENT }\n\n    @lexer::header {\n      import com.yuvalshavit.antlr4.DenterHelper;\n    }\n\n    @lexer::members {\n      private final DenterHelper denter = new DenterHelper(NL,\n                                                           MyCoolParser.INDENT,\n                                                           MyCoolParser.DEDENT)\n      {\n        @Override\n        public Token pullToken() {\n          return MyCoolLexer.super.nextToken();\n        }\n      };\n\n      @Override\n      public Token nextToken() {\n        return denter.nextToken();\n      }\n    }\n\n    NL: ('\\r'? '\\n' ' '*);\n\nThere is also a builder available, which is especially useful for Java 8:\n\n    tokens { INDENT, DEDENT }\n\n    @lexer::header {\n      import com.yuvalshavit.antlr4.DenterHelper;\n    }\n\n    @lexer::members {\n      private final DenterHelper denter = DenterHelper.builder()\n        .nl(NL)\n        .indent(MyCoolParser.INDENT)\n        .dedent(MyCoolParser.DEDENT)\n        .pullToken(MyCoolLexer.super::nextToken);\n\n      @Override\n      public Token nextToken() {\n        return denter.nextToken();\n      }\n    }\n\n    NL: ('\\r'? '\\n' ' '*);\n\nUsage (Python3)\n=====\n```\ntokens { INDENT, DEDENT }\n\n@lexer::header{\nfrom DenterHelper import DenterHelper\nfrom MyCoolParser import MyCoolParser\n}\n@lexer::members {\nclass MyCoolDenter(DenterHelper):\n    def __init__(self, lexer, nl_token, indent_token, dedent_token, ignore_eof):\n        super().__init__(nl_token, indent_token, dedent_token, ignore_eof)\n        self.lexer: MyCoolLexer = lexer\n\n    def pull_token(self):\n        return super(MyCoolLexer, self.lexer).nextToken()\n\ndenter = None\n\ndef nextToken(self):\n    if not self.denter:\n        self.denter = self.MyCoolDenter(self, self.NL, MyCoolParser.INDENT, MyCoolParser.DEDENT, ***Should Ignore EOF***)\n    return self.denter.next_token()\n\n}\n```\n\nUsing the tokens in your parser\n-------------------------------\n\nBasically, just use them. One bit worth noting is that when the denter injects DEDENT tokens, it'll prefix any string of them with a single `NL`. A single `NL` is also inserted before the EOF token if there are no DEDENTs to insert. For instance, given this input:\n\n    hello\n      world\n        universe\n    dolly\n\n... the tokens would be (roughly):\n\n    \"hello\"\n    INDENT\n    \"world\"\n    INDENT\n    \"universe\"\n    NL\n    DEDENT\n    DEDENT\n    \"dolly\"\n    NL\n    <eof>\n\nThis is done so that simple expressions can be terminated by the `NL` token without worrying about surrounding context (an impending dedent or EOF). In this case, `universe` and `dolly` represent simple expressions, and you can imagine that the grammar would contain something like `statement: expr  NL | helloBlock;`. Easy peasy!\n\n\"Half-DEDENTs\"\n--------------\n\nWhat happens when you dedent to an indentation level that was never established?\n\n    someStatement()\n    if foo():\n        if bar():\n          fooAndBar()\n      bogusLine()\n\nNotice that `bogusLine()` doesn't match with any indentation level: it's more indented than `if foo()` but less than its first statement, `if bar()`.\n\nThis is a buggy program in python. If you to run such a program, you'll get:\n\n> IndentationError: unindent does not match any outer indentation level\n\nThe `DenterHelper` processor handles this by inserting two tokens: a `DEDENT` followed immediately by an `INDENT` (the total sequence here would actually be two `DEDENT`s followed by an `INDENT`, since `bogusLine()` is twice-dedented from `fooAndBar()`). The rationale is that the line has dedened to its parent, and then indented. It's consistent with the indentation tokens for something like:\n\n    someStatement()\n      bogusLine()\n\nIf your indentation scheme is anything like python's, chances are you want this to be a compilation error. The good news is that it will be, as long as your parser doesn't allow \"spontaneous\" indents. That is, if the example just before this paragraph fails, then so will the half-dedent example above. In both cases, the parser rules will bork on an unexpected `INDENT` token.\n\nRepo layout\n===========\n- **Java/core**: The real thing. This is what you're interested in. Maven artifact `antlr-denter`.\n- **Java/examples**: Contains a real-life example of a language that uses `DenterHelper`, so you can see a full solution, including the pom, how to set up the parser (which is nothing extra relative to usual antlr stuff) and how to define a language that uses these INDENT/DEDENT tokens. The language itself is pretty basic, but it should get the point across. Maven artifact `antlr-denter-example-examples`.\n- **Python3**: The python3 implementation\n\nThe maven run is as simple as `mvn install` (or your favorite goal).\n\nComments? Suggestions? Bugs?\n============================\nDon't be shy about opening an issue!\n\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/yshavit/antlr-denter","keywords":"","license":"","maintainer":"","maintainer_email":"","name":"antlr-denter","package_url":"https://pypi.org/project/antlr-denter/","platform":"","project_url":"https://pypi.org/project/antlr-denter/","project_urls":{"Homepage":"https://github.com/yshavit/antlr-denter"},"provides_extra":null,"release_url":"https://pypi.org/project/antlr-denter/1.3.1/","requires_dist":["antlr4-python3-runtime"],"requires_python":">=3","summary":"Python-like indentation tokens for ANTLR4","version":"1.3.1","yanked":false,"yanked_reason":null},"last_serial":7080344,"releases":{"1.3":[{"comment_text":"","digests":{"blake2b_256":"88367aa561e78eca48fd6a1dc0c9642efac34eac004fa823395a84c5388e7da7","md5":"0c94e98db328c7dcd3424e25efde0e03","sha256":"ffa40cb274a86aca929cf0d942a415b4cf21e4e7c03f6256024ee49361f9d5c6"},"downloads":-1,"filename":"antlr_denter-1.3-py3-none-any.whl","has_sig":false,"md5_digest":"0c94e98db328c7dcd3424e25efde0e03","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3","size":5025,"upload_time":"2020-04-22T21:37:54","upload_time_iso_8601":"2020-04-22T21:37:54.296902Z","url":"https://files.pythonhosted.org/packages/88/36/7aa561e78eca48fd6a1dc0c9642efac34eac004fa823395a84c5388e7da7/antlr_denter-1.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ea5afd2dd3b3dcc26e392f4e87b309e8c2c562b0733db2e519323c8605f3da40","md5":"b563a002c7ebe3995b447d675b47f69a","sha256":"e68b6baea3001022384c67ffa84656e0b6c546658bbb4cb9ba6fe49479223b38"},"downloads":-1,"filename":"antlr-denter-1.3.tar.gz","has_sig":false,"md5_digest":"b563a002c7ebe3995b447d675b47f69a","packagetype":"sdist","python_version":"source","requires_python":">=3","size":4810,"upload_time":"2020-04-22T21:37:56","upload_time_iso_8601":"2020-04-22T21:37:56.334253Z","url":"https://files.pythonhosted.org/packages/ea/5a/fd2dd3b3dcc26e392f4e87b309e8c2c562b0733db2e519323c8605f3da40/antlr-denter-1.3.tar.gz","yanked":false,"yanked_reason":null}],"1.3.1":[{"comment_text":"","digests":{"blake2b_256":"0b7d90b9b27e51099deff45ae426157332c8d29448c62df0036efaa28ef3c27b","md5":"3e37f604a95d0ac99bc3cc512d8d2566","sha256":"15a32dc39225deb5b407968fc9a37b78d6096c5b921891f7b4edf5386e938e1a"},"downloads":-1,"filename":"antlr_denter-1.3.1-py3-none-any.whl","has_sig":false,"md5_digest":"3e37f604a95d0ac99bc3cc512d8d2566","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3","size":5063,"upload_time":"2020-04-22T21:59:39","upload_time_iso_8601":"2020-04-22T21:59:39.117103Z","url":"https://files.pythonhosted.org/packages/0b/7d/90b9b27e51099deff45ae426157332c8d29448c62df0036efaa28ef3c27b/antlr_denter-1.3.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"aca703d3f5b0726cd2d21e539f10dfb2c7f10235bea6754f7624865d18ad5257","md5":"4ccf2a837f8dc4f2d8193b04d0b2a271","sha256":"c9083677f34c7ae001d54e5b0a83b125de87cfc822394ce230c7b80f44c05bcf"},"downloads":-1,"filename":"antlr-denter-1.3.1.tar.gz","has_sig":false,"md5_digest":"4ccf2a837f8dc4f2d8193b04d0b2a271","packagetype":"sdist","python_version":"source","requires_python":">=3","size":4887,"upload_time":"2020-04-22T21:59:55","upload_time_iso_8601":"2020-04-22T21:59:55.794928Z","url":"https://files.pythonhosted.org/packages/ac/a7/03d3f5b0726cd2d21e539f10dfb2c7f10235bea6754f7624865d18ad5257/antlr-denter-1.3.1.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"0b7d90b9b27e51099deff45ae426157332c8d29448c62df0036efaa28ef3c27b","md5":"3e37f604a95d0ac99bc3cc512d8d2566","sha256":"15a32dc39225deb5b407968fc9a37b78d6096c5b921891f7b4edf5386e938e1a"},"downloads":-1,"filename":"antlr_denter-1.3.1-py3-none-any.whl","has_sig":false,"md5_digest":"3e37f604a95d0ac99bc3cc512d8d2566","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3","size":5063,"upload_time":"2020-04-22T21:59:39","upload_time_iso_8601":"2020-04-22T21:59:39.117103Z","url":"https://files.pythonhosted.org/packages/0b/7d/90b9b27e51099deff45ae426157332c8d29448c62df0036efaa28ef3c27b/antlr_denter-1.3.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"aca703d3f5b0726cd2d21e539f10dfb2c7f10235bea6754f7624865d18ad5257","md5":"4ccf2a837f8dc4f2d8193b04d0b2a271","sha256":"c9083677f34c7ae001d54e5b0a83b125de87cfc822394ce230c7b80f44c05bcf"},"downloads":-1,"filename":"antlr-denter-1.3.1.tar.gz","has_sig":false,"md5_digest":"4ccf2a837f8dc4f2d8193b04d0b2a271","packagetype":"sdist","python_version":"source","requires_python":">=3","size":4887,"upload_time":"2020-04-22T21:59:55","upload_time_iso_8601":"2020-04-22T21:59:55.794928Z","url":"https://files.pythonhosted.org/packages/ac/a7/03d3f5b0726cd2d21e539f10dfb2c7f10235bea6754f7624865d18ad5257/antlr-denter-1.3.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
