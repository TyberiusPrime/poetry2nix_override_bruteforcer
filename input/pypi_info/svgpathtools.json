{"info":{"author":"Andy Port","author_email":"AndyAPort@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 4 - Beta","Intended Audience :: Developers","License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python :: 2","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Multimedia :: Graphics :: Editors :: Vector-Based","Topic :: Scientific/Engineering","Topic :: Scientific/Engineering :: Image Recognition","Topic :: Scientific/Engineering :: Information Analysis","Topic :: Scientific/Engineering :: Mathematics","Topic :: Scientific/Engineering :: Visualization","Topic :: Software Development :: Libraries :: Python Modules"],"description":"[![Donate](https://img.shields.io/badge/donate-paypal-brightgreen)](https://www.paypal.com/donate?business=4SKJ27AM4EYYA&amp;no_recurring=0&amp;item_name=Support+the+creator+of+svgpathtools?++He%27s+a+student+and+would+appreciate+it.&amp;currency_code=USD)\n![Python](https://img.shields.io/pypi/pyversions/svgpathtools.svg)\n[![PyPI](https://img.shields.io/pypi/v/svgpathtools)](https://pypi.org/project/svgpathtools/)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/svgpathtools?color=yellow)](https://pypistats.org/packages/svgpathtools)\n# svgpathtools\n\n\nsvgpathtools is a collection of tools for manipulating and analyzing SVG Path objects and Bézier curves.\n\n## Features\n\nsvgpathtools contains functions designed to **easily read, write and display SVG files** as well as *a large selection of geometrically\\-oriented tools* to **transform and analyze path elements**.\n\nAdditionally, the submodule *bezier.py* contains tools for for working with general **nth order Bezier curves stored as n-tuples**.\n\nSome included tools:\n\n- **read**, **write**, and **display** SVG files containing Path (and other) SVG elements\n- convert Bézier path segments to **numpy.poly1d** (polynomial) objects\n- convert polynomials (in standard form) to their Bézier form\n- compute **tangent vectors** and (right-hand rule) **normal vectors**\n- compute **curvature**\n- break discontinuous paths into their **continuous subpaths**.\n- efficiently compute **intersections** between paths and/or segments\n- find a **bounding box** for a path or segment\n- **reverse** segment/path orientation\n- **crop** and **split** paths and segments\n- **smooth** paths (i.e. smooth away kinks to make paths differentiable)\n- **transition maps** from path domain to segment domain and back (T2t and t2T)\n- compute **area** enclosed by a closed path\n- compute **arc length**\n- compute **inverse arc length**\n- convert RGB color tuples to hexadecimal color strings and back\n\n## Prerequisites\n- **numpy**\n- **svgwrite**\n- **scipy** (optional, but recommended for performance)\n\n## Setup\n\n```bash\n$ pip install svgpathtools\n```  \n  \n### Alternative Setup \nYou can download the source from Github and install by using the command (from inside the folder containing setup.py):\n\n```bash\n$ python setup.py install\n```\n\n## Credit where credit's due\nMuch of the core of this module was taken from [the svg.path (v2.0) module](https://github.com/regebro/svg.path).  Interested svg.path users should see the compatibility notes at bottom of this readme.\n\n## Basic Usage\n\n### Classes\nThe svgpathtools module is primarily structured around four path segment classes: ``Line``, ``QuadraticBezier``, ``CubicBezier``, and ``Arc``.  There is also a fifth class, ``Path``, whose objects are sequences of (connected or disconnected<sup id=\"a1\">[1](#f1)</sup>) path segment objects.\n\n* ``Line(start, end)``\n\n* ``Arc(start, radius, rotation, large_arc, sweep, end)``  Note: See docstring for a detailed explanation of these parameters\n\n* ``QuadraticBezier(start, control, end)``\n\n* ``CubicBezier(start, control1, control2, end)``\n\n* ``Path(*segments)``\n\nSee the relevant docstrings in *path.py* or the [official SVG specifications](<http://www.w3.org/TR/SVG/paths.html>) for more information on what each parameter means.\n\n<u id=\"f1\">1</u> Warning:  Some of the functionality in this library has not been tested on discontinuous Path objects.  A simple workaround is provided, however, by the ``Path.continuous_subpaths()`` method.    [↩](#a1)\n\n\n```python\nfrom __future__ import division, print_function\n```\n\n\n```python\n# Coordinates are given as points in the complex plane\nfrom svgpathtools import Path, Line, QuadraticBezier, CubicBezier, Arc\nseg1 = CubicBezier(300+100j, 100+100j, 200+200j, 200+300j)  # A cubic beginning at (300, 100) and ending at (200, 300)\nseg2 = Line(200+300j, 250+350j)  # A line beginning at (200, 300) and ending at (250, 350)\npath = Path(seg1, seg2)  # A path traversing the cubic and then the line\n\n# We could alternatively created this Path object using a d-string\nfrom svgpathtools import parse_path\npath_alt = parse_path('M 300 100 C 100 100 200 200 200 300 L 250 350')\n\n# Let's check that these two methods are equivalent\nprint(path)\nprint(path_alt)\nprint(path == path_alt)\n\n# On a related note, the Path.d() method returns a Path object's d-string\nprint(path.d())\nprint(parse_path(path.d()) == path)\n```\n\n    Path(CubicBezier(start=(300+100j), control1=(100+100j), control2=(200+200j), end=(200+300j)),\n         Line(start=(200+300j), end=(250+350j)))\n    Path(CubicBezier(start=(300+100j), control1=(100+100j), control2=(200+200j), end=(200+300j)),\n         Line(start=(200+300j), end=(250+350j)))\n    True\n    M 300.0,100.0 C 100.0,100.0 200.0,200.0 200.0,300.0 L 250.0,350.0\n    True\n\n\nThe ``Path`` class is a mutable sequence, so it behaves much like a list.\nSo segments can **append**ed, **insert**ed, set by index, **del**eted, **enumerate**d, **slice**d out, etc.\n\n\n```python\n# Let's append another to the end of it\npath.append(CubicBezier(250+350j, 275+350j, 250+225j, 200+100j))\nprint(path)\n\n# Let's replace the first segment with a Line object\npath[0] = Line(200+100j, 200+300j)\nprint(path)\n\n# You may have noticed that this path is connected and now is also closed (i.e. path.start == path.end)\nprint(\"path is continuous? \", path.iscontinuous())\nprint(\"path is closed? \", path.isclosed())\n\n# The curve the path follows is not, however, smooth (differentiable)\nfrom svgpathtools import kinks, smoothed_path\nprint(\"path contains non-differentiable points? \", len(kinks(path)) > 0)\n\n# If we want, we can smooth these out (Experimental and only for line/cubic paths)\n# Note:  smoothing will always works (except on 180 degree turns), but you may want \n# to play with the maxjointsize and tightness parameters to get pleasing results\n# Note also: smoothing will increase the number of segments in a path\nspath = smoothed_path(path)\nprint(\"spath contains non-differentiable points? \", len(kinks(spath)) > 0)\nprint(spath)\n\n# Let's take a quick look at the path and its smoothed relative\n# The following commands will open two browser windows to display path and spaths\nfrom svgpathtools import disvg\nfrom time import sleep\ndisvg(path) \nsleep(1)  # needed when not giving the SVGs unique names (or not using timestamp)\ndisvg(spath)\nprint(\"Notice that path contains {} segments and spath contains {} segments.\"\n      \"\".format(len(path), len(spath)))\n```\n\n    Path(CubicBezier(start=(300+100j), control1=(100+100j), control2=(200+200j), end=(200+300j)),\n         Line(start=(200+300j), end=(250+350j)),\n         CubicBezier(start=(250+350j), control1=(275+350j), control2=(250+225j), end=(200+100j)))\n    Path(Line(start=(200+100j), end=(200+300j)),\n         Line(start=(200+300j), end=(250+350j)),\n         CubicBezier(start=(250+350j), control1=(275+350j), control2=(250+225j), end=(200+100j)))\n    path is continuous?  True\n    path is closed?  True\n    path contains non-differentiable points?  True\n    spath contains non-differentiable points?  False\n    Path(Line(start=(200+101.5j), end=(200+298.5j)),\n         CubicBezier(start=(200+298.5j), control1=(200+298.505j), control2=(201.057124638+301.057124638j), end=(201.060660172+301.060660172j)),\n         Line(start=(201.060660172+301.060660172j), end=(248.939339828+348.939339828j)),\n         CubicBezier(start=(248.939339828+348.939339828j), control1=(249.649982143+349.649982143j), control2=(248.995+350j), end=(250+350j)),\n         CubicBezier(start=(250+350j), control1=(275+350j), control2=(250+225j), end=(200+100j)),\n         CubicBezier(start=(200+100j), control1=(199.62675237+99.0668809257j), control2=(200+100.495j), end=(200+101.5j)))\n    Notice that path contains 3 segments and spath contains 6 segments.\n\n\n### Reading SVGSs\n\nThe **svg2paths()** function converts an svgfile to a list of Path objects and a separate list of dictionaries containing the attributes of each said path.  \nNote: Line, Polyline, Polygon, and Path SVG elements can all be converted to Path objects using this function.\n\n\n```python\n# Read SVG into a list of path objects and list of dictionaries of attributes \nfrom svgpathtools import svg2paths, wsvg\npaths, attributes = svg2paths('test.svg')\n\n# Update: You can now also extract the svg-attributes by setting\n# return_svg_attributes=True, or with the convenience function svg2paths2\nfrom svgpathtools import svg2paths2\npaths, attributes, svg_attributes = svg2paths2('test.svg')\n\n# Let's print out the first path object and the color it was in the SVG\n# We'll see it is composed of two CubicBezier objects and, in the SVG file it \n# came from, it was red\nredpath = paths[0]\nredpath_attribs = attributes[0]\nprint(redpath)\nprint(redpath_attribs['stroke'])\n```\n\n    Path(CubicBezier(start=(10.5+80j), control1=(40+10j), control2=(65+10j), end=(95+80j)),\n         CubicBezier(start=(95+80j), control1=(125+150j), control2=(150+150j), end=(180+80j)))\n    red\n\n\n### Writing SVGSs (and some geometric functions and methods)\n\nThe **wsvg()** function creates an SVG file from a list of path.  This function can do many things (see docstring in *paths2svg.py* for more information) and is meant to be quick and easy to use.\nNote: Use the convenience function **disvg()** (or set 'openinbrowser=True') to automatically attempt to open the created svg file in your default SVG viewer.\n\n\n```python\n# Let's make a new SVG that's identical to the first\nwsvg(paths, attributes=attributes, svg_attributes=svg_attributes, filename='output1.svg')\n```\n\n![output1.svg](output1.svg)\n\nThere will be many more examples of writing and displaying path data below.\n\n### The .point() method and transitioning between path and path segment parameterizations\nSVG Path elements and their segments have official parameterizations.\nThese parameterizations can be accessed using the ``Path.point()``, ``Line.point()``, ``QuadraticBezier.point()``, ``CubicBezier.point()``, and ``Arc.point()`` methods.\nAll these parameterizations are defined over the domain 0 <= t <= 1.\n\n**Note:** In this document and in inline documentation and doctrings, I use a capital ``T`` when referring to the parameterization of a Path object and a lower case ``t`` when referring speaking about path segment objects (i.e. Line, QaudraticBezier, CubicBezier, and Arc objects).  \nGiven a ``T`` value, the ``Path.T2t()`` method can be used to find the corresponding segment index, ``k``, and segment parameter, ``t``, such that ``path.point(T)=path[k].point(t)``.  \nThere is also a ``Path.t2T()`` method to solve the inverse problem.\n\n\n```python\n# Example:\n\n# Let's check that the first segment of redpath starts \n# at the same point as redpath\nfirstseg = redpath[0] \nprint(redpath.point(0) == firstseg.point(0) == redpath.start == firstseg.start)\n\n# Let's check that the last segment of redpath ends on the same point as redpath\nlastseg = redpath[-1] \nprint(redpath.point(1) == lastseg.point(1) == redpath.end == lastseg.end)\n\n# This next boolean should return False as redpath is composed multiple segments\nprint(redpath.point(0.5) == firstseg.point(0.5))\n\n# If we want to figure out which segment of redpoint the \n# point redpath.point(0.5) lands on, we can use the path.T2t() method\nk, t = redpath.T2t(0.5)\nprint(redpath[k].point(t) == redpath.point(0.5))\n```\n\n    True\n    True\n    False\n    True\n\n\n### Bezier curves as NumPy polynomial objects\nAnother great way to work with the parameterizations for `Line`, `QuadraticBezier`, and `CubicBezier` objects is to convert them to ``numpy.poly1d`` objects.  This is done easily using the ``Line.poly()``, ``QuadraticBezier.poly()`` and ``CubicBezier.poly()`` methods.  \nThere's also a ``polynomial2bezier()`` function in the pathtools.py submodule to convert polynomials back to Bezier curves.  \n\n**Note:** cubic Bezier curves are parameterized as $$\\mathcal{B}(t) = P_0(1-t)^3 + 3P_1(1-t)^2t + 3P_2(1-t)t^2 + P_3t^3$$\nwhere $P_0$, $P_1$, $P_2$, and $P_3$ are the control points ``start``, ``control1``, ``control2``, and ``end``, respectively, that svgpathtools uses to define a CubicBezier object.  The ``CubicBezier.poly()`` method expands this polynomial to its standard form \n$$\\mathcal{B}(t) = c_0t^3 + c_1t^2 +c_2t+c3$$\nwhere\n$$\\begin{bmatrix}c_0\\\\c_1\\\\c_2\\\\c_3\\end{bmatrix} = \n\\begin{bmatrix}\n-1 & 3 & -3 & 1\\\\\n3 & -6 & -3 & 0\\\\\n-3 & 3 & 0 & 0\\\\\n1 & 0 & 0 & 0\\\\\n\\end{bmatrix}\n\\begin{bmatrix}P_0\\\\P_1\\\\P_2\\\\P_3\\end{bmatrix}$$  \n\n`QuadraticBezier.poly()` and `Line.poly()` are [defined similarly](https://en.wikipedia.org/wiki/B%C3%A9zier_curve#General_definition).\n\n\n```python\n# Example:\nb = CubicBezier(300+100j, 100+100j, 200+200j, 200+300j)\np = b.poly()\n\n# p(t) == b.point(t)\nprint(p(0.235) == b.point(0.235))\n\n# What is p(t)?  It's just the cubic b written in standard form.  \nbpretty = \"{}*(1-t)^3 + 3*{}*(1-t)^2*t + 3*{}*(1-t)*t^2 + {}*t^3\".format(*b.bpoints())\nprint(\"The CubicBezier, b.point(x) = \\n\\n\" + \n      bpretty + \"\\n\\n\" + \n      \"can be rewritten in standard form as \\n\\n\" +\n      str(p).replace('x','t'))\n```\n\n    True\n    The CubicBezier, b.point(x) = \n    \n    (300+100j)*(1-t)^3 + 3*(100+100j)*(1-t)^2*t + 3*(200+200j)*(1-t)*t^2 + (200+300j)*t^3\n    \n    can be rewritten in standard form as \n    \n                    3                2\n    (-400 + -100j) t + (900 + 300j) t - 600 t + (300 + 100j)\n\n\nThe ability to convert between Bezier objects to NumPy polynomial objects is very useful.  For starters, we can take turn a list of Bézier segments into a NumPy array \n\n### Numpy Array operations on Bézier path segments \n\n[Example available here](https://github.com/mathandy/svgpathtools/blob/master/examples/compute-many-points-quickly-using-numpy-arrays.py) \n\nTo further illustrate the power of being able to convert our Bezier curve objects to numpy.poly1d objects and back, lets compute the unit tangent vector of the above CubicBezier object, b, at t=0.5 in four different ways. \n\n### Tangent vectors (and more on NumPy polynomials) \n\n\n```python\nt = 0.5\n### Method 1: the easy way\nu1 = b.unit_tangent(t)\n\n### Method 2: another easy way \n# Note: This way will fail if it encounters a removable singularity.\nu2 = b.derivative(t)/abs(b.derivative(t))\n\n### Method 2: a third easy way \n# Note: This way will also fail if it encounters a removable singularity.\ndp = p.deriv() \nu3 = dp(t)/abs(dp(t))\n\n### Method 4: the removable-singularity-proof numpy.poly1d way  \n# Note: This is roughly how Method 1 works\nfrom svgpathtools import real, imag, rational_limit\ndx, dy = real(dp), imag(dp)  # dp == dx + 1j*dy \np_mag2 = dx**2 + dy**2  # p_mag2(t) = |p(t)|**2\n# Note: abs(dp) isn't a polynomial, but abs(dp)**2 is, and,\n#  the limit_{t->t0}[f(t) / abs(f(t))] == \n# sqrt(limit_{t->t0}[f(t)**2 / abs(f(t))**2])\nfrom cmath import sqrt\nu4 = sqrt(rational_limit(dp**2, p_mag2, t))\n\nprint(\"unit tangent check:\", u1 == u2 == u3 == u4)\n\n# Let's do a visual check\nmag = b.length()/4  # so it's not hard to see the tangent line\ntangent_line = Line(b.point(t), b.point(t) + mag*u1)\ndisvg([b, tangent_line], 'bg', nodes=[b.point(t)])\n```\n\n    unit tangent check: True\n\n\n### Translations (shifts), reversing orientation, and normal vectors\n\n\n```python\n# Speaking of tangents, let's add a normal vector to the picture\nn = b.normal(t)\nnormal_line = Line(b.point(t), b.point(t) + mag*n)\ndisvg([b, tangent_line, normal_line], 'bgp', nodes=[b.point(t)])\n\n# and let's reverse the orientation of b! \n# the tangent and normal lines should be sent to their opposites\nbr = b.reversed()\n\n# Let's also shift b_r over a bit to the right so we can view it next to b\n# The simplest way to do this is br = br.translated(3*mag),  but let's use \n# the .bpoints() instead, which returns a Bezier's control points\nbr.start, br.control1, br.control2, br.end = [3*mag + bpt for bpt in br.bpoints()]  # \n\ntangent_line_r = Line(br.point(t), br.point(t) + mag*br.unit_tangent(t))\nnormal_line_r = Line(br.point(t), br.point(t) + mag*br.normal(t))\nwsvg([b, tangent_line, normal_line, br, tangent_line_r, normal_line_r], \n     'bgpkgp', nodes=[b.point(t), br.point(t)], filename='vectorframes.svg', \n     text=[\"b's tangent\", \"br's tangent\"], text_path=[tangent_line, tangent_line_r])\n```\n\n![vectorframes.svg](vectorframes.svg)\n\n### Rotations and Translations\n\n\n```python\n# Let's take a Line and an Arc and make some pictures\ntop_half = Arc(start=-1, radius=1+2j, rotation=0, large_arc=1, sweep=1, end=1)\nmidline = Line(-1.5, 1.5)\n\n# First let's make our ellipse whole\nbottom_half = top_half.rotated(180)\ndecorated_ellipse = Path(top_half, bottom_half)\n\n# Now let's add the decorations\nfor k in range(12):\n    decorated_ellipse.append(midline.rotated(30*k))\n    \n# Let's move it over so we can see the original Line and Arc object next\n# to the final product\ndecorated_ellipse = decorated_ellipse.translated(4+0j)\nwsvg([top_half, midline, decorated_ellipse], filename='decorated_ellipse.svg')\n```\n\n![decorated_ellipse.svg](decorated_ellipse.svg)\n\n### arc length and inverse arc length\n\nHere we'll create an SVG that shows off the parametric and geometric midpoints of the paths from ``test.svg``.  We'll need to compute use the ``Path.length()``, ``Line.length()``, ``QuadraticBezier.length()``, ``CubicBezier.length()``, and ``Arc.length()`` methods, as well as the related inverse arc length methods ``.ilength()`` function to do this.\n\n\n```python\n# First we'll load the path data from the file test.svg\npaths, attributes = svg2paths('test.svg')\n\n# Let's mark the parametric midpoint of each segment\n# I say \"parametric\" midpoint because Bezier curves aren't \n# parameterized by arclength \n# If they're also the geometric midpoint, let's mark them\n# purple and otherwise we'll mark the geometric midpoint green\nmin_depth = 5\nerror = 1e-4\ndots = []\nncols = []\nnradii = []\nfor path in paths:\n    for seg in path:\n        parametric_mid = seg.point(0.5)\n        seg_length = seg.length()\n        if seg.length(0.5)/seg.length() == 1/2:\n            dots += [parametric_mid]\n            ncols += ['purple']\n            nradii += [5]\n        else:\n            t_mid = seg.ilength(seg_length/2)\n            geo_mid = seg.point(t_mid)\n            dots += [parametric_mid, geo_mid]\n            ncols += ['red', 'green']\n            nradii += [5] * 2\n\n# In 'output2.svg' the paths will retain their original attributes\nwsvg(paths, nodes=dots, node_colors=ncols, node_radii=nradii, \n     attributes=attributes, filename='output2.svg')\n```\n\n![output2.svg](output2.svg)\n\n### Intersections between Bezier curves\n\n\n```python\n# Let's find all intersections between redpath and the other \nredpath = paths[0]\nredpath_attribs = attributes[0]\nintersections = []\nfor path in paths[1:]:\n    for (T1, seg1, t1), (T2, seg2, t2) in redpath.intersect(path):\n        intersections.append(redpath.point(T1))\n        \ndisvg(paths, filename='output_intersections.svg', attributes=attributes,\n      nodes = intersections, node_radii = [5]*len(intersections))\n```\n\n![output_intersections.svg](output_intersections.svg)\n\n### An Advanced Application:  Offsetting Paths\nHere we'll find the [offset curve](https://en.wikipedia.org/wiki/Parallel_curve) for a few paths.\n\n\n```python\nfrom svgpathtools import parse_path, Line, Path, wsvg\ndef offset_curve(path, offset_distance, steps=1000):\n    \"\"\"Takes in a Path object, `path`, and a distance,\n    `offset_distance`, and outputs an piecewise-linear approximation \n    of the 'parallel' offset curve.\"\"\"\n    nls = []\n    for seg in path:\n        ct = 1\n        for k in range(steps):\n            t = k / steps\n            offset_vector = offset_distance * seg.normal(t)\n            nl = Line(seg.point(t), seg.point(t) + offset_vector)\n            nls.append(nl)\n    connect_the_dots = [Line(nls[k].end, nls[k+1].end) for k in range(len(nls)-1)]\n    if path.isclosed():\n        connect_the_dots.append(Line(nls[-1].end, nls[0].end))\n    offset_path = Path(*connect_the_dots)\n    return offset_path\n\n# Examples:\npath1 = parse_path(\"m 288,600 c -52,-28 -42,-61 0,-97 \")\npath2 = parse_path(\"M 151,395 C 407,485 726.17662,160 634,339\").translated(300)\npath3 = parse_path(\"m 117,695 c 237,-7 -103,-146 457,0\").translated(500+400j)\npaths = [path1, path2, path3]\n\noffset_distances = [10*k for k in range(1,51)]\noffset_paths = []\nfor path in paths:\n    for distances in offset_distances:\n        offset_paths.append(offset_curve(path, distances))\n\n# Let's take a look\nwsvg(paths + offset_paths, 'g'*len(paths) + 'r'*len(offset_paths), filename='offset_curves.svg')\n```\n\n![offset_curves.svg](offset_curves.svg)\n\n## Compatibility Notes for users of svg.path (v2.0)\n\n- renamed Arc.arc attribute as Arc.large_arc\n\n- Path.d() : For behavior similar<sup id=\"a2\">[2](#f2)</sup> to svg.path (v2.0), set both useSandT and use_closed_attrib to be True.\n\n<u id=\"f2\">2</u> The behavior would be identical, but the string formatting used in this method has been changed to use default format (instead of the General format, {:G}), for inceased precision. [↩](#a2)\n\n\nLicence\n-------\n\nThis module is under a MIT License.\n\n\n```python\n\n```\n","description_content_type":"text/markdown","docs_url":null,"download_url":"https://github.com/mathandy/svgpathtools/releases/download/1.6.1/svgpathtools-1.6.1-py2.py3-none-any.whl","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/mathandy/svgpathtools","keywords":"svg,svg path,svg.path,bezier,parse svg path,display svg","license":"MIT","maintainer":"","maintainer_email":"","name":"svgpathtools","package_url":"https://pypi.org/project/svgpathtools/","platform":"OS Independent","project_url":"https://pypi.org/project/svgpathtools/","project_urls":{"Download":"https://github.com/mathandy/svgpathtools/releases/download/1.6.1/svgpathtools-1.6.1-py2.py3-none-any.whl","Homepage":"https://github.com/mathandy/svgpathtools"},"provides_extra":null,"release_url":"https://pypi.org/project/svgpathtools/1.6.1/","requires_dist":["numpy","svgwrite","scipy"],"requires_python":"","summary":"A collection of tools for manipulating and analyzing SVG Path objects and Bezier curves.","version":"1.6.1","yanked":false,"yanked_reason":null},"last_serial":18183806,"releases":{"1.0":[{"comment_text":"","digests":{"blake2b_256":"4ad8227847ae031c6d593443df1aeb41f043abb98abe4d4409c22a9e709e0529","md5":"0f10b73d03994cfd1a6c0e1d959f534e","sha256":"01d6e3b5b21241ea602abd2856c9939ad90e5e258e20b1008bab375a2939ae48"},"downloads":-1,"filename":"svgpathtools-1.0.tar.gz","has_sig":false,"md5_digest":"0f10b73d03994cfd1a6c0e1d959f534e","packagetype":"sdist","python_version":"source","requires_python":null,"size":39802,"upload_time":"2016-07-06T05:45:19","upload_time_iso_8601":"2016-07-06T05:45:19.271616Z","url":"https://files.pythonhosted.org/packages/4a/d8/227847ae031c6d593443df1aeb41f043abb98abe4d4409c22a9e709e0529/svgpathtools-1.0.tar.gz","yanked":false,"yanked_reason":null}],"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"1342bd4d86ea5bfc880d8ea913acfa48c9bf4682f15e346ecce7cf1cce0b81bb","md5":"6b1ee164923afd2f6f482f0cf47f3020","sha256":"28c1bb6b650e191e951304f4e5e77e569d7fd8fb94b34f5b76d682bf208916a9"},"downloads":-1,"filename":"svgpathtools-1.0.1.tar.gz","has_sig":false,"md5_digest":"6b1ee164923afd2f6f482f0cf47f3020","packagetype":"sdist","python_version":"source","requires_python":null,"size":32593,"upload_time":"2016-07-06T06:03:45","upload_time_iso_8601":"2016-07-06T06:03:45.050234Z","url":"https://files.pythonhosted.org/packages/13/42/bd4d86ea5bfc880d8ea913acfa48c9bf4682f15e346ecce7cf1cce0b81bb/svgpathtools-1.0.1.tar.gz","yanked":false,"yanked_reason":null}],"1.2.1":[{"comment_text":"","digests":{"blake2b_256":"893a5c3a08bfcc85f34b56700ade20a0c63c3313480f898dbebb1203db62d1f0","md5":"54512ce3d734157554a833d232fe396d","sha256":"e14b7ecede1bd21caaa2af4b0eaf80ea79b125ab09b73bc228dc6d75f9782615"},"downloads":-1,"filename":"svgpathtools-1.2.1.tar.gz","has_sig":false,"md5_digest":"54512ce3d734157554a833d232fe396d","packagetype":"sdist","python_version":"source","requires_python":null,"size":33700,"upload_time":"2016-07-24T00:21:07","upload_time_iso_8601":"2016-07-24T00:21:07.798554Z","url":"https://files.pythonhosted.org/packages/89/3a/5c3a08bfcc85f34b56700ade20a0c63c3313480f898dbebb1203db62d1f0/svgpathtools-1.2.1.tar.gz","yanked":false,"yanked_reason":null}],"1.2.2":[{"comment_text":"","digests":{"blake2b_256":"2850623d5e4730d87c89fe98bececed497e0c3418d7e43bc64ce7cd24af02c4c","md5":"0600cbd628b2098d7e6cabf3ecbf1f82","sha256":"f41ab9446bf8ffca8466c613ae59d610aeef3f29a818bf9db044b4bd3912c5f8"},"downloads":-1,"filename":"svgpathtools-1.2.2.tar.gz","has_sig":false,"md5_digest":"0600cbd628b2098d7e6cabf3ecbf1f82","packagetype":"sdist","python_version":"source","requires_python":null,"size":34047,"upload_time":"2016-10-16T05:39:15","upload_time_iso_8601":"2016-10-16T05:39:15.910613Z","url":"https://files.pythonhosted.org/packages/28/50/623d5e4730d87c89fe98bececed497e0c3418d7e43bc64ce7cd24af02c4c/svgpathtools-1.2.2.tar.gz","yanked":false,"yanked_reason":null}],"1.2.3":[{"comment_text":"","digests":{"blake2b_256":"af30c50ebafd0bb4d6061a228866a4ad2cfbcadf0d272c9213b33495cac90330","md5":"21f38ba469807d19bc42bb0a7d87d122","sha256":"e7252042766b16e1e7d9f29d3d9722bfcde310522a248e0f79e0477681a6eb6d"},"downloads":-1,"filename":"svgpathtools-1.2.3.tar.gz","has_sig":false,"md5_digest":"21f38ba469807d19bc42bb0a7d87d122","packagetype":"sdist","python_version":"source","requires_python":null,"size":34047,"upload_time":"2016-10-16T07:42:52","upload_time_iso_8601":"2016-10-16T07:42:52.554153Z","url":"https://files.pythonhosted.org/packages/af/30/c50ebafd0bb4d6061a228866a4ad2cfbcadf0d272c9213b33495cac90330/svgpathtools-1.2.3.tar.gz","yanked":false,"yanked_reason":null}],"1.2.4":[{"comment_text":"","digests":{"blake2b_256":"74169986c0aa258bdf18d5aa9cd0c959611461a0ce28a0d88851cf3f8d2501e9","md5":"807698fce5cd20006a6fd34387b2ccb6","sha256":"a9cd254c93e827d66a06afcf0fb0203a1f428e59aa0ebe2f667e9b409c8d73bf"},"downloads":-1,"filename":"svgpathtools-1.2.4.tar.gz","has_sig":false,"md5_digest":"807698fce5cd20006a6fd34387b2ccb6","packagetype":"sdist","python_version":"source","requires_python":null,"size":34042,"upload_time":"2016-10-29T03:51:51","upload_time_iso_8601":"2016-10-29T03:51:51.294361Z","url":"https://files.pythonhosted.org/packages/74/16/9986c0aa258bdf18d5aa9cd0c959611461a0ce28a0d88851cf3f8d2501e9/svgpathtools-1.2.4.tar.gz","yanked":false,"yanked_reason":null}],"1.2.5":[{"comment_text":"","digests":{"blake2b_256":"5961cf646da0c628a041e94a95f0a1e3cb9ba946b74a27cc900a333b68fc92f3","md5":"ac89e22a696336c8cc124bd8154f4617","sha256":"0b1cc413ccfc7640d1a0f889b76f806dbf44599648050389dd55acd7c49b9dae"},"downloads":-1,"filename":"svgpathtools-1.2.5-py2.py3-none-any.whl","has_sig":false,"md5_digest":"ac89e22a696336c8cc124bd8154f4617","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":56025,"upload_time":"2016-10-29T08:12:37","upload_time_iso_8601":"2016-10-29T08:12:37.705112Z","url":"https://files.pythonhosted.org/packages/59/61/cf646da0c628a041e94a95f0a1e3cb9ba946b74a27cc900a333b68fc92f3/svgpathtools-1.2.5-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1757e736c4e961abb94d3b034b984ab68196a9f28303695101b56ecb85d55e92","md5":"bc916a3da4c915d8e2c4057582fd48e1","sha256":"aac150ad362fc5437e5d66a43527483605a7b0f8fd5483e35250512e12551028"},"downloads":-1,"filename":"svgpathtools-1.2.5.tar.gz","has_sig":false,"md5_digest":"bc916a3da4c915d8e2c4057582fd48e1","packagetype":"sdist","python_version":"source","requires_python":null,"size":2097569,"upload_time":"2016-10-29T08:13:01","upload_time_iso_8601":"2016-10-29T08:13:01.991318Z","url":"https://files.pythonhosted.org/packages/17/57/e736c4e961abb94d3b034b984ab68196a9f28303695101b56ecb85d55e92/svgpathtools-1.2.5.tar.gz","yanked":false,"yanked_reason":null}],"1.2.6":[{"comment_text":"","digests":{"blake2b_256":"78f0b54c41d4d659980d040424df722084b1c43248afeb857be909bec19cfc4b","md5":"d7c3b775e71a9fc4888c8bff3f32ee87","sha256":"37e4ab980556f7144cd162cc876501c2957ca5d57dcf468019d7fcfe0cf9d921"},"downloads":-1,"filename":"svgpathtools-1.2.6-py2.py3-none-any.whl","has_sig":false,"md5_digest":"d7c3b775e71a9fc4888c8bff3f32ee87","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":56330,"upload_time":"2017-02-21T07:24:19","upload_time_iso_8601":"2017-02-21T07:24:19.655468Z","url":"https://files.pythonhosted.org/packages/78/f0/b54c41d4d659980d040424df722084b1c43248afeb857be909bec19cfc4b/svgpathtools-1.2.6-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"7ae2acb5b34e212ee45bc5a56e05cd51a2c86ad0860a5ed71f99b406d2a7e2a3","md5":"dd67c27cc95f8ee2686086c4d7fc6a4e","sha256":"1c4ca59a4c562d734a369fc8fad9d2bce0cbb47371e4af5c0e1d6059ca88efd8"},"downloads":-1,"filename":"svgpathtools-1.2.6.tar.gz","has_sig":false,"md5_digest":"dd67c27cc95f8ee2686086c4d7fc6a4e","packagetype":"sdist","python_version":"source","requires_python":null,"size":2098539,"upload_time":"2017-02-21T07:24:24","upload_time_iso_8601":"2017-02-21T07:24:24.383192Z","url":"https://files.pythonhosted.org/packages/7a/e2/acb5b34e212ee45bc5a56e05cd51a2c86ad0860a5ed71f99b406d2a7e2a3/svgpathtools-1.2.6.tar.gz","yanked":false,"yanked_reason":null}],"1.3.1":[{"comment_text":"","digests":{"blake2b_256":"4106a458f655141a1758d540d038e293b4dcd3c090062fa9c3eefe9de708bbb6","md5":"2903a98a4788f4cd14a346202fd411bf","sha256":"a865b63d621488ad201be28fde03bbffca311f89ac0062190a992073525e5ddc"},"downloads":-1,"filename":"svgpathtools-1.3.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"2903a98a4788f4cd14a346202fd411bf","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":56792,"upload_time":"2017-03-01T07:49:37","upload_time_iso_8601":"2017-03-01T07:49:37.902345Z","url":"https://files.pythonhosted.org/packages/41/06/a458f655141a1758d540d038e293b4dcd3c090062fa9c3eefe9de708bbb6/svgpathtools-1.3.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"2bbc47e5f7e07f931fe77ec661b38ac6407422840316435fbc97c4c6ec2c823f","md5":"6554950e0583a956f3828eb43e4ccd77","sha256":"212cf13b9d7e81b0fd15563464920dddb9f01bb55ddcf3d634f457180eb1ed13"},"downloads":-1,"filename":"svgpathtools-1.3.1.tar.gz","has_sig":false,"md5_digest":"6554950e0583a956f3828eb43e4ccd77","packagetype":"sdist","python_version":"source","requires_python":null,"size":2099174,"upload_time":"2017-03-01T07:49:42","upload_time_iso_8601":"2017-03-01T07:49:42.771274Z","url":"https://files.pythonhosted.org/packages/2b/bc/47e5f7e07f931fe77ec661b38ac6407422840316435fbc97c4c6ec2c823f/svgpathtools-1.3.1.tar.gz","yanked":false,"yanked_reason":null}],"1.3.2":[{"comment_text":"","digests":{"blake2b_256":"cb20d47da85982500ba50b8c38a0a43d8c80b4161b93cfcfd598085636c65e41","md5":"d14bf6ecc085bb97fb095b81e2bf0092","sha256":"0d22cb70d275eb865433ebc6a856776372360ce924b412d85c158356b03dca41"},"downloads":-1,"filename":"svgpathtools-1.3.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"d14bf6ecc085bb97fb095b81e2bf0092","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":56423,"upload_time":"2017-11-27T23:35:48","upload_time_iso_8601":"2017-11-27T23:35:48.688612Z","url":"https://files.pythonhosted.org/packages/cb/20/d47da85982500ba50b8c38a0a43d8c80b4161b93cfcfd598085636c65e41/svgpathtools-1.3.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"7f6d7dca381369b341c92dbccd56ba2a9715659d408b54ff91b6637d426e22a2","md5":"fdf65c102fb9e6bf3ffbae4a0b97b095","sha256":"e6221aea684d8048523706e45736b4cc40af32a029ea9259f1d36c678dbcbb1a"},"downloads":-1,"filename":"svgpathtools-1.3.2.tar.gz","has_sig":false,"md5_digest":"fdf65c102fb9e6bf3ffbae4a0b97b095","packagetype":"sdist","python_version":"source","requires_python":null,"size":2100640,"upload_time":"2017-11-27T23:36:03","upload_time_iso_8601":"2017-11-27T23:36:03.184215Z","url":"https://files.pythonhosted.org/packages/7f/6d/7dca381369b341c92dbccd56ba2a9715659d408b54ff91b6637d426e22a2/svgpathtools-1.3.2.tar.gz","yanked":false,"yanked_reason":null}],"1.3.3":[{"comment_text":"","digests":{"blake2b_256":"7196cc91050f3b53c2cea0eda18f371d0584e7f43713ce606738384e8001a877","md5":"29c51ee1bbca55130d27b04ee15f26e4","sha256":"7f7bdafe2c03b312178460104705e1d554d8cf36c898bec41bdce9fed3504746"},"downloads":-1,"filename":"svgpathtools-1.3.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"29c51ee1bbca55130d27b04ee15f26e4","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":50693,"upload_time":"2018-07-07T03:08:19","upload_time_iso_8601":"2018-07-07T03:08:19.326899Z","url":"https://files.pythonhosted.org/packages/71/96/cc91050f3b53c2cea0eda18f371d0584e7f43713ce606738384e8001a877/svgpathtools-1.3.3-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"5953a66c970db2abe96152b28fc990bab9a4b93f0dcab21e70db287166910415","md5":"253714213424e73b67a73c1fd73b714e","sha256":"e4b3784ae41b725fbce6a33a8981210967b16d0b557cb5d98c0ed0c81f0f89b9"},"downloads":-1,"filename":"svgpathtools-1.3.3.tar.gz","has_sig":false,"md5_digest":"253714213424e73b67a73c1fd73b714e","packagetype":"sdist","python_version":"source","requires_python":null,"size":2100979,"upload_time":"2018-07-07T03:08:24","upload_time_iso_8601":"2018-07-07T03:08:24.174526Z","url":"https://files.pythonhosted.org/packages/59/53/a66c970db2abe96152b28fc990bab9a4b93f0dcab21e70db287166910415/svgpathtools-1.3.3.tar.gz","yanked":false,"yanked_reason":null}],"1.4.1":[{"comment_text":"","digests":{"blake2b_256":"d3fffc1a3a943934b6d484584882091fd7d21ec2f201e075f1380fa0da39aa5b","md5":"956d92cb8f6a01b132d7287bd957d744","sha256":"6bc0082099ae1d64ae9649e837ccb10ae302520114da60eabf7360e5e46a12ed"},"downloads":-1,"filename":"svgpathtools-1.4.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"956d92cb8f6a01b132d7287bd957d744","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":63116,"upload_time":"2020-11-15T07:47:04","upload_time_iso_8601":"2020-11-15T07:47:04.027003Z","url":"https://files.pythonhosted.org/packages/d3/ff/fc1a3a943934b6d484584882091fd7d21ec2f201e075f1380fa0da39aa5b/svgpathtools-1.4.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"0cc5581696957d46cd98628d72bb361969bd4e017f938d70cb220c0e9ce422be","md5":"d8e9b5da4b41676366e58682ebb87c05","sha256":"7aaba07923ad85b6628301e92e5e72fd0d0a5057620e1423509b3a0b609b7485"},"downloads":-1,"filename":"svgpathtools-1.4.1.tar.gz","has_sig":false,"md5_digest":"d8e9b5da4b41676366e58682ebb87c05","packagetype":"sdist","python_version":"source","requires_python":null,"size":2123815,"upload_time":"2020-11-15T07:47:17","upload_time_iso_8601":"2020-11-15T07:47:17.337515Z","url":"https://files.pythonhosted.org/packages/0c/c5/581696957d46cd98628d72bb361969bd4e017f938d70cb220c0e9ce422be/svgpathtools-1.4.1.tar.gz","yanked":false,"yanked_reason":null}],"1.4.2":[{"comment_text":"","digests":{"blake2b_256":"543f96f10c879cda249d27f76615e3f05bb7649d3568a379c7f639a44a6a3776","md5":"305f322db067e43a73cf3f729bebc742","sha256":"052ef53f3e89f7aaae99b6c4d1a06bb2031de0536d12e42e33acba792de1186f"},"downloads":-1,"filename":"svgpathtools-1.4.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"305f322db067e43a73cf3f729bebc742","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":66375,"upload_time":"2021-09-23T11:32:57","upload_time_iso_8601":"2021-09-23T11:32:57.296313Z","url":"https://files.pythonhosted.org/packages/54/3f/96f10c879cda249d27f76615e3f05bb7649d3568a379c7f639a44a6a3776/svgpathtools-1.4.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"66b9366e53c55a63170496baa2ec2cc7a000790cf8890572df1ec6e9412e048d","md5":"cefeda407a94a775923300f0512b9ec7","sha256":"1a099c28361efc514a9e4a897fbc80bc7c4de174f54cb46a990bc471d6332c6c"},"downloads":-1,"filename":"svgpathtools-1.4.2.tar.gz","has_sig":false,"md5_digest":"cefeda407a94a775923300f0512b9ec7","packagetype":"sdist","python_version":"source","requires_python":null,"size":2129550,"upload_time":"2021-09-23T11:33:06","upload_time_iso_8601":"2021-09-23T11:33:06.574498Z","url":"https://files.pythonhosted.org/packages/66/b9/366e53c55a63170496baa2ec2cc7a000790cf8890572df1ec6e9412e048d/svgpathtools-1.4.2.tar.gz","yanked":false,"yanked_reason":null}],"1.4.3":[{"comment_text":"","digests":{"blake2b_256":"37e0fe52c7e1237113e65cfe50dc1647ab4b8b8d90f80e5479aac4e3d384479b","md5":"ecb2331671512e8081f6b7512988b064","sha256":"b890c469f0540466c1956ad379392dd93110fbbbb401eef068c2ec8ed0b9b034"},"downloads":-1,"filename":"svgpathtools-1.4.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"ecb2331671512e8081f6b7512988b064","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":66541,"upload_time":"2021-11-10T04:44:15","upload_time_iso_8601":"2021-11-10T04:44:15.802485Z","url":"https://files.pythonhosted.org/packages/37/e0/fe52c7e1237113e65cfe50dc1647ab4b8b8d90f80e5479aac4e3d384479b/svgpathtools-1.4.3-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"fd7238f4c679fe701401ea16dfec621c98e331a828d06afe59117a27e6846bbc","md5":"ed7050f0a3cbce3615db397cd88af24c","sha256":"18d1c1bac1d8e4b9e71b3f523d10a83a9768cf9d629bd65d1da80bd5b5e90ecd"},"downloads":-1,"filename":"svgpathtools-1.4.3.tar.gz","has_sig":false,"md5_digest":"ed7050f0a3cbce3615db397cd88af24c","packagetype":"sdist","python_version":"source","requires_python":null,"size":2129781,"upload_time":"2021-11-10T04:44:17","upload_time_iso_8601":"2021-11-10T04:44:17.656994Z","url":"https://files.pythonhosted.org/packages/fd/72/38f4c679fe701401ea16dfec621c98e331a828d06afe59117a27e6846bbc/svgpathtools-1.4.3.tar.gz","yanked":false,"yanked_reason":null}],"1.4.4":[{"comment_text":"","digests":{"blake2b_256":"8b10690f38f295876c5e6209e1cbad1b45272f4e374faaf59048dec8598da4b8","md5":"5a78e40f5ae77eae4bc5de73aa2187f0","sha256":"73511d8f40743f997bd27c41d7cb04b48574630adcd22cfcd1a32f8b01ab1206"},"downloads":-1,"filename":"svgpathtools-1.4.4-py2.py3-none-any.whl","has_sig":false,"md5_digest":"5a78e40f5ae77eae4bc5de73aa2187f0","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":66537,"upload_time":"2021-11-27T02:37:40","upload_time_iso_8601":"2021-11-27T02:37:40.501377Z","url":"https://files.pythonhosted.org/packages/8b/10/690f38f295876c5e6209e1cbad1b45272f4e374faaf59048dec8598da4b8/svgpathtools-1.4.4-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1d076bbcb71d679ea4e0cfc81f8ff965a3a68ff79484537754e353bed6ac14b0","md5":"6c4a60ce21146a91e379bdac592666f3","sha256":"9e1c60c2392a8613f10c04e315922eca57136311aa443dbd4f5b7f30a953554b"},"downloads":-1,"filename":"svgpathtools-1.4.4.tar.gz","has_sig":false,"md5_digest":"6c4a60ce21146a91e379bdac592666f3","packagetype":"sdist","python_version":"source","requires_python":null,"size":2129835,"upload_time":"2021-11-27T02:37:42","upload_time_iso_8601":"2021-11-27T02:37:42.642599Z","url":"https://files.pythonhosted.org/packages/1d/07/6bbcb71d679ea4e0cfc81f8ff965a3a68ff79484537754e353bed6ac14b0/svgpathtools-1.4.4.tar.gz","yanked":false,"yanked_reason":null}],"1.5.0":[{"comment_text":"","digests":{"blake2b_256":"5bfb7066c8937974c74d7e4ff8e13fb9693e10c48af7cd9286edfcc95629bef3","md5":"e8b16135c993baa5cfc2c65c5ff8cd3e","sha256":"92fe75e2456df1ff4a8aaf4c1523253a0738113e57e58dcf40a019ba676cc2bb"},"downloads":-1,"filename":"svgpathtools-1.5.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"e8b16135c993baa5cfc2c65c5ff8cd3e","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":67259,"upload_time":"2022-06-06T05:30:48","upload_time_iso_8601":"2022-06-06T05:30:48.361140Z","url":"https://files.pythonhosted.org/packages/5b/fb/7066c8937974c74d7e4ff8e13fb9693e10c48af7cd9286edfcc95629bef3/svgpathtools-1.5.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"49ce20fa1eb6150d47be6cdc849b0ad1dc9ba801eab04551cb301452ba1f3b6b","md5":"6a975f9db5d8715113fa44ae99dc7783","sha256":"e50c9ab9efdfdd2d1c016ef2c21022c9cae98671303b971c89caa004f7b1fa1b"},"downloads":-1,"filename":"svgpathtools-1.5.0.tar.gz","has_sig":false,"md5_digest":"6a975f9db5d8715113fa44ae99dc7783","packagetype":"sdist","python_version":"source","requires_python":null,"size":2131636,"upload_time":"2022-06-06T05:30:50","upload_time_iso_8601":"2022-06-06T05:30:50.299943Z","url":"https://files.pythonhosted.org/packages/49/ce/20fa1eb6150d47be6cdc849b0ad1dc9ba801eab04551cb301452ba1f3b6b/svgpathtools-1.5.0.tar.gz","yanked":false,"yanked_reason":null}],"1.5.1":[{"comment_text":"","digests":{"blake2b_256":"8192e3a5d356b25f587806fee29abc73f9e853655b689289665e0c1dfee52fe3","md5":"a08c93a06e0e86ab376835b741f66ccb","sha256":"876f61c20c6d52850dfb130b7b4dc399b7723d5ef7223a252aafed7bf1abae59"},"downloads":-1,"filename":"svgpathtools-1.5.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"a08c93a06e0e86ab376835b741f66ccb","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":67232,"upload_time":"2022-07-11T01:22:45","upload_time_iso_8601":"2022-07-11T01:22:45.434179Z","url":"https://files.pythonhosted.org/packages/81/92/e3a5d356b25f587806fee29abc73f9e853655b689289665e0c1dfee52fe3/svgpathtools-1.5.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"a0e26e925f15a7b8fd274be9d5de0379716b651d71ae7783125360826c1ae1c1","md5":"5f84adf9de68a7dd2683321f204f91dc","sha256":"d6d65159051b1471de6645606b59e1be0373750192665185ae976425c41b7fb0"},"downloads":-1,"filename":"svgpathtools-1.5.1.tar.gz","has_sig":false,"md5_digest":"5f84adf9de68a7dd2683321f204f91dc","packagetype":"sdist","python_version":"source","requires_python":null,"size":2131610,"upload_time":"2022-07-11T01:22:47","upload_time_iso_8601":"2022-07-11T01:22:47.249718Z","url":"https://files.pythonhosted.org/packages/a0/e2/6e925f15a7b8fd274be9d5de0379716b651d71ae7783125360826c1ae1c1/svgpathtools-1.5.1.tar.gz","yanked":false,"yanked_reason":null}],"1.6.0":[{"comment_text":"","digests":{"blake2b_256":"b42e126086b2a6547e446aacc0c281cfcee3b449c8139f57fe36f6ee096ab3ef","md5":"a61c66daeb594c7888a347d161d52831","sha256":"b046301769de58fe3d35a3f633914455b5bafba52dddfe0a41ec57ac1bcb9439"},"downloads":-1,"filename":"svgpathtools-1.6.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"a61c66daeb594c7888a347d161d52831","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":67369,"upload_time":"2023-02-13T22:50:00","upload_time_iso_8601":"2023-02-13T22:50:00.475462Z","url":"https://files.pythonhosted.org/packages/b4/2e/126086b2a6547e446aacc0c281cfcee3b449c8139f57fe36f6ee096ab3ef/svgpathtools-1.6.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"85841218dbaef20f9228b61aeee7f28d2438c09727676033c6aefde8320e0f24","md5":"8136eacedd9ca9175fbe40bbbbe550b9","sha256":"c0b934eed29acaeb09988afb4d15c5984366847236e21b80c079d8edb5ac0c4e"},"downloads":-1,"filename":"svgpathtools-1.6.0.tar.gz","has_sig":false,"md5_digest":"8136eacedd9ca9175fbe40bbbbe550b9","packagetype":"sdist","python_version":"source","requires_python":null,"size":2132214,"upload_time":"2023-02-13T22:50:02","upload_time_iso_8601":"2023-02-13T22:50:02.245473Z","url":"https://files.pythonhosted.org/packages/85/84/1218dbaef20f9228b61aeee7f28d2438c09727676033c6aefde8320e0f24/svgpathtools-1.6.0.tar.gz","yanked":false,"yanked_reason":null}],"1.6.1":[{"comment_text":"","digests":{"blake2b_256":"9a332777b992cff0b4240bbebe96433a37a6382e046d3471fcd14e40e1905ab7","md5":"30195ee5a732684e21b3175f578cfe42","sha256":"39967f9a817b8a12cc6dd1646fc162d522fca6c3fd5f8c94913c15ee4cb3a906"},"downloads":-1,"filename":"svgpathtools-1.6.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"30195ee5a732684e21b3175f578cfe42","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":67442,"upload_time":"2023-05-20T18:35:58","upload_time_iso_8601":"2023-05-20T18:35:58.409929Z","url":"https://files.pythonhosted.org/packages/9a/33/2777b992cff0b4240bbebe96433a37a6382e046d3471fcd14e40e1905ab7/svgpathtools-1.6.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"accc4eefc59e5fef22fef58cc3a38c56930432fbfa79e6865e8382c5ed1ccc9a","md5":"76bd0e8a44a6270dee46416916453edf","sha256":"7054e6de1953e295bf565d535d585695453b09f8db4a2f7c4853348732097a3e"},"downloads":-1,"filename":"svgpathtools-1.6.1.tar.gz","has_sig":false,"md5_digest":"76bd0e8a44a6270dee46416916453edf","packagetype":"sdist","python_version":"source","requires_python":null,"size":2133040,"upload_time":"2023-05-20T18:36:00","upload_time_iso_8601":"2023-05-20T18:36:00.204395Z","url":"https://files.pythonhosted.org/packages/ac/cc/4eefc59e5fef22fef58cc3a38c56930432fbfa79e6865e8382c5ed1ccc9a/svgpathtools-1.6.1.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"9a332777b992cff0b4240bbebe96433a37a6382e046d3471fcd14e40e1905ab7","md5":"30195ee5a732684e21b3175f578cfe42","sha256":"39967f9a817b8a12cc6dd1646fc162d522fca6c3fd5f8c94913c15ee4cb3a906"},"downloads":-1,"filename":"svgpathtools-1.6.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"30195ee5a732684e21b3175f578cfe42","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":67442,"upload_time":"2023-05-20T18:35:58","upload_time_iso_8601":"2023-05-20T18:35:58.409929Z","url":"https://files.pythonhosted.org/packages/9a/33/2777b992cff0b4240bbebe96433a37a6382e046d3471fcd14e40e1905ab7/svgpathtools-1.6.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"accc4eefc59e5fef22fef58cc3a38c56930432fbfa79e6865e8382c5ed1ccc9a","md5":"76bd0e8a44a6270dee46416916453edf","sha256":"7054e6de1953e295bf565d535d585695453b09f8db4a2f7c4853348732097a3e"},"downloads":-1,"filename":"svgpathtools-1.6.1.tar.gz","has_sig":false,"md5_digest":"76bd0e8a44a6270dee46416916453edf","packagetype":"sdist","python_version":"source","requires_python":null,"size":2133040,"upload_time":"2023-05-20T18:36:00","upload_time_iso_8601":"2023-05-20T18:36:00.204395Z","url":"https://files.pythonhosted.org/packages/ac/cc/4eefc59e5fef22fef58cc3a38c56930432fbfa79e6865e8382c5ed1ccc9a/svgpathtools-1.6.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
