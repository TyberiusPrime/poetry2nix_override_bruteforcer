{"info":{"author":"bridgecrew","author_email":"meet@bridgecrew.io","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Intended Audience :: Developers","License :: OSI Approved :: Apache Software License","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3 :: Only","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Software Development :: Libraries :: Python Modules","Typing :: Typed"],"description":"Python JSONPath Next-Generation |Build Status| |PyPI| |PyPI - Python Version|\n=============================================================================\n\nA final implementation of JSONPath for Python that aims to be standard compliant, including arithmetic\nand binary comparison operators, as defined in the original `JSONPath proposal`_.\n\nThis packages merges both `jsonpath-rw`_ and `jsonpath-rw-ext`_ and\nprovides several AST API enhancements, such as the ability to update or removes nodes in the tree.\n\nAbout\n-----\n\nThis library provides a robust and significantly extended implementation\nof JSONPath for Python.\n\nThis library differs from other JSONPath implementations in that it is a\nfull *language* implementation, meaning the JSONPath expressions are\nfirst class objects, easy to analyze, transform, parse, print, and\nextend.\n\nQuick Start\n-----------\n\nTo install, use pip:\n\n.. code:: bash\n\n    $ pip install --upgrade jsonpath-ng\n\n\nUsage\n-----\n\nBasic examples:\n\n.. code:: python\n\n    $ python\n\n    >>> from jsonpath_ng import jsonpath, parse\n\n    # A robust parser, not just a regex. (Makes powerful extensions possible; see below)\n    >>> jsonpath_expr = parse('foo[*].baz')\n\n    # Extracting values is easy\n    >>> [match.value for match in jsonpath_expr.find({'foo': [{'baz': 1}, {'baz': 2}]})]\n    [1, 2]\n\n    # Matches remember where they came from\n    >>> [str(match.full_path) for match in jsonpath_expr.find({'foo': [{'baz': 1}, {'baz': 2}]})]\n    ['foo.[0].baz', 'foo.[1].baz']\n\n    # And this can be useful for automatically providing ids for bits of data that do not have them (currently a global switch)\n    >>> jsonpath.auto_id_field = 'id'\n    >>> [match.value for match in parse('foo[*].id').find({'foo': [{'id': 'bizzle'}, {'baz': 3}]})]\n    ['foo.bizzle', 'foo.[1]']\n\n    # A handy extension: named operators like `parent`\n    >>> [match.value for match in parse('a.*.b.`parent`.c').find({'a': {'x': {'b': 1, 'c': 'number one'}, 'y': {'b': 2, 'c': 'number two'}}})]\n    ['number two', 'number one']\n\n    # You can also build expressions directly quite easily\n    >>> from jsonpath_ng.jsonpath import Fields\n    >>> from jsonpath_ng.jsonpath import Slice\n\n    >>> jsonpath_expr_direct = Fields('foo').child(Slice('*')).child(Fields('baz'))  # This is equivalent\n\n\nUsing the extended parser:\n\n.. code:: python\n\n  $ python\n\n  >>> from jsonpath_ng.ext import parse\n\n  # A robust parser, not just a regex. (Makes powerful extensions possible; see below)\n  >>> jsonpath_expr = parse('foo[*].baz')\n\n\nJSONPath Syntax\n---------------\n\nThe JSONPath syntax supported by this library includes some additional\nfeatures and omits some problematic features (those that make it\nunportable). In particular, some new operators such as ``|`` and\n``where`` are available, and parentheses are used for grouping not for\ncallbacks into Python, since with these changes the language is not\ntrivially associative. Also, fields may be quoted whether or not they\nare contained in brackets.\n\nAtomic expressions:\n\n+-----------------------+---------------------------------------------------------------------------------------------+\n| Syntax                | Meaning                                                                                     |\n+=======================+=============================================================================================+\n| ``$``                 | The root object                                                                             |\n+-----------------------+---------------------------------------------------------------------------------------------+\n| ```this```            | The \"current\" object.                                                                       |\n+-----------------------+---------------------------------------------------------------------------------------------+\n| ```foo```             | More generally, this syntax allows \"named operators\" to extend JSONPath is arbitrary ways   |\n+-----------------------+---------------------------------------------------------------------------------------------+\n| *field*               | Specified field(s), described below                                                         |\n+-----------------------+---------------------------------------------------------------------------------------------+\n| ``[`` *field* ``]``   | Same as *field*                                                                             |\n+-----------------------+---------------------------------------------------------------------------------------------+\n| ``[`` *idx* ``]``     | Array access, described below (this is always unambiguous with field access)                |\n+-----------------------+---------------------------------------------------------------------------------------------+\n\nJsonpath operators:\n\n+-------------------------------------+------------------------------------------------------------------------------------+\n| Syntax                              | Meaning                                                                            |\n+=====================================+====================================================================================+\n| *jsonpath1* ``.`` *jsonpath2*       | All nodes matched by *jsonpath2* starting at any node matching *jsonpath1*         |\n+-------------------------------------+------------------------------------------------------------------------------------+\n| *jsonpath* ``[`` *whatever* ``]``   | Same as *jsonpath*\\ ``.``\\ *whatever*                                              |\n+-------------------------------------+------------------------------------------------------------------------------------+\n| *jsonpath1* ``..`` *jsonpath2*      | All nodes matched by *jsonpath2* that descend from any node matching *jsonpath1*   |\n+-------------------------------------+------------------------------------------------------------------------------------+\n| *jsonpath1* ``where`` *jsonpath2*   | Any nodes matching *jsonpath1* with a child matching *jsonpath2*                   |\n+-------------------------------------+------------------------------------------------------------------------------------+\n| *jsonpath1* ``|`` *jsonpath2*       | Any nodes matching the union of *jsonpath1* and *jsonpath2*                        |\n+-------------------------------------+------------------------------------------------------------------------------------+\n\nField specifiers ( *field* ):\n\n+-------------------------+-------------------------------------------------------------------------------------+\n| Syntax                  | Meaning                                                                             |\n+=========================+=====================================================================================+\n| ``fieldname``           | the field ``fieldname`` (from the \"current\" object)                                 |\n+-------------------------+-------------------------------------------------------------------------------------+\n| ``\"fieldname\"``         | same as above, for allowing special characters in the fieldname                     |\n+-------------------------+-------------------------------------------------------------------------------------+\n| ``'fieldname'``         | ditto                                                                               |\n+-------------------------+-------------------------------------------------------------------------------------+\n| ``*``                   | any field                                                                           |\n+-------------------------+-------------------------------------------------------------------------------------+\n| *field* ``,`` *field*   | either of the named fields (you can always build equivalent jsonpath using ``|``)   |\n+-------------------------+-------------------------------------------------------------------------------------+\n\nArray specifiers ( *idx* ):\n\n+-----------------------------------------+---------------------------------------------------------------------------------------+\n| Syntax                                  | Meaning                                                                               |\n+=========================================+=======================================================================================+\n| ``[``\\ *n*\\ ``]``                       | array index (may be comma-separated list)                                             |\n+-----------------------------------------+---------------------------------------------------------------------------------------+\n| ``[``\\ *start*\\ ``?:``\\ *end*\\ ``?]``   | array slicing (note that *step* is unimplemented only due to lack of need thus far)   |\n+-----------------------------------------+---------------------------------------------------------------------------------------+\n| ``[*]``                                 | any array index                                                                       |\n+-----------------------------------------+---------------------------------------------------------------------------------------+\n\nProgrammatic JSONPath\n---------------------\n\nIf you are programming in Python and would like a more robust way to\ncreate JSONPath expressions that does not depend on a parser, it is very\neasy to do so directly, and here are some examples:\n\n-  ``Root()``\n-  ``Slice(start=0, end=None, step=None)``\n-  ``Fields('foo', 'bar')``\n-  ``Index(42)``\n-  ``Child(Fields('foo'), Index(42))``\n-  ``Where(Slice(), Fields('subfield'))``\n-  ``Descendants(jsonpath, jsonpath)``\n\n\nExtras\n------\n\n-  *Path data*: The result of ``JsonPath.find`` provide detailed context\n   and path data so it is easy to traverse to parent objects, print full\n   paths to pieces of data, and generate automatic ids.\n-  *Automatic Ids*: If you set ``jsonpath_ng.auto_id_field`` to a value\n   other than None, then for any piece of data missing that field, it\n   will be replaced by the JSONPath to it, giving automatic unique ids\n   to any piece of data. These ids will take into account any ids\n   already present as well.\n-  *Named operators*: Instead of using ``@`` to reference the currently\n   object, this library uses ```this```. In general, any string\n   contained in backquotes can be made to be a new operator, currently\n   by extending the library.\n\n\nExtensions\n----------\n\n+--------------+----------------------------------------------+\n| name         | Example                                      |\n+==============+==============================================+\n| len          | - $.objects.`len`                            |\n+--------------+----------------------------------------------+\n| sub          | - $.field.`sub(/foo\\\\\\\\+(.*)/, \\\\\\\\1)`       |\n+--------------+----------------------------------------------+\n| split        | - $.field.`split(+, 2, -1)`                  |\n|              | - $.field.`split(sep, segement, maxsplit)`   |\n+--------------+----------------------------------------------+\n| sorted       | - $.objects.`sorted`                         |\n|              | - $.objects[\\\\some_field]                    |\n|              | - $.objects[\\\\some_field,/other_field]       |\n+--------------+----------------------------------------------+\n| filter       | - $.objects[?(@some_field > 5)]              |\n|              | - $.objects[?some_field = \"foobar\")]         |\n|              | - $.objects[?some_field =~ \"foobar\")]        |\n|              | - $.objects[?some_field > 5 & other < 2)]    |\n+--------------+----------------------------------------------+\n| arithmetic   | - $.foo + \"_\" + $.bar                        |\n| (-+*/)       | - $.foo * 12                                 |\n|              | - $.objects[*].cow + $.objects[*].cat        |\n+--------------+----------------------------------------------+\n\nAbout arithmetic and string\n---------------------------\n\nOperations are done with python operators and allows types that python\nallows, and return [] if the operation can be done due to incompatible types.\n\nWhen operators are used, a jsonpath must be be fully defined otherwise\njsonpath-rw-ext can't known if the expression is a string or a jsonpath field,\nin this case it will choice string as type.\n\nExample with data::\n\n    {\n        'cow': 'foo',\n        'fish': 'bar'\n    }\n\n| **cow + fish** returns **cowfish**\n| **$.cow + $.fish** returns **foobar**\n| **$.cow + \"_\" + $.fish** returns **foo_bar**\n| **$.cow + \"_\" + fish** returns **foo_fish**\n\nAbout arithmetic and list\n-------------------------\n\nArithmetic can be used against two lists if they have the same size.\n\nExample with data::\n\n    {'objects': [\n        {'cow': 2, 'cat': 3},\n        {'cow': 4, 'cat': 6}\n    ]}\n\n| **$.objects[\\*].cow + $.objects[\\*].cat** returns **[6, 9]**\n\nMore to explore\n---------------\n\nThere are way too many JSONPath implementations out there to discuss.\nSome are robust, some are toy projects that still work fine, some are\nexercises. There will undoubtedly be many more. This one is made for use\nin released, maintained code, and in particular for programmatic access\nto the abstract syntax and extension. But JSONPath at its simplest just\nisn't that complicated, so you can probably use any of them\nsuccessfully. Why not this one?\n\nThe original proposal, as far as I know:\n\n-  `JSONPath - XPath for\n   JSON <http://goessner.net/articles/JSONPath/>`__ by Stefan Goessner.\n\nOther examples\n--------------\n\nLoading json data from file\n\n.. code:: python\n\n    import json\n    d = json.loads('{\"foo\": [{\"baz\": 1}, {\"baz\": 2}]}')\n    # or\n    with open('myfile.json') as f:\n        d = json.load(f)\n\nSpecial note about PLY and docstrings\n-------------------------------------\n\nThe main parsing toolkit underlying this library,\n`PLY <https://github.com/dabeaz/ply>`__, does not work with docstrings\nremoved. For example, ``PYTHONOPTIMIZE=2`` and ``python -OO`` will both\ncause a failure.\n\nContributors\n------------\n\nThis package was authored by:\n\n-  `Kenn Knowles <https://github.com/kennknowles>`__\n-  `Tomas Aparicio <https://github.com/h2non>`__\n\nwith the help of patches submitted by `these contributors <https://github.com/kennknowles/python-jsonpath-ng/graphs/contributors>`__.\n\nCopyright and License\n---------------------\n\nCopyright 2013 - Kenneth Knowles\n\nCopyright 2017 - Tomas Aparicio\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may\nnot use this file except in compliance with the License. You may obtain\na copy of the License at\n\n::\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n.. _`JSONPath proposal`: http://goessner.net/articles/JsonPath/\n.. _`jsonpath-rw`: https://github.com/kennknowles/python-jsonpath-rw\n.. _`jsonpath-rw-ext`: https://pypi.python.org/pypi/jsonpath-rw-ext/\n\n.. |PyPi downloads| image:: https://pypip.in/d/jsonpath-ng/badge.png\n   :target: https://pypi.python.org/pypi/bc-jsonpath-ng\n.. |Build Status| image:: https://github.com/bridgecrewio/jsonpath-ng/workflows/Release/badge.svg?style=flat\n   :target: https://github.com/bridgecrewio/jsonpath-ng/actions/workflows/release.yml\n.. |PyPI| image:: https://img.shields.io/pypi/v/bc-jsonpath-ng\n   :target: https://pypi.python.org/pypi/bc-jsonpath-ng\n.. |PyPI - Python Version| image:: https://img.shields.io/pypi/pyversions/bc-jsonpath-ng\n   :target: https://pypi.python.org/pypi/bc-jsonpath-ng\n.. |Documentation Status| image:: https://img.shields.io/badge/docs-latest-green.svg?style=flat\n   :target: http://jsonpath-ng.readthedocs.io/en/latest/?badge=latest\n","description_content_type":"text/x-rst","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/bridgecrewio/jsonpath-ng","keywords":"","license":"Apache License 2.0","maintainer":"","maintainer_email":"","name":"bc-jsonpath-ng","package_url":"https://pypi.org/project/bc-jsonpath-ng/","platform":null,"project_url":"https://pypi.org/project/bc-jsonpath-ng/","project_urls":{"Homepage":"https://github.com/bridgecrewio/jsonpath-ng"},"provides_extra":null,"release_url":"https://pypi.org/project/bc-jsonpath-ng/1.6.1/","requires_dist":["ply","decorator"],"requires_python":">=3.8","summary":"A final implementation of JSONPath for Python that aims to be standard compliant, including arithmetic and binary comparison operators and providing clear AST for metaprogramming.","version":"1.6.1","yanked":false,"yanked_reason":null},"last_serial":20794637,"releases":{"1.5.4":[{"comment_text":"","digests":{"blake2b_256":"6090cb2addef8c4fb197aca489f78d1503a12f471ba883f0e294ef3186341b55","md5":"2a7b725dcdf144f7e93ec58a37229eef","sha256":"331a0258c4ef96cd5389d47125b9833f84441a9d1e8dec7ac65da73a70e1f0c8"},"downloads":-1,"filename":"bc_jsonpath_ng-1.5.4-py3-none-any.whl","has_sig":false,"md5_digest":"2a7b725dcdf144f7e93ec58a37229eef","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":29442,"upload_time":"2022-12-10T21:28:08","upload_time_iso_8601":"2022-12-10T21:28:08.145559Z","url":"https://files.pythonhosted.org/packages/60/90/cb2addef8c4fb197aca489f78d1503a12f471ba883f0e294ef3186341b55/bc_jsonpath_ng-1.5.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"7e8cc893c0d7ef183e547111bf877c6aebc32678961202e68830a506cd15966b","md5":"295fa831d12bfe0b28d96988cd95c8fa","sha256":"91c9c28860722fe0ffbfe4e182cbf78e0e7d6a714771416c9baf336acaf61db1"},"downloads":-1,"filename":"bc-jsonpath-ng-1.5.4.tar.gz","has_sig":false,"md5_digest":"295fa831d12bfe0b28d96988cd95c8fa","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":28142,"upload_time":"2022-12-10T21:28:12","upload_time_iso_8601":"2022-12-10T21:28:12.802851Z","url":"https://files.pythonhosted.org/packages/7e/8c/c893c0d7ef183e547111bf877c6aebc32678961202e68830a506cd15966b/bc-jsonpath-ng-1.5.4.tar.gz","yanked":false,"yanked_reason":null}],"1.5.6":[{"comment_text":"","digests":{"blake2b_256":"05ee120734b41b623ed64c99fd5a1a9f5c19d047e20da82a9472ab7286af53de","md5":"4ccf5c19dea251cd5e0520164311d9f8","sha256":"52464f06fe9f2706c30981e7c33087f9b4ffc61cac78e6fb379c0c92fba2e5f2"},"downloads":-1,"filename":"bc_jsonpath_ng-1.5.6-py3-none-any.whl","has_sig":false,"md5_digest":"4ccf5c19dea251cd5e0520164311d9f8","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":29558,"upload_time":"2022-12-10T22:23:33","upload_time_iso_8601":"2022-12-10T22:23:33.209523Z","url":"https://files.pythonhosted.org/packages/05/ee/120734b41b623ed64c99fd5a1a9f5c19d047e20da82a9472ab7286af53de/bc_jsonpath_ng-1.5.6-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"8d4b3f365e05407e2aaf931abc4b994a0a91e65a16555218e535a1968680afdf","md5":"89379f739f669ab2b6e034d45b1238f3","sha256":"ae1640aedf0866bbba23102671907d34937b835e01867b8e2e25f63f4897ad4f"},"downloads":-1,"filename":"bc-jsonpath-ng-1.5.6.tar.gz","has_sig":false,"md5_digest":"89379f739f669ab2b6e034d45b1238f3","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":28121,"upload_time":"2022-12-10T22:23:35","upload_time_iso_8601":"2022-12-10T22:23:35.011771Z","url":"https://files.pythonhosted.org/packages/8d/4b/3f365e05407e2aaf931abc4b994a0a91e65a16555218e535a1968680afdf/bc-jsonpath-ng-1.5.6.tar.gz","yanked":false,"yanked_reason":null}],"1.5.8":[{"comment_text":"","digests":{"blake2b_256":"8a3d23e5fcf30a489c85fe1d59aa009897dfbc8b4aca71e22a3f6f111fdec25d","md5":"8cc0033cadf10bc42eb2ca4798d869bb","sha256":"f9ead127f02cbae3fec7442d2e2eae8e104b3362f872f9d687991b74831ec2b9"},"downloads":-1,"filename":"bc_jsonpath_ng-1.5.8-py3-none-any.whl","has_sig":false,"md5_digest":"8cc0033cadf10bc42eb2ca4798d869bb","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":29683,"upload_time":"2022-12-13T13:42:04","upload_time_iso_8601":"2022-12-13T13:42:04.479337Z","url":"https://files.pythonhosted.org/packages/8a/3d/23e5fcf30a489c85fe1d59aa009897dfbc8b4aca71e22a3f6f111fdec25d/bc_jsonpath_ng-1.5.8-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f37111faab6bd73cb53798aa67a6c457495a7f2525115cf1ef1946e05c8725df","md5":"59237702eec63ace0e2c69c8d53d975c","sha256":"c79388a3bfd00b52d8dd6cd600b637c377c9fca22faa7d30bbbc38cca9b06ee2"},"downloads":-1,"filename":"bc-jsonpath-ng-1.5.8.tar.gz","has_sig":false,"md5_digest":"59237702eec63ace0e2c69c8d53d975c","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":24694,"upload_time":"2022-12-13T13:42:06","upload_time_iso_8601":"2022-12-13T13:42:06.421745Z","url":"https://files.pythonhosted.org/packages/f3/71/11faab6bd73cb53798aa67a6c457495a7f2525115cf1ef1946e05c8725df/bc-jsonpath-ng-1.5.8.tar.gz","yanked":false,"yanked_reason":null}],"1.5.9":[{"comment_text":"","digests":{"blake2b_256":"7e3d8912246032624030600fe5c2c7ac47f6ea750d81c02f682d4619d43f9daa","md5":"16824729d6daf95f8b5dc41900f93993","sha256":"51c3ba65884654ec7be91288b23e1b65bd0b5188acdc51bc80ecfc365a54b77c"},"downloads":-1,"filename":"bc_jsonpath_ng-1.5.9-py3-none-any.whl","has_sig":false,"md5_digest":"16824729d6daf95f8b5dc41900f93993","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":29812,"upload_time":"2023-02-07T09:18:49","upload_time_iso_8601":"2023-02-07T09:18:49.493288Z","url":"https://files.pythonhosted.org/packages/7e/3d/8912246032624030600fe5c2c7ac47f6ea750d81c02f682d4619d43f9daa/bc_jsonpath_ng-1.5.9-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f8779a5ca9b848f57900f40ef1499cfabc27d62ecc3377a1e5f793c401e4cf60","md5":"9df4cd2db981d2def8bc5aad2eee9e2a","sha256":"5e72d78887521469f8a52966f6f0664ec3d59dcb2cebf85b8131867a241c84ec"},"downloads":-1,"filename":"bc-jsonpath-ng-1.5.9.tar.gz","has_sig":false,"md5_digest":"9df4cd2db981d2def8bc5aad2eee9e2a","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":24885,"upload_time":"2023-02-07T09:18:51","upload_time_iso_8601":"2023-02-07T09:18:51.534680Z","url":"https://files.pythonhosted.org/packages/f8/77/9a5ca9b848f57900f40ef1499cfabc27d62ecc3377a1e5f793c401e4cf60/bc-jsonpath-ng-1.5.9.tar.gz","yanked":false,"yanked_reason":null}],"1.6.1":[{"comment_text":"","digests":{"blake2b_256":"de8827b4b4374e96bfd6b8e49cdde4e5aaa61eb9046b8ead9b18dd2d3ad6a154","md5":"ce5af053cb02d6590646115d03e3006c","sha256":"2c85bb1d194376808fe1fc49558dd484e39024b15c719995e22de811e6ba4dc8"},"downloads":-1,"filename":"bc_jsonpath_ng-1.6.1-py3-none-any.whl","has_sig":false,"md5_digest":"ce5af053cb02d6590646115d03e3006c","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":29783,"upload_time":"2023-11-26T13:29:28","upload_time_iso_8601":"2023-11-26T13:29:28.789369Z","url":"https://files.pythonhosted.org/packages/de/88/27b4b4374e96bfd6b8e49cdde4e5aaa61eb9046b8ead9b18dd2d3ad6a154/bc_jsonpath_ng-1.6.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3aadb6745e21e050fac1ea499fdcafb689391ebf2ff01f2a96da275bb189c2ed","md5":"63b38f54e6c986f149b2f946f45c0390","sha256":"6ea4e379c4400a511d07605b8d981950292dd098a5619d143328af4e841a2320"},"downloads":-1,"filename":"bc-jsonpath-ng-1.6.1.tar.gz","has_sig":false,"md5_digest":"63b38f54e6c986f149b2f946f45c0390","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":36478,"upload_time":"2023-11-26T13:29:31","upload_time_iso_8601":"2023-11-26T13:29:31.081279Z","url":"https://files.pythonhosted.org/packages/3a/ad/b6745e21e050fac1ea499fdcafb689391ebf2ff01f2a96da275bb189c2ed/bc-jsonpath-ng-1.6.1.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"de8827b4b4374e96bfd6b8e49cdde4e5aaa61eb9046b8ead9b18dd2d3ad6a154","md5":"ce5af053cb02d6590646115d03e3006c","sha256":"2c85bb1d194376808fe1fc49558dd484e39024b15c719995e22de811e6ba4dc8"},"downloads":-1,"filename":"bc_jsonpath_ng-1.6.1-py3-none-any.whl","has_sig":false,"md5_digest":"ce5af053cb02d6590646115d03e3006c","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":29783,"upload_time":"2023-11-26T13:29:28","upload_time_iso_8601":"2023-11-26T13:29:28.789369Z","url":"https://files.pythonhosted.org/packages/de/88/27b4b4374e96bfd6b8e49cdde4e5aaa61eb9046b8ead9b18dd2d3ad6a154/bc_jsonpath_ng-1.6.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3aadb6745e21e050fac1ea499fdcafb689391ebf2ff01f2a96da275bb189c2ed","md5":"63b38f54e6c986f149b2f946f45c0390","sha256":"6ea4e379c4400a511d07605b8d981950292dd098a5619d143328af4e841a2320"},"downloads":-1,"filename":"bc-jsonpath-ng-1.6.1.tar.gz","has_sig":false,"md5_digest":"63b38f54e6c986f149b2f946f45c0390","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":36478,"upload_time":"2023-11-26T13:29:31","upload_time_iso_8601":"2023-11-26T13:29:31.081279Z","url":"https://files.pythonhosted.org/packages/3a/ad/b6745e21e050fac1ea499fdcafb689391ebf2ff01f2a96da275bb189c2ed/bc-jsonpath-ng-1.6.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
