{"info":{"author":"NVIDIA","author_email":"svc_tensorrt@nvidia.com","bugtrack_url":null,"classifiers":["Intended Audience :: Developers","Programming Language :: Python :: 3"],"description":"# ONNX GraphSurgeon\n\n\n## Table of Contents\n\n- [Introduction](#introduction)\n- [Installation](#installation)\n- [Examples](#examples)\n- [Understanding The Basics](#understanding-the-basics)\n    - [Importers](#importers)\n    - [IR](#ir)\n        - [Tensor](#tensor)\n        - [Node](#node)\n        - [A Note On Modifying Inputs And Outputs](#a-note-on-modifying-inputs-and-outputs)\n        - [Graph](#graph)\n    - [Exporters](#exporters)\n- [Advanced](#advanced)\n    - [Working With Models With External Data](#working-with-models-with-external-data)\n\n## Introduction\n\nONNX GraphSurgeon is a tool that allows you to easily generate new ONNX graphs, or modify existing ones.\n\n\n## Installation\n\n### Using Prebuilt Wheels\n```bash\npython3 -m pip install onnx_graphsurgeon --extra-index-url https://pypi.ngc.nvidia.com\n```\n\n### Building From Source\n\n#### Using Make Targets\n```\nmake install\n```\n\n#### Building Manually\n\n1. Build a wheel:\n```\nmake build\n```\n\n2. Install the wheel manually from **outside** the repository:\n```\npython3 -m pip install onnx_graphsurgeon/dist/onnx_graphsurgeon-*-py2.py3-none-any.whl\n```\n\n\n## Examples\n\nThe [examples](./examples) directory contains several examples of common use-cases of ONNX GraphSurgeon.\n\nThe visualizations provided were generated using [Netron](https://github.com/lutzroeder/netron).\n\n\n## Understanding The Basics\n\nONNX GraphSurgeon is composed of three major components: Importers, the IR, and Exporters.\n\n### Importers\n\nImporters are used to import a graph into the ONNX GraphSurgeon IR.\nThe importer interface is defined in [base_importer.py](./onnx_graphsurgeon/importers/base_importer.py).\n\nONNX GraphSurgeon also provides [high-level importer APIs](./onnx_graphsurgeon/api/api.py) for ease of use:\n```python\ngraph = gs.import_onnx(onnx.load(\"model.onnx\"))\n```\n\n### IR\n\nThe Intermediate Representation (IR) is where all modifications to the graph are made. It can also be used to\ncreate new graphs from scratch. The IR involves three components: [Tensor](./onnx_graphsurgeon/ir/tensor.py)s,\n[Node](./onnx_graphsurgeon/ir/node.py)s, and [Graph](./onnx_graphsurgeon/ir/graph.py)s.\n\nNearly all of the member variables of each component can be freely modified. For details on the various\nattributes of these classes, you can view the help output using `help(<class_or_instance>)` in an\ninteractive shell, or using `print(help(<class_or_instance>))` in a script, where `<class_or_instance>`\nis an ONNX GraphSurgeon type, or an instance of that type.\n\n#### Tensor\n\nTensors are divided into two subclasses: `Variable` and `Constant`.\n\n- A `Constant` is a tensor whose values are known upfront, and can be retrieved as a NumPy array and modified.\n    *Note: The `values` property of a `Constant` is loaded on-demand. If the property is not accessed, the values will*\n    *not be loaded as a NumPy array*.\n- A `Variable` is a tensor whose values are unknown until inference-time, but may contain information about data type and shape.\n\nThe inputs and outputs of Tensors are always Nodes.\n\n**An example constant tensor from ResNet50:**\n```\n>>> print(tensor)\nConstant (gpu_0/res_conv1_bn_s_0)\n[0.85369843 1.1515082  0.9152944  0.9577646  1.0663182  0.55629414\n 1.2009839  1.1912311  2.2619808  0.62263143 1.1149117  1.4921428\n 0.89566356 1.0358194  1.431092   1.5360111  1.25086    0.8706703\n 1.2564877  0.8524589  0.9436758  0.7507614  0.8945271  0.93587166\n 1.8422242  3.0609846  1.3124607  1.2158023  1.3937513  0.7857263\n 0.8928106  1.3042281  1.0153942  0.89356416 1.0052011  1.2964457\n 1.1117343  1.0669073  0.91343874 0.92906713 1.0465593  1.1261675\n 1.4551278  1.8252873  1.9678202  1.1031747  2.3236883  0.8831993\n 1.1133649  1.1654979  1.2705412  2.5578163  0.9504889  1.0441847\n 1.0620039  0.92997414 1.2119316  1.3101407  0.7091761  0.99814713\n 1.3404484  0.96389204 1.3435135  0.9236031 ]\n```\n\n**An example variable tensor from ResNet50:**\n```\n>>> print(tensor)\nVariable (gpu_0/data_0): (shape=[1, 3, 224, 224], dtype=float32)\n```\n\n\n#### Node\n\nA `Node` defines an operation in the graph. A node may specify attributes; attribute values can be any\nPython primitive types, as well as ONNX GraphSurgeon `Graph`s or `Tensor`s\n\nThe inputs and outputs of Nodes are always Tensors\n\n**An example ReLU node from ResNet50:**\n```\n>>> print(node)\n (Relu)\n    Inputs: [Tensor (gpu_0/res_conv1_bn_1)]\n    Outputs: [Tensor (gpu_0/res_conv1_bn_2)]\n```\n\nIn this case, the node has no attributes. Otherwise, attributes are displayed as an `OrderedDict`.\n\n\n#### A Note On Modifying Inputs And Outputs\n\nThe `inputs`/`outputs` members of nodes and tensors have special logic that will update the inputs/outputs of all\naffected nodes/tensors when you make a change. This means, for example, that you do **not** need to update the `inputs`\nof a Node when you make a change to the `outputs` of its input tensor.\n\nConsider the following node:\n```\n>>> print(node)\n (Relu).\n    Inputs: [Tensor (gpu_0/res_conv1_bn_1)]\n    Outputs: [Tensor (gpu_0/res_conv1_bn_2)]\n```\n\nThe input tensor can be accessed like so:\n```\n>>> tensor = node.inputs[0]\n>>> print(tensor)\nTensor (gpu_0/res_conv1_bn_1)\n>>> print(tensor.outputs)\n[ (Relu).\n\tInputs: [Tensor (gpu_0/res_conv1_bn_1)]\n\tOutputs: [Tensor (gpu_0/res_conv1_bn_2)]\n```\n\nIf we remove the node from the outputs of the tensor, this is reflected in the node inputs as well:\n```\n>>> del tensor.outputs[0]\n>>> print(tensor.outputs)\n[]\n>>> print(node)\n (Relu).\n    Inputs: []\n    Outputs: [Tensor (gpu_0/res_conv1_bn_2)]\n```\n\n\n#### Graph\n\nA `Graph` contains zero or more `Node`s and input/output `Tensor`s.\n\nIntermediate tensors are not explicitly tracked, but are instead retrieved from the nodes contained within the graph.\n\nThe `Graph` class exposes several functions. A small subset is listed here:\n\n- `cleanup()`: Removes unused nodes and tensors in the graph\n- `toposort()`: Topologically sorts the graph.\n- `tensors()`: Returns a `Dict[str, Tensor]` mapping tensor names to tensors, by walking over all the tensors in the graph.\n    This is an `O(N)` operation, and so may be slow for large graphs.\n\nTo see the full Graph API, you can see `help(onnx_graphsurgeon.Graph)` in an interactive Python shell.\n\n### Exporters\n\nExporters are used to export the ONNX GraphSurgeon IR to ONNX or other types of graphs.\nThe exporter interface is defined in [base_exporter.py](./onnx_graphsurgeon/exporters/base_exporter.py).\n\nONNX GraphSurgeon also provides [high-level exporter APIs](./onnx_graphsurgeon/api/api.py) for ease of use:\n```python\nonnx.save(gs.export_onnx(graph), \"model.onnx\")\n```\n\n\n## Advanced\n\n### Working With Models With External Data\n\nUsing models with externally stored data with ONNX-GraphSurgeon is almost the same as working with\nONNX models without external data. Refer to the\n[official ONNX documentation](https://github.com/onnx/onnx/blob/master/docs/PythonAPIOverview.md#loading-an-onnx-model-with-external-data)\nfor details on how to load such models. To import the model into ONNX-GraphSurgeon, you can use the\n`import_onnx` function as normal.\n\nDuring export, you just need to take one additional step:\n\n1. Export the model from ONNX-GraphSurgeon as normal:\n    ```python\n    model = gs.export_onnx(graph)\n    ```\n\n2. Update the model so that it writes its data to the external location. If the location is not\n    specified, it defaults to the same directory as the ONNX model:\n    ```python\n    from onnx.external_data_helper import convert_model_to_external_data\n\n    convert_model_to_external_data(model, location=\"model.data\")\n    ```\n\n3. Then you can save the model as usual:\n    ```python\n    onnx.save(model, \"model.onnx\")\n    ```\n\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/NVIDIA/TensorRT/tree/main/tools/onnx-graphsurgeon","keywords":null,"license":"Apache 2.0","maintainer":null,"maintainer_email":null,"name":"onnx-graphsurgeon","package_url":"https://pypi.org/project/onnx-graphsurgeon/","platform":null,"project_url":"https://pypi.org/project/onnx-graphsurgeon/","project_urls":{"Homepage":"https://github.com/NVIDIA/TensorRT/tree/main/tools/onnx-graphsurgeon"},"provides_extra":null,"release_url":"https://pypi.org/project/onnx-graphsurgeon/0.5.2/","requires_dist":["numpy","onnx>=1.14.0"],"requires_python":null,"summary":"ONNX GraphSurgeon","version":"0.5.2","yanked":false,"yanked_reason":null},"last_serial":22755465,"releases":{"0.0.1.dev4":[{"comment_text":"","digests":{"blake2b_256":"a980d0633ca3158f9712ba3b003e2046fe6f299fe53f9ba6e2a48dbea95c703b","md5":"2476e051f41a938850e74b304a9f5315","sha256":"541709dd5ecfa160b0434592e65983ee2b84cba2a5f36e27501a36c95c3b50d8"},"downloads":-1,"filename":"onnx-graphsurgeon-0.0.1.dev4.tar.gz","has_sig":false,"md5_digest":"2476e051f41a938850e74b304a9f5315","packagetype":"sdist","python_version":"source","requires_python":null,"size":3791,"upload_time":"2020-09-18T22:49:45","upload_time_iso_8601":"2020-09-18T22:49:45.474964Z","url":"https://files.pythonhosted.org/packages/a9/80/d0633ca3158f9712ba3b003e2046fe6f299fe53f9ba6e2a48dbea95c703b/onnx-graphsurgeon-0.0.1.dev4.tar.gz","yanked":false,"yanked_reason":null}],"0.0.1.dev5":[{"comment_text":"","digests":{"blake2b_256":"e8c826f338891498d8a193a9d1698832399979636273f26a67a555e3952a3a7f","md5":"6cdb01b66ccf0a50a0a9457b8884a503","sha256":"3ddad26812a39f0f3a4da472e40b6de3ffd190b01bb154d70add62eaa5096a25"},"downloads":-1,"filename":"onnx-graphsurgeon-0.0.1.dev5.tar.gz","has_sig":false,"md5_digest":"6cdb01b66ccf0a50a0a9457b8884a503","packagetype":"sdist","python_version":"source","requires_python":null,"size":7913,"upload_time":"2021-04-23T23:32:51","upload_time_iso_8601":"2021-04-23T23:32:51.827736Z","url":"https://files.pythonhosted.org/packages/e8/c8/26f338891498d8a193a9d1698832399979636273f26a67a555e3952a3a7f/onnx-graphsurgeon-0.0.1.dev5.tar.gz","yanked":false,"yanked_reason":null}],"0.5.2":[{"comment_text":"","digests":{"blake2b_256":"0d2093e7143af3a0b3b3d9f3306bfc46e55d0d307242b4c1bf36ff108460e5a3","md5":"a3ad56f08483b547f20398ed1ca640bb","sha256":"10c130d6129fdeee02945f8103b5b112e6fd4d9b356e2dd3e80f53e0ebee7b5c"},"downloads":-1,"filename":"onnx_graphsurgeon-0.5.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"a3ad56f08483b547f20398ed1ca640bb","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":56430,"upload_time":"2024-04-13T23:29:58","upload_time_iso_8601":"2024-04-13T23:29:58.545049Z","url":"https://files.pythonhosted.org/packages/0d/20/93e7143af3a0b3b3d9f3306bfc46e55d0d307242b4c1bf36ff108460e5a3/onnx_graphsurgeon-0.5.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"0d2093e7143af3a0b3b3d9f3306bfc46e55d0d307242b4c1bf36ff108460e5a3","md5":"a3ad56f08483b547f20398ed1ca640bb","sha256":"10c130d6129fdeee02945f8103b5b112e6fd4d9b356e2dd3e80f53e0ebee7b5c"},"downloads":-1,"filename":"onnx_graphsurgeon-0.5.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"a3ad56f08483b547f20398ed1ca640bb","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":56430,"upload_time":"2024-04-13T23:29:58","upload_time_iso_8601":"2024-04-13T23:29:58.545049Z","url":"https://files.pythonhosted.org/packages/0d/20/93e7143af3a0b3b3d9f3306bfc46e55d0d307242b4c1bf36ff108460e5a3/onnx_graphsurgeon-0.5.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
