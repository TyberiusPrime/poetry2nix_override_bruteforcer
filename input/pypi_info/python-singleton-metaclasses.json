{"info":{"author":"Zachary Cutlip","author_email":"uid000@gmail.com","bugtrack_url":null,"classifiers":[],"description":"# Python Singleton Metaclasses\n\n## Description\n\nA package of python metclasses for implementing singleton and related patterns.\n\n### Singleton Class\n\nThis implements the traditional singleton pattern. Once an instance of a class is created, all future instantiations result in the same object.\n\n### Memoized Class\n\nThis applies the notion of \"memoization\" to object creation. Multiple calls to a constructor with the same first parameter result in the same object.\n\nCalls to the constructor with a new first parameter result in a new object instance.\n\nThis is useful in situations where a singleton is called for if the arguments are the same, but a new instance is called for when new arguments are provided.\n\nFor example, if an object parses a file, there may be no need to parse the same file more than once. So all instantiations of the parser on the same file result in the same object instance. But for a new file that has yet to be parsed, a new instance will be created.\n\n## Alowing Object Cleanup\n\nOne drawback is the singleton (and memoized) object does not get freed. If it is desired for the singleton objects to be destroyed no longer required, there are a couple of options:\n\n- In the class definition, declare a class variable, `_PYSINGLETON_WEAKREF = True` (or `_PYMEMOIZED_WEAKREF` as appropriate)\n- Create an environment variable constructed from the class name and set it to '1':\n  - `export MySingleton_WEAKREF=1`\n\nThis causes instances to be tracked by the metaclass using weak references. The garbage collector will destroy them when the last normal reference has gone out of scope. The next time the class is instantiated, a new instance will be created.\n\n## Examples\n\n---\n\n### Singleton Class Example\n\n```python\nfrom pysingleton import PySingleton  # noqa: E402\n\n\nclass MySingleton(metaclass=PySingleton):\n    def __init__(self, value):\n        self.value = value\n\n\n# Create first instance and inspect value\nmy_singleton_1 = MySingleton(1)\nprint(\"my_singleton_1.value: {}\".format(my_singleton_1.value))\n\n# Create second instance with new constructor param\nmy_singleton_2 = MySingleton(2)\n# Inspect value and see it matches the original\nprint(\"my_singleton_2.value: {}\".format(my_singleton_2.value))\n\n# First and second instances' values are equal\nprint(\"my_singleton_1.value == my_singleton_2.value: {}\".format(\n    my_singleton_1.value == my_singleton_2.value))\n\n# change second instance's value\nmy_singleton_2.value = 7\n\n# Inspect first instance's value and see it has changed\nprint(\"my_singleton_1.value: {}\".format(my_singleton_1.value))\n\n# First and second instance have the same object ID:\nprint(\"id(my_singleton_1): {:#x}\".format(id(my_singleton_1)))\nprint(\"id(my_singleton_2): {:#x}\".format(id(my_singleton_2)))\n```\n\n```console\n$ python ./example.py\nmy_singleton_1.value: 1\nmy_singleton_2.value: 1\nmy_singleton_1.value == my_singleton_2.value: True\nmy_singleton_1.value: 7\nid(my_singleton_1): 0x101c29b80\nid(my_singleton_2): 0x101c29b80\n```\n\n---\n\n### Memoized Class Example\n\n```python\nfrom pysingleton import PyMemoized  # noqa: E402\n\n\nclass MyMemoized(metaclass=PyMemoized):\n    def __init__(self, param1, param2):\n        self.value = param2\n\n\n# Create first instance and inspect value\nmy_memoized_1 = MyMemoized(\"arg1\", 1)\nprint(\"my_memoized_1.value: {}\".format(my_memoized_1.value))\n\n# Create second instance with the original param1 but new param2\nmy_memoized_2 = MyMemoized(\"arg1\", 2)\n# Inspect value and see it matches the original\nprint(\"my_memoized_2.value: {}\".format(my_memoized_2.value))\n\n# First and second instances' values are equal\nprint(\"my_memoized_1.value == my_memoized_2.value: {}\".format(\n    my_memoized_1.value == my_memoized_2.value))\n\n# change second instance's value\nmy_memoized_2.value = 7\n\n# Inspect first instance's value and see it has changed\nprint(\"my_memoized_1.value: {}\".format(my_memoized_1.value))\n\n# Create third instance with new param1 & param2, and see\n# it takes the new value\nmy_memoized_3 = MyMemoized(\"arg3\", 3)\nprint(\"my_memoized_3.value: {}\".format(my_memoized_3.value))\n\n# First and third  instances' values are not equal\nprint(\"my_memoized_1.value == my_memoized_3.value: {}\".format(\n    my_memoized_1.value == my_memoized_3.value))\n\n\n# First and second instance have the same object ID\nprint(\"id(my_memoized_1): {:#x}\".format(id(my_memoized_1)))\nprint(\"id(my_memoized_2): {:#x}\".format(id(my_memoized_2)))\n\n# but third instance's object ID is different\nprint(\"id(my_memoized_3): {:#x}\".format(id(my_memoized_3)))\n\n```\n\n```console\npython3 ./examples/memoized-example.py\nmy_memoized_1.value: 1\nmy_memoized_2.value: 1\nmy_memoized_1.value == my_memoized_2.value: True\nmy_memoized_1.value: 7\nmy_memoized_3.value: 3\nmy_memoized_1.value == my_memoized_3.value: False\nid(my_memoized_1): 0x100773b80\nid(my_memoized_2): 0x100773b80\nid(my_memoized_3): 0x100818340\n```\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/zcutlip/py-singleton-metaclasses","keywords":"","license":"MIT","maintainer":"","maintainer_email":"","name":"python-singleton-metaclasses","package_url":"https://pypi.org/project/python-singleton-metaclasses/","platform":null,"project_url":"https://pypi.org/project/python-singleton-metaclasses/","project_urls":{"Homepage":"https://github.com/zcutlip/py-singleton-metaclasses"},"provides_extra":null,"release_url":"https://pypi.org/project/python-singleton-metaclasses/0.2.1/","requires_dist":null,"requires_python":">=3.7","summary":"A package of python metclasses for implementing singleton and related patterns.","version":"0.2.1","yanked":false,"yanked_reason":null},"last_serial":15807229,"releases":{"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"e042ff391652d9f57b3853036a56513ad2777f7016e1d1d7a7af304ec7b1da1f","md5":"bf0df1dd591872f357a8b5b5592857d0","sha256":"98063b044aa752794a12e506d30aa7fb4f809a645fd02022f6a4cee837c2f31d"},"downloads":-1,"filename":"python-singleton-metaclasses-0.1.0.tar.gz","has_sig":false,"md5_digest":"bf0df1dd591872f357a8b5b5592857d0","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":3347,"upload_time":"2020-09-11T18:22:00","upload_time_iso_8601":"2020-09-11T18:22:00.729479Z","url":"https://files.pythonhosted.org/packages/e0/42/ff391652d9f57b3853036a56513ad2777f7016e1d1d7a7af304ec7b1da1f/python-singleton-metaclasses-0.1.0.tar.gz","yanked":false,"yanked_reason":null}],"0.2.0":[{"comment_text":"","digests":{"blake2b_256":"e432dd7b8f339d5d120487893fc252218bd65e74f0190e2a05712874e64cac47","md5":"1579421ce6585eb9a264f34d626d2010","sha256":"0c620387c5139ce9d520a03700a7af8bc2ab973de7d4a48107a1193eeece407d"},"downloads":-1,"filename":"python-singleton-metaclasses-0.2.0.tar.gz","has_sig":false,"md5_digest":"1579421ce6585eb9a264f34d626d2010","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":4304,"upload_time":"2021-09-16T03:23:47","upload_time_iso_8601":"2021-09-16T03:23:47.873311Z","url":"https://files.pythonhosted.org/packages/e4/32/dd7b8f339d5d120487893fc252218bd65e74f0190e2a05712874e64cac47/python-singleton-metaclasses-0.2.0.tar.gz","yanked":false,"yanked_reason":null}],"0.2.1":[{"comment_text":"","digests":{"blake2b_256":"bb1fb384478a70e18d6464283588263a9ad4d31fa9cf05334aa821edd1faf38a","md5":"03fd526e7cfcd16b3f87b659f71af475","sha256":"7abaad530dd1e2aa74bd0a8a00fd6bf9acf811e015f1eb68024147a4f202be1e"},"downloads":-1,"filename":"python-singleton-metaclasses-0.2.1.tar.gz","has_sig":false,"md5_digest":"03fd526e7cfcd16b3f87b659f71af475","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":4315,"upload_time":"2022-11-17T22:05:47","upload_time_iso_8601":"2022-11-17T22:05:47.534176Z","url":"https://files.pythonhosted.org/packages/bb/1f/b384478a70e18d6464283588263a9ad4d31fa9cf05334aa821edd1faf38a/python-singleton-metaclasses-0.2.1.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"bb1fb384478a70e18d6464283588263a9ad4d31fa9cf05334aa821edd1faf38a","md5":"03fd526e7cfcd16b3f87b659f71af475","sha256":"7abaad530dd1e2aa74bd0a8a00fd6bf9acf811e015f1eb68024147a4f202be1e"},"downloads":-1,"filename":"python-singleton-metaclasses-0.2.1.tar.gz","has_sig":false,"md5_digest":"03fd526e7cfcd16b3f87b659f71af475","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":4315,"upload_time":"2022-11-17T22:05:47","upload_time_iso_8601":"2022-11-17T22:05:47.534176Z","url":"https://files.pythonhosted.org/packages/bb/1f/b384478a70e18d6464283588263a9ad4d31fa9cf05334aa821edd1faf38a/python-singleton-metaclasses-0.2.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
