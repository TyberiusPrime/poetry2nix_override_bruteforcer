{"info":{"author":null,"author_email":"Cameron Simpson <cs@cskk.id.au>","bugtrack_url":null,"classifiers":["Development Status :: 4 - Beta","Intended Audience :: Developers","License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Topic :: Software Development :: Libraries :: Python Modules"],"description":"Tags and sets of tags\nwith __format__ support and optional ontology information.\n\n*Latest release 20240422.2*:\njsonable: use obj.for_json() if available.\n\nSee `cs.fstags` for support for applying these to filesystem objects\nsuch as directories and files.\n\nSee `cs.sqltags` for support for databases of entities with tags,\nnot directly associated with filesystem objects.\nThis is suited to both log entries (entities with no \"name\")\nand large collections of named entities;\nboth accept `Tag`s and can be searched on that basis.\n\nAll of the available complexity is optional:\nyou can use `Tag`s without bothering with `TagSet`s\nor `TagsOntology`s.\n\nThis module contains the following main classes:\n* `Tag`: an object with a `.name` and optional `.value` (default `None`)\n  and also an optional reference `.ontology`\n  for associating semantics with tag values.\n  The `.value`, if not `None`, will often be a string,\n  but may be any Python object.\n  If you're using these via `cs.fstags`,\n  the object will need to be JSON transcribeable.\n* `TagSet`: a `dict` subclass representing a set of `Tag`s\n  to associate with something;\n  it also has setlike `.add` and `.discard` methods.\n  As such it only supports a single `Tag` for a given tag name,\n  but that tag value can of course be a sequence or mapping\n  for more elaborate tag values.\n* `TagsOntology`:\n  a mapping of type names to `TagSet`s defining the type\n  and also to entries for the metadata for specific per-type values.\n\nHere's a simple example with some `Tag`s and a `TagSet`.\n\n    >>> tags = TagSet()\n    >>> # add a \"bare\" Tag named 'blue' with no value\n    >>> tags.add('blue')\n    >>> # add a \"topic=tagging\" Tag\n    >>> tags.set('topic', 'tagging')\n    >>> # make a \"subtopic\" Tag and add it\n    >>> subtopic = Tag('subtopic', 'ontologies')\n    >>> tags.add(subtopic)\n    >>> # Tags have nice repr() and str()\n    >>> subtopic\n    Tag(name='subtopic',value='ontologies')\n    >>> print(subtopic)\n    subtopic=ontologies\n    >>> # a TagSet also has a nice repr() and str()\n    >>> tags\n    TagSet:{'blue': None, 'topic': 'tagging', 'subtopic': 'ontologies'}\n    >>> print(tags)\n    blue subtopic=ontologies topic=tagging\n    >>> tags2 = TagSet({'a': 1}, b=3, c=[1,2,3], d='dee')\n    >>> tags2\n    TagSet:{'a': 1, 'b': 3, 'c': [1, 2, 3], 'd': 'dee'}\n    >>> print(tags2)\n    a=1 b=3 c=[1,2,3] d=dee\n    >>> # since you can print a TagSet to a file as a line of text\n    >>> # you can get it back from a line of text\n    >>> TagSet.from_line('a=1 b=3 c=[1,2,3] d=dee')\n    TagSet:{'a': 1, 'b': 3, 'c': [1, 2, 3], 'd': 'dee'}\n    >>> # because TagSets are dicts you can format strings with them\n    >>> print('topic:{topic} subtopic:{subtopic}'.format_map(tags))\n    topic:tagging subtopic:ontologies\n    >>> # TagSets have convenient membership tests\n    >>> # test for blueness\n    >>> 'blue' in tags\n    True\n    >>> # test for redness\n    >>> 'red' in tags\n    False\n    >>> # test for any \"subtopic\" tag\n    >>> 'subtopic' in tags\n    True\n    >>> # test for subtopic=ontologies\n    >>> print(subtopic)\n    subtopic=ontologies\n    >>> subtopic in tags\n    True\n    >>> # test for subtopic=libraries\n    >>> subtopic2 = Tag('subtopic', 'libraries')\n    >>> subtopic2 in tags\n    False\n\n## Ontologies\n\n`Tag`s and `TagSet`s suffice to apply simple annotations to things.\nHowever, an ontology brings meaning to those annotations.\n\nSee the `TagsOntology` class for implementation details,\naccess methods and more examples.\n\nConsider a record about a movie, with these tags (a `TagSet`):\n\n    title=\"Avengers Assemble\"\n    series=\"Avengers (Marvel)\"\n    cast={\"Scarlett Johansson\":\"Black Widow (Marvel)\"}\n\nwhere we have the movie title,\na name for the series in which it resides,\nand a cast as an association of actors with roles.\n\nAn ontology lets us associate implied types and metadata with these values.\n\nHere's an example ontology supporting the above `TagSet`:\n\n    type.cast type=dict key_type=person member_type=character description=\"members of a production\"\n    type.character description=\"an identified member of a story\"\n    type.series type=str\n    character.marvel.black_widow type=character names=[\"Natasha Romanov\"]\n    person.scarlett_johansson fullname=\"Scarlett Johansson\" bio=\"Known for Black Widow in the Marvel stories.\"\n\nThe type information for a `cast`\nis defined by the ontology entry named `type.cast`,\nwhich tells us that a `cast` `Tag` is a `dict`,\nwhose keys are of type `person`\nand whose values are of type `character`.\n(The default type is `str`.)\n\nTo find out the underlying type for a `character`\nwe look that up in the ontology in turn;\nbecause it does not have a specified `type` `Tag`, it it taken to be a `str`.\n\nHaving the types for a `cast`,\nit is now possible to look up the metadata for the described cast members.\n\nThe key `\"Scarlett Johansson\"` is a `person`\n(from the type definition of `cast`).\nThe ontology entry for her is named `person.scarlett_johansson`\nwhich is computed as:\n* `person`: the type name\n* `scarlett_johansson`: obtained by downcasing `\"Scarlett Johansson\"`\n  and replacing whitespace with an underscore.\n  The full conversion process is defined\n  by the `TagsOntology.value_to_tag_name` function.\n\nThe key `\"Black Widow (Marvel)\"` is a `character`\n(again, from the type definition of `cast`).\nThe ontology entry for her is named `character.marvel.black_widow`\nwhich is computed as:\n* `character`: the type name\n* `marvel.black_widow`: obtained by downcasing `\"Black Widow (Marvel)\"`,\n  replacing whitespace with an underscore,\n  and moving a bracketed suffix to the front as an unbracketed prefix.\n  The full conversion process is defined\n  by the `TagsOntology.value_to_tag_name` function.\n\n## Format Strings\n\nYou can just use `str.format_map` as shown above\nfor the direct values in a `TagSet`,\nsince it subclasses `dict`.\n\nHowever, `TagSet`s also subclass `cs.lex.FormatableMixin`\nand therefore have a richer `format_as` method which has an extended syntax\nfor the format component.\nCommand line tools like `fstags` use this for output format specifications.\n\nAn example:\n\n    >>> # an ontology specifying the type for a colour\n    >>> # and some information about the colour \"blue\"\n    >>> ont = TagsOntology(\n    ...   {\n    ...       'type.colour':\n    ...       TagSet(description=\"a colour, a hue\", type=\"str\"),\n    ...       'colour.blue':\n    ...       TagSet(\n    ...           url='https://en.wikipedia.org/wiki/Blue',\n    ...           wavelengths='450nm-495nm'\n    ...       ),\n    ...   }\n    ... )\n    >>> # tag set with a \"blue\" tag, using the ontology above\n    >>> tags = TagSet(colour='blue', labels=['a', 'b', 'c'], size=9, _ontology=ont)\n    >>> tags.format_as('The colour is {colour}.')\n    'The colour is blue.'\n    >>> # format a string about the tags showing some metadata about the colour\n    >>> tags.format_as('Information about the colour may be found here: {colour:metadata.url}')\n    'Information about the colour may be found here: https://en.wikipedia.org/wiki/Blue'\n\n## Function `as_unixtime(tag_value)`\n\nConvert a tag value to a UNIX timestamp.\n\nThis accepts `int`, `float` (already a timestamp)\nand `date` or `datetime`\n(use `datetime.timestamp() for a nonnaive `datetime`,\notherwise `time.mktime(tag_value.time_tuple())`,\nwhich assumes the local time zone).\n\n## Class `BaseTagSets(cs.resources.MultiOpenMixin, collections.abc.MutableMapping)`\n\nBase class for collections of `TagSet` instances\nsuch as `cs.fstags.FSTags` and `cs.sqltags.SQLTags`.\n\nExamples of this include:\n* `cs.cdrip.MBSQLTags`: a mapping of MusicbrainsNG entities to their associated `TagSet`\n* `cs.fstags.FSTags`: a mapping of filesystem paths to their associated `TagSet`\n* `cs.sqltags.SQLTags`: a mapping of names to `TagSet`s stored in an SQL database\n\nSubclasses must implement:\n* `get(name,default=None)`: return the `TagSet` associated\n  with `name`, or `default`.\n* `__setitem__(name,tagset)`: associate a `TagSet`with the key `name`;\n  this is called by the `__missing__` method with a newly created `TagSet`.\n* `keys(self)`: return an iterable of names\n\nSubclasses may reasonably want to override the following:\n* `startup_shutdown(self)`: context manager to allocate and release any\n  needed resources such as database connections\n\nSubclasses may implement:\n* `__len__(self)`: return the number of names\n\nThe `TagSet` factory used to fetch or create a `TagSet` is\nnamed `TagSetClass`. The default implementation honours two\nclass attributes:\n* `TAGSETCLASS_DEFAULT`: initially `TagSet`\n* `TAGSETCLASS_PREFIX_MAPPING`: a mapping of type names to `TagSet` subclasses\n\nThe type name of a `TagSet` name is the first dotted component.\nFor example, `artist.nick_cave` has the type name `artist`.\nA subclass of `BaseTagSets` could utiliise an `ArtistTagSet` subclass of `TagSet`\nand provide:\n\n    TAGSETCLASS_PREFIX_MAPPING = {\n      'artist': ArtistTagSet,\n    }\n\nin its class definition. Accesses to `artist.`* entities would\nresult in `ArtistTagSet` instances and access to other enitities\nwould result in ordinary `TagSet` instances.\n\n*Method `BaseTagSets.__init__(self, *, ontology=None)`*:\nInitialise the collection.\n\n*`BaseTagSets.TAGSETCLASS_DEFAULT`*\n\n*Method `BaseTagSets.TagSetClass(self, *, name, **kw)`*:\nFactory to create a new `TagSet` from `name`.\n\n*Method `BaseTagSets.__contains__(self, name: str)`*:\nTest whether `name` is present in the underlying mapping.\n\n*Method `BaseTagSets.__getitem__(self, name: str)`*:\nObtain the `TagSet` associated with `name`.\n\nIf `name` is not presently mapped,\nreturn `self.__missing__(name)`.\n\n*Method `BaseTagSets.__iter__(self)`*:\nIteration returns the keys.\n\n*Method `BaseTagSets.__len__(self)`*:\nReturn the length of the underlying mapping.\n\n*Method `BaseTagSets.__missing__(self, name: str, **kw)`*:\nLike `dict`, the `__missing__` method may autocreate a new `TagSet`.\n\nThis is called from `__getitem__` if `name` is missing\nand uses the factory `cls.default_factory`.\nIf that is `None` raise `KeyError`,\notherwise call `self.default_factory(name,**kw)`.\nIf that returns `None` raise `KeyError`,\notherwise save the entity under `name` and return the entity.\n\n*Method `BaseTagSets.__setitem__(self, name, te)`*:\nSave `te` in the backend under the key `name`.\n\n*Method `BaseTagSets.add(self, name: str, **kw)`*:\nReturn a new `TagSet` associated with `name`,\nwhich should not already be in use.\n\n*Method `BaseTagSets.default_factory(self, name: str)`*:\nCreate a new `TagSet` named `name`.\n\n*Method `BaseTagSets.edit(self, *, select_tagset=None, **kw)`*:\nEdit the `TagSet`s.\n\nParameters:\n* `select_tagset`: optional callable accepting a `TagSet`\n  which tests whether it should be included in the `TagSet`s\n  to be edited\nOther keyword arguments are passed to `Tag.edit_tagsets`.\n\n*Method `BaseTagSets.get(self, name: str, default=None)`*:\nReturn the `TagSet` associated with `name`,\nor `default` if there is no such entity.\n\n*Method `BaseTagSets.items(self, *, prefix=None)`*:\nGenerator yielding `(key,value)` pairs,\noptionally constrained to keys starting with `prefix+'.'`.\n\n*Method `BaseTagSets.keys(self, *, prefix=None)`*:\nReturn the keys starting with `prefix+'.'`\nor all keys if `prefix` is `None`.\n\n*Method `BaseTagSets.subdomain(self, subname: str)`*:\nReturn a proxy for this `BaseTagSets` for the `name`s\nstarting with `subname+'.'`.\n\n*Method `BaseTagSets.values(self, *, prefix=None)`*:\nGenerator yielding the mapping values (`TagSet`s),\noptionally constrained to keys starting with `prefix+'.'`.\n\n## Function `jsonable(obj, converted: dict)`\n\nConvert `obj` to a JSON encodable form.\nThis returns `obj` for purely JSONable objects and a JSONable\ndeep copy of `obj` if it or some subcomponent required\nconversion.\n`converted` is a dict mapping object ids to their converted forms\nto prevent loops.\n\n## Class `MappingTagSets(BaseTagSets)`\n\nA `BaseTagSets` subclass using an arbitrary mapping.\n\nIf no mapping is supplied, a `dict` is created for the purpose.\n\nExample:\n\n    >>> tagsets = MappingTagSets()\n    >>> list(tagsets.keys())\n    []\n    >>> tagsets.get('foo')\n    >>> tagsets['foo'] = TagSet(bah=1, zot=2)\n    >>> list(tagsets.keys())\n    ['foo']\n    >>> tagsets.get('foo')\n    TagSet:{'bah': 1, 'zot': 2}\n    >>> list(tagsets.keys(prefix='foo'))\n    ['foo']\n    >>> list(tagsets.keys(prefix='bah'))\n    []\n\n*Method `MappingTagSets.__delitem__(self, name)`*:\nDelete the `TagSet` named `name`.\n\n*Method `MappingTagSets.__setitem__(self, name, te)`*:\nSave `te` in the backend under the key `name`.\n\n*Method `MappingTagSets.keys(self, *, prefix: Optional[str] = None)`*:\nReturn an iterable of the keys commencing with `prefix`\nor all keys if `prefix` is `None`.\n\n## Class `RegexpTagRule`\n\nA regular expression based `Tag` rule.\n\nThis applies a regular expression to a string\nand returns inferred `Tag`s.\n\n*Method `RegexpTagRule.infer_tags(self, s)`*:\nApply the rule to the string `s`, return a list of `Tag`s.\n\n## Function `selftest(argv)`\n\nRun some ad hoc self tests.\n\n## Class `Tag(Tag, cs.lex.FormatableMixin)`\n\nA `Tag` has a `.name` (`str`) and a `.value`\nand an optional `.ontology`.\n\nThe `name` must be a dotted identifier.\n\nTerminology:\n* A \"bare\" `Tag` has a `value` of `None`.\n* A \"naive\" `Tag` has an `ontology` of `None`.\n\nThe constructor for a `Tag` is unusual:\n* both the `value` and `ontology` are optional,\n  defaulting to `None`\n* if `name` is a `str` then we always construct a new `Tag`\n  with the suppplied values\n* if `name` is not a `str`\n  it should be a `Tag`like object to promote;\n  it is an error if the `value` parameter is not `None`\n  in this case\n* an optional `prefix` may be supplied\n  which is prepended to `name` with a dot (`'.'`) if not empty\n\nThe promotion process is as follows:\n* if `name` is a `Tag` subinstance\n  then if the supplied `ontology` is not `None`\n  and is not the ontology associated with `name`\n  then a new `Tag` is made,\n  otherwise the original `Tag` is returned unchanged\n* otherwise a new `Tag` is made from `name`\n  using its `.value`\n  and overriding its `.ontology`\n  if the `ontology` parameter is not `None`\n\nExamples:\n\n    >>> ont = TagsOntology({'colour.blue': TagSet(wavelengths='450nm-495nm')})\n    >>> tag0 = Tag('colour', 'blue')\n    >>> tag0\n    Tag(name='colour',value='blue')\n    >>> tag = Tag(tag0)\n    >>> tag\n    Tag(name='colour',value='blue')\n    >>> tag = Tag(tag0, ontology=ont)\n    >>> tag # doctest: +ELLIPSIS\n    Tag(name='colour',value='blue',ontology=...)\n    >>> tag = Tag(tag0, prefix='surface')\n    >>> tag\n    Tag(name='surface.colour',value='blue')\n\n*Method `Tag.__init__(self, *a, **kw)`*:\nDummy `__init__` to avoid `FormatableMixin.__init__`\nbecause we subclass `namedtuple` which has no `__init__`.\n\n*`Tag.__hash__`*\n\n*Method `Tag.__str__(self)`*:\nEncode `name` and `value`.\n\n*Method `Tag.alt_values(self, value_tag_name=None)`*:\nReturn a list of alternative values for this `Tag`\non the premise that each has a metadata entry.\n\n*Property `Tag.basetype`*:\nThe base type name for this tag.\nReturns `None` if there is no ontology.\n\nThis calls `self.onotology.basetype(self.name)`.\nThe basetype is the endpoint of a cascade down the defined types.\n\nFor example, this might tell us that a `Tag` `role=\"Fred\"`\nhas a basetype `\"str\"`\nby cascading through a hypothetical chain `role`->`character`->`str`:\n\n    type.role type=character\n    type.character type=str\n\n*Method `Tag.from_arg(arg, offset=0, ontology=None)`*:\nParse a `Tag` from the string `arg` at `offset` (default `0`).\nwhere `arg` is known to be entirely composed of the value,\nsuch as a command line argument.\n\nThis calls the `from_str` method with `fallback_parse` set\nto gather then entire tail of the supplied string `arg`.\n\n*Method `Tag.from_str(s, offset=0, ontology=None, fallback_parse=None)`*:\nParse a `Tag` definition from `s` at `offset` (default `0`).\n\n*Method `Tag.from_str2(s, offset=0, *, ontology=None, extra_types=None, fallback_parse=None)`*:\nParse tag_name[=value], return `(Tag,offset)`.\n\n*Method `Tag.is_valid_name(name)`*:\nTest whether a tag name is valid: a dotted identifier.\n\n*Method `Tag.key_metadata(self, key)`*:\nReturn the metadata definition for `key`.\n\nThe metadata `TagSet` is obtained from the ontology entry\n*type*`.`*key_tag_name*\nwhere *type* is the `Tag`'s `key_type`\nand *key_tag_name* is the key converted\ninto a dotted identifier by `TagsOntology.value_to_tag_name`.\n\n*Property `Tag.key_type`*:\nThe type name for members of this tag.\n\nThis is required if `.value` is a mapping.\n\n*Property `Tag.key_typedef`*:\nThe typedata definition for this `Tag`'s keys.\n\nThis is for `Tag`s which store mappings,\nfor example a movie cast, mapping actors to roles.\n\nThe name of the member type comes from\nthe `key_type` entry from `self.typedata`.\nThat name is then looked up in the ontology's types.\n\n*Method `Tag.matches(self, tag_name, value)`*:\nTest whether this `Tag` matches `(tag_name,value)`.\n\n*Method `Tag.member_metadata(self, member_key)`*:\nReturn the metadata definition for self[member_key].\n\nThe metadata `TagSet` is obtained from the ontology entry\n*type*`.`*member_tag_name*\nwhere *type* is the `Tag`'s `member_type`\nand *member_tag_name* is the member value converted\ninto a dotted identifier by `TagsOntology.value_to_tag_name`.\n\n*Property `Tag.member_type`*:\nThe type name for members of this tag.\n\nThis is required if `.value` is a sequence or mapping.\n\n*Property `Tag.member_typedef`*:\nThe typedata definition for this `Tag`'s members.\n\nThis is for `Tag`s which store mappings or sequences,\nfor example a movie cast, mapping actors to roles,\nor a list of scenes.\n\nThe name of the member type comes from\nthe `member_type` entry from `self.typedata`.\nThat name is then looked up in the ontology's types.\n\n*Property `Tag.meta`*:\nShortcut property for the metadata `TagSet`.\n\n*Method `Tag.metadata(self, *, ontology=None, convert=None)`*:\nFetch the metadata information about this specific tag value,\nderived through the `ontology` from the tag name and value.\nThe default `ontology` is `self.ontology`.\n\nFor a scalar type (`int`, `float`, `str`) this is the ontology `TagSet`\nfor `self.value`.\n\nFor a sequence (`list`) this is a list of the metadata\nfor each member.\n\nFor a mapping (`dict`) this is mapping of `key->metadata`.\n\n*Method `Tag.parse_name(s, offset=0)`*:\nParse a tag name from `s` at `offset`: a dotted identifier.\n\n*Method `Tag.parse_value(s, offset=0, *, extra_types=None, fallback_parse=None)`*:\nParse a value from `s` at `offset` (default `0`).\nReturn the value, or `None` on no data.\n\nThe optional `extra_types` parameter may be an iterable of\n`(type,from_str,to_str)` tuples where `from_str` is a\nfunction which takes a string and returns a Python object\n(expected to be an instance of `type`).\nThe default comes from `cls.EXTRA_TYPES`.\nThis supports storage of nonJSONable values in text form.\n\nThe optional `fallback_parse` parameter\nspecifies a parse function accepting `(s,offset)`\nand returning `(parsed,new_offset)`\nwhere `parsed` is text from `s[offset:]`\nand `new_offset` is where the parse stopped.\nThe default is `cs.lex.get_nonwhite`\nto gather nonwhitespace characters,\nintended to support *tag_name*`=`*bare_word*\nin human edited tag files.\n\nThe core syntax for values is JSON;\nvalue text commencing with any of `'\"'`, `'['` or `'{'`\nis treated as JSON and decoded directly,\nleaving the offset at the end of the JSON parse.\n\nOtherwise all the nonwhitespace at this point is collected\nas the value text,\nleaving the offset at the next whitespace character\nor the end of the string.\nThe text so collected is then tried against the `from_str`\nfunction of each `extra_types`;\nthe first successful parse is accepted as the value.\nIf no extra type match,\nthe text is tried against `int()` and `float()`;\nif one of these parses the text and `str()` of the result round trips\nto the original text\nthen that value is used.\nOtherwise the text itself is kept as the value.\n\n*Method `Tag.transcribe_value(value, extra_types=None, json_options=None)`*:\nTranscribe `value` for use in `Tag` transcription.\n\nThe optional `extra_types` parameter may be an iterable of\n`(type,from_str,to_str)` tuples where `to_str` is a\nfunction which takes a string and returns a Python object\n(expected to be an instance of `type`).\nThe default comes from `cls.EXTRA_TYPES`.\n\nIf `value` is an instance of `type`\nthen the `to_str` function is used to transcribe the value\nas a `str`, which should not include any whitespace\n(because of the implementation of `parse_value`).\nIf there is no matching `to_str` function,\n`cls.JSON_ENCODER.encode` is used to transcribe `value`.\n\nThis supports storage of nonJSONable values in text form.\n\n*Property `Tag.typedef`*:\nThe defining `TagSet` for this tag's name.\n\nThis is how its type is defined,\nand is obtained from:\n`self.ontology['type.'+self.name]`\n\nBasic `Tag`s often do not need a type definition;\nthese are only needed for structured tag values\n(example: a mapping of cast members)\nor when a `Tag` name is an alias for another type\n(example: a cast member name might be an `actor`\nwhich in turn might be a `person`).\n\nFor example, a `Tag` `colour=blue`\ngets its type information from the `type.colour` entry in an ontology;\nthat entry is just a `TagSet` with relevant information.\n\n## Function `tag_or_tag_value(*da, **dkw)`\n\nA decorator for functions or methods which may be called as:\n\n    func(name[,value])\n\nor as:\n\n    func(Tag)\n\nThe optional decorator argument `no_self` (default `False`)\nshould be supplied for plain functions\nas they have no leading `self` parameter to accomodate.\n\nExample:\n\n    @tag_or_tag_value\n    def add(self, tag_name, value, *, verbose=None):\n\nThis defines a `.add()` method\nwhich can be called with `name` and `value`\nor with single `Tag`like object\n(something with `.name` and `.value` attributes),\nfor example:\n\n    tags = TagSet()\n    ....\n    tags.add('colour', 'blue')\n    ....\n    tag = Tag('size', 9)\n    tags.add(tag)\n\n## Class `TagBasedTest(TagBasedTest, TagSetCriterion)`\n\nA test based on a `Tag`.\n\nAttributes:\n* `spec`: the source text from which this choice was parsed,\n  possibly `None`\n* `choice`: the apply/reject flag\n* `tag`: the `Tag` representing the criterion\n* `comparison`: an indication of the test comparison\n\nThe following comparison values are recognised:\n* `None`: test for the presence of the `Tag`\n* `'='`: test that the tag value equals `tag.value`\n* `'<'`: test that the tag value is less than `tag.value`\n* `'<='`: test that the tag value is less than or equal to `tag.value`\n* `'>'`: test that the tag value is greater than `tag.value`\n* `'>='`: test that the tag value is greater than or equal to `tag.value`\n* `'~/'`: test if the tag value as a regexp is present in `tag.value`\n* '~': test if a matching tag value is present in `tag.value`\n\n*Method `TagBasedTest.by_tag_value(tag_name, tag_value, *, choice=True, comparison='=')`*:\nReturn a `TagBasedTest` based on a `Tag` or `tag_name,tag_value`.\n\n*Method `TagBasedTest.match_tagged_entity(self, te: 'TagSet') -> bool`*:\nTest against the `Tag`s in `tags`.\n\n*Note*: comparisons when `self.tag.name` is not in `tags`\nalways return `False` (possibly inverted by `self.choice`).\n\n*Method `TagBasedTest.parse(s, offset=0, delim=None)`*:\nParse *tag_name*[{`<`|`<=`|'='|'>='|`>`|'~'}*value*]\nand return `(dict,offset)`\nwhere the `dict` contains the following keys and values:\n* `tag`: a `Tag` embodying the tag name and value\n* `comparison`: an indication of the test comparison\n\n## Class `TagFile(cs.fs.FSPathBasedSingleton, BaseTagSets)`\n\nA reference to a specific file containing tags.\n\nThis manages a mapping of `name` => `TagSet`,\nitself a mapping of tag name => tag value.\n\n*Method `TagFile.__setitem__(self, name, te)`*:\nSet item `name` to `te`.\n\n*Method `TagFile.get(self, name, default=None)`*:\nGet from the tagsets.\n\n*Method `TagFile.is_modified(self)`*:\nTest whether this `TagSet` has been modified.\n\n*Method `TagFile.keys(self, *, prefix=None)`*:\n`tagsets.keys`\n\nIf the options `prefix` is supplied,\nyield only those keys starting with `prefix`.\n\n*Method `TagFile.load_tagsets(filepath, ontology, extra_types=None)`*:\nLoad `filepath` and return `(tagsets,unparsed)`.\n\nThe returned `tagsets` are a mapping of `name`=>`tag_name`=>`value`.\nThe returned `unparsed` is a list of `(lineno,line)`\nfor lines which failed the parse (excluding the trailing newline).\n\n*Property `TagFile.names`*:\nThe names from this `FSTagsTagFile` as a list.\n\n*Method `TagFile.parse_tags_line(line, ontology=None, verbose=None, extra_types=None) -> Tuple[str, cs.tagset.TagSet]`*:\nParse a \"name tags...\" line as from a `.fstags` file,\nreturn `(name,TagSet)`.\n\n*Method `TagFile.save(self, extra_types=None, prune=False)`*:\nSave the tag map to the tag file if modified.\n\n*Method `TagFile.save_tagsets(filepath, tagsets, unparsed, extra_types=None, prune=False, update_mapping: Optional[Mapping] = None, update_prefix: Optional[str] = None, update_uuid_tag_name: Optional[str] = None)`*:\nSave `tagsets` and `unparsed` to `filepath`.\n\nThis method will create the required intermediate directories\nif missing.\n\nThis method *does not* clear the `.modified` attribute of the `TagSet`s\nbecause it does not know it is saving to the `Tagset`'s primary location.\n\n*Method `TagFile.startup_shutdown(self)`*:\nSave the tagsets if modified.\n\n*Method `TagFile.tags_line(name, tags, extra_types=None, prune=False)`*:\nTranscribe a `name` and its `tags` for use as a `.fstags` file line.\n\n*Property `TagFile.tagsets`*:\nThe tag map from the tag file,\na mapping of name=>`TagSet`.\n\nThis is loaded on demand.\n\n*Method `TagFile.update(self, name, tags, *, prefix=None, verbose=None)`*:\nUpdate the tags for `name` from the supplied `tags`\nas for `Tagset.update`.\n\n## Class `TagsCommandMixin`\n\nUtility methods for `cs.cmdutils.BaseCommand` classes working with tags.\n\nOptional subclass attributes:\n* `TAGSET_CRITERION_CLASS`: a `TagSetCriterion` duck class,\n  default `TagSetCriterion`.\n  For example, `cs.sqltags` has a subclass\n  with an `.extend_query` method for computing an SQL JOIN\n  used in searching for tagged entities.\n\n*`TagsCommandMixin.TagAddRemove`*\n\n*Method `TagsCommandMixin.parse_tag_addremove(arg, offset=0)`*:\nParse `arg` as an add/remove tag specification\nof the form [`-`]*tag_name*[`=`*value*].\nReturn `(remove,Tag)`.\n\nExamples:\n\n    >>> TagsCommandMixin.parse_tag_addremove('a')\n    TagAddRemove(remove=False, tag=Tag(name='a',value=None))\n    >>> TagsCommandMixin.parse_tag_addremove('-a')\n    TagAddRemove(remove=True, tag=Tag(name='a',value=None))\n    >>> TagsCommandMixin.parse_tag_addremove('a=1')\n    TagAddRemove(remove=False, tag=Tag(name='a',value=1))\n    >>> TagsCommandMixin.parse_tag_addremove('-a=1')\n    TagAddRemove(remove=True, tag=Tag(name='a',value=1))\n    >>> TagsCommandMixin.parse_tag_addremove('-a=\"foo bah\"')\n    TagAddRemove(remove=True, tag=Tag(name='a',value='foo bah'))\n    >>> TagsCommandMixin.parse_tag_addremove('-a=foo bah')\n    TagAddRemove(remove=True, tag=Tag(name='a',value='foo bah'))\n\n*Method `TagsCommandMixin.parse_tag_choices(argv)`*:\nParse `argv` as an iterable of [`!`]*tag_name*[`=`*tag_value`] `Tag`\nadditions/deletions.\n\n*Method `TagsCommandMixin.parse_tagset_criteria(argv, tag_based_test_class=None)`*:\nParse tag specifications from `argv` until an unparseable item is found.\nReturn `(criteria,argv)`\nwhere `criteria` is a list of the parsed criteria\nand `argv` is the remaining unparsed items.\n\nEach item is parsed via\n`cls.parse_tagset_criterion(item,tag_based_test_class)`.\n\n*Method `TagsCommandMixin.parse_tagset_criterion(arg, tag_based_test_class=None)`*:\nParse `arg` as a tag specification\nand return a `tag_based_test_class` instance\nvia its `.from_str` factory method.\nRaises `ValueError` in a misparse.\nThe default `tag_based_test_class`\ncomes from `cls.TAGSET_CRITERION_CLASS`,\nwhich itself defaults to class `TagSetCriterion`.\n\nThe default `TagSetCriterion.from_str` recognises:\n* `-`*tag_name*: a negative requirement for *tag_name*\n* *tag_name*[`=`*value*]: a positive requirement for a *tag_name*\n  with optional *value*.\n\n## Class `TagSet(builtins.dict, cs.dateutils.UNIXTimeMixin, cs.lex.FormatableMixin, cs.mappings.AttrableMappingMixin)`\n\nA setlike class associating a set of tag names with values.\n\nThis actually subclasses `dict`, so a `TagSet` is a direct\nmapping of tag names to values.\nIt accepts attribute access to simple tag values when they\ndo not conflict with the class methods;\nthe reliable method is normal item access.\n\n*NOTE*: iteration yields `Tag`s, not dict keys.\n\nAlso note that all the `Tags` from a `TagSet`\nshare its ontology.\n\nSubclasses should override the `set` and `discard` methods;\nthe `dict` and mapping methods\nare defined in terms of these two basic operations.\n\n`TagSet`s have a few special properties:\n* `id`: a domain specific identifier;\n  this may reasonably be `None` for entities\n  not associated with database rows;\n  the `cs.sqltags.SQLTags` class associates this\n  with the database row id.\n* `name`: the entity's name;\n  a read only alias for the `'name'` `Tag`.\n  The `cs.sqltags.SQLTags` class defines \"log entries\"\n  as `TagSet`s with no `name`.\n* `unixtime`: a UNIX timestamp,\n  a `float` holding seconds since the UNIX epoch\n  (midnight, 1 January 1970 UTC).\n  This is typically the row creation time\n  for entities associated with database rows,\n  but usually the event time for `TagSet`s describing an event.\n\nBecause ` TagSet` subclasses `cs.mappings.AttrableMappingMixin`\nyou can also access tag values as attributes\n*provided* that they do not conflict with instance attributes\nor class methods or properties.\n\n*Method `TagSet.__init__(self, *a, _id=None, _ontology=None, **kw)`*:\nInitialise the `TagSet`.\n\nParameters:\n* positional parameters initialise the `dict`\n  and are passed to `dict.__init__`\n* `_id`: optional identity value for databaselike implementations\n* `_ontology`: optional `TagsOntology to use for this `TagSet`\n* other alphabetic keyword parameters are also used to initialise the\n  `dict` and are passed to `dict.__init__`\n\n*Method `TagSet.__contains__(self, tag)`*:\nTest for a tag being in this `TagSet`.\n\nIf the supplied `tag` is a `str` then this test\nis for the presence of `tag` in the keys.\n\nOtherwise,\nfor each tag `T` in the tagset\ntest `T.matches(tag)` and return `True` on success.\nThe default `Tag.matches` method compares the tag name\nand if the same,\nreturns true if `tag.value` is `None` (basic \"is the tag present\" test)\nand otherwise true if `tag.value==T.value` (basic \"tag value equality\" test).\n\nOtherwise return `False`.\n\n*Method `TagSet.__getattr__(self, attr)`*:\nSupport access to dotted name attributes.\n\nThe following attribute accesses are supported:\n- an attrbute from a superclass\n- a `Tag` whose name is `attr`; return its value\n- the value of `self.auto_infer(attr)` if that does not raise `ValueError`\n- if `self.ontology`, try {type}_{field} and {type}_{field}s\n- otherwise return `self.subtags(attr)` to allow access to dotted tags,\n  provided any existing tags start with \"attr.\"\n\nIf this `TagSet` has an ontology\nand `attr looks like *typename*`_`*fieldname*\nand *typename* is a key,\nlook up the metadata for the `Tag` value\nand return the metadata's *fieldname* key.\nThis also works for plural values.\n\nFor example if a `TagSet` has the tag `artists=[\"fred\",\"joe\"]`\nand `attr` is `artist_names`\nthen the metadata entries for `\"fred\"` and `\"joe\"` are looked up\nand their `artist_name` tags are returned,\nperhaps resulting in the list\n`[\"Fred Thing\",\"Joe Thang\"]`.\n\nIf there are keys commencing with `attr+'.'`\nthen this returns a view of those keys\nso that a subsequent attribute access can access one of those keys.\n\nOtherwise, a superclass attribute access is performed.\n\nExample of dotted access to tags like `c.x`:\n\n    >>> tags=TagSet(a=1,b=2)\n    >>> tags.a\n    1\n    >>> tags.c\n    Traceback (most recent call last):\n        ...\n    AttributeError: TagSet.c\n    >>> tags['c.z']=9\n    >>> tags['c.x']=8\n    >>> tags\n    TagSet:{'a': 1, 'b': 2, 'c.z': 9, 'c.x': 8}\n    >>> tags.c\n    TagSetPrefixView:c.{'z': 9, 'x': 8}\n    >>> tags.c.z\n    9\n\nHowever, this is not supported when there is a tag named `'c'`\nbecause `tags.c` has to return the `'c'` tag value:\n\n    >>> tags=TagSet(a=1,b=2,c=3)\n    >>> tags.a\n    1\n    >>> tags.c\n    3\n    >>> tags['c.z']=9\n    >>> tags.c.z\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    AttributeError: 'int' object has no attribute 'z'\n\n*Method `TagSet.__iter__(self, prefix=None, ontology=None)`*:\nYield the tag data as `Tag`s.\n\n*Method `TagSet.__setattr__(self, attr, value)`*:\nAttribute based `Tag` access.\n\nIf `attr` is private or is in `self.__dict__` then that is updated,\nsupporting \"normal\" attributes set on the instance.\nOtherwise the `Tag` named `attr` is set to `value`.\n\nThe `__init__` methods of subclasses should do something like this\n(from `TagSet.__init__`)\nto set up the ordinary instance attributes\nwhich are not to be treated as `Tag`s:\n\n    self.__dict__.update(id=_id, ontology=_ontology, modified=False)\n\n*Method `TagSet.__str__(self)`*:\nThe `TagSet` suitable for writing to a tag file.\n\n*Method `TagSet.add(self, tag_name, value, **kw)`*:\nAdding a `Tag` calls the class `set()` method.\n\n*Method `TagSet.as_dict(self)`*:\nReturn a `dict` mapping tag name to value.\n\n*Method `TagSet.as_tags(self, prefix=None, ontology=None)`*:\nYield the tag data as `Tag`s.\n\n*Property `TagSet.auto`*:\nThe automatic namespace.\nHere we can refer to dotted tag names directly as attributes.\n\n*Method `TagSet.auto_infer(self, attr)`*:\nThe default inference implementation.\n\nThis should return a value if `attr` is inferrable\nand raise `ValueError` if not.\n\nThe default implementation returns the direct tag value for `attr`\nif present.\n\n*Property `TagSet.csvrow`*:\nThis `TagSet` as a list useful to a `csv.writer`.\nThe inverse of `from_csvrow`.\n\n*Method `TagSet.discard(self, tag_name, value, *, verbose=None)`*:\nDiscard the tag matching `(tag_name,value)`.\nReturn a `Tag` with the old value,\nor `None` if there was no matching tag.\n\nNote that if the tag value is `None`\nthen the tag is unconditionally discarded.\nOtherwise the tag is only discarded\nif its value matches.\n\n*Method `TagSet.dump(self, keys=None, *, preindent=None, file=None, **pf_kwargs)`*:\nDump a `TagSet` in multiline format.\n\nParameters:\n* `keys`: optional iterable of `Tag` names to print\n* `file`: optional keyword parameter specifying the output filelike \n  object; the default is `sys.stdout`.\n* `preindent`: optional leading indentation for the entire dump,\n  either a `str` or an `int` indicating a number of spaces\nOther keyword arguments are passed to `pprint.pformat`.\n\n*Method `TagSet.edit(self, editor=None, verbose=None, comments=())`*:\nEdit this `TagSet`.\n\n*Method `TagSet.edit_tagsets(tes, editor=None, verbose=True)`*:\nEdit a collection of `TagSet`s.\nReturn a list of `(old_name,new_name,TagSet)` for those which were modified.\n\nThis function supports modifying both `name` and `Tag`s.\nThe `Tag`s are updated directly.\nThe changed names are returning in the `old_name,new_name` above.\n\nThe collection `tes` may be either a mapping of name/key\nto `TagSet` or an iterable of `TagSets`. If the latter, a\nmapping is made based on `te.name or te.id` for each item\n`te` in the iterable.\n\n*Method `TagSet.from_csvrow(csvrow)`*:\nConstruct a `TagSet` from a CSV row like that from\n`TagSet.csvrow`, being `unixtime,id,name,tags...`.\n\n*Method `TagSet.from_ini(f, section: str, missing_ok=False)`*:\nLoad a `TagSet` from a section of a `.ini` file.\n\nParameters:\n* `f`: the `.ini` format file to read;\n  an iterable of lines (eg a file object)\n  or the name of a file to open\n* `section`: the name of the config section\n  from which to load the `TagSet`\n* `missing_ok`: optional flag, default `False`;\n  if true a missing file will return an empty `TagSet`\n  instead of raising `FileNotFoundError`\n\n*Method `TagSet.from_line(line, offset=0, *, ontology=None, extra_types=None, verbose=None)`*:\nCreate a new `TagSet` from a line of text.\n\n*Method `TagSet.from_tags(tags, _id=None, _ontology=None)`*:\nMake a `TagSet` from an iterable of `Tag`s.\n\n*Method `TagSet.get_arg_name(self, field_name)`*:\nOverride for `FormattableMixin.get_arg_name`:\nreturn the leading dotted identifier,\nwhich represents a tag or tag prefix.\n\n*Method `TagSet.get_value(self, arg_name, a, kw)`*:\nOverride for `FormattableMixin.get_value`:\nlook up `arg_name` in `kw`, return a value.\n\nThe value is obtained as follows:\n* `kw[arg_name]`: the `Tag` named `arg_name` if present\n* `kw.get_format_attribute(arg_name)`:\n  a formattable attribute named `arg_name`\notherwise raise `KeyError` if `self.format_mode.strict`\notherwise return the placeholder string `'{'+arg_name+'}'`.\n\n*Method `TagSet.is_stale(self, max_age=None)`*:\nTest whether this `TagSet` is stale\ni.e. the time since `self.last_updated` UNIX time exceeds `max_age` seconds\n(default from `self.STALE_AGE`).\n\nThis is a convenience function for `TagSet`s which cache external data.\n\n*Property `TagSet.name`*:\nRead only `name` property, `None` if there is no `'name'` tag.\n\n*Method `TagSet.save_as_ini(self, f, section: str, config=None)`*:\nSave this `TagSet` to the config file `f` as `section`.\n\nIf `f` is a string, read an existing config from that file\nand update the section.\n\n*Method `TagSet.set(self, tag_name, value, *, verbose=None)`*:\nSet `self[tag_name]=value`.\nIf `verbose`, emit an info message if this changes the previous value.\n\n*Method `TagSet.set_from(self, other, verbose=None)`*:\nCompletely replace the values in `self`\nwith the values from `other`,\na `TagSet` or any other `name`=>`value` dict.\n\nThis has the feature of logging changes\nby calling `.set` and `.discard` to effect the changes.\n\n*Method `TagSet.subtags(self, prefix, as_tagset=False)`*:\nReturn `TagSetPrefixView` of the tags commencing with `prefix+'.'`\nwith the key prefixes stripped off.\n\nIf `as_tagset` is true (default `False`)\nreturn a new standalone `TagSet` containing the prefixed keys.\n\nExample:\n\n    >>> tags = TagSet({'a.b':1, 'a.d':2, 'c.e':3})\n    >>> tags.subtags('a')\n    TagSetPrefixView:a.{'b': 1, 'd': 2}\n    >>> tags.subtags('a', as_tagset=True)\n    TagSet:{'b': 1, 'd': 2}\n\n*Method `TagSet.tag(self, tag_name, prefix=None, ontology=None)`*:\nReturn a `Tag` for `tag_name`, or `None` if missing.\n\nParameters:\n* `tag_name`: the name of the `Tag` to create\n* `prefix`: optional prefix;\n  if supplied, prepend `prefix+'.'` to the `Tag` name\n* `ontology`: optional ontology for the `Tag`,\n  default `self.ontology`\n\n*Method `TagSet.tag_metadata(self, tag_name, prefix=None, ontology=None, convert=None)`*:\nReturn a list of the metadata for the `Tag` named `tag_name`,\nor an empty list if the `Tag` is missing.\n\n*Property `TagSet.unixtime`*:\n`unixtime` property, autosets to `time.time()` if accessed and missing.\n\n*Method `TagSet.update(self, other=None, *, prefix=None, verbose=None, **kw)`*:\nUpdate this `TagSet` from `other`,\na dict of `{name:value}`\nor an iterable of `Tag`like or `(name,value)` things.\n\n*Property `TagSet.uuid`*:\nThe `TagSet`'s `'uuid'` value as a UUID if present, otherwise `None`.\n\n## Class `TagSetCriterion(cs.deco.Promotable)`\n\nA testable criterion for a `TagSet`.\n\n*`TagSetCriterion.TAG_BASED_TEST_CLASS`*\n\n*Method `TagSetCriterion.from_any(o)`*:\nConvert some suitable object `o` into a `TagSetCriterion`.\n\nVarious possibilities for `o` are:\n* `TagSetCriterion`: returned unchanged\n* `str`: a string tests for the presence\n  of a tag with that name and optional value;\n* an object with a `.choice` attribute;\n  this is taken to be a `TagSetCriterion` ducktype and returned unchanged\n* an object with `.name` and `.value` attributes;\n  this is taken to be `Tag`-like and a positive test is constructed\n* `Tag`: an object with a `.name` and `.value`\n  is equivalent to a positive equality `TagBasedTest`\n* `(name,value)`: a 2 element sequence\n  is equivalent to a positive equality `TagBasedTest`\n\n*Method `TagSetCriterion.from_arg(arg, fallback_parse=None)`*:\nPrepare a `TagSetCriterion` from the string `arg`\nwhere `arg` is known to be entirely composed of the value,\nsuch as a command line argument.\n\nThis calls the `from_str` method with `fallback_parse` set\nto gather then entire tail of the supplied string `arg`.\n\n*Method `TagSetCriterion.from_str(s: str, fallback_parse=None)`*:\nPrepare a `TagSetCriterion` from the string `s`.\n\n*Method `TagSetCriterion.from_str2(s, offset=0, delim=None, fallback_parse=None)`*:\nParse a criterion from `s` at `offset` and return `(TagSetCriterion,offset)`.\n\nThis method recognises an optional leading `'!'` or `'-'`\nindicating negation of the test,\nfollowed by a criterion recognised by the `.parse` method\nof one of the classes in `cls.CRITERION_PARSE_CLASSES`.\n\n*Method `TagSetCriterion.match_tagged_entity(self, te: 'TagSet') -> bool`*:\nApply this `TagSetCriterion` to a `TagSet`.\n\n## Class `TagSetPrefixView(cs.lex.FormatableMixin)`\n\nA view of a `TagSet` via a `prefix`.\n\nAccess to a key `k` accesses the `TagSet`\nwith the key `prefix+'.'+k`.\n\nThis is a kind of funny hybrid of a `Tag` and a `TagSet`\nin that some things such as `__format__`\nwill format the `Tag` named `prefix` if it exists\nin preference to the subtags.\n\nExample:\n\n    >>> tags = TagSet(a=1, b=2)\n    >>> tags\n    TagSet:{'a': 1, 'b': 2}\n    >>> tags['sub.x'] = 3\n    >>> tags['sub.y'] = 4\n    >>> tags\n    TagSet:{'a': 1, 'b': 2, 'sub.x': 3, 'sub.y': 4}\n    >>> sub = tags.sub\n    >>> sub\n    TagSetPrefixView:sub.{'x': 3, 'y': 4}\n    >>> sub.z = 5\n    >>> sub\n    TagSetPrefixView:sub.{'x': 3, 'y': 4, 'z': 5}\n    >>> tags\n    TagSet:{'a': 1, 'b': 2, 'sub.x': 3, 'sub.y': 4, 'sub.z': 5}\n\n*Method `TagSetPrefixView.__getattr__(self, attr)`*:\nProxy other attributes through to the `TagSet`.\n\n*Method `TagSetPrefixView.__setattr__(self, attr, value)`*:\nAttribute based `Tag` access.\n\nIf `attr` is in `self.__dict__` then that is updated,\nsupporting \"normal\" attributes set on the instance.\nOtherwise the `Tag` named `attr` is set to `value`.\n\nThe `__init__` methods of subclasses should do something like this\n(from `TagSet.__init__`)\nto set up the ordinary instance attributes\nwhich are not to be treated as `Tag`s:\n\n    self.__dict__.update(id=_id, ontology=_ontology, modified=False)\n\n*Method `TagSetPrefixView.as_dict(self)`*:\nReturn a `dict` representation of this view.\n\n*Method `TagSetPrefixView.get(self, k, default=None)`*:\nMapping `get` method.\n\n*Method `TagSetPrefixView.get_format_attribute(self, attr)`*:\nFetch a formatting attribute from the proxied object.\n\n*Method `TagSetPrefixView.items(self)`*:\nReturn an iterable of the items (`Tag` name, `Tag`).\n\n*Method `TagSetPrefixView.keys(self)`*:\nThe keys of the subtags.\n\n*Property `TagSetPrefixView.ontology`*:\nThe ontology of the references `TagSet`.\n\n*Method `TagSetPrefixView.setdefault(self, k, v=None)`*:\nMapping `setdefault` method.\n\n*Method `TagSetPrefixView.subtags(self, subprefix)`*:\nReturn a deeper view of the `TagSet`.\n\n*Property `TagSetPrefixView.tag`*:\nThe `Tag` for the prefix, or `None` if there is no such `Tag`.\n\n*Method `TagSetPrefixView.update(self, mapping)`*:\nUpdate tags from a name->value mapping.\n\n*Property `TagSetPrefixView.value`*:\nReturn the `Tag` value for the prefix, or `None` if there is no such `Tag`.\n\n*Method `TagSetPrefixView.values(self)`*:\nReturn an iterable of the values (`Tag`s).\n\n## Class `TagSetsSubdomain(cs.obj.SingletonMixin, cs.mappings.PrefixedMappingProxy)`\n\nA view into a `BaseTagSets` for keys commencing with a prefix\nbeing the subdomain plus a dot (`'.'`).\n\n*Property `TagSetsSubdomain.TAGGED_ENTITY_FACTORY`*:\nThe entity factory comes from the parent collection.\n\n## Class `TagsOntology(cs.obj.SingletonMixin, BaseTagSets)`\n\nAn ontology for tag names.\nThis is based around a mapping of names\nto ontological information expressed as a `TagSet`.\n\nNormally an object's tags are not a self contained repository of all the information;\ninstead a tag just names some information.\n\nAs a example, consider the tag `colour=blue`.\nMeta information about `blue` is obtained via the ontology,\nwhich has an entry for the colour `blue`.\nWe adopt the convention that the type is just the tag name,\nso we obtain the metadata by calling `ontology.metadata(tag)`\nor alternatively `ontology.metadata(tag.name,tag.value)`\nbeing the type name and value respectively.\n\nThe ontology itself is based around `TagSets` and effectively the call\n`ontology.metadata('colour','blue')`\nwould look up the `TagSet` named `colour.blue` in the underlying `Tagsets`.\n\nFor a self contained dataset this means that it can be its own ontology.\nFor tags associated with arbitrary objects\nsuch as the filesystem tags maintained by `cs.fstags`\nthe ontology would be a separate tags collection stored in a central place.\n\nThere are two main categories of entries in an ontology:\n* metadata: other entries named *typename*`.`*value_key*\n  contains a `TagSet` holding metadata for a value of type *typename*\n  whose value is mapped to *value_key*\n* types: an optional entry named `type.`*typename* contains a `TagSet`\n  describing the type named *typename*;\n  really this is just more metadata where the \"type name\" is `type`\n\nMetadata are `TagSets` instances describing particular values of a type.\nFor example, some metadata for the `Tag` `colour=\"blue\"`:\n\n    colour.blue url=\"https://en.wikipedia.org/wiki/Blue\" wavelengths=\"450nm-495nm\"\n\nSome metadata associated with the `Tag` `actor=\"Scarlett Johansson\"`:\n\n    actor.scarlett_johansson role=[\"Black Widow (Marvel)\"]\n    character.marvel.black_widow fullname=[\"Natasha Romanov\"]\n\nThe tag values are lists above because an actor might play many roles, etc.\n\nThere's a convention for converting human descriptions\nsuch as the role string `\"Black Widow (Marvel)\"` to its metadata.\n* the value `\"Black Widow (Marvel)\"` if converted to a key\n  by the ontology method `value_to_tag_name`;\n  it moves a bracket suffix such as `(Marvel)` to the front as a prefix\n  `marvel.` and downcases the rest of the string and turns spaces into underscores.\n  This yields the value key `marvel.black_widow`.\n* the type is `role`, so the ontology entry for the metadata\n  is `role.marvel.black_widow`\n\nThis requires type information about a `role`.\nHere are some type definitions supporting the above metadata:\n\n    type.person type=str description=\"A person.\"\n    type.actor type=person description=\"An actor's stage name.\"\n    type.character type=str description=\"A person in a story.\"\n    type.role type_name=character description=\"A character role in a performance.\"\n    type.cast type=dict key_type=actor member_type=role description=\"Cast members and their roles.\"\n\nThe basic types have their Python names: `int`, `float`, `str`, `list`,\n`dict`, `date`, `datetime`.\nYou can define subtypes of these for your own purposes\nas illustrated above.\n\nFor example:\n\n    type.colour type=str description=\"A hue.\"\n\nwhich subclasses `str`.\n\nSubtypes of `list` include a `member_type`\nspecifying the type for members of a `Tag` value:\n\n    type.scene type=list member_type=str description=\"A movie scene.\"\n\nSubtypes of `dict` include a `key_type` and a `member_type`\nspecifying the type for keys and members of a `Tag` value:\n\nAccessing type data and metadata:\n\nA `TagSet` may have a reference to a `TagsOntology` as `.ontology`\nand so also do any of its `Tag`s.\n\n*Method `TagsOntology.__bool__(self)`*:\nSupport easy `ontology or some_default` tests,\nsince ontologies are broadly optional.\n\n*Method `TagsOntology.__delitem__(self, name)`*:\nDelete the entity named `name`.\n\n*Method `TagsOntology.__getitem__(self, name)`*:\nFetch `tags` for the entity named `name`.\n\n*Method `TagsOntology.__setitem__(self, name, tags)`*:\nApply `tags` to the entity named `name`.\n\n*Method `TagsOntology.add_tagsets(self, tagsets: cs.tagset.BaseTagSets, match, unmatch=None, index=0)`*:\nInsert a `_TagsOntology_SubTagSets` at `index`\nin the list of `_TagsOntology_SubTagSets`es.\n\nThe new `_TagsOntology_SubTagSets` instance is initialised\nfrom the supplied `tagsets`, `match`, `unmatch` parameters.\n\n*Method `TagsOntology.as_dict(self)`*:\nReturn a `dict` containing a mapping of entry names to their `TagSet`s.\n\n*Method `TagsOntology.basetype(self, typename)`*:\nInfer the base type name from a type name.\nThe default type is `'str'`,\nbut any type which resolves to one in `self.BASE_TYPES`\nmay be returned.\n\n*Method `TagsOntology.by_type(self, type_name, with_tagsets=False)`*:\nYield keys or (key,tagset) of type `type_name`\ni.e. all keys commencing with *type_name*`.`.\n\n*Method `TagsOntology.convert_tag(self, tag)`*:\nConvert a `Tag`'s value accord to the ontology.\nReturn a new `Tag` with the converted value\nor the original `Tag` unchanged.\n\nThis is primarily aimed at things like regexp based autotagging,\nwhere the matches are all strings\nbut various fields have special types,\ncommonly `int`s or `date`s.\n\n*Method `TagsOntology.edit_indices(self, indices, prefix=None)`*:\nEdit the entries specified by indices.\nReturn `TagSet`s for the entries which were changed.\n\n*Method `TagsOntology.from_match(tagsets, match, unmatch=None)`*:\nInitialise a `SubTagSets` from `tagsets`, `match` and optional `unmatch`.\n\nParameters:\n* `tagsets`: a `TagSets` holding ontology information\n* `match`: a match function used to choose entries based on a type name\n* `unmatch`: an optional reverse for `match`, accepting a subtype\n  name and returning its public name\n\nIf `match` is `None`\nthen `tagsets` will always be chosen if no prior entry matched.\n\nOtherwise, `match` is resolved to a function `match-func(type_name)`\nwhich returns a subtype name on a match and a false value on no match.\n\nIf `match` is a callable it is used as `match_func` directly.\n\nif `match` is a list, tuple or set\nthen this method calls itself with `(tagsets,submatch)`\nfor each member `submatch` if `match`.\n\nIf `match` is a `str`,\nif it ends in a dot '.', dash '-' or underscore '_'\nthen it is considered a prefix of `type_name` and the returned\nsubtype name is the text from `type_name` after the prefix\nothwerwise it is considered a full match for the `type_name`\nand the returns subtype name is `type_name` unchanged.\nThe `match` string is a simplistic shell style glob\nsupporting `*` but not `?` or `[`*seq*`]`.\n\nThe value of `unmatch` is constrained by `match`.\nIf `match` is `None`, `unmatch` must also be `None`;\nthe type name is used unchanged.\nIf `match` is callable`, `unmatch` must also be callable;\nit is expected to reverse `match`.\n\nExamples:\n\n    >>> from cs.sqltags import SQLTags\n    >>> from os.path import expanduser as u\n    >>> # an initial empty ontology with a default in memory mapping\n    >>> ont = TagsOntology()\n    >>> # divert the types actor, role and series to my media ontology\n    >>> ont.add_tagsets(\n    ...     SQLTags(u('~/var/media-ontology.sqlite')),\n    ...     ['actor', 'role', 'series'])\n    >>> # divert type \"musicbrainz.recording\" to mbdb.sqlite\n    >>> # mapping to the type \"recording\"\n    >>> ont.add_tagsets(SQLTags(u('~/.cache/mbdb.sqlite')), 'musicbrainz.')\n    >>> # divert type \"tvdb.actor\" to tvdb.sqlite\n    >>> # mapping to the type \"actor\"\n    >>> ont.add_tagsets(SQLTags(u('~/.cache/tvdb.sqlite')), 'tvdb.')\n\n*Method `TagsOntology.get(self, name, default=None)`*:\nFetch the entity named `name` or `default`.\n\n*Method `TagsOntology.items(self)`*:\nYield `(entity_name,tags)` for all the items in each subtagsets.\n\n*Method `TagsOntology.keys(self)`*:\nYield entity names for all the entities.\n\n*Method `TagsOntology.metadata(self, type_name, value, *, convert=None)`*:\nReturn the metadata `TagSet` for `type_name` and `value`.\nThis implements the mapping between a type's value and its semantics.\n\nThe optional parameter `convert`\nmay specify a function to use to convert `value` to a tag name component\nto be used in place of `self.value_to_tag_name` (the default).\n\nFor example, if a `TagSet` had a list of characters such as:\n\n    character=[\"Captain America (Marvel)\",\"Black Widow (Marvel)\"]\n\nthen these values could be converted to the dotted identifiers\n`character.marvel.captain_america`\nand `character.marvel.black_widow` respectively,\nready for lookup in the ontology\nto obtain the \"metadata\" `TagSet` for each specific value.\n\n*Method `TagsOntology.startup_shutdown(self)`*:\nOpen all the sub`TagSets` and close on exit.\n\n*Method `TagsOntology.subtype_name(self, type_name)`*:\nReturn the type name for use within `self.tagsets` from `type_name`.\nReturns `None` if this is not a supported `type_name`.\n\n*Method `TagsOntology.type_name(self, subtype_name)`*:\nReturn the external type name from the internal `subtype_name`\nwhich is used within `self.tagsets`.\n\n*Method `TagsOntology.type_names(self)`*:\nReturn defined type names i.e. all entries starting `type.`.\n\n*Method `TagsOntology.type_values(self, type_name, value_tag_name=None)`*:\nYield the various defined values for `type_name`.\nThis is useful for types with enumerated metadata entries.\n\nFor example, if metadata entries exist as `foo.bah` and `foo.baz`\nfor the `type_name` `'foo'`\nthen this yields `'bah'` and `'baz'`.`\n\nNote that this looks for a `Tag` for the value,\nfalling back to the entry suffix if the tag is not present.\nThat tag is normally named `value`\n(from DEFAULT_VALUE_TAG_NAME)\nbut may be overridden by the `value_tag_name` parameter.\nAlso note that normally it is desireable that the value\nconvert to the suffix via the `value_to_tag_name` method\nso that the metadata entry can be located from the value.\n\n*Method `TagsOntology.typedef(self, type_name)`*:\nReturn the `TagSet` defining the type named `type_name`.\n\n*Method `TagsOntology.types(self)`*:\nGenerator yielding defined type names and their defining `TagSet`.\n\n*Method `TagsOntology.value_to_tag_name(value)`*:\nConvert a tag value to a tagnamelike dotted identifierish string\nfor use in ontology lookup.\nRaises `ValueError` for unconvertable values.\n\nWe are allowing dashes in the result (UUIDs, MusicBrainz discids, etc).\n\n`int`s are converted to `str`.\n\nStrings are converted as follows:\n* a trailing `(.*)` is turned into a prefix with a dot,\n  for example `\"Captain America (Marvel)\"`\n  becomes `\"Marvel.Captain America\"`.\n* the string is split into words (nonwhitespace),\n  lowercased and joined with underscores,\n  for example `\"Marvel.Captain America\"`\n  becomes `\"marvel.captain_america\"`.\n\n## Class `TagsOntologyCommand(cs.cmdutils.BaseCommand)`\n\nA command line for working with ontology types.\n\nCommand line implementation.\n\nUsage summary:\n\n    Usage: tagsontology subcommand [...]\n      Subcommands:\n        edit [{/name-regexp | entity-name}]\n          Edit entities.\n          With no arguments, edit all the entities.\n          With an argument starting with a slash, edit the entities\n          whose names match the regexp.\n          Otherwise the argument is expected to be an entity name;\n          edit the tags of that entity.\n        help [-l] [subcommand-names...]\n          Print help for subcommands.\n          This outputs the full help for the named subcommands,\n          or the short help for all subcommands if no names are specified.\n          -l  Long help even if no subcommand-names provided.\n        meta tag=value\n        shell\n          Run a command prompt via cmd.Cmd using this command's subcommands.\n        type\n            With no arguments, list the defined types.\n          type type_name\n            With a type name, print its `Tag`s.\n          type type_name edit\n            Edit the tags defining a type.\n          type type_name edit meta_names_pattern...\n            Edit the tags for the metadata names matching the\n            meta_names_patterns.\n          type type_name list\n          type type_name ls\n            List the metadata names for this type and their tags.\n          type type_name + entity_name [tags...]\n            Create type_name.entity_name and apply the tags.\n\n*Method `TagsOntologyCommand.cmd_edit(self, argv)`*:\nUsage: {cmd} [{{/name-regexp | entity-name}}]\nEdit entities.\nWith no arguments, edit all the entities.\nWith an argument starting with a slash, edit the entities\nwhose names match the regexp.\nOtherwise the argument is expected to be an entity name;\nedit the tags of that entity.\n\n*Method `TagsOntologyCommand.cmd_meta(self, argv)`*:\nUsage: {cmd} tag=value\n\n*Method `TagsOntologyCommand.cmd_type(self, argv)`*:\nUsage:\n{cmd}\n  With no arguments, list the defined types.\n{cmd} type_name\n  With a type name, print its `Tag`s.\n{cmd} type_name edit\n  Edit the tags defining a type.\n{cmd} type_name edit meta_names_pattern...\n  Edit the tags for the metadata names matching the\n  meta_names_patterns.\n{cmd} type_name list\n{cmd} type_name ls\n  List the metadata names for this type and their tags.\n{cmd} type_name + entity_name [tags...]\n  Create type_name.entity_name and apply the tags.\n\n# Release Log\n\n\n\n*Release 20240422.2*:\njsonable: use obj.for_json() if available.\n\n*Release 20240422.1*:\njsonable: convert pathlib.PurePath to str, hoping this isn't too open ended a can of worms.\n\n*Release 20240422*:\n* New jsonable(obj) function to return a deep copy of `obj` which can be transcribed as JSON.\n* Tag.transcribe_value: pass jsonable(value) to the JSON encoder, drop special checks now done by jsonable().\n* Tag.__str__: do not catch TypeError any more, was embedding Python repr()s in .fstags files - now Tag.transcribe_value() does the correct thing where that is possible.\n\n*Release 20240316*:\nFixed release upload artifacts.\n\n*Release 20240305*:\n* Tag.from_str2: make the ontology optional.\n* TagSetPrefixView: provide __len__() and update().\n\n*Release 20240211*:\n* TagFile.parse_tag_line: recognise dotted_identifiers directly, avoids misparsing bare \"nan\" as float NaN.\n* Tag.parse_value: BUGFIX parse - always to the primary types first (int, float) before trying any funny extra types.\n\n*Release 20240201*:\nTagsOntology.metadata: actually call the .items() method!\n\n*Release 20231129*:\n* TagSet.__getattr__: rework the attribute lookup with greater precision.\n* TagSetPrefixView.__getattr__: if the attribute is not there, raise Attribute error, do not try to fall back to something else.\n* TagSet: drop ATTRABLE_MAPPING_DEFAULT=None, caused far more confusion that it was worth.\n\n*Release 20230612*:\n* TagFile.save_tagsets: catch and warn about exceptions from update_mapping[key].update, something is wrong with my SQLTags usage.\n* TagFile.save_tagsets: update_mapping: do not swallow AttributeError.\n\n*Release 20230407*:\nMove the (optional) ORM open/close from FSTags.startup_shutdown to TagFile.save, greatly shortens the ORM lock.\n\n*Release 20230212*:\nMark TagSetCriterion as Promotable.\n\n*Release 20230210*:\n* TagFile: new optional update_mapping secondary mapping to which to mirror file tags, for example to an SQLTags.\n* New .uuid:UUID property returning the UUID for the tag named 'uuid' or None.\n\n*Release 20230126*:\nNew TagSet.is_stale() method based on .expiry attribute, intended for TagSets which are caches of other primary data.\n\n*Release 20221228*:\n* TagFile: drop _singleton_key, FSPathBasedSingleton provides a good default.\n* TagFile.save_tagsets,tags_line: new optional prune=False parameter to drop empty top level dict/lists.\n* TagFile.save: plumb prune=False parameter.\n\n*Release 20220806*:\nNew TagSetCriterion.promote(obj)->TagSetCriterion class method.\n\n*Release 20220606*:\n* Tag.parse_value: bugfix parse of float.\n* TagSet.edit: accept optional comments parameter with addition header comment lines, be more tolerant of errors, avoid losing data on error.\n\n*Release 20220430*:\n* TagSetPrefixView: new as_dict() method.\n* TagSetPrefixView.__str__: behave like TagSet.__str__.\n* TagFile.save_tagsets: do not try to save if the file is missing and the tagsets are empty.\n* New TagSet.from_tags(tags) factory to make a new TagSet from an iterable of tags.\n* TagSetPrefixView: add .get and .setdefault mapping methods.\n* RegexpTagRule: accept optional tag_prefix parameter.\n* Tagset: new from_ini() and save_as_ini() methods to support cs.timeseries config files, probably handy elsewhere.\n\n*Release 20220311*:\nAssorted internal changes.\n\n*Release 20211212*:\n* Tag: new fallback_parse parameter for value parsing, default get_nonwhite.\n* Tag: new from_arg factory with fallback_parse grabbing the whole string for command line arguments, thus supporting unquoted strings for ease of use.\n* TagSetCriterion: new optional fallback_parse parameter and from_arg method as for the Tag factories.\n* Tag.transcribe_value: accept optional json_options to control the JSON encoder, used for human friendly multiline edits in cs.app.tagger.\n* Rename edit_many to edit_tagsets for clarity.\n* TagsOntology: new type_values method to return values for a type (derived from their metadata entries).\n* Tag: new alt_values method returning its TagsOntology.type_values.\n* (Internal) New _FormatStringTagProxy which proxies a Tag but uses str(self.__proxied.value) for __str__ to support format strings.\n* (Internal) TagSet.get_value: if arg_name matches a Tag, return a _FormatStringTagProxy.\n* Tag.__new__: accept (tag_name,value) or (Tag) as initialisation parameters.\n\n*Release 20210913*:\n* TagSet.get_value: raise KeyError in strict mode, leave placeholder otherwise.\n* Other small changes.\n\n*Release 20210906*:\nMany many updates; some semantics have changed.\n\n*Release 20210428*:\nBugfix TagSet.set: internal in place changes to a complex tag value were not noticed, causing TagFile to not update on shutdown.\n\n*Release 20210420*:\n* TagSet: also subclass cs.dateutils.UNIXTimeMixin.\n* Various TagSetNamespace updates and bugfixes.\n\n*Release 20210404*:\nBugfix TagBasedTest.COMPARISON_FUNCS[\"=\"]: if cmp_value is None, return true (the tag is present).\n\n*Release 20210306*:\n* ExtendedNamespace,TagSetNamespace: move the .[:alpha:]* attribute support from ExtendedNamespace to TagSetNamespace because it requires Tags.\n* TagSetNamespace.__getattr__: new _i, _s, _f suffixes to return int, str or float tag values (or None); fold _lc in with these.\n* Pull most of `TaggedEntity` out into `TaggedEntityMixin` for reuse by domain specific tagged entities.\n* TaggedEntity: new .set and .discard methods.\n* TaggedEntity: new as_editable_line, from_editable_line, edit and edit_entities methods to support editing entities using a text editor.\n* ontologies: type entries are now prefixed with \"type.\" and metadata entries are prefixed with \"meta.\"; provide a worked ontology example in the introduction and improve related docstrings.\n* TagsOntology: new .types(), .types_names(), .meta(type_name,value), .meta_names() methods.\n* TagsOntology.__getitem__: create missing TagSets on demand.\n* New TagsOntologyCommand, initially with a \"type [type_name [{edit|list}]]\" subcommand, ready for use as the cmd_ont subcommand of other tag related commands.\n* TagSet: support initialisation like a dict including keywords, and move the `ontology` parameter to `_onotology`.\n* TagSet: include AttrableMappingMixin to enable attribute access to values when there is no conflict with normal methods.\n* UUID encode/decode support.\n* Honour $TAGSET_EDITOR or $EDITOR as preferred interactive editor for tags.\n* New TagSet.subtags(prefix) to extract a subset of the tags.\n* TagsOntology.value_metadata: new optional convert parameter to override the default \"convert human friendly name\" algorithm, particularly to pass convert=str to things which are already the basic id.\n* Rename TaggedEntity to TagSet.\n* Rename TaggedEntities to TagSets.\n* TagSet: new csvrow and from_csvrow methods imported from obsolete TaggedEntityMixin class.\n* Move BaseTagFile from cs.fstags to TagFile in cs.tagset.\n* TagSet: support access to the tag \"c.x\" via attributes provided there is no \"c\" tag in the way.\n* TagSet.unixtime: implement the autoset-to-now semantics.\n* New as_timestamp(): convert date, datetime, int or float to a UNIX timestamp.\n* Assorted docstring updates and bugfixes.\n\n*Release 20200716*:\n* Update for changed cs.obj.SingletonMixin API.\n* Pull in TaggedEntity from cs.sqltags and add the .csvrow property and the .from_csvrow factory.\n\n*Release 20200521.1*:\nFix DISTINFO.install_requires, drop debug import.\n\n*Release 20200521*:\n* New ValueDetail and KeyValueDetail classes for returning ontology information; TagInfo.detail now returns a ValueDetail for scalar types, a list of ValueDetails for sequence types and a list of KeyValueDetails for mapping types; drop various TagInfo mapping/iterable style methods, too confusing to use.\n* Plumb ontology parameter throughout, always optional.\n* Drop TypedTag, Tags now use ontologies for this.\n* New TagsCommandMixin to support BaseCommands which manipulate Tags.\n* Many improvements and bugfixes.\n\n*Release 20200318*:\n* *Note that the TagsOntology stuff is in flux and totally alpha.*\n* Tag.prefix_name factory returning a new tag if prefix is not empty, ptherwise self.\n* TagSet.update: accept an optional prefix for inserting \"foreign\" tags with a distinguishing name prefix.\n* Tag.as_json: turn sets and tuples into lists for encoding.\n* Backport for Python < 3.7 (no fromisoformat functions).\n* TagSet: drop unused and illplaced .titleify, .episode_title and .title methods.\n* TagSet: remove \"defaults\", unused.\n* Make TagSet a direct subclass of dict, adjust uses of .update etc.\n* New ExtendedNamespace class which is a SimpleNamespace with some inferred attributes and a partial mapping API (keys and __getitem__).\n* New TagSet.ns() returning the Tags as an ExtendedNamespace, which doubles as a mapping for str.format_map; TagSet.format_kwargs is now an alias for this.\n* New Tag.from_string factory to parse a str into a Tag.\n* New TagsOntology and TypedTag classes to provide type and value-detail information; very very alpha and subject to change.\n\n*Release 20200229.1*:\nInitial release: pull TagSet, Tag, TagChoice from cs.fstags for independent use.\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"python3","license":"GNU General Public License v3 or later (GPLv3+)","maintainer":null,"maintainer_email":null,"name":"cs.tagset","package_url":"https://pypi.org/project/cs.tagset/","platform":null,"project_url":"https://pypi.org/project/cs.tagset/","project_urls":{"URL":"https://bitbucket.org/cameron_simpson/css/commits/all"},"provides_extra":null,"release_url":"https://pypi.org/project/cs.tagset/20240422.2/","requires_dist":["cs.cmdutils>=20210404","cs.dateutils>=20230210","cs.deco>=20240412","cs.edit>=20220429","cs.fileutils>=20240316","cs.fs>=20220429","cs.lex>=20240316","cs.logutils>=20230212","cs.mappings>=20231129","cs.obj>=20200716","cs.pfx>=20240412","cs.py3>=20220523","cs.resources>=20240422","cs.threads>=20240422","icontract","typeguard"],"requires_python":null,"summary":"Tags and sets of tags with __format__ support and optional ontology information.","version":"20240422.2","yanked":false,"yanked_reason":null},"last_serial":22872696,"releases":{"20200229.1":[{"comment_text":"","digests":{"blake2b_256":"ae8523c1872c76dceb62b5b50ea0f907b1412e465b6e584d7495b691bcd8194a","md5":"9712b7a37bc14169ea137362825ce19a","sha256":"28f7bb21383e8a26b5f568ab6ba67466b62eaa6b09b39baab700fc853ffe4128"},"downloads":-1,"filename":"cs.tagset-20200229.1.tar.gz","has_sig":false,"md5_digest":"9712b7a37bc14169ea137362825ce19a","packagetype":"sdist","python_version":"source","requires_python":null,"size":5337,"upload_time":"2020-02-29T04:46:50","upload_time_iso_8601":"2020-02-29T04:46:50.220007Z","url":"https://files.pythonhosted.org/packages/ae/85/23c1872c76dceb62b5b50ea0f907b1412e465b6e584d7495b691bcd8194a/cs.tagset-20200229.1.tar.gz","yanked":false,"yanked_reason":null}],"20200318":[{"comment_text":"","digests":{"blake2b_256":"db63d2645b65a42bf62a7341200f887c5b47646727f8b36821778ad1ec676073","md5":"0db5c840cbb226abe45e592b33667f9d","sha256":"4637c6b0198ec60cdcda260beaa541ef7673f4cf982c82e764059024b818a7ab"},"downloads":-1,"filename":"cs.tagset-20200318.tar.gz","has_sig":false,"md5_digest":"0db5c840cbb226abe45e592b33667f9d","packagetype":"sdist","python_version":"source","requires_python":null,"size":10385,"upload_time":"2020-03-17T23:11:36","upload_time_iso_8601":"2020-03-17T23:11:36.925303Z","url":"https://files.pythonhosted.org/packages/db/63/d2645b65a42bf62a7341200f887c5b47646727f8b36821778ad1ec676073/cs.tagset-20200318.tar.gz","yanked":false,"yanked_reason":null}],"20200521":[{"comment_text":"","digests":{"blake2b_256":"050df198bc9e307a4576c12ae8426489a78653f9474f4546c39a12da02fef737","md5":"0bea34fdb3addd8750f6a2767850b2dd","sha256":"0c8d0cc6371dce1a21a3f1f75f0e9812a301f0d3af577d9d146a6fd88245cba0"},"downloads":-1,"filename":"cs.tagset-20200521.tar.gz","has_sig":false,"md5_digest":"0bea34fdb3addd8750f6a2767850b2dd","packagetype":"sdist","python_version":"source","requires_python":null,"size":19055,"upload_time":"2020-05-21T01:58:14","upload_time_iso_8601":"2020-05-21T01:58:14.259783Z","url":"https://files.pythonhosted.org/packages/05/0d/f198bc9e307a4576c12ae8426489a78653f9474f4546c39a12da02fef737/cs.tagset-20200521.tar.gz","yanked":false,"yanked_reason":null}],"20200521.1":[{"comment_text":"","digests":{"blake2b_256":"0455ebf259d8b066e31e253b02d93062aa019e288c2e00c8e47dcdcb54547647","md5":"b5244758c8686010042750c7166ca0f3","sha256":"d5ad960b7c674ac547c0335468917716f0ee1f852718c4c4370998c19014fea5"},"downloads":-1,"filename":"cs.tagset-20200521.1.tar.gz","has_sig":false,"md5_digest":"b5244758c8686010042750c7166ca0f3","packagetype":"sdist","python_version":"source","requires_python":null,"size":19067,"upload_time":"2020-05-21T02:02:02","upload_time_iso_8601":"2020-05-21T02:02:02.538471Z","url":"https://files.pythonhosted.org/packages/04/55/ebf259d8b066e31e253b02d93062aa019e288c2e00c8e47dcdcb54547647/cs.tagset-20200521.1.tar.gz","yanked":false,"yanked_reason":null}],"20200716":[{"comment_text":"","digests":{"blake2b_256":"8c1f26c4cba27bdbe9229164dfabedf35de8a417142e6af2516805ce777add6d","md5":"dcf34d050e789a67f7223219de4bb830","sha256":"d4f06424447f816dff5c2ee676b5eba56f60049e2c162515e20e8c4885c4e19f"},"downloads":-1,"filename":"cs.tagset-20200716.tar.gz","has_sig":false,"md5_digest":"dcf34d050e789a67f7223219de4bb830","packagetype":"sdist","python_version":"source","requires_python":null,"size":20059,"upload_time":"2020-07-16T07:37:23","upload_time_iso_8601":"2020-07-16T07:37:23.435845Z","url":"https://files.pythonhosted.org/packages/8c/1f/26c4cba27bdbe9229164dfabedf35de8a417142e6af2516805ce777add6d/cs.tagset-20200716.tar.gz","yanked":false,"yanked_reason":null}],"20210306":[{"comment_text":"","digests":{"blake2b_256":"c385a53b47c1f8d8ffb255d95506f58fd5f759329ffda770de2996764e1ac575","md5":"635008f5dc7f076afde5c71951f72bf5","sha256":"6ad9b5bd495242340e4a3dfb37f1c5603c7cbf0518d035c083f30a12aa8b323b"},"downloads":-1,"filename":"cs.tagset-20210306.tar.gz","has_sig":false,"md5_digest":"635008f5dc7f076afde5c71951f72bf5","packagetype":"sdist","python_version":"source","requires_python":null,"size":88165,"upload_time":"2021-03-06T00:05:26","upload_time_iso_8601":"2021-03-06T00:05:26.461155Z","url":"https://files.pythonhosted.org/packages/c3/85/a53b47c1f8d8ffb255d95506f58fd5f759329ffda770de2996764e1ac575/cs.tagset-20210306.tar.gz","yanked":false,"yanked_reason":null}],"20210404":[{"comment_text":"","digests":{"blake2b_256":"5985849a4ee9e208591542bcc90cdea618ceecd7d604785ddc964e6f98ddf2a1","md5":"0c494a48af2878549c5914540229fdc4","sha256":"3651c21d5db35cc87b0fe6e5942dd69010775c643ae17015a0c8f6509cefd798"},"downloads":-1,"filename":"cs.tagset-20210404.tar.gz","has_sig":false,"md5_digest":"0c494a48af2878549c5914540229fdc4","packagetype":"sdist","python_version":"source","requires_python":null,"size":86923,"upload_time":"2021-04-03T23:20:43","upload_time_iso_8601":"2021-04-03T23:20:43.343410Z","url":"https://files.pythonhosted.org/packages/59/85/849a4ee9e208591542bcc90cdea618ceecd7d604785ddc964e6f98ddf2a1/cs.tagset-20210404.tar.gz","yanked":false,"yanked_reason":null}],"20210420":[{"comment_text":"","digests":{"blake2b_256":"4a2f2e1a0259879f877009a76a707ef4cf89c3557ec515e88ff7f50ee2f551bf","md5":"0a36d88ff1fbe1718e620dcca208ff74","sha256":"736ae6e9b4716a2ba295475e116f4cbb4b7c94855b95c678608fd87beabcb09d"},"downloads":-1,"filename":"cs.tagset-20210420.tar.gz","has_sig":false,"md5_digest":"0a36d88ff1fbe1718e620dcca208ff74","packagetype":"sdist","python_version":"source","requires_python":null,"size":87498,"upload_time":"2021-04-20T02:04:48","upload_time_iso_8601":"2021-04-20T02:04:48.607046Z","url":"https://files.pythonhosted.org/packages/4a/2f/2e1a0259879f877009a76a707ef4cf89c3557ec515e88ff7f50ee2f551bf/cs.tagset-20210420.tar.gz","yanked":false,"yanked_reason":null}],"20210428":[{"comment_text":"","digests":{"blake2b_256":"b953278145f224d42c6a80dea5c1e27750def97e27a19cff43292bbb31d70a24","md5":"8dfedf7ffac81049fe7c09442b932c19","sha256":"9bcd8d502a989c60150524fc75a9bff11e4e449ddefe46fc59e3c78a17064a0b"},"downloads":-1,"filename":"cs.tagset-20210428.tar.gz","has_sig":false,"md5_digest":"8dfedf7ffac81049fe7c09442b932c19","packagetype":"sdist","python_version":"source","requires_python":null,"size":87770,"upload_time":"2021-04-28T00:20:59","upload_time_iso_8601":"2021-04-28T00:20:59.904331Z","url":"https://files.pythonhosted.org/packages/b9/53/278145f224d42c6a80dea5c1e27750def97e27a19cff43292bbb31d70a24/cs.tagset-20210428.tar.gz","yanked":false,"yanked_reason":null}],"20210906":[{"comment_text":"","digests":{"blake2b_256":"faffefecb5e84075a25c2396d318033a1540a94aed6e9630b4d824536239d9f0","md5":"65ad56be36af7d8ef50b0f1a69b08428","sha256":"f1cbb462a21e730186e912df1559577a1da4447fd41f8891f0cccd5509ce2f91"},"downloads":-1,"filename":"cs.tagset-20210906.tar.gz","has_sig":false,"md5_digest":"65ad56be36af7d8ef50b0f1a69b08428","packagetype":"sdist","python_version":"source","requires_python":null,"size":100310,"upload_time":"2021-09-05T23:27:29","upload_time_iso_8601":"2021-09-05T23:27:29.811956Z","url":"https://files.pythonhosted.org/packages/fa/ff/efecb5e84075a25c2396d318033a1540a94aed6e9630b4d824536239d9f0/cs.tagset-20210906.tar.gz","yanked":false,"yanked_reason":null}],"20210913":[{"comment_text":"","digests":{"blake2b_256":"ef3c7879d5e065fdce630d7f80a9d02da4ccdae0688c32367d490666623adf58","md5":"17472e20a4b29f8103348add194e08a3","sha256":"4fe58cadd45deeb23ddbf6f7acf6c1a601b2dd21ebd64287c71ae894e46eda64"},"downloads":-1,"filename":"cs.tagset-20210913.tar.gz","has_sig":false,"md5_digest":"17472e20a4b29f8103348add194e08a3","packagetype":"sdist","python_version":"source","requires_python":null,"size":100619,"upload_time":"2021-09-13T10:21:33","upload_time_iso_8601":"2021-09-13T10:21:33.137066Z","url":"https://files.pythonhosted.org/packages/ef/3c/7879d5e065fdce630d7f80a9d02da4ccdae0688c32367d490666623adf58/cs.tagset-20210913.tar.gz","yanked":false,"yanked_reason":null}],"20211212":[{"comment_text":"","digests":{"blake2b_256":"c25b913f51df7da1ac88ddabe195304a5c9d358c732be6ccadd8e5d71a37ceee","md5":"e3b43189fca4f2df676834cd24bb0608","sha256":"457f5fe67add9da820a35b971fc4e6195e992954e5789d9a423226e8094ade11"},"downloads":-1,"filename":"cs.tagset-20211212.tar.gz","has_sig":false,"md5_digest":"e3b43189fca4f2df676834cd24bb0608","packagetype":"sdist","python_version":"source","requires_python":null,"size":106369,"upload_time":"2021-12-11T23:24:42","upload_time_iso_8601":"2021-12-11T23:24:42.931966Z","url":"https://files.pythonhosted.org/packages/c2/5b/913f51df7da1ac88ddabe195304a5c9d358c732be6ccadd8e5d71a37ceee/cs.tagset-20211212.tar.gz","yanked":false,"yanked_reason":null}],"20220311":[{"comment_text":"","digests":{"blake2b_256":"24088800600192a18a567249f14f77f281ceb08edd735476c859cf187b2cd645","md5":"96d45f23e1c24ae3481829ac7c2a030a","sha256":"8d46c7d70859bc858be7fb97cb0de99ac02cc4c43397979dbc63a0a0a8bd97bf"},"downloads":-1,"filename":"cs.tagset-20220311.tar.gz","has_sig":false,"md5_digest":"96d45f23e1c24ae3481829ac7c2a030a","packagetype":"sdist","python_version":"source","requires_python":null,"size":105864,"upload_time":"2022-03-11T00:44:55","upload_time_iso_8601":"2022-03-11T00:44:55.112878Z","url":"https://files.pythonhosted.org/packages/24/08/8800600192a18a567249f14f77f281ceb08edd735476c859cf187b2cd645/cs.tagset-20220311.tar.gz","yanked":false,"yanked_reason":null}],"20220430":[{"comment_text":"","digests":{"blake2b_256":"77eff7d8bfd5f55f2e07f29dc327cbb77d8891645dd722fd9d4ee3bc7e6725b9","md5":"ae6f9635dc959385de437b7d88378af4","sha256":"9abc769e9e5bdc204d5955812a4b562694d4afb1e01f58a1e3545b1b5ee0e021"},"downloads":-1,"filename":"cs.tagset-20220430-py3-none-any.whl","has_sig":false,"md5_digest":"ae6f9635dc959385de437b7d88378af4","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":45104,"upload_time":"2022-04-30T03:07:10","upload_time_iso_8601":"2022-04-30T03:07:10.685500Z","url":"https://files.pythonhosted.org/packages/77/ef/f7d8bfd5f55f2e07f29dc327cbb77d8891645dd722fd9d4ee3bc7e6725b9/cs.tagset-20220430-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"2a61e0fb9cba1e0f8fefb3bd16c5a8c6304aa6becaed91b02bb4743d4468b356","md5":"2391c357234c7614a9265f967b92ef93","sha256":"7763d149a7ae29a5e4d1c973c24834d97b41910c11baf8d347223d2a2389eac2"},"downloads":-1,"filename":"cs.tagset-20220430.tar.gz","has_sig":false,"md5_digest":"2391c357234c7614a9265f967b92ef93","packagetype":"sdist","python_version":"source","requires_python":null,"size":78605,"upload_time":"2022-04-30T03:07:13","upload_time_iso_8601":"2022-04-30T03:07:13.582417Z","url":"https://files.pythonhosted.org/packages/2a/61/e0fb9cba1e0f8fefb3bd16c5a8c6304aa6becaed91b02bb4743d4468b356/cs.tagset-20220430.tar.gz","yanked":false,"yanked_reason":null}],"20220606":[{"comment_text":"","digests":{"blake2b_256":"0f453f651e24a9130f8e52317173f6274bdae3d2cfd9c130fa816e259faad9f2","md5":"9683e9b69ef440999e97809752a3499f","sha256":"0482eeee34c28befa67a6486f5e6a6c86613376e5ee9ac2c0ededbee06403ed4"},"downloads":-1,"filename":"cs.tagset-20220606-py3-none-any.whl","has_sig":false,"md5_digest":"9683e9b69ef440999e97809752a3499f","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":45315,"upload_time":"2022-06-05T23:00:44","upload_time_iso_8601":"2022-06-05T23:00:44.644871Z","url":"https://files.pythonhosted.org/packages/0f/45/3f651e24a9130f8e52317173f6274bdae3d2cfd9c130fa816e259faad9f2/cs.tagset-20220606-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"efd0dced2bca8bf5b80b243226327f1bf85ac1c974cc8bfd92f4296e3ef68cb5","md5":"85b8ec406f560e36139481afa1e32e19","sha256":"9b6ccfc0f493f5f9e30972571841b4e4847065c0f4483853e6c3d57f06805aef"},"downloads":-1,"filename":"cs.tagset-20220606.tar.gz","has_sig":false,"md5_digest":"85b8ec406f560e36139481afa1e32e19","packagetype":"sdist","python_version":"source","requires_python":null,"size":79149,"upload_time":"2022-06-05T23:00:48","upload_time_iso_8601":"2022-06-05T23:00:48.119498Z","url":"https://files.pythonhosted.org/packages/ef/d0/dced2bca8bf5b80b243226327f1bf85ac1c974cc8bfd92f4296e3ef68cb5/cs.tagset-20220606.tar.gz","yanked":false,"yanked_reason":null}],"20220806":[{"comment_text":"","digests":{"blake2b_256":"bf4cafb8c8fe4c6c2c1d32fefa2d8adf680a1f30a1bc930ecb3de60b1df2fcec","md5":"aefb116137a947be60f9b7305b2a6f99","sha256":"d470cbacf51c67afbc4073d2040b47b5977f8b1e6f3573912814308c97db860a"},"downloads":-1,"filename":"cs.tagset-20220806-py3-none-any.whl","has_sig":false,"md5_digest":"aefb116137a947be60f9b7305b2a6f99","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":45450,"upload_time":"2022-08-05T22:21:56","upload_time_iso_8601":"2022-08-05T22:21:56.311303Z","url":"https://files.pythonhosted.org/packages/bf/4c/afb8c8fe4c6c2c1d32fefa2d8adf680a1f30a1bc930ecb3de60b1df2fcec/cs.tagset-20220806-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f0b2956617ca07e37537420555445e8df58f94d1a4f1ad0a6d09980e7f6c19c3","md5":"1b3f92cec5a63e6644b5f41af7170840","sha256":"627a08fec9945abdf0449e80f100a60cce9d076b4e202d91c856c6e7574d4da6"},"downloads":-1,"filename":"cs.tagset-20220806.tar.gz","has_sig":false,"md5_digest":"1b3f92cec5a63e6644b5f41af7170840","packagetype":"sdist","python_version":"source","requires_python":null,"size":79438,"upload_time":"2022-08-05T22:21:58","upload_time_iso_8601":"2022-08-05T22:21:58.444898Z","url":"https://files.pythonhosted.org/packages/f0/b2/956617ca07e37537420555445e8df58f94d1a4f1ad0a6d09980e7f6c19c3/cs.tagset-20220806.tar.gz","yanked":false,"yanked_reason":null}],"20221228":[{"comment_text":"","digests":{"blake2b_256":"e47f6bfd35c2c040b33fd1dd545820cfd56723899c2b6c8e8d5eed18e5439998","md5":"b749a03589078c1eb6766eb606444c58","sha256":"3dfd427f4d7b988213f33783ed2be5a736a3c3c1f5ceac04ec82a75ba4c11f07"},"downloads":-1,"filename":"cs.tagset-20221228-py3-none-any.whl","has_sig":false,"md5_digest":"b749a03589078c1eb6766eb606444c58","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":45625,"upload_time":"2022-12-27T23:52:47","upload_time_iso_8601":"2022-12-27T23:52:47.152418Z","url":"https://files.pythonhosted.org/packages/e4/7f/6bfd35c2c040b33fd1dd545820cfd56723899c2b6c8e8d5eed18e5439998/cs.tagset-20221228-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"a029225ccb6a33aa26ec2945a1acedece7eb5e8e1a7b4c09fc9b4a98f6f68295","md5":"d52478c555d386b4f53cc617f66e8a3b","sha256":"373f67b775a73743af919cc18e4c01a0d3b06b7c9e06f88d696e910a47a00fa0"},"downloads":-1,"filename":"cs.tagset-20221228.tar.gz","has_sig":false,"md5_digest":"d52478c555d386b4f53cc617f66e8a3b","packagetype":"sdist","python_version":"source","requires_python":null,"size":80153,"upload_time":"2022-12-27T23:52:49","upload_time_iso_8601":"2022-12-27T23:52:49.486102Z","url":"https://files.pythonhosted.org/packages/a0/29/225ccb6a33aa26ec2945a1acedece7eb5e8e1a7b4c09fc9b4a98f6f68295/cs.tagset-20221228.tar.gz","yanked":false,"yanked_reason":null}],"20230126":[{"comment_text":"","digests":{"blake2b_256":"3a0c9adeed8af0be6778d3bb4994cec499d4308e6d4487f41fbe19fd8272937f","md5":"2ceabe5ed8b790cd140a4d3c8522c3a7","sha256":"760126aa1b7aff06777669c61c37ed925dfb3b4d6d0b4ab8a1b840a815b74984"},"downloads":-1,"filename":"cs.tagset-20230126-py3-none-any.whl","has_sig":false,"md5_digest":"2ceabe5ed8b790cd140a4d3c8522c3a7","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":45848,"upload_time":"2023-01-26T02:42:27","upload_time_iso_8601":"2023-01-26T02:42:27.157529Z","url":"https://files.pythonhosted.org/packages/3a/0c/9adeed8af0be6778d3bb4994cec499d4308e6d4487f41fbe19fd8272937f/cs.tagset-20230126-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"704e6d0040bc0598a7b3f8be920cb44e87e31e4ebe4121633f7f796612173e04","md5":"0d31ea5e1bed0644c1a66215f9824b6a","sha256":"fe2234f36c120cd01279f6d6b780b9c1c5b86edc68756704c40b27949cbe452a"},"downloads":-1,"filename":"cs.tagset-20230126.tar.gz","has_sig":false,"md5_digest":"0d31ea5e1bed0644c1a66215f9824b6a","packagetype":"sdist","python_version":"source","requires_python":null,"size":80737,"upload_time":"2023-01-26T02:42:29","upload_time_iso_8601":"2023-01-26T02:42:29.606858Z","url":"https://files.pythonhosted.org/packages/70/4e/6d0040bc0598a7b3f8be920cb44e87e31e4ebe4121633f7f796612173e04/cs.tagset-20230126.tar.gz","yanked":false,"yanked_reason":null}],"20230210":[{"comment_text":"","digests":{"blake2b_256":"2326aefd987c24f4ff79028e5af4ea36bfb6f97f201310686f562d07a605c090","md5":"f43921408aff2f9759539ee7fabecdeb","sha256":"34dbb5dc99aeeb97b9f124fe7e32eb8692f323215041156169ed235d94fbf8e1"},"downloads":-1,"filename":"cs.tagset-20230210-py3-none-any.whl","has_sig":false,"md5_digest":"f43921408aff2f9759539ee7fabecdeb","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":46398,"upload_time":"2023-02-10T01:45:59","upload_time_iso_8601":"2023-02-10T01:45:59.824641Z","url":"https://files.pythonhosted.org/packages/23/26/aefd987c24f4ff79028e5af4ea36bfb6f97f201310686f562d07a605c090/cs.tagset-20230210-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"231621a2f41a03160e80d5f61584be694595ede0c0fdd9e521d6af48e324e497","md5":"cee45cf9fb75173748b5d1fa3e5c16e2","sha256":"45b760755ed8bc9ef025871af570759d95e249015a6145be50a3cc50c08e8621"},"downloads":-1,"filename":"cs.tagset-20230210.tar.gz","has_sig":false,"md5_digest":"cee45cf9fb75173748b5d1fa3e5c16e2","packagetype":"sdist","python_version":"source","requires_python":null,"size":81657,"upload_time":"2023-02-10T01:46:04","upload_time_iso_8601":"2023-02-10T01:46:04.091899Z","url":"https://files.pythonhosted.org/packages/23/16/21a2f41a03160e80d5f61584be694595ede0c0fdd9e521d6af48e324e497/cs.tagset-20230210.tar.gz","yanked":false,"yanked_reason":null}],"20230212":[{"comment_text":"","digests":{"blake2b_256":"7aa9464a17e6142e0b6b9c7fca61b4268e9d17e816dd5698c71185af7bee14e6","md5":"f54934a93bf05a4d53917fccbc4ac308","sha256":"ad1fd59119a36a91cc224059d23421d554f852006e9920676c6a62abf2db9d9f"},"downloads":-1,"filename":"cs.tagset-20230212-py3-none-any.whl","has_sig":false,"md5_digest":"f54934a93bf05a4d53917fccbc4ac308","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":46477,"upload_time":"2023-02-12T04:01:21","upload_time_iso_8601":"2023-02-12T04:01:21.655931Z","url":"https://files.pythonhosted.org/packages/7a/a9/464a17e6142e0b6b9c7fca61b4268e9d17e816dd5698c71185af7bee14e6/cs.tagset-20230212-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b4de5981fef607d2a11f6a5bf501338aca81f4c77b426f1de39dee6c9d5889d8","md5":"05167226aa1f0bd265ec0a01ad8537fa","sha256":"354f62dd0d2212db515892dea3ab25ec11e13e33f1dcda7be9cc9539d3e84b67"},"downloads":-1,"filename":"cs.tagset-20230212.tar.gz","has_sig":false,"md5_digest":"05167226aa1f0bd265ec0a01ad8537fa","packagetype":"sdist","python_version":"source","requires_python":null,"size":81850,"upload_time":"2023-02-12T04:01:23","upload_time_iso_8601":"2023-02-12T04:01:23.968571Z","url":"https://files.pythonhosted.org/packages/b4/de/5981fef607d2a11f6a5bf501338aca81f4c77b426f1de39dee6c9d5889d8/cs.tagset-20230212.tar.gz","yanked":false,"yanked_reason":null}],"20230407":[{"comment_text":"","digests":{"blake2b_256":"bb24639aa5caaa54824ebb65b2a858295d0cb37c97d1281411c15863512afb28","md5":"d7d5fdae5c243c988bb7334d4dd13c70","sha256":"8ac413af6f16e495dc3be97b522cb4c15a8f911a665a3a779b3bbbf839f81db5"},"downloads":-1,"filename":"cs.tagset-20230407-py3-none-any.whl","has_sig":false,"md5_digest":"d7d5fdae5c243c988bb7334d4dd13c70","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":46625,"upload_time":"2023-04-07T00:06:41","upload_time_iso_8601":"2023-04-07T00:06:41.456369Z","url":"https://files.pythonhosted.org/packages/bb/24/639aa5caaa54824ebb65b2a858295d0cb37c97d1281411c15863512afb28/cs.tagset-20230407-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"037e746b1a97b8437b406ab366cdfc753cd9f88ba150679afdd6561a4e2f4993","md5":"16fb2ca91d764ed3211f536682bea34a","sha256":"ceb2ffc8e3e08c0b92acdaf774dcb05f8ff023ebef62ebc49e33111972a3ce9f"},"downloads":-1,"filename":"cs.tagset-20230407.tar.gz","has_sig":false,"md5_digest":"16fb2ca91d764ed3211f536682bea34a","packagetype":"sdist","python_version":"source","requires_python":null,"size":82263,"upload_time":"2023-04-07T00:06:43","upload_time_iso_8601":"2023-04-07T00:06:43.886542Z","url":"https://files.pythonhosted.org/packages/03/7e/746b1a97b8437b406ab366cdfc753cd9f88ba150679afdd6561a4e2f4993/cs.tagset-20230407.tar.gz","yanked":false,"yanked_reason":null}],"20230612":[{"comment_text":"","digests":{"blake2b_256":"aed1cc963128955d17ab949bd255b22450c52c1d631e0c27368df02bd50dd850","md5":"61900e09a3a3b8dba46ea12eed08d254","sha256":"0fe198349f75f9c1be8c33cea1f1979bde21bd11254410cbbf057806ddab8022"},"downloads":-1,"filename":"cs.tagset-20230612-py3-none-any.whl","has_sig":false,"md5_digest":"61900e09a3a3b8dba46ea12eed08d254","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":46759,"upload_time":"2023-06-12T04:26:34","upload_time_iso_8601":"2023-06-12T04:26:34.784290Z","url":"https://files.pythonhosted.org/packages/ae/d1/cc963128955d17ab949bd255b22450c52c1d631e0c27368df02bd50dd850/cs.tagset-20230612-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"36ac89ca76be76f37e973d92ac46ece1cd009f71f66570b19ca4fbba73d0a136","md5":"e40365eca733c9845e8e3931ea30cca9","sha256":"d2de5c68e911fef2afc2b5f4e1e4f0b5c8759be3e17825caaba0908a39aae341"},"downloads":-1,"filename":"cs.tagset-20230612.tar.gz","has_sig":false,"md5_digest":"e40365eca733c9845e8e3931ea30cca9","packagetype":"sdist","python_version":"source","requires_python":null,"size":85031,"upload_time":"2023-06-12T04:26:37","upload_time_iso_8601":"2023-06-12T04:26:37.418635Z","url":"https://files.pythonhosted.org/packages/36/ac/89ca76be76f37e973d92ac46ece1cd009f71f66570b19ca4fbba73d0a136/cs.tagset-20230612.tar.gz","yanked":false,"yanked_reason":null}],"20231129":[{"comment_text":"","digests":{"blake2b_256":"ef148d13a8ac1ec05631a04f08687156988f6fbbfc9b5baac2e179147f5aaeda","md5":"34fa3e75ec2ad87c3b544f87ac3d58db","sha256":"597fc8649515daf53d3b519f1f7d6ef1ce7524b343c8b8f35aca6ea163779b1d"},"downloads":-1,"filename":"cs.tagset-20231129-py3-none-any.whl","has_sig":false,"md5_digest":"34fa3e75ec2ad87c3b544f87ac3d58db","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":47200,"upload_time":"2023-11-29T10:44:45","upload_time_iso_8601":"2023-11-29T10:44:45.067700Z","url":"https://files.pythonhosted.org/packages/ef/14/8d13a8ac1ec05631a04f08687156988f6fbbfc9b5baac2e179147f5aaeda/cs.tagset-20231129-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"5871111b57f316a6037977f9c720f196f3a6e319943141c66f1e3aad0e05ea2f","md5":"6c4a6f8fd647c6af6ec60ef2f7f72476","sha256":"ea7efb5109d53a4fe43197ac395679ec713bd7e7dfb88739ee61958ab0a2ab3c"},"downloads":-1,"filename":"cs.tagset-20231129.tar.gz","has_sig":false,"md5_digest":"6c4a6f8fd647c6af6ec60ef2f7f72476","packagetype":"sdist","python_version":"source","requires_python":null,"size":86002,"upload_time":"2023-11-29T10:44:47","upload_time_iso_8601":"2023-11-29T10:44:47.946274Z","url":"https://files.pythonhosted.org/packages/58/71/111b57f316a6037977f9c720f196f3a6e319943141c66f1e3aad0e05ea2f/cs.tagset-20231129.tar.gz","yanked":false,"yanked_reason":null}],"20240201":[{"comment_text":"","digests":{"blake2b_256":"a4b76e2fd997e8d1d59b657fc27980f5d6712a36a51f421b8652fb0fa6a1534c","md5":"c25f7596850d79387a70360331d6db5f","sha256":"d1362c4c391d02879eb376b148b0354be4f73c5095c2295cad26892d593324a8"},"downloads":-1,"filename":"cs.tagset-20240201-py3-none-any.whl","has_sig":false,"md5_digest":"c25f7596850d79387a70360331d6db5f","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":47216,"upload_time":"2024-02-01T00:04:00","upload_time_iso_8601":"2024-02-01T00:04:00.247647Z","url":"https://files.pythonhosted.org/packages/a4/b7/6e2fd997e8d1d59b657fc27980f5d6712a36a51f421b8652fb0fa6a1534c/cs.tagset-20240201-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"aac96db943fd2161af33886601aea7f5fcb9b7527f388d2f9160c2d2b8e292cd","md5":"d1b2122c4a55c4e7d655c0e97acd0850","sha256":"508604ca5e64c7a7377f72612ddf1c6b7aff45dd35d14beb3c69a47fc23aa912"},"downloads":-1,"filename":"cs.tagset-20240201.tar.gz","has_sig":false,"md5_digest":"d1b2122c4a55c4e7d655c0e97acd0850","packagetype":"sdist","python_version":"source","requires_python":null,"size":86211,"upload_time":"2024-02-01T00:04:03","upload_time_iso_8601":"2024-02-01T00:04:03.315083Z","url":"https://files.pythonhosted.org/packages/aa/c9/6db943fd2161af33886601aea7f5fcb9b7527f388d2f9160c2d2b8e292cd/cs.tagset-20240201.tar.gz","yanked":false,"yanked_reason":null}],"20240211":[{"comment_text":"","digests":{"blake2b_256":"4f679d863e98194d6f9ffe3ea526e1ad0e4b5f418c5ba523948caee55e0d0c45","md5":"275574627ab5df3f272d6e525ac0d3a4","sha256":"ddcbd34ca9912642c2cfd57c08bfbf8c3d2013f0f2b7bf439aa4338aa1cd5638"},"downloads":-1,"filename":"cs.tagset-20240211-py3-none-any.whl","has_sig":false,"md5_digest":"275574627ab5df3f272d6e525ac0d3a4","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":47403,"upload_time":"2024-02-11T04:45:08","upload_time_iso_8601":"2024-02-11T04:45:08.393999Z","url":"https://files.pythonhosted.org/packages/4f/67/9d863e98194d6f9ffe3ea526e1ad0e4b5f418c5ba523948caee55e0d0c45/cs.tagset-20240211-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"8805fe49b584685b1ccebcce93c77a260e62a756421b224708f501fb3ce5442e","md5":"ef7cfe74c0af5213fc1d37b2e622048d","sha256":"2e0d777c25ee28a770462b4d370c6ffcd7fab4a996276c9f22f8a0670d9f3e16"},"downloads":-1,"filename":"cs.tagset-20240211.tar.gz","has_sig":false,"md5_digest":"ef7cfe74c0af5213fc1d37b2e622048d","packagetype":"sdist","python_version":"source","requires_python":null,"size":86053,"upload_time":"2024-02-11T04:45:11","upload_time_iso_8601":"2024-02-11T04:45:11.697378Z","url":"https://files.pythonhosted.org/packages/88/05/fe49b584685b1ccebcce93c77a260e62a756421b224708f501fb3ce5442e/cs.tagset-20240211.tar.gz","yanked":false,"yanked_reason":null}],"20240305":[{"comment_text":"","digests":{"blake2b_256":"121225137e0536247ca478537d22b74f44faaef4c10853aaa5abbfe5840026fd","md5":"4013d125e3671ab5ca49d15c03c34d3b","sha256":"0f6542196b0fa39174989c3df51b0448fbac23add76ee95edd4f4000c1d56711"},"downloads":-1,"filename":"cs.tagset-20240305-py3-none-any.whl","has_sig":false,"md5_digest":"4013d125e3671ab5ca49d15c03c34d3b","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":47427,"upload_time":"2024-03-04T22:11:30","upload_time_iso_8601":"2024-03-04T22:11:30.199824Z","url":"https://files.pythonhosted.org/packages/12/12/25137e0536247ca478537d22b74f44faaef4c10853aaa5abbfe5840026fd/cs.tagset-20240305-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"884e320cee7f8b2e3e4c5bc0dc4fe99fc09e18b93ea5509cec4fa5d9b6b6934c","md5":"fb24396906c442ba83f74db5f1b29da4","sha256":"1b2506d94e6f0dfca87941ea2a3138991631a3254d470e3aed6d76721209b110"},"downloads":-1,"filename":"cs.tagset-20240305.tar.gz","has_sig":false,"md5_digest":"fb24396906c442ba83f74db5f1b29da4","packagetype":"sdist","python_version":"source","requires_python":null,"size":86430,"upload_time":"2024-03-04T22:11:32","upload_time_iso_8601":"2024-03-04T22:11:32.874237Z","url":"https://files.pythonhosted.org/packages/88/4e/320cee7f8b2e3e4c5bc0dc4fe99fc09e18b93ea5509cec4fa5d9b6b6934c/cs.tagset-20240305.tar.gz","yanked":false,"yanked_reason":null}],"20240316":[{"comment_text":"","digests":{"blake2b_256":"bf367d0e06cd76adb61bbce9ed74e335dff2e550cdbff40a765630f38a5dbcc7","md5":"c7923d7954b09d61fe5c7374d91c9b97","sha256":"2aa9eb5898d7f4d0a2ef1a7653f5add0a2d2c8c14e124b0e23290685d6be7d1d"},"downloads":-1,"filename":"cs.tagset-20240316-py3-none-any.whl","has_sig":false,"md5_digest":"c7923d7954b09d61fe5c7374d91c9b97","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":47431,"upload_time":"2024-03-16T06:06:02","upload_time_iso_8601":"2024-03-16T06:06:02.347510Z","url":"https://files.pythonhosted.org/packages/bf/36/7d0e06cd76adb61bbce9ed74e335dff2e550cdbff40a765630f38a5dbcc7/cs.tagset-20240316-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3919ee200c5a35e6384e35e9cb2d0874914143760f0022aa0520ca46abf92581","md5":"31d7d824672cac5bd9d9a74d2878859d","sha256":"8e769140852e181eab3e75779b9911e84ee176fa3ffddd25e2f3b396b4f5e35b"},"downloads":-1,"filename":"cs.tagset-20240316.tar.gz","has_sig":false,"md5_digest":"31d7d824672cac5bd9d9a74d2878859d","packagetype":"sdist","python_version":"source","requires_python":null,"size":86309,"upload_time":"2024-03-16T06:06:05","upload_time_iso_8601":"2024-03-16T06:06:05.036652Z","url":"https://files.pythonhosted.org/packages/39/19/ee200c5a35e6384e35e9cb2d0874914143760f0022aa0520ca46abf92581/cs.tagset-20240316.tar.gz","yanked":false,"yanked_reason":null}],"20240422":[{"comment_text":"","digests":{"blake2b_256":"923f77b3ea615d1af07de11e3fc952cf5c660a06f849634242b3a3b7dc0356bd","md5":"ed380e4aca7c36f4733cde8a2390fbf8","sha256":"c607b685f14d56bfb8c972655587475b26acfdcb0c4aeef288540b9e748c794e"},"downloads":-1,"filename":"cs.tagset-20240422-py3-none-any.whl","has_sig":false,"md5_digest":"ed380e4aca7c36f4733cde8a2390fbf8","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":57583,"upload_time":"2024-04-22T03:00:38","upload_time_iso_8601":"2024-04-22T03:00:38.575815Z","url":"https://files.pythonhosted.org/packages/92/3f/77b3ea615d1af07de11e3fc952cf5c660a06f849634242b3a3b7dc0356bd/cs.tagset-20240422-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"03a3adeb9f961764a5a64589e00c13919611b427168e3386e748e2cae5960e8b","md5":"e572f7992cdb225d014e1a1429854284","sha256":"f63a75bd16dd530e5484e843fc68631468a1d3cef618efa71a8828d8a7ff54a1"},"downloads":-1,"filename":"cs.tagset-20240422.tar.gz","has_sig":false,"md5_digest":"e572f7992cdb225d014e1a1429854284","packagetype":"sdist","python_version":"source","requires_python":null,"size":116274,"upload_time":"2024-04-22T03:00:41","upload_time_iso_8601":"2024-04-22T03:00:41.373693Z","url":"https://files.pythonhosted.org/packages/03/a3/adeb9f961764a5a64589e00c13919611b427168e3386e748e2cae5960e8b/cs.tagset-20240422.tar.gz","yanked":false,"yanked_reason":null}],"20240422.1":[{"comment_text":"","digests":{"blake2b_256":"16c68ed03491f6a0a1d39d699c8d9c1dd9d5a0ea0db88a13b679081ad3ae5d25","md5":"8e59e96622db027fbc4c7dda894cf0ea","sha256":"64416a8489dabb29d255aaf1dcf7005fc5583d1b39754dad261e20a2263a5346"},"downloads":-1,"filename":"cs.tagset-20240422.1-py3-none-any.whl","has_sig":false,"md5_digest":"8e59e96622db027fbc4c7dda894cf0ea","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":57549,"upload_time":"2024-04-22T04:37:51","upload_time_iso_8601":"2024-04-22T04:37:51.286244Z","url":"https://files.pythonhosted.org/packages/16/c6/8ed03491f6a0a1d39d699c8d9c1dd9d5a0ea0db88a13b679081ad3ae5d25/cs.tagset-20240422.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"9676a079b5d67515e72033a3623e68720622a9ea798ae76181283e334cafdd07","md5":"e8b15dd65f6a8c51db24b1855ad1c5aa","sha256":"de41d7ce88e551eda01d1c945a4f7e382d7b0bc1b0c10f36f66d3de2f2fb87df"},"downloads":-1,"filename":"cs.tagset-20240422.1.tar.gz","has_sig":false,"md5_digest":"e8b15dd65f6a8c51db24b1855ad1c5aa","packagetype":"sdist","python_version":"source","requires_python":null,"size":116176,"upload_time":"2024-04-22T04:37:54","upload_time_iso_8601":"2024-04-22T04:37:54.040606Z","url":"https://files.pythonhosted.org/packages/96/76/a079b5d67515e72033a3623e68720622a9ea798ae76181283e334cafdd07/cs.tagset-20240422.1.tar.gz","yanked":false,"yanked_reason":null}],"20240422.2":[{"comment_text":"","digests":{"blake2b_256":"920ff881013cb1a513e6239778181d362272d5057c87cd34544b2fad64002d62","md5":"8e93dcdf7997264b8e7001bce8d0a665","sha256":"acc50d9ad2e926c5ad1b83020132344a7f4f6a8d9cb58c1390fe3fd418786015"},"downloads":-1,"filename":"cs.tagset-20240422.2-py3-none-any.whl","has_sig":false,"md5_digest":"8e93dcdf7997264b8e7001bce8d0a665","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":57580,"upload_time":"2024-04-22T06:32:51","upload_time_iso_8601":"2024-04-22T06:32:51.016237Z","url":"https://files.pythonhosted.org/packages/92/0f/f881013cb1a513e6239778181d362272d5057c87cd34544b2fad64002d62/cs.tagset-20240422.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c202f914b20001439c86522dca27f36ec66195aa4d729f92d5399afc10787479","md5":"94e64aa4cf8d3bd578e1eb4b70cb3a19","sha256":"422fa18ebed6693923d2921842edb0dbc1bc3c5d6d467990a1ac574a64dc7f68"},"downloads":-1,"filename":"cs.tagset-20240422.2.tar.gz","has_sig":false,"md5_digest":"94e64aa4cf8d3bd578e1eb4b70cb3a19","packagetype":"sdist","python_version":"source","requires_python":null,"size":116356,"upload_time":"2024-04-22T06:32:54","upload_time_iso_8601":"2024-04-22T06:32:54.261348Z","url":"https://files.pythonhosted.org/packages/c2/02/f914b20001439c86522dca27f36ec66195aa4d729f92d5399afc10787479/cs.tagset-20240422.2.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"920ff881013cb1a513e6239778181d362272d5057c87cd34544b2fad64002d62","md5":"8e93dcdf7997264b8e7001bce8d0a665","sha256":"acc50d9ad2e926c5ad1b83020132344a7f4f6a8d9cb58c1390fe3fd418786015"},"downloads":-1,"filename":"cs.tagset-20240422.2-py3-none-any.whl","has_sig":false,"md5_digest":"8e93dcdf7997264b8e7001bce8d0a665","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":57580,"upload_time":"2024-04-22T06:32:51","upload_time_iso_8601":"2024-04-22T06:32:51.016237Z","url":"https://files.pythonhosted.org/packages/92/0f/f881013cb1a513e6239778181d362272d5057c87cd34544b2fad64002d62/cs.tagset-20240422.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c202f914b20001439c86522dca27f36ec66195aa4d729f92d5399afc10787479","md5":"94e64aa4cf8d3bd578e1eb4b70cb3a19","sha256":"422fa18ebed6693923d2921842edb0dbc1bc3c5d6d467990a1ac574a64dc7f68"},"downloads":-1,"filename":"cs.tagset-20240422.2.tar.gz","has_sig":false,"md5_digest":"94e64aa4cf8d3bd578e1eb4b70cb3a19","packagetype":"sdist","python_version":"source","requires_python":null,"size":116356,"upload_time":"2024-04-22T06:32:54","upload_time_iso_8601":"2024-04-22T06:32:54.261348Z","url":"https://files.pythonhosted.org/packages/c2/02/f914b20001439c86522dca27f36ec66195aa4d729f92d5399afc10787479/cs.tagset-20240422.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
