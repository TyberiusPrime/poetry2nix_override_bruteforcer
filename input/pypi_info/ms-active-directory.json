{"info":{"author":"Azaria Zornberg","author_email":"a.zornberg96@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Intended Audience :: Developers","Intended Audience :: Information Technology","Intended Audience :: System Administrators","License :: OSI Approved :: MIT License","Operating System :: MacOS :: MacOS X","Operating System :: Microsoft :: Windows","Operating System :: POSIX :: Linux","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Security","Topic :: Software Development :: Libraries :: Python Modules","Topic :: System :: Systems Administration :: Authentication/Directory :: LDAP"],"description":"# ms_active_directory - A Library for Integrating with Microsoft Active Directory\nThis is a library for integrating with Microsoft Active Directory domains.\n\nIt supports a variety of common, critical functionality for integration of computers\ninto a domain, including the ability to discover domain resources, optimize\ncommunication for speed, join a computer to the domain, and look up information\nabout users and groups in the domain.\n\nIt primarily builds on the LDAP protocol, and supports LDAP over TLS with channel bindings,\nand all LDAP basic, NTLM, and SASL authentication mechanisms (e.g. Kerberos) supported by the\n`ldap3` python library.\n\nFor more detailed documentation, please see the docs at:\\\n**https://ms-active-directory.readthedocs.io/**\n\n**Author**: Azaria Zornberg\n\\\n**Email**: a.zornberg96@gmail.com\n\n# Key Features\n1. Joining a computer to a domain, either by creating a new computer account or taking over an existing\n   account.\n2. Discovering domain resources and properties, optimizing domain communication for the network\n3. Discovering trusted domains, including MIT Kerberos domains and trusted Active Directory domains, and their\n   attributes (e.g. are the trusts transitive? is SID filtering used? what direction is the trust?)\n4. Transferring authenticated sessions from one domain to its trusted domains, allowing for easy querying\n   capability across domains for widely trusted users. This can be used to trace foreign security principals\n   across domains without needing to spin up and manage new domain objects for each.\n5. Finding users, computers, and groups based on a variety of properties (e.g. name, SID, user-specified properties)\n6. Querying information about users, computers, groups, and generic objects\n7. Looking up user, computer, and group memberships\n8. Looking up members of groups, regardless of type, and their attributes. This can also be done with auto-recursion\n   for nested groups.\n9. Adding and removing users, computers, and groups to and from other groups\n10. Account management functionality for both users and computers, such as password changes/resets, enabling, disabling, and unlocking accounts\n11. Looking up information about the permissions set on a user, computer, group, or generic object\n12. Adding permissions to the security descriptor for a user, computer, group, or generic object\n13. Support for creating users and groups\n14. Support for updating attributes of users, computers, groups, and generic objects. Support exists for atomically appending \n    or overwriting values.\n15. Support for finding policies within a domain, and for finding the policies directly attached to any given object.\n\n\n# Examples\n\n## Discovering a domain\n\nThe library supports discovering LDAP and Kerberos servers within a domain using special DNS\nentries defined for Active Directory.\n\n### Smart Defaults\nBy default, it will use the system DNS configuration, find LDAP servers that support TLS, and sort\nLDAP and Kerberos servers by the RTT to communicate with them.\n```\nfrom ms_active_directory import ADDomain\n\nexample_domain_dns_name = 'example.com'\ndomain = ADDomain(example_domain_dns_name)\nldap_servers = domain.get_ldap_uris()\nkerberos_servers = domain.get_kerberos_uris()\n\n# re-discover servers in dns and sort them by RTT again at a later time to pick up changes\ndomain.refresh_ldap_server_discovery()\ndomain.refresh_kerberos_server_discovery()\n```\n\n\n### Site Awareness and Flexible DNS\nThe library also supports site awareness, which will result in only discovering servers within a specified\nActive Directory Site. You can also specify alternative DNS nameservers to use instead of the system ones.\n```\nfrom ms_active_directory import ADDomain\n\nexample_domain_dns_name = 'example.com'\nsite_name = 'us-eastern-datacenter'\ndomain = ADDomain(example_domain_dns_name, site=site_name,\n                  dns_nameservers=['eastern-private-dns-01.local'])\n```\n\n### Network Multi-Tenancy and Security Support\nYou can also specify exactly which LDAP or Kerberos servers should be used, and skip discovery.\nAdditional configurations are available such as configuring the CA file path to use for\ntrust, and the source IP to use for outbound traffic to the domain, which is helpful when\nthere are firewall rules in place, or when a machine has both private and public IP addresses.\n```\nfrom ms_active_directory import ADDomain\n\nexample_domain_dns_name = 'example.com'\nlocal_machine_ip = '10.251.12.1'\nlocal_ldap_ip = '10.251.12.30'\npublic_machine_ip = '194.32.21.30'\n# the servers that live on the public internet use well-known public\n# CAs for trust, but we have a local CA for the private network servers\nprivate_securing_cas = '/etc/internal-ca.cert'\n\n# set up an object for the local domain in the same network as this machine,\n# but also have an instance that can be used to make instances to reach out\n# to the rest of the domain outside of the local private network\nlocal_domain = ADDomain(example_domain_dns_name, ldap_servers_or_uris=[local_ldap_ip],\n                        source_ip=local_ldap_ip, ca_certificates_file_path=private_securing_cas)\nglobal_domain = ADDomain(example_domain_dns_name, source_ip=public_machine_ip)\n```\n\n## Establishing a session with a domain\n\nYou can establish a session with the AD Domain on behalf of either a user or computer.\n\nBroadly, any keyword arguments that would normally be supported when creating a `Connection`\nwith the `ldap3` library are supported when creating a session, allowing\nfor flexibility while still providing an \"it just works\" option for\nmost users.\n\n### Support for Computer Authentication\nComputers default to using Kerberos SASL authentication, as SIMPLE authentication is\nnot support for computers with Active Directory.\nTo use kerberos, either `gssapi` or `winkerberos` must be\ninstalled.\n```\nfrom ms_active_directory import ADDomain\ndomain = ADDomain('example.com')\n\n# when using kerberos auth, the default is to use the kerberos\n# credential cache on the machine, so no password is needed\ncomputer_name = 'machine01'\nsession1 = domain.create_session_as_computer(computer_name)\n\n# but you can pass sasl credentials, and if you use gssapi you can\n# specify a username and password\n# see the ldap3 documentation for details on SASL credentials and other\n# connection options\nother_name = 'other-machine-identity'\npassword = 'password01'\nsession2 = domain.create_session_as_computer(other_name, sasl_credentials=('', other_name, password))\n```\n\nYou can also use other authentication mechanisms like NTLM.\n``` \nfrom ldap3 import NTLM\nfrom ms_active_directory import ADDomain\ndomain = ADDomain('example.com')\n\nntlm_name = 'EXAMPLE.COM\\\\computer01'\npassword = 'password1'\nsession = domain.create_session_as_computer(ntlm_name, password, authentication_mechanism=NTLM)\n```\n\n### Support for User Authentication\n\nYou can authenticate as a user by using simple binds, or by using SASL\nmechanisms or NTLM as computers do.\nThe default for users is simple binds.\n```\nfrom ldap3 import NTLM\nfrom ms_active_directory import ADDomain\ndomain = ADDomain('example.com')\n\nsession = domain.create_session_as_user('username@example.com', 'password')\nntlm_session =  domain.create_session_as_user('username@example.com', 'password',\n                                              authentication_mechanism=NTLM)\n```\n\n## Discovering additional domain resources\n\nThe library supports discovering a wide variety of information about the domain beyond\nthe basics needed to communicate with it. This discovery doesn't require you to know any\nniche information about Active Directory.\n\nDiscoverable resources include but are not limited to:\n- Supported SASL mechanisms, which is important for authentication\n- The current domain time, which is important for NTP synchronization\n- Domain Functional Level, which governs things like support encryption types\n- DNS servers\n- Issuing certificates for CAs in the domain\n\n### Finding supported SASL mechanisms\nDiscovering SASL mechanisms can be done without needing to create a session\nwith a domain, as it's needed before authentication in many cases.\n```\nfrom ms_active_directory import ADDomain\ndomain = ADDomain('example.com') \n\n# might print \"['EXTERNAL', 'DIGEST-MD5']\"\nprint(domain.find_supported_sasl_mechanisms())\n```\n\n### Finding the current domain time\nDiscovering the domain time can be done without needing to create a session\nwith a domain, as time synchronization is necessary for kerberos authentication\nto succeed and can impact TLS negotiation as well.\n```\nfrom ms_active_directory import ADDomain\ndomain = ADDomain('example.com') \n\n# returns a python datetime object in utc time\ncurr_time = domain.find_current_time()\n\n# allowed drift defaults to 5 minutes which is the kerberos standard,\n# but we can use a shorter window to detect drift before it causes an\n# outage. this returns a boolean\nsynced = domain.is_close_in_time_to_localhost(allowed_drift_seconds=60)\n```\n\n### Finding the domain functional level\nDiscovering the domain time can be done without needing to create a session\nwith a domain, as it can inform us as to what encryption types and TLS versions/ciphers\nwill be supported by the domain.\n```\nfrom ms_active_directory import ADDomain\ndomain = ADDomain('example.com') \n\n# find_functional_level returns an enum indicating the level.\n# decision making based on level should be done based on the\n# needs of your application\nprint(domain.find_functional_level())\n```\n\n### Finding DNS servers\nDiscovering DNS servers requires an authenticated session with the domain,\nas searching the records within the domain for computers that run a DNS\nservice is privileged.\n```\nfrom ms_active_directory import ADDomain\ndomain = ADDomain('example.com')\n\nsession = domain.create_session_as_user('username@example.com', 'password')\n# returns a map that maps server hostnames -> ip addresses, where\n# the hostnames are computers running dns services\ndns_map = session.find_dns_servers_for_domain()\nip_addrs = dns_map.values()\nhostnames = dns_map.keys()\n```\n\n### Finding CA certificates\nDiscovering DNS servers requires an authenticated session with the domain,\nas searching the records within the domain for records that are indicated\nas being certificate authorities is privileged.\n\n```\nfrom ms_active_directory import ADDomain\ndomain = ADDomain('example.com')\n\nsession = domain.create_session_as_user('username@example.com', 'password')\n# returns a list of PEM-formatted strings representing the signing certificates\n# of all certificate authorities in the domain\npem_certs = session.find_certificate_authorities_for_domain()\n\n# you can also get the certificates in DER format, which might be\n# preferred on windows\nder_certs = session.find_certificate_authorities_for_domain(pem_format=False)\n```\n\n## Joining an Active Directory domain\n\nThe action of joining a computer to a domain is not a well-defined operation,\nand so the exact mechanics of how you utilize the domain joining functionality\nand how its outputs are integrated with the rest of your system will vary depending on\nyour use case.\n\nThis will try to cover some common examples.\n\n### Join the domain with default configurations for everything\nThe default behavior requires only the domain name and the credentials of a user with\nsufficient administrative rights to create computers within the domain.\n```\nfrom ms_active_directory import join_ad_domain\n\ncomp = join_ad_domain('example.com', 'Administrator@example.com', 'example-password')\n```\nThe `join_ad_domain` function returns a `ManagedADComputer` object with many helpful functions\ndescribing properties of the created computer.\n\nThis will use the local hostname of the machine running this code as the computer name.\nIt will create the computer in AD's default `Computers` container.\n\nIt enables `AES256-SHA1` as an encryption type for both receiving and initiating kerberos\ncontexts, and it configures `<local hostname>.<domain dns name>` as the hostname of the\ncomputer in AD and registers the default `HOST` service.\n\nIt then writes kerberos keys for the new computer account to `/etc/krb5.keytab`, which is\nthe default location for kerberos keytabs.\n\nThis all enables the account to be used for authenticating with other domain resources as a client\nover protocols like SMB and LDAP using kerberos, as well as receiving incoming kerberos authentication\nas a server for things like SSH. This is because the `HOST` service encapsulates many standard services\nin the domain.\n\nHowever, it is still up to the caller to do things like configure sshd to utilize the keytab.\n\n### Join the domain with customization of the account for security reasons\n\nA number of customizations exist for security reasons.\n\nYou can change things like the encryption types enabled on the account to support older clients.\nYou can also change location where the account is created when joining a domain in order to use\na less privileged user for the act of joining. Locations can be LDAP distinguished names or windows\npath style canonical names.\n\nYou can also set the computer name if you have a desired naming scheme. This will impact the hostnames\nconfigured in the domain for the computer.\n```\nfrom ms_active_directory import join_ad_domain, ADEncryptionType\n\ndomain = 'example.com'\nless_privileged_user = 'ops-manager@example.com'\npassword = 'password2'\n# ldap-style relative distinguished name of a location\nless_privileged_loc = 'OU=service-machines,OU=ops'\ncomputer_name = 'workstation10'\n\nlegacy_enc_type = ADEncryptionType.RC4_HMAC\nnew_enc_type = ADEncryptionType.AES256_CTS_HMAC_SHA1_96\n\ncomp = join_ad_domain(domain, less_privileged_user, password, computer_name=computer_name,\n                      computer_location=less_privileged_loc, computer_encryption_types=[legacy_enc_type, new_enc_type])\n                      \nalt_format_loc = '/ops/service-machines'\ncomp = join_ad_domain(domain, less_privileged_user, password, computer_name=computer_name,\n                      computer_location=alt_format_loc, computer_encryption_types=[legacy_enc_type, new_enc_type])\n\n```\n\nYou can also manually set the computer password. The default is to generate a random 120\ncharacter password, but if you want to share this computer across services, and some cannot\ninteract with the generated kerberos keys, then you may wish to set a password manually.\n\nYou can also change where the kerberos keys are written to.\n``` \nfrom ms_active_directory import join_ad_domain\n\ndomain = 'example.com'\nuser = 'ops-manager@example.com'\npassword = 'password2'\nkerberos_key_location = '/usr/shared/keys/workstation-key.keytab'\ncomputer_name = 'workstation10'\ncomputer_password = 'workstation-shared-pw'\n\ncomp = join_ad_domain(domain, user, password, computer_key_file_path=kerberos_key_location,\n                      computer_name=computer_name, computer_password=computer_password)\n```\n\n### Join the domain with different network or service settings\nYou can configure different hostnames for your computer when joining the\ndomain. This is useful when you have multiple different hostnames for\na single device, or want to use a computer name that doesn't match your\nnetwork name.\n\nYou can also configure services in order to restrict or broaden what is\nsupported by the computer when acting as a server (e.g. you can add `nfs`\nif the machine will be an nfs server).\n\nJoining will fail if another computer in the domain is using the services\nyou specify on any of the hostnames you specify in order to avoid conflicts\nthat cause undefined behavior.\n``` \nfrom ms_active_directory import join_ad_domain\n\ndomain = 'example.com'\nuser = 'ops-manager@example.com'\npassword = 'password2'\n\nservices = ['HOST', 'nfs', 'cifs', 'HTTP']\ncomputer_name = 'workstation10'\ncomputer_host1 = 'central-mount-point.example.com'\ncomputer_host2 = 'example-web-server.example.com'\ncomp = join_ad_domain(domain, user, password, computer_name=computer_name,\n                      computer_hostnames=[computer_host1, computer_host2],\n                      computer_services=services)\n```\n\n\n### Join using a domain object\nYou can use an `ADDomain` object to join the domain as well, using a `join` function.\nThis allows you to combine all of the functionality mentioned earlier around site-awareness,\nserver preferences, TLS settings, and network multi-tenancy with the domain joining\nfunctionality mentioned in this section.\n\nThe parameters are all the same, except the domain need not be provided when using an\n`ADDomain` object, so it just adds more functionality in exchange for a slightly less simple\nworkflow.\n\n```\nfrom ms_active_directory import ADDomain\n\ndomain = ADDomain('example.com', site='us-eastern-dc',\n                  source_ip='10.25.21.30', dns_nameservers=['10.25.21.20'])\n\nuser = 'ops-manager@example.com'\npassword = 'password2'\nless_privileged_loc = 'OU=service-machines,OU=ops'\nservices = ['HOST', 'nfs', 'cifs', 'HTTP']\ncomputer_name = 'workstation10'\n\ncomp = domain.join(user, password, computer_hostnames=[computer_host1, computer_host2],\n                   computer_services=services, computer_location=less_privileged_loc)\n```\n\n### Join the domain by taking over an existing account\nFor some setups, accounts may be pre-created and then taken over by the computers that will use them.\n\nThis can be done in order to greatly restrict the permissions of the user that is used for joining,\nas they only need `RESET PASSWORD` permissions on the computer account, or `CHANGE PASSWORD` if\nthe current computer password is provided.\n```\nfrom ms_active_directory import ADDomain, join_ad_domain_by_taking_over_existing_computer\n\ndomain_dns_name = 'example.com'\nsite = 'us-eastern-dc'\nexisting_computer_name = 'precreated-comp'\nuser = 'single-account-admin@example.com'\npassword = 'password2'\n\ncomputer_obj = join_ad_domain_by_taking_over_existing_computer(domain_dns_name, user, password,\n                                                               ad_site=site, computer_name=existing_computer_name)\n                                                               \n# or use a domain object to use various power-user domain features\ndomain = ADDomain(domain_dns_name, site=site,\n                  source_ip='10.25.21.30', dns_nameservers=['10.25.21.20'])\ndomain.join_by_taking_over_existing_computer(user, password, computer_name=existing_computer_name)\n```\n\n# Managing users, computers, and groups\n\nThe library provides a number of different functions for finding users, computers, and groups by different\nidentifiers, and for querying information about them.\nIt also has functions for checking their memberships and adding or removing users, computers, and groups\nto or from groups.\n\n## Looking up users, computers, groups, and information about them\n\nUsers, computers, and groups can both be looked up by one of:\n- sAMAccountName\n- distinguished name\n- common name\n- a generic \"name\" that will attempt the above 3\n- an attribute\n\n### Look up by sAMAccountName\n\nA `sAMAccountName` is unique within a domain, and so looking up users or\ngroups by `sAMAccountName` returns a single result.\n`sAMAccountName` was a user's windows logon name in older versions of windows,\nand may be referred to as such in some documentation.\n\nFor computers, the standard convention is for their `sAMAccountName` to end with\na `$`, but many tools/docs leave that out. So if a `sAMAccountName` is specified\nthat does not end with a `$` and cannot be found, a lookup will also be\nattempted after adding a `$` to the end.\n\nWhen looking up users, computers, and groups, you can also query for additional information\nabout them by specifying a list of LDAP attributes.\n``` \nfrom ms_active_directory import ADDomain\ndomain = ADDomain('example.com')\nsession = domain.create_session_as_user('username@example.com', 'password')\n\nuser = session.find_user_by_sam_name('user1', ['employeeID'])\ngroup = session.find_group_by_sam_name('group1', ['gidNumber'])\n# users and groups support a generic \"get\" for any attributes queried\nprint(user.get('employeeID'))\nprint(group.get('gidNumber'))\n```\n\n### Look up by distinguished name\n\nA distinguished name is unique within a forest, and so looking up users or\ngroups by it returns a single result.\nA distinguished name should not be escaped when provided to the search function.\n\nWhen looking up users, computers, and groups, you can also query for additional information\nabout them by specifying a list of LDAP attributes.\n``` \nfrom ms_active_directory import ADDomain\ndomain = ADDomain('example.com')\nsession = domain.create_session_as_user('username@example.com', 'password')\n\nuser_dn = 'CN=user one,CN=Users,DC=example,DC=com'\nuser = session.find_user_by_distinguished_name(user_dn, ['employeeID'])\ngroup_dn = 'CN=group one,OU=employee-groups,DC=example,DC=com'\ngroup = session.find_group_by_distinguished_name(group_dn, ['gidNumber'])\n# users and groups support a generic \"get\" for any attributes queried\nprint(user.get('employeeID'))\nprint(group.get('gidNumber'))\n```\n\n### Look up by common name\nA common name is not unique within a domain, and so looking up users or\ngroups by it returns a list of results, which may have 0 or more entries.\n\nWhen looking up users, computers, and groups, you can also query for additional information\nabout them by specifying a list of LDAP attributes.\n``` \nfrom ms_active_directory import ADDomain\ndomain = ADDomain('example.com')\nsession = domain.create_session_as_user('username@example.com', 'password')\n\nuser_cn = 'John Doe'\nusers = session.find_users_by_common_name(user_cn, ['employeeID'])\ngroup_dn = 'operations managers'\ngroups = session.find_groups_by_common_name(group_dn, ['gidNumber'])\n# users and groups support a generic \"get\" for any attributes queried\nfor user in users:\n    print(user.get('employeeID'))\nfor group in groups:\n    print(group.get('gidNumber'))\n```\n\n### Look up by generic name\nYou can also query by a generic \"name\", and the library will attempt to find a\nunique user or group with that name. The library will either lookup by DN or will\nattempt `sAMAccountName` and common name lookups depending on the name format.\n\nIf more than one result is found by common name and no result is found by\n`sAMAccountName` then this will produce an error.\n``` \nfrom ms_active_directory import ADDomain\ndomain = ADDomain('example.com')\nsession = domain.create_session_as_user('username@example.com', 'password')\n\nuser_name = 'John Doe'\nuser = session.find_user_by_name(user_name, ['employeeID'])\ngroup_name = 'operations managers'\ngroups = session.find_groups_by_name(group_name, ['gidNumber'])\n# users and groups support a generic \"get\" for any attributes queried\nprint(user.get('employeeID'))\nprint(group.get('gidNumber'))\n```\n\n### Look up by attribute\nYou can also query for users, computers, or groups that possess a certain value for a\nspecified attribute. This can produce any number of results, so a list is\nreturned.\n``` \nfrom ms_active_directory import ADDomain\ndomain = ADDomain('example.com')\nsession = domain.create_session_as_user('username@example.com', 'password')\n\ndesired_employee_type = 'temporary'\nusers = session.find_users_by_attribute('employeeType', desired_employee_type, ['employeeID'])\ndesired_group_manager = 'Alice P Hacker'\ngroups = session.find_groups_by_attribute('managedBy', desired_group_manager, ['gidNumber'])\n\n# users and groups support a generic \"get\" for any attributes queried\nfor user in users:\n    print(user.distinguished_name)\n    print(user.get('employeeID'))\nfor group in groups:\n    print(group.distinguished_name)\n    print(group.get('gidNumber'))\n```\n\n## Querying user, computer, and group membership\nYou can also look up the groups that a user belongs to, the groups that a computer belongs to,\nor the groups that a group belongs to. Active Directory supports nested groups, which is why\nthere's `user->groups`, `computer->groups`, and `group->groups` mapping capability.\n\nWhen querying the membership information for users or groups, the input type for any\nuser or group must either be a string name identifying the user, computer, or group as described in the prior\nsection, or must be an `ADUser`, `ADComputer`, or `ADGroup` object returned by one of the functions described\nin the prior section.\n\nSimilarly to looking up users, computers, and groups, you can query for attributes of the parent groups\nby providing a list of LDAP attributes to look up for them.\n\n``` \nfrom ms_active_directory import ADDomain\ndomain = ADDomain('example.com')\nsession = domain.create_session_as_user('username@example.com', 'password')\n\nuser_sam_account_name = 'user-sam-1'\nuser_dn = 'CN=user sam 1,CN=users,DC=example,DC=com'\nuser_cn = 'user same 1'\n\ndesired_group_attrs = ['gidNumber', 'managedBy']\n# all 3 of these do the same thing, and internally map the different\n# name types to a user object\ngroups_res1 = session.find_groups_for_user(user_sam_account_name, desired_group_attrs)\ngroups_res2 = session.find_groups_for_user(user_dn, desired_group_attrs)\ngroups_res3 = session.find_groups_for_user(user_cn, desired_group_attrs)\n\n# you can also directly use a user object to query groups\nuser_obj = session.find_user_by_name(user_sam_account_name)\ngroups_res4 = session.find_groups_for_user(user_obj, desired_group_attrs)\n\n# you can also look up the parents of groups in the same way\nexample_group_obj = groups_res4[0]\nexample_group_dn = example_group_obj.distinguished_name\n\n# these both work. sAMAccountName could also be used, etc.\nsecond_level_groups_res1 = session.find_groups_for_group(example_group_obj, desired_group_attrs)\nsecond_level_groups_res2 = session.find_groups_for_group(example_group_dn, desired_group_attrs)\n```\n\nYou can also query `users->groups`, `computers->groups`, and `groups->groups` to find the memberships of multiple\nusers, computers, and groups, and the library will make a minimal number of queries to determine membership;\nit will be more efficient that doing a `user->groups` for each user (or similar for computers and groups).\nThe result will be a map that maps the input users or groups to lists of parent groups.\n\nThe input lists' elements must be the same format as what's provided when looking up group\nmemberships for a single user or group.\n``` \nfrom ms_active_directory import ADDomain\ndomain = ADDomain('example.com')\nsession = domain.create_session_as_user('username@example.com', 'password')\n\nuser1_name = 'user1'\nuser2_name = 'user2'\nusers = [user1_name, user2_name]\ndesired_group_attrs = ['gidNumber', 'managedBy']\n\nuser_group_map = session.find_groups_for_users(users, desired_group_attrs)\n# the dictionary result keys are the users from the input\nuser1_groups = user_group_map[user1_name]\nuser2_groups = user_group_map[user2_name]\n\n# you can use the groups->groups mapping functionality to enumerate the\n# full tree of a users' group memberships (or a groups' group memberships)\nuser1_second_level_groups_map = session.find_groups_for_groups(user1_groups, desired_group_attrs)\nall_second_level_groups = []\nfor group_list in user1_second_level_groups_map.values():\n    for group in group_list:\n        if group not in all_second_level_groups:\n            all_second_level_groups.append(group)\nall_user1_groups_in_2_levels = user1_groups + all_second_level_groups\n```\n\n## Finding the members of groups\n\nYou can look up the members of one or more groups and get attributes about those\nmembers.\n```\nfrom ms_active_directory import ADDomain, ADUser, ADGroup\ndomain = ADDomain('example.com')\nsession = domain.create_session_as_user('username@example.com', 'password')\n\n# get emails of users and groups that are members\ndesired_attrs = ['mail'] \n\n# look up members of a single group\nsingle_group_member_list = session.find_members_of_group('group1', desired_attrs)\n\n# look up members of multiple groups at once\ngroups = ['group1', 'group2']\ngroup_to_member_list_map = session.find_members_of_groups(groups, desired_attrs)\ngroup2_member_list = group_to_member_list_map['group2']\ngroup2_user_members = [mem for mem in group2_member_list if isintance(mem, ADUser)]\ngroup2_group_members = [mem for mem in group2_member_list if isintance(mem, ADGroup)]\n```\n\nYou can also look up members recursively to handle nesting.\nA maximum depth for lookups may be specified, but by default all\nnesting will be enumerated.\n``` \nfrom ms_active_directory import ADDomain, ADUser, ADGroup\ndomain = ADDomain('example.com')\nsession = domain.create_session_as_user('username@example.com', 'password')\n\n# get emails of users and groups that are members\ndesired_attrs = ['mail'] \ngroup_name = 'has-groups-as-members'\ngroups_to_member_lists_maps = session.find_members_of_groups_recursive(group_name, desired_attrs)\n```\n\n\n## Adding users to groups\nYou can add users to groups by specifying a list of `ADUser` objects or string names of\nAD users to be added to the groups, and a list of `ADGroup` objects or string names of AD\ngroups to add the users to.\n\nIf string names are specified, they'll be mapped to users/groups using the functions\ndiscussed in the prior sections.\n\nIf a user is already in a group, this is idempotent and will not re-add them.\n\n```\nfrom ms_active_directory import ADDomain\ndomain = ADDomain('example.com')\nsession = domain.create_session_as_user('username@example.com', 'password')\n\nuser1_name = 'user1'\nuser2_name = 'user2'\ngroup1_name = 'target-group1'\ngroup2_name = 'target-group2'\n\nsession.add_users_to_groups([user1_name, user2_name],\n                            [group1_name, group2_name])\n```\n\nBy default, if we fail to add users to one of the groups specified, we'll attempt to rollback\nand remove users from any groups they were added to. You can choose to forgo this and a list of\ngroups that users were successfully added to will be returned instead.\n``` \nfrom ms_active_directory import ADDomain\ndomain = ADDomain('example.com')\nsession = domain.create_session_as_user('username@example.com', 'password')\n\nuser1_name = 'user1'\nuser2_name = 'user2'\ngroup1_name = 'target-group1'\ngroup2_name = 'target-group2'\nprivileged_group = 'group-that-will-fail'\n\nsucceeeded = session.add_users_to_groups([user1_name, user2_name],\n                                         [group1_name, group2_name, privileged_group],\n                                         stop_and_rollback_on_error=False)\n# this will print \"['target-group1', 'target-group2']\" assuming that\n# adding users to 'group-that-will-fail' failed\nprint(succeeeded)                                 \n```\n\n## Adding groups to groups\n\nAdding groups to other groups works exactly the same way as adding users to groups, but\nthe function is called `add_groups_to_groups` and both inputs are lists of groups.\n\n## Adding computers to groups\n\nAdding computers to groups works exactly the same way as adding users to groups, but\nthe function is called `add_computers_to_groups` and the first input is a list of computers.\n\n## Removing users, computers, or groups from groups\n\nRemoving users, computers, or groups from groups works identically to adding users, computers, or groups to groups,\nincluding input format, idempotency, and rollback functionality.\nThe only difference is that the functions are called `remove_users_from_groups`, `remove_computers_from_groups`, and\n`remove_groups_from_groups` instead.\n\n\n## Updating user, computer, or group attributes.\nYou can use this library to modify the values of various LDAP attributes on\nusers, computers, groups, or generic objects.\n\nUsers, computers, and groups provide the convenient name lookup functionality mentioned above,\nwhile for generic objects you either need to pass an `ADObject` or a distinguished name.\n\n### Appending to one or more attributes\nYou can atomically append values to multi-valued attributes, such as `accountNameHistory`.\nThis allows you to update their values without needing to know the current value or worry\nabout race conditions, as it's handled server-side.\n```\nfrom ms_active_directory import ADDomain\ndomain = ADDomain('example.com')\nsession = domain.create_session_as_user('username@example.com', 'password')\n\nuser_name = 'sarah1'\nprevious_account_name = 'sarah'\nsuccess = session.atomic_append_to_attribute_for_user(user_name, 'accountNameHistory',\n                                                      previous_account_name)\n\n# you can also append multiple values at once, or append to multiple\n# attributes at once\nuser_name = 'monica pham-chen' \nprevious_account_names = ['monica pham', 'monica chen']\nprevious_uid = 'mpham'\nupdate_map = {\n    'accountNameHistory': previous_account_names,\n    'uid': previous_uid\n}\nsuccess = session.atomic_append_to_attributes_for_user(user_name, update_map)\n```\nYou can also perform these actions on groups and objects using the similarly named\nfunctions `atomic_append_to_attribute_for_group`, `atomic_append_to_attributes_for_group`,\n`atomic_append_to_attribute_for_computer`, `atomic_append_to_attributes_for_computer`,\n`atomic_append_to_attribute_for_object`, and `atomic_append_to_attributes_for_object`.\n\n### Overwriting one or more attributes\nIf you want to totally replace the value of an attribute, that's supported as well.\nThis can be done for single-valued or multi-valued attributes.\n\n```\nfrom ms_active_directory import ADDomain\ndomain = ADDomain('example.com')\nsession = domain.create_session_as_user('username@example.com', 'password')\n\nuser_name = 'arjun'\nnew_uid_number = 1093\nsuccess = session.overwrite_attribute_for_user(user_name, 'uidNumber',\n                                               new_uid_number)\n                                               \n# just like appending, we can do multiple attributes at once atomically\nuser_name = 'nikita'\nnew_employee_type = 'Director'\nnew_gid = 0\nnew_addresses = [\n   '123 mulberry lane',\n   '456 vacation home drive'\n]\nnew_value_map = {\n   'employeeType': new_employee_type,\n   'gidNumber': new_gid,\n   'postalAddress': new_addresses\n}\nsuccess = session.overwrite_attributes_for_user(user_name, new_value_map)\n```\nYou can also perform these actions on groups and objects using the similarly named\nfunctions, just like with appending.\n\n# Discovering and Managing Trusted Domains\n\nYou can discover trusted domains using a session, and check properties about them.\n```\nfrom ms_active_directory import ADDomain\ndomain = ADDomain('example.com')\nsession = domain.create_session_as_user('username@example.com', 'password')\n\ntrusted_domains = session.find_trusted_domains_for_domain()\n\n# split domains up based on trust type\ntrusted_mit_domains = [dom for dom in trusted_domains if dom.is_mit_trust()]\ntrusted_ad_domains = [dom for dom in trusted_domains if dom.is_active_directory_domain_trust()]\n\n# print a few attributes that may be relevant\nfor ad_dom in trusted_ad_domains:\n    print('FQDN: {}'.format(ad_dom.get_netbios_name()))\n    print('Netbios name: {}'.format(ad_dom.get_netbios_name()))\n    print('Disabled: {}'.format(ad_dom.is_disabled())\n    print('Bi-directional: {}'.format(ad_dom.is_bidirectional_trust())\n    print('Transitive: {}'.format(ad_dom.is_transitive_trust())\n```\n\nYou can also convert AD domains that are trusted into fully usable `ADDomain`\nobjects for the purpose of creating sessions and looking up information there.\n``` \nfrom ms_active_directory import ADDomain\nfrom ldap3 import NTLM\ndomain = ADDomain('example.com')\nwidely_trusted_user = 'example.com\\\\org-admin'\npassword = 'password'\n\nprimary_session = domain.create_session_as_user(widely_trusted_user, password,\n                                                authentication_mechanism=NTLM)\n\n# get our trusted AD domains\ntrusted_domains = session.find_trusted_domains_for_domain()\ntrusted_ad_domains = [dom for dom in trusted_domains if dom.is_active_directory_domain_trust()]\n\n# convert them into domains where our user should be trusted\ndomains_our_user_can_auth_with = []\nfor trusted_dom in trusted_ad_domains:\n    if trusted_dom.trusts_primary_domain() and not trusted_dom.is_disabled():\n        full_domain = trusted_dom.convert_to_ad_domain()\n        domains_our_user_can_auth_with.append(full_domain)\n\n# create sessions so we can search across many domains\nall_user_sessions = [primary_session]\nfor dom in domains_our_user_can_auth_with:\n    # SASL is needed for cross-domain authentication in general\n    session = dom.create_session_as_user(widely_trusted_user, password,\n                                         authentication_mechanism=NTLM)\n    all_user_sessions.append(session)                                     \n```\n\nYou can convert an existing authenticated session with one domain into an\nauthenticated session with a trusted AD domain that trusts the first domain.\n```\nfrom ms_active_directory import ADDomain\nfrom ldap3 import NTLM\ndomain = ADDomain('example.com')\nwidely_trusted_user = 'example.com\\\\org-admin'\npassword = 'password'\n\nprimary_session = domain.create_session_as_user(widely_trusted_user, password,\n                                                authentication_mechanism=NTLM)\n\n# get our trusted AD domains\ntrusted_domains = session.find_trusted_domains_for_domain()\n# filter for a domain being AD and it trusting the primary domain\ntrusted_ad_domains = [dom for dom in trusted_domains if dom.is_active_directory_domain_trust()\n                      and dom.trusts_primary_domain()]\n\n# create a new session with the trusted domain using our existing primary domain session,\n# and use it to look up users/groups/etc. in the other domain\ntransferred_session = trusted_ad_domains[0].create_transfer_session_to_trusted_domain(primary_session)\ntransferred_session.find_user_by_name('other-domain-user')\n```\n\nYou can also automatically have a session create sessions for all its trusted domains\nthat trust the session's domain.\n```\nfrom ms_active_directory import ADDomain\nfrom ldap3 import NTLM\ndomain = ADDomain('example.com')\nwidely_trusted_user = 'example.com\\\\org-admin'\npassword = 'password'\n\nprimary_session = domain.create_session_as_user(widely_trusted_user, password,\n                                                authentication_mechanism=NTLM)\n\n# find a user that we know exists somewhere, but not the primary domain\nuser_to_find = 'some-lost-user'\n# by default this filters to AD domains, and further filters to domains that trust the session's domain\n# if the user used for the session is from the session's domain (which they are in this\n# example)\ntrust_sessions = primary_session.create_transfer_sessions_to_all_trusted_domains()\nuser = None\nfor session in trust_sessions:\n    user = session.find_user_by_name(user_to_find)\n    if user is not None:\n        print('Found user in {}'.format(session.get_domain_dns_name()))\n        break\n```\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/zorn96/ms_active_directory/","keywords":"python3 ldap microsoft windows active-directory kerberos ad","license":"MIT License","maintainer":"","maintainer_email":"","name":"ms-active-directory","package_url":"https://pypi.org/project/ms-active-directory/","platform":null,"project_url":"https://pypi.org/project/ms-active-directory/","project_urls":{"Homepage":"https://github.com/zorn96/ms_active_directory/"},"provides_extra":null,"release_url":"https://pypi.org/project/ms-active-directory/1.13.0/","requires_dist":null,"requires_python":">=3.5","summary":"Python library for integrating with Microsoft Active Directory","version":"1.13.0","yanked":false,"yanked_reason":null},"last_serial":20917941,"releases":{"0.9.0":[{"comment_text":"","digests":{"blake2b_256":"f38170be03cadb875179903aa2361a0a767d536f0e35e976d1121ea023f1f736","md5":"fb6ffa240d06e360e6861e29884b8bbc","sha256":"534681cd159a7883f00564f654848e1a96194d2f270c2062398d2366766a2999"},"downloads":-1,"filename":"ms_active_directory-0.9.0.tar.gz","has_sig":false,"md5_digest":"fb6ffa240d06e360e6861e29884b8bbc","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":58976,"upload_time":"2021-08-19T07:32:47","upload_time_iso_8601":"2021-08-19T07:32:47.485432Z","url":"https://files.pythonhosted.org/packages/f3/81/70be03cadb875179903aa2361a0a767d536f0e35e976d1121ea023f1f736/ms_active_directory-0.9.0.tar.gz","yanked":false,"yanked_reason":null}],"0.9.1":[{"comment_text":"","digests":{"blake2b_256":"c1d122da1721519ae27c87ff7e03c904a6814f13766cd0da23f12f2dcb9f0f2d","md5":"91268bf444386ff34465a8902f9d4e90","sha256":"477d0ea8b908cc8bce865b6740ce2ac4f850a5bdc5bf1f235787bc897a770bed"},"downloads":-1,"filename":"ms_active_directory-0.9.1.tar.gz","has_sig":false,"md5_digest":"91268bf444386ff34465a8902f9d4e90","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":58998,"upload_time":"2021-08-19T07:36:07","upload_time_iso_8601":"2021-08-19T07:36:07.109940Z","url":"https://files.pythonhosted.org/packages/c1/d1/22da1721519ae27c87ff7e03c904a6814f13766cd0da23f12f2dcb9f0f2d/ms_active_directory-0.9.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0":[{"comment_text":"","digests":{"blake2b_256":"2626a4396264516f119bebf1a0039aa933ca402ff38089b04d185956b4a31dd1","md5":"fdd70cd29ac61efac8a6fd830d17fdb0","sha256":"c75a3556bd41645bd6ca36c3ea71189b9e32868d498f7eaac27010e8f8f4c59a"},"downloads":-1,"filename":"ms_active_directory-1.0.0.tar.gz","has_sig":false,"md5_digest":"fdd70cd29ac61efac8a6fd830d17fdb0","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":58873,"upload_time":"2021-08-19T07:41:54","upload_time_iso_8601":"2021-08-19T07:41:54.460425Z","url":"https://files.pythonhosted.org/packages/26/26/a4396264516f119bebf1a0039aa933ca402ff38089b04d185956b4a31dd1/ms_active_directory-1.0.0.tar.gz","yanked":false,"yanked_reason":null}],"1.1.0":[{"comment_text":"","digests":{"blake2b_256":"d4b4479799d158b8926863f37869984082ead5123770553f994b6fb5841a6bce","md5":"e01edbdef6cdfabecc6715cf1a444938","sha256":"8498529629867d1f9de8476f0227345dc1ec4d90eb375b806c62ed0848a8e120"},"downloads":-1,"filename":"ms_active_directory-1.1.0.tar.gz","has_sig":false,"md5_digest":"e01edbdef6cdfabecc6715cf1a444938","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":71641,"upload_time":"2021-08-24T06:56:19","upload_time_iso_8601":"2021-08-24T06:56:19.843000Z","url":"https://files.pythonhosted.org/packages/d4/b4/479799d158b8926863f37869984082ead5123770553f994b6fb5841a6bce/ms_active_directory-1.1.0.tar.gz","yanked":false,"yanked_reason":null}],"1.1.1":[{"comment_text":"","digests":{"blake2b_256":"9939cc2a008d2393c08aadc24baf7e6ab78bf1cbbaedd1421815121b7a0d75f3","md5":"8a57d2e69bd5dba90d133c941603ef6c","sha256":"a26d7a08b75f0c694f131a4f8480de5d1dd7d692b4023b5f2b2088d0aeefdce2"},"downloads":-1,"filename":"ms_active_directory-1.1.1.tar.gz","has_sig":false,"md5_digest":"8a57d2e69bd5dba90d133c941603ef6c","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":71650,"upload_time":"2021-08-24T16:19:55","upload_time_iso_8601":"2021-08-24T16:19:55.816690Z","url":"https://files.pythonhosted.org/packages/99/39/cc2a008d2393c08aadc24baf7e6ab78bf1cbbaedd1421815121b7a0d75f3/ms_active_directory-1.1.1.tar.gz","yanked":false,"yanked_reason":null}],"1.10.0":[{"comment_text":"","digests":{"blake2b_256":"6d61d6e81256423ea6885ac5eff7be930e3b6b503b02da703d41c2a1fb73b1fe","md5":"0d67b1dddf84e6a3a917c91b361774dc","sha256":"fbdb94603dee5b28e59810d28f82b14337bf1a5a9432443c785d550eac470341"},"downloads":-1,"filename":"ms_active_directory-1.10.0.tar.gz","has_sig":false,"md5_digest":"0d67b1dddf84e6a3a917c91b361774dc","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":142500,"upload_time":"2021-10-10T22:57:40","upload_time_iso_8601":"2021-10-10T22:57:40.776268Z","url":"https://files.pythonhosted.org/packages/6d/61/d6e81256423ea6885ac5eff7be930e3b6b503b02da703d41c2a1fb73b1fe/ms_active_directory-1.10.0.tar.gz","yanked":false,"yanked_reason":null}],"1.10.1":[{"comment_text":"","digests":{"blake2b_256":"05f6c7aa1b6476ec037c9862b2f95b615bb68b7b1a369c817ad5cbeb01de1598","md5":"ff26f45119188e3e29601af0f991a37e","sha256":"e09a55fa895ffb304194c9e8d44c0a6fef9be7fccc998630fd278832d09a751e"},"downloads":-1,"filename":"ms_active_directory-1.10.1.tar.gz","has_sig":false,"md5_digest":"ff26f45119188e3e29601af0f991a37e","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":142519,"upload_time":"2021-10-15T22:36:34","upload_time_iso_8601":"2021-10-15T22:36:34.429501Z","url":"https://files.pythonhosted.org/packages/05/f6/c7aa1b6476ec037c9862b2f95b615bb68b7b1a369c817ad5cbeb01de1598/ms_active_directory-1.10.1.tar.gz","yanked":false,"yanked_reason":null}],"1.10.2":[{"comment_text":"","digests":{"blake2b_256":"58e5f15cf4f174b7b66e83471e1affcf70f2d67600592ac05596aedbfb6aeec0","md5":"6baf559a15b7d7ec1cbf259382dd01cf","sha256":"df75858419015cd4bf09d99064aed94566e169c536aa68b1f5f8968e62e54345"},"downloads":-1,"filename":"ms_active_directory-1.10.2.tar.gz","has_sig":false,"md5_digest":"6baf559a15b7d7ec1cbf259382dd01cf","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":142475,"upload_time":"2021-10-16T00:15:56","upload_time_iso_8601":"2021-10-16T00:15:56.456886Z","url":"https://files.pythonhosted.org/packages/58/e5/f15cf4f174b7b66e83471e1affcf70f2d67600592ac05596aedbfb6aeec0/ms_active_directory-1.10.2.tar.gz","yanked":false,"yanked_reason":null}],"1.10.3":[{"comment_text":"","digests":{"blake2b_256":"66bd405f1e352ba1d4fefe05257c9c298924a7fd47763052f32328fb6dcf2a28","md5":"97a621ce5863145da160913c2ebf2a45","sha256":"3f0d65a47ff962776abe0ad266959d62b4a6f718f4397aa41bc93308197c6966"},"downloads":-1,"filename":"ms_active_directory-1.10.3.tar.gz","has_sig":false,"md5_digest":"97a621ce5863145da160913c2ebf2a45","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":142810,"upload_time":"2021-10-20T06:51:03","upload_time_iso_8601":"2021-10-20T06:51:03.568308Z","url":"https://files.pythonhosted.org/packages/66/bd/405f1e352ba1d4fefe05257c9c298924a7fd47763052f32328fb6dcf2a28/ms_active_directory-1.10.3.tar.gz","yanked":false,"yanked_reason":null}],"1.11.0":[{"comment_text":"","digests":{"blake2b_256":"9cac7f6dfe42f0af37db3b67f71e2fb3eb2326f0c5913a451cfd55dd591333e3","md5":"00380ef2ff335eed887e1b0bf362f404","sha256":"bcb462c124996a071672fa73917b3887244efa90d221f9069015047abf9b2ed3"},"downloads":-1,"filename":"ms_active_directory-1.11.0.tar.gz","has_sig":false,"md5_digest":"00380ef2ff335eed887e1b0bf362f404","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":149998,"upload_time":"2021-11-19T06:45:30","upload_time_iso_8601":"2021-11-19T06:45:30.454772Z","url":"https://files.pythonhosted.org/packages/9c/ac/7f6dfe42f0af37db3b67f71e2fb3eb2326f0c5913a451cfd55dd591333e3/ms_active_directory-1.11.0.tar.gz","yanked":false,"yanked_reason":null}],"1.11.1":[{"comment_text":"","digests":{"blake2b_256":"d26ff0058478a212d50e98c061955013d744f7e709b48b334de9305a3aed8d28","md5":"2e1ef63b0fce4fa8b23a10bd22427459","sha256":"2d2931ce2fd08227a7072d791e3d6e30673a265164091d17bbcd3afea7c43dad"},"downloads":-1,"filename":"ms_active_directory-1.11.1.tar.gz","has_sig":false,"md5_digest":"2e1ef63b0fce4fa8b23a10bd22427459","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":150137,"upload_time":"2021-11-20T01:47:48","upload_time_iso_8601":"2021-11-20T01:47:48.106150Z","url":"https://files.pythonhosted.org/packages/d2/6f/f0058478a212d50e98c061955013d744f7e709b48b334de9305a3aed8d28/ms_active_directory-1.11.1.tar.gz","yanked":false,"yanked_reason":null}],"1.11.2":[{"comment_text":"","digests":{"blake2b_256":"a5d389b22d7b5221016a64243b821b3f6e4d2518bcd11030a5a7d13dd31bec20","md5":"179a58afc1d66446c3db00cecdd5f89f","sha256":"f1c3d0c0383f1fb01662cfd7992631f7d9fc572bf16c6f7f686c64ecbb859b8c"},"downloads":-1,"filename":"ms_active_directory-1.11.2.tar.gz","has_sig":false,"md5_digest":"179a58afc1d66446c3db00cecdd5f89f","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":151990,"upload_time":"2021-12-01T05:52:58","upload_time_iso_8601":"2021-12-01T05:52:58.580429Z","url":"https://files.pythonhosted.org/packages/a5/d3/89b22d7b5221016a64243b821b3f6e4d2518bcd11030a5a7d13dd31bec20/ms_active_directory-1.11.2.tar.gz","yanked":false,"yanked_reason":null}],"1.12.0":[{"comment_text":"","digests":{"blake2b_256":"7efb81b21223a7cbd05747e7f63f6bb0432d0f80b40539d3196cc35cac87d372","md5":"12b04d456d9de21b2f818de063480134","sha256":"2f2c5280496021beefc9901d7157636b9d5ba032daf1a43d5ad71ebad1986a53"},"downloads":-1,"filename":"ms_active_directory-1.12.0.tar.gz","has_sig":false,"md5_digest":"12b04d456d9de21b2f818de063480134","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":153315,"upload_time":"2021-12-09T06:39:12","upload_time_iso_8601":"2021-12-09T06:39:12.023193Z","url":"https://files.pythonhosted.org/packages/7e/fb/81b21223a7cbd05747e7f63f6bb0432d0f80b40539d3196cc35cac87d372/ms_active_directory-1.12.0.tar.gz","yanked":false,"yanked_reason":null}],"1.12.1":[{"comment_text":"","digests":{"blake2b_256":"969f2e039410cc4043235738730c899ceed6436cbf1656f59353bedf9717036d","md5":"451087e0f7a1c5f5ddc8c5baff2aed9a","sha256":"a8235e5ffcc9113c69050d54bd4789c8e01106b590f805b75c0a2e49f2b99890"},"downloads":-1,"filename":"ms_active_directory-1.12.1.tar.gz","has_sig":false,"md5_digest":"451087e0f7a1c5f5ddc8c5baff2aed9a","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":153305,"upload_time":"2021-12-09T18:12:03","upload_time_iso_8601":"2021-12-09T18:12:03.892710Z","url":"https://files.pythonhosted.org/packages/96/9f/2e039410cc4043235738730c899ceed6436cbf1656f59353bedf9717036d/ms_active_directory-1.12.1.tar.gz","yanked":false,"yanked_reason":null}],"1.13.0":[{"comment_text":"","digests":{"blake2b_256":"64d76f4b6e00a07b71c4f7f613ee3e6ed5dc81b69a261cdb809ccb7f35958af7","md5":"07fcc94056a0e8e04230e21a989dad54","sha256":"450b63d45c1146fe85fd1d0f5aa07db477c5b6d3e9eed25a8c94a9a576f2497c"},"downloads":-1,"filename":"ms_active_directory-1.13.0.tar.gz","has_sig":false,"md5_digest":"07fcc94056a0e8e04230e21a989dad54","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":155567,"upload_time":"2023-12-05T08:22:27","upload_time_iso_8601":"2023-12-05T08:22:27.201463Z","url":"https://files.pythonhosted.org/packages/64/d7/6f4b6e00a07b71c4f7f613ee3e6ed5dc81b69a261cdb809ccb7f35958af7/ms_active_directory-1.13.0.tar.gz","yanked":false,"yanked_reason":null}],"1.2.0":[{"comment_text":"","digests":{"blake2b_256":"2c79629d699426224f0e20564b3fd07db8fa56c0fb217033fea623416478fe5b","md5":"7ab54f581ffa0a0a55fc6b36ad410439","sha256":"a5e23501657bbe41d575f7f1efe20d51bd8a3056685a7c3d0c7374bf06a30e1c"},"downloads":-1,"filename":"ms_active_directory-1.2.0.tar.gz","has_sig":false,"md5_digest":"7ab54f581ffa0a0a55fc6b36ad410439","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":92878,"upload_time":"2021-08-29T22:37:43","upload_time_iso_8601":"2021-08-29T22:37:43.249940Z","url":"https://files.pythonhosted.org/packages/2c/79/629d699426224f0e20564b3fd07db8fa56c0fb217033fea623416478fe5b/ms_active_directory-1.2.0.tar.gz","yanked":false,"yanked_reason":null}],"1.3.0":[{"comment_text":"","digests":{"blake2b_256":"82fce1e6c37b2ef4241a435b41246d01c015e230a8b364d24874a94618b14ea7","md5":"a0eb936d28968a5b4509ab18f484e92a","sha256":"d3639616cc697c10ea7936e635b98ffcafbcce8af5d4031553e836c9ab830e28"},"downloads":-1,"filename":"ms_active_directory-1.3.0.tar.gz","has_sig":false,"md5_digest":"a0eb936d28968a5b4509ab18f484e92a","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":96004,"upload_time":"2021-08-30T07:41:21","upload_time_iso_8601":"2021-08-30T07:41:21.757369Z","url":"https://files.pythonhosted.org/packages/82/fc/e1e6c37b2ef4241a435b41246d01c015e230a8b364d24874a94618b14ea7/ms_active_directory-1.3.0.tar.gz","yanked":false,"yanked_reason":null}],"1.4.0":[{"comment_text":"","digests":{"blake2b_256":"308ffa364bf92a08388c116160907c7a3d044288dd23a2c7a1d84d5d49d088fe","md5":"40e9f2c6cd08fa08c8e91d0f8e156938","sha256":"baa38692702248e3fe6473bf9a92474b091601ed8c5588281aca0930083d5c62"},"downloads":-1,"filename":"ms_active_directory-1.4.0.tar.gz","has_sig":false,"md5_digest":"40e9f2c6cd08fa08c8e91d0f8e156938","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":96445,"upload_time":"2021-08-31T00:52:41","upload_time_iso_8601":"2021-08-31T00:52:41.275167Z","url":"https://files.pythonhosted.org/packages/30/8f/fa364bf92a08388c116160907c7a3d044288dd23a2c7a1d84d5d49d088fe/ms_active_directory-1.4.0.tar.gz","yanked":false,"yanked_reason":null}],"1.5.0":[{"comment_text":"","digests":{"blake2b_256":"56456434ab15ef2ee0bd9de51be2dcad43298286504cccfec16a13e966beddf4","md5":"441ebb2792ddff787c46933ad9c3cbdb","sha256":"85ab69fb52305bedc18e11c5348453b708065609298feb12990a8c7e12170444"},"downloads":-1,"filename":"ms_active_directory-1.5.0.tar.gz","has_sig":false,"md5_digest":"441ebb2792ddff787c46933ad9c3cbdb","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":100324,"upload_time":"2021-09-02T08:28:52","upload_time_iso_8601":"2021-09-02T08:28:52.334996Z","url":"https://files.pythonhosted.org/packages/56/45/6434ab15ef2ee0bd9de51be2dcad43298286504cccfec16a13e966beddf4/ms_active_directory-1.5.0.tar.gz","yanked":false,"yanked_reason":null}],"1.6.0":[{"comment_text":"","digests":{"blake2b_256":"738dedca24599ca52149e3da45b2ee3f7bf70f5ba74a8da3e808864021869ac5","md5":"727cfb7b1338076012a52e2c4f880a41","sha256":"8ec7d2b4aaa6f5de9905d7c7039cc90ae4789a6ae781a9a93ac1ee53c2c2fa77"},"downloads":-1,"filename":"ms_active_directory-1.6.0.tar.gz","has_sig":false,"md5_digest":"727cfb7b1338076012a52e2c4f880a41","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":109660,"upload_time":"2021-09-03T05:58:51","upload_time_iso_8601":"2021-09-03T05:58:51.636753Z","url":"https://files.pythonhosted.org/packages/73/8d/edca24599ca52149e3da45b2ee3f7bf70f5ba74a8da3e808864021869ac5/ms_active_directory-1.6.0.tar.gz","yanked":false,"yanked_reason":null}],"1.6.1":[{"comment_text":"","digests":{"blake2b_256":"be1f0eeea8f0fe38c1c6553b037537ffd94f87ae56f5511ef1afee3930b90ebe","md5":"692a1d402f84e96b9620edb7e6e7c6d4","sha256":"e4dc974451402d8b8eb782f10c06a4c9c7e2c0300991529a4ea9419f41771c53"},"downloads":-1,"filename":"ms_active_directory-1.6.1.tar.gz","has_sig":false,"md5_digest":"692a1d402f84e96b9620edb7e6e7c6d4","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":109667,"upload_time":"2021-09-04T01:31:41","upload_time_iso_8601":"2021-09-04T01:31:41.971342Z","url":"https://files.pythonhosted.org/packages/be/1f/0eeea8f0fe38c1c6553b037537ffd94f87ae56f5511ef1afee3930b90ebe/ms_active_directory-1.6.1.tar.gz","yanked":false,"yanked_reason":null}],"1.7.0":[{"comment_text":"","digests":{"blake2b_256":"b065a7b139a8db5723c068419ad04dc541410747bae16ed6d805c50d13f52627","md5":"8137f13a10e22a1b529382ce5745ab43","sha256":"254c46e6be58d0930595bd87a8a728dbd635452b657d861c8826be3355245913"},"downloads":-1,"filename":"ms_active_directory-1.7.0.tar.gz","has_sig":false,"md5_digest":"8137f13a10e22a1b529382ce5745ab43","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":119467,"upload_time":"2021-09-07T00:42:16","upload_time_iso_8601":"2021-09-07T00:42:16.434862Z","url":"https://files.pythonhosted.org/packages/b0/65/a7b139a8db5723c068419ad04dc541410747bae16ed6d805c50d13f52627/ms_active_directory-1.7.0.tar.gz","yanked":false,"yanked_reason":null}],"1.8.0":[{"comment_text":"","digests":{"blake2b_256":"1d05547a9c43e30616b116dd032f8e76d7806e2c0fe0d07b4b55387ee7beb06d","md5":"6e3e954f8a5180ecab22adafab4764b7","sha256":"d970138328118e8c5e3fc69455e3a5d9105d8452909c29d8c8fe0d7e73364421"},"downloads":-1,"filename":"ms_active_directory-1.8.0.tar.gz","has_sig":false,"md5_digest":"6e3e954f8a5180ecab22adafab4764b7","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":124125,"upload_time":"2021-09-08T06:59:54","upload_time_iso_8601":"2021-09-08T06:59:54.416823Z","url":"https://files.pythonhosted.org/packages/1d/05/547a9c43e30616b116dd032f8e76d7806e2c0fe0d07b4b55387ee7beb06d/ms_active_directory-1.8.0.tar.gz","yanked":false,"yanked_reason":null}],"1.8.1":[{"comment_text":"","digests":{"blake2b_256":"0337d80217618c74c435ecdb57e49fd42f222539200d6a2be3c4dbee9f1d81c5","md5":"cc4ecd0a07b340b3bec2ac72fa2bff91","sha256":"ad4d6a26f4aa2f2510e5c3d388a1f825cf61795b82241e6f0819e2bd2c423269"},"downloads":-1,"filename":"ms_active_directory-1.8.1.tar.gz","has_sig":false,"md5_digest":"cc4ecd0a07b340b3bec2ac72fa2bff91","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":127819,"upload_time":"2021-09-11T06:12:34","upload_time_iso_8601":"2021-09-11T06:12:34.127059Z","url":"https://files.pythonhosted.org/packages/03/37/d80217618c74c435ecdb57e49fd42f222539200d6a2be3c4dbee9f1d81c5/ms_active_directory-1.8.1.tar.gz","yanked":false,"yanked_reason":null}],"1.9.0":[{"comment_text":"","digests":{"blake2b_256":"7454e983384b57825f375fd84a5f18a82cf053601b491fcf42b36039bd844845","md5":"a8d765c2490afe4b0b8f7821f8b0902e","sha256":"8aa15482e771170b9e572dd415b0793dd2f260267fec5b0a591e46fcdf7f4706"},"downloads":-1,"filename":"ms_active_directory-1.9.0.tar.gz","has_sig":false,"md5_digest":"a8d765c2490afe4b0b8f7821f8b0902e","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":131111,"upload_time":"2021-09-12T07:18:39","upload_time_iso_8601":"2021-09-12T07:18:39.999083Z","url":"https://files.pythonhosted.org/packages/74/54/e983384b57825f375fd84a5f18a82cf053601b491fcf42b36039bd844845/ms_active_directory-1.9.0.tar.gz","yanked":false,"yanked_reason":null}],"1.9.1":[{"comment_text":"","digests":{"blake2b_256":"4521e647f465a6d7d20845ab5b6901d6b200f3cb0737b7077d313554033b9b85","md5":"3d03d131b1ec930c443eadf156ae852d","sha256":"6aa0f191e2deb23231da0e4c62f6acc2e586c3bd576d01bc8ba47aedc9902819"},"downloads":-1,"filename":"ms_active_directory-1.9.1.tar.gz","has_sig":false,"md5_digest":"3d03d131b1ec930c443eadf156ae852d","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":131114,"upload_time":"2021-09-18T01:52:45","upload_time_iso_8601":"2021-09-18T01:52:45.483361Z","url":"https://files.pythonhosted.org/packages/45/21/e647f465a6d7d20845ab5b6901d6b200f3cb0737b7077d313554033b9b85/ms_active_directory-1.9.1.tar.gz","yanked":false,"yanked_reason":null}],"1.9.2":[{"comment_text":"","digests":{"blake2b_256":"9ef09983bfbe9c3080cba062a433d2cd390a752b67e9122765efd8d05e89ea94","md5":"dda61a8a6fc6be8192d7be93e401821c","sha256":"f98fea5c966ea5e7d1460892fcd8de636c8c4465ef34bee6dacaf662b38e0c7d"},"downloads":-1,"filename":"ms_active_directory-1.9.2.tar.gz","has_sig":false,"md5_digest":"dda61a8a6fc6be8192d7be93e401821c","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":141377,"upload_time":"2021-09-30T06:50:52","upload_time_iso_8601":"2021-09-30T06:50:52.972881Z","url":"https://files.pythonhosted.org/packages/9e/f0/9983bfbe9c3080cba062a433d2cd390a752b67e9122765efd8d05e89ea94/ms_active_directory-1.9.2.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"64d76f4b6e00a07b71c4f7f613ee3e6ed5dc81b69a261cdb809ccb7f35958af7","md5":"07fcc94056a0e8e04230e21a989dad54","sha256":"450b63d45c1146fe85fd1d0f5aa07db477c5b6d3e9eed25a8c94a9a576f2497c"},"downloads":-1,"filename":"ms_active_directory-1.13.0.tar.gz","has_sig":false,"md5_digest":"07fcc94056a0e8e04230e21a989dad54","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":155567,"upload_time":"2023-12-05T08:22:27","upload_time_iso_8601":"2023-12-05T08:22:27.201463Z","url":"https://files.pythonhosted.org/packages/64/d7/6f4b6e00a07b71c4f7f613ee3e6ed5dc81b69a261cdb809ccb7f35958af7/ms_active_directory-1.13.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
