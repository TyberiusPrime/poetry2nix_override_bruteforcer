{"info":{"author":"Alex-Sherman","author_email":"asherman1024@gmail.com","bugtrack_url":null,"classifiers":[],"description":"# unsync\nUnsynchronize `asyncio` by using an ambient event loop, or executing in separate threads or processes.\n\n# Quick Overview\n\nFunctions marked with the `@unsync` decorator will behave in one of the following ways:\n* `async` functions will run in the `unsync.loop` event loop executed from `unsync.thread`\n* Regular functions will execute in `unsync.thread_executor`, a `ThreadPoolExecutor`\n  * Useful for IO bounded work that does not support `asyncio`\n* Regular functions marked with `@unsync(cpu_bound=True)` will execute in `unsync.process_executor`, a `ProcessPoolExecutor`\n  * Useful for CPU bounded work\n\nAll `@unsync` functions will return an `Unfuture` object.\nThis new future type combines the behavior of `asyncio.Future` and `concurrent.Future` with the following changes:\n* `Unfuture.set_result` is threadsafe unlike `asyncio.Future`\n* `Unfuture` instances can be awaited, even if made from `concurrent.Future`\n* `Unfuture.result()` is a blocking operation *except* in `unsync.loop`/`unsync.thread` where\n    it behaves like `asyncio.Future.result` and will throw an exception if the future is not done\n\n# Examples\n## Simple Sleep\nA simple sleeping example with `asyncio`:\n```python\nasync def sync_async():\n    await asyncio.sleep(1)\n    return 'I hate event loops'\n\n\nasync def main():\n    future1 = asyncio.create_task(sync_async())\n    future2 = asyncio.create_task(sync_async())\n\n    await future1, future2\n\n    print(future1.result() + future2.result())\n\nasyncio.run(main())\n# Takes 1 second to run\n```\n\nSame example with `unsync`:\n```python\n@unsync\nasync def unsync_async():\n    await asyncio.sleep(1)\n    return 'I like decorators'\n\nunfuture1 = unsync_async()\nunfuture2 = unsync_async()\nprint(unfuture1.result() + unfuture2.result())\n# Takes 1 second to run\n```\n\n## Multi-threading an IO-bound function\nSynchronous functions can be made to run asynchronously by executing them in a `concurrent.ThreadPoolExecutor`.\nThis can be easily accomplished by marking the regular function `@unsync`.\n```python\n@unsync\ndef non_async_function(seconds):\n    time.sleep(seconds)\n    return 'Run concurrently!'\n\nstart = time.time()\ntasks = [non_async_function(0.1) for _ in range(10)]\nprint([task.result() for task in tasks])\nprint('Executed in {} seconds'.format(time.time() - start))\n```\nWhich prints:\n\n    ['Run concurrently!', 'Run concurrently!', ...]\n    Executed in 0.10807514190673828 seconds\n\n## Continuations\nUsing `Unfuture.then` chains asynchronous calls and returns an `Unfuture` that wraps both the source, and continuation.\nThe continuation is invoked with the source Unfuture as the first argument.\nContinuations can be regular functions (which will execute synchronously), or `@unsync` functions.\n```python\n@unsync\nasync def initiate(request):\n    await asyncio.sleep(0.1)\n    return request + 1\n\n@unsync\nasync def process(task):\n    await asyncio.sleep(0.1)\n    return task.result() * 2\n\nstart = time.time()\nprint(initiate(3).then(process).result())\nprint('Executed in {} seconds'.format(time.time() - start))\n```\nWhich prints:\n\n    8\n    Executed in 0.20314741134643555 seconds\n\n## Mixing methods\n\nWe'll start by converting a regular synchronous function into a threaded `Unfuture` which will begin our request.\n```python\n@unsync\ndef non_async_function(num):\n    time.sleep(0.1)\n    return num, num + 1\n```\nWe may want to refine the result in another function, so we define the following continuation.\n```python\n@unsync\nasync def result_continuation(task):\n    await asyncio.sleep(0.1)\n    num, res = task.result()\n    return num, res * 2\n```\nWe then aggregate all the results into a single dictionary in an async function.\n```python\n@unsync\nasync def result_processor(tasks):\n    output = {}\n    for task in tasks:\n        num, res = await task\n        output[num] = res\n    return output\n```\nExecuting the full chain of `non_async_function`&rightarrow;`result_continuation`&rightarrow;`result_processor` would look like:\n```python\nstart = time.time()\nprint(result_processor([non_async_function(i).then(result_continuation) for i in range(10)]).result())\nprint('Executed in {} seconds'.format(time.time() - start))\n```\n\nWhich prints:\n\n    {0: 2, 1: 4, 2: 6, 3: 8, 4: 10, 5: 12, 6: 14, 7: 16, 8: 18, 9: 20}\n    Executed in 0.22115683555603027 seconds\n\n## Preserving typing\nAs far as we know it is not possible to change the return type of a method or function using a decorator.\nTherefore, we need a workaround to properly use IntelliSense. You have three options in general:\n\n1. Ignore type warnings.\n2. Use a suppression statement where you reach the type warning.\n\n    A. When defining the unsynced method by changing the return type to an `Unfuture`.\n    \n    B. When using the unsynced method.\n    \n3. Wrap the function without a decorator. Example:\n    ```python \n    def function_name(x: str) -> Unfuture[str]:\n        async_method = unsync(__function_name_synced)\n        return async_method(x)\n\n    def __function_name_synced(x: str) -> str:\n        return x + 'a'\n\n    future_result = function_name('b')\n    self.assertEqual('ba', future_result.result())\n   ```\n\n## Custom Event Loops\nIn order to use custom event loops, be sure to set the event loop policy before calling any `@unsync` methods.\nFor example, to use `uvloop` simply:\n\n```python\nimport unsync\nimport uvloop\n\n@unsync\nasync def main():\n    # Main entry-point.\n    ...\n\nuvloop.install() # Equivalent to asyncio.set_event_loop_policy(EventLoopPolicy())\nmain()\n```","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/alex-sherman/unsync","keywords":"","license":"MIT","maintainer":"","maintainer_email":"","name":"unsync","package_url":"https://pypi.org/project/unsync/","platform":"","project_url":"https://pypi.org/project/unsync/","project_urls":{"Homepage":"https://github.com/alex-sherman/unsync"},"provides_extra":null,"release_url":"https://pypi.org/project/unsync/1.4.0/","requires_dist":null,"requires_python":"","summary":"Unsynchronize asyncio","version":"1.4.0","yanked":false,"yanked_reason":null},"last_serial":11786729,"releases":{"0.1":[{"comment_text":"","digests":{"blake2b_256":"516d1b804b0bdd27183da5d29e6d5613d9bdd8d9ae5a957ab1f56c6693b01aef","md5":"5d23e24305dce5309efe3ef089984431","sha256":"fdf2871ea3d19e8930df68c2301df8cdf5919976c4913a0c10f063b1f3cc7065"},"downloads":-1,"filename":"unsync-0.1.tar.gz","has_sig":false,"md5_digest":"5d23e24305dce5309efe3ef089984431","packagetype":"sdist","python_version":"source","requires_python":null,"size":1248,"upload_time":"2018-02-06T02:21:47","upload_time_iso_8601":"2018-02-06T02:21:47.692111Z","url":"https://files.pythonhosted.org/packages/51/6d/1b804b0bdd27183da5d29e6d5613d9bdd8d9ae5a957ab1f56c6693b01aef/unsync-0.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0":[{"comment_text":"","digests":{"blake2b_256":"26d9d2cd596f63bbc7ee44529262cdb16e44293d1e321a3701f75d4fbdefb70c","md5":"64760da205e0bb72088894d92b054da0","sha256":"ad621a96af6dd4b21d338cf191b583a28fd38a22d92f1f348e4b7f312a7c5607"},"downloads":-1,"filename":"unsync-1.0.tar.gz","has_sig":false,"md5_digest":"64760da205e0bb72088894d92b054da0","packagetype":"sdist","python_version":"source","requires_python":null,"size":4877,"upload_time":"2018-03-08T22:26:43","upload_time_iso_8601":"2018-03-08T22:26:43.138271Z","url":"https://files.pythonhosted.org/packages/26/d9/d2cd596f63bbc7ee44529262cdb16e44293d1e321a3701f75d4fbdefb70c/unsync-1.0.tar.gz","yanked":false,"yanked_reason":null}],"1.1":[{"comment_text":"","digests":{"blake2b_256":"6861e3cce3c515e0b5afb6be0778a2e7e9f7c39f8723b6d55f8470a88b1919b5","md5":"5fff8cea0da4d127cb6888c78dba3f4f","sha256":"8ec5e1ab4a55b7c7caf8c17eb7990086e6b333a37cb6b49498d39dfd40fc53bc"},"downloads":-1,"filename":"unsync-1.1.tar.gz","has_sig":false,"md5_digest":"5fff8cea0da4d127cb6888c78dba3f4f","packagetype":"sdist","python_version":"source","requires_python":null,"size":5079,"upload_time":"2018-09-01T03:38:48","upload_time_iso_8601":"2018-09-01T03:38:48.813987Z","url":"https://files.pythonhosted.org/packages/68/61/e3cce3c515e0b5afb6be0778a2e7e9f7c39f8723b6d55f8470a88b1919b5/unsync-1.1.tar.gz","yanked":false,"yanked_reason":null}],"1.2":[{"comment_text":"","digests":{"blake2b_256":"7d395fb9bf1bd5bd2352761cd5e78d075776ba6f22865c8d954206968ed9bb99","md5":"ad5ac45bacd0bea84e7924a92d9291e5","sha256":"cce8041e4c548a6acaeed79b86a0c22bde7ff91206f6f4d40b0e9145328e746b"},"downloads":-1,"filename":"unsync-1.2.tar.gz","has_sig":false,"md5_digest":"ad5ac45bacd0bea84e7924a92d9291e5","packagetype":"sdist","python_version":"source","requires_python":null,"size":5394,"upload_time":"2019-04-29T17:52:57","upload_time_iso_8601":"2019-04-29T17:52:57.090799Z","url":"https://files.pythonhosted.org/packages/7d/39/5fb9bf1bd5bd2352761cd5e78d075776ba6f22865c8d954206968ed9bb99/unsync-1.2.tar.gz","yanked":false,"yanked_reason":null}],"1.2.1":[{"comment_text":"","digests":{"blake2b_256":"e0dda2b9817153992ded1686d44becf4fe3a162ae360c0aa5a02054a1ae314bb","md5":"59fe04e891bf755da1e6558ee50e9490","sha256":"ae7c7928013c25f4e23d18071a061151299f71abfdc84f9382c23979c69665c6"},"downloads":-1,"filename":"unsync-1.2.1.tar.gz","has_sig":false,"md5_digest":"59fe04e891bf755da1e6558ee50e9490","packagetype":"sdist","python_version":"source","requires_python":null,"size":5450,"upload_time":"2019-08-15T04:01:11","upload_time_iso_8601":"2019-08-15T04:01:11.972389Z","url":"https://files.pythonhosted.org/packages/e0/dd/a2b9817153992ded1686d44becf4fe3a162ae360c0aa5a02054a1ae314bb/unsync-1.2.1.tar.gz","yanked":false,"yanked_reason":null}],"1.3":[{"comment_text":"","digests":{"blake2b_256":"a16e9139d5a52d83703e1550617b6e99b6fb8411ba9384493f0b514bdd3ec899","md5":"565e17d95131e634b768359b1ea489bf","sha256":"fb0175b4487bf93b5cc91fcc87654e05da16bced9e6015c120567a3056e399fb"},"downloads":-1,"filename":"unsync-1.3.tar.gz","has_sig":false,"md5_digest":"565e17d95131e634b768359b1ea489bf","packagetype":"sdist","python_version":"source","requires_python":null,"size":7902,"upload_time":"2020-12-29T03:54:46","upload_time_iso_8601":"2020-12-29T03:54:46.381048Z","url":"https://files.pythonhosted.org/packages/a1/6e/9139d5a52d83703e1550617b6e99b6fb8411ba9384493f0b514bdd3ec899/unsync-1.3.tar.gz","yanked":false,"yanked_reason":null}],"1.3.1":[{"comment_text":"","digests":{"blake2b_256":"66e34585e865b3789e69f2dea61d1a702c4ea20a237458bc7a1c4533b8991db7","md5":"d30fb8a66e376c9c551fb4a5599be608","sha256":"a4be404c24a8dc94ea37430f454d255df67fb6ba4bd2ad151fd9e7065b15890a"},"downloads":-1,"filename":"unsync-1.3.1.tar.gz","has_sig":false,"md5_digest":"d30fb8a66e376c9c551fb4a5599be608","packagetype":"sdist","python_version":"source","requires_python":null,"size":8798,"upload_time":"2021-03-19T22:02:42","upload_time_iso_8601":"2021-03-19T22:02:42.338786Z","url":"https://files.pythonhosted.org/packages/66/e3/4585e865b3789e69f2dea61d1a702c4ea20a237458bc7a1c4533b8991db7/unsync-1.3.1.tar.gz","yanked":false,"yanked_reason":null}],"1.3.2":[{"comment_text":"","digests":{"blake2b_256":"462c7ad03d295c4057edf337e342d906c0e0130cf8a61b32218d26ea4ed7d10f","md5":"303b8d43948a1318a7e60652c8e02ca8","sha256":"7750480c49be0e8f56f501e7998e6052e231d6047ded7ac20588a241fe560150"},"downloads":-1,"filename":"unsync-1.3.2-py3.6.egg","has_sig":false,"md5_digest":"303b8d43948a1318a7e60652c8e02ca8","packagetype":"bdist_egg","python_version":"3.6","requires_python":null,"size":8021,"upload_time":"2021-10-21T00:46:54","upload_time_iso_8601":"2021-10-21T00:46:54.405150Z","url":"https://files.pythonhosted.org/packages/46/2c/7ad03d295c4057edf337e342d906c0e0130cf8a61b32218d26ea4ed7d10f/unsync-1.3.2-py3.6.egg","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"74f880e4d6a6e9f36d7dc09e10522d98277c4576924f9f450100d57c8a80c269","md5":"6faa2e93bb40f36eb20c62cee00155b3","sha256":"88598831e72a771b12697f5384e0bb860c88b1928fe22c47a3d03a5ab8644db1"},"downloads":-1,"filename":"unsync-1.3.2.tar.gz","has_sig":false,"md5_digest":"6faa2e93bb40f36eb20c62cee00155b3","packagetype":"sdist","python_version":"source","requires_python":null,"size":8785,"upload_time":"2021-03-27T22:23:47","upload_time_iso_8601":"2021-03-27T22:23:47.380978Z","url":"https://files.pythonhosted.org/packages/74/f8/80e4d6a6e9f36d7dc09e10522d98277c4576924f9f450100d57c8a80c269/unsync-1.3.2.tar.gz","yanked":false,"yanked_reason":null}],"1.4.0":[{"comment_text":"","digests":{"blake2b_256":"ea6b8d9699d37fe8c43c76fda4a7f93ae6aef129576f75c3cacfc9a78a7cc984","md5":"6b2119ba4a7e2795dbb544e0cd00705b","sha256":"a29e0f8952ffb0b3a0453ce436819a5a1ba2febbb5caa707c319f6f98d35f3c5"},"downloads":-1,"filename":"unsync-1.4.0.tar.gz","has_sig":false,"md5_digest":"6b2119ba4a7e2795dbb544e0cd00705b","packagetype":"sdist","python_version":"source","requires_python":null,"size":8796,"upload_time":"2021-10-21T00:46:56","upload_time_iso_8601":"2021-10-21T00:46:56.488320Z","url":"https://files.pythonhosted.org/packages/ea/6b/8d9699d37fe8c43c76fda4a7f93ae6aef129576f75c3cacfc9a78a7cc984/unsync-1.4.0.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"ea6b8d9699d37fe8c43c76fda4a7f93ae6aef129576f75c3cacfc9a78a7cc984","md5":"6b2119ba4a7e2795dbb544e0cd00705b","sha256":"a29e0f8952ffb0b3a0453ce436819a5a1ba2febbb5caa707c319f6f98d35f3c5"},"downloads":-1,"filename":"unsync-1.4.0.tar.gz","has_sig":false,"md5_digest":"6b2119ba4a7e2795dbb544e0cd00705b","packagetype":"sdist","python_version":"source","requires_python":null,"size":8796,"upload_time":"2021-10-21T00:46:56","upload_time_iso_8601":"2021-10-21T00:46:56.488320Z","url":"https://files.pythonhosted.org/packages/ea/6b/8d9699d37fe8c43c76fda4a7f93ae6aef129576f75c3cacfc9a78a7cc984/unsync-1.4.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
