{"info":{"author":"Alex Tkachenko","author_email":"preusx.dev@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 2 - Pre-Alpha","Environment :: Web Environment","Framework :: Django","Intended Audience :: Developers","License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python :: 3","Topic :: Utilities"],"description":"# Pipeline runner\n\n## Installation\n\n```sh\npip install px-pipeline\n```\n\n## Usage\n\nSimple usage:\n\n```python\nfrom px_pipeline import StraightPipeline, StopFlow\n\n\ndef second_pipeline_handler(context: dict) -> Optional[dict]:\n  if 'nothing' in context:\n    # You could return empty result so nothing would happen with context.\n    return\n\n  # You could mutate context with new data\n  context['update'] = True\n\n  # Or return a chunk of data, that will update context object.\n  return {'update': False}\n\n\ndef flow_stopper(context):\n  if context.get('update', False):\n    return {'stopped': False}\n\n  # Or you could raise an error that will stop pipeline from further execution.\n  raise StopFlow({'stopped': True})\n\n\npipeline = StraightPipeline((\n  # Callables can be used in form of import strings.\n  'some.path.to.your.execution_function',\n  second_pipeline_handler,\n  flow_stopper,\n))\n\nresult = pipeline({})\nprint(result['stopped']) # > True\nprint(result['update']) # > False\n\n\npipeline = StraightPipeline((\n  flow_stopper,\n  lambda context: {'called': True},\n))\n\nresult = pipeline({'update': True})\nprint(result['stopped']) # > False\nprint(result['update']) # > True\nprint(result['called']) # > True\n\n# Here flow stopped and lambda function were not executed.\nresult = pipeline({'update': False})\nprint(result['stopped']) # > True\nprint(result['update']) # > False\nprint('called' in result) # > False\n```\n\n### Filter\n\nIt's a wrapper around `Pipeline` class, by default it uses a `StraightPipeline` runner. It works similarly to Django's `Signal` API and gives the ability to add and remove handlers from pipeline runners.\n\nIt might be useful when you have an breakpoints in your app/library that might be extended from outside. It not just an event that fires, and only informs about something, but you can also change incoming the data in some way that fits your logic.\n\nSo based on previous code it could look like that:\n\n```python\nfrom px_pipeline import Filter, StraightPipeline\n\n\ntable_data_for_report_generated = Filter(\n  # Initial pipeline that your app provides for this breakpoint.\n  initial=(\n    'some.path.to.your.execution_function',\n    second_pipeline_handler,\n  ),\n  # Class that will handle pipeline running. Optional.\n  pipeline_class=StraightPipeline,\n  # Default priority which your handlers will have by default.\n  default_priority=10,\n)\n\n# ...\n\n# Elsewhere outside your app you may add handlers to pipeline runner.\n# Handlers by default will be run in the order they was registered.\ntable_data_for_report_generated.add(\n  # Handle function.\n  flow_stopper,\n  # This function's priority. Optional.\n  priority=10,\n  # By default there are 3 layers of execution:\n  #   1. PRECEDE - Those handlers that must be executed at first.\n  #   2. AVERAGE - Default layer where all handlers executes.\n  #   3. FINAL - Those handlers that must be executed at the end.\n  # Layers are just another type priority separation.\n  # Optional.\n  layer=table_data_for_report_generated.Layer.PRECEDE,\n)\n\n# ...\n\n# Somewhere in your code you run this filter.\n# Runs `pipeline_class` that you were provided previously(or default one).\nresult = table_data_for_report_generated({})\nprint(result['stopped']) # > True\nprint(result['update']) # > False\n```\n# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [0.1.2]\n### Fixed\n- Fixed empty filter run.\n\n## [0.1.1]\n### Added\n- Filters API.\n\n## [0.1.0]\nInitial version.\n\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"","license":"MIT License","maintainer":"","maintainer_email":"","name":"px-pipeline","package_url":"https://pypi.org/project/px-pipeline/","platform":null,"project_url":"https://pypi.org/project/px-pipeline/","project_urls":null,"provides_extra":null,"release_url":"https://pypi.org/project/px-pipeline/0.1.2/","requires_dist":null,"requires_python":">=3.6","summary":"Pipeline runner.","version":"0.1.2","yanked":false,"yanked_reason":null},"last_serial":14508584,"releases":{"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"ee04ff864b54039a3e595e3bf311c8db0c6a18ba521c18d71248bbccf78a8f8e","md5":"8a9b1579a3863985fe884e605e75323c","sha256":"59fcdb85c6b26793557e893fd5d4d26ac5ce575b7a4c6e3455e37ed7abbb3dc7"},"downloads":-1,"filename":"px-pipeline-0.1.0.tar.gz","has_sig":false,"md5_digest":"8a9b1579a3863985fe884e605e75323c","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":4701,"upload_time":"2022-05-01T11:16:23","upload_time_iso_8601":"2022-05-01T11:16:23.378889Z","url":"https://files.pythonhosted.org/packages/ee/04/ff864b54039a3e595e3bf311c8db0c6a18ba521c18d71248bbccf78a8f8e/px-pipeline-0.1.0.tar.gz","yanked":false,"yanked_reason":null}],"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"b9d2ff32203b1ec03379f83b4614a55c75185ec1c33a58d501f8b82d5b3144b0","md5":"3023c4196ce902c7e9e5ffaed0b664b6","sha256":"87e288f4065d9c38994624b8cd88575bb78ca10a6c079d33cd09dc3312f66311"},"downloads":-1,"filename":"px-pipeline-0.1.1.tar.gz","has_sig":false,"md5_digest":"3023c4196ce902c7e9e5ffaed0b664b6","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":6559,"upload_time":"2022-07-18T14:18:29","upload_time_iso_8601":"2022-07-18T14:18:29.991444Z","url":"https://files.pythonhosted.org/packages/b9/d2/ff32203b1ec03379f83b4614a55c75185ec1c33a58d501f8b82d5b3144b0/px-pipeline-0.1.1.tar.gz","yanked":false,"yanked_reason":null}],"0.1.2":[{"comment_text":"","digests":{"blake2b_256":"8493a047f847d5fad7a1e6d7a313073b9a5f1915e26c337d18b280f7ce47a195","md5":"6a3c86edaebc134ac7da151d0f98cd4e","sha256":"c550fe0ef6493af08d5ef1a6e2fd945f47d7957bb06b33a80c44330d0c35f73b"},"downloads":-1,"filename":"px-pipeline-0.1.2.tar.gz","has_sig":false,"md5_digest":"6a3c86edaebc134ac7da151d0f98cd4e","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":6592,"upload_time":"2022-07-21T19:12:19","upload_time_iso_8601":"2022-07-21T19:12:19.724010Z","url":"https://files.pythonhosted.org/packages/84/93/a047f847d5fad7a1e6d7a313073b9a5f1915e26c337d18b280f7ce47a195/px-pipeline-0.1.2.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"8493a047f847d5fad7a1e6d7a313073b9a5f1915e26c337d18b280f7ce47a195","md5":"6a3c86edaebc134ac7da151d0f98cd4e","sha256":"c550fe0ef6493af08d5ef1a6e2fd945f47d7957bb06b33a80c44330d0c35f73b"},"downloads":-1,"filename":"px-pipeline-0.1.2.tar.gz","has_sig":false,"md5_digest":"6a3c86edaebc134ac7da151d0f98cd4e","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":6592,"upload_time":"2022-07-21T19:12:19","upload_time_iso_8601":"2022-07-21T19:12:19.724010Z","url":"https://files.pythonhosted.org/packages/84/93/a047f847d5fad7a1e6d7a313073b9a5f1915e26c337d18b280f7ce47a195/px-pipeline-0.1.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
