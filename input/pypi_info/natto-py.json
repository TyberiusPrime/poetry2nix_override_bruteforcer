{"info":{"author":"Brooke M. Fujita","author_email":"buruzaemon@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Intended Audience :: Developers","Intended Audience :: Science/Research","License :: OSI Approved :: BSD License","Natural Language :: Japanese","Operating System :: MacOS :: MacOS X","Operating System :: Microsoft :: Windows","Operating System :: POSIX :: BSD","Operating System :: POSIX :: Linux","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Software Development :: Libraries :: Python Modules","Topic :: Text Processing :: Linguistic"],"description":"natto-py\r\n========\r\n\r\nWhat is natto-py?\r\n-----------------\r\nA package leveraging FFI (foreign function interface), ``natto-py`` combines\r\nthe Python_ programming language with MeCab_, the part-of-speech and\r\nmorphological analyzer for the Japanese language. No compiler is necessary, as\r\nit is **not** a C extension. ``natto-py`` will run on Mac OS, Windows and\r\n\\*nix.\r\n\r\nYou can learn more about `natto-py at GitHub`_.\r\n\r\nIf you are still using `Python 2 after sunset`_, please stick with version\r\n``natto-py==0.9.2``.\r\n\r\n|version| |pyversions| |license| |github-actions| |readthedocs|\r\n\r\nRequirements\r\n------------\r\n``natto-py`` requires the following:\r\n\r\n- An existing installation of `MeCab 0.996`_\r\n- A system dictionary, like `IPA`_, `Juman`_ or `Unidic`_\r\n- `cffi 0.8.6`_ or greater\r\n\r\nThe following Python 3 versions are supported:\r\n\r\n- `Python 3.7`_\r\n- `Python 3.8`_\r\n- `Python 3.9`_\r\n- `Python 3.10`_\r\n\r\nFor Python 2, please use version ``0.9.2``.\r\n\r\nInstallation\r\n------------\r\nInstall ``natto-py`` as you would any other Python package:\r\n\r\n.. code-block:: bash\r\n\r\n    $ pip install natto-py\r\n\r\nThis will automatically install the ``cffi`` package, which ``natto-py`` uses\r\nto bind to the ``mecab`` library.\r\n\r\nAutomatic Configuration\r\n-----------------------\r\nAs long as the ``mecab`` (and ``mecab-config`` for \\*nix and Mac OS)\r\nexecutables are on your ``PATH``, ``natto-py`` does not require any explicit\r\nconfiguration.\r\n\r\n- On \\*nix and Mac OS, it queries ``mecab-config`` to discover the path to the ``libmecab.so`` or ``libmecab.dylib``, respectively.\r\n- On Windows, it queries the Windows Registry to locate the MeCab installation folder.\r\n- In order to convert character encodings to/from Unicode, ``natto-py`` will examine the charset of the ``mecab`` system dictionary.\r\n\r\nExplicit configuration via MECAB_PATH and MECAB_CHARSET\r\n-------------------------------------------------------\r\nIf ``natto-py`` for some reason cannot locate the ``mecab`` library,\r\nor if it cannot determine the correct charset used internally by\r\n``mecab``, then you will need to set the ``MECAB_PATH`` and ``MECAB_CHARSET``\r\nenvironment variables.\r\n\r\n- Set the ``MECAB_PATH`` environment variable to the exact name/path to your ``mecab`` library.\r\n- Set the ``MECAB_CHARSET`` environment variable to the ``charset`` character encoding used by your system dictionary.\r\n\r\ne.g., for Mac OS:\r\n\r\n.. code-block:: bash\r\n\r\n    export MECAB_PATH=/usr/local/Cellar/mecab/0.996/lib/libmecab.dylib\r\n    export MECAB_CHARSET=utf8\r\n\r\ne.g., for bash on UNIX/Linux:\r\n\r\n.. code-block:: bash\r\n\r\n    export MECAB_PATH=/usr/local/lib/libmecab.so\r\n    export MECAB_CHARSET=euc-jp\r\n\r\ne.g., on Windows:\r\n\r\n.. code-block:: bat\r\n\r\n    set MECAB_PATH=C:\\Program Files\\MeCab\\bin\\libmecab.dll\r\n    set MECAB_CHARSET=shift-jis\r\n\r\ne.g., from within a Python program:\r\n\r\n.. code-block:: python\r\n\r\n    import os\r\n\r\n    os.environ['MECAB_PATH']='/usr/local/lib/libmecab.so'\r\n    os.environ['MECAB_CHARSET']='utf-16'\r\n\r\nUsage\r\n-----\r\nHere's a very quick guide to using ``natto-py``.\r\n\r\nInstantiate a reference to the ``mecab`` library, and display some details:\r\n\r\n.. code-block:: python\r\n\r\n    from natto import MeCab\r\n\r\n    nm = MeCab()\r\n    print(nm)\r\n\r\n    # displays details about the MeCab instance\r\n    <natto.mecab.MeCab\r\n     model=<cdata 'mecab_model_t *' 0x801c16300>,\r\n     tagger=<cdata 'mecab_t *' 0x801c17470>,\r\n     lattice=<cdata 'mecab_lattice_t *' 0x801c196c0>,\r\n     libpath=\"/usr/local/lib/libmecab.so\",\r\n     options={},\r\n     dicts=[<natto.dictionary.DictionaryInfo\r\n             dictionary='mecab_dictionary_info_t *' 0x801c19540>,\r\n             filepath=\"/usr/local/lib/mecab/dic/ipadic/sys.dic\",\r\n             charset=utf8,\r\n             type=0],\r\n     version=0.996>\r\n\r\n----\r\n\r\nDisplay details about the ``mecab`` system dictionary used:\r\n\r\n.. code-block:: python\r\n\r\n    sysdic = nm.dicts[0]\r\n    print(sysdic)\r\n\r\n    # displays the MeCab system dictionary info\r\n    <natto.dictionary.DictionaryInfo\r\n     dictionary='mecab_dictionary_info_t *' 0x801c19540>,\r\n     filepath=\"/usr/local/lib/mecab/dic/ipadic/sys.dic\",\r\n     charset=utf8,\r\n     type=0>\r\n\r\n----\r\n\r\nParse Japanese text and send the MeCab result as a single string to\r\n``stdout``:\r\n\r\n.. code-block:: python\r\n\r\n    print(nm.parse('ピンチの時には必ずヒーローが現れる。'))\r\n\r\n    # MeCab result as a single string\r\n    ピンチ    名詞,一般,*,*,*,*,ピンチ,ピンチ,ピンチ\r\n    の      助詞,連体化,*,*,*,*,の,ノ,ノ\r\n    時      名詞,非自立,副詞可能,*,*,*,時,トキ,トキ\r\n    に      助詞,格助詞,一般,*,*,*,に,ニ,ニ\r\n    は      助詞,係助詞,*,*,*,*,は,ハ,ワ\r\n    必ず    副詞,助詞類接続,*,*,*,*,必ず,カナラズ,カナラズ\r\n    ヒーロー  名詞,一般,*,*,*,*,ヒーロー,ヒーロー,ヒーロー\r\n    が      助詞,格助詞,一般,*,*,*,が,ガ,ガ\r\n    現れる  動詞,自立,*,*,一段,基本形,現れる,アラワレル,アラワレル\r\n    。      記号,句点,*,*,*,*,。,。,。\r\n    EOS\r\n\r\n----\r\n\r\nNext, try parsing the text with MeCab node parsing. A generator yielding the\r\nMeCabNode instances lets you efficiently iterate over the output without first\r\nmaterializing each and every resulting MeCabNode instance. The MeCabNode\r\ninstances yielded allow access to more detailed information about each\r\nmorpheme.\r\n\r\nHere we use a `Python with-statement`_ to automatically clean up after we\r\nfinish node parsing with the MeCab tagger. This is the recommended approach\r\nfor using ``natto-py`` in a production environment:\r\n\r\n.. code-block:: python\r\n\r\n    # Use a Python with-statement to ensure mecab_destroy is invoked\r\n    #\r\n    with MeCab() as nm:\r\n        for n in nm.parse('ピンチの時には必ずヒーローが現れる。', as_nodes=True):\r\n    ...     # ignore any end-of-sentence nodes\r\n    ...     if not n.is_eos():\r\n    ...         print('{}\\t{}'.format(n.surface, n.cost))\r\n    ...\r\n    ピンチ    3348\r\n    の        3722\r\n    時        5176\r\n    に        5083\r\n    は        5305\r\n    必ず    7525\r\n    ヒーロー   11363\r\n    が       10508\r\n    現れる   10841\r\n    。        7127\r\n\r\n----\r\n\r\nMeCab output formatting is extremely flexible and is highly recommended for\r\nany serious natural language processing task. Rather than parsing the MeCab\r\noutput as a single, large string, use MeCab's ``--node-format`` option\r\n(short form ``-F``) to customize the node's ``feature`` attribute.\r\n\r\n- morpheme surface\r\n- part-of-speech\r\n- part-of-speech ID\r\n- pronunciation\r\n\r\nIt is good practice when using ``--node-format`` to also specify node \r\nformatting in the case where the morpheme cannot be found in the dictionary,\r\nby using ``--unk-format`` (short form ``-U``).\r\n\r\nThis example formats the node ``feature`` to capture the items above as a\r\ncomma-separated value:\r\n\r\n.. code-block:: python\r\n\r\n    # MeCab options used:\r\n    #\r\n    # -F    ... short-form of --node-format\r\n    # %m    ... morpheme surface\r\n    # %f[0] ... part-of-speech\r\n    # %h    ... part-of-speech id (ipadic)\r\n    # %f[8] ... pronunciation\r\n    # \r\n    # -U    ... short-form of --unk-format\r\n    #           output ?,?,?,? for morphemes not in dictionary\r\n    #\r\n    with MeCab(r'-F%m,%f[0],%h,%f[8]\\n -U?,?,?,?\\n') as nm:\r\n        for n in nm.parse('ピンチの時には必ずヒーローが現れる。', as_nodes=True):\r\n    ...     # only normal nodes, ignore any end-of-sentence and unknown nodes\r\n    ...     if n.is_nor():\r\n    ...         print(n.feature)\r\n    ...\r\n    ピンチ,名詞,38,ピンチ\r\n    の,助詞,24,ノ\r\n    時,名詞,66,トキ\r\n    に,助詞,13,ニ\r\n    は,助詞,16,ワ\r\n    必ず,副詞,35,カナラズ\r\n    ヒーロー,名詞,38,ヒーロー\r\n    が,助詞,13,ガ\r\n    現れる,動詞,31,アラワレル\r\n    。,記号,7,。\r\n\r\n\r\n----\r\n\r\n`Partial parsing`_ (制約付き解析), allows you to pass hints to MeCab on\r\nhow to tokenize morphemes when parsing. Most useful are boundary constraint\r\nparsing and feature constraint parsing.\r\n\r\nWith boundary constraint parsing, you can specify either a compiled ``re``\r\nregular expression object or a string to tell MeCab where the boundaries of\r\na morpheme should be. Use the ``boundary_constraints`` keyword. For hints on\r\ntokenization, please see `Regular expression operations`_ and `re.finditer`_\r\nin particular.\r\n\r\nThis example uses the ``-F`` node-format option to customize the resulting\r\n``MeCabNode`` feature attribute to extract:\r\n\r\n- ``%m`` - morpheme surface\r\n- ``%f[0]`` - node part-of-speech\r\n- ``%s`` - node ``stat`` status value, 1 is ``unknown``\r\n\r\nNote that any such morphemes captured will have node ``stat`` status of 1 (unknown):\r\n\r\n.. code-block:: python\r\n\r\n    import re\r\n\r\n    with MeCab(r'-F%m,\\s%f[0],\\s%s\\n') as nm:\r\n\r\n        text = '俺は努力したよっ？ お前の10倍、いや100倍1000倍したよっ！'\r\n        \r\n        # capture 10倍, 100倍 and 1000倍 as single parts-of-speech\r\n        pattern = re.compile('10+倍') \r\n\r\n        for n in nm.parse(text, boundary_constraints=pattern, as_nodes=True):\r\n    ...     print(n.feature)\r\n    ...\r\n    俺, 名詞, 0\r\n    は, 助詞, 0\r\n    努力, 名詞, 0\r\n    し, 動詞, 0\r\n    たよっ, 動詞, 0\r\n    ？, 記号, 0\r\n    お前, 名詞, 0\r\n    の, 助詞, 0\r\n    10倍, 名詞, 1\r\n    、, 記号, 0\r\n    いや, 接続詞, 0\r\n    100倍, 名詞, 1\r\n    1000倍, 名詞, 1\r\n    し, 動詞, 0\r\n    たよっ, 動詞, 0\r\n    ！, 記号, 0\r\n    EOS\r\n\r\nWith feature constraint parsing, you can provide instructions to MeCab\r\non what feature to use for a matching morpheme. Use the \r\n``feature_constraints`` keyword to pass in a ``tuple`` containing elements\r\nthat themselves are ``tuple`` instances with a specific morpheme (str) \r\nand a corresponding feature (str), in order of constraint precedence:\r\n\r\n.. code-block:: python\r\n\r\n    with MeCab(r'-F%m,\\s%f[0],\\s%s\\n') as nm:\r\n\r\n        text = '心の中で3回唱え、 ヒーロー見参！ヒーロー見参！ヒーロー見参！'\r\n        features = (('ヒーロー見参', '感動詞'),)\r\n\r\n        for n in nm.parse(text, feature_constraints=features, as_nodes=True):\r\n    ...     print(n.feature)\r\n    ...\r\n    心, 名詞, 0\r\n    の, 助詞, 0\r\n    中, 名詞, 0\r\n    で, 助詞, 0\r\n    3, 名詞, 1\r\n    回, 名詞, 0\r\n    唱え, 動詞, 0\r\n    、, 記号, 0\r\n    ヒーロー見参, 感動詞, 1\r\n    ！, 記号, 0\r\n    ヒーロー見参, 感動詞, 1\r\n    ！, 記号, 0\r\n    ヒーロー見参, 感動詞, 1\r\n    ！, 記号, 0\r\n    EOS\r\n\r\n\r\n----\r\n\r\nLearn More\r\n----------\r\n- Examples and more detailed information about ``natto-py`` can be found on the `project Wiki`_.\r\n- Working code in Jupyter notebook form can be found under this `project's notebooks directory`_.\r\n- `API documentation on Read the Docs`_.\r\n\r\nContributing to natto-py\r\n------------------------\r\n- Use git_ and `check out the latest code at GitHub`_ to make sure the\r\n  feature hasn't been implemented or the bug hasn't been fixed yet.\r\n- `Browse the issue tracker`_ to make sure someone already hasn't requested it\r\n  and/or contributed it.\r\n- Fork the project.\r\n- Start a feature/bugfix branch.\r\n- Commit and push until you are happy with your contribution.\r\n- Make sure to add tests for it. This is important so I don't break it in a\r\n  future version unintentionally.\r\n- Please try not to mess with the ``setup.py``, ``CHANGELOG``, or version\r\n  files. If you must have your own version, that is fine, but please isolate\r\n  to its own commit so I can cherry-pick around it.\r\n- This project uses the following packages for development:\r\n\r\n  - Sphinx_ for document generation\r\n  - twine_ for secure uploads during release\r\n  - unittest_ for unit tests, as it is very natural and easy-to-use\r\n  - PyYAML_ for data loading during tests\r\n\r\nChangelog\r\n---------\r\nPlease see the ``CHANGELOG`` for the release history.\r\n\r\nCopyright\r\n---------\r\nCopyright |copy| 2022, Brooke M. Fujita. All rights reserved. Please see\r\nthe ``LICENSE`` file for further details.\r\n\r\n.. |version| image:: https://badge.fury.io/py/natto-py.svg\r\n    :target: https://pypi.org/project/natto-py/ \r\n.. |pyversions| image:: https://img.shields.io/pypi/pyversions/natto-py.svg?style=flat\r\n.. |github-actions| image:: https://github.com/buruzaemon/natto-py/actions/workflows/automated-test-actions.yml/badge.svg\r\n.. |license| image:: https://img.shields.io/badge/license-BSD-blue.svg\r\n    :target: https://raw.githubusercontent.com/buruzaemon/natto-py/master/LICENSE \r\n.. |readthedocs| image:: https://readthedocs.org/projects/natto-py/badge/?version=master\r\n    :target: http://natto-py.readthedocs.org/en/master/?badge=master\r\n    :alt: Documentation Status\r\n.. _Python: http://www.python.org/\r\n.. _MeCab: http://taku910.github.io/mecab/\r\n.. _Python 2 after sunset: https://www.python.org/doc/sunset-python-2/\r\n.. _IPA: http://taku910.github.io/mecab/#download\r\n.. _Juman: http://taku910.github.io/mecab/#download\r\n.. _Unidic: http://taku910.github.io/mecab/#download\r\n.. _natto-py at GitHub: https://github.com/buruzaemon/natto-py\r\n.. _MeCab 0.996: http://taku910.github.io/mecab/#download\r\n.. _cffi 0.8.6: https://bitbucket.org/cffi/cffi\r\n.. _Python 3.7: https://docs.python.org/3.7/whatsnew/3.7.html \r\n.. _Python 3.8: https://docs.python.org/3.8/whatsnew/3.8.html \r\n.. _Python 3.9: https://docs.python.org/3.9/whatsnew/3.9.html \r\n.. _Python 3.10: https://docs.python.org/3/whatsnew/3.10.html \r\n.. _NLTK3's lead: https://github.com/nltk/nltk/wiki/Porting-your-code-to-NLTK-3.0\r\n.. _Python with-statement: https://www.python.org/dev/peps/pep-0343/\r\n.. _Partial parsing: http://taku910.github.io/mecab/partial.html\r\n.. _Regular expression operations: https://docs.python.org/3/library/re.html\r\n.. _re.finditer: https://docs.python.org/3/library/re.html#re.finditer\r\n.. _project Wiki: https://github.com/buruzaemon/natto-py/wiki \r\n.. _project's notebooks directory: https://github.com/buruzaemon/natto-py/tree/master/notebooks\r\n.. _API documentation on Read the Docs: http://natto-py.readthedocs.org/en/master/\r\n.. _git: http://git-scm.com/downloads\r\n.. _check out the latest code at GitHub: https://github.com/buruzaemon/natto-py\r\n.. _Browse the issue tracker: https://github.com/buruzaemon/natto-py/issues\r\n.. _Sphinx: http://sphinx-doc.org/\r\n.. _twine: https://github.com/pypa/twine\r\n.. _unittest: http://pythontesting.net/framework/unittest/unittest-introduction/\r\n.. _PyYAML: https://github.com/yaml/pyyaml \r\n.. |copy| unicode:: 0xA9 .. copyright sign\r\n\n\n","description_content_type":"text/x-rst","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/buruzaemon/natto-py","keywords":"MeCab 和布蕪 納豆 Japanese morphological analyzer NLP 形態素解析 自然言語処理 FFI binding バインディング","license":"BSD","maintainer":"","maintainer_email":"","name":"natto-py","package_url":"https://pypi.org/project/natto-py/","platform":null,"project_url":"https://pypi.org/project/natto-py/","project_urls":{"Homepage":"https://github.com/buruzaemon/natto-py"},"provides_extra":null,"release_url":"https://pypi.org/project/natto-py/1.0.1/","requires_dist":null,"requires_python":"","summary":"A Tasty Python Binding with MeCab(FFI-based, no SWIG or compiler necessary)","version":"1.0.1","yanked":false,"yanked_reason":null},"last_serial":15014673,"releases":{"0.0.1":[{"comment_text":"","digests":{"blake2b_256":"6c6edf043309ee9bfa228e9f1c950476e2cad51561a3c0796738465b510130e4","md5":"5d91f1553e288631b43d9b0f0dc6d990","sha256":"50022ea235208c6c67245065228ceba4bd94a85b14d46ca4a14974ee6cb20fc7"},"downloads":-1,"filename":"natto-py-0.0.1.tar.gz","has_sig":false,"md5_digest":"5d91f1553e288631b43d9b0f0dc6d990","packagetype":"sdist","python_version":"source","requires_python":null,"size":11590,"upload_time":"2014-10-26T10:31:59","upload_time_iso_8601":"2014-10-26T10:31:59.246979Z","url":"https://files.pythonhosted.org/packages/6c/6e/df043309ee9bfa228e9f1c950476e2cad51561a3c0796738465b510130e4/natto-py-0.0.1.tar.gz","yanked":false,"yanked_reason":null}],"0.0.2":[{"comment_text":"","digests":{"blake2b_256":"fc0eb40f06be2a872c0b181e1bc9db4498c274e23663a4edfd817c5f70d47fd3","md5":"04272b594e9d1bd069ea2f82f40118bf","sha256":"63e68f7d5de3d6db15681945d71997e4ad9bacdd4986f3db4a1ecf7979f06bb1"},"downloads":-1,"filename":"natto-py-0.0.2.tar.gz","has_sig":false,"md5_digest":"04272b594e9d1bd069ea2f82f40118bf","packagetype":"sdist","python_version":"source","requires_python":null,"size":11588,"upload_time":"2014-10-26T10:50:00","upload_time_iso_8601":"2014-10-26T10:50:00.790897Z","url":"https://files.pythonhosted.org/packages/fc/0e/b40f06be2a872c0b181e1bc9db4498c274e23663a4edfd817c5f70d47fd3/natto-py-0.0.2.tar.gz","yanked":false,"yanked_reason":null}],"0.0.3":[{"comment_text":"","digests":{"blake2b_256":"f94c090f6097099e1c883cf22f723221bbed1a6daf24fa17819f32151b4c8b53","md5":"3895274190f27a178a143a8ac4a718f2","sha256":"972528fa76a4c292c53674fa0abd1fda6630b31cc51cac26fee9f5fa80f7d60e"},"downloads":-1,"filename":"natto-py-0.0.3.tar.gz","has_sig":false,"md5_digest":"3895274190f27a178a143a8ac4a718f2","packagetype":"sdist","python_version":"source","requires_python":null,"size":22020,"upload_time":"2014-11-20T20:52:00","upload_time_iso_8601":"2014-11-20T20:52:00.347474Z","url":"https://files.pythonhosted.org/packages/f9/4c/090f6097099e1c883cf22f723221bbed1a6daf24fa17819f32151b4c8b53/natto-py-0.0.3.tar.gz","yanked":false,"yanked_reason":null}],"0.0.4":[],"0.0.5":[{"comment_text":"","digests":{"blake2b_256":"d1caee6ebc0f0ac15d8bbda8980a5a5c7f55a95ce8ed5432d3e4460812f93335","md5":"92d6eebec38f51496e667204335a101b","sha256":"592e61927a34f67531f1eb655ccec211e176d7461bc3f05783d2b706d0311229"},"downloads":-1,"filename":"natto-py-0.0.5.tar.gz","has_sig":false,"md5_digest":"92d6eebec38f51496e667204335a101b","packagetype":"sdist","python_version":"source","requires_python":null,"size":22210,"upload_time":"2014-11-12T13:24:29","upload_time_iso_8601":"2014-11-12T13:24:29.931307Z","url":"https://files.pythonhosted.org/packages/d1/ca/ee6ebc0f0ac15d8bbda8980a5a5c7f55a95ce8ed5432d3e4460812f93335/natto-py-0.0.5.tar.gz","yanked":false,"yanked_reason":null}],"0.0.6":[{"comment_text":"","digests":{"blake2b_256":"4f35addecebd1097658d9e4b7d30521fd3c58604c474d1a6fb0d0d20430977a0","md5":"6c0ae48dd09f033310cc91165ca81e20","sha256":"6cda9e5592e0e6de472ae12a3c038fdfdd0d754c7f6aafa1db6210296d155793"},"downloads":-1,"filename":"natto-py-0.0.6.tar.gz","has_sig":false,"md5_digest":"6c0ae48dd09f033310cc91165ca81e20","packagetype":"sdist","python_version":"source","requires_python":null,"size":23469,"upload_time":"2014-11-20T20:53:05","upload_time_iso_8601":"2014-11-20T20:53:05.025047Z","url":"https://files.pythonhosted.org/packages/4f/35/addecebd1097658d9e4b7d30521fd3c58604c474d1a6fb0d0d20430977a0/natto-py-0.0.6.tar.gz","yanked":false,"yanked_reason":null}],"0.0.7":[{"comment_text":"","digests":{"blake2b_256":"c834e8905d65dd5ad2115608b9007f48f4c44c58980e7252fd76a7bc47f7f79f","md5":"8bd8f45d105ffc4b03918710650af014","sha256":"91fa4abf412c3d34f3cd3d4fdddbd2c9693fb29aede2a4943064243632a7cd9e"},"downloads":-1,"filename":"natto-py-0.0.7.tar.gz","has_sig":false,"md5_digest":"8bd8f45d105ffc4b03918710650af014","packagetype":"sdist","python_version":"source","requires_python":null,"size":23424,"upload_time":"2014-11-23T16:04:15","upload_time_iso_8601":"2014-11-23T16:04:15.048156Z","url":"https://files.pythonhosted.org/packages/c8/34/e8905d65dd5ad2115608b9007f48f4c44c58980e7252fd76a7bc47f7f79f/natto-py-0.0.7.tar.gz","yanked":false,"yanked_reason":null}],"0.0.8":[{"comment_text":"","digests":{"blake2b_256":"cf46d79b9fe11bab4f9b11c07a6cbb03852e261f4bcecca00be542adc315a71f","md5":"eda453d520710957f417d9d138e9f9a7","sha256":"2e8be29f76dc0bc7d6a70ddb7378caddc7b5f30d57881c7af42be06041e839ab"},"downloads":-1,"filename":"natto-py-0.0.8.tar.gz","has_sig":false,"md5_digest":"eda453d520710957f417d9d138e9f9a7","packagetype":"sdist","python_version":"source","requires_python":null,"size":24072,"upload_time":"2014-12-02T13:43:49","upload_time_iso_8601":"2014-12-02T13:43:49.945774Z","url":"https://files.pythonhosted.org/packages/cf/46/d79b9fe11bab4f9b11c07a6cbb03852e261f4bcecca00be542adc315a71f/natto-py-0.0.8.tar.gz","yanked":false,"yanked_reason":null}],"0.0.9":[{"comment_text":"","digests":{"blake2b_256":"758e9d741cfedb3b5d2a7e34cbe7e12545ed351310bebf7c7ac971da40baa1d8","md5":"84db4e89a474f4a179d4309e8ad19e76","sha256":"b54bfa2b97ae14dd9acc898a2b9d950c02d7a0a9510d36a1c8ee50dfd6fc3894"},"downloads":-1,"filename":"natto-py-0.0.9.tar.gz","has_sig":false,"md5_digest":"84db4e89a474f4a179d4309e8ad19e76","packagetype":"sdist","python_version":"source","requires_python":null,"size":25840,"upload_time":"2014-12-31T08:19:27","upload_time_iso_8601":"2014-12-31T08:19:27.666599Z","url":"https://files.pythonhosted.org/packages/75/8e/9d741cfedb3b5d2a7e34cbe7e12545ed351310bebf7c7ac971da40baa1d8/natto-py-0.0.9.tar.gz","yanked":false,"yanked_reason":null}],"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"e2ba13f34c91926140efb4ee15515588bbf8d5ea04c48c0eb990c861b7c661f5","md5":"d989ef792ae82a08abade1f529b4af62","sha256":"943512a59e301a0cd944140604bdda2ad12b455f0c3d70278cd421bc8e14c0f9"},"downloads":-1,"filename":"natto-py-0.1.0.tar.gz","has_sig":false,"md5_digest":"d989ef792ae82a08abade1f529b4af62","packagetype":"sdist","python_version":"source","requires_python":null,"size":25930,"upload_time":"2015-01-02T04:48:10","upload_time_iso_8601":"2015-01-02T04:48:10.917581Z","url":"https://files.pythonhosted.org/packages/e2/ba/13f34c91926140efb4ee15515588bbf8d5ea04c48c0eb990c861b7c661f5/natto-py-0.1.0.tar.gz","yanked":false,"yanked_reason":null}],"0.2.1":[{"comment_text":"","digests":{"blake2b_256":"6fed4f15eb4a54923bb38e4cc5da6b88666f52b9c2c6f2f7505eefef3c61cb9f","md5":"05fda6c52db50133560a1214a4772e24","sha256":"9d074333b84efe85d2590739792353dcc5719efa107b8acaca327ad16308b66d"},"downloads":-1,"filename":"natto-py-0.2.1.tar.gz","has_sig":false,"md5_digest":"05fda6c52db50133560a1214a4772e24","packagetype":"sdist","python_version":"source","requires_python":null,"size":27363,"upload_time":"2015-02-22T13:45:40","upload_time_iso_8601":"2015-02-22T13:45:40.885011Z","url":"https://files.pythonhosted.org/packages/6f/ed/4f15eb4a54923bb38e4cc5da6b88666f52b9c2c6f2f7505eefef3c61cb9f/natto-py-0.2.1.tar.gz","yanked":false,"yanked_reason":null}],"0.3.1":[{"comment_text":"","digests":{"blake2b_256":"5ebacfc60a0fb49c4642b0a11e075bd7c43c7c4da396fe13a6f5a37dae465a58","md5":"ff9f88f22d6a0a19515a7a7f827f1bad","sha256":"94b41dd0cd94632827e9afe00b00f8d0eab61010f061af858dbb79ca6163df52"},"downloads":-1,"filename":"natto-py-0.3.1.tar.gz","has_sig":false,"md5_digest":"ff9f88f22d6a0a19515a7a7f827f1bad","packagetype":"sdist","python_version":"source","requires_python":null,"size":32288,"upload_time":"2015-03-19T12:33:26","upload_time_iso_8601":"2015-03-19T12:33:26.356926Z","url":"https://files.pythonhosted.org/packages/5e/ba/cfc60a0fb49c4642b0a11e075bd7c43c7c4da396fe13a6f5a37dae465a58/natto-py-0.3.1.tar.gz","yanked":false,"yanked_reason":null}],"0.4.0":[{"comment_text":"","digests":{"blake2b_256":"8a3495f4e79b7029839c0a070a2331e39c2b9f1b30bb8d89ab68f51b3f34e971","md5":"89e103c150b4a39f8e1fb8308d0b315a","sha256":"c603923125e5734affac1c6a8e20db93c53788d5d24c3c4b0bbb617cc55e681f"},"downloads":-1,"filename":"natto-py-0.4.0.tar.gz","has_sig":false,"md5_digest":"89e103c150b4a39f8e1fb8308d0b315a","packagetype":"sdist","python_version":"source","requires_python":null,"size":32465,"upload_time":"2015-03-31T12:28:22","upload_time_iso_8601":"2015-03-31T12:28:22.113014Z","url":"https://files.pythonhosted.org/packages/8a/34/95f4e79b7029839c0a070a2331e39c2b9f1b30bb8d89ab68f51b3f34e971/natto-py-0.4.0.tar.gz","yanked":false,"yanked_reason":null}],"0.5.0":[{"comment_text":"","digests":{"blake2b_256":"d6c0207892a93b91e189ea67c8ba7765b975d8589d59547d31a759b6c1504713","md5":"7d271c5d5d6c8748899de5b470afc96a","sha256":"ecd22be9d23f4e0f18dd81a845fa6de7887e83e0103c635716ea60b18f9cb0d8"},"downloads":-1,"filename":"natto-py-0.5.0.tar.gz","has_sig":false,"md5_digest":"7d271c5d5d6c8748899de5b470afc96a","packagetype":"sdist","python_version":"source","requires_python":null,"size":32323,"upload_time":"2015-04-17T10:16:48","upload_time_iso_8601":"2015-04-17T10:16:48.954634Z","url":"https://files.pythonhosted.org/packages/d6/c0/207892a93b91e189ea67c8ba7765b975d8589d59547d31a759b6c1504713/natto-py-0.5.0.tar.gz","yanked":false,"yanked_reason":null}],"0.5.1":[{"comment_text":"","digests":{"blake2b_256":"f954ad2511771f0a4bf11305b91998c8cd18e2b0bd9efd6c9add26d802921977","md5":"af9c1026f8606a889a6620ea156ccb95","sha256":"853f248b4c0d7bf34d4e5deeaa8db0959b6718d05d944903aef493dbc831a436"},"downloads":-1,"filename":"natto-py-0.5.1.tar.gz","has_sig":false,"md5_digest":"af9c1026f8606a889a6620ea156ccb95","packagetype":"sdist","python_version":"source","requires_python":null,"size":32267,"upload_time":"2015-04-18T00:47:15","upload_time_iso_8601":"2015-04-18T00:47:15.833269Z","url":"https://files.pythonhosted.org/packages/f9/54/ad2511771f0a4bf11305b91998c8cd18e2b0bd9efd6c9add26d802921977/natto-py-0.5.1.tar.gz","yanked":false,"yanked_reason":null}],"0.6.0":[{"comment_text":"","digests":{"blake2b_256":"1f4f0791ede217c2368504ad3fa65c05e1e67c1305b941de6f21dec0cec960d0","md5":"89efe19834f61bb212a57d2a3532ebf6","sha256":"7bf1f30284312ed24da1889744804e9c09a6f9f63d65a650e4d5d2e1dc2c77b7"},"downloads":-1,"filename":"natto-py-0.6.0.tar.gz","has_sig":false,"md5_digest":"89efe19834f61bb212a57d2a3532ebf6","packagetype":"sdist","python_version":"source","requires_python":null,"size":33554,"upload_time":"2015-05-01T16:56:32","upload_time_iso_8601":"2015-05-01T16:56:32.038424Z","url":"https://files.pythonhosted.org/packages/1f/4f/0791ede217c2368504ad3fa65c05e1e67c1305b941de6f21dec0cec960d0/natto-py-0.6.0.tar.gz","yanked":false,"yanked_reason":null}],"0.7.0":[{"comment_text":"","digests":{"blake2b_256":"df1c98315967bd7c0d77f52c1fc2f14cf99b01678e0b212e5923958b915583a3","md5":"724e919f65ed6962f568f2b9a07cbb56","sha256":"8ef06f62bf39798a8a502e649b0edc8f96d6ea8be2b33d31de9257f02b466d38"},"downloads":-1,"filename":"natto-py-0.7.0.tar.gz","has_sig":false,"md5_digest":"724e919f65ed6962f568f2b9a07cbb56","packagetype":"sdist","python_version":"source","requires_python":null,"size":33979,"upload_time":"2015-11-06T16:07:09","upload_time_iso_8601":"2015-11-06T16:07:09.630183Z","url":"https://files.pythonhosted.org/packages/df/1c/98315967bd7c0d77f52c1fc2f14cf99b01678e0b212e5923958b915583a3/natto-py-0.7.0.tar.gz","yanked":false,"yanked_reason":null}],"0.8.0":[{"comment_text":"","digests":{"blake2b_256":"b5fd4b651664e9ba09a87eaa2f5a420dca52969b9801520725c17fdb3dce4c57","md5":"62c04310773329a274a39a867e69a33c","sha256":"d413608e8b495ed679b9d4cc33917352b7c01e2e655c0d6cbf67397f06c16898"},"downloads":-1,"filename":"natto-py-0.8.0.tar.gz","has_sig":false,"md5_digest":"62c04310773329a274a39a867e69a33c","packagetype":"sdist","python_version":"source","requires_python":null,"size":34507,"upload_time":"2016-01-31T13:58:49","upload_time_iso_8601":"2016-01-31T13:58:49.680631Z","url":"https://files.pythonhosted.org/packages/b5/fd/4b651664e9ba09a87eaa2f5a420dca52969b9801520725c17fdb3dce4c57/natto-py-0.8.0.tar.gz","yanked":false,"yanked_reason":null}],"0.9.0":[{"comment_text":"","digests":{"blake2b_256":"2fa0eaac1ed66c02823a2423a21de863da53a5268ce77582d91d1edb45a403dc","md5":"539aa3634106e57e2fded940da201eb9","sha256":"5603d5481e52e42b473a2e8d6549712d2b3b43daf623e49ec686fef5d92355d1"},"downloads":-1,"filename":"natto-py-0.9.0.tar.gz","has_sig":false,"md5_digest":"539aa3634106e57e2fded940da201eb9","packagetype":"sdist","python_version":"source","requires_python":null,"size":35802,"upload_time":"2018-01-30T05:47:23","upload_time_iso_8601":"2018-01-30T05:47:23.995543Z","url":"https://files.pythonhosted.org/packages/2f/a0/eaac1ed66c02823a2423a21de863da53a5268ce77582d91d1edb45a403dc/natto-py-0.9.0.tar.gz","yanked":false,"yanked_reason":null}],"0.9.1":[{"comment_text":"","digests":{"blake2b_256":"7d958a9a78a40c5ed9d372ed81b4f3ba6e628742098bf0a2e821be73981b7fa8","md5":"6256896cdfde969a6d47069080e4559d","sha256":"b830c8df7e19e8062daf695c470332354530f684f7991ccb15ce6a73cae96cce"},"downloads":-1,"filename":"natto-py-0.9.1.tar.gz","has_sig":false,"md5_digest":"6256896cdfde969a6d47069080e4559d","packagetype":"sdist","python_version":"source","requires_python":null,"size":31375,"upload_time":"2019-12-26T16:11:00","upload_time_iso_8601":"2019-12-26T16:11:00.782363Z","url":"https://files.pythonhosted.org/packages/7d/95/8a9a78a40c5ed9d372ed81b4f3ba6e628742098bf0a2e821be73981b7fa8/natto-py-0.9.1.tar.gz","yanked":false,"yanked_reason":null}],"0.9.2":[{"comment_text":"","digests":{"blake2b_256":"f1141d4258247a00b7b8a115563effb1d0bd30501d69580629d36593ce0af92d","md5":"1e425e87a2cf8c18fc6b0108454109f3","sha256":"f1538230fd2f96b916f95b8d9972e3fbd4f558573b8ef7e8b711394102c35191"},"downloads":-1,"filename":"natto-py-0.9.2.tar.gz","has_sig":false,"md5_digest":"1e425e87a2cf8c18fc6b0108454109f3","packagetype":"sdist","python_version":"source","requires_python":null,"size":36980,"upload_time":"2019-12-31T13:13:26","upload_time_iso_8601":"2019-12-31T13:13:26.258236Z","url":"https://files.pythonhosted.org/packages/f1/14/1d4258247a00b7b8a115563effb1d0bd30501d69580629d36593ce0af92d/natto-py-0.9.2.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0":[{"comment_text":"","digests":{"blake2b_256":"6d2416db84e4e83eb9b54e1214484bb11797566767eada5eae5f4f091150d10d","md5":"75723ee2a3edf27c1c12ee5047096791","sha256":"af9a5a5c58b4356d4cc9d7b6f2eee3b2eb334fb1a42096c16f6284c5e4fc090b"},"downloads":-1,"filename":"natto-py-1.0.0.tar.gz","has_sig":false,"md5_digest":"75723ee2a3edf27c1c12ee5047096791","packagetype":"sdist","python_version":"source","requires_python":null,"size":36489,"upload_time":"2021-10-02T15:00:12","upload_time_iso_8601":"2021-10-02T15:00:12.504829Z","url":"https://files.pythonhosted.org/packages/6d/24/16db84e4e83eb9b54e1214484bb11797566767eada5eae5f4f091150d10d/natto-py-1.0.0.tar.gz","yanked":false,"yanked_reason":null}],"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"18b5ce97638848783d99e36388aa3cf88df5e67fa491232630a647bd091ecf07","md5":"1e9159b2d233c831138418388823f61f","sha256":"760103bb397232ee033c9924d1357e32b142bbe132fc6a43b8cf82dd6b654e86"},"downloads":-1,"filename":"natto-py-1.0.1.tar.gz","has_sig":false,"md5_digest":"1e9159b2d233c831138418388823f61f","packagetype":"sdist","python_version":"source","requires_python":null,"size":36832,"upload_time":"2022-09-07T04:25:11","upload_time_iso_8601":"2022-09-07T04:25:11.406336Z","url":"https://files.pythonhosted.org/packages/18/b5/ce97638848783d99e36388aa3cf88df5e67fa491232630a647bd091ecf07/natto-py-1.0.1.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"18b5ce97638848783d99e36388aa3cf88df5e67fa491232630a647bd091ecf07","md5":"1e9159b2d233c831138418388823f61f","sha256":"760103bb397232ee033c9924d1357e32b142bbe132fc6a43b8cf82dd6b654e86"},"downloads":-1,"filename":"natto-py-1.0.1.tar.gz","has_sig":false,"md5_digest":"1e9159b2d233c831138418388823f61f","packagetype":"sdist","python_version":"source","requires_python":null,"size":36832,"upload_time":"2022-09-07T04:25:11","upload_time_iso_8601":"2022-09-07T04:25:11.406336Z","url":"https://files.pythonhosted.org/packages/18/b5/ce97638848783d99e36388aa3cf88df5e67fa491232630a647bd091ecf07/natto-py-1.0.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
