{"info":{"author":"Carlo Alessandro Verre","author_email":"carlo.alessandro.verre@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 4 - Beta","Environment :: Console","Intended Audience :: Developers","License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)","Operating System :: POSIX :: Linux","Programming Language :: Python :: 3","Programming Language :: Python :: 3.7"],"description":"    libfunx - LIBrary of utility FUNCtionS for catpdf minmon swapdf toc2md wmtile\n###USAGE\n```\n    from libfunx import *\n```\n###FUNCTIONS\n```\n    ask(question, answers='yn')\n        return answer to terminal question\n\n```\n```\n    bad_char(string: str, jchar: int) -> str\n        return string with bad char surrounded by \"(\" and \"?)\"\n        >>> bad_char(\"\", 0)\n        '(?)'\n        >>> for j in range(-2, 7): print(\"%2d -> %r\" % (j, bad_char(\"abcde\", j)))\n        -2 -> '(a?)bcde'\n        -1 -> '(a?)bcde'\n         0 -> '(a?)bcde'\n         1 -> 'a(b?)cde'\n         2 -> 'ab(c?)de'\n         3 -> 'abc(d?)e'\n         4 -> 'abcd(e?)'\n         5 -> 'abcd(e?)'\n         6 -> 'abcd(e?)'\n\n```\n```\n    char_set(which='')\n        return a frozenset of chars defined by which (see chars()):\n        >>> char_set(\"a-z\") == frozenset(chars(\"a-z\"))\n        True\n\n```\n```\n    chars(which='')\n        return a string defined by which\n        which is a comma-separated list of zero or more nintervals\n        each interval is:\n            a 1-char str or ...\n            ... a 3-chars str == (first char + \"-\" + last char)\n        >>> chars()\n        ''\n        >>> chars(\"\")\n        ''\n        >>> chars(\"a-z\")\n        'abcdefghijklmnopqrstuvwxyz'\n        >>> chars(\"z-a\")\n        'zyxwvutsrqponmlkjihgfedcba'\n        >>> chars(\"a-z,A-Z,_\")\n        'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_'\n        >>> chars(\"a-z,A:Z,_\")\n        SyntaxError: in 'a-z,A(:?)Z,_'\n\n```\n```\n    difs(xx)\n        finite differences yy: yy[0] = xx[0], yy[i] = xx[i] - xx[i-1]\n        >>> xx = list(range(10, 20))\n        >>> difs(xx)\n        [10, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n        >>> xx == difs(sums(xx)) == sums(difs(xx))\n        True\n\n```\n```\n    drop(string, forbidden, default='')\n        drop forbidden chars from string and replace them by default\n        >>> drop(\"drop forbidden\", \"aeiou\")\n        'drp frbddn'\n        >>> drop(\"drop forbidden\", \"aeiou\", \"->\")\n        'dr->p f->rb->dd->n'\n\n```\n```\n    dupl(xx)\n        return list (with no duplicates) of duplicated x in xx\n        >>> dupl('abracadabra')\n        ['a', 'b', 'r']\n\n```\n```\n    fibonacci(n)\n        bidirectional Fibonacci numbers, f(n) == f(n-2) + f(n-1) for any integer n\n        >>> for n in range(-9, 10): print(n, fibonacci(n))\n        -9 34\n        -8 -21\n        -7 13\n        -6 -8\n        -5 5\n        -4 -3\n        -3 2\n        -2 -1\n        -1 1\n        0 0\n        1 1\n        2 1\n        3 2\n        4 3\n        5 5\n        6 8\n        7 13\n        8 21\n        9 34\n        >>> fibonacci(100) / fibonacci(99) # phi = golden ratio\n        1.618033988749895\n        >>> fibonacci(99) / fibonacci(100) # psi = inverse of golden ratio\n        0.6180339887498949\n\n```\n```\n    find(xx, y)\n        find min j such that xx[j] == y, -1 if not found\n        >>> find(\"abracadabra\", \"r\")\n        2\n        >>> find(\"abracadabra\", \"z\")\n        -1\n\n```\n```\n    find_dup(xx)\n        find min j such that xx[j] == xx[i] for some i < j, -1 if not found\n        >>> find_dup(\"abracadabra\")\n        3\n        >>> find_dup(\"0123456789\")\n        -1\n\n```\n```\n    find_in(xx, yy)\n        find min j such that xx[j] in yy, -1 if not found\n        >>> find_in(\"abracadabra\", \"pqr\")\n        2\n        >>> find_in(\"abracadabra\", \"xyz\")\n        -1\n\n```\n```\n    find_max(xx)\n        find min j such that xx[j] == max(xx), -1 if not xx\n        >>> find_max(\"abracadabra\")\n        2\n        >>> find_max(\"\")\n        -1\n\n```\n```\n    find_min(xx)\n        find min j such that xx[j] == min(xx), -1 if not xx\n        >>> find_min(\"abracadabra\")\n        0\n        >>> find_min(\"\")\n        -1\n\n```\n```\n    find_not_in(xx, yy)\n        find min j such that xx[j] not in yy, -1 if not found\n        >>> find_not_in(\"abracadabra\", \"pqr\")\n        0\n        >>> find_not_in(\"abracadabra\", \"bra\")\n        4\n        >>> find_not_in(\"abracadabra\", \"xyz\")\n        0\n        >>> find_not_in(\"abracadabra\", \"abcdr\")\n        -1\n\n```\n```\n    frange(start, stop, nint, first=True, last=False)\n        float range\n        >>> list(frange(0, 1, 7, last=True))\n        [0.0, 0.14285714285714285, 0.2857142857142857, 0.42857142857142855, 0.5714285714285714, 0.7142857142857142, 0.8571428571428571, 1.0]\n        >>> list(frange(1, 0, 7, last=True))\n        [1.0, 0.8571428571428572, 0.7142857142857143, 0.5714285714285714, 0.4285714285714286, 0.2857142857142858, 0.1428571428571429, 0.0]\n\n```\n```\n    freq(xx)\n        return dict of frequencies of x in xx\n        >>> freq('abracadabra')\n        {'a': 5, 'b': 2, 'r': 2, 'c': 1, 'd': 1}\n\n```\n```\n    func_fixed(f, x0=1.0)\n        return x (starting from x0) such that x == f(x)\n        >>> func_fixed(lambda x: 1.0 / x + 1.0) # phi = golden ratio\n        1.618033988749895\n        >>> func_fixed(lambda x: 1.0 / x - 1.0) # psi = 1 / golden ratio\n        ZeroDivisionError: float division by zero\n\n```\n```\n    func_zero(f, xa, xz)\n        return x between xa and xz such that f(x) == 0.0, by regula falsi\n        must be xa < xz and f(xa) * f(xz) < 0.0 and one zero only in [xa, xz] interval\n        >>> func_zero(lambda x: x * x - x - 1.0, 0.0, 2.0) # phi = golden ratio\n        1.618033988749895\n        >>> func_zero(lambda x: x * x + x - 1.0, 0.0, 2.0) # psi = 1 / golden ratio\n        0.6180339887498948\n\n```\n```\n    get_path_files(path_pattern, recursive=False)\n\n```\n```\n    get_paths(path, recursive=False)\n\n```\n```\n    get_source(source, ext='')\n        check source file and return it as absolute path\n\n```\n```\n    get_target(target, ext='', yes=False, no=False)\n        check target file and return it as absolute path\n\n```\n```\n    integral(f, xa, xz, maxerr=1e-12)\n        definite integral of f(x) between xa and xz, by Simpson's rule\n        >>> integral(lambda x: x * x, 0.0, 1.0) # == 1 / 3\n        0.3333333333333333\n\n```\n```\n    is_date_time(Y, m, d, H=0, M=0, S=0, Ymin=0, Ymax=9999)\n        is date (and time) correct?\n\n```\n```\n    leap_year(Y)\n        is Y a leap year? (proleptic gregorian calendar)\n        >>> [y for y in range(1000, 3001, 100) if leap_year(y)]\n        [1200, 1600, 2000, 2400, 2800]\n        >>> [y for y in range(1980, 2021) if leap_year(y)]\n        [1980, 1984, 1988, 1992, 1996, 2000, 2004, 2008, 2012, 2016, 2020]\n\n```\n```\n    min_qua_max(xx, n, method='inclusive')\n        return [min(xx)] + quantiles(xx, n=n, method=\"inclusive\") + [max(xx)]\n        >>> from random import seed, random\n        >>> seed(314159)\n        >>> xx = [random() for j in range(100000)] # 100000 random floats between 0.0 and 1.0\n        >>> min_qua_max(xx, 4) # [min(xx), 1st quartile, 2nd quartile == median, 3rd quartile, max(xx)]\n        [3.2640170710696026e-06, 0.24956912051054536, 0.5016910963353665, 0.750802842987178, 0.9999873492923799]\n        >>> min_qua_max(xx, 10) # deciles\n        [3.2640170710696026e-06, 0.10118755218419968, 0.20026893496215079, 0.29966323718726284, 0.40097187287064084, 0.5016910963353665, 0.6015193723293496, 0.70106377365372, 0.8006989612789306, 0.8999854251451112, 0.9999873492923799]\n\n```\n```\n    month_days(Y, m)\n        number of days in month m of year Y (proleptic gregorian calendar)\n\n```\n```\n    moving_means(xx, n)\n        return [yy[j] = sum(xx[j+1-n:j+1]) / n]\n        >>> moving_means(list(range(10)), 7)\n        [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 4.0, 5.0, 6.0]\n        >>> moving_means(list(range(10)), 3)\n        [0.0, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]\n\n```\n```\n    no_comment(string)\n        remove #-comment from string\n        >>> no_comment(\"echo 'pound: #' # a quoted '#' doesn't start the comment\")\n        \"echo 'pound: #'\"\n\n```\n```\n    no_tag(string, left='<', right='>')\n        remove tags from string\n        >>> no_tag('abc<def>ghi</def>jkl')\n        'abcghijkl'\n        >>> no_tag('abc{def}ghi{/def}jkl', \"{\", \"}\")\n        'abcghijkl'\n\n```\n```\n    package_file(name)\n        get absolute path of file in package\n\n```\n```\n    replace(string, *oldsnews)\n        replace(string, old0, new0, old1, new1, ...) ==\n            string.replace(old0, new0).replace(old1, new1)...\n        >>> replace(\"abcdefghijklmnopqrstuvwxyz\", \"a\", \"A\", \"e\", \"E\", \"i\", \"I\", \"o\", \"O\", \"u\", \"U\")\n        'AbcdEfghIjklmnOpqrstUvwxyz'\n        >>> replace(\"abcdefghijklmnopqrstuvwxyz\", *[\"a\", \"A\", \"e\", \"E\", \"i\", \"I\", \"o\", \"O\", \"u\", \"U\"])\n        'AbcdEfghIjklmnOpqrstUvwxyz'\n        >>> replace(\"abcdefghijklmnopqrstuvwxyz\", *\"aAeEiIoOuU\")\n        'AbcdEfghIjklmnOpqrstUvwxyz'\n\n```\n```\n    rfind(xx, y)\n        find max j such that xx[j] == y, -1 if not found\n        >>> rfind(\"abracadabra\", \"r\")\n        9\n        >>> rfind(\"abracadabra\", \"z\")\n        -1\n\n```\n```\n    rfind_in(xx, yy)\n        find last j such that xx[j] in yy, -1 if not found\n        >>> rfind_in(\"abracadabra\", \"pqr\")\n        9\n        >>> rfind_in(\"abracadabra\", \"xyz\")\n        -1\n\n```\n```\n    rfind_max(xx)\n        find max j such that xx[j] == max(xx), -1 if not xx\n        >>> rfind_max(\"abracadabra\")\n        9\n        >>> rfind_max(\"\")\n        -1\n\n```\n```\n    rfind_min(xx)\n        find max j such that xx[j] == min(xx), -1 if not xx\n        >>> rfind_min(\"abracadabra\")\n        10\n        >>> rfind_min(\"\")\n        -1\n\n```\n```\n    rfind_not_in(xx, yy)\n        find last j such that xx[j] not in yy, -1 if not found\n        >>> rfind_not_in(\"abracadabra\", \"pqr\")\n        10\n        >>> rfind_not_in(\"abracadabra\", \"bra\")\n        6\n        >>> rfind_not_in(\"abracadabra\", \"xyz\")\n        10\n        >>> rfind_not_in(\"abracadabra\", \"abcdr\")\n        -1\n\n```\n```\n    shell(command, out='r', err='n', echo=False)\n        if echo: print prompt and command)\n        result <-- command\n        out controls result.stdout:\n            if out=\"n\": doN't pipe, send directly to sys.stdout, return []\n            if out=\"r\": pipe and Return as a list of rstripped strings\n            if out=\"w\": pipe, Write into stdout and return as a list of rstripped strings\n        err controls result.stderr:\n            if err=\"n\": doN't pipe, send directly to sys.stderr\n            if err=\"w\": pipe and on error Write into sys.stderr\n            if err=\"e\": pipe and on error raise OSError(error)\n            if err=\"x\": pipe and on error eXit(error)\n        return out_lines\n        >>> shell('''echo \"isn't it?\"''')\n        [\"isn't it?\"]\n        >>> shell('qqqq', err='e')\n        OSError: /bin/sh: 1: qqqq: not found\n\n```\n```\n    split(string, sep=None)\n        return [] if not string else string.split(sep)\n        >>> split(\"\") == split(\"\", None) == [] == \"\".split()\n        True\n        >>> split(\"\", \",\") == [] != \"\".split(\",\") == [\"\"]\n        True\n        >>> split(\"a\", \",\") == [\"a\"] == \"a\".split(\",\")\n        True\n        >>> split(\"a,b\", \",\") == [\"a\", \"b\"] == \"a,b\".split(\",\")\n        True\n\n```\n```\n    sql_quote(string: str = '') -> str\n        return standard SQL quoting of string, examples:\n\n        >>> sql_quote(\"'\")\n        \"''''\"\n        >>> sql_quote(\"isn't it?\")\n        \"'isn''t it?'\"\n\n        example of wrong argument:\n\n        >>> sql_quote(None)\n        TypeError: NoneType (should be str)\n\n```\n```\n    sql_unquote(string: str = \"''\") -> str\n        return standard SQL unquoting of string, examples:\n\n        >>> sql_unquote(\"''''\")\n        \"'\"\n        >>> sql_unquote(\"'isn''t it?'\")\n        \"isn't it?\"\n        >>> sql_unquote(sql_quote(\"isn't it?\")) == \"isn't it?\"\n        True\n\n        examples of wrong arguments:\n\n        >>> sql_unquote(None)\n        TypeError: NoneType (should be str)\n        >>> sql_unquote(\"isn't it?\")\n        SyntaxError: in \"(i?)sn't it?\"\n        >>> sql_unquote(\"'isn't it?\")\n        SyntaxError: in \"'isn'(t?) it?\"\n        >>> sql_unquote(\"'isn''t it?\")\n        SyntaxError: in \"'isn''t it(??)\"\n\n```\n```\n    str_exception(exception)\n        message from exception:\n        >>> str_exception(ZeroDivisionError('division by zero'))\n        'ZeroDivisionError: division by zero'\n\n```\n```\n    sums(xx)\n        progressive sums yy: yy[0] == xx[0], yy[i] = yy[i-1] + xx[i]\n        >>> xx = list(range(10, 20))\n        >>> sums(xx)\n        [10, 21, 33, 46, 60, 75, 91, 108, 126, 145]\n        >>> xx == difs(sums(xx)) == sums(difs(xx))\n        True\n\n```\n```\n    syntax_error(string: str, j: int = None)\n        >>> syntax_error(\"abcdefgh\", 3)\n        SyntaxError: in 'abc(d?)efgh'\n\n```\n```\n    take(string, allowed, default='')\n        take allowed chars from string and replace not allowed chars by default\n        >>> take(\"take allowed\", \"aeiou\")\n        'aeaoe'\n        >>> take(\"take allowed\", \"aeiou\", \"?\")\n        '?a?e?a??o?e?'\n\n```\n```\n    test_type(x, types)\n        >>> test_type(314, (int, str))\n        >>> test_type(3.14, (int, str))\n        TypeError: float (should be int or str)\n\n```\n```\n    try_func(func, args, on_error=None)\n        try: return func(*args); except: return on_error\n        >>> from math import sqrt\n        >>> try_func(sqrt, (4.0,), '???')\n        2.0\n        >>> try_func(sqrt, (-4.0,), '???')\n        '???'\n\n```\n```\n    uniq(xx)\n        return list (with no duplicates) of x in xx\n        >>> uniq('abracadabra')\n        ['a', 'b', 'r', 'c', 'd']\n\n```\n```\n    year_days(Y)\n        number of days in year Y (proleptic gregorian calendar)\n\n```\n###DATA\n    /home/xxxx/Documents/pypi/libfunx/libfunx/__init__.py\n###USAGE\n```\n    from libfunx import *\n```\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://pypi.org/project/libfunx","keywords":"","license":"","maintainer":"","maintainer_email":"","name":"libfunx","package_url":"https://pypi.org/project/libfunx/","platform":"","project_url":"https://pypi.org/project/libfunx/","project_urls":{"Homepage":"https://pypi.org/project/libfunx"},"provides_extra":null,"release_url":"https://pypi.org/project/libfunx/0.9.4/","requires_dist":null,"requires_python":">=3.7","summary":"LIBrary of utility FUNCtionS for catpdf minmon swapdf toc2md wmtile","version":"0.9.4","yanked":false,"yanked_reason":null},"last_serial":9043393,"releases":{"0.9.1":[{"comment_text":"","digests":{"blake2b_256":"32cdacdf53a752cb2bf6aeeef27f215f65f0bac6b60997b5132cca640a1c35f3","md5":"21a1b36829984ffbc8321e644e4633ca","sha256":"37f0b88120f693f24066d44fbbac9940bee311ab7c145c56c3133302e0ed4bcb"},"downloads":-1,"filename":"libfunx-0.9.1-py3-none-any.whl","has_sig":false,"md5_digest":"21a1b36829984ffbc8321e644e4633ca","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":2002,"upload_time":"2020-11-02T16:26:59","upload_time_iso_8601":"2020-11-02T16:26:59.762782Z","url":"https://files.pythonhosted.org/packages/32/cd/acdf53a752cb2bf6aeeef27f215f65f0bac6b60997b5132cca640a1c35f3/libfunx-0.9.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"833643f5e314ab30ea2f40402c6ffcf01b6e8e51611f605f7c9e917908b0dceb","md5":"afd039e1ab743a027cc9cb12a360d378","sha256":"2ee0e12a7d82fb9d0badced4de816f4f23b68cd9e691cd8a48562ce8446e1e62"},"downloads":-1,"filename":"libfunx-0.9.1.tar.gz","has_sig":false,"md5_digest":"afd039e1ab743a027cc9cb12a360d378","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":1790,"upload_time":"2020-11-02T16:27:15","upload_time_iso_8601":"2020-11-02T16:27:15.843995Z","url":"https://files.pythonhosted.org/packages/83/36/43f5e314ab30ea2f40402c6ffcf01b6e8e51611f605f7c9e917908b0dceb/libfunx-0.9.1.tar.gz","yanked":false,"yanked_reason":null}],"0.9.2":[{"comment_text":"","digests":{"blake2b_256":"795cb8e109d8e517dda98887cfec29774e6db127ec7cc5ffba01e3d8c2ce281a","md5":"39e6e702077a9a65f547ac05c31a4a24","sha256":"2d9fa43a0400faa48bf2b2f5d2cf02ac4dfe32dfec6a323b1eccb40246fd17af"},"downloads":-1,"filename":"libfunx-0.9.2-py3-none-any.whl","has_sig":false,"md5_digest":"39e6e702077a9a65f547ac05c31a4a24","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":2494,"upload_time":"2020-11-02T17:11:57","upload_time_iso_8601":"2020-11-02T17:11:57.590495Z","url":"https://files.pythonhosted.org/packages/79/5c/b8e109d8e517dda98887cfec29774e6db127ec7cc5ffba01e3d8c2ce281a/libfunx-0.9.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e74f74c43fdfde7296052799b5ac6b24985d8885fb13a33d57d6977d2d4f339f","md5":"0c461022de34dd23f8e7839368f29b43","sha256":"770af1bb44acc6d284f058a71dee786681b73ef1055754341990b57718481632"},"downloads":-1,"filename":"libfunx-0.9.2.tar.gz","has_sig":false,"md5_digest":"0c461022de34dd23f8e7839368f29b43","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":2285,"upload_time":"2020-11-02T17:13:34","upload_time_iso_8601":"2020-11-02T17:13:34.978781Z","url":"https://files.pythonhosted.org/packages/e7/4f/74c43fdfde7296052799b5ac6b24985d8885fb13a33d57d6977d2d4f339f/libfunx-0.9.2.tar.gz","yanked":false,"yanked_reason":null}],"0.9.3":[{"comment_text":"","digests":{"blake2b_256":"3107d76b637e40e042debc3a6afd9898ba33d84c6a71bc41b86939db8a8cf99a","md5":"b751e8bfafeb005f17959d86953f5f45","sha256":"24658506e0cf22a637128ad0d177d84005f18180818d938e7ec4337da6aaa93e"},"downloads":-1,"filename":"libfunx-0.9.3-py3-none-any.whl","has_sig":false,"md5_digest":"b751e8bfafeb005f17959d86953f5f45","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":3287,"upload_time":"2020-11-05T17:19:02","upload_time_iso_8601":"2020-11-05T17:19:02.414787Z","url":"https://files.pythonhosted.org/packages/31/07/d76b637e40e042debc3a6afd9898ba33d84c6a71bc41b86939db8a8cf99a/libfunx-0.9.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"8a987d4e7735f9b4651659247baa3b752c55bb743f18ea400401afa22ff5c2fb","md5":"382acf6e8bb4ede2dcd1f06398be665b","sha256":"1371decae4db8fa28ac5d6729ae33f3f99f28d97196ffc5cb37556db4b3f9146"},"downloads":-1,"filename":"libfunx-0.9.3.tar.gz","has_sig":false,"md5_digest":"382acf6e8bb4ede2dcd1f06398be665b","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":2784,"upload_time":"2020-11-05T17:19:49","upload_time_iso_8601":"2020-11-05T17:19:49.366780Z","url":"https://files.pythonhosted.org/packages/8a/98/7d4e7735f9b4651659247baa3b752c55bb743f18ea400401afa22ff5c2fb/libfunx-0.9.3.tar.gz","yanked":false,"yanked_reason":null}],"0.9.4":[{"comment_text":"","digests":{"blake2b_256":"8a0aac5bafe89a284f38abf5dc11582562dfe9ed44a8b75720cf9f363b4f1e85","md5":"6a9b9e3e8130e077571c8867d7137e80","sha256":"53bb247427095a84011a6795872436fa61614348e28eac7afca28f4b9f4ce113"},"downloads":-1,"filename":"libfunx-0.9.4-py3-none-any.whl","has_sig":false,"md5_digest":"6a9b9e3e8130e077571c8867d7137e80","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":12473,"upload_time":"2021-01-03T18:00:28","upload_time_iso_8601":"2021-01-03T18:00:28.800930Z","url":"https://files.pythonhosted.org/packages/8a/0a/ac5bafe89a284f38abf5dc11582562dfe9ed44a8b75720cf9f363b4f1e85/libfunx-0.9.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"bed87549209b6414e3e7e317d4802528f468b043726181c2bf2d28cc0146ed6c","md5":"4637f81293ef05a2b80697f781635694","sha256":"fa958262e2131cda895bf189289d796e7381940a006921f9c549b3b3a0739b7c"},"downloads":-1,"filename":"libfunx-0.9.4.tar.gz","has_sig":false,"md5_digest":"4637f81293ef05a2b80697f781635694","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":9742,"upload_time":"2021-01-03T18:00:30","upload_time_iso_8601":"2021-01-03T18:00:30.951558Z","url":"https://files.pythonhosted.org/packages/be/d8/7549209b6414e3e7e317d4802528f468b043726181c2bf2d28cc0146ed6c/libfunx-0.9.4.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"8a0aac5bafe89a284f38abf5dc11582562dfe9ed44a8b75720cf9f363b4f1e85","md5":"6a9b9e3e8130e077571c8867d7137e80","sha256":"53bb247427095a84011a6795872436fa61614348e28eac7afca28f4b9f4ce113"},"downloads":-1,"filename":"libfunx-0.9.4-py3-none-any.whl","has_sig":false,"md5_digest":"6a9b9e3e8130e077571c8867d7137e80","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":12473,"upload_time":"2021-01-03T18:00:28","upload_time_iso_8601":"2021-01-03T18:00:28.800930Z","url":"https://files.pythonhosted.org/packages/8a/0a/ac5bafe89a284f38abf5dc11582562dfe9ed44a8b75720cf9f363b4f1e85/libfunx-0.9.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"bed87549209b6414e3e7e317d4802528f468b043726181c2bf2d28cc0146ed6c","md5":"4637f81293ef05a2b80697f781635694","sha256":"fa958262e2131cda895bf189289d796e7381940a006921f9c549b3b3a0739b7c"},"downloads":-1,"filename":"libfunx-0.9.4.tar.gz","has_sig":false,"md5_digest":"4637f81293ef05a2b80697f781635694","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":9742,"upload_time":"2021-01-03T18:00:30","upload_time_iso_8601":"2021-01-03T18:00:30.951558Z","url":"https://files.pythonhosted.org/packages/be/d8/7549209b6414e3e7e317d4802528f468b043726181c2bf2d28cc0146ed6c/libfunx-0.9.4.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
