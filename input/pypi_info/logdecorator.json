{"info":{"author":"Jakob Rößler","author_email":"roessler@sighalt.de","bugtrack_url":null,"classifiers":["Intended Audience :: Developers","License :: OSI Approved :: MIT License","Topic :: Software Development","Topic :: Software Development :: Libraries","Topic :: System :: Logging"],"description":"Logdecorator\n============\n\n|Downloads|\n\nMove logging code out of your business logic with python decorators.\n\nLogging is a nice tool in your toolbox for tracing bugs and getting a\nbetter sense how your application is working in production. But if you\nare like me, you often omit logging code, so it will not hide business\nlogic or feature your code with complexity.\n\nFortunately pythons decorator now came to our rescue and provides us\nwith a nice library to add logging to our code without stealing\nreadability and understandability.\n\nIf you want to know more about the intentions behind logdecorator check\nout my `blog\npost <https://www.sighalt.de/remove-visual-noise-of-logging-code-by-using-python-decorators.html>`__.\n\nUpdate: logdecorator==2.0\n-------------------------\n\nThanks to all dependants :) I just released a new version of\nlogdecorator (2.0). You can read the changes at my\n`blog <https://www.sighalt.de/a-new-logdecorator-version-is-available-o.html>`__\nor in the `changelog <CHANGES.rst>`_.\n\nInstallation\n------------\n\nInstallation is as easy as it can get:\n\n.. code:: bash\n\n    $ pip install logdecorator\n\nHow to use it\n-------------\n\ntl;dr\n~~~~~\n\n.. code:: python\n\n    import logging\n    import requests\n    from logdecorator import log_on_start, log_on_end, log_on_error, log_exception\n\n\n    @log_on_start(logging.DEBUG, \"Start downloading {url:s}...\")\n    @log_on_error(logging.ERROR, \"Error on downloading {url:s}: {e!r}\",\n                  on_exceptions=IOError,\n                  reraise=True)\n    @log_on_end(logging.DEBUG, \"Downloading {url:s} finished successfully within {result.elapsed!s}\")\n    def download(url):\n        # some code\n        response = requests.get(url)\n        # some more code\n        return response\n\n\n    logging.basicConfig(level=logging.DEBUG)\n\n    download(\"https://www.sighalt.de\")\n    # DEBUG:__main__:Start downloading https://www.sighalt.de...\n    # DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): www.sighalt.de\n    # DEBUG:urllib3.connectionpool:https://www.sighalt.de:443 \"GET / HTTP/1.1\" 200 None\n    # DEBUG:__main__:Downloading https://www.sighalt.de finished successfully within 0:00:00.130960\n\n    download(\"https://www.sighalt.der\")\n    # DEBUG:__main__:Start downloading https://www.sighalt.der...\n    # DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): www.sighalt.der\n    # ERROR:__main__:Error on downloading https://www.sighalt.der: ConnectionError(MaxRetryError(\"\n    # HTTPSConnectionPool(host='www.sighalt.der', port=443): Max retries exceeded with url: /\n    # (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7fe3fc4b5320>:\n    # Failed to establish a new connection: [Errno -2] Name or service not known',))\",),)\n\nLong story\n~~~~~~~~~~\n\nImagine a function ``download`` with no arguments and some download code\nin it.\n\n.. code:: python\n\n    def download():\n        # some download code\n        pass\n\n    if __name__ == \"__main__\":\n        download()\n        \n\nSay you are going to launch your new tool but want to add some logging\nbefore releasing the kraken. Your code will probably look something like\nthe following:\n\n.. code:: python\n\n    import logging\n    from .exceptions import MyException1, MyException2\n\n    logger = logging.getLogger(__name__)\n\n\n    def download():\n        logger.debug(\"Start downloading\")\n        # some download code\n        logger.debug(\"Downloading finished successfully\")\n\n\n    if __name__ == \"__main__\":\n        try:\n            download()\n        except (MyException1, MyException2):\n            logger.error(\"Error on downloading\")\n            raise\n\nYou just added at least a couple lines of code which are eventually\nstumbling in your way when you are trying to understand your business\nlogic to find a bug. But what's even worse is, that you added an\nadditional indentation (try:... except: ...) just for the sake of\nlogging.\n\nWith logdecorator you can leave your code nearly as it was and reach the\nsame goals.\n\n.. code:: python\n\n    import logging\n    from logdecorator import log_on_start, log_on_end, log_on_error\n    from .exceptions import MyException1, MyException2\n\n\n    @log_on_start(logging.DEBUG, \"Start downloading\")\n    @log_on_error(logging.ERROR, \"Error on downloading\",\n                  on_exceptions=(MyException1, MyException2),\n                  reraise=True)\n    @log_on_end(logging.DEBUG, \"Downloading finished successfully\")\n    def download():\n        # some download code\n\n\n    if __name__ == \"__main__\":\n        download()\n\nMaybe the improvement to the previous snippet does not seem great for\nyou but if you actually fill in business logic into\n``# some download code`` it should become obvious :)\n\nWhat logdecorator can do for you\n--------------------------------\n\nDecorators\n~~~~~~~~~~\n\nlogdecorator provides four different built-in decorators:\n\n-  log\\_on\\_start\n-  log\\_on\\_end\n-  log\\_on\\_error\n-  log\\_exception\n\nwhose behaviour corresponds to their names.\n\nAdditionally logdecorator supports decorating async callables with the decorators:\n\n-  async\\_log\\_on\\_start\n-  async\\_log\\_on\\_end\n-  async\\_log\\_on\\_error\n-  async\\_log\\_exception\n\nThese decorators are found at logdecorator.asyncio\n\n\nUse variables in messages\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe message, given to the decorator, is treated as a python format\nstring which takes the functions arguments as format arguments.\n\nSticking to the previous example one could write:\n\n.. code:: python\n\n\n    import logging\n    from logdecorator import log_on_start\n    from .exceptions import MyException1, MyException2\n\n\n    @log_on_start(logging.DEBUG, \"Start downloading '{url:s}'\")\n    def download(url):\n        # some download code\n\n\n    if __name__ == \"__main__\":\n        download(\"http://my.file.com/file.bin\")\n\nWhich results in the message\n``Start downloading 'http://my.file.com/file.bin'`` gets logged.\n\n\nDocumentation\n~~~~~~~~~~~~~\n\nformat variables\n^^^^^^^^^^^^^^^^\n\nThe following variable names can be used to construct the message:\n\n.. list-table::\n    :header-rows: 1\n\n    * - Default variable name\n      - Description\n      - log_on_start\n      - log_on_end\n      - log_on_error\n      - log_exception\n    * - callable\n      - The decorated callable\n      - Yes\n      - Yes\n      - Yes\n      - Yes\n    * - *args/kwargs*\n      - Whatever arguments given to the callable can be used in the logging message\n      - Yes\n      - Yes\n      - Yes\n      - Yes\n    * - result\n      - Whatever the decorated callable returns\n      - No\n      - Yes\n      - No\n      - No\n    * - e\n      - The exception raised while executing the callable\n      - No\n      - No\n      - Yes\n      - Yes\n\n\nlog\\_on\\_start / async\\_log\\_on\\_start\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. list-table::\n    :header-rows: 1\n\n    * - Argument\n      - required?\n      - Description\n    * - log\\_level\n      - yes\n      - The log level at which the message should be send\n    * - message\n      - yes\n      - The message to log\n    * - logger\n      - no\n      - An alternative logger object. If no logger is given logdecorator creates a logger object with the name of the module the decorated function is in (``decorated_function.__module__``)Default: Creates a new logger with the name ``decorated_function.__module__``\n    * - handler\n      - no\n      - A custom log handler object. Only available if no logger object is given.\n    * - callable_format_variable\n      - no\n      - The variable name one can use in the message to reference the decorated callable. e.g. @log\\_on\\_start(ERROR, \"Called {callable.__name__:s}\", ...) Default: \"callable\"\n\n\nlog\\_on\\_end / async\\_log\\_on\\_end\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. list-table::\n    :header-rows: 1\n\n    * - Argument\n      - required?\n      - Description\n    * - log\\_level\n      - yes\n      - The log level at which the message should be send\n    * - message\n      - yes\n      - The message to log\n    * - logger\n      - no\n      - An alternative logger object. If no logger is given logdecorator creates a logger object with the name of the module the decorated function is in (``decorated_function.__module__``) Default: Creates a new logger with the name ``decorated_function.__module__``\n    * - handler\n      - no\n      - A custom log handler object. Only available if no logger object is given.\n    * - result\\_format\\_variable\n      - no\n      - The variable name one can use in the message to reference the result of the > decorated function e.g. @log\\_on\\_end(DEBUG, \"Result was: {result!r}\") Default: \"result\"\n    * - callable_format_variable\n      - no\n      - The variable name one can use in the message to reference the decorated callable. e.g. @log\\_on\\_start(ERROR, \"Called {callable.__name__:s}\", ...) Default: \"callable\"\n\n\n\nlog\\_on\\_error / async\\_log\\_on\\_error\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. list-table::\n    :header-rows: 1\n\n    * - Argument\n      - required?\n      - Description\n    * - log\\_level\n      - yes\n      - The log level at which the message should be send\n    * - message\n      - yes\n      - The message to log\n    * - logger\n      - no\n      - An alternative logger object. If no logger is given logdecorator creates a logger object with the name of the module the decorated function is in (``decorated_function.__module__``) Default: Creates a new logger with the name ``decorated_function.__module__``\n    * - handler\n      - no\n      - A custom log handler object. Only available if no logger object is given.\n    * - on\\_exceptions\n      - no\n      - A tuple containing exception classes or a single exception, which should get caught and trigger the logging of the ``log_on_error`` decorator. Default: tuple() (No exceptions will get caught)\n    * - reraise\n      - no\n      - Controls if caught exceptions should get reraised after logging. Default: True\n    * - exception\\_format\\_variable\n      - no\n      - The variable name one can use in the message to reference the caught exception raised in the decorated function > e.g. @log\\_on\\_error(ERROR, \"Error was: {e!r}\", ...) Default: \"e\"\n    * - callable_format_variable\n      - no\n      - The variable name one can use in the message to reference the decorated callable. e.g. @log\\_on\\_start(ERROR, \"Called {callable.__name__:s}\", ...) Default: \"callable\"\n\n\nlog\\_exception / async\\_log\\_exception\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. list-table::\n    :header-rows: 1\n\n    * - Argument\n      - required?\n      - Description\n    * - log\\_level\n      - yes\n      - The log level at which the message should be send\n    * - message\n      - yes\n      - The message to log\n    * - logger\n      - no\n      - An alternative logger object. If no logger is given logdecorator creates a logger object with the name of the module the decorated function is in (``decorated_function.__module__``) Default: Creates a new logger with the name ``decorated_function.__module__``\n    * - handler\n      - no\n      - A custom log handler object. Only available if no logger object is given.\n    * - on\\_exceptions\n      - no\n      - A tuple containing exception classes or a single exception, which should get caught and trigger the logging of the ``log_on_error`` decorator. Default: tuple() (No exceptions will get caught)\n    * - reraise\n      - no\n      -  Controls if caught exceptions should get reraised after logging. Default: False\n    * - exception\\_format\\_variable\n      - no\n      - The variable name one can use in the message to reference the caught exception raised in the decorated function e.g. @log\\_on\\_error(ERROR, \"Error was: {e!r}\", ...) Default: \"e\"\n    * - callable_format_variable\n      - no\n      - The variable name one can use in the message to reference the decorated callable. e.g. @log\\_on\\_start(ERROR, \"Called {callable.__name__:s}\", ...) Default: \"callable\"\n\n.. |Downloads| image:: https://pepy.tech/badge/logdecorator\n   :target: https://pepy.tech/project/logdecorator\n\n\n","description_content_type":"text/x-rst","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/sighalt/logdecorator","keywords":"logging,decorators,clean code","license":"","maintainer":"","maintainer_email":"","name":"logdecorator","package_url":"https://pypi.org/project/logdecorator/","platform":"","project_url":"https://pypi.org/project/logdecorator/","project_urls":{"Homepage":"https://github.com/sighalt/logdecorator"},"provides_extra":null,"release_url":"https://pypi.org/project/logdecorator/2.4/","requires_dist":null,"requires_python":"","summary":"Move logging code out of your business logic with decorators","version":"2.4","yanked":false,"yanked_reason":null},"last_serial":11840607,"releases":{"1.0":[{"comment_text":"","digests":{"blake2b_256":"e2af78dd00570eff67880a9f793101617f935742e8a2aeef78166c0b010e2e9e","md5":"61fcc1cc2ff1ef18ff743ad999f5c9dd","sha256":"ac86da9defde3480359977ae0476dee838bfb224badb1dcc17ae3592191849a7"},"downloads":-1,"filename":"logdecorator-1.0-py3-none-any.whl","has_sig":false,"md5_digest":"61fcc1cc2ff1ef18ff743ad999f5c9dd","packagetype":"bdist_wheel","python_version":"3.6","requires_python":null,"size":4408,"upload_time":"2017-06-07T21:39:32","upload_time_iso_8601":"2017-06-07T21:39:32.027373Z","url":"https://files.pythonhosted.org/packages/e2/af/78dd00570eff67880a9f793101617f935742e8a2aeef78166c0b010e2e9e/logdecorator-1.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"0c832ad42d2cfa830a07f1e8b15cae48d68db4e3e15a7a25d5c53396fff35552","md5":"5b1e3090da36589d6131de93126301eb","sha256":"f1ab2fabe42cf41a1e9e09f4df85c3aeb52b901ff06d0cbef5bbc79573c0f309"},"downloads":-1,"filename":"logdecorator-1.0.tar.gz","has_sig":false,"md5_digest":"5b1e3090da36589d6131de93126301eb","packagetype":"sdist","python_version":"source","requires_python":null,"size":4218,"upload_time":"2017-06-07T21:39:15","upload_time_iso_8601":"2017-06-07T21:39:15.630848Z","url":"https://files.pythonhosted.org/packages/0c/83/2ad42d2cfa830a07f1e8b15cae48d68db4e3e15a7a25d5c53396fff35552/logdecorator-1.0.tar.gz","yanked":false,"yanked_reason":null}],"2.0":[{"comment_text":"","digests":{"blake2b_256":"f4afb14b34629224f595083b105e8c84011e3d264e42d7ff89c1d808640dca7a","md5":"730e413bce4d4fd6b3c5630048134b13","sha256":"7dbb752c5571a1fc4f760fd2052ef09418dc76007a85449acf825dd753061004"},"downloads":-1,"filename":"logdecorator-2.0-py3-none-any.whl","has_sig":false,"md5_digest":"730e413bce4d4fd6b3c5630048134b13","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":4440,"upload_time":"2018-09-09T12:17:17","upload_time_iso_8601":"2018-09-09T12:17:17.622787Z","url":"https://files.pythonhosted.org/packages/f4/af/b14b34629224f595083b105e8c84011e3d264e42d7ff89c1d808640dca7a/logdecorator-2.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"9e417afb8a3fb27a2cb0c1bf85b95347015e21a9edb9206fda2ace3ae6b3807d","md5":"42dddd8e934bb0386318cac8ebcbefdf","sha256":"906e3b33b8c48bb7b1e00b83656fda3c9b6c5b928050500a1a9421c445b1b067"},"downloads":-1,"filename":"logdecorator-2.0.tar.gz","has_sig":false,"md5_digest":"42dddd8e934bb0386318cac8ebcbefdf","packagetype":"sdist","python_version":"source","requires_python":null,"size":4310,"upload_time":"2018-09-09T12:17:19","upload_time_iso_8601":"2018-09-09T12:17:19.244893Z","url":"https://files.pythonhosted.org/packages/9e/41/7afb8a3fb27a2cb0c1bf85b95347015e21a9edb9206fda2ace3ae6b3807d/logdecorator-2.0.tar.gz","yanked":false,"yanked_reason":null}],"2.1":[{"comment_text":"","digests":{"blake2b_256":"009c5793a4be472732f0ad9db81d3fb2dcc6bda8f7fc04f31f5cc2f0c7f76254","md5":"cff80b9dd64d5a7a766767db900af544","sha256":"324cff871cdd04a779cba14ca94e2912a3dbc43179053f0014c643c298b0f7f8"},"downloads":-1,"filename":"logdecorator-2.1-py3-none-any.whl","has_sig":false,"md5_digest":"cff80b9dd64d5a7a766767db900af544","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":8640,"upload_time":"2018-09-25T22:01:53","upload_time_iso_8601":"2018-09-25T22:01:53.833453Z","url":"https://files.pythonhosted.org/packages/00/9c/5793a4be472732f0ad9db81d3fb2dcc6bda8f7fc04f31f5cc2f0c7f76254/logdecorator-2.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"55cf9021026c01505d90d37230e2f50ce01414b317c597da1e6ffbf0b6151877","md5":"a19ecfb7f97c9ad7a1dcb71a597c3018","sha256":"993bb3f0ccaab169e3a7812d2be411cabb37d38f5d166a1b99b428daaa1dc797"},"downloads":-1,"filename":"logdecorator-2.1.tar.gz","has_sig":false,"md5_digest":"a19ecfb7f97c9ad7a1dcb71a597c3018","packagetype":"sdist","python_version":"source","requires_python":null,"size":5603,"upload_time":"2018-09-25T22:01:55","upload_time_iso_8601":"2018-09-25T22:01:55.215664Z","url":"https://files.pythonhosted.org/packages/55/cf/9021026c01505d90d37230e2f50ce01414b317c597da1e6ffbf0b6151877/logdecorator-2.1.tar.gz","yanked":false,"yanked_reason":null}],"2.2":[{"comment_text":"","digests":{"blake2b_256":"e8584a91cc139f65a3ecc04d0996dc288480f38cea660589062cfd0f010a2727","md5":"27734b8cd741071939909f55a5325324","sha256":"56c2969838aeb4dac122090e7584d2b6c38c839c26a12f6bb6f62fdb84fa40d4"},"downloads":-1,"filename":"logdecorator-2.2-py3-none-any.whl","has_sig":false,"md5_digest":"27734b8cd741071939909f55a5325324","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":10115,"upload_time":"2020-10-23T15:02:55","upload_time_iso_8601":"2020-10-23T15:02:55.531677Z","url":"https://files.pythonhosted.org/packages/e8/58/4a91cc139f65a3ecc04d0996dc288480f38cea660589062cfd0f010a2727/logdecorator-2.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d2159fa609ec9008bd0970fdbf55878ea7bfb43998794e4b0deabc8bb630d64c","md5":"17e02f5384db365a68a0b195db256713","sha256":"8e6d1259cf615b7d2720739a71a3b62dbcfaf22d902382b7d41ac872f4a1d6d9"},"downloads":-1,"filename":"logdecorator-2.2.tar.gz","has_sig":false,"md5_digest":"17e02f5384db365a68a0b195db256713","packagetype":"sdist","python_version":"source","requires_python":null,"size":5599,"upload_time":"2020-10-23T15:02:57","upload_time_iso_8601":"2020-10-23T15:02:57.128316Z","url":"https://files.pythonhosted.org/packages/d2/15/9fa609ec9008bd0970fdbf55878ea7bfb43998794e4b0deabc8bb630d64c/logdecorator-2.2.tar.gz","yanked":false,"yanked_reason":null}],"2.4":[{"comment_text":"","digests":{"blake2b_256":"e30277db6d63b20225308fef00687edfc019e21e3957222d384a6577943e16ce","md5":"f9d1ec6204f22632f5ba89fa62b8ddae","sha256":"34bf769dafaf8b53a94484036b401b651f50fca830e03a93837a68d7180afd55"},"downloads":-1,"filename":"logdecorator-2.4-py3-none-any.whl","has_sig":false,"md5_digest":"f9d1ec6204f22632f5ba89fa62b8ddae","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":7194,"upload_time":"2021-10-26T21:33:47","upload_time_iso_8601":"2021-10-26T21:33:47.670518Z","url":"https://files.pythonhosted.org/packages/e3/02/77db6d63b20225308fef00687edfc019e21e3957222d384a6577943e16ce/logdecorator-2.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"378e67489bd6cb26b8cf0749ab64773a8ee501690c5c9c12531850c9371be137","md5":"de17eacc18a34cbd017da28c8a5892f6","sha256":"7735260e579c50af5f3aee4ee75dab886ae427b1960eb805d8eafe84b75c41b6"},"downloads":-1,"filename":"logdecorator-2.4.tar.gz","has_sig":false,"md5_digest":"de17eacc18a34cbd017da28c8a5892f6","packagetype":"sdist","python_version":"source","requires_python":null,"size":6882,"upload_time":"2021-10-26T21:33:49","upload_time_iso_8601":"2021-10-26T21:33:49.518691Z","url":"https://files.pythonhosted.org/packages/37/8e/67489bd6cb26b8cf0749ab64773a8ee501690c5c9c12531850c9371be137/logdecorator-2.4.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"e30277db6d63b20225308fef00687edfc019e21e3957222d384a6577943e16ce","md5":"f9d1ec6204f22632f5ba89fa62b8ddae","sha256":"34bf769dafaf8b53a94484036b401b651f50fca830e03a93837a68d7180afd55"},"downloads":-1,"filename":"logdecorator-2.4-py3-none-any.whl","has_sig":false,"md5_digest":"f9d1ec6204f22632f5ba89fa62b8ddae","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":7194,"upload_time":"2021-10-26T21:33:47","upload_time_iso_8601":"2021-10-26T21:33:47.670518Z","url":"https://files.pythonhosted.org/packages/e3/02/77db6d63b20225308fef00687edfc019e21e3957222d384a6577943e16ce/logdecorator-2.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"378e67489bd6cb26b8cf0749ab64773a8ee501690c5c9c12531850c9371be137","md5":"de17eacc18a34cbd017da28c8a5892f6","sha256":"7735260e579c50af5f3aee4ee75dab886ae427b1960eb805d8eafe84b75c41b6"},"downloads":-1,"filename":"logdecorator-2.4.tar.gz","has_sig":false,"md5_digest":"de17eacc18a34cbd017da28c8a5892f6","packagetype":"sdist","python_version":"source","requires_python":null,"size":6882,"upload_time":"2021-10-26T21:33:49","upload_time_iso_8601":"2021-10-26T21:33:49.518691Z","url":"https://files.pythonhosted.org/packages/37/8e/67489bd6cb26b8cf0749ab64773a8ee501690c5c9c12531850c9371be137/logdecorator-2.4.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
