{"info":{"author":"","author_email":"\"Geoffrey M. Poore\" <gpoore@gmail.com>","bugtrack_url":null,"classifiers":["Development Status :: 4 - Beta","Intended Audience :: Developers","Intended Audience :: End Users/Desktop","Intended Audience :: Information Technology","Intended Audience :: Science/Research","Intended Audience :: System Administrators","License :: OSI Approved :: BSD License","Operating System :: OS Independent","Programming Language :: Python","Topic :: Utilities"],"description":"=====================================\r\n    ``bespon`` package for Python\r\n=====================================\r\n\r\n\r\n\r\nThe ``bespon`` package for Python encodes and decodes data in the\r\n`BespON format <https://bespon.org>`_.\r\n\r\n\r\n\r\nBasic usage\r\n===========\r\n\r\nData is loaded in a manner analogous to Python's ``json`` module:\r\n\r\n* ``bespon.load(<file-like object>)``\r\n* ``bespon.loads(<string or bytes>)``\r\n\r\nSimilarly, dumping data to a file or string:\r\n\r\n* ``bespon.dump(<obj>, <file-like object>)``\r\n* ``bespon.dumps(<obj>)``\r\n\r\nOnly dicts, lists, Unicode strings, byte strings, floats, ints, bools, and\r\n``None`` are supported for dumping by default.  See the ``extended_types``\r\nand ``python_types`` keywords for optional support of additional types.\r\n\r\n\r\n\r\nLossless round-trip support\r\n===========================\r\n\r\nThere is also support for lossless round-tripping.  Data can be loaded,\r\nmodified, and then saved with minimal impact on the data file layout.\r\n\r\nData can be loaded from a file or string into an instance of the\r\n``RoundtripAst`` class.\r\n\r\n* ``bespon.load_roundtrip_ast(<file-like object>)``\r\n* ``bespon.loads_roundtrip_ast(<string or bytes>)``\r\n\r\nThis class has two methods that allow data to be modified.\r\n\r\n* ``replace_val(<path>, <obj>)`` This replaces the object currently located\r\n  at ``<path>`` within the data with ``<obj>``.  ``<path>`` must be a list or\r\n  tuple consisting of dict keys and list indices.  ``<obj>`` must have the\r\n  same type as the object it is replacing.  There is **experimental** support\r\n  for replacing dicts and lists; all other types are fully supported.\r\n* ``replace_key(<path>, <obj>)`` This replaces the dict key at the end of\r\n  ``<path>`` with the new key ``<obj>`` (which will map to the same value as\r\n  the replaced key).  ``<obj>`` must be a Unicode string, int, or bool, and\r\n  must have the same type as the object it is replacing.\r\n\r\n**Experimental** support for changing data types may be enabled by loading\r\ndata with the option ``enforce_types=False``.\r\n\r\nThere is also **preliminary** support for ``__getitem__``-style access\r\n(``ast['key']``, etc.).  Data accessed in this manner has the following\r\nattributes.\r\n\r\n* ``key``:  Key of the current location, if in a dict.\r\n  Allows assignment, as long as the new object is of the same type as the old\r\n  object, and the type is supported.  For example, ``ast['key'].key =\r\n  'new_key'`` will rename the key.\r\n* ``key_doc_comment``:  Doc comment of key, if in a dict.  ``None`` if there\r\n  is no doc comment.  Currently only supports assignment for existing doc\r\n  comments.\r\n* ``key_trailing_comment``:  Trailing line comment (``#comment``) that\r\n  immediately follows a key on the same line.\r\n* ``value``:  Value of the current location.  Can be assigned, as long as the\r\n  new object is of the same type as the old object, and the type is supported.\r\n  When ``value`` is accessed or assigned and is a mutable object like a dict\r\n  or list, the object should not be modified.  Currently, modifying the object\r\n  will not change the actual data contained in the AST (the AST does not\r\n  update automatically).  But modifying the object will make the AST's\r\n  temporary representation of itself (available via ``value``) invalid.  If\r\n  you need to modify the object returned by ``value``, use ``copy.deepcopy()``\r\n  to create a completely independent copy.  If you need to assign an object\r\n  that will later be modified, assign a deepcopy of the object.\r\n* ``value_doc_comment``:  Doc comment of the value at the current location.\r\n  ``None`` if there is no doc comment.  Currently only supports assignment for\r\n  existing doc comments.\r\n* ``value_trailing_comment``:  Trailing line comment (``#comment``) that\r\n  immediately follows a non-collection type on the same line.\r\n* ``value_start_trailing_comment``:  Trailing line comment that immediately\r\n  follows the start of a collection in inline-style syntax (\"``{``\" or\r\n  \"``[``\").\r\n* ``value_end_trailing_comment``:  Trailing line comment that immediately\r\n  follows the end of a collection in inline-style syntax (\"``}``\" or \"``]``\").\r\n\r\nAfter data in a ``RoundtripAst`` instance has been modified, it may be encoded\r\nback into a string with the ``dumps()`` method.  An example is shown below.\r\n\r\n::\r\n\r\n    >>> ast = bespon.loads_roundtrip_ast(\"\"\"\r\n    key.subkey.first = 123   # Comment\r\n    key.subkey.second = 0b1101\r\n    key.subkey.third = `literal \\string`\r\n    \"\"\")\r\n    >>> ast.replace_key(['key', 'subkey'], 'sk')\r\n    >>> ast.replace_val(['key', 'sk', 'second'], 7)\r\n    >>> ast.replace_val(['key', 'sk', 'third'], '\\\\another \\\\literal')\r\n    >>> ast.replace_key(['key', 'sk', 'third'], 'fourth')\r\n    >>> print(ast.dumps())\r\n\r\n    key.sk.first = 123   # Comment\r\n    key.sk.second = 0b111\r\n    key.sk.fourth = `\\another \\literal`\r\n\r\nHere is the same example using the preliminary ``__getitem__``-style syntax.\r\n\r\n::\r\n\r\n    >>> ast = bespon.loads_roundtrip_ast(\"\"\"\r\n    key.subkey.first = 123   # Comment\r\n    key.subkey.second = 0b1101\r\n    key.subkey.third = `literal \\string`\r\n    \"\"\")\r\n    >>> ast['key']['subkey'].key = 'sk'\r\n    >>> ast['key']['sk']['second'].value = 7\r\n    >>> ast['key']['sk']['third'].value = '\\\\another \\\\literal'\r\n    >>> ast['key']['sk']['third'].key = 'fourth'\r\n    >>> print(ast.dumps())\r\n\r\n    key.sk.first = 123   # Comment\r\n    key.sk.second = 0b111\r\n    key.sk.fourth = `\\another \\literal`\r\n\r\nThis example illustrates several of BespON's round-trip capabilities.\r\n\r\n* Comments and layout are preserved exactly.\r\n* Key renaming works with key paths.  Every time a key appears in key paths,\r\n  it is renamed.\r\n* When a number is modified, the new value is expressed in the same base as\r\n  the old value.\r\n* When a quoted string is modified, the new value is quoted in the same\r\n  style as the old value (at least to the extent that this is practical).\r\n* As soon as a key is modified, the new key must be used for further\r\n  modifications.  The old key is invalid.\r\n\r\n\r\n\r\nAdvanced loading and dumping\r\n============================\r\n\r\nThe loading and dumping functions support several keyword arguments to\r\ncustomize data handling.\r\n\r\n\r\n**Loading**\r\n\r\n* ``aliases`` (boolean, default ``True``):  Allow aliases.\r\n\r\n* ``circular_references`` (boolean, default ``False``):  Allow aliases to\r\n  create circular references.\r\n\r\n* ``custom_parsers`` (dict, default ``None``):  Replace the default parser\r\n  for a specified type with a custom parser.  For example, using\r\n  ``custom_parsers={'int': float}`` would cause all integers to be parsed\r\n  with the ``float()`` function.\r\n\r\n* ``custom_types`` (``bespon.LoadType`` instance, or list or tuple of\r\n  ``bespon.LoadType``):  Enable preliminary support for custom types.\r\n  ``bespon.LoadType`` takes up to five named arguments (for examples, see the\r\n  definitions of built-in types at the end of ``load_types.py``):\r\n\r\n  * ``name`` (string):  Type name.\r\n\r\n  * ``compatible_implicit_types`` (string, or set or list or tuple of\r\n    strings):  Names of built-in implicit types with which the type being\r\n    defined is compatible.  Implicit types include ``none``, ``bool``,\r\n    ``int``, ``float``, ``str``, ``complex``, ``rational``, ``dict``, and\r\n    ``list``.\r\n\r\n  * ``parser`` (function):  Function that converts a string (for scalar types)\r\n    or dict or list (collection types) into an instance of the type being\r\n    defined.\r\n\r\n  * ``ascii_bytes`` (boolean, default ``False``):  For types based on strings.\r\n    Determines whether the raw string is encoded into binary as an ASCII byte\r\n    string before being passed to the parser function.  If this is done, only\r\n    bytes-compatible backslash escapes are allowed in the string.\r\n\r\n  * ``mutable`` (boolean, default ``False``):  For collection types.\r\n    Specifies whether instances are mutable after being created.  Mutable\r\n    collections have greater flexibility in terms of circular references.\r\n\r\n* ``empty_default`` (function, default ``None``):  When an empty string or\r\n  file is loaded (or one that only consists of comments and whitespace), this\r\n  function is called with no arguments to provide a default value, instead of\r\n  an error being raised.  For example, ``empty_default=dict``.\r\n\r\n* ``extended_types`` (boolean, default ``False``):  Enable preliminary support\r\n  for ``set`` and ``odict`` tagged collections (for example, ``(set)> [1, 2,\r\n  3]``).  Enable preliminary support for complex number literals and rational\r\n  number literals.  Complex numbers currently use the general form\r\n  ``1.0+2.0i``, where the real part is optional, the imaginary unit is\r\n  represented with ``i``, and numbers must be floats (either in decimal or hex\r\n  form).  Rational numbers use the form ``1/2``, where the numerator and\r\n  denominator must both be decimal integers, and any sign must come before the\r\n  fraction.\r\n\r\n* ``float_overflow_to_inf`` (boolean, default ``False``):  Whether\r\n  non-``inf`` floats are permitted to overflow into ``inf`` without raising an\r\n  error.\r\n\r\n* ``integers`` (boolean, default ``True``):  Whether integers are permitted.\r\n  Otherwise they are interpreted as floats.\r\n\r\n* ``max_nesting_depth`` (int, default ``100``):  Maximum permitted nesting\r\n  depth for collections.  When ``circular_references=True``, this is the\r\n  maximum permitted depth before a circular reference is encountered.\r\n\r\n* ``only_ascii_source`` (boolean, default ``False``):  Whether non-ASCII code\r\n  points are allowed to appear literally in the source (without being\r\n  represented via backslash-escapes).\r\n\r\n* ``only_ascii_unquoted`` (boolean, default ``True``):  Whether non-ASCII\r\n  identifier-style strings are allowed unquoted.\r\n\r\n* ``python_types`` (boolean, default ``False``):  Enable preliminary support\r\n  for Python-specific data types.  Currently this only supports ``tuple``.\r\n\r\n\r\n\r\n**Dumping**\r\n\r\n* ``aliases`` (boolean, default ``True``):  Allow aliases so that a\r\n  collection may appear multiple times within data.\r\n\r\n* ``baseclass`` (boolean, default ``False``):  Encode unknown data types as\r\n  their baseclasses if supported.  For example, ``collections.OrderedDict``\r\n  would be encoded as a ``dict``, and a custom integer class would be encoded\r\n  as ``int``.\r\n\r\n* ``circular_references`` (boolean, default ``False``):  Allow aliases to\r\n  create circular references.\r\n\r\n* ``compact_inline`` (boolean, default ``False``):  In inline syntax, put\r\n  everything on one line to make it as compact as possible.\r\n\r\n* ``extended_types`` (boolean, default ``False``):  Enable preliminary support\r\n  for ``set`` and ``odict`` tagged collections (for example, ``(set)> [1, 2,\r\n  3]``).  Enable preliminary support for complex number literals and rational\r\n  number literals.  Complex numbers currently use the general form\r\n  ``1.0+2.0i``, where the real part is optional, the imaginary unit is\r\n  represented with ``i``, and numbers must be floats (either in decimal or hex\r\n  form).  Rational numbers use the form ``1/2``, where the numerator and\r\n  denominator must both be decimal integers, and any sign must come before the\r\n  fraction.\r\n\r\n* ``flush_start_list_item`` (string, default ``*<space>``):  How a list item\r\n  starts in indentation-style syntax when it is at the top level, within\r\n  another list, or otherwise in a context when the ``*`` must be aligned flush\r\n  with a designated margin.  Must start with a single ``*`` followed by zero\r\n  or more spaces or tabs.\r\n\r\n* ``hex_floats`` (boolean, default ``False``):  Whether floats are\r\n  dumped in hex form.\r\n\r\n* ``inline_depth`` (boolean, default ``max_nesting_depth+1``):  Nesting depth\r\n  at which to switch from indentation-style to inline-style syntax.  A value\r\n  of ``0`` will make everything inline, ``1`` will make the top-level\r\n  collection indentation-style but everything inside it inline-style, and\r\n  so forth.\r\n\r\n* ``integers`` (boolean, default ``True``):  Whether integers are permitted.\r\n  Otherwise they are interpreted as floats.\r\n\r\n* ``max_nesting_depth`` (int, default ``100``):  Maximum permitted nesting\r\n  depth of collections.  When ``circular_references=True``, this is the\r\n  maximum permitted depth before a circular reference is encountered.\r\n\r\n* ``nesting_indent`` (string, default ``<space><space><space><space>``):\r\n  Indentation added for each nesting level.\r\n\r\n* ``only_ascii_source`` (boolean, default ``False``):  Whether non-ASCII code\r\n  points are allowed to appear literally in the source (without being\r\n  represented via backslash-escapes).\r\n\r\n* ``only_ascii_unquoted`` (boolean, default ``True``):  Whether non-ASCII\r\n  identifier-style strings are allowed unquoted.\r\n\r\n* ``python_types`` (boolean, default ``False``):  Enable preliminary support\r\n  for Python-specific data types.  Currently this only supports ``tuple``.\r\n\r\n* ``trailing_commas`` (boolean, default ``False``):  In inline syntax, leave\r\n  a comma after the last item in a collection.  This can minimize diffs.\r\n\r\n* ``start_list_item`` (string, default ``<space><space>*<space>``):  How a\r\n  list item starts in indentation-style syntax.  This must begin with one or\r\n  more spaces or tabs and contain a single ``*``.  The leading spaces or tabs\r\n  define the relative indentation from the previous indentation level.\r\n\r\n\r\n\r\nSpec conformance\r\n================\r\n\r\nThe ``bespon`` package passes the\r\n`BespON test suite <https://github.com/bespon/bespon_tests>`_.\r\n","description_content_type":"text/x-rst","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"configuration,serialization,interchange","license":"Copyright 2016-2017 Geoffrey M. Poore  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.  2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ","maintainer":"","maintainer_email":"","name":"bespon","package_url":"https://pypi.org/project/bespon/","platform":null,"project_url":"https://pypi.org/project/bespon/","project_urls":{"changelog":"https://github.com/gpoore/bespon_py/blob/master/CHANGELOG.md","homepage":"https://bespon.org/","repository":"http://github.com/gpoore/bespon_py"},"provides_extra":null,"release_url":"https://pypi.org/project/bespon/0.7.0/","requires_dist":null,"requires_python":">=3.7","summary":"Python library for BespON","version":"0.7.0","yanked":false,"yanked_reason":null},"last_serial":20184478,"releases":{"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"e04f4d9c1755f4c1cda1782e6726cd49a64fce15ac7dcf77e6de1aa6b60c18f0","md5":"736c8a0a23e95b8e2b11e4dd25ff2fbe","sha256":"3b16ca1ae65919080a2ce6808ba5334edd295c04c9fb3dd418fc5987aafd6698"},"downloads":-1,"filename":"BespON-0.1.0.tar.gz","has_sig":false,"md5_digest":"736c8a0a23e95b8e2b11e4dd25ff2fbe","packagetype":"sdist","python_version":"source","requires_python":null,"size":53864,"upload_time":"2017-04-08T00:24:48","upload_time_iso_8601":"2017-04-08T00:24:48.846847Z","url":"https://files.pythonhosted.org/packages/e0/4f/4d9c1755f4c1cda1782e6726cd49a64fce15ac7dcf77e6de1aa6b60c18f0/BespON-0.1.0.tar.gz","yanked":false,"yanked_reason":null}],"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"6b53aae93ae41c13250e11d754cf7a2a07f265169ec283f35acb110e48cf60d3","md5":"38759d233d271a7718c65ebd379901e6","sha256":"33e9943985f56627800ea0d3e6a42cb5457e6d4d088cb4c4d8035f40b6954916"},"downloads":-1,"filename":"BespON-0.1.1.tar.gz","has_sig":false,"md5_digest":"38759d233d271a7718c65ebd379901e6","packagetype":"sdist","python_version":"source","requires_python":null,"size":55156,"upload_time":"2017-04-08T01:31:16","upload_time_iso_8601":"2017-04-08T01:31:16.967673Z","url":"https://files.pythonhosted.org/packages/6b/53/aae93ae41c13250e11d754cf7a2a07f265169ec283f35acb110e48cf60d3/BespON-0.1.1.tar.gz","yanked":false,"yanked_reason":null}],"0.2.0":[{"comment_text":"","digests":{"blake2b_256":"43c09b09c73245930251f3b23154c93c93e5a7e4bda6cc7d19b4984137f99499","md5":"39dc992067e7cd81095155325fbefa07","sha256":"3b79597e8387c8ca1b96853e641c596ee004bed19338ecd3a13a7a7208d02a55"},"downloads":-1,"filename":"BespON-0.2.0.tar.gz","has_sig":false,"md5_digest":"39dc992067e7cd81095155325fbefa07","packagetype":"sdist","python_version":"source","requires_python":null,"size":66271,"upload_time":"2017-06-08T19:44:36","upload_time_iso_8601":"2017-06-08T19:44:36.246519Z","url":"https://files.pythonhosted.org/packages/43/c0/9b09c73245930251f3b23154c93c93e5a7e4bda6cc7d19b4984137f99499/BespON-0.2.0.tar.gz","yanked":false,"yanked_reason":null}],"0.2.1":[{"comment_text":"","digests":{"blake2b_256":"b39624c77adc3378c6e2e954bcfbc6d5417c2780f0581eb0bfd44232aba42a38","md5":"a15e4479cac7d702f71d13f424d7d089","sha256":"9eeb09b61f67cf62907f906b97bf53e6afb46d66d0fcaa990b8a5e26aed872b0"},"downloads":-1,"filename":"BespON-0.2.1.tar.gz","has_sig":false,"md5_digest":"a15e4479cac7d702f71d13f424d7d089","packagetype":"sdist","python_version":"source","requires_python":null,"size":67541,"upload_time":"2017-06-17T03:29:07","upload_time_iso_8601":"2017-06-17T03:29:07.055924Z","url":"https://files.pythonhosted.org/packages/b3/96/24c77adc3378c6e2e954bcfbc6d5417c2780f0581eb0bfd44232aba42a38/BespON-0.2.1.tar.gz","yanked":false,"yanked_reason":null}],"0.3.0":[{"comment_text":"","digests":{"blake2b_256":"8c31e00a41ea77bfb349987dd4b9b2ccb71b5900e8ff5a6c7ff60b2676c6c548","md5":"e920c8ecd420f5cc747ef4a82bd2bc8d","sha256":"fb44642747145ff0db671ec1d8b6a434584f5b7e8442878b2388213843df2819"},"downloads":-1,"filename":"BespON-0.3.0.tar.gz","has_sig":false,"md5_digest":"e920c8ecd420f5cc747ef4a82bd2bc8d","packagetype":"sdist","python_version":"source","requires_python":null,"size":68965,"upload_time":"2017-07-12T22:24:24","upload_time_iso_8601":"2017-07-12T22:24:24.352854Z","url":"https://files.pythonhosted.org/packages/8c/31/e00a41ea77bfb349987dd4b9b2ccb71b5900e8ff5a6c7ff60b2676c6c548/BespON-0.3.0.tar.gz","yanked":false,"yanked_reason":null}],"0.4.0":[{"comment_text":"","digests":{"blake2b_256":"68da40918bfbdd2c8cb03a89770dec4d6196e0737c5d5d6809267a6fbc602a06","md5":"4a8e1e6e4a64db20e9c0ae21d5fed47b","sha256":"c2c3824a21ff8d95be4ca668d1b4ad39193c8629380690d804d4bed3f5f8750e"},"downloads":-1,"filename":"BespON-0.4.0-py3-none-any.whl","has_sig":false,"md5_digest":"4a8e1e6e4a64db20e9c0ae21d5fed47b","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":90784,"upload_time":"2020-03-30T13:30:45","upload_time_iso_8601":"2020-03-30T13:30:45.291851Z","url":"https://files.pythonhosted.org/packages/68/da/40918bfbdd2c8cb03a89770dec4d6196e0737c5d5d6809267a6fbc602a06/BespON-0.4.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"01a031ef004cb019d21866bee39c7af78a08647e9ed8788bea89c81b2b8ffba5","md5":"cfc9290db9167a3b67e7f1aff6be1c2b","sha256":"4acfa3f918d416654beccd4db69290f498edb78bf39941287dcbc068b9a7ce2f"},"downloads":-1,"filename":"BespON-0.4.0.tar.gz","has_sig":false,"md5_digest":"cfc9290db9167a3b67e7f1aff6be1c2b","packagetype":"sdist","python_version":"source","requires_python":null,"size":75822,"upload_time":"2020-03-30T13:30:46","upload_time_iso_8601":"2020-03-30T13:30:46.730346Z","url":"https://files.pythonhosted.org/packages/01/a0/31ef004cb019d21866bee39c7af78a08647e9ed8788bea89c81b2b8ffba5/BespON-0.4.0.tar.gz","yanked":false,"yanked_reason":null}],"0.5.0":[{"comment_text":"","digests":{"blake2b_256":"affd8bbbcd8a428dd797f8938990829c4767041e7520fb86fdf18334f441ea75","md5":"b66f0dfcb329c3232671f80537b9dfd7","sha256":"eec314abfa0327268c228da3474fa185cc61a3b81f095ce84335b1b1d9215fbf"},"downloads":-1,"filename":"BespON-0.5.0-py3-none-any.whl","has_sig":false,"md5_digest":"b66f0dfcb329c3232671f80537b9dfd7","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":91031,"upload_time":"2020-08-11T13:27:19","upload_time_iso_8601":"2020-08-11T13:27:19.154564Z","url":"https://files.pythonhosted.org/packages/af/fd/8bbbcd8a428dd797f8938990829c4767041e7520fb86fdf18334f441ea75/BespON-0.5.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"87803bec71d8f4921476064d963d185b8a451ea351710ccdbd6522c9cbeac668","md5":"6f1057e2b16b5ba71ef7eaea7cadd1e7","sha256":"a75cd7e62746fb0fef9b98aa157a44f9ed2ef63e952f7ae4ec5b3c2892669187"},"downloads":-1,"filename":"BespON-0.5.0.tar.gz","has_sig":false,"md5_digest":"6f1057e2b16b5ba71ef7eaea7cadd1e7","packagetype":"sdist","python_version":"source","requires_python":null,"size":81346,"upload_time":"2020-08-11T13:27:21","upload_time_iso_8601":"2020-08-11T13:27:21.716114Z","url":"https://files.pythonhosted.org/packages/87/80/3bec71d8f4921476064d963d185b8a451ea351710ccdbd6522c9cbeac668/BespON-0.5.0.tar.gz","yanked":false,"yanked_reason":null}],"0.6.0":[{"comment_text":"","digests":{"blake2b_256":"d94f1dcd0c526e224db3f52732c180ab5ff46d0663e67b219928e3b0dde5af10","md5":"0c9c54597dc17729d3d545393aa0cc06","sha256":"08868c70fa349db618374436d79d69a4a7b89add08cff1f8aa0c227379911b6f"},"downloads":-1,"filename":"BespON-0.6.0-py3-none-any.whl","has_sig":false,"md5_digest":"0c9c54597dc17729d3d545393aa0cc06","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":91106,"upload_time":"2021-02-06T18:07:08","upload_time_iso_8601":"2021-02-06T18:07:08.260375Z","url":"https://files.pythonhosted.org/packages/d9/4f/1dcd0c526e224db3f52732c180ab5ff46d0663e67b219928e3b0dde5af10/BespON-0.6.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"53b0bdaa248abf6618228accb1bcf0d2e63569f4a14401b1a15272dac5da14a3","md5":"b580a5a54a47a19a2e3c9ed36a40fda0","sha256":"2f2bda67fea8ee95c8aa7e885835ab88bdbfa392a94077ce1c9d29017420ce7a"},"downloads":-1,"filename":"BespON-0.6.0.tar.gz","has_sig":false,"md5_digest":"b580a5a54a47a19a2e3c9ed36a40fda0","packagetype":"sdist","python_version":"source","requires_python":null,"size":81509,"upload_time":"2021-02-06T18:07:10","upload_time_iso_8601":"2021-02-06T18:07:10.538782Z","url":"https://files.pythonhosted.org/packages/53/b0/bdaa248abf6618228accb1bcf0d2e63569f4a14401b1a15272dac5da14a3/BespON-0.6.0.tar.gz","yanked":false,"yanked_reason":null}],"0.7.0":[{"comment_text":"","digests":{"blake2b_256":"919cb40279f0dbba6fa5877c652226ec499b4167a355395446dcba4b0c82a8d2","md5":"8028984f70784cbf0dbf7ed002ea694e","sha256":"5fa231b2dee005f33b73b70811ff3f43f109cbf5235c5513b6e7b67550f26f41"},"downloads":-1,"filename":"bespon-0.7.0-py3-none-any.whl","has_sig":false,"md5_digest":"8028984f70784cbf0dbf7ed002ea694e","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":83360,"upload_time":"2023-10-15T19:17:18","upload_time_iso_8601":"2023-10-15T19:17:18.921594Z","url":"https://files.pythonhosted.org/packages/91/9c/b40279f0dbba6fa5877c652226ec499b4167a355395446dcba4b0c82a8d2/bespon-0.7.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c84880322750e4225bfc8023829b4405f0f3a7f7612b1578a0ec7154c26ce276","md5":"d67dcb6d7b9966956f1cf894137dd211","sha256":"746b57c38baaea97725c155f4a2f6cee408552a0353ceeea584198d09340cfc4"},"downloads":-1,"filename":"bespon-0.7.0.tar.gz","has_sig":false,"md5_digest":"d67dcb6d7b9966956f1cf894137dd211","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":80291,"upload_time":"2023-10-15T19:17:21","upload_time_iso_8601":"2023-10-15T19:17:21.824241Z","url":"https://files.pythonhosted.org/packages/c8/48/80322750e4225bfc8023829b4405f0f3a7f7612b1578a0ec7154c26ce276/bespon-0.7.0.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"919cb40279f0dbba6fa5877c652226ec499b4167a355395446dcba4b0c82a8d2","md5":"8028984f70784cbf0dbf7ed002ea694e","sha256":"5fa231b2dee005f33b73b70811ff3f43f109cbf5235c5513b6e7b67550f26f41"},"downloads":-1,"filename":"bespon-0.7.0-py3-none-any.whl","has_sig":false,"md5_digest":"8028984f70784cbf0dbf7ed002ea694e","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":83360,"upload_time":"2023-10-15T19:17:18","upload_time_iso_8601":"2023-10-15T19:17:18.921594Z","url":"https://files.pythonhosted.org/packages/91/9c/b40279f0dbba6fa5877c652226ec499b4167a355395446dcba4b0c82a8d2/bespon-0.7.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c84880322750e4225bfc8023829b4405f0f3a7f7612b1578a0ec7154c26ce276","md5":"d67dcb6d7b9966956f1cf894137dd211","sha256":"746b57c38baaea97725c155f4a2f6cee408552a0353ceeea584198d09340cfc4"},"downloads":-1,"filename":"bespon-0.7.0.tar.gz","has_sig":false,"md5_digest":"d67dcb6d7b9966956f1cf894137dd211","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":80291,"upload_time":"2023-10-15T19:17:21","upload_time_iso_8601":"2023-10-15T19:17:21.824241Z","url":"https://files.pythonhosted.org/packages/c8/48/80322750e4225bfc8023829b4405f0f3a7f7612b1578a0ec7154c26ce276/bespon-0.7.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
