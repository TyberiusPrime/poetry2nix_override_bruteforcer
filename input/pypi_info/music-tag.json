{"info":{"author":"Kristofor Maynard","author_email":"kristofor.maynard@gmail.com","bugtrack_url":null,"classifiers":["License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python :: 3","Programming Language :: Python :: 3.3","Programming Language :: Python :: 3.4","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7"],"description":"# music-tag\n\nmusic-tag is a library for editing audio metadata with an interface\nthat does not depend on the underlying file format. In other words, editing\nmp3 files shouldn not be any different than flac, m4a, ... This library is\njust a layer on top of [mutagen](https://mutagen.readthedocs.io/en/latest/),\nwhich does all the heavy lifting.\n\n## Formats\n\nThe following file formats are actively tested.\n\n- ``aac``\n- ``aiff``\n- ``dsf``\n- ``flac``\n- ``m4a``\n- ``mp3``\n- ``ogg``\n- ``opus``\n- ``wav``\n- ``wv``\n\n## Keys\n\nMetadata is available using a dictionary-like interface with the following keys.\nKeys are not case sensitive and can contain arbitrary whitespace, '-', and '_'\ncharacters. In other words, ``Album Artist``, ``album-artist``, and\n``album_artist`` are all synonyms for ``albumartist``. Also, ``disk`` is synonymous with ``disc``.\n\n- ``album``\n- ``albumartist``\n- ``artist``\n- ``artwork``\n- ``comment``\n- ``compilation``\n- ``composer``\n- ``discnumber``\n- ``genre``\n- ``lyrics``\n- ``totaldiscs``\n- ``totaltracks``\n- ``tracknumber``\n- ``tracktitle``\n- ``year``\n- ``isrc``\n- ``#bitrate`` (read only)\n- ``#codec`` (read only)\n- ``#length`` (read only)\n- ``#channels`` (read only)\n- ``#bitspersample`` (read only)\n- ``#samplerate`` (read only)\n\n## Examples\n\n### Reading tags\n\n``` python\nimport music_tag\n\nf = music_tag.load_file(\"music-tag/sample/440Hz.m4a\")\n\n# dict access returns a MetadataItem\ntitle_item = f['title']\n\n# MetadataItems keep track of multi-valued keys\ntitle_item.values  # -> ['440Hz']\n\n# A single value can be extracted\ntitle_item.first  # -> '440Hz'\ntitle_item.value  # -> '440Hz'\n\n# MetadataItems can also be cast to a string\nstr(title_item)  # -> '440Hz'\n```\n\n### Setting tags\n\n``` python\n# tags can be set as if the file were a dictionary\nf['title'] = '440Hz'\n\n# additional values can be appended to the tags\nf.append_tag('title', 'subtitle')\ntitle_item.values  # -> ['440Hz', 'subtitle']\ntitle_item.first  # -> '440Hz'\ntitle_item.value  # -> '440Hz, subtitle'\nstr(title_item)  # -> '440Hz, subtitle'\n```\n\n### Removing tags\n\n``` python\ndel f['title']\nf.remove_tag('title')\n```\n\n### Album artwork\n\nAlbum artwork is wrapped in an object that keeps track of some of the\nextra metadata associated with images. Note that some album art functionality\nrequires the Pillow (modern day PIL) library.\n\n``` python\n# get artwork\nart = f['artwork']\n\n# Note: `art` is a MetadataItem. Use ``art.value`` if there is\n#       only one image embeded in the file. This will raise a\n#       ValueError if there is more than one image. You can also\n#       use ``art.first``, or iterate through ``art.values``.\n\nart.first.mime  # -> 'image/jpeg'\nart.first.width  # -> 1280\nart.first.height  # -> 1280\nart.first.depth  # -> 24\nart.first.data  # -> b'... raw image data ...'\n\n# set artwork\nwith open('music_tag/test/sample/imgA.jpg', 'rb') as img_in:\n    f['artwork'] = img_in.read()\nwith open('music_tag/test/sample/imgB.jpg', 'rb') as img_in:\n    f.append_tag('artwork', img_in.read())\n\n# Make a thumbnail (requires Pillow)\nart.first.thumbnail([64, 64])  # -> pillow image\nart.first.raw_thumbnail([64, 64])  # -> b'... raw thumbnail data ...'\n```\n\n### Saving tags\n\n``` python\n# finally, you can bounce the edits to disk\nf.save()\n```\n\n### Skipping Type Normalization\n\nBy default, tags are validated and normalized. For instance, track numbers\nand years are return as integers. Some tag formats store everything as strings\nto enable things like leading zeros in tracknumbers (i.e., track '01'). I think\nthis is ugly, but you can use the file object's ``raw`` property if you like\nthis kind of thing.\n\n``` python\nf.raw['tracknumber'] = '01'\nf.raw['tracknumber'].value  # -> '01'\n```\n\n## Resolvers\n\nSome tags may not exist in a file, but there could be enough information to\ndiscern the correct value. For instance, the ``album artist`` tag is probably\nequal to the ``artist`` tag, or ``\"Various Artists\"`` if the ``compilation``\nflag is set. Here are some examples,\n\n``` python\nf['album artist'] = 'Brian'\nf.resolve('album artist')  # <- 'Brian'\nf['artist'] = 'Brian'\ndel f['album artist']\nf['compilation'] = False\nf.resolve('album artist')  # <- 'Brian'\nf['compilation'] = True\nf.resolve('album artist')  # <- 'Various Artists'\n\ndel f['compilation']\nf['album artist'] = 'Various Artists'\nf.resolve('compilation')  # <- True\nf['album artist'] = 'Brian'\nf.resolve('compilation')  # <- False\n```\n\n## Command Line Tool\n\nThe music_tag package can be used as a CLI to get / set tags. Here are some\nexamples,\n\n### Printing Tags\n\n``` bash\n# Print tags from all audio files in sample directory\npython -m music_tag --print ./sample\n\n# Print specific tags from all audio files in sample directory      \npython -m music_tag --print --tags=\"Title : Album\" ./sample\n\n# Write tags from all audio files in sample directory to a csv file\npython -m music_tag --to-csv tags.csv ./sample\n\n# Write specific tags from all audio files in sample directory to a csv file\npython -m music_tag --tags=\"Title : Album\" --to-csv tags.csv ./sample\n```\n\n### Setting Tags\n``` bash\n# Set a couple tags for multiple files      \npython -m music_tag --set \"genre:Pop\" --set \"comment:cli test\" \\\n    ./sample/440Hz.aac ./sample/440Hz.flac\n\n# Write tags from csv file to audio files (assuming file paths in\n# the csv file are relative to the sample directory\npython -m music_tag --from-csv tags.csv\n```","description_content_type":"text/markdown","docs_url":null,"download_url":"https://github.com/KristoforMaynard/music-tag/archive/0.4.3.zip","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/KristoforMaynard/music-tag","keywords":"music,metadata,id3","license":"MIT","maintainer":"","maintainer_email":"","name":"music-tag","package_url":"https://pypi.org/project/music-tag/","platform":"","project_url":"https://pypi.org/project/music-tag/","project_urls":{"Download":"https://github.com/KristoforMaynard/music-tag/archive/0.4.3.zip","Homepage":"https://github.com/KristoforMaynard/music-tag"},"provides_extra":null,"release_url":"https://pypi.org/project/music-tag/0.4.3/","requires_dist":null,"requires_python":"","summary":"Simple interface to edit audio file metadata","version":"0.4.3","yanked":false,"yanked_reason":null},"last_serial":10566341,"releases":{"0.2.0":[{"comment_text":"","digests":{"blake2b_256":"e878c03fd87e27ac607ceab4d45b1fc2b1538472a1a3135db67f098496584b12","md5":"095ea8728c895ab64b931b56ae08d6e0","sha256":"6657e78d568d08d8063109bdc91678e6f4c69c795c1f5ade2d0d55a89a263ea6"},"downloads":-1,"filename":"music-tag-0.2.0.tar.gz","has_sig":false,"md5_digest":"095ea8728c895ab64b931b56ae08d6e0","packagetype":"sdist","python_version":"source","requires_python":null,"size":17306,"upload_time":"2019-04-27T16:12:26","upload_time_iso_8601":"2019-04-27T16:12:26.447237Z","url":"https://files.pythonhosted.org/packages/e8/78/c03fd87e27ac607ceab4d45b1fc2b1538472a1a3135db67f098496584b12/music-tag-0.2.0.tar.gz","yanked":false,"yanked_reason":null}],"0.3.1":[{"comment_text":"","digests":{"blake2b_256":"3d63ce5746e2017c4f11d4ec8f020830d77bf040f14c3bca93ddc923ff5692ec","md5":"dbe0b7badb8fe8b9dce4587f8146b179","sha256":"6bd154cae6d979954437de435dba162c3b871441d062a4b498568ab428506a3e"},"downloads":-1,"filename":"music-tag-0.3.1.tar.gz","has_sig":false,"md5_digest":"dbe0b7badb8fe8b9dce4587f8146b179","packagetype":"sdist","python_version":"source","requires_python":null,"size":18215,"upload_time":"2020-05-30T20:46:22","upload_time_iso_8601":"2020-05-30T20:46:22.509735Z","url":"https://files.pythonhosted.org/packages/3d/63/ce5746e2017c4f11d4ec8f020830d77bf040f14c3bca93ddc923ff5692ec/music-tag-0.3.1.tar.gz","yanked":false,"yanked_reason":null}],"0.3.2":[{"comment_text":"","digests":{"blake2b_256":"2223d2c074b4f3dca224c83a90438481f2ff47fffa3f275430ad12710ca9ae64","md5":"8bb6f9cf91143796534566a82ce638fe","sha256":"a2a5bdb7a89db405d05b6ba49e5f8285721745ef4667ed7175aa73bb89a77c97"},"downloads":-1,"filename":"music-tag-0.3.2.tar.gz","has_sig":false,"md5_digest":"8bb6f9cf91143796534566a82ce638fe","packagetype":"sdist","python_version":"source","requires_python":null,"size":18325,"upload_time":"2020-06-07T17:51:03","upload_time_iso_8601":"2020-06-07T17:51:03.178509Z","url":"https://files.pythonhosted.org/packages/22/23/d2c074b4f3dca224c83a90438481f2ff47fffa3f275430ad12710ca9ae64/music-tag-0.3.2.tar.gz","yanked":false,"yanked_reason":null}],"0.4.0":[{"comment_text":"","digests":{"blake2b_256":"b90825dc14d5a4b8c6f034d24afa6e06400a28320a199f64db3f2c9cd22f805b","md5":"3d9d75628f791708e170f53f0f45b68e","sha256":"0e581df8364aa9bc178c525cb8e1b8d1555556111c85e9e0a1a07f6021d95e5b"},"downloads":-1,"filename":"music-tag-0.4.0.tar.gz","has_sig":false,"md5_digest":"3d9d75628f791708e170f53f0f45b68e","packagetype":"sdist","python_version":"source","requires_python":null,"size":21567,"upload_time":"2021-01-24T06:18:04","upload_time_iso_8601":"2021-01-24T06:18:04.534059Z","url":"https://files.pythonhosted.org/packages/b9/08/25dc14d5a4b8c6f034d24afa6e06400a28320a199f64db3f2c9cd22f805b/music-tag-0.4.0.tar.gz","yanked":false,"yanked_reason":null}],"0.4.2":[{"comment_text":"","digests":{"blake2b_256":"5d38cb770f45927d151b46b0f53a11b92c8ae2418e2e1e33579be08b3c23d0ef","md5":"5b3481c9545a1fd8a00baa1c9df831c9","sha256":"99ebabff7f83ff77e4d71e6af9afcc1b8db439c3b5e366b4e98d18751b1b6e9b"},"downloads":-1,"filename":"music-tag-0.4.2.tar.gz","has_sig":false,"md5_digest":"5b3481c9545a1fd8a00baa1c9df831c9","packagetype":"sdist","python_version":"source","requires_python":null,"size":23058,"upload_time":"2021-01-31T01:41:43","upload_time_iso_8601":"2021-01-31T01:41:43.403728Z","url":"https://files.pythonhosted.org/packages/5d/38/cb770f45927d151b46b0f53a11b92c8ae2418e2e1e33579be08b3c23d0ef/music-tag-0.4.2.tar.gz","yanked":false,"yanked_reason":null}],"0.4.3":[{"comment_text":"","digests":{"blake2b_256":"fcf4ebcdd2fc9bfaf569b795250090e4f4088dc65a5a3e32c53baa9bfc3fc296","md5":"ace5be9fe210478a0f89ff62fa62d179","sha256":"0aab6e6eeda8df0f5316ec2d2190bd74561b7e03562ab091ce8d5687cdbcfff6"},"downloads":-1,"filename":"music-tag-0.4.3.tar.gz","has_sig":false,"md5_digest":"ace5be9fe210478a0f89ff62fa62d179","packagetype":"sdist","python_version":"source","requires_python":null,"size":23153,"upload_time":"2021-06-05T17:20:23","upload_time_iso_8601":"2021-06-05T17:20:23.552628Z","url":"https://files.pythonhosted.org/packages/fc/f4/ebcdd2fc9bfaf569b795250090e4f4088dc65a5a3e32c53baa9bfc3fc296/music-tag-0.4.3.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"fcf4ebcdd2fc9bfaf569b795250090e4f4088dc65a5a3e32c53baa9bfc3fc296","md5":"ace5be9fe210478a0f89ff62fa62d179","sha256":"0aab6e6eeda8df0f5316ec2d2190bd74561b7e03562ab091ce8d5687cdbcfff6"},"downloads":-1,"filename":"music-tag-0.4.3.tar.gz","has_sig":false,"md5_digest":"ace5be9fe210478a0f89ff62fa62d179","packagetype":"sdist","python_version":"source","requires_python":null,"size":23153,"upload_time":"2021-06-05T17:20:23","upload_time_iso_8601":"2021-06-05T17:20:23.552628Z","url":"https://files.pythonhosted.org/packages/fc/f4/ebcdd2fc9bfaf569b795250090e4f4088dc65a5a3e32c53baa9bfc3fc296/music-tag-0.4.3.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
