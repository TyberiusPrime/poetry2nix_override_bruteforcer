{"info":{"author":null,"author_email":"Cameron Simpson <cs@cskk.id.au>","bugtrack_url":null,"classifiers":["Development Status :: 4 - Beta","Intended Audience :: Developers","License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Topic :: Software Development :: Libraries :: Python Modules"],"description":"Lexical analysis functions, tokenisers, transcribers:\nan arbitrary assortment of lexical and tokenisation functions useful\nfor writing recursive descent parsers, of which I have several.\nThere are also some transcription functions for producing text\nfrom various objects, such as `hexify` and `unctrl`.\n\n*Latest release 20240630*:\nNew indent(paragraph,line_indent=\"  \") function.\n\nGenerally the get_* functions accept a source string and an offset\n(usually optional, default `0`) and return a token and the new offset,\nraising `ValueError` on failed tokenisation.\n\n## Function `as_lines(chunks, partials=None)`\n\nGenerator yielding complete lines from arbitrary pieces of text from\nthe iterable of `str` `chunks`.\n\nAfter completion, any remaining newline-free chunks remain\nin the partials list; they will be unavailable to the caller\nunless the list is presupplied.\n\n## Function `camelcase(snakecased, first_letter_only=False)`\n\nConvert a snake cased string `snakecased` into camel case.\n\nParameters:\n* `snakecased`: the snake case string to convert\n* `first_letter_only`: optional flag (default `False`);\n  if true then just ensure that the first character of a word\n  is uppercased, otherwise use `str.title`\n\nExample:\n\n    >>> camelcase('abc_def')\n    'abcDef'\n    >>> camelcase('ABc_def')\n    'abcDef'\n    >>> camelcase('abc_dEf')\n    'abcDef'\n    >>> camelcase('abc_dEf', first_letter_only=True)\n    'abcDEf'\n\n## Function `common_prefix(*strs)`\n\nReturn the common prefix of the strings `strs`.\n\nExamples:\n\n    >>> common_prefix('abc', 'def')\n    ''\n    >>> common_prefix('abc', 'abd')\n    'ab'\n    >>> common_prefix('abc', 'abcdef')\n    'abc'\n    >>> common_prefix('abc', 'abcdef', 'abz')\n    'ab'\n    >>> # contrast with cs.fileutils.common_path_prefix\n    >>> common_prefix('abc/def', 'abc/def1', 'abc/def2')\n    'abc/def'\n\n## Function `common_suffix(*strs)`\n\nReturn the common suffix of the strings `strs`.\n\n## Function `cropped(s: str, max_length: int = 32, roffset: int = 1, ellipsis: str = '...')`\n\nIf the length of `s` exceeds `max_length` (default `32`),\nreplace enough of the tail with `ellipsis`\nand the last `roffset` (default `1`) characters of `s`\nto fit in `max_length` characters.\n\n## Function `cropped_repr(o, roffset=1, max_length=32, inner_max_length=None)`\n\nCompute a cropped `repr()` of `o`.\n\nParameters:\n* `o`: the object to represent\n* `max_length`: the maximum length of the representation, default `32`\n* `inner_max_length`: the maximum length of the representations\n  of members of `o`, default `max_length//2`\n* `roffset`: the number of trailing characters to preserve, default `1`\n\n## Function `cutprefix(s, prefix)`\n\nStrip a `prefix` from the front of `s`.\nReturn the suffix if `s.startswith(prefix)`, else `s`.\n\nExample:\n\n    >>> abc_def = 'abc.def'\n    >>> cutprefix(abc_def, 'abc.')\n    'def'\n    >>> cutprefix(abc_def, 'zzz.')\n    'abc.def'\n    >>> cutprefix(abc_def, '.zzz') is abc_def\n    True\n\n## Function `cutsuffix(s, suffix)`\n\nStrip a `suffix` from the end of `s`.\nReturn the prefix if `s.endswith(suffix)`, else `s`.\n\nExample:\n\n    >>> abc_def = 'abc.def'\n    >>> cutsuffix(abc_def, '.def')\n    'abc'\n    >>> cutsuffix(abc_def, '.zzz')\n    'abc.def'\n    >>> cutsuffix(abc_def, '.zzz') is abc_def\n    True\n\n## Class `FFloat(FNumericMixin, builtins.float)`\n\nFormattable `float`.\n\n## Class `FInt(FNumericMixin, builtins.int)`\n\nFormattable `int`.\n\n## Class `FNumericMixin(FormatableMixin)`\n\nA `FormatableMixin` subclass.\n\n*Method `FNumericMixin.localtime(self)`*:\nTreat this as a UNIX timestamp and return a localtime `datetime`.\n\n*Method `FNumericMixin.utctime(self)`*:\nTreat this as a UNIX timestamp and return a UTC `datetime`.\n\n## Function `format_as(format_s: str, format_mapping, formatter=None, error_sep=None, strict=None)`\n\nFormat the string `format_s` using `Formatter.vformat`,\nreturn the formatted result.\nThis is a wrapper for `str.format_map`\nwhich raises a more informative `FormatAsError` exception on failure.\n\nParameters:\n* `format_s`: the format string to use as the template\n* `format_mapping`: the mapping of available replacement fields\n* `formatter`: an optional `string.Formatter`-like instance\n  with a `.vformat(format_string,args,kwargs)` method,\n  usually a subclass of `string.Formatter`;\n  if not specified then `FormatableFormatter` is used\n* `error_sep`: optional separator for the multipart error message,\n  default from `FormatAsError.DEFAULT_SEPARATOR`:\n  `'; '`\n* `strict`: optional flag (default `False`)\n  indicating that an unresolveable field should raise a\n  `KeyError` instead of inserting a placeholder\n\n## Function `format_attribute(method)`\n\nA decorator to mark a method as available as a format method.\nRequires the enclosing class to be decorated with `@has_format_attributes`.\n\nFor example,\nthe `FormatableMixin.json` method is defined like this:\n\n    @format_attribute\n    def json(self):\n        return self.FORMAT_JSON_ENCODER.encode(self)\n\nwhich allows a `FormatableMixin` subclass instance\nto be used in a format string like this:\n\n    {instance:json}\n\nto insert a JSON transcription of the instance.\n\nIt is recommended that methods marked with `@format_attribute`\nhave no side effects and do not modify state,\nas they are intended for use in ad hoc format strings\nsupplied by an end user.\n\n## Function `format_escape(s)`\n\nEscape `{}` characters in a string to protect them from `str.format`.\n\n## Function `format_recover(*da, **dkw)`\n\nDecorator for `__format__` methods which replaces failed formats\nwith `{self:format_spec}`.\n\n## Class `FormatableFormatter(string.Formatter)`\n\nA `string.Formatter` subclass interacting with objects\nwhich inherit from `FormatableMixin`.\n\n*Method `FormatableFormatter.format_field(value, format_spec: str)`*:\nFormat a value using `value.format_format_field`,\nreturning an `FStr`\n(a `str` subclass with additional `format_spec` features).\n\nWe actually recognise colon separated chains of formats\nand apply each format to the previously converted value.\nThe final result is promoted to an `FStr` before return.\n\n*Property `FormatableFormatter.format_mode`*:\nThread local state object.\n\nAttributes:\n* `strict`: initially `False`; raise a `KeyError` for\n  unresolveable field names\n\n*Method `FormatableFormatter.get_arg_name(field_name)`*:\nDefault initial arg_name is an identifier.\n\nReturns `(prefix,offset)`, and `('',0)` if there is no arg_name.\n\n*Method `FormatableFormatter.get_field(self, field_name, args, kwargs)`*:\nGet the object referenced by the field text `field_name`.\nRaises `KeyError` for an unknown `field_name`.\n\n*Method `FormatableFormatter.get_format_subspecs(format_spec)`*:\nParse a `format_spec` as a sequence of colon separated components,\nreturn a list of the components.\n\n*Method `FormatableFormatter.get_subfield(value, subfield_text: str)`*:\nResolve `value` against `subfield_text`,\nthe remaining field text after the term which resolved to `value`.\n\nFor example, a format `{name.blah[0]}`\nhas the field text `name.blah[0]`.\nA `get_field` implementation might initially\nresolve `name` to some value,\nleaving `.blah[0]` as the `subfield_text`.\nThis method supports taking that value\nand resolving it against the remaining text `.blah[0]`.\n\nFor generality, if `subfield_text` is the empty string\n`value` is returned unchanged.\n\n*Method `FormatableFormatter.get_value(self, arg_name, args, kwargs)`*:\nGet the object with index `arg_name`.\n\nThis default implementation returns `(kwargs[arg_name],arg_name)`.\n\n## Class `FormatableMixin(FormatableFormatter)`\n\nA subclass of `FormatableFormatter` which  provides 2 features:\n- a `__format__` method which parses the `format_spec` string\n  into multiple colon separated terms whose results chain\n- a `format_as` method which formats a format string using `str.format_map`\n  with a suitable mapping derived from the instance\n  via its `format_kwargs` method\n  (whose default is to return the instance itself)\n\nThe `format_as` method is like an inside out `str.format` or\n`object.__format__` method.\n\nThe `str.format` method is designed for formatting a string\nfrom a variety of other objects supplied in the keyword arguments.\n\nThe `object.__format__` method is for filling out a single `str.format`\nreplacement field from a single object.\n\nBy contrast, `format_as` is designed to fill out an entire format\nstring from the current object.\n\nFor example, the `cs.tagset.TagSetMixin` class\nuses `FormatableMixin` to provide a `format_as` method\nwhose replacement fields are derived from the tags in the tag set.\n\nSubclasses wanting to provide additional `format_spec` terms\nshould:\n- override `FormatableFormatter.format_field1` to implement\n  terms with no colons, letting `format_field` do the split into terms\n- override `FormatableFormatter.get_format_subspecs` to implement\n  the parse of `format_spec` into a sequence of terms.\n  This might recognise a special additional syntax\n  and quietly fall back to `super().get_format_subspecs`\n  if that is not present.\n\n*Method `FormatableMixin.__format__(self, format_spec)`*:\nFormat `self` according to `format_spec`.\n\nThis implementation calls `self.format_field`.\nAs such, a `format_spec` is considered\na sequence of colon separated terms.\n\nClasses wanting to implement additional format string syntaxes\nshould either:\n- override `FormatableFormatter.format_field1` to implement\n  terms with no colons, letting `format_field1` do the split into terms\n- override `FormatableFormatter.get_format_subspecs` to implement\n  the term parse.\n\nThe default implementation of `__format1__` just calls `super().__format__`.\nImplementations providing specialised formats\nshould implement them in `__format1__`\nwith fallback to `super().__format1__`.\n\n*Method `FormatableMixin.convert_field(self, value, conversion)`*:\nThe default converter for fields calls `Formatter.convert_field`.\n\n*Method `FormatableMixin.convert_via_method_or_attr(self, value, format_spec)`*:\nApply a method or attribute name based conversion to `value`\nwhere `format_spec` starts with a method name\napplicable to `value`.\nReturn `(converted,offset)`\nbeing the converted value and the offset after the method name.\n\nNote that if there is not a leading identifier on `format_spec`\nthen `value` is returned unchanged with `offset=0`.\n\nThe methods/attributes are looked up in the mapping\nreturned by `.format_attributes()` which represents allowed methods\n(broadly, one should not allow methods which modify any state).\n\nIf this returns a callable, it is called to obtain the converted value\notherwise it is used as is.\n\nAs a final tweak,\nif `value.get_format_attribute()` raises an `AttributeError`\n(the attribute is not an allowed attribute)\nor calling the attribute raises a `TypeError`\n(the `value` isn't suitable)\nand the `value` is not an instance of `FStr`,\nconvert it to an `FStr` and try again.\nThis provides the common utility methods on other types.\n\nThe motivating example was a `PurePosixPath`,\nwhich does not JSON transcribe;\nthis tweak supports both\n`posixpath:basename` via the pathlib stuff\nand `posixpath:json` via `FStr`\neven though a `PurePosixPath` does not subclass `FStr`.\n\n*Method `FormatableMixin.format_as(self, format_s, error_sep=None, strict=None, **control_kw)`*:\nReturn the string `format_s` formatted using the mapping\nreturned by `self.format_kwargs(**control_kw)`.\n\nIf a class using the mixin has no `format_kwargs(**control_kw)` method\nto provide a mapping for `str.format_map`\nthen the instance itself is used as the mapping.\n\n*Method `FormatableMixin.get_format_attribute(self, attr)`*:\nReturn a mapping of permitted methods to functions of an instance.\nThis is used to whitelist allowed `:`*name* method formats\nto prevent scenarios like little Bobby Tables calling `delete()`.\n\n*Method `FormatableMixin.get_format_attributes()`*:\nReturn the mapping of format attributes.\n\n*Method `FormatableMixin.json(self)`*:\nThe value transcribed as compact JSON.\n\n## Class `FormatAsError(builtins.LookupError)`\n\nSubclass of `LookupError` for use by `format_as`.\n\n## Class `FStr(FormatableMixin, builtins.str)`\n\nA `str` subclass with the `FormatableMixin` methods,\nparticularly its `__format__` method\nwhich uses `str` method names as valid formats.\n\nIt also has a bunch of utility methods which are available\nas `:`*method* in format strings.\n\n*Method `FStr.basename(self)`*:\nTreat as a filesystem path and return the basename.\n\n*Method `FStr.dirname(self)`*:\nTreat as a filesystem path and return the dirname.\n\n*Method `FStr.f(self)`*:\nParse `self` as a `float`.\n\n*Method `FStr.i(self, base=10)`*:\nParse `self` as an `int`.\n\n*Method `FStr.lc(self)`*:\nLowercase using `lc_()`.\n\n*Method `FStr.path(self)`*:\nConvert to a native filesystem `pathlib.Path`.\n\n*Method `FStr.posix_path(self)`*:\nConvert to a Posix filesystem `pathlib.Path`.\n\n*Method `FStr.windows_path(self)`*:\nConvert to a Windows filesystem `pathlib.Path`.\n\n## Function `get_chars(s, offset, gochars)`\n\nScan the string `s` for characters in `gochars` starting at `offset`.\nReturn `(match,new_offset)`.\n\n`gochars` may also be a callable, in which case a character\n`ch` is accepted if `gochars(ch)` is true.\n\n## Function `get_decimal(s, offset=0)`\n\nScan the string `s` for decimal characters starting at `offset` (default `0`).\nReturn `(dec_string,new_offset)`.\n\n## Function `get_decimal_or_float_value(s, offset=0)`\n\nFetch a decimal or basic float (nnn.nnn) value\nfrom the str `s` at `offset` (default `0`).\nReturn `(value,new_offset)`.\n\n## Function `get_decimal_value(s, offset=0)`\n\nScan the string `s` for a decimal value starting at `offset` (default `0`).\nReturn `(value,new_offset)`.\n\n## Function `get_delimited(s, offset, delim)`\n\nCollect text from the string `s` from position `offset` up\nto the first occurence of delimiter `delim`; return the text\nexcluding the delimiter and the offset after the delimiter.\n\n## Function `get_dotted_identifier(s, offset=0, **kw)`\n\nScan the string `s` for a dotted identifier (by default an\nASCII letter or underscore followed by letters, digits or\nunderscores) with optional trailing dot and another dotted\nidentifier, starting at `offset` (default `0`).\nReturn `(match,new_offset)`.\n\nNote: the empty string and an unchanged offset will be returned if\nthere is no leading letter/underscore.\n\nKeyword arguments are passed to `get_identifier`\n(used for each component of the dotted identifier).\n\n## Function `get_envvar(s, offset=0, environ=None, default=None, specials=None)`\n\nParse a simple environment variable reference to $varname or\n$x where \"x\" is a special character.\n\nParameters:\n* `s`: the string with the variable reference\n* `offset`: the starting point for the reference\n* `default`: default value for missing environment variables;\n   if `None` (the default) a `ValueError` is raised\n* `environ`: the environment mapping, default `os.environ`\n* `specials`: the mapping of special single character variables\n\n## Function `get_hexadecimal(s, offset=0)`\n\nScan the string `s` for hexadecimal characters starting at `offset` (default `0`).\nReturn `(hex_string,new_offset)`.\n\n## Function `get_hexadecimal_value(s, offset=0)`\n\nScan the string `s` for a hexadecimal value starting at `offset` (default `0`).\nReturn `(value,new_offset)`.\n\n## Function `get_identifier(s, offset=0, alpha='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', number='0123456789', extras='_')`\n\nScan the string `s` for an identifier (by default an ASCII\nletter or underscore followed by letters, digits or underscores)\nstarting at `offset` (default 0).\nReturn `(match,new_offset)`.\n\n*Note*: the empty string and an unchanged offset will be returned if\nthere is no leading letter/underscore.\n\nParameters:\n* `s`: the string to scan\n* `offset`: the starting offset, default `0`.\n* `alpha`: the characters considered alphabetic,\n  default `string.ascii_letters`.\n* `number`: the characters considered numeric,\n  default `string.digits`.\n* `extras`: extra characters considered part of an identifier,\n  default `'_'`.\n\n## Function `get_ini_clause_entryname(s, offset=0)`\n\nParse a `[`*clausename*`]`*entryname* string\nfrom `s` at `offset` (default `0`).\nReturn `(clausename,entryname,new_offset)`.\n\n## Function `get_ini_clausename(s, offset=0)`\n\nParse a `[`*clausename*`]` string from `s` at `offset` (default `0`).\nReturn `(clausename,new_offset)`.\n\n## Function `get_nonwhite(s, offset=0)`\n\nScan the string `s` for characters not in `string.whitespace`\nstarting at `offset` (default `0`).\nReturn `(match,new_offset)`.\n\n## Function `get_other_chars(s, offset=0, stopchars=None)`\n\nScan the string `s` for characters not in `stopchars` starting\nat `offset` (default `0`).\nReturn `(match,new_offset)`.\n\n## Function `get_prefix_n(s, prefix, n=None, *, offset=0)`\n\nStrip a leading `prefix` and numeric value `n` from the string `s`\nstarting at `offset` (default `0`).\nReturn the matched prefix, the numeric value and the new offset.\nReturns `(None,None,offset)` on no match.\n\nParameters:\n* `s`: the string to parse\n* `prefix`: the prefix string which must appear at `offset`\n  or an object with a `match(str,offset)` method\n  such as an `re.Pattern` regexp instance\n* `n`: optional integer value;\n  if omitted any value will be accepted, otherwise the numeric\n  part must match `n`\n\nIf `prefix` is a `str`, the \"matched prefix\" return value is `prefix`.\nOtherwise the \"matched prefix\" return value is the result of\nthe `prefix.match(s,offset)` call. The result must also support\na `.end()` method returning the offset in `s` beyond the match,\nused to locate the following numeric portion.\n\nExamples:\n\n   >>> import re\n   >>> get_prefix_n('s03e01--', 's')\n   ('s', 3, 3)\n   >>> get_prefix_n('s03e01--', 's', 3)\n   ('s', 3, 3)\n   >>> get_prefix_n('s03e01--', 's', 4)\n   (None, None, 0)\n   >>> get_prefix_n('s03e01--', re.compile('[es]',re.I))\n   (<re.Match object; span=(0, 1), match='s'>, 3, 3)\n   >>> get_prefix_n('s03e01--', re.compile('[es]',re.I), offset=3)\n   (<re.Match object; span=(3, 4), match='e'>, 1, 6)\n\n## Function `get_qstr(s, offset=0, q='\"', environ=None, default=None, env_specials=None)`\n\nGet quoted text with slosh escapes and optional environment substitution.\n\nParameters:\n* `s`: the string containg the quoted text.\n* `offset`: the starting point, default `0`.\n* `q`: the quote character, default `'\"'`. If `q` is `None`,\n  do not expect the string to be delimited by quote marks.\n* `environ`: if not `None`, also parse and expand `$`*envvar* references.\n* `default`: passed to `get_envvar`\n\n## Function `get_qstr_or_identifier(s, offset)`\n\nParse a double quoted string or an identifier.\n\n## Function `get_sloshed_text(s, delim, offset=0, slosh='\\\\', mapper=<function slosh_mapper at 0x106ab7640>, specials=None)`\n\nCollect slosh escaped text from the string `s` from position\n`offset` (default `0`) and return the decoded unicode string and\nthe offset of the completed parse.\n\nParameters:\n* `delim`: end of string delimiter, such as a single or double quote.\n* `offset`: starting offset within `s`, default `0`.\n* `slosh`: escape character, default a slosh ('\\').\n* `mapper`: a mapping function which accepts a single character\n  and returns a replacement string or `None`; this is used the\n  replace things such as '\\t' or '\\n'. The default is the\n  `slosh_mapper` function, whose default mapping is `SLOSH_CHARMAP`.\n* `specials`: a mapping of other special character sequences and parse\n  functions for gathering them up. When one of the special\n  character sequences is found in the string, the parse\n  function is called to parse at that point.\n  The parse functions accept\n  `s` and the offset of the special character. They return\n  the decoded string and the offset past the parse.\n\nThe escape character `slosh` introduces an encoding of some\nreplacement text whose value depends on the following character.\nIf the following character is:\n* the escape character `slosh`, insert the escape character.\n* the string delimiter `delim`, insert the delimiter.\n* the character 'x', insert the character with code from the following\n  2 hexadecimal digits.\n* the character 'u', insert the character with code from the following\n  4 hexadecimal digits.\n* the character 'U', insert the character with code from the following\n  8 hexadecimal digits.\n* a character from the keys of `mapper`\n\n## Function `get_suffix_part(s, *, keywords=('part',), numeral_map=None)`\n\nStrip a trailing \"part N\" suffix from the string `s`.\nReturn the matched suffix and the number part number.\nRetrn `(None,None)` on no match.\n\nParameters:\n* `s`: the string\n* `keywords`: an iterable of `str` to match, or a single `str`;\n  default `'part'`\n* `numeral_map`: an optional mapping of numeral names to numeric values;\n  default `NUMERAL_NAMES['en']`, the English numerals\n\nExanmple:\n\n    >>> get_suffix_part('s09e10 - A New World: Part One')\n    (': Part One', 1)\n\n## Function `get_tokens(s, offset, getters)`\n\nParse the string `s` from position `offset` using the supplied\ntokeniser functions `getters`.\nReturn the list of tokens matched and the final offset.\n\nParameters:\n* `s`: the string to parse.\n* `offset`: the starting position for the parse.\n* `getters`: an iterable of tokeniser specifications.\n\nEach tokeniser specification `getter` is either:\n* a callable expecting `(s,offset)` and returning `(token,new_offset)`\n* a literal string, to be matched exactly\n* a `tuple` or `list` with values `(func,args,kwargs)`;\n  call `func(s,offset,*args,**kwargs)`\n* an object with a `.match` method such as a regex;\n  call `getter.match(s,offset)` and return a match object with\n  a `.end()` method returning the offset of the end of the match\n\n## Function `get_uc_identifier(s, offset=0, number='0123456789', extras='_')`\n\nScan the string `s` for an identifier as for `get_identifier`,\nbut require the letters to be uppercase.\n\n## Function `get_white(s, offset=0)`\n\nScan the string `s` for characters in `string.whitespace`\nstarting at `offset` (default `0`).\nReturn `(match,new_offset)`.\n\n## Function `has_format_attributes(*da, **dkw)`\n\nClass decorator to walk this class for direct methods\nmarked as for use in format strings\nand to include them in `cls.format_attributes()`.\n\nMethods are normally marked with the `@format_attribute` decorator.\n\nIf `inherit` is true the base format attributes will be\nobtained from other classes:\n* `inherit` is `True`: use `cls.__mro__`\n* `inherit` is a class: use that class\n* otherwise assume `inherit` is an iterable of classes\nFor each class `otherclass`, update the initial attribute\nmapping from `otherclass.get_format_attributes()`.\n\n## Function `hexify(bs)`\n\nA flavour of `binascii.hexlify` returning a `str`.\n\n## Function `htmlify(s, nbsp=False)`\n\nConvert a string for safe transcription in HTML.\n\nParameters:\n* `s`: the string\n* `nbsp`: replaces spaces with `\"&nbsp;\"` to prevent word folding,\n  default `False`.\n\n## Function `htmlquote(s)`\n\nQuote a string for use in HTML.\n\n## Function `indent(paragraph, line_indent='  ')`\n\nReturn the `paragraph` indents by `line_indent` (default `\"  \"`).\n\n## Function `is_dotted_identifier(s, offset=0, **kw)`\n\nTest if the string `s` is an identifier from position `offset` onward.\n\n## Function `is_identifier(s, offset=0, **kw)`\n\nTest if the string `s` is an identifier\nfrom position `offset` (default `0`) onward.\n\n## Function `is_uc_identifier(s, offset=0, **kw)`\n\nTest if the string `s` is an uppercase identifier\nfrom position `offset` (default `0`) onward.\n\n## Function `isUC_(s)`\n\nCheck that a string matches the regular expression `^[A-Z][A-Z_0-9]*$`.\n\n## Function `jsquote(s)`\n\nQuote a string for use in JavaScript.\n\n## Function `lc_(value)`\n\nReturn `value.lower()`\nwith `'-'` translated into `'_'` and `' '` translated into `'-'`.\n\nI use this to construct lowercase filenames containing a\nreadable transcription of a title string.\n\nSee also `titleify_lc()`, an imperfect reversal of this.\n\n## Function `match_tokens(s, offset, getters)`\n\nWrapper for `get_tokens` which catches `ValueError` exceptions\nand returns `(None,offset)`.\n\n## Function `parseUC_sAttr(attr)`\n\nTake an attribute name `attr` and return `(key,is_plural)`.\n\nExamples:\n* `'FOO'` returns `('FOO',False)`.\n* `'FOOs'` or `'FOOes'` returns `('FOO',True)`.\nOtherwise return `(None,False)`.\n\n## Function `phpquote(s)`\n\nQuote a string for use in PHP code.\n\n## Function `r(o, max_length=None, *, use_cls=False)`\n\nLike `typed_str` but using `repr` instead of `str`.\nThis is available as both `typed_repr` and `r`.\n\n## Function `s(o, use_cls=False, use_repr=False, max_length=32)`\n\nReturn \"type(o).__name__:str(o)\" for some object `o`.\nThis is available as both `typed_str` and `s`.\n\nParameters:\n* `use_cls`: default `False`;\n  if true, use `str(type(o))` instead of `type(o).__name__`\n* `use_repr`: default `False`;\n  if true, use `repr(o)` instead of `str(o)`\n\nI use this a lot when debugging. Example:\n\n    from cs.lex import typed_str as s\n    ......\n    X(\"foo = %s\", s(foo))\n\n## Function `skipwhite(s, offset=0)`\n\nConvenience routine for skipping past whitespace;\nreturns the offset of the next nonwhitespace character.\n\n## Function `slosh_mapper(c, charmap=None)`\n\nReturn a string to replace backslash-`c`, or `None`.\n\n## Function `snakecase(camelcased)`\n\nConvert a camel cased string `camelcased` into snake case.\n\nParameters:\n* `cameelcased`: the cameel case string to convert\n* `first_letter_only`: optional flag (default `False`);\n  if true then just ensure that the first character of a word\n  is uppercased, otherwise use `str.title`\n\nExample:\n\n    >>> snakecase('abcDef')\n    'abc_def'\n    >>> snakecase('abcDEf')\n    'abc_def'\n    >>> snakecase('AbcDef')\n    'abc_def'\n\n## Function `split_remote_path(remotepath: str) -> Tuple[Optional[str], str]`\n\nSplit a path with an optional leading `[user@]rhost:` prefix\ninto the prefix and the remaining path.\n`None` is returned for the prefix is there is none.\nThis is useful for things like `rsync` targets etc.\n\n## Function `stripped_dedent(s)`\n\nSlightly smarter dedent which ignores a string's opening indent.\n\nAlgorithm:\nstrip the supplied string `s`, pull off the leading line,\ndedent the rest, put back the leading line.\n\nThis supports my preferred docstring layout, where the opening\nline of text is on the same line as the opening quote.\n\nExample:\n\n    >>> def func(s):\n    ...   \"\"\" Slightly smarter dedent which ignores a string's opening indent.\n    ...       Strip the supplied string `s`. Pull off the leading line.\n    ...       Dedent the rest. Put back the leading line.\n    ...   \"\"\"\n    ...   pass\n    ...\n    >>> from cs.lex import stripped_dedent\n    >>> print(stripped_dedent(func.__doc__))\n    Slightly smarter dedent which ignores a string's opening indent.\n    Strip the supplied string `s`. Pull off the leading line.\n    Dedent the rest. Put back the leading line.\n\n## Function `strlist(ary, sep=', ')`\n\nConvert an iterable to strings and join with `sep` (default `', '`).\n\n## Function `tabpadding(padlen, tabsize=8, offset=0)`\n\nCompute some spaces to use a tab padding at an offfset.\n\n## Function `texthexify(bs, shiftin='[', shiftout=']', whitelist=None)`\n\nTranscribe the bytes `bs` to text using compact text runs for\nsome common text values.\n\nThis can be reversed with the `untexthexify` function.\n\nThis is an ad doc format devised to be compact but also to\nexpose \"text\" embedded within to the eye. The original use\ncase was transcribing a binary directory entry format, where\nthe filename parts would be somewhat visible in the transcription.\n\nThe output is a string of hexadecimal digits for the encoded\nbytes except for runs of values from the whitelist, which are\nenclosed in the shiftin and shiftout markers and transcribed\nas is. The default whitelist is values of the ASCII letters,\nthe decimal digits and the punctuation characters '_-+.,'.\nThe default shiftin and shiftout markers are '[' and ']'.\n\nString objects converted with either `hexify` and `texthexify`\noutput strings may be freely concatenated and decoded with\n`untexthexify`.\n\nExample:\n\n    >>> texthexify(b'&^%&^%abcdefghi)(*)(*')\n    '265e25265e25[abcdefghi]29282a29282a'\n\nParameters:\n* `bs`: the bytes to transcribe\n* `shiftin`: Optional. The marker string used to indicate a shift to\n  direct textual transcription of the bytes, default: `'['`.\n* `shiftout`: Optional. The marker string used to indicate a\n  shift from text mode back into hexadecimal transcription,\n  default `']'`.\n* `whitelist`: an optional bytes or string object indicating byte\n  values which may be represented directly in text;\n  the default value is the ASCII letters, the decimal digits\n  and the punctuation characters `'_-+.,'`.\n\n## Function `titleify_lc(value_lc)`\n\nTranslate `'-'` into `' '` and `'_'` translated into `'-'`,\nthen titlecased.\n\nSee also `lc_()`, which this reverses imperfectly.\n\n## Function `typed_repr(o, max_length=None, *, use_cls=False)`\n\nLike `typed_str` but using `repr` instead of `str`.\nThis is available as both `typed_repr` and `r`.\n\n## Function `typed_str(o, use_cls=False, use_repr=False, max_length=32)`\n\nReturn \"type(o).__name__:str(o)\" for some object `o`.\nThis is available as both `typed_str` and `s`.\n\nParameters:\n* `use_cls`: default `False`;\n  if true, use `str(type(o))` instead of `type(o).__name__`\n* `use_repr`: default `False`;\n  if true, use `repr(o)` instead of `str(o)`\n\nI use this a lot when debugging. Example:\n\n    from cs.lex import typed_str as s\n    ......\n    X(\"foo = %s\", s(foo))\n\n## Function `unctrl(s, tabsize=8)`\n\nReturn the string `s` with `TAB`s expanded and control characters\nreplaced with printable representations.\n\n## Function `untexthexify(s, shiftin='[', shiftout=']')`\n\nDecode a textual representation of binary data into binary data.\n\nThis is the reverse of the `texthexify` function.\n\nOutside of the `shiftin`/`shiftout` markers the binary data\nare represented as hexadecimal. Within the markers the bytes\nhave the values of the ordinals of the characters.\n\nExample:\n\n    >>> untexthexify('265e25265e25[abcdefghi]29282a29282a')\n    b'&^%&^%abcdefghi)(*)(*'\n\nParameters:\n* `s`: the string containing the text representation.\n* `shiftin`: Optional. The marker string commencing a sequence\n  of direct text transcription, default `'['`.\n* `shiftout`: Optional. The marker string ending a sequence\n  of direct text transcription, default `']'`.\n\n# Release Log\n\n\n\n*Release 20240630*:\nNew indent(paragraph,line_indent=\"  \") function.\n\n*Release 20240519*:\nNew get_suffix_part() to extract things line \": Part One\" from something such as a TV episode name.\n\n*Release 20240316*:\nFixed release upload artifacts.\n\n*Release 20240211*:\nNew split_remote_path() function to recognise [[user@]host]:path.\n\n*Release 20231018*:\nNew is_uc_identifier function.\n\n*Release 20230401*:\nImport update.\n\n*Release 20230217.1*:\nFix package requirements.\n\n*Release 20230217*:\n* New get_prefix_n function to parse a numeric value preceeded by a prefix.\n* Drop strip_prefix_n, get_prefix_n is more general and I had not got around to using strip_prefix_n yet - when I did, I ended up writing get_prefix_n.\n\n*Release 20230210*:\n* @has_format_attributes: new optional inherit parameter to inherit superclass (or other) format attributes, default False.\n* New FNumericMixin, FFloat, FInt FormatableMixin subclasses like FStr - they add .localtime and .utctime formattable attributes.\n\n*Release 20220918*:\ntyped_str(): crop the value part, default max_length=32, bugfix message cropping.\n\n*Release 20220626*:\n* Remove dependency on cs.py3, we've been Python 2 incompatible for a while.\n* FormatableFormatter.format_field: promote None to FStr(None).\n\n*Release 20220227*:\n* typed_str,typed_repr: make max_length the first optional positional parameter, make other parameters keyword only.\n* New camelcase() and snakecase() functions.\n\n*Release 20211208*:\nDocstring updates.\n\n*Release 20210913*:\n* FormatableFormatter.FORMAT_RE_ARG_NAME_s: strings commencing with digits now match \\d+(\\.\\d+)[a-z]+, eg \"02d\".\n* Alias typed_str as s and typed_repr as r.\n* FormatableFormatter: new .format_mode thread local state object initially with strict=False, used to control whether unknown fields leave a placeholder or raise KeyError.\n* FormatableFormatter.format_field: assorted fixes.\n\n*Release 20210906*:\nNew strip_prefix_n() function to strip a leading `prefix` and numeric value `n` from the start of a string.\n\n*Release 20210717*:\n* Many many changes to FormatableMixin, FormatableFormatter and friends around supporting {foo|conv1|con2|...} instead of {foo!conv}. Still in flux.\n* New typed_repr like typed_str but using repr.\n\n*Release 20210306*:\n* New cropped() function to crop strings.\n* Rework cropped_repr() to do the repr() itself, and to crop the interiors of tuples and lists.\n* cropped_repr: new inner_max_length for cropping the members of collections.\n* cropped_repr: special case for length=1 tuples.\n* New typed_str(o) object returning type(o).__name__:str(o) in the default case, useful for debugging.\n\n*Release 20201228*:\nMinor doc updates.\n\n*Release 20200914*:\n* Hide terribly special purpose lastlinelen() in cs.hier under a private name.\n* New common_prefix and common_suffix function to compare strings.\n\n*Release 20200718*:\nget_chars: accept a callable for gochars, indicating a per character test function.\n\n*Release 20200613*:\ncropped_repr: replace hardwired 29 with computed length\n\n*Release 20200517*:\n* New get_ini_clausename to parse \"[clausename]\".\n* New get_ini_clause_entryname parsing \"[clausename]entryname\".\n* New cropped_repr for returning a shortened repr()+\"...\" if the length exceeds a threshold.\n* New format_escape function to double {} characters to survive str.format.\n\n*Release 20200318*:\n* New lc_() function to lowercase and dash a string, new titleify_lc() to mostly reverse lc_().\n* New format_as function, FormatableMixin and related FormatAsError.\n\n*Release 20200229*:\nNew cutprefix and cutsuffix functions.\n\n*Release 20190812*:\nFix bad slosh escapes in strings.\n\n*Release 20190220*:\nNew function get_qstr_or_identifier.\n\n*Release 20181108*:\nnew function get_decimal_or_float_value to read a decimal or basic float\n\n*Release 20180815*:\nNo semantic changes; update some docstrings and clean some lint, fix a unit test.\n\n*Release 20180810*:\n* New get_decimal_value and get_hexadecimal_value functions.\n* New stripped_dedent function, a slightly smarter textwrap.dedent.\n\n*Release 20171231*:\nNew function get_decimal. Drop unused function dict2js.\n\n*Release 20170904*:\nPython 2/3 ports, move rfc2047 into new cs.rfc2047 module.\n\n*Release 20160828*:\n* Use \"install_requires\" instead of \"requires\" in DISTINFO.\n* Discard str1(), pointless optimisation.\n* unrfc2047: map _ to SPACE, improve exception handling.\n* Add phpquote: quote a string for use in PHP code; add docstring to jsquote.\n* Add is_identifier test.\n* Add get_dotted_identifier.\n* Add is_dotted_identifier.\n* Add get_hexadecimal.\n* Add skipwhite, convenince wrapper for get_white returning just the next offset.\n* Assorted bugfixes and improvements.\n\n*Release 20150120*:\ncs.lex: texthexify: backport to python 2 using cs.py3 bytes type\n\n*Release 20150118*:\nmetadata updates\n\n*Release 20150116*:\nPyPI metadata and slight code cleanup.\n","description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"python2, python3","license":"GNU General Public License v3 or later (GPLv3+)","maintainer":null,"maintainer_email":null,"name":"cs.lex","package_url":"https://pypi.org/project/cs.lex/","platform":null,"project_url":"https://pypi.org/project/cs.lex/","project_urls":{"MonoRepo Commits":"https://bitbucket.org/cameron_simpson/css/commits/branch/main","Monorepo Git Mirror":"https://github.com/cameron-simpson/css","Monorepo Hg/Mercurial Mirror":"https://hg.sr.ht/~cameron-simpson/css","Source":"https://github.com/cameron-simpson/css/blob/main/lib/python/cs/lex.py"},"provides_extra":null,"release_url":"https://pypi.org/project/cs.lex/20240630/","requires_dist":["cs.dateutils>=20230210","cs.deco>=20240630","cs.gimmicks>=20240316","cs.pfx>=20240630","cs.py.func>=20240630","cs.seq>=20200914","icontract","python-dateutil","typeguard"],"requires_python":null,"summary":"Lexical analysis functions, tokenisers, transcribers: an arbitrary assortment of lexical and tokenisation functions useful for writing recursive descent parsers, of which I have several. There are also some transcription functions for producing text from various objects, such as `hexify` and `unctrl`.","version":"20240630","yanked":false,"yanked_reason":null},"last_serial":23911320,"releases":{"20150118":[{"comment_text":"","digests":{"blake2b_256":"8d3f519781144aa6b9b603696365283c7c240458f4e3286013cf9bcc6c00ef00","md5":"532ce38899726a27d8c0910f751e5e08","sha256":"fbd1f673a03a36361e0b126241b9e12c18e79d844b6a64ae248d2b2986932500"},"downloads":-1,"filename":"cs.lex-20150118.tar.gz","has_sig":false,"md5_digest":"532ce38899726a27d8c0910f751e5e08","packagetype":"sdist","python_version":"source","requires_python":null,"size":8005,"upload_time":"2015-01-18T05:58:10","upload_time_iso_8601":"2015-01-18T05:58:10.727397Z","url":"https://files.pythonhosted.org/packages/8d/3f/519781144aa6b9b603696365283c7c240458f4e3286013cf9bcc6c00ef00/cs.lex-20150118.tar.gz","yanked":false,"yanked_reason":null}],"20150120":[{"comment_text":"","digests":{"blake2b_256":"b25f83512d8dcd5e5d92bca9a048f2749863fa0f3f2964b4e0c18de761b72f47","md5":"b8ed5aede3eb8b527acd72417413ef31","sha256":"84efcc0725cf99fe953148c49c7d0e8c7e283c244f0ea039f6decfac54c98235"},"downloads":-1,"filename":"cs.lex-20150120.tar.gz","has_sig":false,"md5_digest":"b8ed5aede3eb8b527acd72417413ef31","packagetype":"sdist","python_version":"source","requires_python":null,"size":8142,"upload_time":"2015-01-19T23:36:47","upload_time_iso_8601":"2015-01-19T23:36:47.635773Z","url":"https://files.pythonhosted.org/packages/b2/5f/83512d8dcd5e5d92bca9a048f2749863fa0f3f2964b4e0c18de761b72f47/cs.lex-20150120.tar.gz","yanked":false,"yanked_reason":null}],"20160828":[{"comment_text":"","digests":{"blake2b_256":"b7a51ddfcf4304d3f40897bce3701053b8521b85d82dc4dfe815321672f184ef","md5":"b22839b534cc0deb9d98dd9cef5b2166","sha256":"b93062cb06598d82335df57268fc27ca49420f07f87c04a3a58019170d6d5a48"},"downloads":-1,"filename":"cs.lex-20160828.tar.gz","has_sig":false,"md5_digest":"b22839b534cc0deb9d98dd9cef5b2166","packagetype":"sdist","python_version":"source","requires_python":null,"size":8951,"upload_time":"2016-08-28T06:07:18","upload_time_iso_8601":"2016-08-28T06:07:18.786265Z","url":"https://files.pythonhosted.org/packages/b7/a5/1ddfcf4304d3f40897bce3701053b8521b85d82dc4dfe815321672f184ef/cs.lex-20160828.tar.gz","yanked":false,"yanked_reason":null}],"20170904":[{"comment_text":"","digests":{"blake2b_256":"c57ca952ec94ddaf052b22f4fb2e274c60716cfe6e3727c966f5ee0affc37f1c","md5":"4d318811bdb1f9a761491a75d029b547","sha256":"3987b53546cfbab46c188bf8b83fa70b4fa311e1fd8256714e636abacd2254a2"},"downloads":-1,"filename":"cs.lex-20170904.tar.gz","has_sig":false,"md5_digest":"4d318811bdb1f9a761491a75d029b547","packagetype":"sdist","python_version":"source","requires_python":null,"size":8278,"upload_time":"2017-09-04T01:07:12","upload_time_iso_8601":"2017-09-04T01:07:12.279233Z","url":"https://files.pythonhosted.org/packages/c5/7c/a952ec94ddaf052b22f4fb2e274c60716cfe6e3727c966f5ee0affc37f1c/cs.lex-20170904.tar.gz","yanked":false,"yanked_reason":null}],"20171231":[{"comment_text":"","digests":{"blake2b_256":"202f934c98939143a6e6d0068366ea3940508640e0253616c1a107c05aeff372","md5":"8f4e597627284b45f8ce8fbb3d6c9201","sha256":"1d8a58aa5f6d1e799d63264554f3bb5831149957d42ae9dc58c586dcf557a0f3"},"downloads":-1,"filename":"cs.lex-20171231.tar.gz","has_sig":false,"md5_digest":"8f4e597627284b45f8ce8fbb3d6c9201","packagetype":"sdist","python_version":"source","requires_python":null,"size":8330,"upload_time":"2017-12-30T22:35:53","upload_time_iso_8601":"2017-12-30T22:35:53.664497Z","url":"https://files.pythonhosted.org/packages/20/2f/934c98939143a6e6d0068366ea3940508640e0253616c1a107c05aeff372/cs.lex-20171231.tar.gz","yanked":false,"yanked_reason":null}],"20180810":[{"comment_text":"","digests":{"blake2b_256":"a6d0b46b824f86b6e962807711b9afb4fe37dfc9c317d8eb6d3648ff82de89a4","md5":"2011039a6649e7c2d22fdf48bba793ea","sha256":"5feb4b40ec82987c02b6d4543885f5c0d9d26cb5e37e9327879c8c152c0386cb"},"downloads":-1,"filename":"cs.lex-20180810.tar.gz","has_sig":false,"md5_digest":"2011039a6649e7c2d22fdf48bba793ea","packagetype":"sdist","python_version":"source","requires_python":null,"size":9679,"upload_time":"2018-08-10T01:53:27","upload_time_iso_8601":"2018-08-10T01:53:27.224906Z","url":"https://files.pythonhosted.org/packages/a6/d0/b46b824f86b6e962807711b9afb4fe37dfc9c317d8eb6d3648ff82de89a4/cs.lex-20180810.tar.gz","yanked":false,"yanked_reason":null}],"20180815":[{"comment_text":"","digests":{"blake2b_256":"8ddcf72474b72057d77fc496ceac38af10f06f8cb2302d7662a871b541ed0e40","md5":"4d86ff4feda881ba78be5cdecd47828d","sha256":"5c9e12dc09218525e0a9ade114095194b61f3e5b063a120f7b05b8d51818955c"},"downloads":-1,"filename":"cs.lex-20180815.tar.gz","has_sig":false,"md5_digest":"4d86ff4feda881ba78be5cdecd47828d","packagetype":"sdist","python_version":"source","requires_python":null,"size":12030,"upload_time":"2018-08-14T22:52:33","upload_time_iso_8601":"2018-08-14T22:52:33.113512Z","url":"https://files.pythonhosted.org/packages/8d/dc/f72474b72057d77fc496ceac38af10f06f8cb2302d7662a871b541ed0e40/cs.lex-20180815.tar.gz","yanked":false,"yanked_reason":null}],"20181108":[{"comment_text":"","digests":{"blake2b_256":"a0abe4808898e4027fcb3e7850164133a66fad3c11322e70ed08bd8e741231ea","md5":"761c5f7e4d207a2e504eb5b44bda5bb5","sha256":"d9be4e36e2dad5ed15781e8e731869bc1b479b36cec89aea7efc677efb12b095"},"downloads":-1,"filename":"cs.lex-20181108.tar.gz","has_sig":false,"md5_digest":"761c5f7e4d207a2e504eb5b44bda5bb5","packagetype":"sdist","python_version":"source","requires_python":null,"size":12207,"upload_time":"2018-11-07T22:03:08","upload_time_iso_8601":"2018-11-07T22:03:08.782242Z","url":"https://files.pythonhosted.org/packages/a0/ab/e4808898e4027fcb3e7850164133a66fad3c11322e70ed08bd8e741231ea/cs.lex-20181108.tar.gz","yanked":false,"yanked_reason":null}],"20190220":[{"comment_text":"","digests":{"blake2b_256":"5a4de9a6bbfb07d39c57eb1cc37568572aab322def4b6c3e2669f462ed80ae36","md5":"7f00d2dd1eebeac175345b3af6eac019","sha256":"4f0d8c4d4f6f24c5aa68f2bd99c61990f7dbd05b66067acaaacaef97c54fe9cd"},"downloads":-1,"filename":"cs.lex-20190220.tar.gz","has_sig":false,"md5_digest":"7f00d2dd1eebeac175345b3af6eac019","packagetype":"sdist","python_version":"source","requires_python":null,"size":12271,"upload_time":"2019-02-20T09:19:47","upload_time_iso_8601":"2019-02-20T09:19:47.232291Z","url":"https://files.pythonhosted.org/packages/5a/4d/e9a6bbfb07d39c57eb1cc37568572aab322def4b6c3e2669f462ed80ae36/cs.lex-20190220.tar.gz","yanked":false,"yanked_reason":null}],"20190812":[{"comment_text":"","digests":{"blake2b_256":"bd1d1b62da36c3dc21a2f6d3ddf4f6622e0e23c76a35a47cccfbc51657f4b486","md5":"1f23977a7c4bab25f775d4b14802f9c2","sha256":"d37baf562a84fb3e65ac1d81b9701ce8fddc12b1aabc8d69b012859ea8d81811"},"downloads":-1,"filename":"cs.lex-20190812.tar.gz","has_sig":false,"md5_digest":"1f23977a7c4bab25f775d4b14802f9c2","packagetype":"sdist","python_version":"source","requires_python":null,"size":16395,"upload_time":"2019-08-11T23:36:04","upload_time_iso_8601":"2019-08-11T23:36:04.880279Z","url":"https://files.pythonhosted.org/packages/bd/1d/1b62da36c3dc21a2f6d3ddf4f6622e0e23c76a35a47cccfbc51657f4b486/cs.lex-20190812.tar.gz","yanked":false,"yanked_reason":null}],"20200229":[{"comment_text":"","digests":{"blake2b_256":"df14fa121b02da078f0d3cd852e3b998f3ca715f512f3e75bc89ad5f21737891","md5":"b00b46edff80b98e5ceda7817e3aa7b8","sha256":"04141821e1d42db50e7c2e9e980cd8b259cb687d267f69b06245415b71291ab4"},"downloads":-1,"filename":"cs.lex-20200229.tar.gz","has_sig":false,"md5_digest":"b00b46edff80b98e5ceda7817e3aa7b8","packagetype":"sdist","python_version":"source","requires_python":null,"size":18076,"upload_time":"2020-02-29T06:26:23","upload_time_iso_8601":"2020-02-29T06:26:23.606784Z","url":"https://files.pythonhosted.org/packages/df/14/fa121b02da078f0d3cd852e3b998f3ca715f512f3e75bc89ad5f21737891/cs.lex-20200229.tar.gz","yanked":false,"yanked_reason":null}],"20200318":[{"comment_text":"","digests":{"blake2b_256":"e56cd2f0426f0c2a59f2b8859caf40055e1dae7b27aa27a5f5bc81d16d7c3649","md5":"d5278a7525192be2a2ac74d594314ee9","sha256":"6b09bc36b27ce800f76db4f8e3d93dd3358ece2349c5d080722be2f7b920a073"},"downloads":-1,"filename":"cs.lex-20200318.tar.gz","has_sig":false,"md5_digest":"d5278a7525192be2a2ac74d594314ee9","packagetype":"sdist","python_version":"source","requires_python":null,"size":22313,"upload_time":"2020-03-17T20:58:53","upload_time_iso_8601":"2020-03-17T20:58:53.756475Z","url":"https://files.pythonhosted.org/packages/e5/6c/d2f0426f0c2a59f2b8859caf40055e1dae7b27aa27a5f5bc81d16d7c3649/cs.lex-20200318.tar.gz","yanked":false,"yanked_reason":null}],"20200517":[{"comment_text":"","digests":{"blake2b_256":"2aa778f097e2f4ecb31c10e6b6057b8d8fc182caccb9c8d584c9cb62763e8229","md5":"1c6c90a3f169419e584f4eeb16509e6a","sha256":"8ea34424a6ae4abe7f10f2e1012115ff5682916cb6eff2b8078f6f9d3c8a1130"},"downloads":-1,"filename":"cs.lex-20200517.tar.gz","has_sig":false,"md5_digest":"1c6c90a3f169419e584f4eeb16509e6a","packagetype":"sdist","python_version":"source","requires_python":null,"size":21457,"upload_time":"2020-05-17T11:41:59","upload_time_iso_8601":"2020-05-17T11:41:59.894143Z","url":"https://files.pythonhosted.org/packages/2a/a7/78f097e2f4ecb31c10e6b6057b8d8fc182caccb9c8d584c9cb62763e8229/cs.lex-20200517.tar.gz","yanked":false,"yanked_reason":null}],"20200613":[{"comment_text":"","digests":{"blake2b_256":"f174fad579a897930685d9327372ad0bb0ba00f1f04ea4f51cb0c59cba603cf5","md5":"b13ca92e08013b9c4f42b6bafbef3cc1","sha256":"c7f4abedbf0ce9998b86a2bf9762cdf781fce805ccaf21ed78c3a6881d78d5a0"},"downloads":-1,"filename":"cs.lex-20200613.tar.gz","has_sig":false,"md5_digest":"b13ca92e08013b9c4f42b6bafbef3cc1","packagetype":"sdist","python_version":"source","requires_python":null,"size":21555,"upload_time":"2020-06-13T04:00:36","upload_time_iso_8601":"2020-06-13T04:00:36.066185Z","url":"https://files.pythonhosted.org/packages/f1/74/fad579a897930685d9327372ad0bb0ba00f1f04ea4f51cb0c59cba603cf5/cs.lex-20200613.tar.gz","yanked":false,"yanked_reason":null}],"20200718":[{"comment_text":"","digests":{"blake2b_256":"885523f391eecf6f2ad0c4f9af879d32d3b03a7b9594a4eea753f2e49b824e9a","md5":"1c61bd1b3ff5d5ef34b7a748f6d10378","sha256":"9075dede7c9e1be673bd049e388a5fa542619bccfc6d5e363cbd00ad3224945c"},"downloads":-1,"filename":"cs.lex-20200718.tar.gz","has_sig":false,"md5_digest":"1c61bd1b3ff5d5ef34b7a748f6d10378","packagetype":"sdist","python_version":"source","requires_python":null,"size":26599,"upload_time":"2020-07-18T09:11:17","upload_time_iso_8601":"2020-07-18T09:11:17.630627Z","url":"https://files.pythonhosted.org/packages/88/55/23f391eecf6f2ad0c4f9af879d32d3b03a7b9594a4eea753f2e49b824e9a/cs.lex-20200718.tar.gz","yanked":false,"yanked_reason":null}],"20200914":[{"comment_text":"","digests":{"blake2b_256":"0ac4a04c92bb56b4a8cf4da1cb8b1b05c70d3917b1619ac3fc1dc6e1c23edb8b","md5":"91a3e3455b61af18f4243566f78cb0fa","sha256":"13978354aca198f5b72b1ef2bb438a45f328e592424f069c9129c8da31f58e1b"},"downloads":-1,"filename":"cs.lex-20200914.tar.gz","has_sig":false,"md5_digest":"91a3e3455b61af18f4243566f78cb0fa","packagetype":"sdist","python_version":"source","requires_python":null,"size":28077,"upload_time":"2020-09-14T01:27:03","upload_time_iso_8601":"2020-09-14T01:27:03.471590Z","url":"https://files.pythonhosted.org/packages/0a/c4/a04c92bb56b4a8cf4da1cb8b1b05c70d3917b1619ac3fc1dc6e1c23edb8b/cs.lex-20200914.tar.gz","yanked":false,"yanked_reason":null}],"20201228":[{"comment_text":"","digests":{"blake2b_256":"815e283aaeab786a4a3f2fbad131c8dc4994d2d171f0bff94aeff17029633321","md5":"4d2e77022d6f6cd3f997be35378f56e4","sha256":"92e1593ab76136f0021f398bbebd4fbaa88ef0476a7b201f20bc1c7c6da0a2d2"},"downloads":-1,"filename":"cs.lex-20201228.tar.gz","has_sig":false,"md5_digest":"4d2e77022d6f6cd3f997be35378f56e4","packagetype":"sdist","python_version":"source","requires_python":null,"size":28203,"upload_time":"2020-12-28T04:14:11","upload_time_iso_8601":"2020-12-28T04:14:11.186922Z","url":"https://files.pythonhosted.org/packages/81/5e/283aaeab786a4a3f2fbad131c8dc4994d2d171f0bff94aeff17029633321/cs.lex-20201228.tar.gz","yanked":false,"yanked_reason":null}],"20210306":[{"comment_text":"","digests":{"blake2b_256":"550a11a5ff413de48667dcd4b8d9cd1979fbab40e3d14d3668207e7e26af4b2a","md5":"365a7152ac1a42919683bb6f01a8c5d1","sha256":"4e8bbc94905609b6f78cd95fbe20e937b1b92f064d184db161a8fd1740835411"},"downloads":-1,"filename":"cs.lex-20210306.tar.gz","has_sig":false,"md5_digest":"365a7152ac1a42919683bb6f01a8c5d1","packagetype":"sdist","python_version":"source","requires_python":null,"size":30159,"upload_time":"2021-03-05T22:48:21","upload_time_iso_8601":"2021-03-05T22:48:21.769521Z","url":"https://files.pythonhosted.org/packages/55/0a/11a5ff413de48667dcd4b8d9cd1979fbab40e3d14d3668207e7e26af4b2a/cs.lex-20210306.tar.gz","yanked":false,"yanked_reason":null}],"20210717":[{"comment_text":"","digests":{"blake2b_256":"ea8302e1871c9b3a024c8256cc7ef0adc12dc81e7231e55ce7f2cda8a9973634","md5":"f221571559a5ebb9c3f810f4bca69baa","sha256":"5faf4a0f6c3c4a5f73e084f49643b729b95247208a6ce5fb6ead9d6e067efdae"},"downloads":-1,"filename":"cs.lex-20210717.tar.gz","has_sig":false,"md5_digest":"f221571559a5ebb9c3f810f4bca69baa","packagetype":"sdist","python_version":"source","requires_python":null,"size":45321,"upload_time":"2021-07-17T01:50:09","upload_time_iso_8601":"2021-07-17T01:50:09.111837Z","url":"https://files.pythonhosted.org/packages/ea/83/02e1871c9b3a024c8256cc7ef0adc12dc81e7231e55ce7f2cda8a9973634/cs.lex-20210717.tar.gz","yanked":false,"yanked_reason":null}],"20210906":[{"comment_text":"","digests":{"blake2b_256":"4575d47473e210cf07779a869fb6a54d2c3793c7e3cd8771f6bf7f653923c4a7","md5":"b423b31884ebc82fca82db1bf904e7ef","sha256":"7ce9a4e09c83a48c6c2e1300a2b08ceee59914027d65ea4e9e70321844282cf7"},"downloads":-1,"filename":"cs.lex-20210906.tar.gz","has_sig":false,"md5_digest":"b423b31884ebc82fca82db1bf904e7ef","packagetype":"sdist","python_version":"source","requires_python":null,"size":46716,"upload_time":"2021-09-05T23:00:48","upload_time_iso_8601":"2021-09-05T23:00:48.486466Z","url":"https://files.pythonhosted.org/packages/45/75/d47473e210cf07779a869fb6a54d2c3793c7e3cd8771f6bf7f653923c4a7/cs.lex-20210906.tar.gz","yanked":false,"yanked_reason":null}],"20210913":[{"comment_text":"","digests":{"blake2b_256":"66e565e40b3165fab90beebec5f2d15e040a8b38fb9b9645875571170f8d1f91","md5":"f03a83c858aaf696712e0cc296788d12","sha256":"bd8c4d695b00c144c7dff7c5505f4d34e0b4653d1435306bf6839caf308e2a70"},"downloads":-1,"filename":"cs.lex-20210913.tar.gz","has_sig":false,"md5_digest":"f03a83c858aaf696712e0cc296788d12","packagetype":"sdist","python_version":"source","requires_python":null,"size":49525,"upload_time":"2021-09-13T10:12:04","upload_time_iso_8601":"2021-09-13T10:12:04.150416Z","url":"https://files.pythonhosted.org/packages/66/e5/65e40b3165fab90beebec5f2d15e040a8b38fb9b9645875571170f8d1f91/cs.lex-20210913.tar.gz","yanked":false,"yanked_reason":null}],"20211208":[{"comment_text":"","digests":{"blake2b_256":"cb1adb26cd42cff707668396325ee62c92b17460783d29eafd589f2847240120","md5":"276c96b174bb63e9f9bdf564be0182b0","sha256":"5eef1979e9e50a121c9a8f7b885bef07ed77063a69ac9fac65d20fda182c8e12"},"downloads":-1,"filename":"cs.lex-20211208.tar.gz","has_sig":false,"md5_digest":"276c96b174bb63e9f9bdf564be0182b0","packagetype":"sdist","python_version":"source","requires_python":null,"size":42306,"upload_time":"2021-12-08T09:06:36","upload_time_iso_8601":"2021-12-08T09:06:36.460114Z","url":"https://files.pythonhosted.org/packages/cb/1a/db26cd42cff707668396325ee62c92b17460783d29eafd589f2847240120/cs.lex-20211208.tar.gz","yanked":false,"yanked_reason":null}],"20220227":[{"comment_text":"","digests":{"blake2b_256":"6b7045382ea637817a4fc6f4cc572b97cd1c7abaac3fcba7b920b6301300132f","md5":"8c3825051690de816422a59e63a26f38","sha256":"9c40878cbfb2df306316a51970c57d5f9ecacb1c20523935772c8d0e03d20e8e"},"downloads":-1,"filename":"cs.lex-20220227.tar.gz","has_sig":false,"md5_digest":"8c3825051690de816422a59e63a26f38","packagetype":"sdist","python_version":"source","requires_python":null,"size":51225,"upload_time":"2022-02-26T23:12:20","upload_time_iso_8601":"2022-02-26T23:12:20.023909Z","url":"https://files.pythonhosted.org/packages/6b/70/45382ea637817a4fc6f4cc572b97cd1c7abaac3fcba7b920b6301300132f/cs.lex-20220227.tar.gz","yanked":false,"yanked_reason":null}],"20220626":[{"comment_text":"","digests":{"blake2b_256":"815ac222b8f1fd64552b4eff50683492e3dade9a6e1a8e7aa0b968289d39a64e","md5":"087c659110517d7257cc65e6d6fac3e2","sha256":"ae717cbe018ae4b11ee039d517a32acecd4c54bc7bdff34074d36b8539b09c65"},"downloads":-1,"filename":"cs.lex-20220626-py3-none-any.whl","has_sig":false,"md5_digest":"087c659110517d7257cc65e6d6fac3e2","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":25865,"upload_time":"2022-06-26T09:38:31","upload_time_iso_8601":"2022-06-26T09:38:31.125222Z","url":"https://files.pythonhosted.org/packages/81/5a/c222b8f1fd64552b4eff50683492e3dade9a6e1a8e7aa0b968289d39a64e/cs.lex-20220626-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d4ce9dc94a7909541d99c37a210e16c4f18c272c488084719cc26c0db3fdaf4b","md5":"5e8f896018f5affae96b142edbc07ac7","sha256":"91c7a191ca21adf655bbb46019db9865960e51dc14874dffc699b97a53efaee0"},"downloads":-1,"filename":"cs.lex-20220626.tar.gz","has_sig":false,"md5_digest":"5e8f896018f5affae96b142edbc07ac7","packagetype":"sdist","python_version":"source","requires_python":null,"size":45465,"upload_time":"2022-06-26T09:38:33","upload_time_iso_8601":"2022-06-26T09:38:33.401717Z","url":"https://files.pythonhosted.org/packages/d4/ce/9dc94a7909541d99c37a210e16c4f18c272c488084719cc26c0db3fdaf4b/cs.lex-20220626.tar.gz","yanked":false,"yanked_reason":null}],"20220918":[{"comment_text":"","digests":{"blake2b_256":"9532ee5c23eca531a0942f33744384581cfc2688423702149e38821eeb738b36","md5":"059dabfb88a43ccbc89a872d5254ad39","sha256":"2c9ed1ff474abc9eb0fd7bd436dd1d81f5626e2606bf12041bc0f5c162ec12a8"},"downloads":-1,"filename":"cs.lex-20220918-py3-none-any.whl","has_sig":false,"md5_digest":"059dabfb88a43ccbc89a872d5254ad39","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":25899,"upload_time":"2022-09-17T23:12:17","upload_time_iso_8601":"2022-09-17T23:12:17.122486Z","url":"https://files.pythonhosted.org/packages/95/32/ee5c23eca531a0942f33744384581cfc2688423702149e38821eeb738b36/cs.lex-20220918-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"2f10df2f5363c46d4760e3cd7deb924a7451c0d04dcffd912a3f5c4540ff8c4b","md5":"0e50afe22116d4b113eee635c5fe1c8f","sha256":"0f22d8aa9d27d1cc761640846012f8508bf1f4a2a47a27968ef79e0718b74ef6"},"downloads":-1,"filename":"cs.lex-20220918.tar.gz","has_sig":false,"md5_digest":"0e50afe22116d4b113eee635c5fe1c8f","packagetype":"sdist","python_version":"source","requires_python":null,"size":45676,"upload_time":"2022-09-17T23:12:18","upload_time_iso_8601":"2022-09-17T23:12:18.907918Z","url":"https://files.pythonhosted.org/packages/2f/10/df2f5363c46d4760e3cd7deb924a7451c0d04dcffd912a3f5c4540ff8c4b/cs.lex-20220918.tar.gz","yanked":false,"yanked_reason":null}],"20230210":[{"comment_text":"","digests":{"blake2b_256":"a9fce46525c5cf65c236260748b66d8ecc79ecb9182f9222f61f9cfa1bac7e25","md5":"a933e98bdd93a671bbb357b691afec71","sha256":"4e1bbe764b2b8aa5f11292471c1c6e8a760c23f1368bbccfddaaa86ca5874f6c"},"downloads":-1,"filename":"cs.lex-20230210-py3-none-any.whl","has_sig":false,"md5_digest":"a933e98bdd93a671bbb357b691afec71","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":26622,"upload_time":"2023-02-10T00:33:40","upload_time_iso_8601":"2023-02-10T00:33:40.927672Z","url":"https://files.pythonhosted.org/packages/a9/fc/e46525c5cf65c236260748b66d8ecc79ecb9182f9222f61f9cfa1bac7e25/cs.lex-20230210-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"6ade18634a49f576ef9931e3d5236e55c90a47730aef9d3e68cdc959a68e3236","md5":"c4db0e2f21694647b51459de20505850","sha256":"8cfa2291495aec999e116c01a4f703026fc6e7c09e3eed509548f85b6aa3baa2"},"downloads":-1,"filename":"cs.lex-20230210.tar.gz","has_sig":false,"md5_digest":"c4db0e2f21694647b51459de20505850","packagetype":"sdist","python_version":"source","requires_python":null,"size":47461,"upload_time":"2023-02-10T00:33:42","upload_time_iso_8601":"2023-02-10T00:33:42.727209Z","url":"https://files.pythonhosted.org/packages/6a/de/18634a49f576ef9931e3d5236e55c90a47730aef9d3e68cdc959a68e3236/cs.lex-20230210.tar.gz","yanked":false,"yanked_reason":null}],"20230217":[{"comment_text":"","digests":{"blake2b_256":"2d120d1e84d8011631c1835e819f318977b42f93f7a6fa023ac1b37ab4c81198","md5":"ff41fbda7e0a38ff8e4704fd8ac0b00e","sha256":"1acd047d809ac2d3dd021f9a2bd4e6750288440899c871558731ec1a69f4955b"},"downloads":-1,"filename":"cs.lex-20230217-py3-none-any.whl","has_sig":false,"md5_digest":"ff41fbda7e0a38ff8e4704fd8ac0b00e","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":27073,"upload_time":"2023-02-17T00:24:05","upload_time_iso_8601":"2023-02-17T00:24:05.575462Z","url":"https://files.pythonhosted.org/packages/2d/12/0d1e84d8011631c1835e819f318977b42f93f7a6fa023ac1b37ab4c81198/cs.lex-20230217-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"57d702372f018ae898447c10fd74caab13a8d405bc8640cc3b46ab41a2ea4acb","md5":"687b596969316e2f8cf489fda00f1639","sha256":"bb12b23a56b89c7feac4e4e089feb5749bb3d009ce2ede9bea61aeea2dece342"},"downloads":-1,"filename":"cs.lex-20230217.tar.gz","has_sig":false,"md5_digest":"687b596969316e2f8cf489fda00f1639","packagetype":"sdist","python_version":"source","requires_python":null,"size":48946,"upload_time":"2023-02-17T00:24:07","upload_time_iso_8601":"2023-02-17T00:24:07.857804Z","url":"https://files.pythonhosted.org/packages/57/d7/02372f018ae898447c10fd74caab13a8d405bc8640cc3b46ab41a2ea4acb/cs.lex-20230217.tar.gz","yanked":false,"yanked_reason":null}],"20230217.1":[{"comment_text":"","digests":{"blake2b_256":"e5b8f93873a9232adee3e0889364aa046f9d3be345d153cec90360ad87a32200","md5":"0a714567cbafd4263a7ee2e04ef50f6b","sha256":"d39c8ab9baf8cc2d7f5ce184401712304ebc7afd0d7f6f6c92840432e3bd0538"},"downloads":-1,"filename":"cs.lex-20230217.1-py3-none-any.whl","has_sig":false,"md5_digest":"0a714567cbafd4263a7ee2e04ef50f6b","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":27113,"upload_time":"2023-02-17T09:31:09","upload_time_iso_8601":"2023-02-17T09:31:09.038303Z","url":"https://files.pythonhosted.org/packages/e5/b8/f93873a9232adee3e0889364aa046f9d3be345d153cec90360ad87a32200/cs.lex-20230217.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"8925d4bb0e6878b91faf38d1f4f981f79b5c8f2713498d7443f84a78bf6934c8","md5":"8685aedf6d7453f12771bfda500e0158","sha256":"e32fa3cd515857e6fc95a4f31c99eaccc8e2bae5d2c0042f193dcec667e83fb5"},"downloads":-1,"filename":"cs.lex-20230217.1.tar.gz","has_sig":false,"md5_digest":"8685aedf6d7453f12771bfda500e0158","packagetype":"sdist","python_version":"source","requires_python":null,"size":49145,"upload_time":"2023-02-17T09:31:11","upload_time_iso_8601":"2023-02-17T09:31:11.436882Z","url":"https://files.pythonhosted.org/packages/89/25/d4bb0e6878b91faf38d1f4f981f79b5c8f2713498d7443f84a78bf6934c8/cs.lex-20230217.1.tar.gz","yanked":false,"yanked_reason":null}],"20230401":[{"comment_text":"","digests":{"blake2b_256":"0bffd131a4bd8a8ece006eba893e874dae879932209a063cd4a787e7b3019478","md5":"a2dc94248ad21d36f20ea5f1b4b0d67e","sha256":"de7b7f8864d5e7660119305e22d0321c215c7df5d4397c16dc9ea435d38d74d5"},"downloads":-1,"filename":"cs.lex-20230401-py3-none-any.whl","has_sig":false,"md5_digest":"a2dc94248ad21d36f20ea5f1b4b0d67e","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":27101,"upload_time":"2023-03-31T22:58:30","upload_time_iso_8601":"2023-03-31T22:58:30.389961Z","url":"https://files.pythonhosted.org/packages/0b/ff/d131a4bd8a8ece006eba893e874dae879932209a063cd4a787e7b3019478/cs.lex-20230401-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ba4ac03be4bbfe367b3743045ebe902e1104e7058b0f1e486235da9695b5a6b1","md5":"85d8062ed9e4b296d130e228fe5fcabb","sha256":"57f59752ad6c01df34153e7fee2afc3f93df56d3b7c7d03a4c637fa00799f892"},"downloads":-1,"filename":"cs.lex-20230401.tar.gz","has_sig":false,"md5_digest":"85d8062ed9e4b296d130e228fe5fcabb","packagetype":"sdist","python_version":"source","requires_python":null,"size":49207,"upload_time":"2023-03-31T22:58:32","upload_time_iso_8601":"2023-03-31T22:58:32.754222Z","url":"https://files.pythonhosted.org/packages/ba/4a/c03be4bbfe367b3743045ebe902e1104e7058b0f1e486235da9695b5a6b1/cs.lex-20230401.tar.gz","yanked":false,"yanked_reason":null}],"20231018":[{"comment_text":"","digests":{"blake2b_256":"5ff5714bc5de85e8f4482e8700d5ae61fa69d6a02263fb4947490a0dbdb2d885","md5":"8a39a93b6ee9a3858c158fd72300d48d","sha256":"208d3bc6822549063bafd81a4ec498fe87e2f99b77fa125ac08b9dbaaa8dbaae"},"downloads":-1,"filename":"cs.lex-20231018-py3-none-any.whl","has_sig":false,"md5_digest":"8a39a93b6ee9a3858c158fd72300d48d","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":27156,"upload_time":"2023-10-18T05:43:17","upload_time_iso_8601":"2023-10-18T05:43:17.575761Z","url":"https://files.pythonhosted.org/packages/5f/f5/714bc5de85e8f4482e8700d5ae61fa69d6a02263fb4947490a0dbdb2d885/cs.lex-20231018-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"34689894adeac151428de7bc6f2f59d7afce10f7817a0d37d9d949f6c0f420fa","md5":"68b25ca7a5423d743161d769e976838d","sha256":"ff2b9fc39e15b61255fdfc78cc5bfbcf56eef415ce69697c7c53d6ad0fde20e5"},"downloads":-1,"filename":"cs.lex-20231018.tar.gz","has_sig":false,"md5_digest":"68b25ca7a5423d743161d769e976838d","packagetype":"sdist","python_version":"source","requires_python":null,"size":49442,"upload_time":"2023-10-18T05:43:20","upload_time_iso_8601":"2023-10-18T05:43:20.331461Z","url":"https://files.pythonhosted.org/packages/34/68/9894adeac151428de7bc6f2f59d7afce10f7817a0d37d9d949f6c0f420fa/cs.lex-20231018.tar.gz","yanked":false,"yanked_reason":null}],"20240211":[{"comment_text":"","digests":{"blake2b_256":"c0d222302878043f96866757fa84522bd41cfae85676e358d1ffd51f41d0aadd","md5":"0f9dfb7308227ee5cc6351a1b2746859","sha256":"c4f1cfe403a2c8ab9928be74d0936bd6eeda246b0186d0da89406eb9704148be"},"downloads":-1,"filename":"cs.lex-20240211-py3-none-any.whl","has_sig":false,"md5_digest":"0f9dfb7308227ee5cc6351a1b2746859","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":27526,"upload_time":"2024-02-11T04:35:00","upload_time_iso_8601":"2024-02-11T04:35:00.563061Z","url":"https://files.pythonhosted.org/packages/c0/d2/22302878043f96866757fa84522bd41cfae85676e358d1ffd51f41d0aadd/cs.lex-20240211-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"cfbcfe966887b7c9f4c9ac8ed36a23b6cce9a2fb29413211a90fa9cf19a30f1f","md5":"88fdf58de53fed19a7d7b00f90c9525b","sha256":"8b98528ab1ce39dfd601f9f94553f2af2ad55d4978ab7b873a5d1f6d238e7b32"},"downloads":-1,"filename":"cs.lex-20240211.tar.gz","has_sig":false,"md5_digest":"88fdf58de53fed19a7d7b00f90c9525b","packagetype":"sdist","python_version":"source","requires_python":null,"size":49401,"upload_time":"2024-02-11T04:35:03","upload_time_iso_8601":"2024-02-11T04:35:03.671374Z","url":"https://files.pythonhosted.org/packages/cf/bc/fe966887b7c9f4c9ac8ed36a23b6cce9a2fb29413211a90fa9cf19a30f1f/cs.lex-20240211.tar.gz","yanked":false,"yanked_reason":null}],"20240316":[{"comment_text":"","digests":{"blake2b_256":"759ec3173944ef3b1cf5b0b085f652ec9e0faa85aba1cd876674d622f87222cf","md5":"4e7de3356d1ffe3f0d604cccd69e4416","sha256":"1b04dfa4585d26bcb48b1e0427fefb3affdaea68e2129e323f1a715f0c3f1582"},"downloads":-1,"filename":"cs.lex-20240316-py3-none-any.whl","has_sig":false,"md5_digest":"4e7de3356d1ffe3f0d604cccd69e4416","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":27535,"upload_time":"2024-03-16T06:59:25","upload_time_iso_8601":"2024-03-16T06:59:25.846505Z","url":"https://files.pythonhosted.org/packages/75/9e/c3173944ef3b1cf5b0b085f652ec9e0faa85aba1cd876674d622f87222cf/cs.lex-20240316-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"82a927445ea2dcd7cfa1d2b3f4d07f342e3e7d035048a5a24402e66e5db20c16","md5":"702250d0beddc21b42b153ad873fae5b","sha256":"56e622ad693c7d44fb82f1924764fb822463dd4c0ea99bbf89ef2b0b23f2476e"},"downloads":-1,"filename":"cs.lex-20240316.tar.gz","has_sig":false,"md5_digest":"702250d0beddc21b42b153ad873fae5b","packagetype":"sdist","python_version":"source","requires_python":null,"size":50394,"upload_time":"2024-03-16T06:59:28","upload_time_iso_8601":"2024-03-16T06:59:28.496346Z","url":"https://files.pythonhosted.org/packages/82/a9/27445ea2dcd7cfa1d2b3f4d07f342e3e7d035048a5a24402e66e5db20c16/cs.lex-20240316.tar.gz","yanked":false,"yanked_reason":null}],"20240519":[{"comment_text":"","digests":{"blake2b_256":"32d1f043da28b5f6099af01469ac2bd875b39012e3f7f033e582127fd79c54bd","md5":"f84e66d0a484ccfb7a8a78eeaa727eca","sha256":"dcafa462d66bd724f43026cb5ab39d620b0f5b0860f44ec36e2d9aa58e112a1c"},"downloads":-1,"filename":"cs.lex-20240519-py3-none-any.whl","has_sig":false,"md5_digest":"f84e66d0a484ccfb7a8a78eeaa727eca","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":29827,"upload_time":"2024-05-19T02:14:28","upload_time_iso_8601":"2024-05-19T02:14:28.930046Z","url":"https://files.pythonhosted.org/packages/32/d1/f043da28b5f6099af01469ac2bd875b39012e3f7f033e582127fd79c54bd/cs.lex-20240519-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1d92ce3d5f9e40962d3fc82c40b40ca94939d1bb15de01cea1da6144ba935d9f","md5":"1c82f5a13ab4e3e018e57a162435cb95","sha256":"1f654b6ec801ce6a0c3851b18aba6146deb17325612d96ce8700d15f7bd83a24"},"downloads":-1,"filename":"cs.lex-20240519.tar.gz","has_sig":false,"md5_digest":"1c82f5a13ab4e3e018e57a162435cb95","packagetype":"sdist","python_version":"source","requires_python":null,"size":57107,"upload_time":"2024-05-19T02:14:31","upload_time_iso_8601":"2024-05-19T02:14:31.926877Z","url":"https://files.pythonhosted.org/packages/1d/92/ce3d5f9e40962d3fc82c40b40ca94939d1bb15de01cea1da6144ba935d9f/cs.lex-20240519.tar.gz","yanked":false,"yanked_reason":null}],"20240630":[{"comment_text":"","digests":{"blake2b_256":"261c01e8f0ba9ae13c211f03433f06f02316f1f857772bd7ba61e2a74d629062","md5":"8196eb1cb687f1ecc5b9fc8806ff8a5c","sha256":"1aa1828b69100f039f1087e74ef5169fa754ba4299b651afd9bc80ab567b5f60"},"downloads":-1,"filename":"cs.lex-20240630-py3-none-any.whl","has_sig":false,"md5_digest":"8196eb1cb687f1ecc5b9fc8806ff8a5c","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":30032,"upload_time":"2024-06-30T01:36:53","upload_time_iso_8601":"2024-06-30T01:36:53.848428Z","url":"https://files.pythonhosted.org/packages/26/1c/01e8f0ba9ae13c211f03433f06f02316f1f857772bd7ba61e2a74d629062/cs.lex-20240630-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"7d67654259a8d75b863392e62cf4f9f7bdb4bd8fcbf1da14d2ea3e0ff5d38730","md5":"a8be68f64ed314ab08f5015e41460564","sha256":"d8aa4f8d854c9dbcfef40a73d4a47a227dd9b62848d60ddb22a750ff241dfe1f"},"downloads":-1,"filename":"cs.lex-20240630.tar.gz","has_sig":false,"md5_digest":"a8be68f64ed314ab08f5015e41460564","packagetype":"sdist","python_version":"source","requires_python":null,"size":57646,"upload_time":"2024-06-30T01:36:56","upload_time_iso_8601":"2024-06-30T01:36:56.583986Z","url":"https://files.pythonhosted.org/packages/7d/67/654259a8d75b863392e62cf4f9f7bdb4bd8fcbf1da14d2ea3e0ff5d38730/cs.lex-20240630.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"261c01e8f0ba9ae13c211f03433f06f02316f1f857772bd7ba61e2a74d629062","md5":"8196eb1cb687f1ecc5b9fc8806ff8a5c","sha256":"1aa1828b69100f039f1087e74ef5169fa754ba4299b651afd9bc80ab567b5f60"},"downloads":-1,"filename":"cs.lex-20240630-py3-none-any.whl","has_sig":false,"md5_digest":"8196eb1cb687f1ecc5b9fc8806ff8a5c","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":30032,"upload_time":"2024-06-30T01:36:53","upload_time_iso_8601":"2024-06-30T01:36:53.848428Z","url":"https://files.pythonhosted.org/packages/26/1c/01e8f0ba9ae13c211f03433f06f02316f1f857772bd7ba61e2a74d629062/cs.lex-20240630-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"7d67654259a8d75b863392e62cf4f9f7bdb4bd8fcbf1da14d2ea3e0ff5d38730","md5":"a8be68f64ed314ab08f5015e41460564","sha256":"d8aa4f8d854c9dbcfef40a73d4a47a227dd9b62848d60ddb22a750ff241dfe1f"},"downloads":-1,"filename":"cs.lex-20240630.tar.gz","has_sig":false,"md5_digest":"a8be68f64ed314ab08f5015e41460564","packagetype":"sdist","python_version":"source","requires_python":null,"size":57646,"upload_time":"2024-06-30T01:36:56","upload_time_iso_8601":"2024-06-30T01:36:56.583986Z","url":"https://files.pythonhosted.org/packages/7d/67/654259a8d75b863392e62cf4f9f7bdb4bd8fcbf1da14d2ea3e0ff5d38730/cs.lex-20240630.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
