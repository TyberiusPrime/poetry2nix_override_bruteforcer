{"info":{"author":"Pyrustic Evangelist","author_email":"rusticalex@yahoo.com","bugtrack_url":null,"classifiers":["License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python :: 3"],"description":"<!-- Cover -->\n<div align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/pyrustic/misc/master/assets/backstage/cover.jpg\" alt=\"Demo\" width=\"640\">\n    <p align=\"center\">\n    By Â© Jorge Royan&nbsp;/&nbsp;<a rel=\"nofollow\" class=\"external free\" href=\"http://www.royan.com.ar\">http://www.royan.com.ar</a>, <a href=\"https://creativecommons.org/licenses/by-sa/3.0\" title=\"Creative Commons Attribution-Share Alike 3.0\">CC BY-SA 3.0</a>, <a href=\"https://commons.wikimedia.org/w/index.php?curid=23405928\">Link</a>\n    </p>\n</div>\n\n\n\n<!-- Intro Text -->\n# Pyrustic Backstage\n<b> Three-speed scripting language and task automation tool </b>\n    \nThis project is part of the [Pyrustic Open Ecosystem](https://pyrustic.github.io).\n> [Installation](#installation) &nbsp; &nbsp; [Demo](#demo) &nbsp; &nbsp; [Latest](https://github.com/pyrustic/backstage/tags) &nbsp; &nbsp; [Modules](https://github.com/pyrustic/backstage/tree/master/docs/modules#readme)\n\n\n## Table of contents\n- [Overview](#overview)\n- [Structure of the script file](#structure-of-the-script-file)\n- [Spawning processes and branching subtasks](#spawning-processes-and-branching-subtasks)\n- [Data types and control flow](#data-types-and-control-flow)\n- [Namespaces and persistence](#namespaces-and-persistence)\n- [Variable interpolation and escaping](#variable-interpolation-and-escaping)\n- [Environment variables and language syntax](#environment-variables-and-language-syntax)\n- [File and directory manipulation](#file-and-directory-manipulation)\n- [Exception handling and tests](#exception-handling-and-tests)\n- [Interfacing with Python](#interfacing-with-python)\n- [Exception handling and tests](#exception-handling-and-tests)\n- [Command line interface and developer experience](#command-line-interface-and-developer-experience)\n- [Miscellaneous](#miscellaneous)\n- [Demo](#demo)\n- [Installation](#installation)\n\n# Overview\n**Backstage** is a cross-platform **automation tool** that looks for a `backstage.tasks` file in the current working directory to run a specific task defined in that file on demand. A task can be a sequence or pipeline of processes to be spawned, instructions for performing file and directory manipulation, or something more sophisticated.\n\nThe `backstage.tasks` file uses the [Jesth](https://github.com/pyrustic/jesth) (**J**ust **E**xtract **S**ections **T**hen **H**ack) file format that acts like a broken [INI file](https://en.wikipedia.org/wiki/INI_file) parser that only extract sections each made of a header and a body which is just a list of lines.\n\nUsing an eponymous **three-speed scripting language** designed for the automation tool, the programmer can, inside the `backstage.tasks` file, define, coordinate and use the various resources at his disposal to automate things.\n\nThe three-speed scripting language concept is inspired from the three forward gear ratios of early automobiles [transmission system](https://en.wikipedia.org/wiki/Manual_transmission). In the following subsections, we will explore each metaphorical gear of the **Backstage** scripting language, then we will briefly expose the automation tool itself.\n\n## First gear\nIn first gear, a `backstage.tasks` file is intended to store a list of tasks related to a specific project, each task exposing a list of commands or subtasks to be executed. Here, a command represents a process or pipeline of processes to be spawned. [Environment variables](#environment-variables-and-language-syntax) can be used in commands via [variable interpolation](https://en.wikipedia.org/wiki/String_interpolation). No other logic is involved.\n\n### Example\n```\n[task1]\n# three commands to run sequentially\n$ git commit -m 'Update'\n$ python -m my.package.module\n$ program1 arg1 | program2 {HOME}\n---\n# run the subtask 'task2'\n& task2\n---\n# run the subtask 'task3' in a new thread\n~ task3\n\n[task2]\n$ program val1 {CWD}\n$ git push origin master\n\n[task3]\n# some heavy computation\n$ engine -x 5000\n$ engine --cleanup\n\n[_task4]\n# This is a private task (with an underscore as prefix)\n$ clean dir\n```\n\n## Second gear\nIn second gear, the `backstage.tasks` file not only stores the tasks like in first gear, but here logic intervenes, variables are defined, control flow is used, built-in commands are called, et cetera. Basically, in second gear, **Backstage** unleashes its power and allows the programmer to anticipate problems, make sophisticated combinations of subtasks, in short to write a real **script to automate things**.\n\n### Example\n```\n[task1]\n# commit changes\n$ git commit -m 'Update'\n---\n# tell user if 'Commit' has been success\nif R == 0\n    # print 'Success !'\n    : Success !\nelse\n    : Failed to commit changes\n---\n# say hello ten times\nset age = 42\nset name = `John Doe`\nfrom 1 to 10\n    $ python -m say.hello {name} {age}\n---\n# create a file in user home\nset pathname = {HOME}/iliad.txt\ncreate file pathname\n---\n# append some data to a file\nset data = `\\nHello World !`\nappend data to pathname\n---\n# browse current working directory\nbrowse files and dirs in CWD\n    : Directory -> {R}\n    : Files ->\n    for item in files\n        : - {item}\n    : Dirs ->\n    for item in dirs\n        : - {item}\n```\n\n## Third gear\nIn third gear, in addition with whatever can be done with previous gears, the programmer can directly from the `backstage.tasks` file, call [Python](https://www.python.org/about/) functions with arguments and get the return ! Thanks to this third gear, any too complex or overly verbose calculation can be written in **Python** and called from **Backstage**. This [functionality](#interfacing-with-python) alone proves that **Backstage** is all about making the programmer's life better, not pretending to replace existing mature solutions that actually work.\n\n### Example\n```\n[task1]\ninterface with package.coffeemaker alias coffeebro\n\nset sugar_cubes (int) = 1 + 1 + 1\nset extra = `milk`\n\ncall coffeebro.make(sugar_cubes, extra, 42)\n\nif R == 1\n    : Coffee successfully made !\nelse\n    : Oops, failed to make coffee...\n    : Exception -> {EXCEPTION}\n    : Traceback -> {TRACEBACK}\n```\n\n## Automation tool\nThe scripting language help to define tasks in the `backstage.tasks` file that is intended to be consumed by the automation tool. As an automation tool, **Backstage** exposes a [command line interface](#command-line-interface-and-developer-experience) that allows the user to **discover** available tasks, **run** a task with arguments, read a task [documentation](#embedded-documentation-and-tests), use a [glob](https://en.wikipedia.org/wiki/Glob_(programming))-like syntax to **search** for a task by its name or by a keyword (case-insensitive mode) that is part of the documentation of the task, et cetera.\n\n### Example 1\nLet's assume that there is a `backstage.tasks` file in the directory `/home/alex/project`. This `backstage.tasks` file contains three public tasks and one private tasks (prefixed with an underscore).\n\nThis example shows how one could use the automation tool to run a task defined in the `backstage.tasks` file:\n\n```bash\n$ cd /home/alex/project\n\n$ backstage -c\nAvailable tasks (3):\n    make_coffee  task1  task2\n\n$ backstage make_coffee\nMaking coffee...\n\n$ backstage mak*\nMaking coffee...\n\n$ backstage make_coffee sugar=3\nMaking coffee with 3 sugar cubes...\n```\n\n### Example 2\nThis is the contents of a `backstage.tasks` file located at `/home/alex/project`:\n\n```\n[task]\n# define 'x' as a variable with an 'int' assignment tag\nset x (int) = 1 + 1 + 1\n\n# default name (by default, the assignment tag is 'str')\nset default_name = `John Doe`\n\n# print some text\n: Hi and Welcome !\n: I can print your name {x} times in a row !\n\n# take user input (always a 'str')\n> name : `What is your name ? `\n\n# control flow\nif name == EMPTY\n    set name = {default_name}\n\n# iteration\nfrom 1 to x\n    : {R} - Ave {name} !\n\n# branch subtask '_task2' and pass it an argument\n& _task2 {name}\n\n\n[_task2]\n# define the variable 'name' (first argument passed to this task)\nset name = {ARGS[0]}\n\n# Just say Goodbye !\n: Goodbye {name} !\n\n```\n\nLet's run the task named `task` from the command line:\n\n```bash\n$ cd /home/alex/project\n\n$ backstage task\nHi and Welcome !\nI can print your name 3 times in a row !\nWhat is your name ? Alex\n1 - Ave Alex !\n2 - Ave Alex !\n3 - Ave Alex !\nGoodbye Alex !\n```\n\n> **Note:** You can reproduce this example as it. Just [install](#installation) **Backstage**, copy-paste the script in a `backstage.tasks` file, then run `backstage task` in the command line.\n\n## And more\nThere is more to talk about **Backstage**, like the ability to embed documentation and tests in the `backstage.tasks` file and access them from the command line. Backstage is enough versatile to do the job of a trivial task runner or to automate things with its scripting language that has a built-in bridge to the powerful Python ecosystem.\n\nIn the following sections, we will explore this project in depth. You can also jump to the [demo](#demo) to start playing with **Backstage** !\n\n# Structure of the script file\nAs stated in the [Overview](#overview) section, a `backstage.tasks` file is basically a [JesthFile](https://github.com/pyrustic/jesth).\n\nIn a `backstage.tasks` file, a section represents a task. The section title is the name of the task and the section body is made of commands to run and the constructs of the **Backstage** scripting language. A valid task name is an alphanumeric string that can contains an underscore.\n\n```\nYou can write here at the top of the script,\na description of the script,\nthe date of its creation,\nor any useful information.\n\n[task1]\n# body of task1\n...\n\n[task2]\n# body of task2\n...\n\n[_private]\n# prefix a task name with an underscore\n# to turn it into a private task that\n# won't appear in the list of available tasks\n# when you will type 'backstage --check' in the command line\n```\n\nAs you can guess, a line starting with `#` is a comment. But this is only true inside a task body, because in fact not all sections are tasks as described before: a section can also be an embedded test or documentation.\n\n\n## Embedded documentation\nYou can embed documentation inside the `backstage.tasks` file. To create a documentation for a task, create a section which name is postfixed with `.help`:\n\n```\n[task1]\npass\n\n\n[task1.help]\nThis is the description line.\n\nUsage:\n    backstage task <option> <path>\n\nOptions:\n    -m, --msg       Show message\n    -x, --exit      Exit blah blah\n\n```\n\nFrom the **command line**, you can read the documentation of an arbitrary task:\n\n```bash\n$ backstage -h task1\nThis is the description line.\n\nUsage:\n    backstage task <option> <path>\n\nOptions:\n    -m, --msg       Show message\n    -x, --exit      Exit blah blah\n```\n\n## Embedded tests\n\nYou can embed tests inside the `backstage.tasks` file. To create a test for a task, create a section which name is postfixed with `.test`:\n\n```\n[task1.test]\n# perform some test here\n\n# ...\n\nassert some_var == some_var\n```\n\nFrom the **command line**, you can run the test of an arbitrary task:\n\n```bash\n$ backstage --test task1\n```\n\nor the tests of a bunch of tasks:\n\n```bash\n$ backstage --test task1 task2 task3\n```\n\nor run all tests defined in the `backstage.tasks` file:\n\n```bash\n$ backstage --test\n```\n\n\n# Spawning processes and branching subtasks\nYou can write commands to spawn a process or a pipeline of processes:\n\n```\n[task]\n# spawn Git to perform a 'commit'\n$ git commit -m \"Update\"\n\n# spawn a pipeline of three processes\n$ program1 arg1 | program2 arg2 | program3\n```\n\nCommands to spawn processes support variable interpolation:\n```\n[task]\n# use HOME environment variable\n$ ls {HOME}\n\n# access the first index of the ARGS list\n$ program {ARGS[0]}\n```\n\nYou can **push** data to the **input** of a process:\n\n```\n[task]\n# define variables name and age\nset name = `John Doe`\nset age (int) = 40 + 2\n\n# name and age will be pushed to the input of the next spawned process\npush name age\n$ program1 {HOME}\n\n# from now you can access via the environment variable R,\n# the return code (exit status code)\n: The return code is {R}\n```\n\n\nYou can **capture** a process:\n\n```\n[task]\n# you can capture a process,\n# so you will get a direct access to the output and error\n($) program2\n\n# print the content of OUTPUT and ERROR\n: Output -> {OUTPUT}\n: Error -> {ERROR}\n```\n\n\nYou can redirect **STDOUT** and **STDERR**:\n\n```\n[task]\n\n# redirect STDOUT and STDERR\nset STDOUT = `/path/to/file_out`\nset STDERR = `/path/to/file_err`\n\n$ program1\n\n---\n\n# cross platform DEVNULL:\nset STDOUT = /dev/null\n\n$ program2\n```\n\n## Branching subtasks\nYou can branch a subtask and pass arguments to it:\n\n```\n[task1]\n# branch 'task2'\n& task2 {HOME}\n\n[task2]\n# from task2, we can access arguments passed to it.\n# ARGS (environment variable) is a list of arguments.\n: Arguments -> {ARGS}\n```\n\nWhenever you branch a subtask, a new instance of this subtask is created, with its own variables. You can share data with a subtask with one of these three ways:\n- pass arguments to the subtask while branching it;\n- use the global [namespace](#namespaces-and-persistence);\n- use the database [namespace](#namespaces-and-persistence).\n\nA subtask can also return data that is cached in the `R` environment variable:\n\n```\n[task1]\n& task2 \"John Doe\"\n# from now, R contains 'Hello John Doe !'\n\n[task2]\nset result = `Hello {ARGS} !`\nreturn result\n```\n\n### Multithreading\nBranching a subtask is done in the main thread. But one can create a new thread for a subtask:\n\n```\n[task1]\n# run an instance of task2 in a new thread\n~ task2\n\n# the next command won't wait 'task2' to complete\n$ git commit -m \"Update\"\n\n\n[task2]\n# this task sleeps for 5 seconds\nsleep 5\n```\n\n\n# Data types and control flow\nIn the next subsections we will talk about data types then control flow.\n\n## Data types\n**Backstage** supports [variables](https://en.wikipedia.org/wiki/Variable_(computer_science)) and let the programmer set, use, clear, and drop variables.\n\nUnder the hood, **Backstage** works with five **Python** data types: `str`, `list` (one-dimensional), `dict` (one-dimensional), `int`, and `float`. But these data types aren't intended to be directly used by the programmer. Instead, `assignment tags` are used to tell the interpreter how to treat a variable.\n\nThese `assignment tags` are: `raw`, `str`, `list`, `dict`, `int`, `float`, `date`, `time`, `dtime`, and `tstamp`.\n\n```\n[task]\n# this is a string\nset var = 42\n\n# this is another string\nset var (str) = `Hello World`\n\n# this is a list\nset var (list) = `reg green blue`\n\n# this is the same list but edited\nset var[0] = `yellow`\n# var -> yellow green blue\n\n# this is a dict\nset var (dict) = `user=\"John Doe\" age=42 location=Kernel`\n\n# this is the same dict but edited\nset var.user = `Jane Doe`\n# var -> user='Jane Doe' age=42 location=Kernel\n\n# this is an integer\nset var (int) = 40 + 2\n# var -> 42\n\n# this is a raw string\nset regex (raw) = `[\\S\\s]*?`\n\n# get the current timestamp\nset now (int) = {NOW}\n# now -> 1662569326\n\n# convert it into datetime\nset var (dtime) = {now}\n# var -> 2022-09-07 17:48:46\n\n# go from a datetime to timestamp\nset var (tstamp) = `2022-09-07 17:48:46`\n# var -> 1662569326\n\n# extract the time part of a timestamp\nset var (time) = 1662569326\n# var -> 17:48:46\n```\n\n> Note that all variables have a **string** representation and [backticks](https://en.wikipedia.org/wiki/Backtick) are used optionally as delimiters that will be ignored by the interpreter. So you can put backticks around an integer, and you can insert a list in a string.\n\n### Here document\n**Backstage** supports [here document](https://en.wikipedia.org/wiki/Here_document) for strings inside the `backstage.tasks` file:\n```\n[task]\n# this is a text with two lines\nset text (str) = `First line\\nSecond line`\n\n# this is another text with three lines\nset text = `January\\nFebruary\\nMarch`\n\n# this is not a text with two lines\nset var (raw) = `Hello\\nWorld`\n\n# this is not a text with two lines\nset var (str) = `Hello\\\\nWorld`\n```\n\n### Variable interpolation\n[Variable interpolation](https://en.wikipedia.org/wiki/String_interpolation) is supported with the ability to access from a list or a string, the value at an arbitrary index, or from a dictionary, the value of a key.\n\n```\n[task]\n# let's play with 'str' variables\nset x = `red`\nset var = `{x} green blue`\n# var -> red green blue\n\n# get the value of element at index 0\nset value = {var[0]}\n# value -> r\n\n---\n\n# let's play with a list\nset x = `red`\nset var (list) = `{x} green blue`\n\n# get the value of element at index 0\nset value = {var[0]}\n# value -> red\n\n# get the value of elements from index 1 to the end\nset value = {var[1:]}\n# value -> green blue\n\n---\n\n# let's play with a dict\nset x (int) = 40 + 2\nset var (dict) = `name=\"John Doe\" age={x}`\n\n# get the value of key 'name'\nset value = {var.name}\n# value -> John Doe\n\n# get the value of key 'age'\nset value = {var.age}\n# value -> 42\n\n---\n\n# cancel the variable interpolation\nset var1 = `Hello` \nset var2 = `{{var1}} World`\n# var2 -> {var1} World\n```\n\n## Control flow\n**Backstage** implements conditionals and loops. A wide range of operators are available to compare values.\n### Conditionals\n```\n[task]\nset var1 = 1\nset var2 = 1\nset x = 2\nset regex (raw) = `[\\S\\s]*?`\nset text = `Hello world`\nset y = `Hello`\n\n# conditionals support the classic\n# operators: == != > < >= <= \nif var1 == 1\n    $ program1\nelif var2 == x\n    $ program2\nelse\n    $ program3\n   \n# Backstage supports logical and/or \nif var1 == var2 and var1 >= 3\n    $ program1\n\n# use the 'matches' operator\n# or the negated one: !matches\nif regex matches text\n    : Matched !\nelif regex !matches text\n    : Mismatched !\n    \n# you can use the in operator\n# and also the negated one: !in\nif y in text\n    pass\nelif y !in text\n    pass\n\n```\n\n\n### Loops\n```\n[task]\n\n# From To loop\nfrom 10 to 0\n    : {R}\n    \n# For loop - iterate over a string\nset text = `Hello World`\nfor char in text\n    # N is an environment variable that serves as counter\n    # for all loops\n    : {N}- {char}\n\n# For loop - iterate over a list\nset data (list) = `red green blue`\nfor item in data\n    : {item}\n    \n# For loop - iterate over a dict\nset data (dict) = `name=\"John Doe\" age=42`\nfor item in data\n    : key -> {item[0]}  value -> {item[1]}\n    \n# For loop - iterate over a file\nset path = `/home/alex/iliad.txt`\nfor line in path (file)\n    : Line {N}\n    : {line}\n    :\n    \n# while loop\nset var = 1\nwhile var == 1\n    : One Time Hello\n    break\n    \n# browse loop\nset path = `/home/alex`\nbrowse files and dirs in path\n    : Directory -> {R}\n    for item in files\n        : {item}\n    for item in dirs\n        : {item} \n```\n\n\n\n# Namespaces and persistence\n[Namespaces](https://en.wikipedia.org/wiki/Namespace) are implemented in **Backstage** to provide convenient management of variables by defining three [scopes](https://en.wikipedia.org/wiki/Scope_(computer_science)): \n- `L` for **Local** scope;\n- `G` for **Global** scope;\n- `D` for **Database** scope.\n\nBy default, variables exist in the **Local** namespace and are only accessible to the running task.\n\nTo share data with a subtask, one can expose arbitrary variables that will be copied into the **Global** namespace which is readable and writable (thread-safe) by all subtasks.\n\n```\n[task]\n# by default, variables are defined in Local,\n# i.e. they are only visible in the scope of the current task\nset var = 42\n: Var contains {var}\n: Var still contains {L:var}\n\n# you can make local variables public\nexpose var\n# from now, you can get a thread-safe access to var \n# from any running task:\n: Global var contains {G:var}\n\n# branch _task2\n& _task2\n\n[_task2]\n: I got {G:var} !\n\n```\n\nData can also be **persisted**:\n\n```\n[task]\nset var = 42\nstore var\n\n# from now, 'var' can be accessed by all tasks\n# in this runtime but also in future runtimes\n: Var contains {D:var}\n\n# if you aren't sure about the existence\n# of a variable, just do this:\ndefault var\n\n# it also works with a bunch of variables:\ndefault var1 L:var2 D:var3 G:var4\n\n# from now, if 'var1' hasn't been manually defined\n# by the programmer, it will be\n# automatically initialized and\n# its value will be an empty string\n```\n\nPersisted variables are stored in `.backstage/database.json`.\n\n\n# Variable interpolation and escaping\nDuring the string interpolation of a command that spawn processes or branch a subtask, variables that are of the `str` type are automatically [shell-escaped](https://en.wikipedia.org/wiki/Escape_character).\n\n```\n[task]\n# This is a 'str' variable (backticks aren't quotes, by the way!)\nset name = `John Doe` \nset colors (list) = `red green blue`\n\n: Welcome {name} !\n# Welcome John Doe\n\n$ program name={name} -c {colors}\n# program name='John Doe' -c red green blue\n\n# Notice the quotes automatically added around the name John Doe\n```\n\n# Environment variables and language syntax\nEnvironment variables are local to each instance of task. They are defined as uppercase strings. One can edit their contents but can't create new environment variables.\n\nThis is the exhaustive list of environment variables:\n\n|Variables|Description|\n|---|---|\n|`ARGS`|List of arguments passed to this task from the command line|\n|`CWD`|Current working directory|\n|`DATE`|The current date in the **YYYY-MM-DD** format|\n|`EMPTY`|Just an empty string|\n|`ERROR`|Error string from a process previously spawned|\n|`EXCEPTION`|Name of the last exception raised|\n|`FALSE`|The integer **0**|\n|`HOME`|The path to `$HOME`. Example: `/home/alex`|\n|`LINE`|The current line (1-based numbering) of execution in the task body|\n|`N`|Counter for `while`, `for`, `from`, and `browse` loops|\n|`NOW`|Current timestamp in seconds|\n|`ONE`|The integer **1**|\n|`OS`|The running operating system: `aix`, `linux`, `win32`, `cygwin`, `darwin`|\n|`OUTPUT`|Output string from a process previously spawned|\n|`R`|The **return** of Python functions, built-in commands, statements, constructs, or process exit status codes|\n|`RANDOM`|Random integer between **0** and **255** (closed interval)|\n|`SPACE`|One space ` ` character|\n|`STDERR`|Use this variable to perform **STDERR** redirection|\n|`STDIN`|Use this variable to perform **STDIN** redirection|\n|`STDOUT`|Use this variable to perform **STDOUT** redirection|\n|`TASK`|The name of the currently running task|\n|`TIME`|The current time in the **HH:MM:SS** format|\n|`TIMEOUT`|Timeout in seconds for commands that spawn processes. Default value: **30** seconds|\n|`TMP`|Temporary directory. **Attention**, this directory will automatically disappear at the end of the runtime ! So think twice before moving files inside|\n|`TRACEBACK`|[Traceback](https://en.wikipedia.org/wiki/Stack_trace#Python) of the last exception raised|\n|`TRASH`|Path to the trash: `$HOME/PyrusticData/trash`|\n|`TRUE`|The integer **1**|\n|`ZERO`|The integer **0**|\n\n> Note that the `TRACEBACK` and `EXCEPTION` variables are cleared after the next successful command. **Backstage** also generates for convenience, `ARG0`, `ARG1`, `ARGx`, according to the contents of `ARGS`. For example, if `ARGS`contains two arguments, you can expect that `ARG0` and `ARG1` exist.\n\n## Language syntax\nIn this section we will explore the built-in commands, statements, keywords, symbols, and language constructs that make **Backstage**.\n\n> Note that wherever a built-in command or statement expects a **variable** that will be **read**, for convenience you can instead of supplying a variable name, define an **inline** `int` or `float` literal.\n\n> Also, consider that the `R` environment variable is your friend, since it is used to cache the data returned by a statement, a construct, or a command.\n\n### APPEND\nAppend data to a file.\n\n**Usage:** `append <var> to <filename_var>`\n\n\n### ASSERT\nTest is a condition is true.\n\n**Usage:** `assert (<var1>|<regex_var>) (==|!=|<=|>=|<|>|in|!in|rin|!rin|matches|!matches) <var2> [and|or] ...`\n\n**Example:** `assert regex_var matches text_var and var1 in list`\n\nNote that `!` is used to express negation and `rin` is a Regex-based `in`. A regexly-in operator ;)\n\n\n### BRANCH\nBranch a subtask. The syntax is similar to the one to spawn processes, i.e., a string of words. The syntax supports variable interpolation.\n\n**Usage:** `& <subtask> [<argument> ...]`\n\n**Example:** `& subtask1 name=\"John Doe\" age=42 city={city}`\n\n> In this example, the `city` variable will be automatically shell-escaped during its interpolation.\n\n\n### BREAK\nBreak a loop.\n\n**Usage:** `break`\n\n### BROWSE\nLoop construct to browse a directory.\n\n**Usage:** `browse [files] [and] [dirs] in <dirname_var>`\n\n**Example:**\n```\n[task]\nbrowse files and dirs in dirname\n    : Root -> {R}\n    for item in files\n        : {item}\n    for item in dirs\n        : {item}\n        \nbrowse files in dirname\n    pass\n    \nbrowse dirs in dirname\n    pass\n```\n\n### CALL\nCall a **Python** function from **Backstage** with arguments, then get the return !\n\n**Usage:** `call <module>.<function>[(<argument_var>, ...)]`\n\n**Example:** \n```\n[task]\n# interface with the Python module\ninterface with package.coffee_module alias coffeemaker\n\n# call the 'make' function with arguments then get the return\ncall coffeemaker.make(sugar_cube, extra, 42)\n: Result -> {R}\n```\n\n### CD\nChange directory.\n\n**Usage:** `cd <dirname_var>`\n\n\n### CHECK\nReturn the data type (`str`, `list`, `dict`, `int`, `float`) of a variable if it exists, else return an empty string.\n\n**Usage:** `check <var>`\n\n**Example:**\n```\n[task]\ncheck myvar\nif R == EMPTY\n    : This variable doesn't exist at all !\nelse\n    : 'myvar' exists, its data type is {R}\n```\n\n### CLEAR\nClear the content of a variable or a list of variables.\n\n**Usage:** `clear <var> ...`\n\n**Example:** `clear var1 var2 var3`\n\n### COMMENT\nComment.\n\n**Usage:** `# <comment>`\n\n\n### CONFIG\nRead and write configuration options (`FailFast`, `ReportException`, `ShowTraceback`, `TestMode`, `AutoLineBreak`).\n\n**Usage:** `config <option> ...`\n\n**Example:**\n```\n[task]\nconfig FailFast=1 AutoLineBreak=0\nconfig TestMode\nif R == 1\n    : Test Mode On\nelif R == 0\n    : Test Mode Off\n```\n\n\n### COPY\nCopy a file or a directory tree to a new destination.\n\n**Usage:** `copy <src_path_var> to <dest_path_var>`\n\n### COUNT\nCount `chars`, `items`, and `lines` in the content of a variable or inside a file (if the `(file)` tag is applied).\n\n**Usage:** `count (chars|items|lines) in (<var>|<filename_var>) [(file)]`\n\n**Example:**\n```\n[task]\nset path = /home/alex/iliad.txt\ncount chars in path (file)\nif R == 0\n    : The file is empty !\n```\n\n### CREATE\nCreate a new file or directory.\n\n**Usage:** `create (dir|file) <path_var>`\n\n### DEFAULT\nDefine an empty variable (or a bunch of variables) if it doesn't exist yet in the namespace.\n\n**Usage:** `default <var> ...`\n\n**Example:**\n\n```\n[task]\n# default two variables in the Local namespace\ndefault var1 L:var2\n\n# default one variable in the Database namespace\ndefault D:name\n\n# from now, 'D:name' can be safely accessed\n# even though the 'database.json' file supposed\n# to contain the 'name' value was inadvertently deleted.\n```\n\n### DROP\nDestroy a variable (or a bunch of variables). \n\n**Usage:** `drop <var> ...`\n\n### ELIF\nPart of the `if` conditional construct.\n\n**Usage:** `elif (<var1>|<regex_var>) (==|!=|<=|>=|<|>|in|!in|rin|!rin|matches|!matches) <var2> [and|or] ...`\n\n### ELSE\nPart of the `if` conditional construct.\n\n**Usage:** `else`\n\n### ENTER\nInvite user to submit data.\n\n**Usage:** `> [<var> [: <text>]]`\n\n**Example:**\n```\n[task]\n\n> name : Please enter your name \n# have you spotted the space at the end the line above ?\n\n# the same line can be rewritten like this:\n> name : `Please enter your name `\n# backticks serve as delimiters that will be ignored\n\n# this one is also possible:\nset msg = `Please enter your name `\n> name : {msg}\n\n# even this:\nset info (dict) = name=\"John Doe\" age=42\n> info.name : `Please enter your name`\n```\n\n### EXIT\nExit.\n\n**Usage:** `exit`\n\n### EXPOSE\nCopy a variable (or a bunch of variables) into the **Global** namespace.\n\n**Usage:** `expose <var> ...`\n\n### FAIL\nDeliberately fail. It breaks the running task and mark it as a failure.\n\n**Usage:** `fail`\n\n### FIND\nFind files and or directories paths.\n\n**Usage 1:** `find [all] (paths|files|dirs) in <dirname_var>`\n\n**Usage 2:** `find ... matching <regex_var>`\n\n**Usage 3:** `find ... [and] (accessed|modified|created) (at|after|before|between) <timestamp_var> [and <timestamp_var>]`\n\n**Example:** `find files in dirname matching regex and accessed between timestamp1 and timestamp2`\n\n### FOR\nA `for` loop to iterate the content of a variable or the content of a file (if you apply the `(file)` tag).\n\n**Usage:** `for (char|item|line) in (<var>|<filename_var>) [(file)]`\n\n**Example:**\n```\n[task]\n# this code iterates over each character of the Iliad,\n# and outputs it as it,\n# with one twist: each line starts with its index (0-based)\n\nset path = `/home/alex/iliad.txt`\n\n# the print statement (:) won't anymore\n# automatically add a line break !\nconfig AutoLineBreak=0\n\nfor line in path (file)\n    : `{N} `\n    for char in line\n        : {char}\n    : \\n\n```\n\n\n### FROM\nA loop to go from an integer to another one. If the `start` integer is superior to the `end` integer, the count will decrease.\n\n**Usage:** `from <start> to <end>`\n\n**Example:**\n```\n[task]\nfrom 10 to 0\n    # here, N will go from 0 to 10\n    # but R will go from 10 to 0\n    # because N is a counter for all loops\n    # while R is a cache for whatever is returned\n    # by a command, a statement, or a construct\n    : {N}\\t{R}\n\n# As you can see, I can add a Tab \\t since\n# Backstage supports natively here document ;)\n\n# To get a simple backslash followed by a 't':  \\\\t\n```\n\n### GET\nGet a `char`, an `item`, or a `line` at index `x` (including negative index) from a target. The target can be the content of a variable or a file (if you apply the `(file)` tag).\n\n**Usage:** `get (char|item|line) <index> from (<var>|<filename_var>) [(file)]`\n\n### IF\nConditional construct.\n\n**Usage:** `if (<var1>|<regex_var>) (==|!=|<=|>=|<|>|in|!in|rin|!rin|matches|!matches) <var2> [and|or] ...`\n\n**Example:**\n```\n[task]\ndefault var1 var2 var3 var4\nif var1 == var2 or var3 == var4\n    pass\nelif EMPTY == EMPTY\n    pass\nelse\n    pass\n```\n\n### INTERFACE\nInterface with a **Python** module.\n\n**Usage:** `interface with [<package>.]<module> [alias <name>]`\n\n**Example:** \n\n```\n[task]\ninterface with package.mymodule alias module\ndefault var1 var2\ncall module.function(var1, var2)\n```\n\n### LINE\nDraw a line.\n\n**Usage:** `(=|-) ...`\n\n**Example:** `----------` or `==========`\n\n\n### MOVE\nMove a file or a directory tree to a new destination.\n\n**Usage:** `move <src_path_var> to <dest_path_var>`\n\n### PASS\nPlaceholder for the code that you might write in the future. This statement does nothing. It is the same as the eponymous one in **Python**.\n\n**Usage:** `pass`\n\n### POKE\nPoke a file or directory to get access to a `dict` of properties if this path exists. Available properties: `size` `mtime` `ctime` `atime` `nlink` `uid` `gid` `mode` `ino` `dev`.\n\n**Usage:** `poke <path_var>`\n\n**Example:**\n```\n[task]\nset path = /home/alex/iliad.txt\npoke path\nif R == EMPTY\n    : Oops ! This file doesn't exist\nelse\n    : File size -> {R.size}\n```\n\n### PREPEND\nPrepend data to a file\n\n**Usage:** `prepend <var> to <filename_var>`\n\n### PRINT\nPrint data. You can use backquotes as delimiters. This statement supports variable interpolation.\n\n**Usage:** `: <text>`\n\n**Example:**\n```\n[task]\n:  Hello World ! \n# Have you spotted the two extra spaces characters ?\n\n: ` Hello World ! `\n# hehehe, got you ! ;)\n```\n\n### PUSH\nPush variables into the input of the next spawned process.\n\n**Usage:** `push <var> ...`\n\n### READ\nRead all or a specific line index (including negative index) from a file.\n\n**Usage:** `read (*|<index>) from <filename_var>`\n\n### REPLACE\nReplace some pattern in a text with a replacement value.\n\n**Usage:** `replace <regex_var> in <text_var> with <replacement_var>`\n\n### RETURN\nReturn from a task with a value.\n \n**Usage:** `return [<var>]`\n\n### SET\nDefine a new variable or update the content of an existing variable. You don't can't specify a data type, but instead you can apply an assigment tag that is one of: `(raw)` `(str)` `(list)` `(dict)` `(int)` `(float)` `(date)` `(time)` `(dtime)` `(tstamp)`. Note that backquotes can be used as delimiters for the value (right side of the equal sign). These delimiters will be ignored. Backticks aren't quotes. This statement supports variable interpolation.\n\n**Usage:** `set <var> [(raw)|(str)|(list)|(dict)|(int)|(float)|(date)|(time)|(dtime)|(tstamp))] = <value>`\n\n**Example:** `set var (int) = 1 + 2`\n\n\n### SLEEP\nSleep for `x` seconds.\n\n**Usage:** `sleep <seconds>`\n\n### SPAWN\nSpawn a new process.\n\n**Usage:** `$ <program> [<argument> ...]`\n\n**Example:** `$ program1 arg {var} | program2 `\n\n### SPLIT\nSplit with a regex pattern a text into a list.\n\n**Usage:** `split <text_var> with <regex_var>`\n\n### SPOT\nCount the number of occurrences of a regex pattern inside a text.\n\n**Usage:** `spot <regex_var> in <text_var>`\n\n### STORE\nStore a variable (or a bunch of variables) in the **Database** namespace. A stored variable can be accessed like this: `D:var`\n\n**Usage:** `store <var> ...`\n\n### THREAD\nBranch a subtask... but in a new thread. \n\n**Usage:** `~ <subtask> [<argument> ...]`\n\n### WHILE\nThe `while` loop. Use `break` to break it, and check `N` if you need a counter. \n\n**Usage:** `while (<var1>|<regex_var>) (==|!=|<=|>=|<|>|in|!in|rin|!rin|matches|!matches) <var2> [and|or] ...`\n\n### WRITE\nErase the content of a file to write some data inside.\n\n**Usage:** `write <var> to <filename_var>`\n\n\n# File and directory manipulation\nLet's explore how file and directory manipulatin is performed with **Backstage**.\n\n## Resource creation\n\nCreate a file:\n```\n[task]\n# create a file\nset path = /home/alex/iliad.txt\ncreate file path\n```\n\nCreate a directory:\n\n```\n[task]\n# create a directory\nset path = /home/alex/new/directory\ncreate dir path\n```\n\n## File edition\n\n```\n[task]\nset path = /home/alex/iliad.txt\nset var = Hello World\n\n# write data\nwrite var to path\n\n# append data to a file\nappend var to path\n\n# prepend data to a file\nprepend var to path\n```\n\n## Read the content of a file\n```\n[task]\nset path = /home/alex/iliad.txt\n\n# read all from 'iliad.txt'\nread * from path\n: {R}\n\n# read the line at index 3\nset index (int) = 1 + 1 + 1\nread index from path\n: {R}\n\n# just want to read the last line ?\nread -1 from path \n: {R}\n```\n\n## Iterating the content of a file\n```\n[task]\nset path = /home/alex/iliad.txt\n\n# iterate over the characters in a file\nfor char in path (file)\n    : Character -> char\n\n# iterate over the lines in a file\nfor line in path (file)\n    : {line}\n```\n\n## Browse a folder\n\n```\n[task]\nset folder = /home/alex\n\nbrowse files and dirs in folder\n    : Directory -> {R}\n    for item in files\n        : {item}\n    for item in dirs\n        : {item}\n```\n\n## Find resources\nThe `find` statement is like Glob but on steroid:\n```\n[task]\nset folder = /home/alex\nset regex (raw) = `[\\S\\s]*?`\nset timestamp1 = 1223322233\n\nfind files in folder matching regex and accessed between timestamp1 and NOW\n: Results -> {R}\n\n```\n\n## Read resource properties\nYou can get from **Backstage** the properties of an arbitrary resource, like its size:\n\n```\n[task]\nset path = /home/alex/iliad.txt\n\n# poke a file\npoke path\n: Creation timestamp -> {R.ctime}\n: Size -> {R.size}\n\n```\n\n\n# Interfacing with Python\nInterfacing with **Python** is as simple as this:\n```\n[task]\ninterface with python.module as my_module\nset name = `John Doe`\nset age (int) = 40 + 2\ncall my_module.function(name, age)\n: Return -> {R}\n```\n\n> **Allowed return data types:** `str`, `list` (one-dimensional),`tuple` (one-dimensional), `dict` (one-dimensional), `int`, and `float`. **Python** functions can also return `True`, `False`, and `None`, which will be converted to **1**, **0** and an **empty string**, respectively.\n\n# Exception handling and tests\nWhenever an exception is raised, the variables `EXCEPTION` and `TRACEBACK` are updated and **Backstage** continues calmly its execution.\n\nNote that the variables `TRACEBACK` and `EXCEPTION` are cleared after the next successful command.\n\nIf you want the execution to stop whenever an exception is raised, just set `1` to the `FailFast` configuration option.\n\n```\n[task]\nconfig FailFast=1\n```\n\nIf you want to read a report of an exception when it's raised, just set `1` to the `ReportException` configuration option.\n\n```\n[task]\nconfig ReportException=1\n```\n\nIf you want to read the verbose [traceback](https://en.wikipedia.org/wiki/Stack_trace#Python) of an exception when it's raised, just set `1` to the `ShowTraceback` configuration option.\n\n```\n[task]\nconfig ShowTraceback=1\n```\n\nYou can edit these configuration options in the same command:\n\n```\n[task]\nconfig FailFast=1 ReportException=1 ShowTraceback=0\n```\nYou can read the current value of an arbitrary configuration option:\n\n```\n[task]\nconfig FailFast\n: FailFast -> {R}\n```\n\n## Debug mode\nInstead of manually setting the `ReportException` configuration option to `1`, you can simply run a task in debug mode:\n\n```bash\n$ backstage -d task arg\n```\n\n## Tests\nTo create a test, just postfix `.test` to the name of a task. Then from the command line, just run the test `backstage --test task`.\n\n### Example\n```\n[task]\nset val (int) = {ARGS[0]} + {ARGS[1]}\nreturn val\n\n[task.test]\n# here we branch the task with the arguments 40 and 2\n& task 40 2\n# we expect 42 as return \nassert R == 42\n```\n\n# Command line interface and developer experience\n\n```bash\n$ backstage --help\nWelcome to Pyrustic Backstage !\nUltimate task automation tool for hackers.\n\nUsage:\n    backstage\n    backstage <task> [<arg> ...]\n    backstage <option> [<arg> ...]\n    \nOptions:\n    -i, --intro                     Show file introductory text\n    -c, --check                     Show the list of tasks\n    -C, --Check                     Show the descriptive list of tasks\n    -d, --debug <task> [<arg> ...]  Run task in debug mode\n    -t, --test [<task> ...]         Run tests\n    -T, --Test [<task> ...]         Run tests in debug mode\n    -s, --search <task>             Search for a task by its name\n    -S, --Search <task>             Search for a task by keyword\n    -h, --help [<task>]             Show help text\n\n    The <task> string can use a glob-like syntax that allows \n    wildcards '*' and '?'. Therefore, 'task1' is identical to 'task*'.\n    \nVisit the webpage: https://github.com/pyrustic/backstage\n```\n\n## Developer experience\n**Backstage** will do its best to help you understand raised exceptions:\n\n```bash\n$ backstage task1\nZeroDivisionError at line 3 of [task1] !\ndivision by zero\n\n$ backstage task2\nInterpretationError at line 7 of [task2] !\nUsage: sleep <seconds>\n```\n\nWhen you run **Backstage** in the loop mode, you can enjoy the autocomplete functionality (use the Tab key to complete your input) and also the history functionality (use Up and Down arrows).\n\n```bash\n$ backstage\nWelcome to Pyrustic Backstage !\nUltimate task automation tool for hackers.\nPress 'Ctrl-c' or 'Ctrl-d' to quit.\nType '--help' or '-h' to show more information.\n\n(backstage) task(Tab Tab)\ntask    task1   task2   task3\n\n(backstage) --h(Tab)\n\n...\n\n```\n\n# Miscellaneous\nIn the following subsections, we will explore some miscellaneous information.\n\n## Dogfooding\n**Backstage** itself as a project relies on a `backstage.tasks` file (check the root of this repository). You are reading a document about **Backstage** that has been updated with **Backstage** !\n\n## Dependencies\n**Backstage** relies on these **Python** packages:\n- [Subrun](https://github.com/pyrustic/subrun) to spawn new processes;\n- [Shared](https://github.com/pyrustic/shared) to store data;\n- [Jesth](https://github.com/pyrustic/jesth) to parse `backstage.tasks` files;\n- [Oscan](https://github.com/pyrustic/jesth) to extract tokens from the script.\n\n## Indentation\nFour (4) spaces by [indent](https://en.wikipedia.org/wiki/Indentation_(typesetting)#Indentation_in_programming). Period.\n\n## Python 3\nInside the script file, you don't have to type `python3` in a command to spawn the **Python** interpreter. Just type `python` to spawn the same interpreter that is running **Backstage**:\n```\n[task]\n$ python -m my.package.module\n```\n\n## Shell\n**Backstage** doesn't rely on any **Shell**. But you can still pipe commands !\n\nExample, if you want to change the current working directory:\n```\n[task]\n# instead of doing this\n$ cd {HOME}\n\n# use the built-in 'cd'\ncd HOME\n\n# you can still spawn programs commonly used in the shell\n$ ls\n\n# or make this complex stuff (successfully performed on Ubuntu)\n$ python -m this | tail --lines=+3 | sort\n```\n\n## Data cache\n**Backstage** stores data in an automatically created directory `.backstage` located in the current working directory. Inside this directory you can find the `execution.log` and `database.json` files.\n\n## Automatic line break\nIf you don't want anymore an extra line break at the end of printed strings, you can turn off this functionality:\n\n```\n[task]\n# turn off auto line break\nconfig AutoLineBreak=0\n: `Hello `\n: `World`\n# turn on auto line break\nconfig AutoLineBreak=1\n: Hello World\n```\n\n\n## Lines\nYou can draw lines with the characters `=` or `-`. If you pick one, only this one is allowed to appear on the same line.\n```\n[task1]\n\n$ program1\n$ program2\n\n-----------------\n\n[task2]\npass\n\n=================\n```\n\n\n# Demo\nThe demo is a [repository](https://github.com/pyrustic/project) that contains a [backstage.tasks](https://github.com/pyrustic/project/blob/master/backstage.tasks#L1) file similar to the one used to build, package and publish my projects. Your mission, if you accept it, is to clone the demo repository and run the `backstage.tasks` which contains tasks to create a new **Python** `Hello Friend !` project, build it, perform versioning, init **Git** , perform **Git** Commit and **Git** Push, and even push the latest built package to [PyPI](https://pypi.org) !\n\n```bash\n# 1- clone the repository\n$ git clone https://github.com/pyrustic/project\n$ cd project\n\n# 2- install backstage\n$ pip install backstage\n\n# 3- install buildver\n$ pip install buildver\n\n# 4- install setupinit\n$ pip install setupinit\n\n# 5- list the tasks available in the `backstage.tasks` file\n$ backstage -c\nAvailable tasks (11):\n    build  check  clean  gendoc  gitcommit  gitinit  gitpush  init\n    release  test  upload2pypi\n\n# 6- descriptive list of tasks\n$ backstage -C\n\n# 7- initialize the project\n$ backstage init\nSuccessfully initialized !\n\n# 8- run the project\n$ python3 -m project\nHello Friend !\n\n# 9- build the project\n$ backstage build\nbuilding v0.0.1 ...\nSuccessfully built 'project' v0.0.1 !\nVERSION file updated from 0.0.1 to 0.0.2\n\n# 10- check the project\n$ backstage check\nproject v0.0.2 (source)\n.whl v0.0.1 (package) built 28 secs ago\n\n# 11- initialize Git\n$ backstage gitinit\nOrigin: https://github.com/pyrustic/project.git\n\n# 12- perform a Git Commit\n$ backstage gitcommit\n\n# 13- perform a Git Push\n$ backstage gitpush\n\n# 14- upload to PyPI\n$ backstage upload2pypi\n```\n\n> **Note:** Commands `9`, `12`, `13`, and `14` can be replaced with one command: `backstage release`\n\n\n\n# Installation\n**Backstage** is **cross platform** and versions under **1.0.0** will be considered **Beta** at best. It is built on [Ubuntu](https://ubuntu.com/download/desktop) with [Python 3.8](https://www.python.org/downloads/) and should work on **Python 3.5** or **newer**.\n\n## For the first time\n\n```bash\n$ pip install backstage\n```\n\n## Upgrade\n```bash\n$ pip install backstage --upgrade --upgrade-strategy eager\n\n```\n\n<br>\n<br>\n<br>\n\n[Back to top](#readme)\n\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/pyrustic/backstage","keywords":"scripting,language,script,project-manager,manager,packaging,release,build,project-init,lightweight,pyrustic,tool,CLI,setup,versioning,git,language-agnostic,productivity","license":"MIT","maintainer":"Pyrustic Evangelist","maintainer_email":"rusticalex@yahoo.com","name":"backstage","package_url":"https://pypi.org/project/backstage/","platform":null,"project_url":"https://pypi.org/project/backstage/","project_urls":{"Homepage":"https://github.com/pyrustic/backstage"},"provides_extra":null,"release_url":"https://pypi.org/project/backstage/0.0.22/","requires_dist":["subrun","jesth","oscan"],"requires_python":">=3.5","summary":"Three-speed scripting language and task automation tool","version":"0.0.22","yanked":false,"yanked_reason":null},"last_serial":18439214,"releases":{"0.0.1":[{"comment_text":"","digests":{"blake2b_256":"6ef687a834b60e256469f7b68fb3fe64be5b287c2b6b4ac2afc069bf6a9a548a","md5":"4ab5876a393860cfc03d63ea91b1c658","sha256":"660cc146c151ce1f980a280e2c4586cc3e3c126fb68a43ef037d0679f59d581f"},"downloads":-1,"filename":"backstage-0.0.1-py3-none-any.whl","has_sig":false,"md5_digest":"4ab5876a393860cfc03d63ea91b1c658","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":2590,"upload_time":"2021-08-19T18:33:41","upload_time_iso_8601":"2021-08-19T18:33:41.669673Z","url":"https://files.pythonhosted.org/packages/6e/f6/87a834b60e256469f7b68fb3fe64be5b287c2b6b4ac2afc069bf6a9a548a/backstage-0.0.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"6ba437db6fca5e25966dc57479c37a7f5990345e98b1a25bbc7a7e938a73c5be","md5":"c9eca607b5e9e521a2dedea817f2face","sha256":"e4250a7901950c5af0925b8a6afb0438c7cbf66d77b48ab952aeae9fb63d77ef"},"downloads":-1,"filename":"backstage-0.0.1.tar.gz","has_sig":false,"md5_digest":"c9eca607b5e9e521a2dedea817f2face","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":2303,"upload_time":"2021-08-19T18:33:44","upload_time_iso_8601":"2021-08-19T18:33:44.267811Z","url":"https://files.pythonhosted.org/packages/6b/a4/37db6fca5e25966dc57479c37a7f5990345e98b1a25bbc7a7e938a73c5be/backstage-0.0.1.tar.gz","yanked":false,"yanked_reason":null}],"0.0.10":[{"comment_text":"","digests":{"blake2b_256":"1ddaf7a3931ce47ff2d773bce078ad8095e96ae6e822405504143866f823f50e","md5":"9ab7db9a906a7a1b37dba4c8a9ea6668","sha256":"f32b8c070105ba02bc4c7374450c6fe17a765d660e6383cc8e90239b36151d86"},"downloads":-1,"filename":"backstage-0.0.10-py3-none-any.whl","has_sig":false,"md5_digest":"9ab7db9a906a7a1b37dba4c8a9ea6668","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":89934,"upload_time":"2022-09-07T23:07:39","upload_time_iso_8601":"2022-09-07T23:07:39.660575Z","url":"https://files.pythonhosted.org/packages/1d/da/f7a3931ce47ff2d773bce078ad8095e96ae6e822405504143866f823f50e/backstage-0.0.10-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"8653afc87b33b1bece9c9760d8873e48069ae5bbd02719207fb6b18a3feb5811","md5":"26082b400de299b17f7cf70bd950667c","sha256":"bbe0da6396646c3d4550d5a2bea64f94f144f83076d206cb5de27c37a6f8c29c"},"downloads":-1,"filename":"backstage-0.0.10.tar.gz","has_sig":false,"md5_digest":"26082b400de299b17f7cf70bd950667c","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":33808,"upload_time":"2022-09-07T23:07:42","upload_time_iso_8601":"2022-09-07T23:07:42.513178Z","url":"https://files.pythonhosted.org/packages/86/53/afc87b33b1bece9c9760d8873e48069ae5bbd02719207fb6b18a3feb5811/backstage-0.0.10.tar.gz","yanked":false,"yanked_reason":null}],"0.0.11":[{"comment_text":"","digests":{"blake2b_256":"3822aa659212f44021c0a16848d7d350ff6c76a788a1d0196d1ababa30c9b383","md5":"c36674599fa8bf2812e3f99286fbfa04","sha256":"190fe8cd1a47f161b36bdd602b2f2120a2c3ae65470e688786b0fb439f42b2b4"},"downloads":-1,"filename":"backstage-0.0.11-py3-none-any.whl","has_sig":false,"md5_digest":"c36674599fa8bf2812e3f99286fbfa04","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":99716,"upload_time":"2022-09-15T23:29:40","upload_time_iso_8601":"2022-09-15T23:29:40.562985Z","url":"https://files.pythonhosted.org/packages/38/22/aa659212f44021c0a16848d7d350ff6c76a788a1d0196d1ababa30c9b383/backstage-0.0.11-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"fc3ac88581a539dca2c8517cea31752edebd3e20b6541e5f1d9c96ec965c3898","md5":"8f269563aadf23cd1f79afa1d15fe391","sha256":"4a36a3adcef2dc6e184aec86eb31052ca1293813e710ac4b5e7636cdcd0692d7"},"downloads":-1,"filename":"backstage-0.0.11.tar.gz","has_sig":false,"md5_digest":"8f269563aadf23cd1f79afa1d15fe391","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":65280,"upload_time":"2022-09-15T23:29:44","upload_time_iso_8601":"2022-09-15T23:29:44.176920Z","url":"https://files.pythonhosted.org/packages/fc/3a/c88581a539dca2c8517cea31752edebd3e20b6541e5f1d9c96ec965c3898/backstage-0.0.11.tar.gz","yanked":false,"yanked_reason":null}],"0.0.12":[{"comment_text":"","digests":{"blake2b_256":"fbd2da274898033c8827219eb4287e98a71faa5e284ebdd2ebb95b5807ff2ec4","md5":"25860cb1594c4b0a9ed11d5f9a8b294d","sha256":"113e220873e51b9e564783a331a4a1326c223d420a3c4e3d960552c5591a37f0"},"downloads":-1,"filename":"backstage-0.0.12-py3-none-any.whl","has_sig":false,"md5_digest":"25860cb1594c4b0a9ed11d5f9a8b294d","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":99743,"upload_time":"2022-09-16T15:25:51","upload_time_iso_8601":"2022-09-16T15:25:51.404221Z","url":"https://files.pythonhosted.org/packages/fb/d2/da274898033c8827219eb4287e98a71faa5e284ebdd2ebb95b5807ff2ec4/backstage-0.0.12-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"5f7ed36b48ba6fb12a00a492431fdbd676c37f6e4feed40b37351a19739576de","md5":"56f8785da6062cf20ae915652b17ff53","sha256":"8771c18ac3f9a80e2465faf5247322983bbeadf70ec81bb56b44233dfcbeea2c"},"downloads":-1,"filename":"backstage-0.0.12.tar.gz","has_sig":false,"md5_digest":"56f8785da6062cf20ae915652b17ff53","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":65386,"upload_time":"2022-09-16T15:25:54","upload_time_iso_8601":"2022-09-16T15:25:54.698792Z","url":"https://files.pythonhosted.org/packages/5f/7e/d36b48ba6fb12a00a492431fdbd676c37f6e4feed40b37351a19739576de/backstage-0.0.12.tar.gz","yanked":false,"yanked_reason":null}],"0.0.13":[{"comment_text":"","digests":{"blake2b_256":"8e4eeb4d062bda9648ff007ceefe22875d1fe55184be6d47acbfcb13d5ed3a15","md5":"ca45326f28326d167c3f4fde492336b3","sha256":"d516e9479d42685e0e76de21aa5ea338974fa1b92beaf4e6ba97674e1e73d690"},"downloads":-1,"filename":"backstage-0.0.13-py3-none-any.whl","has_sig":false,"md5_digest":"ca45326f28326d167c3f4fde492336b3","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":99845,"upload_time":"2022-09-16T16:41:31","upload_time_iso_8601":"2022-09-16T16:41:31.076895Z","url":"https://files.pythonhosted.org/packages/8e/4e/eb4d062bda9648ff007ceefe22875d1fe55184be6d47acbfcb13d5ed3a15/backstage-0.0.13-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"aafc469529dc90c9871cdb6b24eb124c298d1c09335a326279ca6625db40fb8b","md5":"0d3cc79eff9096a22aed2e34121f2c5b","sha256":"180f4dcccc56cafa99d39eb9619c9e689109768f4465fcf1de4629d68757b092"},"downloads":-1,"filename":"backstage-0.0.13.tar.gz","has_sig":false,"md5_digest":"0d3cc79eff9096a22aed2e34121f2c5b","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":65478,"upload_time":"2022-09-16T16:41:34","upload_time_iso_8601":"2022-09-16T16:41:34.170585Z","url":"https://files.pythonhosted.org/packages/aa/fc/469529dc90c9871cdb6b24eb124c298d1c09335a326279ca6625db40fb8b/backstage-0.0.13.tar.gz","yanked":false,"yanked_reason":null}],"0.0.14":[{"comment_text":"","digests":{"blake2b_256":"ce47144a8788910d0152a0a02d4c14000c19a756cbd777c4f24a6291755a7978","md5":"6194da00f0a9c8c51a9ee7a1735d7c9f","sha256":"bbba07f3cd9dc3a77d08f8710aebacfb9c6fe072990c06f8d83e3b4de5ec0490"},"downloads":-1,"filename":"backstage-0.0.14-py3-none-any.whl","has_sig":false,"md5_digest":"6194da00f0a9c8c51a9ee7a1735d7c9f","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":99986,"upload_time":"2022-09-16T19:33:29","upload_time_iso_8601":"2022-09-16T19:33:29.336214Z","url":"https://files.pythonhosted.org/packages/ce/47/144a8788910d0152a0a02d4c14000c19a756cbd777c4f24a6291755a7978/backstage-0.0.14-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"9bd7b3b06c101243f7abcb4d324d134c5fd0a65346bc6908a25e94898f6bd054","md5":"7e53ab9144605871d6039b5030fff913","sha256":"51f9d04746247ab2baeb4465c23bb01a7a08c41f76848539e83fe9f6d54a1d1c"},"downloads":-1,"filename":"backstage-0.0.14.tar.gz","has_sig":false,"md5_digest":"7e53ab9144605871d6039b5030fff913","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":65735,"upload_time":"2022-09-16T19:33:34","upload_time_iso_8601":"2022-09-16T19:33:34.803634Z","url":"https://files.pythonhosted.org/packages/9b/d7/b3b06c101243f7abcb4d324d134c5fd0a65346bc6908a25e94898f6bd054/backstage-0.0.14.tar.gz","yanked":false,"yanked_reason":null}],"0.0.15":[{"comment_text":"","digests":{"blake2b_256":"47daa189dc1104dc938aa56d48e9c892c1cc59da4562fd6d74c401241a847d13","md5":"10b0990b478032b6527c31fbee47260c","sha256":"055a779c2fb1e75f0ffdb5cf293790a8ddb3076bd9694c07bdf56eb591b6ef01"},"downloads":-1,"filename":"backstage-0.0.15-py3-none-any.whl","has_sig":false,"md5_digest":"10b0990b478032b6527c31fbee47260c","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":100139,"upload_time":"2022-09-16T19:56:22","upload_time_iso_8601":"2022-09-16T19:56:22.945136Z","url":"https://files.pythonhosted.org/packages/47/da/a189dc1104dc938aa56d48e9c892c1cc59da4562fd6d74c401241a847d13/backstage-0.0.15-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1b14f03b47d74c5b01be6d3775f533081ccdf39b521345cc8d0e5834a2d853bb","md5":"3678e275dc0e1277de3e18007d62b699","sha256":"8936181404132f872e019cd1997dc6c4094e353346ddc638520c0bb7d636a543"},"downloads":-1,"filename":"backstage-0.0.15.tar.gz","has_sig":false,"md5_digest":"3678e275dc0e1277de3e18007d62b699","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":66134,"upload_time":"2022-09-16T19:56:25","upload_time_iso_8601":"2022-09-16T19:56:25.648345Z","url":"https://files.pythonhosted.org/packages/1b/14/f03b47d74c5b01be6d3775f533081ccdf39b521345cc8d0e5834a2d853bb/backstage-0.0.15.tar.gz","yanked":false,"yanked_reason":null}],"0.0.16":[{"comment_text":"","digests":{"blake2b_256":"a6db1a2c0b603f6fd191f0692907a910935ecc0f7e40728e78aed9f323df9e45","md5":"89c202263d4158e9e748a507fd614433","sha256":"b4fb9614f68f26fe3f07a7ab0b6e39cea9b7f724d9626350997a555de242c9a3"},"downloads":-1,"filename":"backstage-0.0.16-py3-none-any.whl","has_sig":false,"md5_digest":"89c202263d4158e9e748a507fd614433","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":100138,"upload_time":"2022-09-16T20:30:23","upload_time_iso_8601":"2022-09-16T20:30:23.616832Z","url":"https://files.pythonhosted.org/packages/a6/db/1a2c0b603f6fd191f0692907a910935ecc0f7e40728e78aed9f323df9e45/backstage-0.0.16-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"353080605f25c05e8e04154a4007cd1725d082a501cab5915b73cbba4986d775","md5":"ceaffb832eb37965ae6aea87990b02be","sha256":"a9eb20bc060c8ac41d0591c4962e70b2b8eb950ec46998631a90fd0f01edb69e"},"downloads":-1,"filename":"backstage-0.0.16.tar.gz","has_sig":false,"md5_digest":"ceaffb832eb37965ae6aea87990b02be","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":66143,"upload_time":"2022-09-16T20:30:26","upload_time_iso_8601":"2022-09-16T20:30:26.408343Z","url":"https://files.pythonhosted.org/packages/35/30/80605f25c05e8e04154a4007cd1725d082a501cab5915b73cbba4986d775/backstage-0.0.16.tar.gz","yanked":false,"yanked_reason":null}],"0.0.17":[{"comment_text":"","digests":{"blake2b_256":"8905f845cfc0e1175b2e27679fa5b571d3dccfbccbcfe309a69fafb32f12c0e4","md5":"76e683d9d10d3ac826e89707d3bbc277","sha256":"4508ea3db65f8db418f60cf75e06729d0967710c52346554d0b468ab4b0dc81f"},"downloads":-1,"filename":"backstage-0.0.17-py3-none-any.whl","has_sig":false,"md5_digest":"76e683d9d10d3ac826e89707d3bbc277","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":100140,"upload_time":"2022-09-16T22:02:12","upload_time_iso_8601":"2022-09-16T22:02:12.519465Z","url":"https://files.pythonhosted.org/packages/89/05/f845cfc0e1175b2e27679fa5b571d3dccfbccbcfe309a69fafb32f12c0e4/backstage-0.0.17-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b97813c6b2c47e0f6c8900dd18f223912c50b4d3b0c87da5fa1fb5ba559d987e","md5":"ab40f7b1043008530798b521b99d46eb","sha256":"4fe86fd80795e7fdd757c60cf387c8b3f23b2cb96e144ecf0711d8afd0c0d0f6"},"downloads":-1,"filename":"backstage-0.0.17.tar.gz","has_sig":false,"md5_digest":"ab40f7b1043008530798b521b99d46eb","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":66191,"upload_time":"2022-09-16T22:02:15","upload_time_iso_8601":"2022-09-16T22:02:15.480606Z","url":"https://files.pythonhosted.org/packages/b9/78/13c6b2c47e0f6c8900dd18f223912c50b4d3b0c87da5fa1fb5ba559d987e/backstage-0.0.17.tar.gz","yanked":false,"yanked_reason":null}],"0.0.18":[{"comment_text":"","digests":{"blake2b_256":"5aae3673dde5f056587dd6706118e0ebf67bb901d2b77fe58fd26dc94da9c07f","md5":"43e4b0cb7f3bed415a80d023b9d7d522","sha256":"b94293e0b5a8d1ab852b3c4725a0a2cf10933c8ff0a70375a0dc858fd95a6f34"},"downloads":-1,"filename":"backstage-0.0.18-py3-none-any.whl","has_sig":false,"md5_digest":"43e4b0cb7f3bed415a80d023b9d7d522","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":100334,"upload_time":"2022-09-23T13:16:24","upload_time_iso_8601":"2022-09-23T13:16:24.670446Z","url":"https://files.pythonhosted.org/packages/5a/ae/3673dde5f056587dd6706118e0ebf67bb901d2b77fe58fd26dc94da9c07f/backstage-0.0.18-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"2c0d4c56679f459781676bfdbaf687435d3c2f485721ac8ba6728ded10b91755","md5":"e064923010c06419d4b74cd2a408510e","sha256":"a74b474ce7a7116b87d4459ddab2ef962682ed0ac13bb2f9f9d144d32f25283c"},"downloads":-1,"filename":"backstage-0.0.18.tar.gz","has_sig":false,"md5_digest":"e064923010c06419d4b74cd2a408510e","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":66375,"upload_time":"2022-09-23T13:16:33","upload_time_iso_8601":"2022-09-23T13:16:33.720053Z","url":"https://files.pythonhosted.org/packages/2c/0d/4c56679f459781676bfdbaf687435d3c2f485721ac8ba6728ded10b91755/backstage-0.0.18.tar.gz","yanked":false,"yanked_reason":null}],"0.0.19":[{"comment_text":"","digests":{"blake2b_256":"1a088ceb35beadc4714a56cd058610b645b4c09d5637e86f6032a72dc03ad537","md5":"aebe675f69f6cc771ba14bd41e5684d8","sha256":"6b2c0257df14b403329fc9026f7f2560febeb0c748e898938cb85541a7270f7d"},"downloads":-1,"filename":"backstage-0.0.19-py3-none-any.whl","has_sig":false,"md5_digest":"aebe675f69f6cc771ba14bd41e5684d8","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":100333,"upload_time":"2022-09-23T13:16:27","upload_time_iso_8601":"2022-09-23T13:16:27.666159Z","url":"https://files.pythonhosted.org/packages/1a/08/8ceb35beadc4714a56cd058610b645b4c09d5637e86f6032a72dc03ad537/backstage-0.0.19-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"dd83c647a339d0e357c17e14ef77b4ee0ccdb4b4731749d2681cd8ef8aaa2744","md5":"268c4bb3648a91feeabe8957c525180b","sha256":"529579dc41f329ce736e686e86bd32b34352a7fbf7f54daca350c18f547b316d"},"downloads":-1,"filename":"backstage-0.0.19.tar.gz","has_sig":false,"md5_digest":"268c4bb3648a91feeabe8957c525180b","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":66345,"upload_time":"2022-09-23T13:16:30","upload_time_iso_8601":"2022-09-23T13:16:30.176936Z","url":"https://files.pythonhosted.org/packages/dd/83/c647a339d0e357c17e14ef77b4ee0ccdb4b4731749d2681cd8ef8aaa2744/backstage-0.0.19.tar.gz","yanked":false,"yanked_reason":null}],"0.0.2":[{"comment_text":"","digests":{"blake2b_256":"46a940fc133bade0e7c8124561732bf4dfe4b5163040b9f0e4a99c01dfe7fe08","md5":"c34a64c801e08d52d1a2e1abcae46211","sha256":"4e529c752a59e051b74e5c0d8225e486fb86d610a0de10200c1628d854678d01"},"downloads":-1,"filename":"backstage-0.0.2-py3-none-any.whl","has_sig":false,"md5_digest":"c34a64c801e08d52d1a2e1abcae46211","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":47024,"upload_time":"2021-09-01T21:26:54","upload_time_iso_8601":"2021-09-01T21:26:54.619027Z","url":"https://files.pythonhosted.org/packages/46/a9/40fc133bade0e7c8124561732bf4dfe4b5163040b9f0e4a99c01dfe7fe08/backstage-0.0.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c120974904e18947dd15d2c0282247482274fe351eeb48b0d92ae5e30d2cf426","md5":"c1fc978d446dc7d183516cf5eb5f9321","sha256":"e0226c297ac4068f6746ae28eacef965ff980450ff764660b5538fec6674201c"},"downloads":-1,"filename":"backstage-0.0.2.tar.gz","has_sig":false,"md5_digest":"c1fc978d446dc7d183516cf5eb5f9321","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":33782,"upload_time":"2021-09-01T21:26:56","upload_time_iso_8601":"2021-09-01T21:26:56.634635Z","url":"https://files.pythonhosted.org/packages/c1/20/974904e18947dd15d2c0282247482274fe351eeb48b0d92ae5e30d2cf426/backstage-0.0.2.tar.gz","yanked":false,"yanked_reason":null}],"0.0.20":[{"comment_text":"","digests":{"blake2b_256":"3df3fc742a49e3f0f95c19710a539517d110b67a341765c102eaf33b4238d74b","md5":"a7942143092c6d064baa65e77801c71e","sha256":"924aaccab152f8a181cdbf4509ab855d030d87703f4f5faac0eeb8277ed7f1de"},"downloads":-1,"filename":"backstage-0.0.20-py3-none-any.whl","has_sig":false,"md5_digest":"a7942143092c6d064baa65e77801c71e","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":100383,"upload_time":"2023-02-25T01:36:31","upload_time_iso_8601":"2023-02-25T01:36:31.453836Z","url":"https://files.pythonhosted.org/packages/3d/f3/fc742a49e3f0f95c19710a539517d110b67a341765c102eaf33b4238d74b/backstage-0.0.20-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"511fc803fd612a6a556fb366019593eaa47f2e23ec29829568b1ae563de1ea51","md5":"584e436554cc45d953676528ffc7e0f2","sha256":"cedce3c8fe513b8fa1c9a8bf92d68583971ab8c0ef18f8adf283e0f31cc75e29"},"downloads":-1,"filename":"backstage-0.0.20.tar.gz","has_sig":false,"md5_digest":"584e436554cc45d953676528ffc7e0f2","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":66558,"upload_time":"2023-02-25T01:36:34","upload_time_iso_8601":"2023-02-25T01:36:34.765217Z","url":"https://files.pythonhosted.org/packages/51/1f/c803fd612a6a556fb366019593eaa47f2e23ec29829568b1ae563de1ea51/backstage-0.0.20.tar.gz","yanked":false,"yanked_reason":null}],"0.0.21":[{"comment_text":"","digests":{"blake2b_256":"ce15e0ad0330cc40c49333e5e15d4e5613b3afcf8dc217e296f3ca3587f532ae","md5":"81b5cf2f54dd52eacf29d4acc14bf287","sha256":"7b699a994d8efcb186d0d74fe4b41e380c79b5533f9b24ff22fa7ef3754a9c0e"},"downloads":-1,"filename":"backstage-0.0.21-py3-none-any.whl","has_sig":false,"md5_digest":"81b5cf2f54dd52eacf29d4acc14bf287","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":100402,"upload_time":"2023-05-18T16:52:15","upload_time_iso_8601":"2023-05-18T16:52:15.353268Z","url":"https://files.pythonhosted.org/packages/ce/15/e0ad0330cc40c49333e5e15d4e5613b3afcf8dc217e296f3ca3587f532ae/backstage-0.0.21-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1752d66d3a90e553cb02d0a9585138743a89a1e30f1ace793ea0337252be2aa5","md5":"25bdc2985a97f602e2e7f58b9dac956a","sha256":"54f433337de9109608022f1cec09374ca16fb814ec2069b3059f64742700d7c9"},"downloads":-1,"filename":"backstage-0.0.21.tar.gz","has_sig":false,"md5_digest":"25bdc2985a97f602e2e7f58b9dac956a","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":66583,"upload_time":"2023-05-18T16:52:18","upload_time_iso_8601":"2023-05-18T16:52:18.114408Z","url":"https://files.pythonhosted.org/packages/17/52/d66d3a90e553cb02d0a9585138743a89a1e30f1ace793ea0337252be2aa5/backstage-0.0.21.tar.gz","yanked":false,"yanked_reason":null}],"0.0.22":[{"comment_text":"","digests":{"blake2b_256":"7a797075eeb86fd652af1b2508e8c5df673497b78de1ee864f0353223b8da2a9","md5":"6e052fb671e123e1408af8b9e2feac9a","sha256":"74611102dd69e9db76e9ad6fb34c28f0133ff6840147f58d4479711133a5bca3"},"downloads":-1,"filename":"backstage-0.0.22-py3-none-any.whl","has_sig":false,"md5_digest":"6e052fb671e123e1408af8b9e2feac9a","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":100508,"upload_time":"2023-06-09T10:10:13","upload_time_iso_8601":"2023-06-09T10:10:13.569931Z","url":"https://files.pythonhosted.org/packages/7a/79/7075eeb86fd652af1b2508e8c5df673497b78de1ee864f0353223b8da2a9/backstage-0.0.22-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d85056b18c657e683aaa9a9a61ee168d4ad0385ba06422fb98f46649ec2ea6cb","md5":"bd6e37743cda11085a8341718c264991","sha256":"1742d946f199cb2ac0bbb8c7fc2f3810570b54cfbb38338812cc9d329ed54e5b"},"downloads":-1,"filename":"backstage-0.0.22.tar.gz","has_sig":false,"md5_digest":"bd6e37743cda11085a8341718c264991","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":66691,"upload_time":"2023-06-09T10:10:16","upload_time_iso_8601":"2023-06-09T10:10:16.525272Z","url":"https://files.pythonhosted.org/packages/d8/50/56b18c657e683aaa9a9a61ee168d4ad0385ba06422fb98f46649ec2ea6cb/backstage-0.0.22.tar.gz","yanked":false,"yanked_reason":null}],"0.0.3":[{"comment_text":"","digests":{"blake2b_256":"80cfaf031f26998e8dc587c5401c0dcd0a85af7b5f1e4be2f7683b1b52341780","md5":"7f88d818f7b02d55a7174241b09ad4cd","sha256":"79cba33664b75e7c5c3e203ac375aecdd5f91c3816fa9ed54a85c29ea0f2b67e"},"downloads":-1,"filename":"backstage-0.0.3-py3-none-any.whl","has_sig":false,"md5_digest":"7f88d818f7b02d55a7174241b09ad4cd","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":47444,"upload_time":"2021-09-29T19:35:34","upload_time_iso_8601":"2021-09-29T19:35:34.226153Z","url":"https://files.pythonhosted.org/packages/80/cf/af031f26998e8dc587c5401c0dcd0a85af7b5f1e4be2f7683b1b52341780/backstage-0.0.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"91b714a1112ad9d7c04deb79ebca23b919f8995877d6eedc5d88a92c0744ec68","md5":"1afdf6f1d82744ea5bca307df785d5e9","sha256":"4c71d392be2ff35e4dbdd678ee2f438e61283b3ef885f4306fee9c90acfb9c17"},"downloads":-1,"filename":"backstage-0.0.3.tar.gz","has_sig":false,"md5_digest":"1afdf6f1d82744ea5bca307df785d5e9","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":33721,"upload_time":"2021-09-29T19:35:36","upload_time_iso_8601":"2021-09-29T19:35:36.252895Z","url":"https://files.pythonhosted.org/packages/91/b7/14a1112ad9d7c04deb79ebca23b919f8995877d6eedc5d88a92c0744ec68/backstage-0.0.3.tar.gz","yanked":false,"yanked_reason":null}],"0.0.4":[{"comment_text":"","digests":{"blake2b_256":"3ade6a7b8fd96f44e61258ee2a738e1bb3ba3e96a7229b6dd18e6b4fb714c0dd","md5":"e8b62da370c515257ce975787977a94d","sha256":"724f086b7b0ac473d42f7cd516c1bad4f0a9ca3f411272c921d1e09a8959a147"},"downloads":-1,"filename":"backstage-0.0.4-py3-none-any.whl","has_sig":false,"md5_digest":"e8b62da370c515257ce975787977a94d","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":55377,"upload_time":"2021-11-16T18:32:40","upload_time_iso_8601":"2021-11-16T18:32:40.422978Z","url":"https://files.pythonhosted.org/packages/3a/de/6a7b8fd96f44e61258ee2a738e1bb3ba3e96a7229b6dd18e6b4fb714c0dd/backstage-0.0.4-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"0d26499ce1bbe5197ad6d77b72cc381738b30ebf44316483c10522bd45113983","md5":"3532c17ed2c698dd5af4d1e0e13bc21b","sha256":"829c3ea3a0e646cba29ed16bc550a5d3215322987a9ee2502ca52f21f12c8494"},"downloads":-1,"filename":"backstage-0.0.4.tar.gz","has_sig":false,"md5_digest":"3532c17ed2c698dd5af4d1e0e13bc21b","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":24809,"upload_time":"2021-11-16T18:32:42","upload_time_iso_8601":"2021-11-16T18:32:42.162800Z","url":"https://files.pythonhosted.org/packages/0d/26/499ce1bbe5197ad6d77b72cc381738b30ebf44316483c10522bd45113983/backstage-0.0.4.tar.gz","yanked":false,"yanked_reason":null}],"0.0.5":[{"comment_text":"","digests":{"blake2b_256":"60f75eff8e40b7a050ad73ad9d14ea31628cab1876b9b92118f841205e090069","md5":"0ae0bcd4d7860aea1df3ec25c10a7f76","sha256":"555831fd839a03515c99d380e06c3e21b62e34a028cbd2712892e637dc05cf67"},"downloads":-1,"filename":"backstage-0.0.5-py3-none-any.whl","has_sig":false,"md5_digest":"0ae0bcd4d7860aea1df3ec25c10a7f76","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":55528,"upload_time":"2021-11-16T19:58:27","upload_time_iso_8601":"2021-11-16T19:58:27.262002Z","url":"https://files.pythonhosted.org/packages/60/f7/5eff8e40b7a050ad73ad9d14ea31628cab1876b9b92118f841205e090069/backstage-0.0.5-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"da21f1e3cf90d27af93f82fc673db241f91548fb2c3b4435755ea8c82e8f04d0","md5":"9c1f6a93a3097fa636ac6c1d9e345389","sha256":"06b4d1916aa5ba71c6e56dc768cc794fe9ee8a7ea934ea47d35a81c67eb2dd39"},"downloads":-1,"filename":"backstage-0.0.5.tar.gz","has_sig":false,"md5_digest":"9c1f6a93a3097fa636ac6c1d9e345389","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":24874,"upload_time":"2021-11-16T19:58:29","upload_time_iso_8601":"2021-11-16T19:58:29.131044Z","url":"https://files.pythonhosted.org/packages/da/21/f1e3cf90d27af93f82fc673db241f91548fb2c3b4435755ea8c82e8f04d0/backstage-0.0.5.tar.gz","yanked":false,"yanked_reason":null}],"0.0.6":[{"comment_text":"","digests":{"blake2b_256":"38d8b8f3dc59eaf2af3679a0440202af73e23c5f3c65b1cf6014d87efc12826a","md5":"cb6569571afe7c42228690307d4f5dbd","sha256":"0e371f19b2fcdd7fff846ac8354ed131baa43555e573823073945dc84bf18df4"},"downloads":-1,"filename":"backstage-0.0.6-py3-none-any.whl","has_sig":false,"md5_digest":"cb6569571afe7c42228690307d4f5dbd","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":64297,"upload_time":"2022-01-18T21:42:30","upload_time_iso_8601":"2022-01-18T21:42:30.490638Z","url":"https://files.pythonhosted.org/packages/38/d8/b8f3dc59eaf2af3679a0440202af73e23c5f3c65b1cf6014d87efc12826a/backstage-0.0.6-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"06aeaa4e407f570405eaf8747d35e46b6d31265a5582912f92b108348e22341a","md5":"0870489fa07447eb193be933e5e236e4","sha256":"40454a69e1ecef0a46bbfe772507bb5577be843cbff6cf9cfe89fea99ba88ee8"},"downloads":-1,"filename":"backstage-0.0.6.tar.gz","has_sig":false,"md5_digest":"0870489fa07447eb193be933e5e236e4","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":19088,"upload_time":"2022-01-18T21:42:32","upload_time_iso_8601":"2022-01-18T21:42:32.202668Z","url":"https://files.pythonhosted.org/packages/06/ae/aa4e407f570405eaf8747d35e46b6d31265a5582912f92b108348e22341a/backstage-0.0.6.tar.gz","yanked":false,"yanked_reason":null}],"0.0.7":[{"comment_text":"","digests":{"blake2b_256":"bb59b6819dbd8211fb0f6f7dfff2386737ac1d890c04bef33154878240dbe39a","md5":"afa7d785c3148eb63a705bd9f43f7e66","sha256":"f8f27790270aacafc0fac89a49e0bea54f64d54a03a56c1eb1423881e32ec13f"},"downloads":-1,"filename":"backstage-0.0.7-py3-none-any.whl","has_sig":false,"md5_digest":"afa7d785c3148eb63a705bd9f43f7e66","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":64342,"upload_time":"2022-01-18T22:41:45","upload_time_iso_8601":"2022-01-18T22:41:45.531412Z","url":"https://files.pythonhosted.org/packages/bb/59/b6819dbd8211fb0f6f7dfff2386737ac1d890c04bef33154878240dbe39a/backstage-0.0.7-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f87c4eab9977caebddb0f529ac2ae93d02731d26f51547ab4101d9580b32aeeb","md5":"e9ca84eba71da230b8521463ccf4512a","sha256":"cfaab0469d6e286d3f2cf0bf2ea76db9726b4e9bbb36b61e675d733939a08582"},"downloads":-1,"filename":"backstage-0.0.7.tar.gz","has_sig":false,"md5_digest":"e9ca84eba71da230b8521463ccf4512a","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":19158,"upload_time":"2022-01-18T22:41:47","upload_time_iso_8601":"2022-01-18T22:41:47.452888Z","url":"https://files.pythonhosted.org/packages/f8/7c/4eab9977caebddb0f529ac2ae93d02731d26f51547ab4101d9580b32aeeb/backstage-0.0.7.tar.gz","yanked":false,"yanked_reason":null}],"0.0.8":[{"comment_text":"","digests":{"blake2b_256":"e0ff384c33cab0e5b500cc8a75dfb4d26fe6f7800034b6764038ecc5c66bb2f1","md5":"2900f3b64bb626df19f9a43e4f5ff612","sha256":"07bbc5d2b0de4b7826b41787a7e4cf63d0ab477e739261f37e7cdae787fd8a32"},"downloads":-1,"filename":"backstage-0.0.8-py3-none-any.whl","has_sig":false,"md5_digest":"2900f3b64bb626df19f9a43e4f5ff612","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":64256,"upload_time":"2022-01-18T22:46:34","upload_time_iso_8601":"2022-01-18T22:46:34.081111Z","url":"https://files.pythonhosted.org/packages/e0/ff/384c33cab0e5b500cc8a75dfb4d26fe6f7800034b6764038ecc5c66bb2f1/backstage-0.0.8-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"465d5892046e23f640e348238c5129326965d499b7c3c8bfbec903f8c3b331e8","md5":"8b8b6601b0e9f88c86129519b6c4805e","sha256":"f95990fd3a41e1eb0c29a4e68471b433012093e4e866a0517f521779c590a8f8"},"downloads":-1,"filename":"backstage-0.0.8.tar.gz","has_sig":false,"md5_digest":"8b8b6601b0e9f88c86129519b6c4805e","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":19106,"upload_time":"2022-01-18T22:46:35","upload_time_iso_8601":"2022-01-18T22:46:35.829260Z","url":"https://files.pythonhosted.org/packages/46/5d/5892046e23f640e348238c5129326965d499b7c3c8bfbec903f8c3b331e8/backstage-0.0.8.tar.gz","yanked":false,"yanked_reason":null}],"0.0.9":[{"comment_text":"","digests":{"blake2b_256":"f238cd1ed0d0b8aacbff6e58f9f0b604e956531683192b28eaacf1dedf985594","md5":"14260670b6e5d9acd0df5b6200a505e7","sha256":"3812dd8deb2473553e0560c20f928bbc648eacbad960a29891f617ac365c58f7"},"downloads":-1,"filename":"backstage-0.0.9-py3-none-any.whl","has_sig":false,"md5_digest":"14260670b6e5d9acd0df5b6200a505e7","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":67056,"upload_time":"2022-03-21T20:24:07","upload_time_iso_8601":"2022-03-21T20:24:07.261925Z","url":"https://files.pythonhosted.org/packages/f2/38/cd1ed0d0b8aacbff6e58f9f0b604e956531683192b28eaacf1dedf985594/backstage-0.0.9-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4e315ab40768abd1c5a1f694502051e93804d144dc3ff089bb6fdfcac8b04c6b","md5":"fa462757d163a4a0611506b7708497ce","sha256":"5ed2d78a2090b8d076e9f1a653977c9b117dd34ab56fceddd9750e346008604d"},"downloads":-1,"filename":"backstage-0.0.9.tar.gz","has_sig":false,"md5_digest":"fa462757d163a4a0611506b7708497ce","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":8357,"upload_time":"2022-03-21T20:24:09","upload_time_iso_8601":"2022-03-21T20:24:09.678352Z","url":"https://files.pythonhosted.org/packages/4e/31/5ab40768abd1c5a1f694502051e93804d144dc3ff089bb6fdfcac8b04c6b/backstage-0.0.9.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"7a797075eeb86fd652af1b2508e8c5df673497b78de1ee864f0353223b8da2a9","md5":"6e052fb671e123e1408af8b9e2feac9a","sha256":"74611102dd69e9db76e9ad6fb34c28f0133ff6840147f58d4479711133a5bca3"},"downloads":-1,"filename":"backstage-0.0.22-py3-none-any.whl","has_sig":false,"md5_digest":"6e052fb671e123e1408af8b9e2feac9a","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.5","size":100508,"upload_time":"2023-06-09T10:10:13","upload_time_iso_8601":"2023-06-09T10:10:13.569931Z","url":"https://files.pythonhosted.org/packages/7a/79/7075eeb86fd652af1b2508e8c5df673497b78de1ee864f0353223b8da2a9/backstage-0.0.22-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d85056b18c657e683aaa9a9a61ee168d4ad0385ba06422fb98f46649ec2ea6cb","md5":"bd6e37743cda11085a8341718c264991","sha256":"1742d946f199cb2ac0bbb8c7fc2f3810570b54cfbb38338812cc9d329ed54e5b"},"downloads":-1,"filename":"backstage-0.0.22.tar.gz","has_sig":false,"md5_digest":"bd6e37743cda11085a8341718c264991","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":66691,"upload_time":"2023-06-09T10:10:16","upload_time_iso_8601":"2023-06-09T10:10:16.525272Z","url":"https://files.pythonhosted.org/packages/d8/50/56b18c657e683aaa9a9a61ee168d4ad0385ba06422fb98f46649ec2ea6cb/backstage-0.0.22.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
