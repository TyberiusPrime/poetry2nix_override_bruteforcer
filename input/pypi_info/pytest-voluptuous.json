{"info":{"author":"F-Secure Corporation","author_email":"opensource@f-secure.com","bugtrack_url":null,"classifiers":["Framework :: Pytest","Intended Audience :: Developers","License :: OSI Approved :: Apache Software License","Operating System :: OS Independent","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3.4","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Software Development :: Libraries","Topic :: Software Development :: Testing"],"description":".. image:: https://img.shields.io/pypi/v/pytest-voluptuous.svg?style=flat\n   :alt: PyPI Package latest release\n   :target: https://pypi.org/pypi/pytest-voluptuous\n\n.. image:: https://img.shields.io/pypi/pyversions/pytest-voluptuous.svg?style=flat\n   :alt: Supported versions\n   :target: https://pypi.org/pypi/pytest-voluptuous\n\n.. image:: https://img.shields.io/pypi/implementation/pytest-voluptuous.svg?style=flat\n   :alt: Supported implementations\n   :target: https://pypi.org/pypi/pytest-voluptuous\n\n.. image:: https://img.shields.io/pypi/l/pytest-voluptuous.svg?style=flat\n   :alt: License\n   :target: https://pypi.org/pypi/pytest-voluptuous\n\n.. image:: https://travis-ci.org/F-Secure/pytest-voluptuous.svg?branch=master\n   :target: https://travis-ci.org/f-secure/pytest-voluptuous\n   :alt: Travis-CI\n\n.. image:: https://coveralls.io/repos/github/F-Secure/pytest-voluptuous/badge.svg?branch=master\n   :target: https://coveralls.io/github/f-secure/pytest-voluptuous?branch=master\n   :alt: Coveralls\n\n=================\npytest-voluptuous\n=================\n\nA `pytest <https://pytest.org>`_ plugin for asserting data against\n`voluptuous <https://github.com/alecthomas/voluptuous>`_ schema.\n\nCommon use case is to validate HTTP API responses (in your functional tests):\n\n.. code-block:: python\n\n    import requests\n    from pytest_voluptuous import S, Partial, Exact\n    from voluptuous.validators import All, Length\n\n    def test_pypi():\n       resp = requests.get('https://pypi.org/pypi/pytest/json')\n       assert S({\n          'info': Partial({\n              'package_url': 'https://pypi.org/project/pytest/',\n              'platform': 'INVALID VALUE',\n              'description': Length(max=10),\n              'downloads': list,\n              'classifiers': dict,\n          }),\n          'releases': dict,\n          'urls': int\n       }) == resp.json()\n\nIf validation fails, comparison returns ``False`` and assert fails, printing error details like::\n\n    E       AssertionError: assert failed due to validation error(s):\n    E         - info.platform: not a valid value for dictionary value (actual: 'unix')\n    E         - info.description: length of value must be at most 10 for dictionary value (actual: \".. image:: https://...\")\n    E         - info.downloads: expected list for dictionary value (actual: {'last_month': -1, 'last_week': -1, 'last_day': -1})\n    E         - info.classifiers: expected dict for dictionary value (actual: [u'Development Status :: 6 - Mature', ...])\n    E         - last_serial: extra keys not allowed (actual: 4422291)\n    E         - urls: expected int (actual: [{u'has_sig': False, u'upload_time': u'2018-10-27T16:31:24', ...}])\n\nInstall\n=======\n\nWorks on python 2.7 and 3.4+::\n\n    pip install pytest-voluptuous\n\nChangelog\n=========\n\nSee `CHANGELOG <https://github.com/F-Secure/pytest-voluptuous/blob/master/CHANGELOG.rst>`_.\n\nFeatures\n========\n\n- Provides **utility schemas** (``S``, ``Exact`` and ``Partial``) to cut down boilerplate.\n- Implement a **pytest hook** to provide error details on ``assert`` failure.\n- Print descriptive validation **failure messages**.\n- ``Equal`` and ``Unordered`` validators (contributed to voluptuous project, available in 0.10+).\n\nWhy?\n====\n\nBecause writing:\n\n>>> r = {'info': {'package_url': 'https://pypi.org/pypi/pytest'}}\n>>> assert 'info' in r\n>>> assert 'package_url' in r['info']\n>>> assert r['info']['package_url'] == 'https://pypi.org/pypi/pytest'\n\n...is just *way* too annoying.\n\nWhy not `JSON schema <http://json-schema.org/>`_? It's **too verbose**, too inconvenient. JSON schema will never\nmatch the convenience of a validation library that can utilize the goodies of the platform.\n\nWhy voluptuous and not some other library? No special reason - but it's pretty easy to use and understand. Also, the\nsyntax is quite compact.\n\nUsage\n=====\n\nIntro\n-----\n\nStart by specifying a schema:\n\n>>> from pytest_voluptuous import S, Partial, Exact\n>>> from voluptuous.validators import All, Length\n>>> schema = S({\n...     'info': Partial({\n...         'package_url': 'https://pypi.org/project/pytest/',\n...         'platform': 'unix',\n...         'description': Length(min=100),\n...         'downloads': dict,\n...         'classifiers': list,\n...     }),\n...     'urls': list\n... })\n\nThen load up the data to validate:\n\n>>> import requests\n>>> data = requests.get('https://pypi.org/pypi/pytest/json').json()\n\nNow if you assert this, the data will be validated against the schema, but instead of raising an error, the comparison\nwill just evaluate to ``False`` which fails the assert:\n\n>>> assert data == schema\nTraceback (most recent call last):\n    ...\nAssertionError\n\nNow getting ``AssertionError`` in case the data doesn't match the schema is not very nice but don't worry - there's\nno pytest magic in play here but once you run through pytest you'll rather get::\n\n    E       AssertionError: assert failed due to validation error(s):\n    E         - info.platform: not a valid value for dictionary value (actual: 'unix')\n    E         - info.description: length of value must be at most 10 for dictionary value (actual: \".. image:: https://docs.pytest.org/en/latest/_static/pytest1.png\\n   :target: https://docs.pytest.org/en/latest/\\n   :align: center\\n   :alt: pytest\\n\\n\\n------\\n\\n.. image:: https://img.shields.io/pypi/v/pytest.svg\\n    :target: https://pypi.org/project/pytest/\\n\\n.. image:: https://img.shields.io/conda/vn/conda-forge/pytest.svg\\n    :target: https://anaconda.org/conda-forge/pytest\\n\\n.. image:: https://img.shields.io/pypi/pyversions/pytest.svg\\n    :target: https://pypi.org/project/pytest/\\n\\n.. image:: https://codecov.io/gh/pytest-dev/pytest/branch/master/graph/badge.svg\\n    :target: https://codecov.io/gh/pytest-dev/pytest\\n    :alt: Code coverage Status\\n\\n.. image:: https://travis-ci.org/pytest-dev/pytest.svg?branch=master\\n    :target: https://travis-ci.org/pytest-dev/pytest\\n\\n.. image:: https://ci.appveyor.com/api/projects/status/mrgbjaua7t33pg6b?svg=true\\n    :target: https://ci.appveyor.com/project/pytestbot/pytest\\n\\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\\n    :target: https://github.com/ambv/black\\n\\n.. image:: https://www.codetriage.com/pytest-dev/pytest/badges/users.svg\\n    :target: https://www.codetriage.com/pytest-dev/pytest\\n\\nThe ``pytest`` framework makes it easy to write small tests, yet\\nscales to support complex functional testing for applications and libraries.\\n\\nAn example of a simple test:\\n\\n.. code-block:: python\\n\\n    # content of test_sample.py\\n    def inc(x):\\n        return x + 1\\n\\n\\n    def test_answer():\\n        assert inc(3) == 5\\n\\n\\nTo execute it::\\n\\n    $ pytest\\n    ============================= test session starts =============================\\n    collected 1 items\\n\\n    test_sample.py F\\n\\n    ================================== FAILURES ===================================\\n    _________________________________ test_answer _________________________________\\n\\n        def test_answer():\\n    >       assert inc(3) == 5\\n    E       assert 4 == 5\\n    E        +  where 4 = inc(3)\\n\\n    test_sample.py:5: AssertionError\\n    ========================== 1 failed in 0.04 seconds ===========================\\n\\n\\nDue to ``pytest``'s detailed assertion introspection, only plain ``assert`` statements are used. See `getting-started <https://docs.pytest.org/en/latest/getting-started.html#our-first-test-run>`_ for more examples.\\n\\n\\nFeatures\\n--------\\n\\n- Detailed info on failing `assert statements <https://docs.pytest.org/en/latest/assert.html>`_ (no need to remember ``self.assert*`` names);\\n\\n- `Auto-discovery\\n  <https://docs.pytest.org/en/latest/goodpractices.html#python-test-discovery>`_\\n  of test modules and functions;\\n\\n- `Modular fixtures <https://docs.pytest.org/en/latest/fixture.html>`_ for\\n  managing small or parametrized long-lived test resources;\\n\\n- Can run `unittest <https://docs.pytest.org/en/latest/unittest.html>`_ (or trial),\\n  `nose <https://docs.pytest.org/en/latest/nose.html>`_ test suites out of the box;\\n\\n- Python 2.7, Python 3.4+, PyPy 2.3, Jython 2.5 (untested);\\n\\n- Rich plugin architecture, with over 315+ `external plugins <http://plugincompat.herokuapp.com>`_ and thriving community;\\n\\n\\nDocumentation\\n-------------\\n\\nFor full documentation, including installation, tutorials and PDF documents, please see https://docs.pytest.org/en/latest/.\\n\\n\\nBugs/Requests\\n-------------\\n\\nPlease use the `GitHub issue tracker <https://github.com/pytest-dev/pytest/issues>`_ to submit bugs or request features.\\n\\n\\nChangelog\\n---------\\n\\nConsult the `Changelog <https://docs.pytest.org/en/latest/changelog.html>`__ page for fixes and enhancements of each version.\\n\\n\\nLicense\\n-------\\n\\nCopyright Holger Krekel and others, 2004-2018.\\n\\nDistributed under the terms of the `MIT`_ license, pytest is free and open source software.\\n\\n.. _`MIT`: https://github.com/pytest-dev/pytest/blob/master/LICENSE\\n\\n\\n\")\n    E         - info.downloads: expected list for dictionary value (actual: {'last_month': -1, 'last_week': -1, 'last_day': -1})\n    E         - info.classifiers: expected dict for dictionary value (actual: [u'Development Status :: 6 - Mature', u'Intended Audience :: Developers', u'License :: OSI Approved :: MIT License', u'Operating System :: MacOS :: MacOS X', u'Operating System :: Microsoft :: Windows', u'Operating System :: POSIX', u'Programming Language :: Python :: 2', u'Programming Language :: Python :: 2.7', u'Programming Language :: Python :: 3', u'Programming Language :: Python :: 3.4', u'Programming Language :: Python :: 3.5', u'Programming Language :: Python :: 3.6', u'Programming Language :: Python :: 3.7', u'Topic :: Software Development :: Libraries', u'Topic :: Software Development :: Testing', u'Topic :: Utilities'])\n    E         - last_serial: extra keys not allowed (actual: 4422291)\n    E         - urls: expected int (actual: [{u'has_sig': False, u'upload_time': u'2018-10-27T16:31:24', u'comment_text': u'', u'python_version': u'py2.py3', u'url': u'https://files.pythonhosted.org/packages/02/75/d041ed00994fbac4c5183e6f4bf6c906506bef8da7a57ef3fc825f171020/pytest-3.9.3-py2.py3-none-any.whl', u'md5_digest': u'150289b7b6658b62b3eddb96c4474e9d', u'downloads': -1, u'requires_python': u'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*', u'filename': u'pytest-3.9.3-py2.py3-none-any.whl', u'packagetype': u'bdist_wheel', u'digests': {u'sha256': u'bf47e8ed20d03764f963f0070ff1c8fda6e2671fc5dd562a4d3b7148ad60f5ca', u'md5': u'150289b7b6658b62b3eddb96c4474e9d'}, u'size': 214163}, {u'has_sig': False, u'upload_time': u'2018-10-27T16:31:26', u'comment_text': u'', u'python_version': u'source', u'url': u'https://files.pythonhosted.org/packages/28/09/f73d49a5b0b714e2d4712f044686cb8fa954aac15f4b7ea557049210179f/pytest-3.9.3.tar.gz', u'md5_digest': u'32ca214ba15bbd8680d9d807a371c385', u'downloads': -1, u'requires_python': u'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*', u'filename': u'pytest-3.9.3.tar.gz', u'packagetype': u'sdist', u'digests': {u'sha256': u'a9e5e8d7ab9d5b0747f37740276eb362e6a76275d76cebbb52c6049d93b475db', u'md5': u'32ca214ba15bbd8680d9d807a371c385'}, u'size': 882503}])\n\nDetails\n-------\n\nUse ``==`` operator to do exact validation:\n\n>>> data = {'foo': 1, 'bar': True}\n>>> S({'foo': 1, 'bar': True}) == data\nTrue\n\nWe omit ``assert`` in these examples (for easier doctesting).\n\nUse ``<=`` to do *partial* validation (to allow extra keys, that is):\n\n>>> S({'foo': 1}) == data  # not valid\nFalse\n>>> S({'foo': 1}) <= data  # valid\nTrue\n\nThe operator you choose gets inherited, so with test data of:\n\n>>> data = {\n...     'outer1': {\n...         'inner1': 1,\n...         'inner2': True\n...     },\n...     'outer2': 'foo'\n... }\n\nWith ``==`` you must provide exact value *also in nested context*:\n\n>>> S({\n...     'outer1': {\n...         'inner1': 1,  # this would be valid but...\n...         # missing 'inner2'\n...     },\n...     'outer2': 'foo'\n... }) == data\nFalse\n>>> S({\n...     'outer1': {\n...         'inner1': int,  # exact/partial matching\n...         'inner2': bool  # is for keys only\n...     },\n...     'outer2': 'foo'\n... }) == data\nTrue\n\n``<=`` implies partial matching:\n\n>>> S({\n...     'outer1': {\n...         'inner1': int,\n...         # 'inner2' missing but that's ok\n...     },\n...     # 'outer2' is missing too\n... }) <= data\nTrue\n\nWhen you need to mix and match operators, you can loosen matching with ``Partial``:\n\n>>> S({\n...     'outer1': Partial({\n...         'inner1': int\n...         # 'inner2' ok to omit as scope is partial\n...     }),\n...     'outer2': 'foo'  # can't be missing as outer scope is exact\n... }) == data\nTrue\n\nAnd stricten with ``Exact``:\n\n>>> S({\n...     'outer1': Exact({\n...         'inner1': int,\n...         'inner2': bool\n...     }),\n...     # 'outer2' can be missing as outer scope is partial\n... }) <= data\nTrue\n\nRemember, matching mode is inherited, so you may end up doing stuff like this:\n\n>>> data['outer1']['inner1'] = {'prop': 1}\n>>> S({\n...     'outer1': Partial({\n...         'inner1': Exact({\n...             'prop': 1\n...         })\n...     }),\n...     'outer2': 'foo'\n... }) == data\nTrue\n\nThere is no ``>=``. If you want to declare *schema keys that may be missing*, use ``Optional``:\n\n>>> from voluptuous.schema_builder import Optional\n>>> S({Optional('foo'): str}) == {'extra': 1}\nFalse\n>>> S({'foo': str}) == {}\nFalse\n>>> S({'foo': str}) <= {}\nFalse\n>>> S({Optional('foo'): str}) == {}\nTrue\n>>> S({Optional('foo'): str}) <= {'extra': 1}\nTrue\n\nOr, if you want to make all keys optional, override ``required``:\n\n>>> from voluptuous.schema_builder import Required\n>>> S({'foo': str}, required=False) == {}\nTrue\n\nIn these cases, if you want to *require* a key:\n\n>>> S({'foo': str, Required('bar'): 1}, required=False) == {}\nFalse\n>>> S({'foo': str, Required('bar'): 1}, required=False) == {'bar': 1}\nTrue\n\nThat's it. For available validators, look into `voluptuous docs <https://github.com/alecthomas/voluptuous>`_.\n\nGotchas\n=======\n\n**Voluptuous 0.9.3 and earlier:**\n\nIn voluptuous pre-0.10.2 ``[]`` matches *any* list, not an empty list. To declare an empty list, use ``Equal([])``.\n\nSimilarly, in voluptuous pre-0.10.2, ``{}`` doesn't *always* match an empty dict. If you're inside a\n``Schema({...}, extra=PREVENT_EXTRA)`` (or ``Exact``), ``{}`` does indeed match exactly ``{}``. However, inside\n``Schema({...}, extra=ALLOW_EXTRA) (or ``Partial``), it matches *any* dict (because any extra keys are allowed).\nTo declare an empty dict, use ``Equal({})``.\n\n**Voluptuous 0.10.0+:**\n\nIn voluptuous 0.10.0+ ``{}`` and ``[]`` evaluate as *empty* dict and *empty* list, so you don't need above workarounds.\n\nAlways use ``dict`` and ``list`` to validate dict or list of any size. It works despite voluptuous version.\n\n**Any version:**\n\n``[str, int]`` matches any list that contains both strings and ints (in any order and 1-n times). To validate\na list of fixed length with those types in it, use ``ExactSequence([str, int])`` and ``Unordered([str, int])``\nwhen the order has no meaning. You can also use values inside these as in ``ExactSequence([2, 3])``.\n\nLicense\n=======\n\nApache 2.0 licensed. See `LICENSE <https://github.com/F-Secure/pytest-voluptuous/blob/master/LICENSE.rst>`_ for\nmore details.\n\nChangelog\n=========\n\n1.2.0 (2020-06-09)\n------------------\n\n**New**:\n\n- `#7 <https://github.com/F-Secure/pytest-voluptuous/pull/7>`_:\n  Officially support python 3.7 and 3.8. Add ``python_requires`` identifier to package.\n\n**Fix**:\n\n- `#6 <https://github.com/F-Secure/pytest-voluptuous/pull/6>`_:\n  Improve the slightly confusing assertion error message.\n  Thanks `@bjoluc <https://github.com/bjoluc>`_!\n\n1.1.0 (2018-10-31)\n------------------\n\n**New**:\n\n- `#3 <https://github.com/F-Secure/pytest-voluptuous/issues/3>`_:\n  Include actual value in error messages for easier debugging (and remove duplication of error path in error message).\n  Thanks `@Turbo87 <https://github.com/Turbo87>`_!\n\n**Fix**:\n\n- `Commit <https://github.com/F-Secure/pytest-voluptuous/pull/4/commits/885dc5bf0ec30ff345738312e842b6bb79a5bd86>`_:\n  Skip path prefix in error output, if path is empty (when error is on \"main level\").\n  Thanks `@Turbo87 <https://github.com/Turbo87>`_!\n\n1.0.2 (2018-02-16)\n------------------\n\n**Fix**:\n\n- `#1 <https://github.com/F-Secure/pytest-voluptuous/issues/1>`_:\n  Error reporting failed on lists.\n  Thanks `@rytilahti <https://github.com/rytilahti>`_!\n\n1.0.1 (2017-01-10)\n------------------\n\nFirst public version.\n\n1.0.0 (2016-12-07)\n------------------\n\nFirst version.\n\n\n","description_content_type":"text/x-rst","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/f-secure/pytest-voluptuous","keywords":"","license":"ASL 2.0","maintainer":"","maintainer_email":"","name":"pytest-voluptuous","package_url":"https://pypi.org/project/pytest-voluptuous/","platform":"","project_url":"https://pypi.org/project/pytest-voluptuous/","project_urls":{"Homepage":"https://github.com/f-secure/pytest-voluptuous"},"provides_extra":null,"release_url":"https://pypi.org/project/pytest-voluptuous/1.2.0/","requires_dist":["pytest","voluptuous (>=0.9.0)"],"requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*","summary":"Pytest plugin for asserting data against voluptuous schema.","version":"1.2.0","yanked":false,"yanked_reason":null},"last_serial":7431708,"releases":{"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"eac5a495b9f0ef720e58bd45bafe27c8e53c63ee9a954c753c32c1cdfa01942f","md5":"e7b6b903778af242b8408f8e5abf6682","sha256":"97563c4233ba4e8001b67fbf6e7b7ee4039604857a1cff24ad1e3433cb96fb17"},"downloads":-1,"filename":"pytest_voluptuous-1.0.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"e7b6b903778af242b8408f8e5abf6682","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":10896,"upload_time":"2018-01-10T22:16:42","upload_time_iso_8601":"2018-01-10T22:16:42.895690Z","url":"https://files.pythonhosted.org/packages/ea/c5/a495b9f0ef720e58bd45bafe27c8e53c63ee9a954c753c32c1cdfa01942f/pytest_voluptuous-1.0.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.0.2":[{"comment_text":"","digests":{"blake2b_256":"4459bce4e24c49e90813790d94cd962fa9aaec6a3201802d28195331a708d872","md5":"8d90597c86dfd64a9b58e9eb11709757","sha256":"e0268c7a0aef6c2687d59f275cdb09ce89cf837bb89c1c4ad8c787f6fcbc2ac6"},"downloads":-1,"filename":"pytest_voluptuous-1.0.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"8d90597c86dfd64a9b58e9eb11709757","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":11195,"upload_time":"2018-02-16T11:04:08","upload_time_iso_8601":"2018-02-16T11:04:08.663011Z","url":"https://files.pythonhosted.org/packages/44/59/bce4e24c49e90813790d94cd962fa9aaec6a3201802d28195331a708d872/pytest_voluptuous-1.0.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.1.0":[{"comment_text":"","digests":{"blake2b_256":"abeb09c72e85a35e80826532493fe155ca256a5a4938a79bfa2f9d95343981ed","md5":"c8239f64d13f12b36420d53ce9274bb5","sha256":"65e6c66f0d28f4ead0fc5903cca9892328df4fe73a45751fd1089498e36cd9d7"},"downloads":-1,"filename":"pytest_voluptuous-1.1.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"c8239f64d13f12b36420d53ce9274bb5","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":7940,"upload_time":"2018-10-31T14:09:29","upload_time_iso_8601":"2018-10-31T14:09:29.908587Z","url":"https://files.pythonhosted.org/packages/ab/eb/09c72e85a35e80826532493fe155ca256a5a4938a79bfa2f9d95343981ed/pytest_voluptuous-1.1.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.2.0":[{"comment_text":"","digests":{"blake2b_256":"9be107b3169ccc9a77b210a1fc0733af937dcfc423a8c1cd808c6a34fc3b8258","md5":"00bd0bcc0da6f996be795d23e0481d45","sha256":"a3856e9812b219fec1c3f2fd8249c0bac6927e1d5e52a3961e4ae903f54d494f"},"downloads":-1,"filename":"pytest_voluptuous-1.2.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"00bd0bcc0da6f996be795d23e0481d45","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*","size":10032,"upload_time":"2020-06-09T14:11:48","upload_time_iso_8601":"2020-06-09T14:11:48.154208Z","url":"https://files.pythonhosted.org/packages/9b/e1/07b3169ccc9a77b210a1fc0733af937dcfc423a8c1cd808c6a34fc3b8258/pytest_voluptuous-1.2.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"9be107b3169ccc9a77b210a1fc0733af937dcfc423a8c1cd808c6a34fc3b8258","md5":"00bd0bcc0da6f996be795d23e0481d45","sha256":"a3856e9812b219fec1c3f2fd8249c0bac6927e1d5e52a3961e4ae903f54d494f"},"downloads":-1,"filename":"pytest_voluptuous-1.2.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"00bd0bcc0da6f996be795d23e0481d45","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*","size":10032,"upload_time":"2020-06-09T14:11:48","upload_time_iso_8601":"2020-06-09T14:11:48.154208Z","url":"https://files.pythonhosted.org/packages/9b/e1/07b3169ccc9a77b210a1fc0733af937dcfc423a8c1cd808c6a34fc3b8258/pytest_voluptuous-1.2.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
