{"info":{"author":"Microsoft Corporation","author_email":"azpysdkhelp@microsoft.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","License :: OSI Approved :: MIT License","Programming Language :: Python","Programming Language :: Python :: 3 :: Only","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],"description":"# Azure Schema Registry Avro Encoder client library for Python\n\nAzure Schema Registry is a schema repository service hosted by Azure Event Hubs, providing schema storage, versioning,\nand management. This package provides an Avro encoder capable of encoding and decoding payloads containing\nSchema Registry schema identifiers and Avro-encoded content.\n\n[Source code][source_code] | [Package (PyPi)][pypi] | [API reference documentation][api_reference] | [Samples][sr_avro_samples] | [Changelog][change_log]\n\n## _Disclaimer_\n\n_Azure SDK Python packages support for Python 2.7 has ended 01 January 2022. For more information and questions, please refer to https://github.com/Azure/azure-sdk-for-python/issues/20691_\n\n## Getting started\n\n### Install the package\n\nInstall the Azure Schema Registry Avro Encoder client library for Python with [pip][pip]:\n\n```Bash\npip install azure-schemaregistry-avroencoder\n```\n\n### Prerequisites:\nTo use this package, you must have:\n* Azure subscription - [Create a free account][azure_sub]\n* [Azure Schema Registry][schemaregistry_service] - [Here is the quickstart guide][quickstart_guide] to create a Schema Registry group using the Azure portal.\n* Python 3.6 or later - [Install Python][python]\n\n### Authenticate the client\nInteraction with the Schema Registry Avro Encoder starts with an instance of AvroEncoder class, which takes the schema group name and the [Schema Registry Client][schemaregistry_client] class. The client constructor takes the Event Hubs fully qualified namespace and and Azure Active Directory credential:\n\n* The fully qualified namespace of the Schema Registry instance should follow the format: `<yournamespace>.servicebus.windows.net`.\n\n* An AAD credential that implements the [TokenCredential][token_credential_interface] protocol should be passed to the constructor. There are implementations of the `TokenCredential` protocol available in the\n[azure-identity package][pypi_azure_identity]. To use the credential types provided by `azure-identity`, please install the Azure Identity client library for Python with [pip][pip]:\n\n```Bash\npip install azure-identity\n```\n\n* Additionally, to use the async API, you must first install an async transport, such as [aiohttp](https://pypi.org/project/aiohttp/):\n\n```Bash\npip install aiohttp\n```\n\n**Create AvroEncoder using the azure-schemaregistry library:**\n\n```python\nimport os\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.avroencoder import AvroEncoder\nfrom azure.identity import DefaultAzureCredential\n\ncredential = DefaultAzureCredential()\n# Namespace should be similar to: '<your-eventhub-namespace>.servicebus.windows.net'\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, credential)\nencoder = AvroEncoder(client=schema_registry_client, group_name=group_name)\n```\n\n## Key concepts\n\n### AvroEncoder\n\nProvides API to encode to and decode from Avro Binary Encoding plus a\ncontent type with schema ID. Uses [SchemaRegistryClient][schemaregistry_client] to get schema IDs from schema content or vice versa.\n\n### Supported message models\n\nSupport has been added to certain Azure Messaging SDK model classes for interoperability with the `AvroEncoder`. These models are subtypes of the `MessageType` protocol defined under the `azure.schemaregistry.encoder.avroencoder` namespace. Currently, the supported model classes are:\n\n- `azure.eventhub.EventData` for `azure-eventhub>=5.9.0`\n\n### Message format\n\nIf a message type that follows the MessageType protocol is provided to the encoder for encoding, it will set the corresponding content and content type properties, where:\n\n- `content`: Avro payload (in general, format-specific payload)\n  - Avro Binary Encoding\n  - NOT Avro Object Container File, which includes the schema and defeats the\n    purpose of this encoder to move the schema out of the message payload and\n    into the schema registry.\n\n- `content type`: a string of the format `avro/binary+<schema ID>`, where:\n  - `avro/binary` is the format indicator\n  - `<schema ID>` is the hexadecimal representation of GUID, same format and byte order as the string from the Schema Registry service.\n\nIf `EventData` is passed in as the message type, the following properties will be set on the `EventData` object:\n - The `body` property will be set to the content value.\n - The `content_type` property will be set to the content type value.\n\nIf message type is not provided, and by default, the encoder will create the following dict:\n`{\"content\": <Avro encoded payload>, \"content_type\": 'avro/binary+<schema ID>' }`\n\n## Examples\n\nThe following sections provide several code snippets covering some of the most common Schema Registry tasks, including:\n\n- [Encoding](#encoding)\n- [Decoding](#decoding)\n- [Event Hubs Sending Integration](#event-hubs-sending-integration)\n- [Event Hubs Receiving Integration](#event-hubs-receiving-integration)\n\n### Encoding\n\nUse the `AvroEncoder.encode` method to encode content with the given Avro schema.\nThe method will use a schema previously registered to the Schema Registry service and keep the schema cached for future encoding usage. In order to avoid pre-registering the schema to the service and automatically register it with the `encode` method, the keyword argument `auto_register=True` should be passed to the `AvroEncoder` constructor.\n\n```python\nimport os\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.avroencoder import AvroEncoder\nfrom azure.identity import DefaultAzureCredential\nfrom azure.eventhub import EventData\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\nname = \"example.avro.User\"\nformat = \"Avro\"\n\ndefinition = \"\"\"\n{\"namespace\": \"example.avro\",\n \"type\": \"record\",\n \"name\": \"User\",\n \"fields\": [\n     {\"name\": \"name\", \"type\": \"string\"},\n     {\"name\": \"favorite_number\",  \"type\": [\"int\", \"null\"]},\n     {\"name\": \"favorite_color\", \"type\": [\"string\", \"null\"]}\n ]\n}\"\"\"\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\nschema_registry_client.register_schema(group_name, name, definition, format)\nencoder = AvroEncoder(client=schema_registry_client, group_name=group_name)\n\nwith encoder:\n    dict_content = {\"name\": \"Ben\", \"favorite_number\": 7, \"favorite_color\": \"red\"}\n    event_data = encoder.encode(dict_content, schema=definition, message_type=EventData)\n\n    # OR\n\n    message_content_dict = encoder.encode(dict_content, schema=definition)\n    event_data = EventData.from_message_content(message_content_dict[\"content\"], message_content_dict[\"content_type\"])\n```\n\n### Decoding\n\nUse the `AvroEncoder.decode` method to decode the Avro-encoded content by either:\n - Passing in a message object that is a subtype of the MessageType protocol.\n - Passing in a dict with keys `content`(type bytes) and `content_type` (type string).\nThe method automatically retrieves the schema from the Schema Registry Service and keeps the schema cached for future decoding usage.\n\n```python\nimport os\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.avroencoder import AvroEncoder\nfrom azure.identity import DefaultAzureCredential\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = \"<your-group-name>\"\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\nencoder = AvroEncoder(client=schema_registry_client)\n\nwith encoder:\n    # event_data is an EventData object with Avro encoded body\n    dict_content = {\"name\": \"Ben\", \"favorite_number\": 7, \"favorite_color\": \"red\"}\n    event_data = encoder.encode(dict_content, schema=definition, message_type=EventData)\n    decoded_content = encoder.decode(event_data)\n\n    # OR \n\n    encoded_bytes = b'<content_encoded_by_azure_schema_registry_avro_encoder>'\n    content_type = 'avro/binary+<schema_id_of_corresponding_schema>'\n    content_dict = {\"content\": encoded_bytes, \"content_type\": content_type}\n    decoded_content = encoder.decode(content_dict)\n```\n\n### Event Hubs Sending Integration\n\nIntegration with [Event Hubs][eventhubs_repo] to send an `EventData` object with `body` set to Avro-encoded content and corresponding `content_type`.\n\n```python\nimport os\nfrom azure.eventhub import EventHubProducerClient, EventData\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.avroencoder import AvroEncoder\nfrom azure.identity import DefaultAzureCredential\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\neventhub_connection_str = os.environ['EVENT_HUB_CONN_STR']\neventhub_name = os.environ['EVENT_HUB_NAME']\n\ndefinition = \"\"\"\n{\"namespace\": \"example.avro\",\n \"type\": \"record\",\n \"name\": \"User\",\n \"fields\": [\n     {\"name\": \"name\", \"type\": \"string\"},\n     {\"name\": \"favorite_number\",  \"type\": [\"int\", \"null\"]},\n     {\"name\": \"favorite_color\", \"type\": [\"string\", \"null\"]}\n ]\n}\"\"\"\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\navro_encoder = AvroEncoder(client=schema_registry_client, group_name=group_name, auto_register=True)\n\neventhub_producer = EventHubProducerClient.from_connection_string(\n    conn_str=eventhub_connection_str,\n    eventhub_name=eventhub_name\n)\n\nwith eventhub_producer, avro_encoder:\n    event_data_batch = eventhub_producer.create_batch()\n    dict_content = {\"name\": \"Bob\", \"favorite_number\": 7, \"favorite_color\": \"red\"}\n    event_data = avro_encoder.encode(dict_content, schema=definition, message_type=EventData)\n    event_data_batch.add(event_data)\n    eventhub_producer.send_batch(event_data_batch)\n```\n\n### Event Hubs Receiving Integration\n\nIntegration with [Event Hubs][eventhubs_repo] to receive an `EventData` object and decode the the Avro-encoded `body` value.\n\n```python\nimport os\nfrom azure.eventhub import EventHubConsumerClient\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.avroencoder import AvroEncoder\nfrom azure.identity import DefaultAzureCredential\n\ntoken_credential = DefaultAzureCredential()\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\neventhub_connection_str = os.environ['EVENT_HUB_CONN_STR']\neventhub_name = os.environ['EVENT_HUB_NAME']\n\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, token_credential)\navro_encoder = AvroEncoder(client=schema_registry_client, group_name=group_name)\n\neventhub_consumer = EventHubConsumerClient.from_connection_string(\n    conn_str=eventhub_connection_str,\n    consumer_group='$Default',\n    eventhub_name=eventhub_name,\n)\n\ndef on_event(partition_context, event):\n    decoded_content = avro_encoder.decode(event)\n\nwith eventhub_consumer, avro_encoder:\n    eventhub_consumer.receive(on_event=on_event, starting_position=\"-1\")\n```\n\n## Troubleshooting\n\n### General\n\nAzure Schema Registry Avro Encoder raises exceptions defined in [Azure Core][azure_core] if errors are encountered when communicating with the Schema Registry service. Errors related to invalid content/content types and invalid schemas will be raised as `azure.schemaregistry.encoder.avroencoder.InvalidContentError` and `azure.schemaregistry.encoder.avroencoder.InvalidSchemaError`, respectively, where `__cause__` will contain the underlying exception raised by the Apache Avro library.\n\n### Logging\nThis library uses the standard\n[logging][python_logging] library for logging.\nBasic information about HTTP sessions (URLs, headers, etc.) is logged at INFO\nlevel.\n\nDetailed DEBUG level logging, including request/response bodies and unredacted\nheaders, can be enabled on a client with the `logging_enable` argument:\n```python\nimport sys\nimport os\nimport logging\nfrom azure.schemaregistry import SchemaRegistryClient\nfrom azure.schemaregistry.encoder.avroencoder import AvroEncoder\nfrom azure.identity import DefaultAzureCredential\n\n# Create a logger for the SDK\nlogger = logging.getLogger('azure.schemaregistry')\nlogger.setLevel(logging.DEBUG)\n\n# Configure a console output\nhandler = logging.StreamHandler(stream=sys.stdout)\nlogger.addHandler(handler)\n\nfully_qualified_namespace = os.environ['SCHEMAREGISTRY_FULLY_QUALIFIED_NAMESPACE']\ngroup_name = os.environ['SCHEMAREGISTRY_GROUP']\ncredential = DefaultAzureCredential()\nschema_registry_client = SchemaRegistryClient(fully_qualified_namespace, credential, logging_enable=True)\n# This client will log detailed information about its HTTP sessions, at DEBUG level\nencoder = AvroEncoder(client=schema_registry_client, group_name=group_name)\n```\n\nSimilarly, `logging_enable` can enable detailed logging for a single operation,\neven when it isn't enabled for the client:\n```py\nencoder.encode(dict_content, schema=definition, logging_enable=True)\n```\n\n## Next steps\n\n### More sample code\n\nFurther examples demonstrating common Azure Schema Registry Avro Encoder scenarios are in the [samples][sr_avro_samples] directory.\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.microsoft.com.\n\nWhen you submit a pull request, a CLA-bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n<!-- LINKS -->\n[pip]: https://pypi.org/project/pip/\n[pypi]: https://pypi.org/project/azure-schemaregistry-avroencoder/\n[python]: https://www.python.org/downloads/\n[azure_core]: https://github.com/Azure/azure-sdk-for-python/blob/main/sdk/core/azure-core/README.md\n[azure_sub]: https://azure.microsoft.com/free/\n[python_logging]: https://docs.python.org/3/library/logging.html\n[sr_avro_samples]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/samples\n[api_reference]: https://docs.microsoft.com/python/api/overview/azure/schemaregistry-avroencoder-readme\n[source_code]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry-avroencoder\n[change_log]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry-avroencoder/CHANGELOG.md\n[schemaregistry_client]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/schemaregistry/azure-schemaregistry\n[schemaregistry_service]: https://aka.ms/schemaregistry\n[eventhubs_repo]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/eventhub/azure-eventhub\n[token_credential_interface]: https://github.com/Azure/azure-sdk-for-python/tree/main/sdk/core/azure-core/azure/core/credentials.py\n[pypi_azure_identity]: https://pypi.org/project/azure-identity/\n[quickstart_guide]: https://docs.microsoft.com/azure/event-hubs/create-schema-registry\n\n# Release History\n\n## 1.0.0 (2022-05-10)\n\n**Note:** This is the first stable release of our efforts to create a user-friendly Pythonic Avro Encoder library that integrates with the Python client library for Azure Schema Registry.\n\n### Features Added\n\n- `AvroEncoder` sync and async classes provide the functionality to encode and decode content which follows a schema with the RecordSchema format, as defined by the Apache Avro specification. The Apache Avro library is used as the implementation for encoding and decoding.\nThe encoder will automatically register and retrieve schemas from Azure Schema Registry Service. It provides the following methods:\n  - constructor: If `auto_register=True` keyword is passed in, will automatically register schemas passed in to the `encode` method. Otherwise, and by default, will require pre-registering of schemas passed to `encode`. Takes a `group_name` argument that is optional when decoding, but required for encoding.\n  - `encode`: Encodes dict content into bytes according to the given schema and registers schema if needed. Returns either a dict of encoded content and corresponding content type or a `MessageType` subtype object, depending on arguments provided.\n  - `decode`: Decodes bytes content into dict content by automatically retrieving schema from the service.\n- `MessageContent` TypedDict has been introduced with the following required keys:\n  - `content`: The bytes content.\n  - `content_type`: The string content type, which holds the schema ID and the record format indicator.\n- `MessageType` has been introduced with the following methods:\n  - `from_message_content`: Class method that creates an object with given bytes content and string content type.\n  - `__message_content__`: Returns a `MessageContent` object with content and content type values set to their respective properties on the object.\n- Schemas and Schema IDs are cached locally, so that multiple calls with the same schema/schema ID will not trigger multiple service calls.\n- The number of hits, misses, and total entries for the schema/schema ID caches will be logged at an info level when a new entry is added.\n- `InvalidContentError` has been introduced for errors related to invalid content and content types, where `__cause__` will contain the underlying exception raised by the Avro library.\n- `InvalidSchemaError` has been introduced for errors related to invalid schemas, where `__cause__` will contain the underlying exception raised by the Apache Avro library.\n- The `encode` and `decode` methods on `AvroEncoder` support the following message models:\n  - `azure.eventhub.EventData` in `azure-eventhub>=5.9.0`\n\n### Other Changes\n\n- This package is meant to replace the azure-schemaregistry-avroserializer package, which will no longer be supported.\n- `group_name` is now an optional parameter in the sync and async `AvroEncoder` constructors.\n\n## 1.0.0b3 (2022-04-05)\n\n### Breaking Changes\n\n- `auto_register_schemas` keyword in the sync and async `AvroEncoder` constructors has been renamed `auto_register`.\n- `SchemaParseError`, `SchemaEncodeError`, and `SchemaDecodeError` have been replaced with `InvalidContentError` and `InvalidSchemaError`. The errors have been added under the `azure.schemaregistry.encoder.avroencoder` namespace.\n- The `exceptions` module in `azure.schemaregistry.encoder.avroencoder` has been removed.\n- The `encode` method on the sync and async `AvroEncoder` only allows subtypes of the `MessageType` protocol as values to the `message_type` optional parameter, rather than any callable that has the method signature `(content: bytes, content_type: str, **kwargs: Any)`.\n- The number of hits/misses, in addition to number of entries, for the schema/schema ID caches will be logged at an info level when a new entry is added.\n\n### Other Changes\n\n- This release and future releases will not have backward compatibility support for decoding data that was encoded with the AvroSerializer.\n- The `encode` and `decode` methods on `AvroEncoder` support the following message models:\n  - `azure.eventhub.EventData` in `azure-eventhub==5.9.0b3`\n\n## 1.0.0b2 (2022-03-09)\n\n### Features Added\n\n- `request_options` has been added to `encode` and `decode` on `AvroEncoder` as an optional parameter to be passed into client requests.\n- The size of the current schema/schema ID caches will be logged at an info level when a new entry has been added.\n\n### Breaking Changes\n\n- `MessageMetadataDict` has been renamed `MessageContent`.\n- `data` in `MessageContent` has been renamed `content`.\n- The `data` parameter in `encode` and `decode` on the sync and async `AvroEncoder` has been renamed `content`.\n- The `from_message_data` method in the `MessageType` protocol has been renamed `from_message_content`. The `data` parameter in `from_message_content` has been renamed `content`.\n- The `__message_data__` method in the `MessageType` protocol has been renamed `__message_content__`.\n\n### Other Changes\n\n- This beta release will be backward compatible for decoding data that was encoded with the AvroSerializer.\n- The `encode` and `decode` methods on `AvroEncoder` support the following message models:\n  - `azure.eventhub.EventData` in `azure-eventhub==5.9.0b2`\n\n## 1.0.0b1 (2022-02-09)\n\nThis version and all future versions will require Python 3.6+. Python 2.7 is no longer supported.\n\n### Features Added\n\n- This package is meant to replace the azure-schemaregistry-avroserializer.\n- APIs have been updated to allow for encoding directly to and decoding from message type objects, where the data value is the Avro encoded payload.\n- The content type of the message will hold the schema ID and record format indicator.\n\n### Other Changes\n\n- This beta release will be backward compatible for decoding data that was encoded with the AvroSerializer.\n- The `encode` and `decode` methods on `AvroEncoder` support the following message models:\n  - `azure.eventhub.EventData` in `azure-eventhub==5.9.0b1`\n\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/Azure/azure-sdk-for-python","keywords":"","license":"MIT License","maintainer":"","maintainer_email":"","name":"azure-schemaregistry-avroencoder","package_url":"https://pypi.org/project/azure-schemaregistry-avroencoder/","platform":null,"project_url":"https://pypi.org/project/azure-schemaregistry-avroencoder/","project_urls":{"Homepage":"https://github.com/Azure/azure-sdk-for-python"},"provides_extra":null,"release_url":"https://pypi.org/project/azure-schemaregistry-avroencoder/1.0.0/","requires_dist":["azure-schemaregistry (<2.0.0,>=1.0.0)","avro (>=1.11.0)","typing-extensions (>=4.0.1)"],"requires_python":">=3.6","summary":"Microsoft Azure Schema Registry Avro Encoder Client Library for Python","version":"1.0.0","yanked":false,"yanked_reason":null},"last_serial":17573712,"releases":{"1.0.0":[{"comment_text":"","digests":{"blake2b_256":"fdf30b656259789dbb0ef8ee74f71ec208f9ef99af9de1a03e26676cf7b30288","md5":"09ce1f1334da253d5c3470140dc77463","sha256":"e8bbf930001240294882b7030afd90b44f0af6f027e9eebca4f475c616d57c5b"},"downloads":-1,"filename":"azure_schemaregistry_avroencoder-1.0.0-py3-none-any.whl","has_sig":false,"md5_digest":"09ce1f1334da253d5c3470140dc77463","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":27867,"upload_time":"2022-05-10T21:38:37","upload_time_iso_8601":"2022-05-10T21:38:37.832814Z","url":"https://files.pythonhosted.org/packages/fd/f3/0b656259789dbb0ef8ee74f71ec208f9ef99af9de1a03e26676cf7b30288/azure_schemaregistry_avroencoder-1.0.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"41c8ce8de6845535463e7e3c900a5bf5f3a66aad9660542deeee4a801165571e","md5":"e3a3ca80eea8b65ac011f452bdeb51d0","sha256":"f928850ffd6106473c4523654ae13897142414a9765aae9302e42a7f018d0ce3"},"downloads":-1,"filename":"azure-schemaregistry-avroencoder-1.0.0.zip","has_sig":false,"md5_digest":"e3a3ca80eea8b65ac011f452bdeb51d0","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":76494,"upload_time":"2022-05-10T21:38:40","upload_time_iso_8601":"2022-05-10T21:38:40.579310Z","url":"https://files.pythonhosted.org/packages/41/c8/ce8de6845535463e7e3c900a5bf5f3a66aad9660542deeee4a801165571e/azure-schemaregistry-avroencoder-1.0.0.zip","yanked":false,"yanked_reason":null}],"1.0.0b1":[{"comment_text":"","digests":{"blake2b_256":"df8188e82ebc640bacf0f756f3af56f4bfa3c7d532f8139b6090df63f0d47b6f","md5":"b382aac9a31e77583219c57edee4f9e8","sha256":"690394e290b0ab4c02d648eaaf6b3b5176bac199d17179ecd17bb04843cfe6ad"},"downloads":-1,"filename":"azure_schemaregistry_avroencoder-1.0.0b1-py3-none-any.whl","has_sig":false,"md5_digest":"b382aac9a31e77583219c57edee4f9e8","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":26543,"upload_time":"2022-02-10T00:49:19","upload_time_iso_8601":"2022-02-10T00:49:19.952911Z","url":"https://files.pythonhosted.org/packages/df/81/88e82ebc640bacf0f756f3af56f4bfa3c7d532f8139b6090df63f0d47b6f/azure_schemaregistry_avroencoder-1.0.0b1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"9e733948e809f51c12275d85648a0447db39b5fdf28a54a3186b27b2d68c9eb1","md5":"a370938746ae44fc9f4cc5fce1cffc4a","sha256":"da316a7e6f1176c9fec19a8810c2fb62d417b5a3ea5bf1814b6b02c2d61d00a1"},"downloads":-1,"filename":"azure-schemaregistry-avroencoder-1.0.0b1.zip","has_sig":false,"md5_digest":"a370938746ae44fc9f4cc5fce1cffc4a","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":67377,"upload_time":"2022-02-10T00:49:22","upload_time_iso_8601":"2022-02-10T00:49:22.762168Z","url":"https://files.pythonhosted.org/packages/9e/73/3948e809f51c12275d85648a0447db39b5fdf28a54a3186b27b2d68c9eb1/azure-schemaregistry-avroencoder-1.0.0b1.zip","yanked":false,"yanked_reason":null}],"1.0.0b2":[{"comment_text":"","digests":{"blake2b_256":"b63794b862babf7da29f78149bdb31f9ef16ea610a49f9a7523120f3b467f9b2","md5":"8a744d2512557d2006b083012591dd12","sha256":"b292dc14cedb15fdfa42de7e88624046b95cd5d8299afcab2f41ecbbb8e5f9de"},"downloads":-1,"filename":"azure_schemaregistry_avroencoder-1.0.0b2-py3-none-any.whl","has_sig":false,"md5_digest":"8a744d2512557d2006b083012591dd12","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":27259,"upload_time":"2022-03-09T21:08:09","upload_time_iso_8601":"2022-03-09T21:08:09.298020Z","url":"https://files.pythonhosted.org/packages/b6/37/94b862babf7da29f78149bdb31f9ef16ea610a49f9a7523120f3b467f9b2/azure_schemaregistry_avroencoder-1.0.0b2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"290c66ff8afd7ce55606e7ac7f2a17e82ba80c183ad84650635317e4cc00626c","md5":"9f5ef11e7549c560d5f8fc6fe732ac47","sha256":"3b633709831a40a17f4c2f5632b8cda099b36b1967d3488d518764e35603508a"},"downloads":-1,"filename":"azure-schemaregistry-avroencoder-1.0.0b2.zip","has_sig":false,"md5_digest":"9f5ef11e7549c560d5f8fc6fe732ac47","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":68762,"upload_time":"2022-03-09T21:08:12","upload_time_iso_8601":"2022-03-09T21:08:12.115363Z","url":"https://files.pythonhosted.org/packages/29/0c/66ff8afd7ce55606e7ac7f2a17e82ba80c183ad84650635317e4cc00626c/azure-schemaregistry-avroencoder-1.0.0b2.zip","yanked":false,"yanked_reason":null}],"1.0.0b3":[{"comment_text":"","digests":{"blake2b_256":"a69a6a6aa5a47d76138e5bdff9f4606e7a1bd13f99b8cd763eb071b4d043c026","md5":"1ea29b877d3202534ca74db50f922e54","sha256":"bc1f1b0792b0dbd1d8b9e91cd8b8590a1239e6c857a8afa357e6b9295fff48aa"},"downloads":-1,"filename":"azure_schemaregistry_avroencoder-1.0.0b3-py3-none-any.whl","has_sig":false,"md5_digest":"1ea29b877d3202534ca74db50f922e54","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":26922,"upload_time":"2022-04-05T23:51:20","upload_time_iso_8601":"2022-04-05T23:51:20.422843Z","url":"https://files.pythonhosted.org/packages/a6/9a/6a6aa5a47d76138e5bdff9f4606e7a1bd13f99b8cd763eb071b4d043c026/azure_schemaregistry_avroencoder-1.0.0b3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4d4b7e2487f4294835a2f34723e7b68256c8993ab0545798b27f929f51673e36","md5":"9505edac327bb3a53d0a1a6857ba08cc","sha256":"d0f199191ecb7747eb11bafb1a9b24e223481bbd4b959f87e71568c9efe0cf36"},"downloads":-1,"filename":"azure-schemaregistry-avroencoder-1.0.0b3.zip","has_sig":false,"md5_digest":"9505edac327bb3a53d0a1a6857ba08cc","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":69844,"upload_time":"2022-04-05T23:51:22","upload_time_iso_8601":"2022-04-05T23:51:22.404504Z","url":"https://files.pythonhosted.org/packages/4d/4b/7e2487f4294835a2f34723e7b68256c8993ab0545798b27f929f51673e36/azure-schemaregistry-avroencoder-1.0.0b3.zip","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"fdf30b656259789dbb0ef8ee74f71ec208f9ef99af9de1a03e26676cf7b30288","md5":"09ce1f1334da253d5c3470140dc77463","sha256":"e8bbf930001240294882b7030afd90b44f0af6f027e9eebca4f475c616d57c5b"},"downloads":-1,"filename":"azure_schemaregistry_avroencoder-1.0.0-py3-none-any.whl","has_sig":false,"md5_digest":"09ce1f1334da253d5c3470140dc77463","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":27867,"upload_time":"2022-05-10T21:38:37","upload_time_iso_8601":"2022-05-10T21:38:37.832814Z","url":"https://files.pythonhosted.org/packages/fd/f3/0b656259789dbb0ef8ee74f71ec208f9ef99af9de1a03e26676cf7b30288/azure_schemaregistry_avroencoder-1.0.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"41c8ce8de6845535463e7e3c900a5bf5f3a66aad9660542deeee4a801165571e","md5":"e3a3ca80eea8b65ac011f452bdeb51d0","sha256":"f928850ffd6106473c4523654ae13897142414a9765aae9302e42a7f018d0ce3"},"downloads":-1,"filename":"azure-schemaregistry-avroencoder-1.0.0.zip","has_sig":false,"md5_digest":"e3a3ca80eea8b65ac011f452bdeb51d0","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":76494,"upload_time":"2022-05-10T21:38:40","upload_time_iso_8601":"2022-05-10T21:38:40.579310Z","url":"https://files.pythonhosted.org/packages/41/c8/ce8de6845535463e7e3c900a5bf5f3a66aad9660542deeee4a801165571e/azure-schemaregistry-avroencoder-1.0.0.zip","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
