{"info":{"author":"Paul Martin","author_email":"greatestloginnameever@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Intended Audience :: Developers","Intended Audience :: Education","License :: OSI Approved :: MIT License","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Topic :: Security :: Cryptography"],"description":"# Pycryptotools, Python library for Crypto coins signatures and transactions\r\n\r\nThis is a fork of Vitalik Buterin's original [pybitcointools](https://github.com/vbuterin/pybitcointools) library.\r\n\r\nAfter a lot of work, the library is finally active again and being actively updated. This took a lot of work and unfortunately some backward imcompatible changes may have been introduced in v2. If you run into issues after upgrading open an issue and will try to help. If it's reasonable to do so we can consider restoring the previous behaviour in v2, otherwise will assist with migration.\r\n\r\nInstallation:\r\n\r\n```bash\r\npip install cryptos\r\n```\r\n\r\nLibrary now supports making and pushing raw transactions for:\r\n\r\n* Bitcoin mainnet\r\n* Bitcoin testnet \r\n* Bitcoin Cash mainnet\r\n* Bitcoin Cash testnet \r\n* Litecoin mainnet\r\n* Litecoin testnet\r\n* Dash mainnet\r\n* Dash testnet\r\n* Dogecoin mainnet\r\n* Dogecoin testnet\r\n\r\nTransaction broadcast has been tested for all of these.\r\n\r\nSegregated Witness transactions also supported for:\r\n* Bitcoin mainnet\r\n* Bitcoin testnet\r\n* Litecoin mainnet\r\n* Litecoin testnet\r\n\r\nHere are the first mainnet segwit transactions made with this library:\r\n\r\nBitcoin: https://blockchain.info/tx/9f3bd4fa14e424abd5623ba98877e33cfee3e7bd6f9f71d7a39e402501458c81\r\n\r\nLitecoin: https://live.blockcypher.com/ltc/tx/b16ad0332ca3114f0dc773fda643c49e41308df4204940539bea5806cfee0989/\r\nhttps://live.blockcypher.com/ltc/tx/3b936180daf05adcd7e9f04b60e1ba9a4a6db486c0ad91cb795b29ca46313000/\r\n\r\nAim is to provide a simple, class-based API which makes switching between different coins and mainnet and testnet, and adding new coins, all very easy.\r\n\r\nRoadmap:\r\n* Change from unittest to pytest\r\n* Extend wallets to make transactions\r\n* Read the docs page\r\n* E-commerce tools (exchange rates, short-time invoices)\r\n* Command client for easy creation, signing and broadcasting of raw transactions\r\n* Multi-crypto wallet CLI\r\n\r\n### Advantages:\r\n\r\n* Methods have a simple interface, inputting and outputting in standard formats\r\n* Classes for different coins with a common sync and async interface\r\n* Many functions can be taken out and used individually\r\n* Supports binary, hex and base58\r\n* Transaction deserialization format almost compatible with BitcoinJS\r\n* Electrum and BIP0032 support\r\n* Make and publish a transaction all in a single command line instruction with full control\r\n* Includes non-bitcoin-specific conversion and JSON utilities\r\n\r\n### Disadvantages:\r\n\r\n* Not a full node, has no idea what blocks are\r\n\r\n### Example usage - the long way (best way to learn :) ):\r\n\r\nWARNING: While it's fun to mess around with this on the testnet, do not do the following procedure on the mainnet unless you really know what you are doing. Any value in the inputs not included in the outputs will be lost.\r\nSo if the total inputs value is 1 BTC, and the total outputs amount to 0.6 BTC, 0.4 BTC will be given to the miners as a fee. The faster way, listed later in the README, ensures the difference between\r\ninputs and outputs is sent as change back to the sender (except for a small minter fee).\r\nIf in doubt, before broadcasting a transaction, visit https://live.blockcypher.com/btc/decodetx/ and decode the raw tx\r\nand make sure it looks right. If you aren't familiar with how Bitcoin transactions work, you should run through\r\n this procedure a few times on the testnet before developing for mainnet.\r\n\r\nOTHER WARNING: If transactions are taking a long time to be confirmed, try increasing the fee from what the \r\nlibrary calculates to use.\r\n\r\n\r\n    > from cryptos import *\r\n    > c = Bitcoin(testnet=True)\r\n    > priv = sha256('a big long brainwallet password')\r\n    > priv\r\n    '89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678'\r\n    > pub = c.privtopub(priv)\r\n    > pub\r\n    '041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f'\r\n    > addr = c.pubtoaddr(pub)\r\n    > addr\r\n    'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'\r\n    > inputs = c.unspent(addr)\r\n    > inputs\r\n    [{'height': 0, 'tx_hash': '6d7a1b133f5ad2ce77d8980a1c84d7b595e4085d5a4a6d347e8a92df6ffc31f5', 'tx_pos': 0, 'value': 7495, 'address': 'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'}, {'height': 0, 'tx_hash': 'e1e7b62e5eb4d399c75649e9256a91f0371268ca265ab9265a433bb263baf2f2', 'tx_pos': 0, 'value': 1866771, 'address': 'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'}]\r\n    > outs = [{'value': 1000000, 'address': 'tb1q95cgql39zvtc57g4vn8ytzmlvtt43skngdq0ue'}, {'value': sum(i['value'] for i in inputs) - 1000000 - 750 , 'address': 'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'}]\r\n    outs\r\n    [{'value': 1000000, 'address': 'tb1q95cgql39zvtc57g4vn8ytzmlvtt43skngdq0ue'}, {'value': 873516, 'address': 'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'}]\r\n    > tx = c.mktx(inputs,outs)\r\n    > tx\r\n    {'locktime': 0, 'version': 1, 'ins': [{'height': 0, 'tx_hash': '6d7a1b133f5ad2ce77d8980a1c84d7b595e4085d5a4a6d347e8a92df6ffc31f5', 'tx_pos': 0, 'value': 7495, 'address': 'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1', 'script': '', 'sequence': 4294967295}, {'height': 0, 'tx_hash': 'e1e7b62e5eb4d399c75649e9256a91f0371268ca265ab9265a433bb263baf2f2', 'tx_pos': 0, 'value': 1866771, 'address': 'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1', 'script': '', 'sequence': 4294967295}], 'outs': [{'value': 1000000, 'script': '00142d30807e2513178a791564ce458b7f62d758c2d3'}, {'value': 873516, 'script': '76a914ad25bdf0fdfd21ca91a82449538dce47f8dc213d88ac'}]}\r\n    > tx2 = c.signall(tx, priv)\r\n    > tx2\r\n    {'locktime': 0, 'version': 1, 'ins': [{'height': 0, 'tx_hash': '6d7a1b133f5ad2ce77d8980a1c84d7b595e4085d5a4a6d347e8a92df6ffc31f5', 'tx_pos': 0, 'value': 7495, 'address': 'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1', 'script': '473044022012ba62de78427811650f868209572404a0846bf60b3a3705799877bb5351827702202bcadc067f5dce01ecf10306e033a905a156aec71d769bcffc0e221a0c91c6030141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f', 'sequence': 4294967295}, {'height': 0, 'tx_hash': 'e1e7b62e5eb4d399c75649e9256a91f0371268ca265ab9265a433bb263baf2f2', 'tx_pos': 0, 'value': 1866771, 'address': 'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1', 'script': '47304402205c9b724d2499f167b9557b8efd13b8b2109ae287b712f2db1d3d46cfc31c71a702201a74bda43116977c4605d499177152afd3965b2fe586f3236053786ef19e96090141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f', 'sequence': 4294967295}], 'outs': [{'value': 1000000, 'script': '00142d30807e2513178a791564ce458b7f62d758c2d3'}, {'value': 873516, 'script': '76a914ad25bdf0fdfd21ca91a82449538dce47f8dc213d88ac'}]}\r\n    > tx3 = serialize(tx2)\r\n    > tx3\r\n    '0100000002f531fc6fdf928a7e346d4a5a5d08e495b5d7841c0a98d877ced25a3f131b7a6d000000008a473044022012ba62de78427811650f868209572404a0846bf60b3a3705799877bb5351827702202bcadc067f5dce01ecf10306e033a905a156aec71d769bcffc0e221a0c91c6030141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764ffffffffff2f2ba63b23b435a26b95a26ca681237f0916a25e94956c799d3b45e2eb6e7e1000000008a47304402205c9b724d2499f167b9557b8efd13b8b2109ae287b712f2db1d3d46cfc31c71a702201a74bda43116977c4605d499177152afd3965b2fe586f3236053786ef19e96090141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764fffffffff0240420f00000000001600142d30807e2513178a791564ce458b7f62d758c2d32c540d00000000001976a914ad25bdf0fdfd21ca91a82449538dce47f8dc213d88ac00000000'\r\n    > c.pushtx(tx3)\r\n    'd5b5b148285da8ddf9d719627c21f5cbbb3e17ae315dbb406301b9ac9c5621e5'\r\n\r\n### Faster way\r\n\r\nTo send 0.00006 BTC from native segwit addr tb1qsp907fjefnpkczkgn62cjk4ehhgv2s805z0dkv belonging to privkey 89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678 \r\nto address tb1q95cgql39zvtc57g4vn8ytzmlvtt43skngdq0ue, with change returned to the sender address:\r\n\r\n    > from cryptos import *\r\n    > c = Bitcoin(testnet=True)\r\n    > c.send(\"89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678\", \"tb1qsp907fjefnpkczkgn62cjk4ehhgv2s805z0dkv\", \"tb1q95cgql39zvtc57g4vn8ytzmlvtt43skngdq0ue\", 5000)\r\n    72caf37e96081374284356aa20cffef31f4c1f158b87f46f7f995bfdaaf5d1c6'\r\n\r\nOr if you prefer to verify the tx (for example, at https://live.blockcypher.com/btc/decodetx/) you can break it into two steps:\r\n\r\n    > from cryptos import *\r\n    > c = Bitcoin(testnet=True)\r\n    > tx = c.preparesignedtx(\"89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678\", \"tb1qsp907fjefnpkczkgn62cjk4ehhgv2s805z0dkv\", \"tb1q95cgql39zvtc57g4vn8ytzmlvtt43skngdq0ue\", 5000)\r\n    > serialize(tx)\r\n    '010000000001014ae7e7fdead71cc8303c5b5e68906ecbf978fb9d84f5f9dd505823356b9a1d6e0000000000ffffffff0288130000000000001600142d30807e2513178a791564ce458b7f62d758c2d3a00f000000000000160014804aff26594cc36c0ac89e95895ab9bdd0c540ef02483045022100cff4e64a4dd0f24c1f382e4b949ae852a89a5f311de50cd13d3801da3669675c0220779ebcb542dc80dae3e16202c0b58dd60261662f3b3a558dca6ddf22e30ca4230121031f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc00000000'\r\n    > c.pushtx(tx)\r\n    '6a7c437b0de10c42f2e9e18cc004e87712dbda73a851a0ea6774749a290c7e7d'\r\n\r\nAnother example with Litecoin testnet and a change address:\r\n\r\n    > from cryptos import *\r\n    > l = Litecoin(testnet=True)\r\n    > tx = l.preparesignedtx(\"89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678\", \"tltc1qsp907fjefnpkczkgn62cjk4ehhgv2s80d2dnx9\", \"tltc1q95cgql39zvtc57g4vn8ytzmlvtt43skn39z3vs\", 967916800, change_addr=\"tltc1qst3pkm860tjt9y70ugnaluqyqnfa7h54q7xv2n\")\r\n    > tx\r\n    '010000000144ea7b41df09cee54c43f817dc11fd4d88c9b721b4c13b588f6a764eab78f692000000008b4830450221008efa819db89f714dbe0a19a7eb605d03259f4755a0f12876e9dddf477e1867b8022072bc76d120e92668f4765b5d694aee4a3cafd6cd4aaa8d5ebf88c3f821c81d9c4141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764fffffffff02003db139000000001976a91409fed3e08e624b23dbbacc77f7b2a39998351a6888acf046df07000000001976a914ad25bdf0fdfd21ca91a82449538dce47f8dc213d88ac00000000'\r\n    > crypto.pushtx(tx)\r\n    {'status': 'success', 'data': {'txid': 'd8b130183824d0001d3bc669b31e798e2654868a7fda743aaf35d757d89db0eb', 'network': 'tbcc'}}\r\n    \r\n    \r\n### 2-of-3 MultiSig Transaction example:\r\n    > from cryptos import *\r\n    > coin = Bitcoin(testnet=True)\r\n    > publickeys = ['02e5c473c051dae31043c335266d0ef89c1daab2f34d885cc7706b267f3269c609', '0391ed6bf1e0842997938ea2706480a7085b8bb253268fd12ea83a68509602b6e0', '0415991434e628402bebcbaa3261864309d2c6fd10c850462b9ef0258832822d35aa26e62e629d2337e3716784ca6c727c73e9600436ded7417d957318dc7a41eb']\r\n    > script, address = coin.mk_multsig_address(publickeys, 2)\r\n    > script\r\n    '522102e5c473c051dae31043c335266d0ef89c1daab2f34d885cc7706b267f3269c609210391ed6bf1e0842997938ea2706480a7085b8bb253268fd12ea83a68509602b6e0410415991434e628402bebcbaa3261864309d2c6fd10c850462b9ef0258832822d35aa26e62e629d2337e3716784ca6c727c73e9600436ded7417d957318dc7a41eb53ae'\r\n    > address\r\n    '2ND6ptW19yaFEmBa5LtEDzjKc2rSsYyUvqA'\r\n    > tx = coin.preparetx(address, \"myLktRdRh3dkK3gnShNj5tZsig6J1oaaJW\", 1100000, 50000)\r\n    > for i in range(0, len(tx['ins'])):\r\n        sig1 = coin.multisign(tx, i, script, \"cUdNKzomacP2631fa5Q4yHv2fADc8Ueymr5Z5NUSJjVM13igcVJk\")\r\n        sig3 = coin.multisign(tx, i, script, \"cMrziExc6iMV8vvAML8QX9hGDP8zNhcsKbdS9BqrRa1b4mhKvK6f\")\r\n        tx = apply_multisignatures(tx, i, script, sig1, sig3)\r\n    > tx\r\n    '0100000001e62c0b5434108607f52856bfbcf5093363fbd4789141a661a4c6c8042769ed2001000000fd1d0100483045022100dfc75916f6bb5c5b72a45dea44dbc45b47ba90912efb84680a373acadb3b1212022022dbbd66e4871624609d875bdb592d11335eb4ec49c7b87bb0b8bc76f72f80f30147304402204c38cab196ec0e82a9f65ecba70a0dbf73f49e5886e1000b9bc52894e28fa5c9022007bff3f90bcece19036625806d4d1951a03c256627163f1ac4e76a6ee8eae072014c89522102e5c473c051dae31043c335266d0ef89c1daab2f34d885cc7706b267f3269c609210391ed6bf1e0842997938ea2706480a7085b8bb253268fd12ea83a68509602b6e0410415991434e628402bebcbaa3261864309d2c6fd10c850462b9ef0258832822d35aa26e62e629d2337e3716784ca6c727c73e9600436ded7417d957318dc7a41eb53aeffffffff02e0c81000000000001976a914c384950342cb6f8df55175b48586838b03130fad88ac301224030000000017a914d9cbe7c2c507c306f4872cf965cbb4fe51b621998700000000'\r\n    > coin.pushtx(tx)\r\n    {'status': 'success', 'data': {'txid': 'b64e19311e3aa197063e03657679e2974e04c02c5b651c4e8d55f428490ab75f', 'network': 'BTCTEST'}}\r\n\r\n\r\n### Asyncio Interface\r\n\r\nThere is also an asyncio interface for all methods requiring interaction with the explorer:\r\n\r\n    python -m asyncio\r\n    > from cryptos import *\r\n    > c = Bitcoin(testnet=True)\r\n    > await c.send(\"89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678\", \"tb1qsp907fjefnpkczkgn62cjk4ehhgv2s805z0dkv\", \"tb1q95cgql39zvtc57g4vn8ytzmlvtt43skngdq0ue\", 5000)\r\n    72caf37e96081374284356aa20cffef31f4c1f158b87f46f7f995bfdaaf5d1c6'\r\n\r\n### Supported coins\r\n\r\n    > from cryptos import *\r\n    > priv = sha256('a big long brainwallet password')\r\n    > b = Bitcoin()\r\n    > b.privtoaddr(priv)\r\n    '1GnX7YYimkWPzkPoHYqbJ4waxG6MN2cdSg'\r\n    > b = Bitcoin(testnet=True)\r\n    > b.privtoaddr(priv)\r\n    'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'\r\n    > l = Litecoin()\r\n    > l.privtoaddr(priv)\r\n    'Lb1UNkrYrQkTFZ5xTgpta61MAUTdUq7iJ1'\r\n    > l = Litecoin(testnet=True)\r\n    > l.privtoaddr(priv)\r\n    'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'\r\n    > c = BitcoinCash()\r\n    > c.privtoaddr(priv)\r\n    '1GnX7YYimkWPzkPoHYqbJ4waxG6MN2cdSg'\r\n    > c = BitcoinCash(testnet=True)\r\n    > c.privtoaddr(priv)\r\n    'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'\r\n    > d = Dash()\r\n    > d.privtoaddr(priv)\r\n    'XrUMwoCcjTiz9gzP9S9p9bdNnbg3MvAB1F'\r\n    > d = Dash(testnet=True)\r\n    > d.privtoaddr(priv)\r\n    'yc6xxkH4B1P4VRuviHUDBd3j4tAQpy4fzn'\r\n    > d = Doge()\r\n    > d.privtoaddr(priv)\r\n    'DLvceoVN5AQgXkaQ28q9qq7BqPpefFRp4E'\r\n\r\n\r\n### BIP39-BIP44 Standard Wallets:\r\n\r\nAims to be compatible with https://iancoleman.io/bip39/. Good choice for supporting different coins and networks from \r\nthe same wallet words. Also compatible with electrum when bip39 option is selected.\r\n    \r\n    > from cryptos import *\r\n    > words = entropy_to_words(os.urandom(16))\r\n    > words\r\n    'practice display use aisle armor salon glue okay sphere rather belt mansion'  \r\n    > keystore.bip39_is_checksum_valid(words)\r\n    (True, True)\r\n    > coin = Bitcoin()\r\n    > wallet = coin.wallet(words)\r\n    > wallet.keystore.root_derivation\r\n    \"m/44'/0'/0'\"\r\n    > wallet.keystore.xprv      #Account Extended Private Key\r\n    'xprv9y1M42LhHxTuoQbCuySz4Ek6EB3guE4CiXDXhHQnR7LwgpUV7AxQVm7D4HpUWRStwUXFepQRz7av2iaAXXYoizT9JoqWE6qffxNdiMxFQtc'\r\n    > wallet.keystore.xpub      # Account Extended Public Key\r\n    'xpub6BzhTXsb8L2D1tfg1zyzRNgpnCtBJgn45k98VfpPySsvZcodeiGf3ZRguZLoS6VwEQ4iZ7Y4bq5A5eqyooyc4jC9beFTB3mmxrGwjRLa3pm'\r\n    > addr1 = wallet.new_receiving_address()\r\n    > addr1\r\n    '18q3EiCiKd5vydnaVwWEpAFyzfL2ftAZ1L'\r\n    > wallet.privkey(addr1)\r\n    'L4cKz3epcM3CAmwkSwJwZ2c4q5ukmSVWCrE9PqE46ybU3XyzfTYx'\r\n    > addr2 = wallet.new_change_address()\r\n    > addr2\r\n    '1BgkpwEDrTbCNduyR97EpW4zvFhEzWsyvi'\r\n    > wallet.privkey(addr2)\r\n    'L5Xmbnsen2cN36WxbuHkAixBmuJ8b3GZPmLtaRPf66p4gfnqHDqi'\r\n    > addr3 = wallet.new_change_address()\r\n    > addr3\r\n    '1KjxFsDP9SXAmKKD4ZgSep5kYaYgAGK3P9'\r\n    > priv3 = wallet.privkey(addr3)\r\n    > priv3\r\n    'L1ktR1kifTXLXoroLZiB3AF9UtKLRW2FmYnnR7VbPZBYkscgRkyn'\r\n    > assert coin.privtoaddr(priv3) == addr3\r\n    True\r\n    \r\nDash example:\r\n\r\n    > from cryptos import *\r\n    > words = 'practice display use aisle armor salon glue okay sphere rather belt mansion'  \r\n    > coin = Dash()\r\n    > wallet = coin.wallet(words)\r\n    > wallet.keystore.root_derivation\r\n    \"m/44'/5'/0'\"\r\n    > wallet.keystore.xprv      #Account Extended Private Key\r\n    'xprv9yiTHjM4MPNQndsxkrvE2QgF36nvutGt3e9k5DjkjfAnNbqGm1wL77XV2xHiwnUfwcgAZUWkdpEnxRWELTrgXDVhvntNFwme1CqCgm1a91f'\r\n    > wallet.keystore.xpub      # Account Extended Public Key\r\n    'xpub6ChohEsxBkvi17xRrtTEPYcyb8dRKLzjQs5Lsc9NHzhmFQARJZFaeuqxtEMHaF4J8MzatWSYrmq2qAc3BaxFiKzEwX1AKQx5uWHZr3y8s82'\r\n    > addr1 = wallet.new_receiving_address()\r\n    > addr1\r\n    'Xea1GEenz6Toq5YQjvjz86MTT8ezT5ZwnY'\r\n    > wallet.privkey(addr1)\r\n    'XDbSZeVzBiHanwrSU5yripFd8Lq5tnrjxgvbaksNPhAExbS29aAa'\r\n    > addr2 = wallet.new_change_address()\r\n    > addr2\r\n    'XwYCR4CwafwoGe6P4H9LndaqAQkmE6xYix'\r\n    > wallet.privkey(addr2)\r\n    'XHwHKxVfhzPEGZGGfQ9uwKK2xQjavF2yNUkq7FGXFA6SyZv4jge1'\r\n    > addr3 = wallet.new_change_address()\r\n    > addr3\r\n    'XfZwJaFiBx4qLqnQydvqGyWDPciAtjFmgn'\r\n    > priv3 = wallet.privkey(addr3)\r\n    > priv3\r\n    'XCNac8eQE642wWKaxnWHLa1GW1Y1uppvT5uda3LYVXAJZAAdR1Fx'\r\n    > assert coin.privtoaddr(priv3) == addr3\r\n    True\r\n    \r\n### BIP39-BIP49 Segwit Wallets:\r\n\r\n    > from cryptos import *\r\n    > words = entropy_to_words(os.urandom(20))\r\n    > words\r\n    'jealous silver churn hedgehog border physical market parent hungry design cage lab drill clay attack' \r\n    > keystore.bip39_is_checksum_valid(words)\r\n    (True, True)\r\n    > coin = Bitcoin()\r\n    > wallet = coin.p2wpkh_p2sh_wallet(words)\r\n    > wallet.keystore.root_derivation\r\n    \"m/49'/0'/0'\"\r\n    > wallet.keystore.xprv      #Account Extended Private Key\r\n    'yprvAHoU8z6164hTNdwpArPgn2bdNExmUu9HwxeyhUok8pLDNQSCzYo8rvD6tFvMKk4EQXF2UGzRea5FBHjrtcuYmuBB7Z6EoznKCPeUwXaZduB'\r\n    > wallet.keystore.xpub      # Account Extended Public Key\r\n    'ypub6WnpYVctvSFkb82HGsvh9AYMvGoFtMs9KBaaVsDMh9sCFCmMY67PQiXajW1FQq7AKsgvWGSrmZ82rquUpwcKR6Ey1sdMdeQWvgCKvABjWy8'\r\n    > addr1 = wallet.new_receiving_address()\r\n    > addr1\r\n    '38yA1L6u6NiADrafrqZKDt1fTRHpGC3E7g'\r\n    > wallet.privkey(addr1)\r\n    'Ky13njnYGrj5jowjUarqcmaRCG37zSwqRJkTj296cQsSvFtsV5a5'\r\n    > addr2 = wallet.new_change_address()\r\n    > addr2\r\n    '3B5f8vVBRTAh2krbd4PiCtpyn7LhFJBDdV'\r\n    > wallet.privkey(addr2)\r\n    'KzCNhiuvwQ1T6hXL21Act86HacauJGe1c8ttECqx1Fai6tPc1bEG'\r\n    > addr3 = wallet.new_change_address()\r\n    > addr3\r\n    '3NvrTctHm6dQc6G2p3XYciWH8H6Lfcz9Jc'\r\n    > wallet.privkey(addr3)\r\n    'KwdZhDopz3UVNW3Qso5UiyGkiDmayRZmAZdfAojvGsoP7da7HueX'\r\n    \r\n### BIP39-BIP84 New Segwit Wallets:\r\n\r\n    > from cryptos import *\r\n    > words = 'jealous silver churn hedgehog border physical market parent hungry design cage lab drill clay attack'\r\n    > coin = Bitcoin()\r\n    > wallet = coin.p2wpkh_wallet(words)\r\n    > wallet.keystore.root_derivation\r\n    \"m/84'/0'/0'\r\n    > wallet.keystore.xprv      #Account Extended Private Key\r\n    'zprvAcSKXVdgJHh5vyEeC6HSVScUCHxrKEWkkFSE2YsLpTborr4y2rHMrmr66yvxkGVqiiwwUCqUVkPB7o5ThnK3Dybi5PEywikXbNKQcHNMYPd'\r\n    > wallet.keystore.xpub      # Account Extended Public Key\r\n    'zpub6qRfw1Aa8fFP9TK7J7pSraZCkKoLihEc7UMppwGxNo8njeQ7aPbcQaAZxFtnjCj9XveSJEnwV88YPyXXUCr3yRSSAKzibVCQB7AudUQn6Qg'\r\n    > addr1 = wallet.new_receiving_address()\r\n    > addr1\r\n    'bc1qkh6wwkyhfceuxq236pc9gtv2agfqnelzh5m94f'\r\n    > wallet.privkey(addr1)\r\n    'Kwnaq7cvD4CAnTcppou6wpUpMFx5yZRqkpZcy6bBvPVKp2FQzJNf'\r\n    > addr2 = wallet.new_change_address()\r\n    > addr2\r\n    'bc1qj3vc5ft8nuka447z7ecujksszq6cm2r8p750n9'\r\n    > wallet.privkey(addr2)\r\n    'L1QjmcLmeR5tbH62WxKoSdZBBHn69PuQSnLo2LaimnztsDANMP5M'\r\n    > addr3 = wallet.new_change_address()\r\n    > addr3\r\n    'bc1qft00enx8c6unn00pmfdgq36ftd0u0q4lk5ajpy'\r\n    > wallet.privkey(addr3)\r\n    'Kx91EteCnRmUPr8eibiEsAcFDyKJ2z9uAwGUQfMVw5ABQx7QyVgg'\r\n\r\n### Electrum wallets\r\nThese aim to be compatible with the default Electrum wallet seed style. They do not have different derivation paths for different coins. \r\nNo checks have been made against any non-Bitcoin Electum wallet (e.g. Electrum Litecoin, Electron Cash)\r\nAt this moment, there is no support generating the seed words Electrum requires (which contains versioning) so seed words need to be copied from Electrum.\r\nElectrum versioning allows for auto-detection of wallet type, .e.g standard or segwit.\r\n\r\n    > from cryptos import *\r\n    > seed_words = 'bitter grass shiver impose acquire brush forget axis eager alone wine silver'\r\n    > wallet = Bitcoin().electrum_wallet(seed_words)\r\n    > wallet.keystore.xtype\r\n    'p2wpkh'\r\n    > wallet.keystore.root_derivation\r\n    \"m/0'/\"\r\n    > wallet.keystore.xprv\r\n    'zprvAZswDvNeJeha8qZ8g7efN3FXYVJLaEUsE9TW6qXDEbVe74AZ75c2sZFZXPNFzxnhChDQ89oC8C5AjWwHmH1HeRKE1c4kKBQAmjUDdKDUZw2'\r\n    > wallet.keystore.xpub\r\n    'zpub6nsHdRuY92FsMKdbn9BfjBCG6X8pyhCibNP6uDvpnw2cyrVhecvHRMa3Ne8kdJZxjxgwnpbHLkcR4bfnhHy6auHPJyDTQ3kianeuVLdkCYQ'\r\n    > addr1 = wallet.new_receiving_address()\r\n    > addr1\r\n    'bc1q3g5tmkmlvxryhh843v4dz026avatc0zzr6h3af'\r\n    > wallet.privkey(addr1)\r\n    'L9fSXYNxYWHJWUqrQ6yhZCAJXq6XsfvcJ1Y2EnMAZfLLRNVQswQj'\r\n    > addr2 = wallet.new_change_address()\r\n    > addr2\r\n    'bc1qdy94n2q5qcp0kg7v9yzwe6wvfkhnvyzje7nx2p'\r\n    > wallet.privkey(addr2)\r\n    'L8rPGyfyzdLLEzxuBeC87Jvpp8FKxwrRtmkZ2PkRmRjqxNF8TVwG'\r\n    > addr3 = wallet.new_change_address()\r\n    > addr3\r\n    'bc1q6xwxcw6m9ga35687tnu5tstmsvmzjwdnzktemv'\r\n    > wallet.privkey(addr3)\r\n    'L7NeR6r9yU2n4zddxTCUpKYmzugYuouyLsCZR9naTqkBW6sjpxDM'\r\n\r\n### Watch wallets\r\n\r\nFor security reasons the seed and xprv should ideally be held in cold storage only. If a web application needs to be \r\nable to provide addresses on demand, the solution is to use a watch wallet, generated from the xpub.\r\n\r\nFor example, let's take the Dash xpub from a previous example:\r\n\r\n    > from cryptos import *\r\n    > coin = Dash()\r\n    > xpub = 'xpub6ChohEsxBkvi17xRrtTEPYcyb8dRKLzjQs5Lsc9NHzhmFQARJZFaeuqxtEMHaF4J8MzatWSYrmq2qAc3BaxFiKzEwX1AKQx5uWHZr3y8s82'\r\n    > wallet = coin.watch_wallet(xpub)\r\n    > wallet.is_watching_only\r\n    True\r\n    > wallet.new_receiving_address()\r\n    'Xea1GEenz6Toq5YQjvjz86MTT8ezT5ZwnY'\r\n    > wallet.new_change_address()\r\n    'XwYCR4CwafwoGe6P4H9LndaqAQkmE6xYix'\r\n\r\nFull list of wallet methods:\r\n\r\n* wallet -> BIP 39 Standard\r\n* watch_wallet -> BIP 39 Standard, watch-only\r\n* p2wpkh_p2sh_wallet -> BIP 39 Segwit P2SH addresses, beginning with 3 for Bitcoin mainnet\r\n* watch_p2wpkh_p2sh_wallet -> BIP 39 Segwit P2SH addresses, watch-only\r\n* p2wpkh_wallet -> BIP 39 New Segwit Addresses, beginning with 'bc' for Bitcoin mainnet\r\n* watch_p2wpkh_wallet -> BIP New Segwit Address, watch-only\r\n* electrum_wallet -> detects p2kh or p2wpkh based on seed\r\n* watch_electrum_wallet -> Watch electrum standard wallet\r\n* watch_electrum_p2wpkh_wallet -> Watch electrum new segwit wallet\r\n\r\n### Old style Electrum words wallet:\r\n    > import os\r\n    > from cryptos import *\r\n    > words = entropy_to_words(os.urandom(16))\r\n    > words\r\n    'float skirt road remind fire antique vendor select senior latin small glide'\r\n    > seed = mnemonic_to_seed(words)\r\n    > seed\r\n    b'\\xb7Z\\x9b\\x9b\\x9c\\x1bq\\x81\\x1b\\xdc\\x98\\x1c\\xbc\\xb8\\xbb\\x130\\xea,\\xda\\x14\\xeb\\x9bF\\xafu\\x88\\xc2\\xf9\\xfc\\x7f\\xd0\\xb0?\\x9d\\xf3\\xa7$0Tx\\xd3\\xb7\\x82\\x87U\\xe7\\xcc\\xdd\\x16\\xddd\\xbf'T\\t_\\xdc R!x\\t'\r\n    > electrum_privkey(seed, 0)\r\n    '5a37812b3057e44636c6e07023e16a8669e12a4365dfabbcb376ed272081d522'\r\n    > electrum_privkey(seed, 300, 0)\r\n    '04cf414f200cd090239f2116d90608a74eae34ae21103ca9eef7bd9579e48bed'\r\n    > electrum_privkey(seed, 0, 1)      #Change address\r\n    '9ca3631f813a6f81b70fbfc4384122bfe6fb159e6f7aea2811fe968c2a39d42a'\r\n\r\n\r\n### Included scripts\r\n\r\nThe following scripts are included. They also provide good sample code for using the library.\r\nRun each script with -h option for details on the cli options.\r\n\r\n            broadcast: Broadcast a transaction from raw hex\r\n            convert_private_key: Convert a private key to a new format\r\n            create_private_key: Generate a new private key\r\n            cryptosend: Send crypto to another address\r\n            explorer: View information in the blockchain about a block, transaction or address\r\n            get_block_sizes: Get the size of a series of blocks\r\n            subscribe: Subscribe to an address for changes\r\n            view_private_key_addresses: View details about a private key including available addresses\r\n\r\n### The cryptotool command line interface:\r\n\r\nCryptool is back to work in progress. This is a legacy reference for now. Use the scripts from the previous section for now.\r\n\r\n\r\n    cryptotool bip32_master_key 21456t243rhgtucyadh3wgyrcubw3grydfbng\r\n    xprv9s21ZrQH143K2napkeoHT48gWmoJa89KCQj4nqLfdGybyWHP9Z8jvCGzuEDv4ihCyoed7RFPNbc9NxoSF7cAvH9AaNSvepUaeqbSpJZ4rbT\r\n\r\n    cryptotool bip32_ckd xprv9s21ZrQH143K2napkeoHT48gWmoJa89KCQj4nqLfdGybyWHP9Z8jvCGzuEDv4ihCyoed7RFPNbc9NxoSF7cAvH9AaNSvepUaeqbSpJZ4rbT 0\r\n    xprv9vfzYrpwo7QHFdtrcvsSCTrBESFPUf1g7NRvayy1QkEfUekpDKLfqvHjgypF5w3nAvnwPjtQUNkyywWNkLbiUS95khfHCzJXFkLEdwRepbw \r\n\r\n    cryptotool bip32_privtopub xprv9s21ZrQH143K2napkeoHT48gWmoJa89KCQj4nqLfdGybyWHP9Z8jvCGzuEDv4ihCyoed7RFPNbc9NxoSF7cAvH9AaNSvepUaeqbSpJZ4rbT\r\n    xpub661MyMwAqRbcFGfHrgLHpC5R4odnyasAZdefbDkHBcWarJcXh6SzTzbUkWuhnP142ZFdKdAJSuTSaiGDYjvm7bCLmA8DZqksYjJbYmcgrYF\r\n\r\nThe -s option lets you read arguments from the command line\r\n\r\n    cryptotool sha256 'some big long brainwallet password' | pybtctool -s privtoaddr | pybtctool -s history\r\n    [{'output': u'97f7c7d8ac85e40c255f8a763b6cd9a68f3a94d2e93e8bfa08f977b92e55465e:0', 'value': 50000, 'address': u'1CQLd3bhw4EzaURHbKCwM5YZbUQfA4ReY6'}, {'output': u'4cc806bb04f730c445c60b3e0f4f44b54769a1c196ca37d8d4002135e4abd171:1', 'value': 50000, 'address': u'1CQLd3bhw4EzaURHbKCwM5YZbUQfA4ReY6'}]\r\n    cryptotool random_electrum_seed | pybtctool -s electrum_privkey 0 0\r\n    593240c2205e7b7b5d7c13393b7c9553497854b75c7470b76aeca50cd4a894d7\r\n\r\nThe -b option lets you read binary data as an argument\r\n\r\n    cryptotool sha256 123 | pybtctool -s changebase 16 256 | pybtctool -b changebase 256 16\r\n    a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae30a\r\n\r\nThe -j option lets you read json from the command line (-J to split a json list into multiple arguments)\r\n\r\n    cryptotool unspent 1FxkfJQLJTXpW6QmxGT6oF43ZH959ns8Cq | pybtctool -j select 200000001 | pybtctool -j mksend 1EXoDusjGwvnjZUyKkxZ4UHEf77z6A5S4P:20000 1FxkfJQLJTXpW6QmxGT6oF43ZH959ns8Cq 1000 | pybtctool -s signall 805cd74ca322633372b9bfb857f3be41db0b8de43a3c44353b238c0acff9d523\r\n    0100000003d5001aae8358ae98cb02c1b6f9859dc1ac3dbc1e9cc88632afeb7b7e3c510a49000000008b4830450221009e03bb6122437767e2ca785535824f4ed13d2ebbb9fa4f9becc6d6f4e1e217dc022064577353c08d8d974250143d920d3b963b463e43bbb90f3371060645c49266b90141048ef80f6bd6b073407a69299c2ba89de48adb59bb9689a5ab040befbbebcfbb15d01b006a6b825121a0d2c546c277acb60f0bd3203bd501b8d67c7dba91f27f47ffffffff1529d655dff6a0f6c9815ee835312fb3ca4df622fde21b6b9097666e9284087d010000008a473044022035dd67d18b575ebd339d05ca6ffa1d27d7549bd993aeaf430985795459fc139402201aaa162cc50181cee493870c9479b1148243a33923cb77be44a73ca554a4e5d60141048ef80f6bd6b073407a69299c2ba89de48adb59bb9689a5ab040befbbebcfbb15d01b006a6b825121a0d2c546c277acb60f0bd3203bd501b8d67c7dba91f27f47ffffffff23d5f9cf0a8c233b35443c3ae48d0bdb41bef357b8bfb972336322a34cd75c80010000008b483045022014daa5c5bbe9b3e5f2539a5cd8e22ce55bc84788f946c5b3643ecac85b4591a9022100a4062074a1df3fa0aea5ef67368d0b1f0eaac520bee6e417c682d83cd04330450141048ef80f6bd6b073407a69299c2ba89de48adb59bb9689a5ab040befbbebcfbb15d01b006a6b825121a0d2c546c277acb60f0bd3203bd501b8d67c7dba91f27f47ffffffff02204e0000000000001976a914946cb2e08075bcbaf157e47bcb67eb2b2339d24288ac5b3c4411000000001976a914a41d15ae657ad3bfd0846771a34d7584c37d54a288ac00000000\r\n\r\nFun stuff with json:\r\n\r\n    cryptotool unspent 1EXoDusjGwvnjZUyKkxZ4UHEf77z6A5S4P | pybtctool -j multiaccess value | pybtctool -j sum\r\n    625216206372\r\n\r\n    cryptotool unspent 1EXoDusjGwvnjZUyKkxZ4UHEf77z6A5S4P | pybtctool -j count\r\n    6198\r\n\r\nTo use the testnet you can add --testnet:\r\n\r\n    cryptotool unspent 2N8hwP1WmJrFF5QWABn38y63uYLhnJYJYTF --testnet\r\n    [{\"output\": \"209e5caf8997a3caed4dce0399804ad7fa50c70f866bb7118a42c79de1b76efc:1\", \"value\": 120000000}, {\"output\": \"79f38b3e730eea0e44b5a2e645f0979\r\n    2d9f8732a823079ba4778110657cbe7b2:0\", \"value\": 100000000}, {\"output\": \"99d88509d5f0e298bdb6883161c64c7f54444519ce28a0ef3d5942ff4ff7a924:0\", \"value\r\n    \": 82211600}, {\"output\": \"80acca12cf4b3b562b583f1dc7e43fff936e432a7ed4b16ac3cd10024820d027:0\", \"value\": 192470000}, {\"output\": \"3e5a3fa342c767d524b653aec51f3efe2122644c57340fbf5f79c75d1911ad35:0\", \"value\": 10000000}]\r\n\r\nOr the --coin option to use a coin other than bitcoin (bch, btc, dash, doge or ltc)\r\n\r\n    cryptotool unspent LV3VLesnCi3p3zf26Y86kH2FZxfQq2RjrA --coin ltc\r\n    [{\"output\": \"42bfe7376410696e260b2198f484f5df4aa6c744465940f9922ac9f8589670a4:0\", \"value\": 14282660}]\r\n\r\n    cryptotool unspent myLktRdRh3dkK3gnShNj5tZsig6J1oaaJW --coin ltc --testnet\r\n    [{\"output\": \"68f9c662503715a3baf29fe4b07c056b0bf6654dbdd9d5393f4d6a18225d0ff3:0\", \"value\": 16333531}, {\"output\": \"aa40041a1fcdb952d6a38594a27529f890d17d715fd54b6914cd6709fa94ca67:0\", \"value\": 100000000}, {\"output\": \"3b72bae956d27ab0ad309808ab76beaf203109f423e533fd7c40f1201672f598:1\", \"value\": 164712303}]\r\n\r\nMake and broadcast a transaction on the Bitcoin Cash testnet:\r\n\r\n    cryptotool send 89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678 mgRoeWs2CeCEuqQmNfhJjnpX8YvtPACmCX 999950000 --fee 50000 --coin bch --testnet\r\n    {\"status\": \"success\", \"data\": {\"txid\": \"caae4c059ac07827047237560ff44f97c940600f8f0a1e3392f4bcaf91e38c5c\", \"network\": \"tbcc\"}}\r\n\r\nThe arguments are the private key of the sender, the receiver's address and the fee (default 10000). Change will be returned to the sender. \r\n\r\n### Listing of main coin-specific methods:\r\n\r\n* privtopub            : (privkey) -> pubkey\r\n* pubtoaddr            : (pubkey) -> address\r\n* privtoaddr           : (privkey) -> Convert a wif encoded private key to correct address, if not wif encoded then p2pkh\r\n* privtop2pkh          : (privkey) -> p2pkh address\r\n* encode_privkey       : (privkey, format, script_type=\"p2pkh\") -> privkey\r\n* sign                 : (txobj, i, privkey) -> create digital signature of tx with privkey and add to input i\r\n* signall              : (txobj, privkey) -> create digital signature of tx with privkey for all inputs\r\n* history              : (address, merkle_proof=False) -> tx history of an address\r\n* get_histories        : (*addresses, merkle_proof=False) -> tx histories of an address\r\n* unspent              : (address, merkle_proof=False) -> unspent outputs for an addresses\r\n* get_unspents         : (addresses, merkle_proof=False) -> unspent outputs for multiple addresses\r\n* pushtx               : (hex or tx object) -> push a transaction to the blockchain\r\n* get_raw_tx           : (txid) -> Get the raw hex of a transaction id\r\n* get_tx               : (txid) -> fetch a tx from the blockchain\r\n* get_verbose_tx       : (txid) -> Transaction details verbose output\r\n* get_txs              : (*txids) -> Fetch multiple transaction details\r\n* calculate_fee        : (Tx) -> Calculate the fee of a transaction\r\n* send                 : (privkey, frm, to, value, change_addr=None, fee=None, estimate_fee_blocks: int = 6) -> create and a push a simple transaction to send coins to an address and return change to the change address or sender\r\n* send_to_multiple_receivers_tx          : (privkey, addr outs:value pairs, change_addr=None,fee=10000,, estimate_fee_blocks: int = 6) -> create and a push a transaction to send coins to multiple addresses and return change to the change address or sender\r\n* preparetx            : (frm, to, value, fee, estimate_fee_blocks: int = 6,change_addr=None): -> create unsigned txobj with change output\r\n* preparemultitx       : (frm, outs:value pairs, change_addr=None, fee=None, estimate_fee_blocks: int = 6): -> create unsigned txobj with multiple outputs and additional change output\r\n* preparesignedtx      : (privkey, frm, to, value, change_addr=None, fee=10000, estimate_fee_blocks: int = 6) -> create signed txobj with change output\r\n* preparesignedmultirecipienttx : (privkey, frm, outs: value pairs, change_addr=None, fee=10000, estimate_fee_blocks: int = 6) -> create signed txobj with multiple outputs and additional change output\r\n* mktx                 : (inputs, outputs, locktifme=0, sequence=0xFFFFFFFF) -> create unsigned txobj\r\n* mktx_with_change     : (inputs, outputs, change_addr=None, fee=None, estimate_fee_blocks=6, locktime=0, sequence=0xFFFFFFFF) -> create unsigned txobj\r\n* mk_multisig_address  : (pubkeys, M) -> Returns both M-of-N multisig script and address\r\n* multisign            : (txobj, i, script, privkey) -> signature\r\n* apply_multisignatures: (txobj, i, script, sigs) -> tx with index i signed with sigs\r\n* mk_multsig_segwit_address : (pubkeys, M)- Returns both M-of-N multisig script and native segwit address\r\n* mk_multsig_cash_address: (pubkeys, M)- Returns both M-of-N multisig script and Bitcoin Cash address\r\n* pubtop2w             : (pub) -> pay to witness script hash (segwit address)\r\n* privtop2w            : (priv) -> pay to witness script hash (segwit address)\r\n* pubtop2wpkh_p2sh     : (pub) -> Convert a public key to a segwit address encoded in a p2sh script\r\n* privtop2wpkh_p2sh    : (priv) -> Convert a private key to a segwit address encoded in a p2sh script\r\n* hash_to_segwit_addr  : (hash) -. Convert a public key hash to a native segwit address\r\n* scripthash_to_segwit_addr: (hash) -> Convert the hash of a p2sh script to a native segwit address\r\n* is_address           : (addr) -> true if addr is a valid address for this network\r\n* is_p2pkh              : (address) -> Return true if an address is in p2pkh format\r\n* is_p2sh              : (addr) -> true if addr is a pay to script hash for this network\r\n* is_segwit            : (priv, addr) -> true if priv-addr pair represent a pay to witness script hash\r\n* is_cash_or_legacy_p2pkh_address : (address) -> Returns true if an address is a legacy p2pkh address or a Bitcoin Cash formatted p2pkh address\r\n* is_native_segwit      : (address) -> Returns true if an address is of native segwit type\r\n* is_cash_address       : (address) -> Returns true if an address is of Bitcoin Cash address format\r\n* maybe_legacy_segwit   : (address) -> Returns true if address is likely a legacy segwit p2sh address\r\n* is_p2wsh              : (address) -> Returns true is address is a Pay To Witness Script Address\r\n* is_segwit_or_p2sh     : (address) -> Returns true if an address is a Pay to Witness or Pay to Script address\r\n* current_block_height : () -> Latest block height\r\n* block_height         : (txhash) -> Block height containing the txhash\r\n* inspect              : (tx_hex) -> Deserialize a transaction and decode and ins and outs\r\n* merkle_prove         : (txhash) -> Proves a transaction is valid and returns txhash, merkle siblings and block header.\r\n* estimate_fee_per_kb  : (numblocks) -> Get estimated fee kb to get transaction confirmed within numblocks number of blocks\r\n* tx_size              : (tx) -> Estimate final transaction size of an unsigned transaction\r\n* estimate_fee         : (tx, numblocks=6) -> Estimate required fee of an unsigned transaction\r\n* raw_block_header     : (height) -> Get the raw data of a block header\r\n* block_header         : (height) -> Get the decoded details of a block header\r\n* block_headers        : (*heights) -> Get a list of decoded block headers\r\n* subscribe_to_block_headers: (callback(height, raw_header, decoded_header)) -> Run a callback whenever a new block is added to the blockchain\r\n* unsubscribe_from_block_headers: () -> Remove all subscriptions to block headers\r\n* confirmations        : (height) -> Number of confirmations a transaction at this height has\r\n* subscribe_to_address : (callback(addr, status), addr) -> Run a callback every time there is an activity on an address\r\n* subscribe_to_address_transactions : (callback(address: str, txs, newly_confirmed, history, unspent, confirmed, unconfirmed, proven), addr) -> Run a callback every time there is an activity on an address with details transaction and balance information already retrieved\r\n* unsubscribe_from_address: (addr) -> Remove all subscriptions for this address\r\n* get_balance           : (addr) -> Get the balance, confirmed and unconfirmed, for an address\r\n* get_balances          : (*addrs) -> Get the balance, confirmed and unconfirmed, for multiple addresses\r\n* get_merkle            : (tx) -> Get the merkle root of a transaction\r\n* merkle_prove          : (tx) -> Prove a transaction is valid\r\n* merkle_prove_by_txid  : (txid) -> Prove a transaction id is valid\r\n* balance_merkle_proven : (addr) -> Get the merkle proven balance for an address\r\n* balance_merkle_proven : (*addrs) -> Get the merkle proven balance for multiple addresses\r\n* get_address_variations: (addr) -> Return alternative formats for an address (e.g. Standard + Bitcoin Cash address)\r\n* pub_is_for_p2pkh_addr : (pub, addr) -> Returns true if the p2pkh address for pub is addr\r\n* wiftoaddr             : (priv) -> Convert a private key in WIF format to the correct address type\r\n* electrum_address      : (masterkey, n, for_change) -> Electrum Address (for old Electrum seeds)\r\n* encode_privkey        : (privkey, format, script_type) -> Convert a private key to a different format or script types\r\n* output_script_to_address : (script) -> Convert an output script to an address\r\n* scripttoaddr          : (script)  -> Convert an input script to an address \r\n* addrtoscript          : (address) -> Convert an address to an output script\r\n* addrtoscripthash      : (address) -> Convert an address to scripthash as required by ElectrumX servers\r\n* p2sh_scriptaddr       : (script) -> Convert an output P2SH script to a P2SH address\r\n* p2sh_segwit_addr      : (script) -> Convert an output P2SH script to a native segwit P2WSH address\r\n* pubtosegwitaddress    : (pub) -> Convert a public key to a native segwit address\r\n* privtosegwitaddress   : (priv) -> Convert a private key to a native segwit address\r\n* scripthash_to_cash_addr: (scripthash) -> Convert a scripthash to a Bitcoin Cash address\r\n* pubtocashaddress      : (pub) -> Convert a public key to a Bitcoin Cash address\r\n* privtocashaddress     : (priv) -> Convert a private key to a Bitcoin Cash address \r\n* p2sh_cash_addr        : (script) -> Convert an script to a Bitcoin Cash address\r\n* hash_to_cash_addr     : (hash) -> Convert the hash of a p2sh script to a Bitcoin Cash address\r\n* legacy_addr_to_cash_address: (addr) -> Convert a legacy P2PKH address to a Bitcoin Cash address\r\n* cash_address_to_legacy_addr: (addr) -> Convert a Bitcoin Cash address to a legalcy P2PKH address\r\n\r\n### Listing of main non-coin specific commands:\r\n\r\n* add                  : (key1, key2) -> key1 + key2 (works on privkeys or pubkeys)\r\n* multiply             : (pubkey, privkey) -> returns pubkey * privkey\r\n\r\n* ecdsa_sign           : (message, privkey) -> sig\r\n* ecdsa_verify         : (message, sig, pubkey) -> True/False\r\n* ecdsa_recover        : (message, sig) -> pubkey\r\n\r\n* random_key           : () -> privkey\r\n* random_electrum_seed : () -> electrum seed\r\n\r\n* electrum_stretch     : (seed) -> secret exponent\r\n* electrum_privkey     : (seed or secret exponent, i, type) -> privkey\r\n* electrum_mpk         : (seed or secret exponent) -> master public key\r\n* electrum_pubkey      : (seed or secexp or mpk) -> pubkey\r\n\r\n* bip32_master_key     : (seed) -> bip32 master key\r\n* bip32_ckd            : (private or public bip32 key, i) -> child key\r\n* bip32_privtopub      : (private bip32 key) -> public bip32 key\r\n* bip32_extract_key    : (private or public bip32_key) -> privkey or pubkey\r\n\r\n* deserialize          : (hex or bin transaction) -> JSON tx\r\n* serialize            : (JSON tx) -> hex or bin tx\r\ns* verify_tx_input      : (tx, i, script, sig, pub) -> True/False\r\n* tx_hash              : (hex or bin tx) -> hash\r\n\r\n* access               : (json list/object, prop) -> desired property of that json object\r\n* multiaccess          : (json list, prop) -> like access, but mapped across each list element\r\n* slice                : (json list, start, end) -> given slice of the list\r\n* count                : (json list) -> number of elements\r\n* sum                  : (json list) -> sum of all values\r\n\r\n* select               : (unspent, value) -> returns list of unspents which are enough to cover the value\r\n\r\n### Another reminder and useful links\r\nAnother reminder, if you are doing something new with the library, whether a regular transaction, multisig,\r\nsegwit or a coin you haven't worked with before, try it out in testnet first or alternatively with small amounts\r\non the mainnet. The original pybitcointools had issues opened in Github where people lost money either due to \r\nnot understanding what they were doing or because of bugs. \r\n\r\n\r\n### Working together\r\n\r\nIf you wish to work together on crypto or other software related projects you can contact me using social links on my Github profile.\r\nI can very easily and quickly build software tools on top of this pybitcointools library.\r\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"http://github.com/primal100/pybitcointools","keywords":"","license":"","maintainer":"","maintainer_email":"","name":"cryptos","package_url":"https://pypi.org/project/cryptos/","platform":null,"project_url":"https://pypi.org/project/cryptos/","project_urls":{"Homepage":"http://github.com/primal100/pybitcointools"},"provides_extra":null,"release_url":"https://pypi.org/project/cryptos/2.0.9/","requires_dist":null,"requires_python":"","summary":"Python Crypto Coin Tools","version":"2.0.9","yanked":false,"yanked_reason":null},"last_serial":18935551,"releases":{"0.7":[{"comment_text":"","digests":{"blake2b_256":"7d46dc269e3269a9eed9107e1678d8305829d39f801ceb958196c748dcf8b62a","md5":"9f09dc84c3dfba7030a0005d4d4ed5e5","sha256":"c4de2a979ee0891919186a978b0dfce59426ae982a8996a361e3bb5685d170a1"},"downloads":-1,"filename":"cryptos-0.7-py3-none-any.whl","has_sig":false,"md5_digest":"9f09dc84c3dfba7030a0005d4d4ed5e5","packagetype":"bdist_wheel","python_version":"3.6","requires_python":null,"size":59889,"upload_time":"2018-01-07T00:52:10","upload_time_iso_8601":"2018-01-07T00:52:10.245430Z","url":"https://files.pythonhosted.org/packages/7d/46/dc269e3269a9eed9107e1678d8305829d39f801ceb958196c748dcf8b62a/cryptos-0.7-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"03b381d76361cf3ad5a1c31aed4c8cf57be5ab1a783785f42d4c60c439dec2ca","md5":"9314fcffa51b1cd86637cd74fa9fed56","sha256":"265986425b602dfa8e8c1eceb0c5967c8a361a94d111ca58c4a8c5f0291c20bf"},"downloads":-1,"filename":"cryptos-0.7.tar.gz","has_sig":false,"md5_digest":"9314fcffa51b1cd86637cd74fa9fed56","packagetype":"sdist","python_version":"source","requires_python":null,"size":32676,"upload_time":"2018-01-07T00:52:08","upload_time_iso_8601":"2018-01-07T00:52:08.419677Z","url":"https://files.pythonhosted.org/packages/03/b3/81d76361cf3ad5a1c31aed4c8cf57be5ab1a783785f42d4c60c439dec2ca/cryptos-0.7.tar.gz","yanked":false,"yanked_reason":null}],"0.8":[{"comment_text":"","digests":{"blake2b_256":"70522edc20fb2fb79837a05d11f9fbe6bf34f3172da3f16fe02311b005097bae","md5":"fa217a715afda54e0f5852b1d4abfa02","sha256":"3d3166a3f02790eb835111ebe8ceb9235b9cf04f493c163cee49eb660d9512d8"},"downloads":-1,"filename":"cryptos-0.8-py3-none-any.whl","has_sig":false,"md5_digest":"fa217a715afda54e0f5852b1d4abfa02","packagetype":"bdist_wheel","python_version":"3.6","requires_python":null,"size":52927,"upload_time":"2018-01-07T01:05:52","upload_time_iso_8601":"2018-01-07T01:05:52.655342Z","url":"https://files.pythonhosted.org/packages/70/52/2edc20fb2fb79837a05d11f9fbe6bf34f3172da3f16fe02311b005097bae/cryptos-0.8-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"8ee27f0990c25cd6a79d7b0ab06f9482e07c6ab99e34456a0dd80426c5b9e590","md5":"8ac4cbb484fbe5eb7a9a29f552edc08b","sha256":"34490ce1b6b8fd7db980d683dd53f1498503acfe57178c1db14a2cd6cced6830"},"downloads":-1,"filename":"cryptos-0.8.tar.gz","has_sig":false,"md5_digest":"8ac4cbb484fbe5eb7a9a29f552edc08b","packagetype":"sdist","python_version":"source","requires_python":null,"size":40875,"upload_time":"2018-01-07T01:05:50","upload_time_iso_8601":"2018-01-07T01:05:50.833465Z","url":"https://files.pythonhosted.org/packages/8e/e2/7f0990c25cd6a79d7b0ab06f9482e07c6ab99e34456a0dd80426c5b9e590/cryptos-0.8.tar.gz","yanked":false,"yanked_reason":null}],"1.1":[{"comment_text":"","digests":{"blake2b_256":"9e34a5d279136d202ab2ef094613f2c1cc572a4921ceec1454b7d39d82acff35","md5":"05e0c649616ac20f31a9ee6cde0f32e0","sha256":"e01d40b0a03306ed013aa00ea0845d954725570918140827d71038f817806b67"},"downloads":-1,"filename":"cryptos-1.1-py3-none-any.whl","has_sig":false,"md5_digest":"05e0c649616ac20f31a9ee6cde0f32e0","packagetype":"bdist_wheel","python_version":"3.6","requires_python":null,"size":52927,"upload_time":"2018-01-07T01:07:11","upload_time_iso_8601":"2018-01-07T01:07:11.704767Z","url":"https://files.pythonhosted.org/packages/9e/34/a5d279136d202ab2ef094613f2c1cc572a4921ceec1454b7d39d82acff35/cryptos-1.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"63a2bbfa5b2d8e00e0e117fe44656b97e29be2a45ae7522286d1d9d7328577ae","md5":"94a5b94587b77d4d08b47bcea8a3d3ab","sha256":"96760fc28b3f2fcc50370da43cebf084bad4b3bafac01dfba0e58082153c9e1d"},"downloads":-1,"filename":"cryptos-1.1.tar.gz","has_sig":false,"md5_digest":"94a5b94587b77d4d08b47bcea8a3d3ab","packagetype":"sdist","python_version":"source","requires_python":null,"size":40869,"upload_time":"2018-01-07T01:07:09","upload_time_iso_8601":"2018-01-07T01:07:09.830946Z","url":"https://files.pythonhosted.org/packages/63/a2/bbfa5b2d8e00e0e117fe44656b97e29be2a45ae7522286d1d9d7328577ae/cryptos-1.1.tar.gz","yanked":false,"yanked_reason":null}],"1.2":[{"comment_text":"","digests":{"blake2b_256":"cba56f6dc410f63ce2bcb446497ec42ca4e9cc63f7b7952d204e261cab6ca8aa","md5":"e7a063e8f3470ad789c59c4103c321c5","sha256":"5324fbb8ec99da5a14b7f3b3f89b264b63cd1b7cee682d1649fe03438cd5c36a"},"downloads":-1,"filename":"cryptos-1.2-py3-none-any.whl","has_sig":false,"md5_digest":"e7a063e8f3470ad789c59c4103c321c5","packagetype":"bdist_wheel","python_version":"3.6","requires_python":null,"size":56407,"upload_time":"2018-01-08T01:08:21","upload_time_iso_8601":"2018-01-08T01:08:21.401383Z","url":"https://files.pythonhosted.org/packages/cb/a5/6f6dc410f63ce2bcb446497ec42ca4e9cc63f7b7952d204e261cab6ca8aa/cryptos-1.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"075b45d8f466ee91a453f7d273cc5b8cd428d4f65009b85af9e59692bb921342","md5":"0cd13f29e356006145917c1250a2db91","sha256":"1c199d896185a176bb254908bd0bd63c8f325cce5df2f6691390bd0954324bbe"},"downloads":-1,"filename":"cryptos-1.2.tar.gz","has_sig":false,"md5_digest":"0cd13f29e356006145917c1250a2db91","packagetype":"sdist","python_version":"source","requires_python":null,"size":43080,"upload_time":"2018-01-08T01:08:19","upload_time_iso_8601":"2018-01-08T01:08:19.057508Z","url":"https://files.pythonhosted.org/packages/07/5b/45d8f466ee91a453f7d273cc5b8cd428d4f65009b85af9e59692bb921342/cryptos-1.2.tar.gz","yanked":false,"yanked_reason":null}],"1.3":[{"comment_text":"","digests":{"blake2b_256":"1d656559e806b7a243d37adfb8e19508d3956305621bbc01f78872ffcbd76601","md5":"bd43c918b10332501bbb214c02490bf7","sha256":"df24f762783932fadacdb275f366d69f063afaec9ac62e31cfc65ba091c78867"},"downloads":-1,"filename":"cryptos-1.3-py3-none-any.whl","has_sig":false,"md5_digest":"bd43c918b10332501bbb214c02490bf7","packagetype":"bdist_wheel","python_version":"3.6","requires_python":null,"size":56217,"upload_time":"2018-01-08T14:36:40","upload_time_iso_8601":"2018-01-08T14:36:40.939835Z","url":"https://files.pythonhosted.org/packages/1d/65/6559e806b7a243d37adfb8e19508d3956305621bbc01f78872ffcbd76601/cryptos-1.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"8a31bd58482c44e0f564a1454dd45ae7c252cc7004a019b4172f857425d2f9b2","md5":"d1665ce2763ed89c602317cc48fb1a4b","sha256":"1da357173e72dcacf28550c20bd46717e187c13b69c88aa9230cab2b7431dfed"},"downloads":-1,"filename":"cryptos-1.3.tar.gz","has_sig":false,"md5_digest":"d1665ce2763ed89c602317cc48fb1a4b","packagetype":"sdist","python_version":"source","requires_python":null,"size":43204,"upload_time":"2018-01-08T14:36:37","upload_time_iso_8601":"2018-01-08T14:36:37.836026Z","url":"https://files.pythonhosted.org/packages/8a/31/bd58482c44e0f564a1454dd45ae7c252cc7004a019b4172f857425d2f9b2/cryptos-1.3.tar.gz","yanked":false,"yanked_reason":null}],"1.32":[{"comment_text":"","digests":{"blake2b_256":"0dd18275af96983f2b8257d957fd588cd7bd9c757d6b4e4acf4fe39d8f29289b","md5":"1bb97b5d94901c7b65cee2bd3a03a989","sha256":"0931da34f8161c3ce63076697372bcd2dbe79b284e6ca203900b706d4f8e0044"},"downloads":-1,"filename":"cryptos-1.32-py3-none-any.whl","has_sig":false,"md5_digest":"1bb97b5d94901c7b65cee2bd3a03a989","packagetype":"bdist_wheel","python_version":"3.6","requires_python":null,"size":59182,"upload_time":"2018-01-09T13:14:41","upload_time_iso_8601":"2018-01-09T13:14:41.451688Z","url":"https://files.pythonhosted.org/packages/0d/d1/8275af96983f2b8257d957fd588cd7bd9c757d6b4e4acf4fe39d8f29289b/cryptos-1.32-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1acb15bd310177cfd2b857a0ca657522627f689d43f40d0596910c0ab9fa9298","md5":"beffde6914c0a58a18ae8592762fb380","sha256":"fd60aef8fd8b37dde26b14e8b6ed8d7ad2d9d922fdf3bde905b904d2f6199066"},"downloads":-1,"filename":"cryptos-1.32.tar.gz","has_sig":false,"md5_digest":"beffde6914c0a58a18ae8592762fb380","packagetype":"sdist","python_version":"source","requires_python":null,"size":51319,"upload_time":"2018-01-09T13:14:39","upload_time_iso_8601":"2018-01-09T13:14:39.020187Z","url":"https://files.pythonhosted.org/packages/1a/cb/15bd310177cfd2b857a0ca657522627f689d43f40d0596910c0ab9fa9298/cryptos-1.32.tar.gz","yanked":false,"yanked_reason":null}],"1.33":[{"comment_text":"","digests":{"blake2b_256":"3e8f0585975173f43ea49320e0f971f1216648ce65fb423f72881c481f3a8b3a","md5":"a35c3a9c83c6a6c87b4fdcf475d7aa14","sha256":"f008ed143179586a2b655846bae1a55d92cb0847100663041feb98fd1048cd48"},"downloads":-1,"filename":"cryptos-1.33-py3-none-any.whl","has_sig":false,"md5_digest":"a35c3a9c83c6a6c87b4fdcf475d7aa14","packagetype":"bdist_wheel","python_version":"3.6","requires_python":null,"size":61867,"upload_time":"2018-01-09T18:49:48","upload_time_iso_8601":"2018-01-09T18:49:48.711096Z","url":"https://files.pythonhosted.org/packages/3e/8f/0585975173f43ea49320e0f971f1216648ce65fb423f72881c481f3a8b3a/cryptos-1.33-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"0af1ad79daf0d247830d87213607258b7ea3472e88affebfd4b77dc57d4c3ab9","md5":"88cf9b2c660b8b9833253687d2bf81a9","sha256":"3e665555ac5b7404c38a557866293a19cbe5bb7cad4c7ce6cf407642cf7b1863"},"downloads":-1,"filename":"cryptos-1.33.tar.gz","has_sig":false,"md5_digest":"88cf9b2c660b8b9833253687d2bf81a9","packagetype":"sdist","python_version":"source","requires_python":null,"size":54555,"upload_time":"2018-01-09T18:49:45","upload_time_iso_8601":"2018-01-09T18:49:45.595407Z","url":"https://files.pythonhosted.org/packages/0a/f1/ad79daf0d247830d87213607258b7ea3472e88affebfd4b77dc57d4c3ab9/cryptos-1.33.tar.gz","yanked":false,"yanked_reason":null}],"1.34":[{"comment_text":"","digests":{"blake2b_256":"4139bed80ac0760656a4f005ebc739df5f8ba8ad208b8c1cf6c4eaf137c7e628","md5":"f2e24400ee649c29d4d0bc08738fc07a","sha256":"53cf8f3190816d78659060ec0f72a69fa883615ef0a23a8453ff7dae6ce473d7"},"downloads":-1,"filename":"cryptos-1.34-py3-none-any.whl","has_sig":false,"md5_digest":"f2e24400ee649c29d4d0bc08738fc07a","packagetype":"bdist_wheel","python_version":"3.6","requires_python":null,"size":63983,"upload_time":"2018-01-09T19:29:54","upload_time_iso_8601":"2018-01-09T19:29:54.920085Z","url":"https://files.pythonhosted.org/packages/41/39/bed80ac0760656a4f005ebc739df5f8ba8ad208b8c1cf6c4eaf137c7e628/cryptos-1.34-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"fdabe2fc6db6511f3c4714118cf0effaae151bff030904c5a210c0b9a1ad3317","md5":"da3a91e6276c23a36ff7af654d589dc1","sha256":"33a02e91c11899bace959afca7a29e09803d0dac48fa1ee37064210eb317ba02"},"downloads":-1,"filename":"cryptos-1.34.tar.gz","has_sig":false,"md5_digest":"da3a91e6276c23a36ff7af654d589dc1","packagetype":"sdist","python_version":"source","requires_python":null,"size":57084,"upload_time":"2018-01-09T19:29:51","upload_time_iso_8601":"2018-01-09T19:29:51.699313Z","url":"https://files.pythonhosted.org/packages/fd/ab/e2fc6db6511f3c4714118cf0effaae151bff030904c5a210c0b9a1ad3317/cryptos-1.34.tar.gz","yanked":false,"yanked_reason":null}],"1.35":[{"comment_text":"","digests":{"blake2b_256":"b19a43842aa326d2539700cda38a1426df5971e04a0332d01064119c4bfb5b05","md5":"757e296e495a6611503fdcbc6b2c6812","sha256":"9f9a4d0c4510559d4f511cd38cd10ca1da511f18fcb67027fd06c77ff26391c2"},"downloads":-1,"filename":"cryptos-1.35-py3-none-any.whl","has_sig":false,"md5_digest":"757e296e495a6611503fdcbc6b2c6812","packagetype":"bdist_wheel","python_version":"3.6","requires_python":null,"size":66076,"upload_time":"2018-01-10T01:20:25","upload_time_iso_8601":"2018-01-10T01:20:25.010663Z","url":"https://files.pythonhosted.org/packages/b1/9a/43842aa326d2539700cda38a1426df5971e04a0332d01064119c4bfb5b05/cryptos-1.35-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b5edc6c3e2f9f7b493b834041c8e1e72d86e2619321dea0784c1323795c8ce63","md5":"24841369cb78726b255a57a219bcabee","sha256":"bfaa4a2619347786155f86cfd079dc5dedefba82f2b0269908738c39c4ea6587"},"downloads":-1,"filename":"cryptos-1.35.tar.gz","has_sig":false,"md5_digest":"24841369cb78726b255a57a219bcabee","packagetype":"sdist","python_version":"source","requires_python":null,"size":63371,"upload_time":"2018-01-10T01:20:21","upload_time_iso_8601":"2018-01-10T01:20:21.243980Z","url":"https://files.pythonhosted.org/packages/b5/ed/c6c3e2f9f7b493b834041c8e1e72d86e2619321dea0784c1323795c8ce63/cryptos-1.35.tar.gz","yanked":false,"yanked_reason":null}],"1.36":[{"comment_text":"","digests":{"blake2b_256":"434459489e6c6dfc446248bd2da875c2b93b54154fe6b2be214b44585ce66ce6","md5":"97667a401f69a03982f5cc6541a774c3","sha256":"485fa0101918f00418952946fea3aa2a1f61c42ef6508cd9eb5db6f5def8d37e"},"downloads":-1,"filename":"cryptos-1.36-py3-none-any.whl","has_sig":false,"md5_digest":"97667a401f69a03982f5cc6541a774c3","packagetype":"bdist_wheel","python_version":"3.6","requires_python":null,"size":69101,"upload_time":"2018-01-11T20:50:36","upload_time_iso_8601":"2018-01-11T20:50:36.161694Z","url":"https://files.pythonhosted.org/packages/43/44/59489e6c6dfc446248bd2da875c2b93b54154fe6b2be214b44585ce66ce6/cryptos-1.36-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"8afe36a15bdfac58c6f1fc0697758d4c34bb42fa3da33eb83e8f614ec5f6670a","md5":"cb8ccbba5b653bf86e539c16589c93dd","sha256":"cd316709038210fa0bde878db59e8f82716564b7679cdc5a1c34f58efa63f2df"},"downloads":-1,"filename":"cryptos-1.36.tar.gz","has_sig":false,"md5_digest":"cb8ccbba5b653bf86e539c16589c93dd","packagetype":"sdist","python_version":"source","requires_python":null,"size":71701,"upload_time":"2018-01-11T20:50:33","upload_time_iso_8601":"2018-01-11T20:50:33.884680Z","url":"https://files.pythonhosted.org/packages/8a/fe/36a15bdfac58c6f1fc0697758d4c34bb42fa3da33eb83e8f614ec5f6670a/cryptos-1.36.tar.gz","yanked":false,"yanked_reason":null}],"2.0.0":[{"comment_text":"","digests":{"blake2b_256":"3882ffeb99fbac34ab6c588cff6a17991342cb56e72cd19c41a53fddc407755c","md5":"ca1437cd376aa379d14d0bb38b959a42","sha256":"e1b2055886a84eab0f6650cad30dfb302c6a9fcdbdf351a8d6856cb496042a88"},"downloads":-1,"filename":"cryptos-2.0.0.tar.gz","has_sig":false,"md5_digest":"ca1437cd376aa379d14d0bb38b959a42","packagetype":"sdist","python_version":"source","requires_python":null,"size":171089,"upload_time":"2023-03-22T18:04:57","upload_time_iso_8601":"2023-03-22T18:04:57.731041Z","url":"https://files.pythonhosted.org/packages/38/82/ffeb99fbac34ab6c588cff6a17991342cb56e72cd19c41a53fddc407755c/cryptos-2.0.0.tar.gz","yanked":false,"yanked_reason":null}],"2.0.1":[{"comment_text":"","digests":{"blake2b_256":"53bd691f7dade037597213d4b0cebdf825a91e8c80ff2909309fd40a7f31a657","md5":"c61726a48979348f3ada25e7da4a9c98","sha256":"a32cd67b023575e068ef57492325a0bab81843e419e9c1916eb57a78fa097eb4"},"downloads":-1,"filename":"cryptos-2.0.1.tar.gz","has_sig":false,"md5_digest":"c61726a48979348f3ada25e7da4a9c98","packagetype":"sdist","python_version":"source","requires_python":null,"size":170908,"upload_time":"2023-03-22T18:06:04","upload_time_iso_8601":"2023-03-22T18:06:04.700634Z","url":"https://files.pythonhosted.org/packages/53/bd/691f7dade037597213d4b0cebdf825a91e8c80ff2909309fd40a7f31a657/cryptos-2.0.1.tar.gz","yanked":false,"yanked_reason":null}],"2.0.2":[{"comment_text":"","digests":{"blake2b_256":"5f6c1049e33d1e0df6f62adebee50fe6d5cec1df6f32b8701499d0f55cd11e9c","md5":"1fe9fe3097fe158e782604ddd131c9a3","sha256":"0f1112fd4d5af1c8a946a4945eedcc1a00f6bfff146edffd7c4bea08b7ef2e4b"},"downloads":-1,"filename":"cryptos-2.0.2.tar.gz","has_sig":false,"md5_digest":"1fe9fe3097fe158e782604ddd131c9a3","packagetype":"sdist","python_version":"source","requires_python":null,"size":170901,"upload_time":"2023-03-22T18:08:00","upload_time_iso_8601":"2023-03-22T18:08:00.684681Z","url":"https://files.pythonhosted.org/packages/5f/6c/1049e33d1e0df6f62adebee50fe6d5cec1df6f32b8701499d0f55cd11e9c/cryptos-2.0.2.tar.gz","yanked":false,"yanked_reason":null}],"2.0.3":[{"comment_text":"","digests":{"blake2b_256":"27434e2941183869ee095ab7eab3c68e1919613f1aefdf05fdd4aa2046453563","md5":"1f565294058468f5328412cb086dfbf0","sha256":"952b9712139f354183ccdda3f6f48db09733e290e35e06900fc2209146f2f71a"},"downloads":-1,"filename":"cryptos-2.0.3-py3.10.egg","has_sig":false,"md5_digest":"1f565294058468f5328412cb086dfbf0","packagetype":"bdist_egg","python_version":"2.0.3","requires_python":null,"size":421475,"upload_time":"2023-03-22T18:20:41","upload_time_iso_8601":"2023-03-22T18:20:41.503181Z","url":"https://files.pythonhosted.org/packages/27/43/4e2941183869ee095ab7eab3c68e1919613f1aefdf05fdd4aa2046453563/cryptos-2.0.3-py3.10.egg","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"71a332010150610f85f60c7e23e6e9a9355e52bec10970f0d829740766ce29ca","md5":"41cd58895bd02219d91b7d9ecc02ddaa","sha256":"0eaacc311db00fd45dcb09472c0b9936185ba4a4c1beb2d33981a043d6350fbc"},"downloads":-1,"filename":"cryptos-2.0.3.tar.gz","has_sig":false,"md5_digest":"41cd58895bd02219d91b7d9ecc02ddaa","packagetype":"sdist","python_version":"source","requires_python":null,"size":176417,"upload_time":"2023-03-22T18:20:42","upload_time_iso_8601":"2023-03-22T18:20:42.795816Z","url":"https://files.pythonhosted.org/packages/71/a3/32010150610f85f60c7e23e6e9a9355e52bec10970f0d829740766ce29ca/cryptos-2.0.3.tar.gz","yanked":false,"yanked_reason":null}],"2.0.4":[{"comment_text":"","digests":{"blake2b_256":"9f76302f55bd2533c7223fa4efe961840db74447ccc4e75e84289962c75232e7","md5":"aca5464640ae723fd0c7ddeb718b9ef0","sha256":"ac1cc7d137446785364d87bac608c1a53b450e99360a8e97ea24b0c4c5fc113f"},"downloads":-1,"filename":"cryptos-2.0.4.tar.gz","has_sig":false,"md5_digest":"aca5464640ae723fd0c7ddeb718b9ef0","packagetype":"sdist","python_version":"source","requires_python":null,"size":176550,"upload_time":"2023-03-22T18:24:18","upload_time_iso_8601":"2023-03-22T18:24:18.889871Z","url":"https://files.pythonhosted.org/packages/9f/76/302f55bd2533c7223fa4efe961840db74447ccc4e75e84289962c75232e7/cryptos-2.0.4.tar.gz","yanked":false,"yanked_reason":null}],"2.0.5":[{"comment_text":"","digests":{"blake2b_256":"302ef8367679390ab4d755876b18ff20c163222af46dcc8b4e0ceca286a2314c","md5":"9ec9ba5d2a2790eec217d89e2cc58e90","sha256":"76ba62e2dd2cf88ed579b6dbe99d20116fff7df3d3a5069f064cf12ab33968e0"},"downloads":-1,"filename":"cryptos-2.0.5.tar.gz","has_sig":false,"md5_digest":"9ec9ba5d2a2790eec217d89e2cc58e90","packagetype":"sdist","python_version":"source","requires_python":null,"size":176557,"upload_time":"2023-03-25T16:49:32","upload_time_iso_8601":"2023-03-25T16:49:32.194623Z","url":"https://files.pythonhosted.org/packages/30/2e/f8367679390ab4d755876b18ff20c163222af46dcc8b4e0ceca286a2314c/cryptos-2.0.5.tar.gz","yanked":false,"yanked_reason":null}],"2.0.6":[{"comment_text":"","digests":{"blake2b_256":"f71aff250ac6be438387f97d080c911525b48ecd3257415d091cfb5ae4029723","md5":"22467d3a2a3d4c680be8fad87d860b11","sha256":"c6e40a51c9d0d3cc57987ab3f928d71cef5cd1d4081ec8d366cb909b770a0f9d"},"downloads":-1,"filename":"cryptos-2.0.6.tar.gz","has_sig":false,"md5_digest":"22467d3a2a3d4c680be8fad87d860b11","packagetype":"sdist","python_version":"source","requires_python":null,"size":177073,"upload_time":"2023-04-03T17:26:51","upload_time_iso_8601":"2023-04-03T17:26:51.669005Z","url":"https://files.pythonhosted.org/packages/f7/1a/ff250ac6be438387f97d080c911525b48ecd3257415d091cfb5ae4029723/cryptos-2.0.6.tar.gz","yanked":false,"yanked_reason":null}],"2.0.7":[{"comment_text":"","digests":{"blake2b_256":"b8b7ea7125e2f36a81d8bd9baa7889911e2758dab9f29ccdd4dd6da30b3caba4","md5":"c407a4c7c1a464237fbda56f0674d27c","sha256":"b1d109dfd7a183e33dd7cee938280b6aed8ed0dd3e7eef1c5d8217e3457a9a0c"},"downloads":-1,"filename":"cryptos-2.0.7.tar.gz","has_sig":false,"md5_digest":"c407a4c7c1a464237fbda56f0674d27c","packagetype":"sdist","python_version":"source","requires_python":null,"size":181442,"upload_time":"2023-05-05T13:14:44","upload_time_iso_8601":"2023-05-05T13:14:44.943478Z","url":"https://files.pythonhosted.org/packages/b8/b7/ea7125e2f36a81d8bd9baa7889911e2758dab9f29ccdd4dd6da30b3caba4/cryptos-2.0.7.tar.gz","yanked":false,"yanked_reason":null}],"2.0.8":[{"comment_text":"","digests":{"blake2b_256":"9e246f22aa0d5005bd3eaeec0aaeae761f8b35a948576c8343564f4236fe5d7e","md5":"ff7a9b7a02c06259501d49087a7a2957","sha256":"4e50d1ff0e6401ee238e0504a8435ebd6c24b83151bb50530d923d2bcd5abda4"},"downloads":-1,"filename":"cryptos-2.0.8.tar.gz","has_sig":false,"md5_digest":"ff7a9b7a02c06259501d49087a7a2957","packagetype":"sdist","python_version":"source","requires_python":null,"size":186120,"upload_time":"2023-05-23T16:19:40","upload_time_iso_8601":"2023-05-23T16:19:40.837341Z","url":"https://files.pythonhosted.org/packages/9e/24/6f22aa0d5005bd3eaeec0aaeae761f8b35a948576c8343564f4236fe5d7e/cryptos-2.0.8.tar.gz","yanked":false,"yanked_reason":null}],"2.0.9":[{"comment_text":"","digests":{"blake2b_256":"8be8f2edcd68443cd373c403a0a8b42cc8cd74ca47665f9266b6759b670ce331","md5":"e7eaf1b574452317781ab0f0ca064e4d","sha256":"3465f37ff22fad3903394ed1dafa0d712472a2ab2e9bc1f13a31886ffc7df343"},"downloads":-1,"filename":"cryptos-2.0.9.tar.gz","has_sig":false,"md5_digest":"e7eaf1b574452317781ab0f0ca064e4d","packagetype":"sdist","python_version":"source","requires_python":null,"size":186188,"upload_time":"2023-07-18T14:56:53","upload_time_iso_8601":"2023-07-18T14:56:53.706116Z","url":"https://files.pythonhosted.org/packages/8b/e8/f2edcd68443cd373c403a0a8b42cc8cd74ca47665f9266b6759b670ce331/cryptos-2.0.9.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"8be8f2edcd68443cd373c403a0a8b42cc8cd74ca47665f9266b6759b670ce331","md5":"e7eaf1b574452317781ab0f0ca064e4d","sha256":"3465f37ff22fad3903394ed1dafa0d712472a2ab2e9bc1f13a31886ffc7df343"},"downloads":-1,"filename":"cryptos-2.0.9.tar.gz","has_sig":false,"md5_digest":"e7eaf1b574452317781ab0f0ca064e4d","packagetype":"sdist","python_version":"source","requires_python":null,"size":186188,"upload_time":"2023-07-18T14:56:53","upload_time_iso_8601":"2023-07-18T14:56:53.706116Z","url":"https://files.pythonhosted.org/packages/8b/e8/f2edcd68443cd373c403a0a8b42cc8cd74ca47665f9266b6759b670ce331/cryptos-2.0.9.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
