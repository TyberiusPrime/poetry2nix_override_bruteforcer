{"info":{"author":"The PlanetaryPy Developers","author_email":"","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Intended Audience :: Developers","Intended Audience :: Science/Research","License :: OSI Approved :: BSD License","Natural Language :: English","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Text Processing"],"description":"===============================\npvl\n===============================\n\n.. image:: https://readthedocs.org/projects/pvl/badge/?version=latest\n        :target: https://pvl.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n.. image:: https://github.com/planetarypy/pvl/workflows/Python%20Testing/badge.svg\n        :target: https://github.com/planetarypy/pvl/actions\n\n.. image:: https://codecov.io/gh/planetarypy/pvl/branch/main/graph/badge.svg?token=uWqotcPTGR\n        :target: https://codecov.io/gh/planetarypy/pvl\n        :alt: Codecov coverage\n\n\n.. image:: https://img.shields.io/pypi/v/pvl.svg?style=flat-square\n        :target: https://pypi.python.org/pypi/pvl\n        :alt: PyPI version\n\n.. image:: https://img.shields.io/pypi/dm/pvl.svg?style=flat-square\n        :target: https://pypi.python.org/pypi/pvl\n        :alt: PyPI Downloads/month\n\n.. image:: https://img.shields.io/conda/vn/conda-forge/pvl.svg\n        :target: https://anaconda.org/conda-forge/pvl\n        :alt: conda-forge version\n\n.. image:: https://img.shields.io/conda/dn/conda-forge/pvl.svg\n        :target: https://anaconda.org/conda-forge/pvl\n        :alt: conda-forge downloads\n\n\nPython implementation of a PVL (Parameter Value Language) library.\n\n* Free software: BSD license\n* Documentation: http://pvl.readthedocs.org.\n* Support for Python 3.6 and higher (avaiable via pypi and conda).\n* `PlanetaryPy`_ Affiliate Package.\n\nPVL is a markup language, like JSON or YAML, commonly employed for\nentries in the Planetary Data System used by NASA to archive\nmission data, among other uses.  This package supports both encoding\nand decoding a variety of PVL 'flavors' including PVL itself, ODL,\n`NASA PDS 3 Labels`_, and `USGS ISIS Cube Labels`_.\n\n\nInstallation\n------------\n\nCan either install with pip or with conda.\n\nTo install with pip, at the command line::\n\n    $ pip install pvl\n\nDirections for installing with conda-forge:\n\nInstalling ``pvl`` from the conda-forge channel can be achieved by adding\nconda-forge to your channels with::\n\n    conda config --add channels conda-forge\n\n\nOnce the conda-forge channel has been enabled, ``pvl`` can be installed with::\n\n    conda install pvl\n\nIt is possible to list all of the versions of ``pvl`` available on your platform\nwith::\n\n    conda search pvl --channel conda-forge\n\n\nBasic Usage\n-----------\n\n``pvl`` exposes an API familiar to users of the standard library\n``json`` module.\n\nDecoding is primarily done through ``pvl.load()`` for file-like objects and\n``pvl.loads()`` for strings::\n\n    >>> import pvl\n    >>> module = pvl.loads(\"\"\"\n    ...     foo = bar\n    ...     items = (1, 2, 3)\n    ...     END\n    ... \"\"\")\n    >>> print(module)\n    PVLModule([\n      ('foo', 'bar')\n      ('items', [1, 2, 3])\n    ])\n    >>> print(module['foo'])\n    bar\n\nThere is also a ``pvl.loadu()`` to which you can provide the URL of a file that you would normally provide to\n``pvl.load()``.\n\nYou may also use ``pvl.load()`` to read PVL text directly from an image_ that begins with PVL text::\n\n    >>> import pvl\n    >>> label = pvl.load('tests/data/pattern.cub')\n    >>> print(label)\n    PVLModule([\n      ('IsisCube',\n       {'Core': {'Dimensions': {'Bands': 1,\n                                'Lines': 90,\n                                'Samples': 90},\n                 'Format': 'Tile',\n                 'Pixels': {'Base': 0.0,\n                            'ByteOrder': 'Lsb',\n                            'Multiplier': 1.0,\n                            'Type': 'Real'},\n                 'StartByte': 65537,\n                 'TileLines': 128,\n                 'TileSamples': 128}})\n      ('Label', PVLObject([\n        ('Bytes', 65536)\n      ]))\n    ])\n    >>> print(label['IsisCube']['Core']['StartByte'])\n    65537\n\n\nSimilarly, encoding Python objects as PVL text is done through\n``pvl.dump()`` and ``pvl.dumps()``::\n\n    >>> import pvl\n    >>> print(pvl.dumps({\n    ...     'foo': 'bar',\n    ...     'items': [1, 2, 3]\n    ... }))\n    FOO   = bar\n    ITEMS = (1, 2, 3)\n    END\n    <BLANKLINE>\n\n``pvl.PVLModule`` objects may also be pragmatically built up\nto control the order of parameters as well as duplicate keys::\n\n    >>> import pvl\n    >>> module = pvl.PVLModule({'foo': 'bar'})\n    >>> module.append('items', [1, 2, 3])\n    >>> print(pvl.dumps(module))\n    FOO   = bar\n    ITEMS = (1, 2, 3)\n    END\n    <BLANKLINE>\n\nA ``pvl.PVLModule`` is a ``dict``-like container that preserves\nordering as well as allows multiple values for the same key. It provides\nsimilar semantics to a ``list`` of key/value ``tuples`` but \nwith ``dict``-style access::\n\n    >>> import pvl\n    >>> module = pvl.PVLModule([\n    ...     ('foo', 'bar'),\n    ...     ('items', [1, 2, 3]),\n    ...     ('foo', 'remember me?'),\n    ... ])\n    >>> print(module['foo'])\n    bar\n    >>> print(module.getall('foo'))\n    ['bar', 'remember me?']\n    >>> print(module.items())\n    ItemsView(PVLModule([\n      ('foo', 'bar')\n      ('items', [1, 2, 3])\n      ('foo', 'remember me?')\n    ]))\n    >>> print(pvl.dumps(module))\n    FOO   = bar\n    ITEMS = (1, 2, 3)\n    FOO   = 'remember me?'\n    END\n    <BLANKLINE>\n\nHowever, there are some aspects to the default ``pvl.PVLModule`` that are not entirely\naligned with the modern Python 3 expectations of a Mapping object.  If you would like\nto experiment with a more Python-3-ic object, you could instantiate a\n``pvl.collections.PVLMultiDict`` object, or ``import pvl.new as pvl`` in your code\nto have the loaders return objects of this type (and then easily switch back by just\nchanging the import statement).  To learn more about how PVLMultiDict is different\nfrom the existing OrderedMultiDict that PVLModule is derived from, please read the\nnew PVLMultiDict documentation.\n\nThe intent is for the loaders (``pvl.load()``, ``pvl.loads()``, and ``pvl.loadu()``)\nto be permissive, and attempt to parse as wide a variety of PVL text as\npossible, including some kinds of 'broken' PVL text.\n\nOn the flip side, when dumping a Python object to PVL text (via\n``pvl.dumps()`` and ``pvl.dump()``), the library will default\nto writing PDS3-Standards-compliant PVL text, which in some ways\nis the most restrictive, but the most likely version of PVL text\nthat you need if you're writing it out (this is different from\npre-1.0 versions of ``pvl``).\n\nYou can change this behavior by giving different parameters to the\nloaders and dumpers that define the grammar of the PVL text that\nyou're interested in, as well as custom parsers, decoders, and\nencoders.\n\nFor more information on custom serilization and deseralization see the\n`full documentation`_.\n\n\nContributing\n------------\n\nFeedback, issues, and contributions are always gratefully welcomed. See the\n`contributing guide`_ for details on how to help and setup a development\nenvironment.\n\n\n.. _PlanetaryPy: https://planetarypy.org\n.. _USGS ISIS Cube Labels: http://isis.astrogeology.usgs.gov/\n.. _NASA PDS 3 Labels: https://pds.nasa.gov\n.. _image: https://github.com/planetarypy/pvl/raw/master/tests/data/pattern.cub\n.. _full documentation: http://pvl.readthedocs.org\n.. _contributing guide: https://github.com/planetarypy/pvl/blob/master/CONTRIBUTING.rst\n\n\n\n\n=========\n History\n=========\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on `Keep a Changelog <https://keepachangelog.com/en/1.0.0/>`_,\nand this project adheres to `Semantic Versioning <https://semver.org/spec/v2.0.0.html>`_.\n\nWhen updating this file, please add an entry for your change under\n`Not Yet Released`_ and one of the following headings:\n\n- Added - for new features.\n- Changed - for changes in existing functionality.\n- Deprecated - for soon-to-be removed features.\n- Removed - for now removed features.\n- Fixed - for any bug fixes.\n- Security - in case of vulnerabilities.\n\nIf the heading does not yet exist under `Not Yet Released`_, then add it\nas a 3rd level heading, underlined with pluses (see examples below).\n\nWhen preparing for a public release add a new 2nd level heading,\nunderlined with dashes under `Not Yet Released`_ with the version number\nand the release date, in year-month-day format (see examples below).\n\n\nNot Yet Released\n----------------\n\n\n1.3.2 (2022-02-05)\n------------------\n\nFixed\n+++++\n* The parser was requesting the next token after an end-statement, even\n  though nothing was done with this token (in the future it could\n  be a comment that should be processed).  In the very rare case\n  where all of the \"data\" bytes in a file with an attached PVL label\n  (like a .IMG or .cub file) actually convert to UTF with no\n  whitespace characters, that next token will take an unacceptable\n  amount of time to return, if it does at all.  The parser now does\n  not request additional tokens once an end-statement is identified\n  (Issue 104).\n\n\n1.3.1 (2022-02-05)\n------------------\n\nFixed\n+++++\n* Deeply nested Aggregation Blocks (Object or Group) which had mis-matched\n  Block Names should now properly result in LexerErrors instead of\n  resulting in StopIteration Exceptions (Issue 100).\n\n* The default \"Omni\" parsing strategy, now considers the ASCII NULL character\n  (\"\\0\") a \"reserved character.\" The practical effect is that the\n  ASCII NULL can not be in parameter names or unquoted strings (but\n  would still be successfully parsed in quoted strings). This means\n  that PVL-text that might have incorrectly used ASCII NULLs as\n  delimiters will once again be consumed by our omnivorous parser\n  (Issue 98).\n\n\n1.3.0 (2021-09-10)\n------------------\n\nAdded\n+++++\n* pvl.collections.Quantity objects now have __int__() and __float__()\n  functions that will return the int and float versions of their\n  .value parameter to facilitate numeric operations with Quantity\n  objects (Issue 91).\n* pvl.load() now has an `encoding=` parameter that is identical in usage\n  to the parameter passed to `open()`, and will attempt to decode the whole\n  file as if it had been encoded thusly.  If it encounters a decoding error,\n  it will fall back to decoding the bytes one at a time as ASCII text (Issue 93).\n\nFixed\n+++++\n* If the PVL-text contained characters beyond the set allowed by the\n  PVL specification, the OmniGrammar would refuse to parse them.\n  This has been fixed to allow any valid character to be parsed,\n  so that if there are weird UTF characters in the PVL-text, you'll get\n  those weird UTF characters in the returned dict-like.  When the\n  stricter PVL, ODL, or PDS3 dialects are used to \"load\" PVL-text,\n  they will properly fail to parse this text (Issue 93).\n* Empty parameters inside groups or objects (but not at the end), would\n  cause the default \"Omni\" parsing strategy to go into an infinite\n  loop.  Empty parameters in PVL, ODL, and PDS3 continue to not be\n  allowed (Issue 95).\n\n\n1.2.1 (2021-05-31)\n------------------\n\nAdded\n+++++\n* So many tests, increased coverage by about 10%.\n\nFixed\n+++++\n* Attempting to import `pvl.new` without *multidict* being available,\n  will now properly yield an ImportError.\n* The `dump()` and `dumps()` functions now properly overwritten in `pvl.new`.\n* All encoders that descended from PVLEncoder didn't properly have group_class and\n  object_class arguments to their constructors, now they do.\n* The `char_allowed()` function in grammar objects now raises a more useful ValueError\n  than just a generic Exception.\n* The new `collections.PVLMultiDict` wasn't correctly inserting Mapping objects with\n  the `insert_before()` and `insert_after()` methods.\n* The `token.Token` class's `__index__()` function didn't always properly return an\n  index.\n* The `token.Token` class's `__float__()` function would return int objects if the\n  token could be converted to int.  Now always returns floats.\n\n\n1.2.0 (2021-03-27)\n------------------\n\nAdded\n+++++\n* Added a default_timezone parameter to grammar objects so that they could\n  both communicate whether they had a default timezone (if not None),\n  and what it was.\n* Added a pvl.grammar.PDSGrammar class that specifies the default UTC\n  time offset.\n* Added a pvl.decoder.PDSLabelDecoder class that properly enforces only\n  milisecond time precision (not microsecond as ODL allows), and does\n  not allow times with a +HH:MM timezone specifier.  It does assume\n  any time without a timezone specifier is a UTC time.\n* Added a ``real_cls`` parameter to the decoder classes, so that users can specify\n  an arbitrary type with which real numbers in the PVL-text could be returned in\n  the dict-like from the loaders (defaults to ``float`` as you'd expect).\n* The encoders now support a broader range of real types to complement the decoders.\n\nChanged\n+++++++\n* Improved some build and test functionality.\n* Moved the is_identifier() static function from the ODLEncoder to the ODLDecoder\n  where it probably should have always been.\n\n\nFixed\n+++++\n* Very long Python ``str`` objects that otherwise qualified as ODL/PDS3 Symbol Strings,\n  would get written out with single-quotes, but they would then be split across lines\n  via the formatter, so they should be written as Text Strings with double-quotes.\n  Better protections have been put in place.\n* pvl.decoder.ODLDecoder now will return both \"aware\" and \"naive\"\n  datetime objects (as appropriate) since \"local\" times without a\n  timezone are allowed under ODL.\n* pvl.decoder.ODLDecoder will now properly reject any unquoted string\n  that does not parse as an ODL Identifier.\n* pvl.decoder.ODLDecoder will raise an exception if there is a seconds value\n  of 60 (which the PVLDecoder allows)\n* pvl.encoder.ODLEncoder will raise an exception if given a \"naive\" time\n  object.\n* pvl.encoder.PDSLabelEncoder will now properly raise an exception if\n  a time or datetime object cannot be represented with only milisecond\n  precision.\n\n\n1.1.0 (2020-12-04)\n------------------\n\nAdded\n+++++\n* Modified `pvl_validate` to more robustly deal with errors, and also provide\n  more error-reporting via `-v` and `-vv`.\n* Modified ISISGrammar so that it can parse comments that begin with an octothorpe (#).\n\nFixed\n+++++\n* Altered documentation in grammar.py that was incorrectly indicating that\n  there were parameters that could be passed on object initiation that would\n  alter how those objects behaved.\n\n\n1.0.1 (2020-09-21)\n------------------\n\nFixed\n+++++\n* The PDSLabelEncoder was improperly raising an exception if the Python datetime\n  object to encode had a tzinfo component that had zero offset from UTC.\n\n\n1.0.0 (2020-08-23)\n------------------\nThis production version of the pvl library consists of significant\nAPI and functionality changes from the 0.x version that has been\nin use for 5 years (a credit to Trevor Olson's skills).  The\ndocumentation has been significantly upgraded, and various granular\nchanges over the 10 alpha versions of 1.0.0 over the last 8 months\nare detailed in their entries below.  However, here is a high-level\noverview of what changed from the 0.x version:\n\nAdded\n+++++\n* ``pvl.load()`` and ``pvl.dump()`` take all of the arguments that they could take\n  before (string containing a filename, byte streams, etc.), but now also accept any\n  ``os.PathLike`` object, or even an already-opened file object.\n* ``pvl.loadu()`` function will load PVL text from URLs.\n* Utility programs `pvl_validate` and `pvl_translate` were added, please see\n  the \"Utility Programs\" section of the documentation for more information.\n* The library can now parse and encode PVL Values with Units expressions\n  with third-party quantity objects like `astropy.units.Quantity` and `pint.Quantity`.\n  Please see the \"Quantities: Values and Units\" section of the documentation.\n* Implemented a new PVLMultiDict (optional, needs 3rd party multidict library) which\n  which has more pythonic behaviors than the existing OrderedMultiDict.  Experiment\n  with getting it returned by the loaders by altering your import statement to\n  ``import pvl.new as pvl`` and then using the loaders as usual to get the new object\n  returned to you.\n\nChanged\n+++++++\n* Only guaranteed to work with Python 3.6 and above.\n* Rigorously implemented the three dialects of PVL text: PVL itself,\n  ODL, and the PDS3 Label Standard.  There is a fourth de-facto\n  dialect, that of ISIS cube labels that is also handled.  Please see\n  the \"Standards & Specifications\" section of the documentation.\n* There is now a default dialect for the dump functions: the PDS3 Label Standard.\n  This is different and more strict than before, but other output dialects are\n  possible.  Please see the \"Writing out PVL text\" section in the documentation\n  for more information, and how to enable an output similar to the 0.x output.\n* There are now ``pvl.collections`` and ``pvl.exceptions`` modules.  There was previously\n  an internal ``pvl._collections`` module, and the exception classes were scattered through\n  the other modules.\n\nFixed\n+++++\n* All ``datetime.time`` and ``datetime.datetime`` objects returned from the loaders\n  are now timezone \"aware.\" Previously some were and some were not.\n* Functionality to correctly parse dash (-) continuation lines in ISIS output is\n  now supported.\n* The library now properly parses quoted strings that include backslashes.\n\n\nDeprecated\n++++++++++\n* The `pvl.collections.Units` object is deprecated in favor of\n  the new ``pvl.collections.Quantity`` object (really a name-only change, no functionality\n  difference).\n\n\n1.0.0-alpha.9 (2020-08-18)\n--------------------------\n* Minor addition to pvl.collections.MutableMappingSequence.\n* Implemented PVLMultiDict which is based on the 3rd Party\n  `multidict.MultiDict` object as an option to use instead\n  of the default OrderedMultiDict.  The new PVLMultiDict\n  is better aligned with the Python 3 way that Mapping\n  objects behave.\n* Enhanced the existing OrderedMultiDict with some functionality\n  that extends its behavior closer to the Python 3 ideal, and\n  inserted warnings about how the retained non-Python-3\n  behaviors might be removed at the next major patch.\n* Implemented pvl.new that can be included for those that wish\n  to try out what getting the new PVLMultiDict returned from\n  the loaders might be like by just changing an import statement.\n\n1.0.0-alpha.8 (2020-08-01)\n--------------------------\n* Renamed the _collections module to just collections.\n* Renamed the Units class to Quantity (Units remains, but has a deprecation warning).\n* Defined a new ABC: pvl.collections.MutableMappingSequence\n* More detail for these changes can be found in Issue #62.\n\n1.0.0-alpha.7 (2020-07-29)\n--------------------------\n* Created a new exceptions.py module and grouped all pvl Exceptions\n  there.  Addresses #58\n* Altered the message that LexerError emits to provide context\n  around the character that caused the error.\n* Added bump2version configuration file.\n\n1.0.0-alpha.6 (2020-07-27)\n--------------------------\n* Enforced that all datetime.time and datetime.datetime objects\n  returned should be timezone \"aware.\"  This breaks 0.x functionality\n  where some were and some weren't.  Addresses #57.\n\n\n1.0.0-alpha.5 (2020-05-30)\n--------------------------\n* ISIS creates PVL text with unquoted plus signs (\"+\"), needed to adjust\n  the ISISGrammar and OmniGrammar objects to parse this properly (#59).\n* In the process of doing so, realized that we have some classes that\n  optionally take a grammar and a decoder, and if they aren't given, to default.\n  However, a decoder *has* a grammar object, so if a grammar isn't provided, but\n  a decoder is, the grammar should be taken from the decoder, otherwise you\n  could get confusing behavior.\n* Updated pvl_validate to be explicit about these arguments.\n* Added a --version argument to both pvl_translate and pvl_validate.\n\n1.0.0.-alpha.4 (2020-05-29)\n---------------------------\n* Added the pvl.loadu() function as a convenience function to load PVL text from\n  URLs.\n\n1.0.0-alpha.3 (2020-05-28)\n--------------------------\n* Implemented tests in tox and Travis for Python 3.8, and discovered a bug\n  that we fixed (#54).\n\n1.0.0-alpha.2 (2020-04-18)\n--------------------------\n* The ability to deal with 3rd-party 'quantity' objects like astropy.units.Quantity\n  and pint.Quantity was added and documented, addresses #22.\n\n1.0.0-alpha.1 (2020-04-17)\n--------------------------\nThis is a bugfix on 1.0.0-alpha to properly parse scientific notation\nand deal with properly catching an error.\n\n\n1.0.0-alpha (winter 2019-2020)\n------------------------------\nThis is the alpha version of release 1.0.0 for pvl, and the items\nhere and in other 'alpha' entries may be consolidated when 1.0.0\nis released.  This work is categorized as 1.0.0-alpha because\nbackwards-incompatible changes are being introduced to the codebase.\n\n* Refactored code so that it will no longer support Python 2, \n  and is only guaranteed to work with Python 3.6 and above.\n* Rigorously implemented the three dialects of PVL text: PVL itself,\n  ODL, and the PDS3 Label Standard.  There is a fourth de-facto\n  dialect, that of ISIS cube labels that is also handled.  These\n  dialects each have their own grammars, parsers, decoders, and\n  encoders, and there are also some 'Omni' versions of same that\n  handle the widest possible range of PVL text.\n* When parsing via the loaders, ``pvl`` continues to consume as\n  wide a variety of PVL text as is reasonably possible, just like\n  always.  However, now when encoding via the dumpers, ``pvl`` will\n  default to writing out PDS3 Label Standard format PVL text, one\n  of the strictest dialects, but other options are available.  This\n  behavior is different from the pre-1.0 version, which wrote out \n  more generic PVL text.\n* Removed the dependency on the ``six`` library that provided Python 2\n  compatibility.\n* Removed the dependency on the ``pytz`` library that provided 'timezone'\n  support, as that functionality is replaced with the Standard Library's\n  ``datetime`` module.\n* The private ``pvl/_numbers.py`` file was removed, as its capability is now\n  accomplished with the Python Standard Library.\n* The private ``pvl/_datetimes.py`` file was removed, as its capability is now\n  accomplished with the Standard Library's ``datetime`` module.\n* the private ``pvl/_strings.py`` file was removed, as its capabilities are now\n  mostly replaced with the new grammar module and some functions in other new\n  modules.\n* Internally, the library is now working with string objects, not byte literals, \n  so the ``pvl/stream.py`` module is no longer needed.\n* Added an optional dependency on the 3rd party ``dateutil`` library, to parse\n  more exotic date and time formats.  If this library is not present, the\n  ``pvl`` library will gracefully fall back to not parsing more exotic\n  formats. \n* Implmented a more formal approach to parsing PVL text:  The properties\n  of the PVL language are represented by a grammar object.  A string is\n  broken into tokens by the lexer function.  Those tokens are parsed by a\n  parser object, and when a token needs to be converted to a Python object,\n  a decoder object does that job.  When a Python object must be converted to\n  PVL text, an encoder object does that job.\n* Since the tests in ``tests/test_decoder.py`` and ``tests/test_encoder.py``\n  were really just exercising the loader and dumper functions, those tests were\n  moved to ``tests/test_pvl.py``, but all still work (with light modifications for\n  the new defaults).  Unit tests were added for most of the new classes and\n  functions.  All docstring tests now also pass doctest testing and are now\n  included in the ``make test`` target.\n* Functionality to correctly parse dash (-) continuation lines written by ISIS\n  as detailed in #34 is implemented and tested.\n* Functionality to use ``pathlib.Path`` objects for ``pvl.load()`` and\n  ``pvl.dump()`` as requested in #20 and #31 is implemented and tested.\n* Functionality to accept already-opened file objects that were opened in \n  'r' mode or 'rb' mode as alluded to in #6 is implemented and tested.\n* The library now properly parses quoted strings that include backslashes\n  as detailed in #33.\n* Utility programs pvl_validate and pvl_translate were added.\n* Documentation was updated and expanded.\n\n0.3.0 (2017-06-28)\n------------------\n\n* Create methods to add items to the label\n* Give user option to allow the parser to succeed in parsing broken labels\n\n0.2.0 (2015-08-13)\n------------------\n\n* Drastically increase test coverage.\n* Lots of bug fixes.\n* Add Cube and PDS encoders.\n* Cleanup README.\n* Use pvl specification terminology.\n* Added element access by index and slice.\n\n0.1.1 (2015-06-01)\n------------------\n\n* Fixed issue with reading Pancam PDS Products.\n\n0.1.0 (2015-05-30)\n------------------\n\n* First release on PyPI.\n\n\n","description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/planetarypy/pvl","keywords":"pvl","license":"BSD","maintainer":"Ross Beyer","maintainer_email":"rbeyer@rossbeyer.net","name":"pvl","package_url":"https://pypi.org/project/pvl/","platform":null,"project_url":"https://pypi.org/project/pvl/","project_urls":{"Homepage":"https://github.com/planetarypy/pvl"},"provides_extra":null,"release_url":"https://pypi.org/project/pvl/1.3.2/","requires_dist":["astropy ; extra == 'allopts'","multidict ; extra == 'allopts'","pint ; extra == 'allopts'","python-dateutil ; extra == 'allopts'","python-dateutil ; extra == 'dateutil'","multidict ; extra == 'multidict'","astropy ; extra == 'quantities'","pint ; extra == 'quantities'"],"requires_python":"","summary":"Python implementation for PVL (Parameter Value Language) parsing and encoding.","version":"1.3.2","yanked":false,"yanked_reason":null},"last_serial":14734437,"releases":{"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"722c6a31522af2bae1349f14f839a2e99f6b4e6862c945a567fde9de1879b283","md5":"5a585a97fdabd2631e78d7bec6bd49f2","sha256":"205f8f1fdd059c057f37a78addd958128e80ff4d2fe5049dd2b6df47537dd3e4"},"downloads":-1,"filename":"pvl-0.1.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"5a585a97fdabd2631e78d7bec6bd49f2","packagetype":"bdist_wheel","python_version":"2.7","requires_python":null,"size":12153,"upload_time":"2015-05-30T21:28:58","upload_time_iso_8601":"2015-05-30T21:28:58.758829Z","url":"https://files.pythonhosted.org/packages/72/2c/6a31522af2bae1349f14f839a2e99f6b4e6862c945a567fde9de1879b283/pvl-0.1.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"73c4ae18be58242dc4bdad8427b599b2d3dc7298ed575d94e669705568cc4773","md5":"bd84494239fcdad6f6a3bc7803ab7c88","sha256":"32449aee821a9ea29319546ea0f44650f48cf266ec0c99abe8eae1427bf574f2"},"downloads":-1,"filename":"pvl-0.1.0.tar.gz","has_sig":false,"md5_digest":"bd84494239fcdad6f6a3bc7803ab7c88","packagetype":"sdist","python_version":"source","requires_python":null,"size":51118,"upload_time":"2015-05-30T21:28:54","upload_time_iso_8601":"2015-05-30T21:28:54.051321Z","url":"https://files.pythonhosted.org/packages/73/c4/ae18be58242dc4bdad8427b599b2d3dc7298ed575d94e669705568cc4773/pvl-0.1.0.tar.gz","yanked":false,"yanked_reason":null}],"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"d747e6003df1bf7649d6e5318150b9b20646d482e987b96a1b51de605724b800","md5":"45c41019de7f55f504d35337454f0024","sha256":"761666a62ffce07425b54376fc97626ec24d7f8732787a8cd101bb28dca3b83f"},"downloads":-1,"filename":"pvl-0.1.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"45c41019de7f55f504d35337454f0024","packagetype":"bdist_wheel","python_version":"3.4","requires_python":null,"size":13477,"upload_time":"2015-06-02T11:42:00","upload_time_iso_8601":"2015-06-02T11:42:00.237154Z","url":"https://files.pythonhosted.org/packages/d7/47/e6003df1bf7649d6e5318150b9b20646d482e987b96a1b51de605724b800/pvl-0.1.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3364e5e0ec39f5fa7716bca5cc964bdf5cf99e731ca1d9f7f818c0e669012f28","md5":"aea2c117b5ec14b40eef1397c4434490","sha256":"f659d96f168942a34c20ea088ef2fc36ca915e7eb5c9a597b1961fd3c456aa43"},"downloads":-1,"filename":"pvl-0.1.1.tar.gz","has_sig":false,"md5_digest":"aea2c117b5ec14b40eef1397c4434490","packagetype":"sdist","python_version":"source","requires_python":null,"size":58832,"upload_time":"2015-06-02T11:41:54","upload_time_iso_8601":"2015-06-02T11:41:54.087942Z","url":"https://files.pythonhosted.org/packages/33/64/e5e0ec39f5fa7716bca5cc964bdf5cf99e731ca1d9f7f818c0e669012f28/pvl-0.1.1.tar.gz","yanked":false,"yanked_reason":null}],"0.2.0":[{"comment_text":"","digests":{"blake2b_256":"96ba2b08ad600313a9829fa969bd3c41b560c531d0e745bbb5acac85f0f2b40b","md5":"4a7b1c94fb425b22de87ba2e1e020dd8","sha256":"374e0c82bf53520066abc3f4b99b7cdd45f635519d28064add6f6b781279d491"},"downloads":-1,"filename":"pvl-0.2.0.tar.gz","has_sig":false,"md5_digest":"4a7b1c94fb425b22de87ba2e1e020dd8","packagetype":"sdist","python_version":"source","requires_python":null,"size":1409683,"upload_time":"2015-08-13T13:40:00","upload_time_iso_8601":"2015-08-13T13:40:00.304935Z","url":"https://files.pythonhosted.org/packages/96/ba/2b08ad600313a9829fa969bd3c41b560c531d0e745bbb5acac85f0f2b40b/pvl-0.2.0.tar.gz","yanked":false,"yanked_reason":null}],"0.3.0":[{"comment_text":"","digests":{"blake2b_256":"0df2bfbcebb4e50482aea4a184bb760b80d0b3fcc7cdfeeb357912fa715148ea","md5":"0dd806d3d4a8e242247d59f3ce65af55","sha256":"8074789627a1aecf57b677456d9922483c903d3da4ccc265e918ad21e2bac87f"},"downloads":-1,"filename":"pvl-0.3.0.tar.gz","has_sig":false,"md5_digest":"0dd806d3d4a8e242247d59f3ce65af55","packagetype":"sdist","python_version":"source","requires_python":null,"size":68080,"upload_time":"2017-05-29T22:32:50","upload_time_iso_8601":"2017-05-29T22:32:50.309444Z","url":"https://files.pythonhosted.org/packages/0d/f2/bfbcebb4e50482aea4a184bb760b80d0b3fcc7cdfeeb357912fa715148ea/pvl-0.3.0.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0":[{"comment_text":"","digests":{"blake2b_256":"03a25a9e9005d58f447ad18c7af075f8848e8b96349a077dfd363c3c70c3ffff","md5":"4438d834ffedbdb9e51ab8ea204ab397","sha256":"fff2a6f1db9b3140a62eee72274d0705c34830047c22a71e3fec681aa4acae97"},"downloads":-1,"filename":"pvl-1.0.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"4438d834ffedbdb9e51ab8ea204ab397","packagetype":"bdist_wheel","python_version":"3.7","requires_python":null,"size":60033,"upload_time":"2020-09-08T20:38:34","upload_time_iso_8601":"2020-09-08T20:38:34.355254Z","url":"https://files.pythonhosted.org/packages/03/a2/5a9e9005d58f447ad18c7af075f8848e8b96349a077dfd363c3c70c3ffff/pvl-1.0.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d961e3b5319c07597ad8c700580d5985f4dc39eaa13c9e51d16bbcf3e16cbf64","md5":"12502866801a88098c18143b2b52dc57","sha256":"2953839958abafa98dafb3a5d4c72db3c9530165e642b8e3ca23498ac698dfdd"},"downloads":-1,"filename":"pvl-1.0.0.tar.gz","has_sig":false,"md5_digest":"12502866801a88098c18143b2b52dc57","packagetype":"sdist","python_version":"source","requires_python":null,"size":136604,"upload_time":"2020-09-08T20:38:31","upload_time_iso_8601":"2020-09-08T20:38:31.853255Z","url":"https://files.pythonhosted.org/packages/d9/61/e3b5319c07597ad8c700580d5985f4dc39eaa13c9e51d16bbcf3e16cbf64/pvl-1.0.0.tar.gz","yanked":false,"yanked_reason":null}],"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"7702ddee8eaf801be83ca0b227c2b822ceb16c27cb977eba3f40cf52c62ee9cd","md5":"7be64e2b66fc3492e8b64cabed067e64","sha256":"bd937fb41fe1acc8f1829569b985e86207ba073d807727421a543ba6d76c6aa4"},"downloads":-1,"filename":"pvl-1.0.1.tar.gz","has_sig":false,"md5_digest":"7be64e2b66fc3492e8b64cabed067e64","packagetype":"sdist","python_version":"source","requires_python":null,"size":139520,"upload_time":"2020-09-24T16:42:59","upload_time_iso_8601":"2020-09-24T16:42:59.688626Z","url":"https://files.pythonhosted.org/packages/77/02/ddee8eaf801be83ca0b227c2b822ceb16c27cb977eba3f40cf52c62ee9cd/pvl-1.0.1.tar.gz","yanked":false,"yanked_reason":null}],"1.1.0":[{"comment_text":"","digests":{"blake2b_256":"7a4a5326c581f76266d7f8fe505ca762f8cc0d55a3d3c03e18d11a162ed03312","md5":"e8dd119ccbc52a859accce77e432fc44","sha256":"80ad9d06b1d0fb34a5e262f01348e0f0e32b43775b8ce97b9e317eadd2ea79f1"},"downloads":-1,"filename":"pvl-1.1.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"e8dd119ccbc52a859accce77e432fc44","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":60831,"upload_time":"2020-12-13T17:30:23","upload_time_iso_8601":"2020-12-13T17:30:23.322831Z","url":"https://files.pythonhosted.org/packages/7a/4a/5326c581f76266d7f8fe505ca762f8cc0d55a3d3c03e18d11a162ed03312/pvl-1.1.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"7292bd9cfdc669600c5f8bd626ddf08eea4aed8b53f0463aa0f64969ad9f95df","md5":"b3277763ff8579e3c3d1c28362f38f44","sha256":"495079b8557ead7c4d0c7596ef10e2b2166762536c65046990d345b732d8af6d"},"downloads":-1,"filename":"pvl-1.1.0.tar.gz","has_sig":false,"md5_digest":"b3277763ff8579e3c3d1c28362f38f44","packagetype":"sdist","python_version":"source","requires_python":null,"size":140814,"upload_time":"2020-12-13T17:30:24","upload_time_iso_8601":"2020-12-13T17:30:24.819648Z","url":"https://files.pythonhosted.org/packages/72/92/bd9cfdc669600c5f8bd626ddf08eea4aed8b53f0463aa0f64969ad9f95df/pvl-1.1.0.tar.gz","yanked":false,"yanked_reason":null}],"1.2.0":[{"comment_text":"","digests":{"blake2b_256":"c215e0270220a7e0279a02dfefd317665a5ecb42dfc1670eb9d0b40a9c5becd1","md5":"8e6811c7cb154f096236ecdd251ba8b6","sha256":"d7282633d60e32781eddc324c0d56b5299c18bbbd52d88a0ec487fd2e625ee83"},"downloads":-1,"filename":"pvl-1.2.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"8e6811c7cb154f096236ecdd251ba8b6","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":63397,"upload_time":"2021-03-28T00:28:07","upload_time_iso_8601":"2021-03-28T00:28:07.183626Z","url":"https://files.pythonhosted.org/packages/c2/15/e0270220a7e0279a02dfefd317665a5ecb42dfc1670eb9d0b40a9c5becd1/pvl-1.2.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e26d5809c4c74cd9e256a3df2bfc695352d1cb40a8ab7cdaed7c0110ce2e1227","md5":"f04c475a1a58fff6bf6f4ceea86f0fa4","sha256":"9f227c2883f968075907dcc6fa16bc94393fd27778a65c308217f3425ce2143f"},"downloads":-1,"filename":"pvl-1.2.0.tar.gz","has_sig":false,"md5_digest":"f04c475a1a58fff6bf6f4ceea86f0fa4","packagetype":"sdist","python_version":"source","requires_python":null,"size":145505,"upload_time":"2021-03-28T00:28:09","upload_time_iso_8601":"2021-03-28T00:28:09.333349Z","url":"https://files.pythonhosted.org/packages/e2/6d/5809c4c74cd9e256a3df2bfc695352d1cb40a8ab7cdaed7c0110ce2e1227/pvl-1.2.0.tar.gz","yanked":false,"yanked_reason":null}],"1.2.1":[{"comment_text":"","digests":{"blake2b_256":"9e786175bec506afdedf5d81d36d02945eac3154d4d5bfed85efd77e540cb912","md5":"4bd1c69c711462ba8c2dae55bdd3e386","sha256":"9d7df307cef0f9fce449d78322d41927043b19bd6277d8ccaa820886f04567eb"},"downloads":-1,"filename":"pvl-1.2.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"4bd1c69c711462ba8c2dae55bdd3e386","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":64481,"upload_time":"2021-06-07T23:17:32","upload_time_iso_8601":"2021-06-07T23:17:32.383672Z","url":"https://files.pythonhosted.org/packages/9e/78/6175bec506afdedf5d81d36d02945eac3154d4d5bfed85efd77e540cb912/pvl-1.2.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"34ea1d8186914f506b676b668f5561621d05d22ae30b648505cdda1b470d04bb","md5":"81f8c2373bb69964f2e8bda729efe4b3","sha256":"dc58413daff37c351f653543a8285859b53c9ea0e327c1dd293dc11922db5589"},"downloads":-1,"filename":"pvl-1.2.1.tar.gz","has_sig":false,"md5_digest":"81f8c2373bb69964f2e8bda729efe4b3","packagetype":"sdist","python_version":"source","requires_python":null,"size":143360,"upload_time":"2021-06-07T23:17:34","upload_time_iso_8601":"2021-06-07T23:17:34.265782Z","url":"https://files.pythonhosted.org/packages/34/ea/1d8186914f506b676b668f5561621d05d22ae30b648505cdda1b470d04bb/pvl-1.2.1.tar.gz","yanked":false,"yanked_reason":null}],"1.3.0":[{"comment_text":"","digests":{"blake2b_256":"5bf203a10edaf8acd28c5f1c25279248934875b8b269f8e3113c4f735f8178a2","md5":"d88a8c7466befb936f20458c4ee2fdd2","sha256":"31bd5ae9f7f83c80570499191cc1a71798cb9b4e1b0e46a0d13ed7874aaa38f6"},"downloads":-1,"filename":"pvl-1.3.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"d88a8c7466befb936f20458c4ee2fdd2","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":65141,"upload_time":"2021-09-11T03:52:28","upload_time_iso_8601":"2021-09-11T03:52:28.461362Z","url":"https://files.pythonhosted.org/packages/5b/f2/03a10edaf8acd28c5f1c25279248934875b8b269f8e3113c4f735f8178a2/pvl-1.3.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4fd34c8dd91396700f29575bedaeba75f11c3d957b76692be69b88e88662a854","md5":"fcabd4283f4c626b3beaacb1fdcea699","sha256":"c7b680f6da4bc184663137d4cce66c9541a8ca7381f44d7344d752c2e2384469"},"downloads":-1,"filename":"pvl-1.3.0.tar.gz","has_sig":false,"md5_digest":"fcabd4283f4c626b3beaacb1fdcea699","packagetype":"sdist","python_version":"source","requires_python":null,"size":152030,"upload_time":"2021-09-11T03:52:30","upload_time_iso_8601":"2021-09-11T03:52:30.402461Z","url":"https://files.pythonhosted.org/packages/4f/d3/4c8dd91396700f29575bedaeba75f11c3d957b76692be69b88e88662a854/pvl-1.3.0.tar.gz","yanked":false,"yanked_reason":null}],"1.3.1":[{"comment_text":"","digests":{"blake2b_256":"4f1155d46928d4488cd8af54fdd6e1e45adb1c05efef9c9d01276ffa4c2714f2","md5":"0960c4cba661945968f0287397adb565","sha256":"c6691864c2d82444cca0f0a1fd2641d026463d33904559866444a1e3a43c55dd"},"downloads":-1,"filename":"pvl-1.3.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"0960c4cba661945968f0287397adb565","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":65465,"upload_time":"2022-02-06T00:35:35","upload_time_iso_8601":"2022-02-06T00:35:35.063207Z","url":"https://files.pythonhosted.org/packages/4f/11/55d46928d4488cd8af54fdd6e1e45adb1c05efef9c9d01276ffa4c2714f2/pvl-1.3.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"edc6b409ac9f5f27e653477c6eebc4f0e41e001584796a1d39e4f58ab7451145","md5":"b5d46a971aacbe51ea7966f732d36ae5","sha256":"e7997ad86d21f0546bcfdad503fd2d30ca88bc37488a0ffd0f5d0c9ff84e7fc2"},"downloads":-1,"filename":"pvl-1.3.1.tar.gz","has_sig":false,"md5_digest":"b5d46a971aacbe51ea7966f732d36ae5","packagetype":"sdist","python_version":"source","requires_python":null,"size":150673,"upload_time":"2022-02-06T00:35:37","upload_time_iso_8601":"2022-02-06T00:35:37.030390Z","url":"https://files.pythonhosted.org/packages/ed/c6/b409ac9f5f27e653477c6eebc4f0e41e001584796a1d39e4f58ab7451145/pvl-1.3.1.tar.gz","yanked":false,"yanked_reason":null}],"1.3.2":[{"comment_text":"","digests":{"blake2b_256":"e94fd201cd27b306568013c75b429726267fc9b5049c4b8e23e444cf2eb52f0f","md5":"aed1be899229b88666af155c3b08276a","sha256":"e25a72f468e82a48b55645d0e96e55c3313f90056832aaeb42b351d1dd648d4e"},"downloads":-1,"filename":"pvl-1.3.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"aed1be899229b88666af155c3b08276a","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":66082,"upload_time":"2022-08-11T23:27:11","upload_time_iso_8601":"2022-08-11T23:27:11.980045Z","url":"https://files.pythonhosted.org/packages/e9/4f/d201cd27b306568013c75b429726267fc9b5049c4b8e23e444cf2eb52f0f/pvl-1.3.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"512063c4e77d106de29e59fe5d1b123de7c61242300b2315c2a57630022a5bf5","md5":"19392a32cf906879501295ca8273cf55","sha256":"7d07baa88af26d2ff04a3548a54392de3245dea13f23d964dc8ed725a5efc6a2"},"downloads":-1,"filename":"pvl-1.3.2.tar.gz","has_sig":false,"md5_digest":"19392a32cf906879501295ca8273cf55","packagetype":"sdist","python_version":"source","requires_python":null,"size":153093,"upload_time":"2022-08-11T23:27:14","upload_time_iso_8601":"2022-08-11T23:27:14.036342Z","url":"https://files.pythonhosted.org/packages/51/20/63c4e77d106de29e59fe5d1b123de7c61242300b2315c2a57630022a5bf5/pvl-1.3.2.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"e94fd201cd27b306568013c75b429726267fc9b5049c4b8e23e444cf2eb52f0f","md5":"aed1be899229b88666af155c3b08276a","sha256":"e25a72f468e82a48b55645d0e96e55c3313f90056832aaeb42b351d1dd648d4e"},"downloads":-1,"filename":"pvl-1.3.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"aed1be899229b88666af155c3b08276a","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":66082,"upload_time":"2022-08-11T23:27:11","upload_time_iso_8601":"2022-08-11T23:27:11.980045Z","url":"https://files.pythonhosted.org/packages/e9/4f/d201cd27b306568013c75b429726267fc9b5049c4b8e23e444cf2eb52f0f/pvl-1.3.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"512063c4e77d106de29e59fe5d1b123de7c61242300b2315c2a57630022a5bf5","md5":"19392a32cf906879501295ca8273cf55","sha256":"7d07baa88af26d2ff04a3548a54392de3245dea13f23d964dc8ed725a5efc6a2"},"downloads":-1,"filename":"pvl-1.3.2.tar.gz","has_sig":false,"md5_digest":"19392a32cf906879501295ca8273cf55","packagetype":"sdist","python_version":"source","requires_python":null,"size":153093,"upload_time":"2022-08-11T23:27:14","upload_time_iso_8601":"2022-08-11T23:27:14.036342Z","url":"https://files.pythonhosted.org/packages/51/20/63c4e77d106de29e59fe5d1b123de7c61242300b2315c2a57630022a5bf5/pvl-1.3.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
