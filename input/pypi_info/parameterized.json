{"info":{"author":"","author_email":"David Wolever <david@wolever.net>","bugtrack_url":null,"classifiers":["License :: OSI Approved :: BSD License","Programming Language :: Python :: 3"],"description":"Parameterized testing with any Python test framework\n====================================================\n\n.. image:: https://img.shields.io/pypi/v/parameterized\n    :alt: PyPI\n    :target: https://pypi.org/project/parameterized/\n\n.. image:: https://img.shields.io/pypi/dm/parameterized\n    :alt: PyPI - Downloads\n    :target: https://pypi.org/project/parameterized/\n\n.. image:: https://circleci.com/gh/wolever/parameterized.svg?style=svg\n    :alt: Circle CI\n    :target: https://circleci.com/gh/wolever/parameterized\n\n\nParameterized testing in Python sucks.\n\n``parameterized`` fixes that. For everything. Parameterized testing for nose,\nparameterized testing for py.test, parameterized testing for unittest.\n\n.. code:: python\n\n   # test_math.py\n   from nose.tools import assert_equal\n   from parameterized import parameterized, parameterized_class\n\n   import unittest\n   import math\n\n   @parameterized([\n       (2, 2, 4),\n       (2, 3, 8),\n       (1, 9, 1),\n       (0, 9, 0),\n   ])\n   def test_pow(base, exponent, expected):\n      assert_equal(math.pow(base, exponent), expected)\n\n   class TestMathUnitTest(unittest.TestCase):\n      @parameterized.expand([\n          (\"negative\", -1.5, -2.0),\n          (\"integer\", 1, 1.0),\n          (\"large fraction\", 1.6, 1),\n      ])\n      def test_floor(self, name, input, expected):\n          assert_equal(math.floor(input), expected)\n\n   @parameterized_class(('a', 'b', 'expected_sum', 'expected_product'), [\n      (1, 2, 3, 2),\n      (5, 5, 10, 25),\n   ])\n   class TestMathClass(unittest.TestCase):\n      def test_add(self):\n         assert_equal(self.a + self.b, self.expected_sum)\n\n      def test_multiply(self):\n         assert_equal(self.a * self.b, self.expected_product)\n\n   @parameterized_class([\n      { \"a\": 3, \"expected\": 2 },\n      { \"b\": 5, \"expected\": -4 },\n   ])\n   class TestMathClassDict(unittest.TestCase):\n      a = 1\n      b = 1\n\n      def test_subtract(self):\n         assert_equal(self.a - self.b, self.expected)\n\n\nWith nose (and nose2)::\n\n    $ nosetests -v test_math.py\n    test_floor_0_negative (test_math.TestMathUnitTest) ... ok\n    test_floor_1_integer (test_math.TestMathUnitTest) ... ok\n    test_floor_2_large_fraction (test_math.TestMathUnitTest) ... ok\n    test_math.test_pow(2, 2, 4, {}) ... ok\n    test_math.test_pow(2, 3, 8, {}) ... ok\n    test_math.test_pow(1, 9, 1, {}) ... ok\n    test_math.test_pow(0, 9, 0, {}) ... ok\n    test_add (test_math.TestMathClass_0) ... ok\n    test_multiply (test_math.TestMathClass_0) ... ok\n    test_add (test_math.TestMathClass_1) ... ok\n    test_multiply (test_math.TestMathClass_1) ... ok\n    test_subtract (test_math.TestMathClassDict_0) ... ok\n\n    ----------------------------------------------------------------------\n    Ran 12 tests in 0.015s\n\n    OK\n\nAs the package name suggests, nose is best supported and will be used for all\nfurther examples.\n\n\nWith py.test (version 2.0 and above)::\n\n    $ py.test -v test_math.py\n    ============================= test session starts ==============================\n    platform darwin -- Python 3.6.1, pytest-3.1.3, py-1.4.34, pluggy-0.4.0\n    collecting ... collected 13 items\n\n    test_math.py::test_pow::[0] PASSED\n    test_math.py::test_pow::[1] PASSED\n    test_math.py::test_pow::[2] PASSED\n    test_math.py::test_pow::[3] PASSED\n    test_math.py::TestMathUnitTest::test_floor_0_negative PASSED\n    test_math.py::TestMathUnitTest::test_floor_1_integer PASSED\n    test_math.py::TestMathUnitTest::test_floor_2_large_fraction PASSED\n    test_math.py::TestMathClass_0::test_add PASSED\n    test_math.py::TestMathClass_0::test_multiply PASSED\n    test_math.py::TestMathClass_1::test_add PASSED\n    test_math.py::TestMathClass_1::test_multiply PASSED\n    test_math.py::TestMathClassDict_0::test_subtract PASSED\n    ==================== 12 passed, 4 warnings in 0.16 seconds =====================\n\nWith unittest (and unittest2)::\n\n    $ python -m unittest -v test_math\n    test_floor_0_negative (test_math.TestMathUnitTest) ... ok\n    test_floor_1_integer (test_math.TestMathUnitTest) ... ok\n    test_floor_2_large_fraction (test_math.TestMathUnitTest) ... ok\n    test_add (test_math.TestMathClass_0) ... ok\n    test_multiply (test_math.TestMathClass_0) ... ok\n    test_add (test_math.TestMathClass_1) ... ok\n    test_multiply (test_math.TestMathClass_1) ... ok\n    test_subtract (test_math.TestMathClassDict_0) ... ok\n\n    ----------------------------------------------------------------------\n    Ran 8 tests in 0.001s\n\n    OK\n\n(note: because unittest does not support test decorators, only tests created\nwith ``@parameterized.expand`` will be executed)\n\nWith green::\n\n    $ green test_math.py -vvv\n    test_math\n      TestMathClass_1\n    .   test_method_a\n    .   test_method_b\n      TestMathClass_2\n    .   test_method_a\n    .   test_method_b\n      TestMathClass_3\n    .   test_method_a\n    .   test_method_b\n      TestMathUnitTest\n    .   test_floor_0_negative\n    .   test_floor_1_integer\n    .   test_floor_2_large_fraction\n      TestMathClass_0\n    .   test_add\n    .   test_multiply\n      TestMathClass_1\n    .   test_add\n    .   test_multiply\n      TestMathClassDict_0\n    .   test_subtract\n\n    Ran 12 tests in 0.121s\n\n    OK (passes=9)\n\n\nInstallation\n------------\n\n::\n\n    $ pip install parameterized\n\n\nCompatibility\n-------------\n\n`Yes`__ (mostly).\n\n__ https://app.circleci.com/pipelines/github/wolever/parameterized?branch=master\n\n.. list-table::\n   :header-rows: 1\n   :stub-columns: 1\n\n   * -\n     - Py3.7\n     - Py3.8\n     - Py3.9\n     - Py3.10\n     - Py3.11\n     - PyPy3\n     - ``@mock.patch``\n   * - nose\n     - yes\n     - yes\n     - yes\n     - yes\n     - no§\n     - no§\n     - yes\n   * - nose2\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n   * - py.test 2\n     - no*\n     - no*\n     - no*\n     - no*\n     - no*\n     - no*\n     - no*\n   * - py.test 3\n     - yes\n     - yes\n     - yes\n     - yes\n     - no*\n     - no*\n     - yes\n   * - py.test 4\n     - no**\n     - no**\n     - no**\n     - no**\n     - no**\n     - no**\n     - no**\n   * - py.test fixtures\n     - no†\n     - no†\n     - no†\n     - no†\n     - no†\n     - no†\n     - no†\n   * - | unittest\n       | (``@parameterized.expand``)\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n     - yes\n   * - | unittest2\n       | (``@parameterized.expand``)\n     - yes\n     - yes\n     - yes\n     - yes\n     - no§\n     - no§\n     - yes\n\n§: nose and unittest2 - both of which were last updated in 2015 - sadly do not\nappear to support Python 3.10 or 3.11.\n\n\\*: `py.test 2 does not appear to work under Python 3 (#71)`__, and\n`py.test 3 does not appear to work under Python 3.10 or 3.11 (#154)`__.\n\n\\*\\*: py.test 4 is not yet supported (but coming!) in `issue #34`__\n\n†: py.test fixture support is documented in `issue #81`__\n\n\n__ https://github.com/wolever/parameterized/issues/71\n__ https://github.com/wolever/parameterized/issues/154\n__ https://github.com/wolever/parameterized/issues/34\n__ https://github.com/wolever/parameterized/issues/81\n\nDependencies\n------------\n\n(this section left intentionally blank)\n\n\nExhaustive Usage Examples\n--------------------------\n\nThe ``@parameterized`` and ``@parameterized.expand`` decorators accept a list\nor iterable of tuples or ``param(...)``, or a callable which returns a list or\niterable:\n\n.. code:: python\n\n    from parameterized import parameterized, param\n\n    # A list of tuples\n    @parameterized([\n        (2, 3, 5),\n        (3, 5, 8),\n    ])\n    def test_add(a, b, expected):\n        assert_equal(a + b, expected)\n\n    # A list of params\n    @parameterized([\n        param(\"10\", 10),\n        param(\"10\", 16, base=16),\n    ])\n    def test_int(str_val, expected, base=10):\n        assert_equal(int(str_val, base=base), expected)\n\n    # An iterable of params\n    @parameterized(\n        param.explicit(*json.loads(line))\n        for line in open(\"testcases.jsons\")\n    )\n    def test_from_json_file(...):\n        ...\n\n    # A callable which returns a list of tuples\n    def load_test_cases():\n        return [\n            (\"test1\", ),\n            (\"test2\", ),\n        ]\n    @parameterized(load_test_cases)\n    def test_from_function(name):\n        ...\n\n.. **\n\nNote that, when using an iterator or a generator, all the items will be loaded\ninto memory before the start of the test run (we do this explicitly to ensure\nthat generators are exhausted exactly once in multi-process or multi-threaded\ntesting environments).\n\nThe ``@parameterized`` decorator can be used test class methods, and standalone\nfunctions:\n\n.. code:: python\n\n    from parameterized import parameterized\n\n    class AddTest(object):\n        @parameterized([\n            (2, 3, 5),\n        ])\n        def test_add(self, a, b, expected):\n            assert_equal(a + b, expected)\n\n    @parameterized([\n        (2, 3, 5),\n    ])\n    def test_add(a, b, expected):\n        assert_equal(a + b, expected)\n\n\nAnd ``@parameterized.expand`` can be used to generate test methods in\nsituations where test generators cannot be used (for example, when the test\nclass is a subclass of ``unittest.TestCase``):\n\n.. code:: python\n\n    import unittest\n    from parameterized import parameterized\n\n    class AddTestCase(unittest.TestCase):\n        @parameterized.expand([\n            (\"2 and 3\", 2, 3, 5),\n            (\"3 and 5\", 3, 5, 8),\n        ])\n        def test_add(self, _, a, b, expected):\n            assert_equal(a + b, expected)\n\nWill create the test cases::\n\n    $ nosetests example.py\n    test_add_0_2_and_3 (example.AddTestCase) ... ok\n    test_add_1_3_and_5 (example.AddTestCase) ... ok\n\n    ----------------------------------------------------------------------\n    Ran 2 tests in 0.001s\n\n    OK\n\nNote that ``@parameterized.expand`` works by creating new methods on the test\nclass. If the first parameter is a string, that string will be added to the end\nof the method name. For example, the test case above will generate the methods\n``test_add_0_2_and_3`` and ``test_add_1_3_and_5``.\n\nThe names of the test cases generated by ``@parameterized.expand`` can be\ncustomized using the ``name_func`` keyword argument. The value should\nbe a function which accepts three arguments: ``testcase_func``, ``param_num``,\nand ``params``, and it should return the name of the test case.\n``testcase_func`` will be the function to be tested, ``param_num`` will be the\nindex of the test case parameters in the list of parameters, and ``param``\n(an instance of ``param``) will be the parameters which will be used.\n\n.. code:: python\n\n    import unittest\n    from parameterized import parameterized\n\n    def custom_name_func(testcase_func, param_num, param):\n        return \"%s_%s\" %(\n            testcase_func.__name__,\n            parameterized.to_safe_name(\"_\".join(str(x) for x in param.args)),\n        )\n\n    class AddTestCase(unittest.TestCase):\n        @parameterized.expand([\n            (2, 3, 5),\n            (2, 3, 5),\n        ], name_func=custom_name_func)\n        def test_add(self, a, b, expected):\n            assert_equal(a + b, expected)\n\nWill create the test cases::\n\n    $ nosetests example.py\n    test_add_1_2_3 (example.AddTestCase) ... ok\n    test_add_2_3_5 (example.AddTestCase) ... ok\n\n    ----------------------------------------------------------------------\n    Ran 2 tests in 0.001s\n\n    OK\n\n\nThe ``param(...)`` helper class stores the parameters for one specific test\ncase.  It can be used to pass keyword arguments to test cases:\n\n.. code:: python\n\n    from parameterized import parameterized, param\n\n    @parameterized([\n        param(\"10\", 10),\n        param(\"10\", 16, base=16),\n    ])\n    def test_int(str_val, expected, base=10):\n        assert_equal(int(str_val, base=base), expected)\n\n\nIf test cases have a docstring, the parameters for that test case will be\nappended to the first line of the docstring. This behavior can be controlled\nwith the ``doc_func`` argument:\n\n.. code:: python\n\n    from parameterized import parameterized\n\n    @parameterized([\n        (1, 2, 3),\n        (4, 5, 9),\n    ])\n    def test_add(a, b, expected):\n        \"\"\" Test addition. \"\"\"\n        assert_equal(a + b, expected)\n\n    def my_doc_func(func, num, param):\n        return \"%s: %s with %s\" %(num, func.__name__, param)\n\n    @parameterized([\n        (5, 4, 1),\n        (9, 6, 3),\n    ], doc_func=my_doc_func)\n    def test_subtraction(a, b, expected):\n        assert_equal(a - b, expected)\n\n::\n\n    $ nosetests example.py\n    Test addition. [with a=1, b=2, expected=3] ... ok\n    Test addition. [with a=4, b=5, expected=9] ... ok\n    0: test_subtraction with param(*(5, 4, 1)) ... ok\n    1: test_subtraction with param(*(9, 6, 3)) ... ok\n\n    ----------------------------------------------------------------------\n    Ran 4 tests in 0.001s\n\n    OK\n\nFinally ``@parameterized_class`` parameterizes an entire class, using\neither a list of attributes, or a list of dicts that will be applied to the\nclass:\n\n.. code:: python\n\n    from yourapp.models import User\n    from parameterized import parameterized_class\n\n    @parameterized_class([\n       { \"username\": \"user_1\", \"access_level\": 1 },\n       { \"username\": \"user_2\", \"access_level\": 2, \"expected_status_code\": 404 },\n    ])\n    class TestUserAccessLevel(TestCase):\n       expected_status_code = 200\n\n       def setUp(self):\n          self.client.force_login(User.objects.get(username=self.username)[0])\n\n       def test_url_a(self):\n          response = self.client.get('/url')\n          self.assertEqual(response.status_code, self.expected_status_code)\n\n       def tearDown(self):\n          self.client.logout()\n\n\n    @parameterized_class((\"username\", \"access_level\", \"expected_status_code\"), [\n       (\"user_1\", 1, 200),\n       (\"user_2\", 2, 404)\n    ])\n    class TestUserAccessLevel(TestCase):\n       def setUp(self):\n          self.client.force_login(User.objects.get(username=self.username)[0])\n\n       def test_url_a(self):\n          response = self.client.get(\"/url\")\n          self.assertEqual(response.status_code, self.expected_status_code)\n\n       def tearDown(self):\n          self.client.logout()\n\n\nThe ``@parameterized_class`` decorator accepts a ``class_name_func`` argument,\nwhich controls the name of the parameterized classes generated by\n``@parameterized_class``:\n\n.. code:: python\n\n    from parameterized import parameterized, parameterized_class\n\n    def get_class_name(cls, num, params_dict):\n        # By default the generated class named includes either the \"name\"\n        # parameter (if present), or the first string value. This example shows\n        # multiple parameters being included in the generated class name:\n        return \"%s_%s_%s%s\" %(\n            cls.__name__,\n            num,\n            parameterized.to_safe_name(params_dict['a']),\n            parameterized.to_safe_name(params_dict['b']),\n        )\n\n    @parameterized_class([\n       { \"a\": \"hello\", \"b\": \" world!\", \"expected\": \"hello world!\" },\n       { \"a\": \"say \", \"b\": \" cheese :)\", \"expected\": \"say cheese :)\" },\n    ], class_name_func=get_class_name)\n    class TestConcatenation(TestCase):\n      def test_concat(self):\n          self.assertEqual(self.a + self.b, self.expected)\n\n::\n\n    $ nosetests -v test_math.py\n    test_concat (test_concat.TestConcatenation_0_hello_world_) ... ok\n    test_concat (test_concat.TestConcatenation_0_say_cheese__) ... ok\n\n\n\nUsing with Single Parameters\n............................\n\nIf a test function only accepts one parameter and the value is not iterable,\nthen it is possible to supply a list of values without wrapping each one in a\ntuple:\n\n.. code:: python\n\n   @parameterized([1, 2, 3])\n   def test_greater_than_zero(value):\n      assert value > 0\n\nNote, however, that if the single parameter *is* iterable (such as a list or\ntuple), then it *must* be wrapped in a tuple, list, or the ``param(...)``\nhelper:\n\n.. code:: python\n\n   @parameterized([\n      ([1, 2, 3], ),\n      ([3, 3], ),\n      ([6], ),\n   ])\n   def test_sums_to_6(numbers):\n      assert sum(numbers) == 6\n\n(note, also, that Python requires single element tuples to be defined with a\ntrailing comma: ``(foo, )``)\n\n\nUsing with ``@mock.patch``\n..........................\n\n``parameterized`` can be used with ``mock.patch``, but the argument ordering\ncan be confusing. The ``@mock.patch(...)`` decorator must come *below* the\n``@parameterized(...)``, and the mocked parameters must come *last*:\n\n.. code:: python\n\n   @mock.patch(\"os.getpid\")\n   class TestOS(object):\n      @parameterized(...)\n      @mock.patch(\"os.fdopen\")\n      @mock.patch(\"os.umask\")\n      def test_method(self, param1, param2, ..., mock_umask, mock_fdopen, mock_getpid):\n         ...\n\nNote: the same holds true when using ``@parameterized.expand``.\n\n\nMigrating from ``nose-parameterized`` to ``parameterized``\n----------------------------------------------------------\n\nTo migrate a codebase from ``nose-parameterized`` to ``parameterized``:\n\n1. Update your requirements file, replacing ``nose-parameterized`` with\n   ``parameterized``.\n\n2. Replace all references to ``nose_parameterized`` with ``parameterized``::\n\n    $ perl -pi -e 's/nose_parameterized/parameterized/g' your-codebase/\n\n3. You're done!\n\n\nFAQ\n---\n\nWhat happened to Python 2.X, 3.5, and 3.6 support?\n    As of version 0.9.0, ``parameterized`` no longer supports Python 2.X, 3.5,\n    or 3.6.  Previous versions of ``parameterized`` - 0.8.1 being the latest -\n    will continue to work, but will not receive any new features or bug fixes.\n\nWhat do you mean when you say \"nose is best supported\"?\n    There are small caveates with ``py.test`` and ``unittest``: ``py.test``\n    does not show the parameter values (ex, it will show ``test_add[0]``\n    instead of ``test_add[1, 2, 3]``), and ``unittest``/``unittest2`` do not\n    support test generators so ``@parameterized.expand`` must be used.\n\nWhy not use ``@pytest.mark.parametrize``?\n    Because spelling is difficult. Also, ``parameterized`` doesn't require you\n    to repeat argument names, and (using ``param``) it supports optional\n    keyword arguments.\n\nWhy do I get an ``AttributeError: 'function' object has no attribute 'expand'`` with ``@parameterized.expand``?\n    You've likely installed the ``parametrized`` (note the missing *e*)\n    package. Use ``parameterized`` (with the *e*) instead and you'll be all\n    set.\n\nWhat happened to ``nose-parameterized``?\n    Originally only nose was supported. But now everything is supported, and it\n    only made sense to change the name!\n","description_content_type":"text/x-rst","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"","license":"FreeBSD","maintainer":"","maintainer_email":"","name":"parameterized","package_url":"https://pypi.org/project/parameterized/","platform":null,"project_url":"https://pypi.org/project/parameterized/","project_urls":{"Homepage":"https://github.com/wolever/parameterized"},"provides_extra":null,"release_url":"https://pypi.org/project/parameterized/0.9.0/","requires_dist":["jinja2 ; extra == 'dev'"],"requires_python":">=3.7","summary":"Parameterized testing with any Python test framework","version":"0.9.0","yanked":false,"yanked_reason":null},"last_serial":17454566,"releases":{"0.5.0":[{"comment_text":"","digests":{"blake2b_256":"8c83c3634ace68dc1b49a1eb4a16513818f921019ad5cc3830f000a1553a116c","md5":"22576412f8c6e2f9cbea3ddf4ec61dff","sha256":"b783401b1206f5492f23f4c84f25f802a4abdeb7feb6c0afe72c2a460803cdfd"},"downloads":-1,"filename":"parameterized-0.5.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"22576412f8c6e2f9cbea3ddf4ec61dff","packagetype":"bdist_wheel","python_version":"2.7","requires_python":null,"size":15243,"upload_time":"2016-08-02T16:24:10","upload_time_iso_8601":"2016-08-02T16:24:10.569378Z","url":"https://files.pythonhosted.org/packages/8c/83/c3634ace68dc1b49a1eb4a16513818f921019ad5cc3830f000a1553a116c/parameterized-0.5.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1b317802c3fc3a8b0f62faa36190f65b3f960987c20cd09795df35762796b823","md5":"e1c1b61c7c87650258660a094bd2ae51","sha256":"783069d1abc199f2c1c56d4b976f4f6df8848497e5f5dba5d47ad238e5e3ae59"},"downloads":-1,"filename":"parameterized-0.5.0.tar.gz","has_sig":false,"md5_digest":"e1c1b61c7c87650258660a094bd2ae51","packagetype":"sdist","python_version":"source","requires_python":null,"size":11167,"upload_time":"2016-08-02T16:24:08","upload_time_iso_8601":"2016-08-02T16:24:08.505144Z","url":"https://files.pythonhosted.org/packages/1b/31/7802c3fc3a8b0f62faa36190f65b3f960987c20cd09795df35762796b823/parameterized-0.5.0.tar.gz","yanked":false,"yanked_reason":null}],"0.6.1":[{"comment_text":"","digests":{"blake2b_256":"65d4b0b626eb263a4c2aa3ca3cd20ea3db410db837f7f6b5d3fc4a6c4bee3631","md5":"6cfbd1449971a8ec5caa4a171f367815","sha256":"cf5fa4f295dfb823cebdb27a00566113f2fbb71c7d5ca7b7a1019fd20c8a0811"},"downloads":-1,"filename":"parameterized-0.6.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"6cfbd1449971a8ec5caa4a171f367815","packagetype":"bdist_wheel","python_version":"2.7","requires_python":null,"size":23029,"upload_time":"2017-03-21T17:19:11","upload_time_iso_8601":"2017-03-21T17:19:11.188925Z","url":"https://files.pythonhosted.org/packages/65/d4/b0b626eb263a4c2aa3ca3cd20ea3db410db837f7f6b5d3fc4a6c4bee3631/parameterized-0.6.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"77b68c481344c63b3eadeaa26f62b9d7ce4221a52bad390da5f059573d4c7ee4","md5":"e9dd0c5bf470fbaf92416e9165ea196c","sha256":"caf58e717097735de0d7e15386a46ffa5ce25bb6a13a43716a8854a8d34841e2"},"downloads":-1,"filename":"parameterized-0.6.1.tar.gz","has_sig":false,"md5_digest":"e9dd0c5bf470fbaf92416e9165ea196c","packagetype":"sdist","python_version":"source","requires_python":null,"size":14053,"upload_time":"2017-03-21T17:19:09","upload_time_iso_8601":"2017-03-21T17:19:09.342359Z","url":"https://files.pythonhosted.org/packages/77/b6/8c481344c63b3eadeaa26f62b9d7ce4221a52bad390da5f059573d4c7ee4/parameterized-0.6.1.tar.gz","yanked":false,"yanked_reason":null}],"0.6.3":[{"comment_text":"","digests":{"blake2b_256":"3a4975f6dadb09e2f8ace3cdffe0c99a04f1b98dff41fbf9e768665d8b469e29","md5":"1e61d4d8251c4aa73eb301f50bd1595b","sha256":"938a66ba54f74671aeebf7ecf48e9da006c0e9b0e9502accef27e39a18f956c2"},"downloads":-1,"filename":"parameterized-0.6.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"1e61d4d8251c4aa73eb301f50bd1595b","packagetype":"bdist_wheel","python_version":"2.7","requires_python":null,"size":23106,"upload_time":"2019-01-22T17:40:43","upload_time_iso_8601":"2019-01-22T17:40:43.175334Z","url":"https://files.pythonhosted.org/packages/3a/49/75f6dadb09e2f8ace3cdffe0c99a04f1b98dff41fbf9e768665d8b469e29/parameterized-0.6.3-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"054f1a68e90b6c1e3f7fea2c7549110a220c7e79b854eb5220e50bc1b0eed3d1","md5":"fd3a554efa6b1166a3bc2ec7ea65a8e4","sha256":"e0cfe0cd293d9466aa0dd75cb0ca71f5a613bfa2c572652560c602a1e23ee0da"},"downloads":-1,"filename":"parameterized-0.6.3.tar.gz","has_sig":false,"md5_digest":"fd3a554efa6b1166a3bc2ec7ea65a8e4","packagetype":"sdist","python_version":"source","requires_python":null,"size":20107,"upload_time":"2019-01-22T17:40:41","upload_time_iso_8601":"2019-01-22T17:40:41.547513Z","url":"https://files.pythonhosted.org/packages/05/4f/1a68e90b6c1e3f7fea2c7549110a220c7e79b854eb5220e50bc1b0eed3d1/parameterized-0.6.3.tar.gz","yanked":false,"yanked_reason":null}],"0.7.0":[{"comment_text":"","digests":{"blake2b_256":"d69b5830b778f213ada36528d1c54fdc0a67178e6edd7c44ed59074851ebb2e7","md5":"5fe68a7bc1cde15f7a73bf86c2f31c37","sha256":"020343a281efcfe9b71b9028a91817f981202c14d72104b5a2fbe401dee25a18"},"downloads":-1,"filename":"parameterized-0.7.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"5fe68a7bc1cde15f7a73bf86c2f31c37","packagetype":"bdist_wheel","python_version":"2.7","requires_python":null,"size":23550,"upload_time":"2019-02-06T03:43:36","upload_time_iso_8601":"2019-02-06T03:43:36.504005Z","url":"https://files.pythonhosted.org/packages/d6/9b/5830b778f213ada36528d1c54fdc0a67178e6edd7c44ed59074851ebb2e7/parameterized-0.7.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f0b6f5ff739d20fca065a7632916765bb2ec02f04217de25e18982876c310b09","md5":"a4c7408fffd7a16c2c0695dc8d588372","sha256":"d8c8837fb677ed2d5a93b9e2308ce0da3aeb58cf513120d501e0b7af14da78d5"},"downloads":-1,"filename":"parameterized-0.7.0.tar.gz","has_sig":false,"md5_digest":"a4c7408fffd7a16c2c0695dc8d588372","packagetype":"sdist","python_version":"source","requires_python":null,"size":20751,"upload_time":"2019-02-06T03:43:34","upload_time_iso_8601":"2019-02-06T03:43:34.959557Z","url":"https://files.pythonhosted.org/packages/f0/b6/f5ff739d20fca065a7632916765bb2ec02f04217de25e18982876c310b09/parameterized-0.7.0.tar.gz","yanked":false,"yanked_reason":null}],"0.7.1":[{"comment_text":"","digests":{"blake2b_256":"a3bf6ef8239028beae8298e0806b4f79c2466b1b16ca5b85dc13d631c5ea92c4","md5":"7c3ba201720b927d5b57035a4c01ae08","sha256":"ea0326ba5bbbe7c427329a27b75003410df07d1173ca254976f8f5a64922c322"},"downloads":-1,"filename":"parameterized-0.7.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"7c3ba201720b927d5b57035a4c01ae08","packagetype":"bdist_wheel","python_version":"2.7","requires_python":null,"size":24442,"upload_time":"2019-11-19T22:04:24","upload_time_iso_8601":"2019-11-19T22:04:24.998953Z","url":"https://files.pythonhosted.org/packages/a3/bf/6ef8239028beae8298e0806b4f79c2466b1b16ca5b85dc13d631c5ea92c4/parameterized-0.7.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"a822966615469f8e72ee5840f3dc272781736998187cefd3a4679d3872051c4f","md5":"3416f876209d3a70950e66f40a574a06","sha256":"6a94dbea30c6abde99fd4c2f2042c1bf7f980e48908bf92ead62394f93cf57ed"},"downloads":-1,"filename":"parameterized-0.7.1.tar.gz","has_sig":false,"md5_digest":"3416f876209d3a70950e66f40a574a06","packagetype":"sdist","python_version":"source","requires_python":null,"size":22365,"upload_time":"2019-11-19T22:04:22","upload_time_iso_8601":"2019-11-19T22:04:22.840895Z","url":"https://files.pythonhosted.org/packages/a8/22/966615469f8e72ee5840f3dc272781736998187cefd3a4679d3872051c4f/parameterized-0.7.1.tar.gz","yanked":false,"yanked_reason":null}],"0.7.2":[{"comment_text":"","digests":{"blake2b_256":"79252b891c4787dc12573723084947649013928799a68ff51d9ab38b88c94279","md5":"40ce035a0663883dca416f6f8ba0ec34","sha256":"ef3afe8ca8925e9fec9be2a0d3991f56b583e472df7d115672a41b716521dedb"},"downloads":-1,"filename":"parameterized-0.7.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"40ce035a0663883dca416f6f8ba0ec34","packagetype":"bdist_wheel","python_version":"2.7","requires_python":null,"size":24857,"upload_time":"2020-04-12T19:34:56","upload_time_iso_8601":"2020-04-12T19:34:56.398677Z","url":"https://files.pythonhosted.org/packages/79/25/2b891c4787dc12573723084947649013928799a68ff51d9ab38b88c94279/parameterized-0.7.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"a6b85eabacf934bcbc3b2cfd603c8b3fa471e15bba0077752ed23fa3b2d2cda5","md5":"dae3f24f168be0ae093abf5e39137722","sha256":"8ab3fad90cd2fb9b5656f59d7f2b8c25265363e659e60e40f64a5171fa55a502"},"downloads":-1,"filename":"parameterized-0.7.2.tar.gz","has_sig":false,"md5_digest":"dae3f24f168be0ae093abf5e39137722","packagetype":"sdist","python_version":"source","requires_python":null,"size":22554,"upload_time":"2020-04-12T19:34:54","upload_time_iso_8601":"2020-04-12T19:34:54.440090Z","url":"https://files.pythonhosted.org/packages/a6/b8/5eabacf934bcbc3b2cfd603c8b3fa471e15bba0077752ed23fa3b2d2cda5/parameterized-0.7.2.tar.gz","yanked":false,"yanked_reason":null}],"0.7.3":[{"comment_text":"","digests":{"blake2b_256":"ca261a96898711d4516f6101f047d20790533c9f30fdb78db3115efe3ff2791b","md5":"292238326dcd708716b03e241c6051fe","sha256":"627500dd48f88a8363da2bcbda778e9fa65fad3e46f351ec0a3906c7e8ddebbe"},"downloads":-1,"filename":"parameterized-0.7.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"292238326dcd708716b03e241c6051fe","packagetype":"bdist_wheel","python_version":"2.7","requires_python":null,"size":24860,"upload_time":"2020-04-12T21:18:37","upload_time_iso_8601":"2020-04-12T21:18:37.093011Z","url":"https://files.pythonhosted.org/packages/ca/26/1a96898711d4516f6101f047d20790533c9f30fdb78db3115efe3ff2791b/parameterized-0.7.3-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"346cce752bdfd134c0804940a0baeca7fd84d8a56b2afbb7c881d24dbedef70e","md5":"0c86706ddd11976fdfd4e20bcc77d15e","sha256":"ede6e33b9658ad019772eaa8bfe538c575439c30fccb16e2d9d2aae98e35383c"},"downloads":-1,"filename":"parameterized-0.7.3.tar.gz","has_sig":false,"md5_digest":"0c86706ddd11976fdfd4e20bcc77d15e","packagetype":"sdist","python_version":"source","requires_python":null,"size":22678,"upload_time":"2020-04-12T21:18:34","upload_time_iso_8601":"2020-04-12T21:18:34.733166Z","url":"https://files.pythonhosted.org/packages/34/6c/ce752bdfd134c0804940a0baeca7fd84d8a56b2afbb7c881d24dbedef70e/parameterized-0.7.3.tar.gz","yanked":false,"yanked_reason":null}],"0.7.4":[{"comment_text":"","digests":{"blake2b_256":"ba6b73dfed0ab5299070cf98451af50130989901f50de41fe85d605437a0210f","md5":"19615247725a271c4bbdb4eda8b53cf1","sha256":"59ab908e31c01505a987a2be78854e19cb1630c047bbab7848169c371d614d56"},"downloads":-1,"filename":"parameterized-0.7.4-py2.py3-none-any.whl","has_sig":false,"md5_digest":"19615247725a271c4bbdb4eda8b53cf1","packagetype":"bdist_wheel","python_version":"2.7","requires_python":null,"size":25115,"upload_time":"2020-04-14T17:59:46","upload_time_iso_8601":"2020-04-14T17:59:46.867974Z","url":"https://files.pythonhosted.org/packages/ba/6b/73dfed0ab5299070cf98451af50130989901f50de41fe85d605437a0210f/parameterized-0.7.4-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"bcefd6c26f40a7636f43a52c9719f9d8228f08e01187081e5891702ea0754060","md5":"3d92fa26ba2db7933a99276ad018a58a","sha256":"190f8cc7230eee0b56b30d7f074fd4d165f7c45e6077582d0813c8557e738490"},"downloads":-1,"filename":"parameterized-0.7.4.tar.gz","has_sig":false,"md5_digest":"3d92fa26ba2db7933a99276ad018a58a","packagetype":"sdist","python_version":"source","requires_python":null,"size":23389,"upload_time":"2020-04-14T17:59:43","upload_time_iso_8601":"2020-04-14T17:59:43.636721Z","url":"https://files.pythonhosted.org/packages/bc/ef/d6c26f40a7636f43a52c9719f9d8228f08e01187081e5891702ea0754060/parameterized-0.7.4.tar.gz","yanked":false,"yanked_reason":null}],"0.7.5":[{"comment_text":"","digests":{"blake2b_256":"e80896a1bc7155312ce14c66443a1ff8549e39d241b3c5a3697bd07d9e1d0612","md5":"c1dd2fe17b979f431ea83494222e34b0","sha256":"b36f709fcfd9e8c144c1374b16a40fc0b5984efe93e41d53e6d228ae2a1540c5"},"downloads":-1,"filename":"parameterized-0.7.5-py2.py3-none-any.whl","has_sig":false,"md5_digest":"c1dd2fe17b979f431ea83494222e34b0","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":17995,"upload_time":"2021-01-04T17:23:28","upload_time_iso_8601":"2021-01-04T17:23:28.229769Z","url":"https://files.pythonhosted.org/packages/e8/08/96a1bc7155312ce14c66443a1ff8549e39d241b3c5a3697bd07d9e1d0612/parameterized-0.7.5-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b44b191f8ee8b96c3c289a7ccaf082cebb45c7c82b1d42be368fa80012ce9f9f","md5":"57a4d0ea697ab5974c6a0d37dde18409","sha256":"b5e6af67b9e49485e30125b1c8f031ffa81a265ca08bfa73f31551bf03cf68c4"},"downloads":-1,"filename":"parameterized-0.7.5.tar.gz","has_sig":false,"md5_digest":"57a4d0ea697ab5974c6a0d37dde18409","packagetype":"sdist","python_version":"source","requires_python":null,"size":21830,"upload_time":"2021-01-04T17:23:29","upload_time_iso_8601":"2021-01-04T17:23:29.900261Z","url":"https://files.pythonhosted.org/packages/b4/4b/191f8ee8b96c3c289a7ccaf082cebb45c7c82b1d42be368fa80012ce9f9f/parameterized-0.7.5.tar.gz","yanked":false,"yanked_reason":null}],"0.8.1":[{"comment_text":"","digests":{"blake2b_256":"3113fe468c8c7400a8eca204e6e160a29bf7dcd45a76e20f1c030f3eaa690d93","md5":"c4969d09c87200cf06cd6e969e216057","sha256":"9cbb0b69a03e8695d68b3399a8a5825200976536fe1cb79db60ed6a4c8c9efe9"},"downloads":-1,"filename":"parameterized-0.8.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"c4969d09c87200cf06cd6e969e216057","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":26354,"upload_time":"2021-01-09T20:35:16","upload_time_iso_8601":"2021-01-09T20:35:16.307058Z","url":"https://files.pythonhosted.org/packages/31/13/fe468c8c7400a8eca204e6e160a29bf7dcd45a76e20f1c030f3eaa690d93/parameterized-0.8.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c6232288f308d238b4f261c039cafcd650435d624de97c6ffc903f06ea8af50f","md5":"30e34da8db0b31bbc5c0ed86cfa9e7c1","sha256":"41bbff37d6186430f77f900d777e5bb6a24928a1c46fb1de692f8b52b8833b5c"},"downloads":-1,"filename":"parameterized-0.8.1.tar.gz","has_sig":false,"md5_digest":"30e34da8db0b31bbc5c0ed86cfa9e7c1","packagetype":"sdist","python_version":"source","requires_python":null,"size":23936,"upload_time":"2021-01-09T20:35:18","upload_time_iso_8601":"2021-01-09T20:35:18.235639Z","url":"https://files.pythonhosted.org/packages/c6/23/2288f308d238b4f261c039cafcd650435d624de97c6ffc903f06ea8af50f/parameterized-0.8.1.tar.gz","yanked":false,"yanked_reason":null}],"0.9.0":[{"comment_text":"","digests":{"blake2b_256":"002f804f58f0b856ab3bf21617cccf5b39206e6c4c94c2cd227bde125ea6105f","md5":"cfce2b56c952afb5a64ba988722352e7","sha256":"4e0758e3d41bea3bbd05ec14fc2c24736723f243b28d702081aef438c9372b1b"},"downloads":-1,"filename":"parameterized-0.9.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"cfce2b56c952afb5a64ba988722352e7","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":20475,"upload_time":"2023-03-27T02:01:09","upload_time_iso_8601":"2023-03-27T02:01:09.310468Z","url":"https://files.pythonhosted.org/packages/00/2f/804f58f0b856ab3bf21617cccf5b39206e6c4c94c2cd227bde125ea6105f/parameterized-0.9.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ea4900c0c0cc24ff4266025a53e41336b79adaa5a4ebfad214f433d623f9865e","md5":"ed1bee2fb5d9044688d8503bdda9e6f3","sha256":"7fc905272cefa4f364c1a3429cbbe9c0f98b793988efb5bf90aac80f08db09b1"},"downloads":-1,"filename":"parameterized-0.9.0.tar.gz","has_sig":false,"md5_digest":"ed1bee2fb5d9044688d8503bdda9e6f3","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":24351,"upload_time":"2023-03-27T02:01:11","upload_time_iso_8601":"2023-03-27T02:01:11.592497Z","url":"https://files.pythonhosted.org/packages/ea/49/00c0c0cc24ff4266025a53e41336b79adaa5a4ebfad214f433d623f9865e/parameterized-0.9.0.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"002f804f58f0b856ab3bf21617cccf5b39206e6c4c94c2cd227bde125ea6105f","md5":"cfce2b56c952afb5a64ba988722352e7","sha256":"4e0758e3d41bea3bbd05ec14fc2c24736723f243b28d702081aef438c9372b1b"},"downloads":-1,"filename":"parameterized-0.9.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"cfce2b56c952afb5a64ba988722352e7","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":20475,"upload_time":"2023-03-27T02:01:09","upload_time_iso_8601":"2023-03-27T02:01:09.310468Z","url":"https://files.pythonhosted.org/packages/00/2f/804f58f0b856ab3bf21617cccf5b39206e6c4c94c2cd227bde125ea6105f/parameterized-0.9.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ea4900c0c0cc24ff4266025a53e41336b79adaa5a4ebfad214f433d623f9865e","md5":"ed1bee2fb5d9044688d8503bdda9e6f3","sha256":"7fc905272cefa4f364c1a3429cbbe9c0f98b793988efb5bf90aac80f08db09b1"},"downloads":-1,"filename":"parameterized-0.9.0.tar.gz","has_sig":false,"md5_digest":"ed1bee2fb5d9044688d8503bdda9e6f3","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":24351,"upload_time":"2023-03-27T02:01:11","upload_time_iso_8601":"2023-03-27T02:01:11.592497Z","url":"https://files.pythonhosted.org/packages/ea/49/00c0c0cc24ff4266025a53e41336b79adaa5a4ebfad214f433d623f9865e/parameterized-0.9.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
