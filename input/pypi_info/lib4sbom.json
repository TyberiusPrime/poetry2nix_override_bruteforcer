{"info":{"author":"Anthony Harrison","author_email":"anthony.p.harrison@gmail.com","bugtrack_url":null,"classifiers":["Development Status :: 3 - Alpha","Intended Audience :: Developers","License :: OSI Approved :: Apache Software License","Natural Language :: English","Operating System :: OS Independent","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: Implementation :: CPython","Programming Language :: Python :: Implementation :: PyPy"],"description":"# Lib4SBOM\n\nLib4SBOM is a library to parse and generate Software Bill of Materials (SBOMs). It supports SBOMs created in both\n[SPDX](https://www.spdx.org) and [CycloneDX](https://www.cyclonedx.org) formats.\n\nIt has been developed on the assumption that having a generic abstraction of SBOM regardless of the underlying format will be useful to developers.\n\nThe following facilities are provided:\n\n- Generate SPDX SBOM in TagValue, JSON and YAML formats\n- Generate CycloneDX SBOM in JSON format\n- Parse SPDX SBOM in TagValue, JSON, YAML, XML and RDF formats\n- Parse CycloneDX SBOM in JSON and XMLformat\n- Create and manipulate a SBOM file object\n- Create and manipulate a SBOM package object\n- Create and manipulate a SBOM dependency relationship object\n- Create and manipulate a Vulnerability object\n- Create and manipulate a Software Service object\n- Generated SBOM can be output to a file or to the console\n\n## Installation\n\nTo install use the following command:\n\n`pip install lib4sbom`\n\nAlternatively, just clone the repo and install dependencies using the following command:\n\n`pip install -U -r requirements.txt`\n\nThe tool requires Python 3 (3.7+). It is recommended to use a virtual python environment especially\nif you are using different versions of python. `virtualenv` is a tool for setting up virtual python environments which\nallows you to have all the dependencies for the tool set up in a single environment, or have different environments set\nup for testing using different versions of Python.\n\n## API\n\n### SBOMParser\n\nThe SBOMParser module provides methods for parsing a SBOM in either SPDX or CycloneDX format and\nreturns the file, package and relationship information from within the SBOM.\n\nThe focus of the implementation is on providing a common set of SBOM data regardless of the SBOM format.\n\nSBOMs are supported in the following formats\n\n| SBOM Type | Version | Format   |\n| --------- |---------|----------|\n| SPDX      | 2.2     | TagValue |\n| SPDX      | 2.2     | JSON     |\n| SPDX      | 2.2     | YAML     |\n| SPDX      | 2.2     | RDF      |\n| SPDX      | 2.2     | XML      |\n| SPDX      | 2.3     | TagValue |\n| SPDX      | 2.3     | JSON     |\n| SPDX      | 2.3     | YAML     |\n| SPDX      | 2.3     | RDF       |\n| SPDX      | 2.3     | XML      |\n| CycloneDX | 1.4     | JSON     |\n| CycloneDX | 1.4     | XML      |\n| CycloneDX | 1.5     | JSON     |\n| CycloneDX | 1.5     | XML      |\n\n**Note** that support for SPDX RDF and XML formats is limited to a few package attributes.\n\n_class_ **SBOMParser**(_sbom_type='auto_')\n\nThis creates a simple SBOM Parser object. A single optional parameter, _sbom_type_, can be specified\nwhich represents the type of SBOM (either spdx, cyclonedx or auto). The default is auto in\nwhich case the parser will automatically work out the SBOM type using the\nfollowing filename conventions.\n\n| SBOM      | Format   | Filename extension |\n| --------- |----------|--------------------|\n| SPDX      | TagValue | .spdx              |\n| SPDX      | JSON     | .spdx.json         |\n| SPDX      | YAML     | .spdx.yaml         |\n| SPDX      | YAML     | .spdx.yml          |\n| SPDX      | RDF      | .spdx.rdf          |\n| SPDX      | XML      | .spdx.xml          |\n| CycloneDX | JSON     | .json              |\n| CycloneDX | XML      | .xml               |\n\nThe parser will check that the correct JSON files is being processed by the correct parser.\nA SPDX JSON file submitted to the CycloneDX parser will result in no data being processed.\n\n**Methods**\n\nparse_file(filename)\nParses the SBOM file. If the file does not exist, a FileNotFoundError exception is raised.\n\nget_files()\nReturns a list of file elements from within a parsed SBOM\n\nget_packages()\nReturns a list of packages elements from within a parsed SBOM\n\nget_relationships()\nReturns the relationship elements from within a parsed SBOM\n\nget_vulnerabilities()\nReturns the vulnerability elements from within a parsed SBOM\n\nget_services()\nReturns the software service elements from within a parsed SBOM\n\nget_type()\nReturns the type of SBOM (either spdx or cyclonedx)\n\n**Example**\n\nA test SBOM file (test_sbom.spdx) is used in the following example.\n\n```bash\nSPDXVersion: SPDX-2.2\nDataLicense: CC0-1.0\nSPDXID: SPDXRef-DOCUMENT\nDocumentName: virtualenv\nDocumentNamespace: http://spdx.org/spdxdocs/virtualenv-b7ac9cce-efe8-4fe7-a544-100e6a5664e6\nLicenseListVersion: 3.18\nCreator: Tool: sbom4python-0.4.0\nCreated: 2022-11-16T10:14:26Z\nCreatorComment: <text>This document has been automatically generated.</text>\n##### \n\nPackageName: virtualenv\nSPDXID: SPDXRef-Package-1-virtualenv\nPackageSupplier: Person: Bernat_Gabor\nPackageVersion: 20.16.7\nPackageDownloadLocation: NOASSERTION\nFilesAnalyzed: false\nPackageLicenseConcluded: MIT\nPackageLicenseDeclared: MIT\nPackageCopyrightText: NOASSERTION\nExternalRef: PACKAGE-MANAGER purl pkg:pypi/virtualenv@20.16.7\n##### \n\nPackageName: distlib\nSPDXID: SPDXRef-Package-2-distlib\nPackageSupplier: Person: Vinay_Sajip\nPackageVersion: 0.3.6\nPackageDownloadLocation: NOASSERTION\nFilesAnalyzed: false\nPackageLicenseConcluded: NOASSERTION\nPackageLicenseDeclared: NOASSERTION\nPackageCopyrightText: NOASSERTION\nExternalRef: PACKAGE-MANAGER purl pkg:pypi/distlib@0.3.6\n##### \n\nPackageName: filelock\nSPDXID: SPDXRef-Package-3-filelock\nPackageSupplier: Person: Benedikt_Schmitt\nPackageVersion: 3.8.0\nPackageDownloadLocation: NOASSERTION\nFilesAnalyzed: false\nPackageLicenseConcluded: Unlicense\nPackageLicenseDeclared: Unlicense\nPackageCopyrightText: NOASSERTION\nExternalRef: PACKAGE-MANAGER purl pkg:pypi/filelock@3.8.0\n##### \n\nPackageName: platformdirs\nSPDXID: SPDXRef-Package-4-platformdirs\nPackageSupplier: NOASSERTION\nPackageVersion: 2.5.4\nPackageDownloadLocation: NOASSERTION\nFilesAnalyzed: false\nPackageLicenseConcluded: NOASSERTION\nPackageLicenseDeclared: NOASSERTION\nPackageCopyrightText: NOASSERTION\nExternalRef: PACKAGE-MANAGER purl pkg:pypi/platformdirs@2.5.4\n\nRelationship: SPDXRef-DOCUMENT DESCRIBES SPDXRef-Package-1-virtualenv\nRelationship: SPDXRef-Package-1-virtualenv CONTAINS SPDXRef-Package-2-distlib\nRelationship: SPDXRef-Package-1-virtualenv CONTAINS SPDXRef-Package-3-filelock\nRelationship: SPDXRef-Package-1-virtualenv CONTAINS SPDXRef-Package-4-platformdirs\n```\n\nThe following code sample shows the use of the SBOMParser module.\n\n```python\n>>> from lib4sbom.parser import SBOMParser\n>>> test_parser = SBOMParser()\n>>> print (f\"SBOM type {test_parser.get_type()}\")                                                                                                                                             \nSBOM type auto                                                                                                                                                                                \n>>> test_parser.parse_file(\"test_sbom.spdx\")                                                                                                                                                                                                                                                                                            \n>>> print (f\"SBOM type {test_parser.get_type()}\")                                                                                                                                             \nSBOM type spdx                                                                                                                                                                                \n>>> sbom_files = test_parser.get_files()\n>>> print (sbom_files)                                                                                                                                                                        \n[]                                                                                                                                                                                            \n>>> sbom_packages = test_parser.get_packages()\n>>> print (sbom_packages)\n[{'name': 'virtualenv', 'type': 'library', 'id': 'SPDXRef-Package-1-virtualenv', 'supplier_type': 'Person', 'supplier': 'Bernat_Gabor', 'version': '20.16.7', 'downloadlocation': 'NOASSERTION', 'filesanalysis': 'false', 'licenseconcluded': 'MIT', 'licensedeclared': 'MIT', 'externalreference': [['PACKAGE-MANAGER', 'purl', 'pkg:pypi/virtualenv@20.16.7']]}, {'name': 'distlib', 'type': 'library', 'id': 'SPDXRef-Package-2-distlib', 'supplier_type': 'Person', 'supplier': 'Vinay_Sajip', 'version': '0.3.6', 'downloadlocation': 'NOASSERTION', 'filesanalysis': 'false', 'licenseconcluded': 'NOASSERTION', 'licensedeclared': 'NOASSERTION', 'externalreference': [['PACKAGE-MANAGER', 'purl', 'pkg:pypi/distlib@0.3.6']]}, {'name': 'filelock', 'type': 'library', 'id': 'SPDXRef-Package-3-filelock', 'supplier_type': 'Person', 'supplier': 'Benedikt_Schmitt', 'version': '3.8.0', 'downloadlocation': 'NOASSERTION', 'filesanalysis': 'false', 'licenseconcluded': 'Unlicense', 'licensedeclared': 'Unlicense', 'externalreference': [['PACKAGE-MANAGER', 'purl', 'pkg:pypi/filelock@3.8.0']]}, {'name': 'platformdirs', 'type': 'library', 'id': 'SPDXRef-Package-4-platformdirs', 'supplier_type': 'Organization', 'supplier': 'Unknown', 'version': '2.5.4', 'downloadlocation': 'NOASSERTION', 'filesanalysis': 'false', 'licenseconcluded': 'NOASSERTION', 'licensedeclared': 'NOASSERTION', 'externalreference': [['PACKAGE-MANAGER', 'purl', 'pkg:pypi/platformdirs@2.5.4']]}]\n>>> print (len(sbom_packages))\n4\n>>> sbom_packages[0]\n{'name': 'virtualenv', 'type': 'library', 'id': 'SPDXRef-Package-1-virtualenv', 'supplier_type': 'Person', 'supplier': 'Bernat_Gabor', 'version': '20.16.7', 'downloadlocation': 'NOASSERTION', 'filesanalysis': 'false', 'licenseconcluded': 'MIT', 'licensedeclared': 'MIT', 'externalreference': [['PACKAGE-MANAGER', 'purl', 'pkg:pypi/virtualenv@20.16.7']]}\n>>> sbom_relationships = test_parser.get_relationships()\n>>> print (sbom_relationships)\n[{'source': 'TestDocument', 'type': 'DESCRIBES', 'target': 'virtualenv', 'source_id': 'SPDXRef-DOCUMENT', 'target_id': 'SPDXRef-Package-1-virtualenv'}, {'source': 'virtualenv', 'type': 'CONTAINS', 'target': 'distlib', 'source_id': 'SPDXRef-Package-1-virtualenv', 'target_id': 'SPDXRef-Package-2-distlib'}, {'source': 'virtualenv', 'type': 'CONTAINS', 'target': 'filelock', 'source_id': 'SPDXRef-Package-1-virtualenv', 'target_id': 'SPDXRef-Package-3-filelock'}, {'source': 'virtualenv', 'type': 'CONTAINS', 'target': 'platformdirs', 'source_id': 'SPDXRef-Package-1-virtualenv', 'target_id': 'SPDXRef-Package-4-platformdirs'}]\n>>> sbom_relationships[2]\n{'source': 'virtualenv', 'type': 'CONTAINS', 'target': 'filelock', 'source_id': 'SPDXRef-Package-1-virtualenv', 'target_id': 'SPDXRef-Package-3-filelock'}\n>>> \n```\n\n### SBOMGenerator\n\nThe SBOMGenerator module provides methods for generating a SBOM in either SPDX or CycloneDX format.\n\nThe focus of the implementation is on providing a single interface regardless of the SBOM type and format.\n\nSBOMs can be generated in the following formats\n\n| SBOM Type | Version | Format    |\n| --------- |---------| ----------|\n| SPDX      | 2.2     | Tag       |\n| SPDX      | 2.2     | JSON      |\n| SPDX      | 2.2     | YAML      |\n| SPDX      | 2.3     | Tag       |\n| SPDX      | 2.3     | JSON      |\n| SPDX      | 2.3     | YAML      |\n| CycloneDX | 1.4     | JSON      |\n| CycloneDX | 1.5     | JSON      |\n\nThe default version for CycloneDX is version 1.5. However, the version can be overridden by setting the environment variable LIB4SBOM_CYCLONEDX_VERSION to \"1.4\" if required.\n\nThe default version for SPDX is version 2.3. However, the version can be overridden by setting the environment variable LIB4SBOM_SPDX_VERSION to \"SPDX-2.2\" if required.\n\n_class_ **SBOMGenerator**(_validate_license: True, sbom_type=\"spdx\", format=\"tag\", application=\"lib4sbom\", version=\"0.1\"_)\n\nThis creates a simple SBOM Generator object. The following optional parameters can be specified:\n\n_validate_license_ indicates if license information is validated against the set of [SPDX license identifiers](https://spdx.org/licenses/). This option only applies for SPDX SBOMs\nas this is mandatory for CycloneDX SBOMs.\n\n_sbom_type_ indicates the type of SBOM to be generated. Valid options are spdx or cyclonedx\n\n_format_ indicates the format that the SBOM is to be generated in. Valid options are Tag, JSON or YAML. If an invalid format is specified,\na default format of JSON will be assumed. If an unsupported format is specified for the type of SBOM (e.g. Tag or YAML for CycloneDX), a default\nformat is assumed (Tag for SPDX, JSON for CycloneDX)\n\n_application_ and _version_ specify the name and version of the tool which created the SBOM. If these are not specified, the application name is 'lib4sbom' and the version is '0.1'\n\n**Methods**\n\n_generate(project_name, sbom_data, filename = \"\", send_to_output = True)_\n\nThe method generates the SBOM file. The parameters are\n\n_project_name_ specifies the name of the project\n\n_sbom_data_ contain the SBOM data to be used in the generation. It contains details of the packages, files and relationships to be included in the SBOM.\n\n_filename_ is the name of the file to be generated. The default is for the output to be generated to a console.\n\n_send_to_output_ indicates if the output is to be sent to the filename.\n\nget_sbom()\nReturns the generated SBOM in the requested format\n\nget_type()\nReturns the type of the generated SBOM (either spdx or cyclonedx)\n\nget_format()\nReturns the format of the generated SBOM (one of tag, json or yaml)\n\n**Example**\n\nThe following code sample shows the use of the SBOMGenerator module being used\nin the conversion of a SBOM from the Tag Value format to YAML format. The output is sent ot the console.\n\n```python\n>>> from lib4sbom.parser import SBOMParser\n>>> test_parser = SBOMParser()\n>>> test_parser.parse_file(\"test_sbom.spdx\")\n>>> from lib4sbom.generator import SBOMGenerator\n>>> test_generator = SBOMGenerator(format=\"yaml\")\n>>> test_generator.get_type()\n'spdx'\n>>> test_generator.get_format()\n'yaml'\n>>> test_generator.generate(\"TestApp\",test_parser.get_sbom())\nSPDXID: SPDXRef-DOCUMENT\ncreationInfo:\n  comment: This document has been automatically generated.\n  created: '2023-01-24T13:51:36Z'\n  creators:\n  - 'Tool: lib4sbom-0.1.0'\n  licenseListVersion: '3.18'\ndataLicense: CC0-1.0\ndocumentNamespace: http://spdx.org/spdxdocs/TestDocument-817c4e4c-eac4-49d9-bc41-65f0972edce8\nname: TestDocument\n...\n- relatedSpdxElement: SPDXRef-Package-4-platformdirs\n  relationshipType: DESCRIBES\n  spdxElementId: SPDXRef-DOCUMENT\n- relatedSpdxElement: SPDXRef-Package-2-distlib\n  relationshipType: CONTAINS\n  spdxElementId: SPDXRef-Package-1-virtualenv\n- relatedSpdxElement: SPDXRef-Package-3-filelock\n  relationshipType: CONTAINS\n  spdxElementId: SPDXRef-Package-1-virtualenv\n- relatedSpdxElement: SPDXRef-Package-4-platformdirs\n  relationshipType: CONTAINS\n  spdxElementId: SPDXRef-Package-1-virtualenv\nspdxVersion: SPDX-2.3\n>>> test_generator.get_sbom()\n{'SPDXID': 'SPDXRef-DOCUMENT', 'spdxVersion': 'SPDX-2.3', 'creationInfo': {'comment': 'This document has been automatically generated.', 'creators': ['Tool: lib4sbom-0.1.0'], 'created': '2023-01-24T13:51:36Z', 'licenseListVersion': '3.18'}, 'name': 'TestDocument', 'dataLicense': 'CC0-1.0', 'documentNamespace': 'http://spdx.org/spdxdocs/TestDocument-817c4e4c-eac4-49d9-bc41-65f0972edce8', 'packages': [{'SPDXID': 'SPDXRef-Package-1-virtualenv', 'name': 'virtualenv', 'versionInfo': '20.16.7', 'supplier': 'Person: Bernat_Gabor', 'downloadLocation': 'NONE', 'filesAnalyzed': 'false', 'licenseConcluded': 'MIT', 'licenseDeclared': 'MIT', 'copyrightText': 'NOASSERTION', 'externalRefs': [{'referenceCategory': 'PACKAGE-MANAGER', 'referenceType': 'purl', 'referenceLocator': 'pkg:pypi/virtualenv@20.16.7'}]}, {'SPDXID': 'SPDXRef-Package-2-distlib', 'name': 'distlib', 'versionInfo': '0.3.6', 'supplier': 'Person: Vinay_Sajip', 'downloadLocation': 'NONE', 'filesAnalyzed': 'false', 'licenseConcluded': 'NOASSERTION', 'licenseDeclared': 'NOASSERTION', 'copyrightText': 'NOASSERTION', 'externalRefs': [{'referenceCategory': 'PACKAGE-MANAGER', 'referenceType': 'purl', 'referenceLocator': 'pkg:pypi/distlib@0.3.6'}]}, {'SPDXID': 'SPDXRef-Package-3-filelock', 'name': 'filelock', 'versionInfo': '3.8.0', 'supplier': 'Person: Benedikt_Schmitt', 'downloadLocation': 'NONE', 'filesAnalyzed': 'false', 'licenseConcluded': 'Unlicense', 'licenseDeclared': 'Unlicense', 'copyrightText': 'NOASSERTION', 'externalRefs': [{'referenceCategory': 'PACKAGE-MANAGER', 'referenceType': 'purl', 'referenceLocator': 'pkg:pypi/filelock@3.8.0'}]}, {'SPDXID': 'SPDXRef-Package-4-platformdirs', 'name': 'platformdirs', 'versionInfo': '2.5.4', 'supplier': 'Organization: Unknown', 'downloadLocation': 'NONE', 'filesAnalyzed': 'false', 'licenseConcluded': 'NOASSERTION', 'licenseDeclared': 'NOASSERTION', 'copyrightText': 'NOASSERTION', 'externalRefs': [{'referenceCategory': 'PACKAGE-MANAGER', 'referenceType': 'purl', 'referenceLocator': 'pkg:pypi/platformdirs@2.5.4'}]}], 'relationships': [{'spdxElementId': 'SPDXRef-DOCUMENT', 'relatedSpdxElement': 'SPDXRef-Package-1-virtualenv', 'relationshipType': 'DESCRIBES'}, {'spdxElementId': 'SPDXRef-DOCUMENT', 'relatedSpdxElement': 'SPDXRef-Package-2-distlib', 'relationshipType': 'DESCRIBES'}, {'spdxElementId': 'SPDXRef-DOCUMENT', 'relatedSpdxElement': 'SPDXRef-Package-3-filelock', 'relationshipType': 'DESCRIBES'}, {'spdxElementId': 'SPDXRef-DOCUMENT', 'relatedSpdxElement': 'SPDXRef-Package-4-platformdirs', 'relationshipType': 'DESCRIBES'}, {'spdxElementId': 'SPDXRef-Package-1-virtualenv', 'relatedSpdxElement': 'SPDXRef-Package-2-distlib', 'relationshipType': 'CONTAINS'}, {'spdxElementId': 'SPDXRef-Package-1-virtualenv', 'relatedSpdxElement': 'SPDXRef-Package-3-filelock', 'relationshipType': 'CONTAINS'}, {'spdxElementId': 'SPDXRef-Package-1-virtualenv', 'relatedSpdxElement': 'SPDXRef-Package-4-platformdirs', 'relationshipType': 'CONTAINS'}]}\n>>> \n```\n\n### SBOMOutput\n\n_class_ **SBOMOutput**(_filename=\"\", output_format=\"tag\"_)\n\nThis creates a simple SBOM Output object. The following optional parameters can be specified:\n\n_filename_ indicates the output destination of the SBOM to be generated. If a valid filename path is provided and a file can be created, then the output will be to a file otherwise\nit will be output to the console.\n\n_output_format_ indicates the format that the SBOM is to be generated in. Valid options are Tag, JSON or YAML. If an invalid format is specified,\na default format of Tag will be assumed.\n\n**Methods**\n\ngenerate_output(dataset) Outputs a SBOM file. The parameters are\n\n_dataset_ contains SBOM data in the output format. If the SBOM data is NOT in the format specified by the output_format parameter, no output will be generated.\n\n**NOTE A valid dataset will normally be generated by the SBOMGenerator class and obtained by a call to the get_sbom() method.**\n\nget_type()\nReturn the destination of the generated SBOM. Either file or console\n\nget_format()\nReturn the format of the generated SBOM. One of Tag, JSON or YAML.\n\n**Example**\n\nThe following code sample shows the use of the SBOMOutput module.\n\n```python\n>>> from lib4sbom.parser import SBOMParser\n>>> test_parser = SBOMParser()\n>>> test_parser.parse_file(\"test_sbom.spdx\")\n>>> from lib4sbom.generator import SBOMGenerator\n>>> test_generator = SBOMGenerator(format=\"json\")\n>>> test_generator.generate(\"TestApp\",test_parser.get_sbom())\n>>> from lib4sbom.output import SBOMOutput\n>>> sbom_output = SBOMOutput(filename=\"testapp.json\", output_format=\"json\")\n>>> sbom_output.generate_output(test_generator.get_sbom())\n>>> \n```\n\n### SBOM Object \n\n_class_ **SBOM**()\n\nThis creates a simple SBOM object. This object contains all the items to be contained within the SBOM including\ncomponents and relationships. It is left to the application manipulating the SBOM object to apply validation as appropriate\nfor the presence of each attribute.\n\n**Methods**\n\n**_Setter Methods_**\n\nFor the following attributes, a method **_set_attribute(value)_** is provided. Note that the attribute name is always in _lowercase_.\ne.g. set_type(). Unless indicated, the method just takes a single parameter for the value. Where indicated, multiple instances of the attribute may be defined.\n\n| Attribute         | Multiple | Note |\n|-------------------|----------|------|\n| Version           | No       | (1)  |\n| Type              | No       | (2)  |\n| Uuid              | No       | (3)  |\n| Bom_Version       | No       |      |\n\n**Note**\n\n1. This relates to the version of the specification of SBOM specified by the type atrribute. e.g. 1.4 for CycloneDX, SPDX-2.3 for SPDX.\n\n2. This refers to the type of SBOM either SPDX or CycloneDX.\n\n3. This relates to the unique identifier for the SBOM.\n\n**_Getter Methods_**\n\nget_sbom()\nReturns the SBOM object as a dictionary.\n\n**Example**\n\n```python\n>>> from lib4sbom.sbom import SBOM\n>>> sbom = SBOM()\n>>> sbom.set_type(sbom_type='cyclonedx')\n>>> sbom.set_version(\"1.4\")\n>>> sbom.set_uuid(\"urn:uuid:My_uuid_1234\")\n>>> sbom.set_bom_version(\"2\")\n>>> sbom.get_type()\n'cyclonedx'\n>>> from lib4sbom.data.document import SBOMDocument\n>>> my_doc = SBOMDocument()\n>>> my_doc.set_metadata_type(\"firmware\")\n>>> sbom.add_document(my_doc.get_document())\n```\n\n### SBOMDocument Object \n\n_class_ **SBOMDocument**()\n\nThis creates a simple SBOMDocument object. This object contains the values of the attributes\nthat can be associated with a SBOM. This includes attributes such as name, identifier, type of file,\nchecksum and licence information. As each of the attributes are optional, it is left to the application manipulating the\nSBOMFile object to apply validation as appropriate for the presence of each attribute.\n\n**Methods**\n\n**_Setter Methods_**\n\nFor the following attributes, a method **_set_attribute(value)_** is provided. Note that the attribute name is always in _lowercase_.\ne.g. set_filetype(). The attribute names are aligned with the attributes of the File Object in the SPDX Specification. Unless\nindicated, the method just takes a single parameter for the value. Where indicated, multiple instances of the attribute may be defined.\n\n| Attribute         | Multiple | Note |\n|-------------------|----------|------|\n| Name              | No       |      |\n| Id                | No       |      |\n| DataLicense       | No       |      |\n| Metadata_Type     | No       | (1)  |\n| Metadata_Supplier | No       |      |\n| Metadata_Version  | No       |      |\n| Bom_Version       | No       |      |\n\n**Note**\n\n1. This relates to the type of component which the SBOM is describing. This is attribute is only used for CycloneDX SBOMs.\n\nThere is an additional setter method, **set_value**(_attribute, value_) which allows the setting of any attribute.\n\n`set_value(\"language\", \"Rust\")`\n\n**_Getter Methods_**\n\nget_document()\nReturns the SBOMDocument object as a list.\n\nget_name()\nReturns the name of the SBOMDocument object or a default value if the attribute does not exist within the instance of the SBOMDocument object.\n\nget_value(attribute)\nReturns the value of the attribute. A default value is returned if the attribute does not exist within the instance of the SBOMDocument object.\n\n**Example**\n\n```python\n>>> from lib4sbom.data.document import SBOMDocument\n>>> sbom_document = SBOMDocument()\n>>> sbom_document.set_name(\"test_file\")\n>>> sbom_document.set_metadata_type(\"firmware\")\n>>> sbom_document.get_name()\n'test_file'\n>>> from lib4sbom.sbom import SBOM\n>>> my_sbom = SBOM()\n>>> my_sbom.add_document(sbom_document.get_document())\n```\n\n### SBOMFile Object\n\n_class_ **SBOMFile**()\n\nThis creates a simple SBOM File object. This object contains the values of the attributes\nthat can be associated with a file artefact within an SBOM. This includes attributes such as name, identifier, type of file,\nchecksum and licence information. As each of the attributes are optional, it is left to the application manipulating the\nSBOMFile object to apply validation as appropriate for the presence of each attribute.\n\n**Methods**\n\n**_Setter Methods_**\n\nFor the following attributes, a method **_set_attribute(value)_** is provided. Note that the attribute name is always in _lowercase_.\ne.g. set_filetype(). The attribute names are aligned with the attributes of the File Object in the SPDX Specification. Unless\nindicated, the method just takes a single parameter for the value. Where indicated, multiple instances of the attribute may be defined.\n\n| Attribute         | Multiple | Note |\n|-------------------|----------|------|\n| Name              | No       |      |\n| Id                | No       |      |\n| FileType          | Yes      |      |\n| Checksum          | Yes      | (1)  |\n| LicenseConcluded  | No       |      |\n| LicenceInfoInFile | Yes      |      |\n| LicenceComment    | No       |      |\n| CopyrightText     | No       |      |\n| Comment           | No       |      |\n| Notice            | No       |      |\n| Contributor       | Yes      |      |\n| Attribution       | No       |      |\n\n**Note**\n\n1. The set_checksum method takes two parameters, the checksum algorithm (e.g. SHA256) and the actual checksum value (as a string)\n\nThere is an additional setter method, **set_value**(_attribute, value_) which allows the setting of any attribute.\n\n`set_value(\"language\", \"Rust\")`\n\n**_Getter Methods_**\n\nget_file()\nReturns the SBOMFile object as a dictionary. The value of an attribute is returned as a string except where multiple instances of an attribute are allowed in which\ncase the value of the attribute is returned as a List.\n\nget_name()\nReturns the name of the SBOMFile object or None if the 'name' attribute does not exist within the instance of the SBOMFile object.\n\nget_value(attribute)\nReturns the value of the attribute. A default value is returned if the attribute does not exist within the instance of the SBOMFile object.\n\n_**Utility Methods**_\n\ninitialise() Reinitialises a SBOMFile Object. All data associated with the object is deleted.\n\n**Example**\n\n```python\n>>> from lib4sbom.data.file import SBOMFile\n>>> sbom_file = SBOMFile()\n>>> sbom_files = {}\n>>> sbom_file.initialise()\n>>> sbom_file.set_name(\"test_file.c\")\n>>> sbom_file.set_licenseconcluded(\"MIT\")\n>>> file_hash = <<< some calculation >>>\n>>> sbom_file.set_checksum(\"SHA1\", file_hash)\n>>> sbom_file.set_id(\"SPDXRef-File-0001\")\n>>> sbom_files[sbom_file.get_name()] = sbom_file.get_file()\n>>> sbom_file.initialise()                                  \n>>> sbom_file.set_name(\"makefile\")                       \n>>> sbom_file.set_licenseconcluded(\"NOASSERTION\")                    \n>>> sbom_file.set_id(\"SPDXRef-File-0002\")                   \n>>> sbom_files[sbom_file.get_name()] = sbom_file.get_file()\n>>> from lib4sbom.sbom import SBOM\n>>> my_sbom = SBOM()\n>>> my_sbom.add_files(sbom_files)\n```\n\n### SBOMPackage Object\n                \n_class_ **SBOMPackage**()\n\nThis creates a simple SBOM Package object. This object contains the values of the attributes\nthat can be associated with a package or component artefact within an SBOM. This includes attributes such as name, identifier, supplier,\nversion and licence information. As each of the attributes are optional, it is left to the application manipulating the\nSBOMPackage object to apply validation as appropriate for the presence of each attribute.\n\n**_Setter Methods_**\n\nFor the following attributes, a method **_set_attribute(value)_** is provided. Note that the attribute name is always in _lowercase_.\ne.g. set_version(). The attribute names are aligned with the attributes of the Package Object in the SPDX Specification. Unless\nindicated, the method just takes a single parameter for the value. Where indicated, multiple instances of the attribute may be defined.\n\n| Attribute         | Multiple | Note |\n|-------------------|----------|------|\n| Name              | No       |      |\n| Id                | No       |      |\n| Type              | No       | (1)  |\n| Checksum          | Yes      | (2)  |\n| LicenseConcluded  | No       |      |\n| LicenseDeclared   | No       | (3)  |\n| LicenceInfoInFile | Yes      |      |\n| LicenceComments   | No       |      |\n| FilesAnalysis     | No       |      |\n| CopyrightText     | No       |      |\n| Comment           | No       |      |\n| Originator        | No       |      |\n| Supplier          | No       |      |\n| Version           | No       |      |\n| Homepage          | No       |      |\n| Property          | Yes      | (4)  |\n| DownloadLocation  | No       |      |\n| Description       | No       |      |\n| ExternalReference | Yes      | (5)  |\n| Cpe               | No       |      |\n| Purl              | No       | (6)  |\n| Summary           | No       |      |\n| SourceInfo        | No       |      |\n| Filename          | No       |      |\n\n**Note**\n\n1. The set_type method is used to indicate the purpose of the package (e.g. Application, Library, Operating-System).\n\n2. The set_checksum method takes two parameters, the checksum algorithm (e.g. SHA256) and the actual checksum value (as a string)\n\n3. The set_licensedeclared method takes an optional second parameter which is the license name. In this case the first parameter, license, is assumed to be the license text rather than the license identity.\n\n4. The set_property method takes two parameters which are the property name and value.\n\n5. The set_externalreference method takes three parameters which are the category (SECURITY or PACKAGE_MANAGER), type (cpe22Type, cpe23Type or purl) and the element corresponding to the tyoe.\n\n6. The set_cpe takes an optional second parameter which is the CPE type (default is cpeType23).\n\nThere is an additional setter method, **set_value**(_attribute, value_) which allows the setting of any attribute.\n\n`set_value(\"language\", \"Rust\")`\n\n**_Getter Methods_**\n\nget_package()\nReturns the SBOMPackage object as a dictionary. The value of an attribute is returned as a string except where multiple instances of an attribute are allowed in which\ncase the value of the attribute is returned as a List.\n\nget_name()\nReturns the name of the SBOMPackage object or None if the 'name' attribute does not exist within the instance of the SBOMPackage object.\n\nget_value(attribute)\nReturns the value of the attribute. A default value is returned if the attribute does not exist within the instance of the SBOMPackage object.\n\nget_purl()\nReturns the PURL identifier as a string for the package or None if no PURL element is defined.\n\nget_cpe()\nReturns the CPE identifier as a string for the package or None if no CPE element is defined.\n\n**_Utility Methods_**\n\ninitialise() Reinitialises a SBOMPackage Object. All data associated with the object is deleted.\n\n**Example**\n\n```python\n>>> from lib4sbom.data.package import SBOMPackage\n>>> sbom_packages = {}\n>>> my_package = SBOMPackage()\n>>> my_package.set_name(\"glibc\")\n>>> my_package.set_version(\"2.15\")\n>>> my_package.set_supplier(\"organisation\",\"gnu\")\n>>> my_package.set_licensedeclared(\"GPL3\")\n>>> sbom_packages[(my_package.get_name(), my_package.get_value('version'))] = my_package.get_package()\n>>> my_package.initialise()\n>>> my_package.set_name(\"tomcat\")\n>>> my_package.set_version(\"9.0.46\")\n>>> my_package.set_supplier(\"organisation\",\"apache\")\n>>> my_package.set_licensedeclared(\"Apache-2.0\")\n>>> sbom_packages[(my_package.get_name(), my_package.get_value('version'))] = my_package.get_package()\n>>> from lib4sbom.sbom import SBOM\n>>> my_sbom = SBOM()\n>>> my_sbom.add_packages(sbom_packages)\n```\n\n### SBOMRelationship Object\n\n_class_ **SBOMRelationship**()\n\nThis creates a simple SBOMRelationship object which is used to show the relationship between two items within an SBOM.\nAs there are multiple types of relationships, it is left to the application manipulating the\nSBOMRelationship object to apply validation as appropriate to ensure the semantics of the relationship are correct.\n\n**_Setter Methods_**\n\nset_relationship (source, type, target)\n\n_source_ and _target_ are the unique identifiers of the components for which the relationship is being defined.\n\n_type_ is the type of relationship being defined.\n\n**_Getter Methods_**\n\nget_relationship()\nReturns the SBOMRelationship object as a dictionary.\n\n**Example**\n\n```python\n>>> from lib4sbom.data.relationship import SBOMRelationship\n>>> sbom_relationships = []\n>>> my_relationship = SBOMRelationship()\n>>> my_relationship.set_relationship(\"Package-1\",\"CONTAINS\", \"Package-2\")\n>>> sbom_relationships.append(my_relationship)\n>>> from lib4sbom.sbom import SBOM\n>>> my_sbom = SBOM()\n>>> my_sbom.add_relationships(sbom_relationships)\n```\n\n### Vulnerability Object\n\n_class_ **Vulnerability**(validation = None)\n\nThis creates a simple vulnerability object which is used to define the details of a vulnerability typically for a component\nspecified within an SBOM. As there are multiple ways of specifying the status of a vulnerability, it is left to the\napplication manipulating the Vulnerability object to apply validation as appropriate to ensure the semantics of the vulnerability are correct.\n\nThe following optional parameter can be specified:\n\n_validation_ indicates that the status field is to be validated against the [OpenVEX](https://openvex.dev), [CycloneDX](https://www.cyclonedx.org) or [CSAF](https://docs.oasis-open.org/csaf/csaf/v2.0/csaf-v2.0.html) specifcaitions.\n\n**NOTE** Vulnerability objects are only included in CyclonedDX SBOMs\n\n**_Setter Methods_**\n\nFor the following attributes, a method **_set_attribute(value)_** is provided. Note that the attribute name is always in _lowercase_.\ne.g. set_release(). Each method takes a single parameter for the value. Multiple instances of the attribute are not allowed.\n\n\n| Attribute         | Multiple | Note |\n|-------------------|----------|------|\n| Name              | No       |      |\n| Id                | No       | (1)  |\n| Release           | No       |      |\n| Status            | No       | (2)  |\n| Comment           | No       | (3)  |\n| Description       | No       | (4)  |\n\n\n**Note**\n\n1. The set_id method is used to indicate the identity of the vulnerability e.g. CVE-2021-44228\n\n2. The set_status is used to indicate the status of the vulnerability. Validation of the value of status may be optionally performed as determined by\nthe optional parameter _validation_ specified in the creation of the Vulnerability object. An invalid status is indicated by a value of None.\n\n3. The set_comment method is used to provide additional information to support the status value e.g. a brief justification\n\n4. The set_description method is used to describe the vulnerability.\n\nThere is an additional setter method, **set_value**(_attribute, value_) which allows the setting of any attribute.\n\n`set_value(\"bom-ref\", \"rust@1.2.3\")`\n\n**_Getter Methods_**\n\nget_vulnerability()\nReturns the vulnerability object as a dictionary.\n\n**Example**\n\n```python\n>>> from lib4sbom.data.vulnerability import Vulnerability\n>>> vulnerabilities = []\n>>> vulnerability = Vulnerability(validation=\"cyclonedx\")\n>>> vulnerability.set_id(\"CVE-2023-1235\")\n>>> vulnerability.set_name(\"rust\")\n>>> vulnerability.set_release(\"1.2.3\")\n>>> vulnerability.set_value(\"bom-ref\", \"rust@1.2.3\")\n>>> vulnerability.set_status(\"in_triage\")\n>>> vulnerabilities.append(vulnerability.get_vulnerability())\n>>> from lib4sbom.sbom import SBOM\n>>> my_sbom = SBOM()\n>>> my_sbom.add_vulnerabilities(vulnerabilities)\n```\n\n### Services Object\n\n_class_ **SBOMService**(validation = None)\n\nThis creates a simple software service object which is used to define the details of a software service. As there are multiple ways of specifying the status of a vulnerability, it is left to the\napplication manipulating the Vulnerability object to apply validation as appropriate to ensure the semantics of the vulnerability are correct.\n\n**NOTE** Services objects are only included in CyclonedDX SBOMs\n\n**_Setter Methods_**\n\nFor the following attributes, a method **_set_attribute(value)_** is provided. Note that the attribute name is always in _lowercase_.\ne.g. set_release(). Each method takes a single parameter for the value. Multiple instances of the attribute are not allowed.\n\n\n| Attribute        | Multiple | Note |\n|------------------|----------|------|\n| Name             | No       |      |\n| Id               | No       | (1)  |\n| Version          | No       |      |\n| Provider         | No       | (2)  |\n| Endpoint         | Yes      |      |\n| Data             | Yes      | (3)  |\n| Property         | Yes      | (4)  |\n| License          | Yes      |      |\n| Exernalreference | Yes      | (5)  |\n| Description      | No       |      |\n\n\n**Note**\n\n1. The set_id method is used to indicate the identity of the service. If this is not specified, an id will be automatically generated.\n\n2. The set_provider is used to specify details of the service provider. There are multiple parameters which can be specified (name, url, contactname, email address and phone) at least one must be specified.\n\n3. The set_data method is used to provide additional information to describe the data being exhanged. There are two mandatatory parameters flow type (\"Inbound\", \"Outbound\", \"Bi-directional\" or \"Unknown\") and classification, and two optional paramters name and description.\n\n4. The set_property method takes two parameters which are the property name and value.\n\n5. The set_externalreference method takes three parameters, the URL, the type of information being referenced and an optional comment.\n\nThere is an additional setter method, **set_value**(_attribute, value_) which allows the setting of any attribute.\n\n`set_value(\"trustzone\", \"Data_DMZ\")`\n\n**_Getter Methods_**\n\nget_service()\nReturns the service object as a dictionary.\n\n**Example**\n\n```python\n>>> from lib4sbom.data.service import SBOMService\n>>> sbom_services = {}\n>>> my_service=SBOMService()\n>>> my_service.set_name(\"Microsoft 365\")\n>>> my_service.set_version(\"2022.04\")\n>>> my_service.set_provider(name=\"Microsoft Inc.\", contact=\"Fred Flintstone\", email=\"fred@micrsoft.com\")\n>>> my_service.set_description(\"Business productivity suite\")\n>>> my_service.set_value(\"authenticated\",True)\n>>> my_service.set_endpoint(\"www.microsoft.com\")\n>>> my_service.set_endpoint(\"www.microsoft.com/owa\")\n>>> my_service.set_data(\"Bi-directional\",\"None\",description=\"document\")\n>>> my_service.set_data(\"outbound\",\"PII\",name=\"User information\")\n>>> my_service.set_license(\"Apache-2.0\")\n>>> my_service.set_license(\"MIT\")\n>>> my_service.set_property(\"Data_Location\",\"EU\")\n>>> my_service.set_externalreference(\"https://www.microsoft.com\",\"Website\", \"Company website\")\n>>> sbom_services[(my_service.get_name(), my_service.get_value('version'))] = my_service.get_service()\n>>> from lib4sbom.sbom import SBOM\n>>> my_sbom = SBOM()\n>>> my_sbom.add_services(sbom_services)\n```\n\n## Examples\n\nA number of example scripts are included in the _examples_ subdirectory.\n\t\t\t\t\t\t\n## Implementation Notes\n\nThe following design decisions have been made in processing the SBOM files:\n\n1. It is assumed that the SBOM is valid and contains syntactically valid data.\n\n2. In SPDX format, the tool assumes that the name of a package preceeds the version and license of the package.\n\n3. In SPDX format, the current implementation does not currently handle multi-line elements.\n\n4. When processing and validating licenses, the application will use a set of synonyms to attempt to map some license identifiers to the correct [SPDX License Identifiers](https://spdx.org/licenses/). However, the\nuser of the tool is reminded that they should assert the quality of any data which is provided by the tool particularly where the license identifier has been modified.\n\n## Future Development\n\n1. Support later versions of SPDX (3.0).\n\n2. Enhance validation of SBOM data to check for all mandatory elements.\n\n3. Implement Python typing across modules.\n\n4. Migrate packaging infrastructure away from setup.py.\n\n5. Utilise third-party SPDX and CycloneDX parsers and generators\n\n6. Add further support for SPDX XML and RDF formats\n\n7. Add generator for CycloneDX XML documents.\n\n8. Implement test suite.\n\n## License\n\nLicensed under the Apache 2.0 Licence.\n\nThe tool uses a local copy of the [SPDX Licenses List](https://github.com/spdx/license-list-data) which is released under\n[Creative Commons Attribution 3.0 (CC-BY-3.0)](http://creativecommons.org/licenses/by/3.0/).\n\nThis tool uses information sourced from the [Blue Oak Council's License List](https://blueoakcouncil.org/list) which is released under\n[Creative Commons Attribution 1.0 (CC-BY-1.0)](https://creativecommons.org/licenses/by/1.0/).\n\n## Limitations\n\nThis tool is meant to support software development. The usefulness of the tool is dependent on the SBOM data\nwhich is provided to the tool. Unfortunately, the tool is unable to determine the validity or completeness of such a SBOM file; users of the tool\nare therefore reminded that they should assert the quality of any data which is provided to the tool.\n\n## Feedback and Contributions\n\nBugs and feature requests can be made via GitHub Issues.\n","description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/anthonyharrison/lib4sbom","keywords":"security, tools, SBOM, DevSecOps, SPDX, CycloneDX, library","license":"Apache-2.0","maintainer":"Anthony Harrison","maintainer_email":"anthony.p.harrison@gmail.com","name":"lib4sbom","package_url":"https://pypi.org/project/lib4sbom/","platform":null,"project_url":"https://pypi.org/project/lib4sbom/","project_urls":{"Homepage":"https://github.com/anthonyharrison/lib4sbom"},"provides_extra":null,"release_url":"https://pypi.org/project/lib4sbom/0.7.1/","requires_dist":["pyyaml>=5.4","semantic-version","defusedxml"],"requires_python":">=3.7","summary":"Software Bill of Material (SBOM) generator and consumer library","version":"0.7.1","yanked":false,"yanked_reason":null},"last_serial":22948642,"releases":{"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"da717c4494851f328290c31f07ab17581f4241c709b6ec60ff5d754e31a1f4cd","md5":"962546a266c28b05aba02b614acb371f","sha256":"95c43fc65d162fdb650b9712b908033f4b3279fd34e10f47c0dc99fb538f724e"},"downloads":-1,"filename":"lib4sbom-0.1.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"962546a266c28b05aba02b614acb371f","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":92523,"upload_time":"2023-01-30T15:37:02","upload_time_iso_8601":"2023-01-30T15:37:02.719720Z","url":"https://files.pythonhosted.org/packages/da/71/7c4494851f328290c31f07ab17581f4241c709b6ec60ff5d754e31a1f4cd/lib4sbom-0.1.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"7abc637d4224ce5915a6dd9752153a01e913ca575aa3490de79f2fd196a1ad58","md5":"66f7e094c619d7f770948e01d09bbf34","sha256":"51417fadd3166b0658bd701f4c7c9131b8f41553fd0572d0f1c10fb6f15d3775"},"downloads":-1,"filename":"lib4sbom-0.1.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"66f7e094c619d7f770948e01d09bbf34","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":92537,"upload_time":"2023-02-01T11:52:19","upload_time_iso_8601":"2023-02-01T11:52:19.422733Z","url":"https://files.pythonhosted.org/packages/7a/bc/637d4224ce5915a6dd9752153a01e913ca575aa3490de79f2fd196a1ad58/lib4sbom-0.1.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.2.0":[{"comment_text":"","digests":{"blake2b_256":"37f827a8ef7e4ec4314525099d00aac6eaa4bfb4ba00bc016f7047df3c504611","md5":"fdcc5a96699754207fe584f1e4183728","sha256":"16ec921fb7ca3f6de282cc161af2162ff8a8e8b797e5ab010d2820439b7165ba"},"downloads":-1,"filename":"lib4sbom-0.2.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"fdcc5a96699754207fe584f1e4183728","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":72113,"upload_time":"2023-03-07T12:12:32","upload_time_iso_8601":"2023-03-07T12:12:32.947478Z","url":"https://files.pythonhosted.org/packages/37/f8/27a8ef7e4ec4314525099d00aac6eaa4bfb4ba00bc016f7047df3c504611/lib4sbom-0.2.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.3.0":[{"comment_text":"","digests":{"blake2b_256":"a2781069856248895bd831f375b2082871e0ad369155e9760a14837352c070cd","md5":"b3bf958c565e954e471664deca061a69","sha256":"49897a423ee6cecc3bd0d72e326425ab3760d4cfa345ef56a5771e51d58b192f"},"downloads":-1,"filename":"lib4sbom-0.3.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"b3bf958c565e954e471664deca061a69","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":76885,"upload_time":"2023-03-27T13:51:40","upload_time_iso_8601":"2023-03-27T13:51:40.044678Z","url":"https://files.pythonhosted.org/packages/a2/78/1069856248895bd831f375b2082871e0ad369155e9760a14837352c070cd/lib4sbom-0.3.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.3.1":[{"comment_text":"","digests":{"blake2b_256":"59a65e594b9d2554b0bd1449276c71ae542d5714d78d7e1c5be1c315e71c3026","md5":"83988da51e0a145fd5d0e64f90e2ee15","sha256":"8a33fa54d9d01f6866c98bcf3dc95c5b093634d4259e84c5451b51ff6f800786"},"downloads":-1,"filename":"lib4sbom-0.3.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"83988da51e0a145fd5d0e64f90e2ee15","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":78965,"upload_time":"2023-04-14T15:03:45","upload_time_iso_8601":"2023-04-14T15:03:45.675564Z","url":"https://files.pythonhosted.org/packages/59/a6/5e594b9d2554b0bd1449276c71ae542d5714d78d7e1c5be1c315e71c3026/lib4sbom-0.3.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.4.0":[{"comment_text":"","digests":{"blake2b_256":"022323ef86909595df684a67bb50a3db51eaa71dc3de0d0999814d67e7c9e0f9","md5":"e70bf429154b598ec87ca13427670daf","sha256":"49e9a686ea7910ddc2d5527c6fb16da3831a4dc82c71cbc4c16d3f9354de25c3"},"downloads":-1,"filename":"lib4sbom-0.4.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"e70bf429154b598ec87ca13427670daf","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":78038,"upload_time":"2023-07-24T10:28:41","upload_time_iso_8601":"2023-07-24T10:28:41.414913Z","url":"https://files.pythonhosted.org/packages/02/23/23ef86909595df684a67bb50a3db51eaa71dc3de0d0999814d67e7c9e0f9/lib4sbom-0.4.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.4.1":[{"comment_text":"","digests":{"blake2b_256":"bdc16b5eb8d33cc6d29585b8976119d123b45e7574a9bbdaacd9e2ccef65fb30","md5":"f32cf286ae7c44bacb71eea949d6cd55","sha256":"32f1e80b036831f628e7f9cbfa4a765763791f1004fce4f0cb040310046d9ff3"},"downloads":-1,"filename":"lib4sbom-0.4.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"f32cf286ae7c44bacb71eea949d6cd55","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":78114,"upload_time":"2023-08-03T21:03:52","upload_time_iso_8601":"2023-08-03T21:03:52.094104Z","url":"https://files.pythonhosted.org/packages/bd/c1/6b5eb8d33cc6d29585b8976119d123b45e7574a9bbdaacd9e2ccef65fb30/lib4sbom-0.4.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.4.2":[{"comment_text":"","digests":{"blake2b_256":"b4ca85ffb127014faef5001866135ebf710fe0e4567700b417d193367208c24b","md5":"c02d1b2f39c11fe2b0012c7df28e42b5","sha256":"55388c12f4565595a313ff8e16196759ef4c13cefb760e53957ef61dd6078fba"},"downloads":-1,"filename":"lib4sbom-0.4.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"c02d1b2f39c11fe2b0012c7df28e42b5","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":78234,"upload_time":"2023-08-13T10:13:11","upload_time_iso_8601":"2023-08-13T10:13:11.793622Z","url":"https://files.pythonhosted.org/packages/b4/ca/85ffb127014faef5001866135ebf710fe0e4567700b417d193367208c24b/lib4sbom-0.4.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.4.3":[{"comment_text":"","digests":{"blake2b_256":"cc9a78f0c977dde9016499c039bd126ce7049bf797b28c7bd62c89664d6045a1","md5":"b2b7e471adb5dde76d7a20a02fd484f3","sha256":"0a9327911126970e573030aa036ae6abca524ae8a251c46fa4c4c3d855edc024"},"downloads":-1,"filename":"lib4sbom-0.4.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"b2b7e471adb5dde76d7a20a02fd484f3","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":78344,"upload_time":"2023-08-15T08:28:10","upload_time_iso_8601":"2023-08-15T08:28:10.523169Z","url":"https://files.pythonhosted.org/packages/cc/9a/78f0c977dde9016499c039bd126ce7049bf797b28c7bd62c89664d6045a1/lib4sbom-0.4.3-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.5.0":[{"comment_text":"","digests":{"blake2b_256":"bfc5d21d8159958a9dba4a53124d440cda59f8c1e229d700b7491e9d4d1c5872","md5":"0df89506585df3e145627cb2a36a30a7","sha256":"1bfaccd6d5257bca41f9a681116b0d11c6408454a8d62e05472bda86d79317a2"},"downloads":-1,"filename":"lib4sbom-0.5.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"0df89506585df3e145627cb2a36a30a7","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":89417,"upload_time":"2023-10-02T19:20:34","upload_time_iso_8601":"2023-10-02T19:20:34.950872Z","url":"https://files.pythonhosted.org/packages/bf/c5/d21d8159958a9dba4a53124d440cda59f8c1e229d700b7491e9d4d1c5872/lib4sbom-0.5.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.5.1":[{"comment_text":"","digests":{"blake2b_256":"b64bd650dd24e5e56717874428c11b40297aaf0e789e73a46380a53600b872ba","md5":"885ebd7ae70ce841110d099c8f62bcdd","sha256":"1a787183657fde6e308ab01b2842bf4e7cd0dfe6e995303e540a82322aa4ce89"},"downloads":-1,"filename":"lib4sbom-0.5.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"885ebd7ae70ce841110d099c8f62bcdd","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":89430,"upload_time":"2023-10-05T17:39:31","upload_time_iso_8601":"2023-10-05T17:39:31.061035Z","url":"https://files.pythonhosted.org/packages/b6/4b/d650dd24e5e56717874428c11b40297aaf0e789e73a46380a53600b872ba/lib4sbom-0.5.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.5.2":[{"comment_text":"","digests":{"blake2b_256":"a6f435635b10cdf0f824166cc607f48c92b28bcc5c7874d892286d701a95bfc6","md5":"859c0e902829a5d69bdb3f50f403d4c1","sha256":"a2d99791b0754df2de748c215112fbbebd84ada458d60283c6a52eba28efca1b"},"downloads":-1,"filename":"lib4sbom-0.5.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"859c0e902829a5d69bdb3f50f403d4c1","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":92924,"upload_time":"2023-11-26T16:14:58","upload_time_iso_8601":"2023-11-26T16:14:58.542458Z","url":"https://files.pythonhosted.org/packages/a6/f4/35635b10cdf0f824166cc607f48c92b28bcc5c7874d892286d701a95bfc6/lib4sbom-0.5.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.5.3":[{"comment_text":"","digests":{"blake2b_256":"a4c7ccdd62c5efcb0c1e25acb56cbbe90f26d1da6eefabc95f3f11e1e1edd859","md5":"9b5763a400c79747c7c5079deb984ffd","sha256":"24c60c2dda3ae843204577964d5e0f9729243d24c03f15c14e61d28ad7a5e598"},"downloads":-1,"filename":"lib4sbom-0.5.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"9b5763a400c79747c7c5079deb984ffd","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":92950,"upload_time":"2023-11-26T17:35:16","upload_time_iso_8601":"2023-11-26T17:35:16.060426Z","url":"https://files.pythonhosted.org/packages/a4/c7/ccdd62c5efcb0c1e25acb56cbbe90f26d1da6eefabc95f3f11e1e1edd859/lib4sbom-0.5.3-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.5.4":[{"comment_text":"","digests":{"blake2b_256":"e2d1657e656dd3a6684b3758a6267ec351091b0b1485229768ba50e7bccc6d11","md5":"0a2c1fc3969bcf9df67020e9f246f266","sha256":"a19027bfbde4c700fe6bfc83c9404d0c6b2b17e3c0a68539cf1bbb919aa25b72"},"downloads":-1,"filename":"lib4sbom-0.5.4-py2.py3-none-any.whl","has_sig":false,"md5_digest":"0a2c1fc3969bcf9df67020e9f246f266","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":93006,"upload_time":"2023-12-13T12:36:03","upload_time_iso_8601":"2023-12-13T12:36:03.002693Z","url":"https://files.pythonhosted.org/packages/e2/d1/657e656dd3a6684b3758a6267ec351091b0b1485229768ba50e7bccc6d11/lib4sbom-0.5.4-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.6.0":[{"comment_text":"","digests":{"blake2b_256":"302d7c4dd3f7081b0ad4f2e62fbb962e8eec954495d6a30b3e513617d48abc78","md5":"80563530a5896c4a924285aca6f68062","sha256":"de6e09304b631fcfe14d9ef1858270ffefb25cd49ab091657a4cc9a1f899040a"},"downloads":-1,"filename":"lib4sbom-0.6.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"80563530a5896c4a924285aca6f68062","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":102266,"upload_time":"2024-01-02T14:04:29","upload_time_iso_8601":"2024-01-02T14:04:29.749669Z","url":"https://files.pythonhosted.org/packages/30/2d/7c4dd3f7081b0ad4f2e62fbb962e8eec954495d6a30b3e513617d48abc78/lib4sbom-0.6.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.6.1":[{"comment_text":"","digests":{"blake2b_256":"78516d6f438920330290c3d2f60f9ac6a7bd23cefa31462b3682b2f981da729b","md5":"ed68616e28b5367ce6668ba9d10ae1d2","sha256":"a4b6b4af4ac07bcda4a0725445e0dfa483fc62417dc6255118de35c8bad93468"},"downloads":-1,"filename":"lib4sbom-0.6.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"ed68616e28b5367ce6668ba9d10ae1d2","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":102657,"upload_time":"2024-01-03T19:05:56","upload_time_iso_8601":"2024-01-03T19:05:56.273628Z","url":"https://files.pythonhosted.org/packages/78/51/6d6f438920330290c3d2f60f9ac6a7bd23cefa31462b3682b2f981da729b/lib4sbom-0.6.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.6.2":[{"comment_text":"","digests":{"blake2b_256":"81297dc89027fb267832a224aa189ea8f538de382825afbde6f77b86f9e32a84","md5":"8829607c5f69c9a7a528ee316df005ab","sha256":"5de96864bad3152db7050525ae208e015809064276cf8e7e61dc48d049a100a5"},"downloads":-1,"filename":"lib4sbom-0.6.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"8829607c5f69c9a7a528ee316df005ab","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":104172,"upload_time":"2024-02-13T14:18:48","upload_time_iso_8601":"2024-02-13T14:18:48.237979Z","url":"https://files.pythonhosted.org/packages/81/29/7dc89027fb267832a224aa189ea8f538de382825afbde6f77b86f9e32a84/lib4sbom-0.6.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.7.0":[{"comment_text":"","digests":{"blake2b_256":"55d7fcfe8a7eea63676fe203bfa636175e5ec3ffa586949932cd5f717e757c07","md5":"d259944d68ffc2e3e4a57b58a4e05836","sha256":"0c0d4b48ba9e3b44fe3188680126013d71a29c216bb02e06444465f666007e86"},"downloads":-1,"filename":"lib4sbom-0.7.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"d259944d68ffc2e3e4a57b58a4e05836","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":113385,"upload_time":"2024-03-25T18:06:54","upload_time_iso_8601":"2024-03-25T18:06:54.748271Z","url":"https://files.pythonhosted.org/packages/55/d7/fcfe8a7eea63676fe203bfa636175e5ec3ffa586949932cd5f717e757c07/lib4sbom-0.7.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.7.1":[{"comment_text":"","digests":{"blake2b_256":"9fd85b505698b107a6cb5a20f89063559ed17bb89cbf0a6d8d57eb1a636f12cd","md5":"7d95b8bb269b00054fdb6354b85254ad","sha256":"ec918566d41c22c1223cf13f9f6e42f9657eeb2acccce35f279f8fc628b7016f"},"downloads":-1,"filename":"lib4sbom-0.7.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"7d95b8bb269b00054fdb6354b85254ad","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":2131996,"upload_time":"2024-04-26T14:26:48","upload_time_iso_8601":"2024-04-26T14:26:48.157682Z","url":"https://files.pythonhosted.org/packages/9f/d8/5b505698b107a6cb5a20f89063559ed17bb89cbf0a6d8d57eb1a636f12cd/lib4sbom-0.7.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"9fd85b505698b107a6cb5a20f89063559ed17bb89cbf0a6d8d57eb1a636f12cd","md5":"7d95b8bb269b00054fdb6354b85254ad","sha256":"ec918566d41c22c1223cf13f9f6e42f9657eeb2acccce35f279f8fc628b7016f"},"downloads":-1,"filename":"lib4sbom-0.7.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"7d95b8bb269b00054fdb6354b85254ad","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.7","size":2131996,"upload_time":"2024-04-26T14:26:48","upload_time_iso_8601":"2024-04-26T14:26:48.157682Z","url":"https://files.pythonhosted.org/packages/9f/d8/5b505698b107a6cb5a20f89063559ed17bb89cbf0a6d8d57eb1a636f12cd/lib4sbom-0.7.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
