{"info":{"author":"Jeff Rescignano","author_email":"jeff@jeffresc.dev","bugtrack_url":null,"classifiers":["License :: OSI Approved :: MIT License","Programming Language :: Python :: 3","Programming Language :: Python :: 3.7"],"description":"[![codecov](https://codecov.io/gh/JeffResc/sharkiq/branch/main/graph/badge.svg?token=DO96BWVXA7)](https://codecov.io/gh/JeffResc/sharkiq)\n![PyPI](https://img.shields.io/pypi/v/sharkiq)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/sharkiq)\n![GitHub](https://img.shields.io/github/license/JeffResc/sharkiq)\n# sharkiq\nUnofficial SDK for Shark IQ robot vacuums, designed primarily to support an integration for [Home Assistant](https://www.home-assistant.io/).\n\nThis library is heavily based off of [sharkiq](https://github.com/ajmarks/sharkiq) by [@ajmarks](https://github.com/ajmarks), with a few minor changes to allow it to work on newer versions of the Shark API.\n\n## Installation\n\n```bash\npip install sharkiq\n```\n\n## Usage\n### Simple Operation\n```python\nfrom sharkiq import get_ayla_api, OperatingModes, Properties, PowerModes\n\nUSERNAME = 'me@email.com'\nPASSWORD = '$7r0nkP@s$w0rD'\n\nayla_api = get_ayla_api(USERNAME, PASSWORD)\nayla_api.sign_in()\n\nshark_vacs = ayla_api.get_devices()\nshark = shark_vacs[0]\n\nshark.update()\nshark.set_operating_mode(OperatingModes.START)\nshark.return_to_base()\n```\n\n### Async operation\n```python\nimport asyncio\nfrom sharkiq import get_ayla_api, OperatingModes, SharkIqVacuum\n\nUSERNAME = 'me@email.com'\nPASSWORD = '$7r0nkP@s$w0rD'\n\nasync def main(ayla_api) -> SharkIqVacuum:\n    await ayla_api.async_sign_in()\n        \n    shark_vacs = await ayla_api.async_get_devices()\n    shark = shark_vacs[0]\n    await shark.async_update()\n    await shark.async_find_device()\n    await shark.async_set_operating_mode(OperatingModes.START)\n\n    return shark\n\n\nayla_api = get_ayla_api(USERNAME, PASSWORD)\nshark = asyncio.run(main(ayla_api))\n```\n\n## Documentation\n### `get_ayla_api(username, password, websession=None)`\nReturns and `AylaApi` object to interact with the Ayla Networks Device API conrolling the Shark IQ robot, with the `app_id` and `app_secret` parameters set for the Shark IQ robot.\n\n### `class AylaAPI(username, password, app_id, app_secret, websession)`\nClass for interacting with the Ayla Networks Device API underlying the Shark IQ controls.\n * `username: str`\n * `password: str`\n * `app_id: str` \n * `app_secret: str`\n * `websession: Optional[aiohttp.ClientSession] = None` Optional `aiohttp.ClientSession` to use for async calls.  If\n  one is not provided, a new `aiohttp.ClientSession` will be created at the first async call.\n#### Methods\n * `get_devices()`/`async_get_devices()` Get a list of `SharkIqVacuum`s for every device found in `list_devices()`\n * `list_devices()`/`async_list_devices()` Get a list of known device description `dict`s\n * `refesh_auth()`/`async_refesh_auth()` Refresh the authentication token\n * `request(method, url, headers = None, auto_refresh = True, **kwargs)`/`async_request(...)` Submit an HTTP request to\n  the Ayla networks API with the auth header\n   * `method: str` An HTTP method, usually `'get'` or `'post'`\n   * `url: str`\n   * `headers: Optional[Dict] = None` Optional `dict` of HTTP headers besides the auth header, which is included \n   automatically\n   * `auto_refresh: bool = True` If `True`, automatically call `refesh_auth()`/`async_refesh_auth()` if the auth token\n   is near expiration\n   * `**kwargs` Passed on to `requests.request` or `aiohttp.ClientSession.request`\n * `sign_in()`/`async_sign_in()` Authenticate\n * `sign_out()`/`async_sign_out()` Sign out\n\n\n### `class SharkIqVacuum(ayla_api, device_dct)`\nPrimary API for interacting with Shark IQ vacuums\n * `ayla_api: AylaApi` An `AylaApi` with an authenticated connection\n * `device_dct: Dict` A `dict` describing the device, usually obtained from `AylaApi.list_devices()`\n\n#### Methods\n * `find_device()`/`async_find_device()` Cause the device to emit an annoying chirp \n * `get_file_property_url(property_name)`/`async_get_file_property_url(property_name)` Get the URL for the latest version of a `'file'`-type property\n   * `property_name: Union[str, PropertyName]` Either a `str` or `PropertyNames` value for the desired property\n * `get_file_property(property_name)`/`async_get_file_property(property_name)` Get the contents of the latest version of a `'file'`-type property\n   * `property_name: Union[str, PropertyName]` Either a `str` or `PropertyNames` value for the desired property\n * `get_metadata()`/`async_get_metadata()` Update some device metadata (`vac_model_number` and `vac_serial_number`)\n * `set_operating_mode(mode)`/`async_set_operating_mode(mode)` Set the operating mode.  This is just a thin wrapper \n around `set_property_value`/`async_set_property_value` provided for convenience.\n   * mode: OperatingModes Mode to set, e.g., `OperatingModes.START` to start the vacuum\n * `get_property_value(property_name)/async_get_property_value(property_name)`\n   Returns the value of `property_name`, cast to the appropriate type\n   * `property_name: Union[str, PropertyName]` Either a `str` or `PropertyNames` value for the desired property\n * `set_property_value(property_name, property_value)/async_set_property_value(property_name, property_value)`\n Set the value of `property_name`\n   * `property_name: Union[str, PropertyName]` Either a `str` or `PropertyName` value for the desired property\n   * `property_value: Any` New value.  Type checking is currently left to the remote API.\n * `update()`/`async_update(property_list=None)` Fetch the updated robot state from the remote api\n   * `property_list: Optional[Interable[str]]` An optional iterable of property names.  If specified, only those \n   properties will be updated.\n * `get_room_list()` Get a list of known room `str`s\n * `clean_rooms(List[str])` Start cleaning a subset of rooms\n \n#### Properties\n * `ayla_api` The underlying `AylaApi` object\n * `error_code` Error code, if any.  *NB: these can be very stale as they are not immediately reset in the API when the \n error is cleared*.\n * `error_text` English description of the `error_code`.  The same caveat applies.\n * `name` The device name as it appears in the SharkClean app\n * `oem_model_number` A \"rough\" model number that does not distinguish, for example, between robots with and without\n a self-emptying base\n * `properties_full` A dictionary representing all known device properties and their metadata (type \n `Dict[str, Dict]`)\n * `property_values` A convenience accessor into `properties_full` mapping property names to values\n * `serial_number` The unique device serial number used with the Ayla Networks API (NB: this name may change)\n * `vac_model_number` The precise model number\n * `vac_serial_number` The serial number printed on the device\n\n\n### Enums\n * `OperatingModes` Operation modes to control the vacuum (`START`, `STOP`, `PAUSE`, `RETURN`)\n * `PowerModes` Vacuum power mode (`ECO`, `NORMAL`, `MAX`)\n * `Properties` Properties to use with `get_property_value`/`set_property_value`\n\n\n### TODOs:\n * Add support for mapping\n * Once we have mapping, it may be possible to use the RSSI property combined with an increased update frequency\n to generate a wifi strength heatmap.  Kind of orthogonal to the main purpose, but I really want to do this.\n \n## License\n[MIT](https://choosealicense.com/licenses/mit/)\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/JeffResc/sharkiq-ng","keywords":"","license":"MIT","maintainer":"","maintainer_email":"","name":"sharkiq","package_url":"https://pypi.org/project/sharkiq/","platform":null,"project_url":"https://pypi.org/project/sharkiq/","project_urls":{"Homepage":"https://github.com/JeffResc/sharkiq-ng"},"provides_extra":null,"release_url":"https://pypi.org/project/sharkiq/1.0.2/","requires_dist":["aiohttp (>=3.8.1)","requests (>=2.27.1)"],"requires_python":"","summary":"Python API for Shark IQ robots","version":"1.0.2","yanked":false,"yanked_reason":null},"last_serial":14530122,"releases":{"0.0.1":[{"comment_text":"","digests":{"blake2b_256":"f1573bd7ece09e544a4b31a6e5bb2117f28d3e2660327c85d0392b53580bafda","md5":"157648545599e89d234622b52769b488","sha256":"749b117c4c3e5f05b1a49673b7e0f68a6594ce213030c0ceb597dca95adfc03f"},"downloads":-1,"filename":"sharkiq-0.0.1-py3-none-any.whl","has_sig":false,"md5_digest":"157648545599e89d234622b52769b488","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":11183,"upload_time":"2022-03-29T21:02:01","upload_time_iso_8601":"2022-03-29T21:02:01.416950Z","url":"https://files.pythonhosted.org/packages/f1/57/3bd7ece09e544a4b31a6e5bb2117f28d3e2660327c85d0392b53580bafda/sharkiq-0.0.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"6f1adacaaa0feac15758e44550e91bb308a2140eeb08700d8b33ad92efbb3afb","md5":"eae7ba4131d1f4e0e4da1a17a2a77e1c","sha256":"e5efb0ad13a66cf6a097da5c128347ef7bd0b2abe53a8ca65cbc847ec1190c8b"},"downloads":-1,"filename":"sharkiq-0.0.1.tar.gz","has_sig":false,"md5_digest":"eae7ba4131d1f4e0e4da1a17a2a77e1c","packagetype":"sdist","python_version":"source","requires_python":null,"size":12623,"upload_time":"2022-03-29T21:02:02","upload_time_iso_8601":"2022-03-29T21:02:02.985212Z","url":"https://files.pythonhosted.org/packages/6f/1a/dacaaa0feac15758e44550e91bb308a2140eeb08700d8b33ad92efbb3afb/sharkiq-0.0.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"aca3b92c574c9586b9811c019d640a30d46dc3940ae38f2a287e64a58e82c9b7","md5":"5d2319894378348ad932a6d343db51f2","sha256":"7c9fe7cc3a8f1c43de389333b4ea8a3040093010199ee0eb6e5d881cab5a68ca"},"downloads":-1,"filename":"sharkiq-1.0.1-py3-none-any.whl","has_sig":false,"md5_digest":"5d2319894378348ad932a6d343db51f2","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":13232,"upload_time":"2022-07-23T22:58:50","upload_time_iso_8601":"2022-07-23T22:58:50.503705Z","url":"https://files.pythonhosted.org/packages/ac/a3/b92c574c9586b9811c019d640a30d46dc3940ae38f2a287e64a58e82c9b7/sharkiq-1.0.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"68f2202c5d1e7cd698077a9ddf26951163262e2db0aab3b2f34b2d406b4f013d","md5":"a76165f691762d1b6dbd8308fed8d10c","sha256":"8ae66a2944047015d782a80ce4ccde46aa1358c9a4c9c95c5ecbfd7a9f108a1a"},"downloads":-1,"filename":"sharkiq-1.0.1.tar.gz","has_sig":false,"md5_digest":"a76165f691762d1b6dbd8308fed8d10c","packagetype":"sdist","python_version":"source","requires_python":null,"size":14524,"upload_time":"2022-07-23T22:58:51","upload_time_iso_8601":"2022-07-23T22:58:51.773820Z","url":"https://files.pythonhosted.org/packages/68/f2/202c5d1e7cd698077a9ddf26951163262e2db0aab3b2f34b2d406b4f013d/sharkiq-1.0.1.tar.gz","yanked":false,"yanked_reason":null}],"1.0.2":[{"comment_text":"","digests":{"blake2b_256":"a3cbbcec4a01e1117b259de554242ec3aab129bbf048caef556f1c88718ac94c","md5":"d77c09fffe328f5241d1f0730d62f9cc","sha256":"0d341adeb3371d1baf231fa4777f2fd37deef92bd286ad255b5af446f18d1db8"},"downloads":-1,"filename":"sharkiq-1.0.2-py3-none-any.whl","has_sig":false,"md5_digest":"d77c09fffe328f5241d1f0730d62f9cc","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":13258,"upload_time":"2022-07-24T05:06:03","upload_time_iso_8601":"2022-07-24T05:06:03.946600Z","url":"https://files.pythonhosted.org/packages/a3/cb/bcec4a01e1117b259de554242ec3aab129bbf048caef556f1c88718ac94c/sharkiq-1.0.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"758e1c941ece3b5ae18009b39735d686eed51c381c51aab43f3d7e94b7c8b8ad","md5":"939da79424c667f4abbc5832da9a51d7","sha256":"0467fbc23a81fadcbf5109d3a846332e45aea229160389073efb61ee1d45e772"},"downloads":-1,"filename":"sharkiq-1.0.2.tar.gz","has_sig":false,"md5_digest":"939da79424c667f4abbc5832da9a51d7","packagetype":"sdist","python_version":"source","requires_python":null,"size":14550,"upload_time":"2022-07-24T05:06:05","upload_time_iso_8601":"2022-07-24T05:06:05.596015Z","url":"https://files.pythonhosted.org/packages/75/8e/1c941ece3b5ae18009b39735d686eed51c381c51aab43f3d7e94b7c8b8ad/sharkiq-1.0.2.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"a3cbbcec4a01e1117b259de554242ec3aab129bbf048caef556f1c88718ac94c","md5":"d77c09fffe328f5241d1f0730d62f9cc","sha256":"0d341adeb3371d1baf231fa4777f2fd37deef92bd286ad255b5af446f18d1db8"},"downloads":-1,"filename":"sharkiq-1.0.2-py3-none-any.whl","has_sig":false,"md5_digest":"d77c09fffe328f5241d1f0730d62f9cc","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":13258,"upload_time":"2022-07-24T05:06:03","upload_time_iso_8601":"2022-07-24T05:06:03.946600Z","url":"https://files.pythonhosted.org/packages/a3/cb/bcec4a01e1117b259de554242ec3aab129bbf048caef556f1c88718ac94c/sharkiq-1.0.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"758e1c941ece3b5ae18009b39735d686eed51c381c51aab43f3d7e94b7c8b8ad","md5":"939da79424c667f4abbc5832da9a51d7","sha256":"0467fbc23a81fadcbf5109d3a846332e45aea229160389073efb61ee1d45e772"},"downloads":-1,"filename":"sharkiq-1.0.2.tar.gz","has_sig":false,"md5_digest":"939da79424c667f4abbc5832da9a51d7","packagetype":"sdist","python_version":"source","requires_python":null,"size":14550,"upload_time":"2022-07-24T05:06:05","upload_time_iso_8601":"2022-07-24T05:06:05.596015Z","url":"https://files.pythonhosted.org/packages/75/8e/1c941ece3b5ae18009b39735d686eed51c381c51aab43f3d7e94b7c8b8ad/sharkiq-1.0.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
