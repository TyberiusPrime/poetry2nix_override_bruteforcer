{"info":{"author":"","author_email":"\"Hernan E. Grecco\" <hernan.grecco@gmail.com>","bugtrack_url":null,"classifiers":["Development Status :: 4 - Beta","Intended Audience :: Developers","Intended Audience :: Science/Research","License :: OSI Approved :: BSD License","Operating System :: MacOS :: MacOS X","Operating System :: Microsoft :: Windows","Operating System :: POSIX","Programming Language :: Python","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.9","Topic :: Software Development :: Libraries","Topic :: System :: Filesystems","Topic :: Utilities"],"description":".. image:: https://img.shields.io/pypi/v/flexcache.svg\n    :target: https://pypi.python.org/pypi/flexcache\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/l/flexcache.svg\n    :target: https://pypi.python.org/pypi/flexcache\n    :alt: License\n\n.. image:: https://img.shields.io/pypi/pyversions/flexcache.svg\n    :target: https://pypi.python.org/pypi/flexcache\n    :alt: Python Versions\n\n.. image:: https://github.com/hgrecco/flexcache/workflows/CI/badge.svg\n    :target: https://github.com/hgrecco/flexcache/actions?query=workflow%3ACI\n    :alt: CI\n\n.. image:: https://github.com/hgrecco/flexcache/workflows/Lint/badge.svg\n    :target: https://github.com/hgrecco/flexcache/actions?query=workflow%3ALint\n    :alt: LINTER\n\n.. image:: https://coveralls.io/repos/github/hgrecco/flexcache/badge.svg?branch=main\n    :target: https://coveralls.io/github/hgrecco/flexcache?branch=main\n    :alt: Coverage\n\n\nflexcache\n=========\n\nAn robust and extensible package to cache on disk the result of expensive\ncalculations.\n\nConsider an expensive function `parse` that takes a path and returns a\nparsed version:\n\n.. code-block:: python\n\n    >>> content = parse(\"source.txt\")\n\nIt would be nice to automatically and persistently cache this result and\nthis is where flexcache comes in.\n\nFirst, we create a `DiskCache` object:\n\n.. code-block:: python\n\n    >>> from flexcache import DiskCacheByMTime\n    >>> dc = DiskCacheByMTime(cache_folder=\"/my/cache/folder\")\n\nand then is loaded:\n\n.. code-block:: python\n\n    >>> content, basename = dc.load(\"source.txt\", converter=parse)\n\nIf this is the first call, as the cached result is not available,\n`parse` will be called on `source.txt` and the output will be saved\nand returned. The next time, the cached will be loaded and returned.\n\nWhen the source is changed, the DiskCache detects that the cached\nfile is older, calls `parse` again storing and returning the new\nresult.\n\nIn certain cases you would rather detect that the file has changed\nby hashing the file. Simply use `DiskCacheByHash` instead of\n`DiskCacheByMTime`.\n\nCached files are saved using the pickle protocol, and each has\na companion json file with the header content.\n\nThis idea is completely flexible, and apply not only to parser.\nIn **flexcache** we say there are two types of objects: **source object**\nand **converted object**. The conversion function maps the former in\nto the latter. The cache stores the latter by looking a customizable\naspect of the former.\n\n\nBuilding your own caching logic\n-------------------------------\n\nIn certain cases you would like to customize how caching and\ninvalidation is done.\n\nYou can achieve this by subclassing the `DiskCache`.\n\n.. code-block:: python\n\n    >>> from flexcache import DiskCache\n    >>> class MyDiskCache(DiskCache):\n    ...\n    ...    @dataclass(frozen=True)\n    ...    class MyHeader(NameByPathHeader, InvalidateByExist, BasicPythonHeader):\n    ...         pass\n    ...\n    ...    _header_classes = {pathlib.Path: MyHeader}\n\nHere we created a custom Header class and use it to handle `pathlib.Path`\nobjects. You can even have multiple headers registered in the same class\nto handle different source object types.\n\nWe provide a convenient set of mixable classes to achieve almost any behavior.\nThese are divided in three categories and you must choose at least one\nfrom every kind.\n\nHeaders\n~~~~~~~\n\nThese classes store the information that will be saved along side the cached file.\n\n- **BaseHeader**: source object and identifier of the converter function.\n- **BasicPythonHeader**: source and identifier of the converter function,\n  platform, python implementation, python version.\n\n\nInvalidate\n~~~~~~~~~~\n\nThese classes define how the cache will decide if the cached converted object is an actual\nrepresentation of the source object.\n\n- **InvalidateByExist**: the cached file must exists.\n- **InvalidateByPathMTime**: the cached file exists and is newer than the source object\n  (which has to be `pathlib.Path`)\n- **InvalidateByMultiPathsMtime**: the cached file exists and is newer than the each path\n  in the source object (which has to be `tuple[pathlib.Path]`)\n\n\nNaming\n~~~~~~\n\nThese classes define how the name is generated. The basename for the cache file is\na hash hexdigest built by feeding a collection of values determined by the Header object.\n\n- **NameByFields**: all fields except the `source_object`.\n- **NameByPath**: resolved path of the source object\n  (which has to be `pathlib.Path`).\n- **NameByMultiPaths**: resolved path of each path source object\n  (which has to be `tuple[pathlib.Path]`), sorted in ascending order.\n- **NameByFileContent**: the bytes content of the file referred by the source object\n  (which has to be `pathlib.Path`).\n- **NameByHashIter**: the values in the source object.\n  (which has to be `tuple[str]`), sorted in ascending order\n- **NameByObj**: the pickled version of the source object\n  (which has to be pickable), using the highest available protocol.\n  This also adds `pickle_protocol` to the header.\n\n\nYou can mix and match as you see it fit, and of course, you can make your own.\n\nFinally, you can also avoid saving the header by setting the `_store_header`\nclass attribute to `False`.\n\n----\n\nThis project was started as a part of Pint_, the python units package.\n\nSee AUTHORS_ for a list of the maintainers.\n\nTo review an ordered list of notable changes for each version of a project,\nsee CHANGES_\n\n.. _`AUTHORS`: https://github.com/hgrecco/flexcache/blob/main/AUTHORS\n.. _`CHANGES`: https://github.com/hgrecco/flexcache/blob/main/CHANGES\n.. _`Pint`: https://github.com/hgrecco/pint\n","description_content_type":"text/x-rst","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"cache,optimization,storage,disk","license":"BSD","maintainer":"","maintainer_email":"\"Hernan E. Grecco\" <hernan.grecco@gmail.com>","name":"flexcache","package_url":"https://pypi.org/project/flexcache/","platform":null,"project_url":"https://pypi.org/project/flexcache/","project_urls":{"Homepage":"https://github.com/hgrecco/flexcache"},"provides_extra":null,"release_url":"https://pypi.org/project/flexcache/0.3/","requires_dist":["typing-extensions","pytest ; extra == 'test'","pytest-mpl ; extra == 'test'","pytest-cov ; extra == 'test'","pytest-subtests ; extra == 'test'"],"requires_python":">=3.9","summary":"Saves and loads to the cache a transformed versions of a source object.","version":"0.3","yanked":false,"yanked_reason":null},"last_serial":22239830,"releases":{"0.1":[{"comment_text":"","digests":{"blake2b_256":"33416a371ba8457fe3db22d1fc187dbcfd9bb1e88436da1b60e216c5834270a7","md5":"351f01749505c832a5609da22f67251a","sha256":"cfc9e341dc49b63a229b7677204be1941627c8adb97bfaa195054ec71629882c"},"downloads":-1,"filename":"flexcache-0.1.tar.gz","has_sig":false,"md5_digest":"351f01749505c832a5609da22f67251a","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":12173,"upload_time":"2022-02-27T20:44:17","upload_time_iso_8601":"2022-02-27T20:44:17.222269Z","url":"https://files.pythonhosted.org/packages/33/41/6a371ba8457fe3db22d1fc187dbcfd9bb1e88436da1b60e216c5834270a7/flexcache-0.1.tar.gz","yanked":false,"yanked_reason":null}],"0.2":[{"comment_text":"","digests":{"blake2b_256":"4130e916b235e52e2e39bc29a34211e952680c8db5a1940562b5c4b29699e449","md5":"8adfb1b8d6cf70c0821e6b6f424d129c","sha256":"9ab7b6c3afe0fcfee8b60c03faa33ae3db5ad9e48e841f47880bb9efd024e9b0"},"downloads":-1,"filename":"flexcache-0.2.tar.gz","has_sig":false,"md5_digest":"8adfb1b8d6cf70c0821e6b6f424d129c","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":14684,"upload_time":"2022-02-28T04:12:53","upload_time_iso_8601":"2022-02-28T04:12:53.705063Z","url":"https://files.pythonhosted.org/packages/41/30/e916b235e52e2e39bc29a34211e952680c8db5a1940562b5c4b29699e449/flexcache-0.2.tar.gz","yanked":false,"yanked_reason":null}],"0.3":[{"comment_text":"","digests":{"blake2b_256":"27cdc883e1a7c447479d6e13985565080e3fea88ab5a107c21684c813dba1875","md5":"bf9972ca7d2645390c1cbf4e9fb943ae","sha256":"d43c9fea82336af6e0115e308d9d33a185390b8346a017564611f1466dcd2e32"},"downloads":-1,"filename":"flexcache-0.3-py3-none-any.whl","has_sig":false,"md5_digest":"bf9972ca7d2645390c1cbf4e9fb943ae","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.9","size":13263,"upload_time":"2024-03-09T03:21:05","upload_time_iso_8601":"2024-03-09T03:21:05.635813Z","url":"https://files.pythonhosted.org/packages/27/cd/c883e1a7c447479d6e13985565080e3fea88ab5a107c21684c813dba1875/flexcache-0.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"55b08a21e330561c65653d010ef112bf38f60890051d244ede197ddaa08e50c1","md5":"11e710fd4049053b2c1a939aa46fcc54","sha256":"18743bd5a0621bfe2cf8d519e4c3bfdf57a269c15d1ced3fb4b64e0ff4600656"},"downloads":-1,"filename":"flexcache-0.3.tar.gz","has_sig":false,"md5_digest":"11e710fd4049053b2c1a939aa46fcc54","packagetype":"sdist","python_version":"source","requires_python":">=3.9","size":15816,"upload_time":"2024-03-09T03:21:07","upload_time_iso_8601":"2024-03-09T03:21:07.555508Z","url":"https://files.pythonhosted.org/packages/55/b0/8a21e330561c65653d010ef112bf38f60890051d244ede197ddaa08e50c1/flexcache-0.3.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"27cdc883e1a7c447479d6e13985565080e3fea88ab5a107c21684c813dba1875","md5":"bf9972ca7d2645390c1cbf4e9fb943ae","sha256":"d43c9fea82336af6e0115e308d9d33a185390b8346a017564611f1466dcd2e32"},"downloads":-1,"filename":"flexcache-0.3-py3-none-any.whl","has_sig":false,"md5_digest":"bf9972ca7d2645390c1cbf4e9fb943ae","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.9","size":13263,"upload_time":"2024-03-09T03:21:05","upload_time_iso_8601":"2024-03-09T03:21:05.635813Z","url":"https://files.pythonhosted.org/packages/27/cd/c883e1a7c447479d6e13985565080e3fea88ab5a107c21684c813dba1875/flexcache-0.3-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"55b08a21e330561c65653d010ef112bf38f60890051d244ede197ddaa08e50c1","md5":"11e710fd4049053b2c1a939aa46fcc54","sha256":"18743bd5a0621bfe2cf8d519e4c3bfdf57a269c15d1ced3fb4b64e0ff4600656"},"downloads":-1,"filename":"flexcache-0.3.tar.gz","has_sig":false,"md5_digest":"11e710fd4049053b2c1a939aa46fcc54","packagetype":"sdist","python_version":"source","requires_python":">=3.9","size":15816,"upload_time":"2024-03-09T03:21:07","upload_time_iso_8601":"2024-03-09T03:21:07.555508Z","url":"https://files.pythonhosted.org/packages/55/b0/8a21e330561c65653d010ef112bf38f60890051d244ede197ddaa08e50c1/flexcache-0.3.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
