{"info":{"author":"","author_email":"Florimond Manca <florimond.manca@protonmail.com>","bugtrack_url":null,"classifiers":["Development Status :: 4 - Beta","Framework :: AsyncIO","Framework :: Trio","Intended Audience :: Developers","Programming Language :: Python :: 3","Programming Language :: Python :: 3 :: Only","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],"description":"# aiometer\n\n[![Build Status](https://dev.azure.com/florimondmanca/public/_apis/build/status/florimondmanca.aiometer?branchName=master)](https://dev.azure.com/florimondmanca/public/_build/latest?definitionId=4&branchName=master)\n[![Coverage](https://codecov.io/gh/florimondmanca/aiometer/branch/master/graph/badge.svg)](https://codecov.io/gh/florimondmanca/aiometer)\n![Python versions](https://img.shields.io/pypi/pyversions/aiometer.svg)\n[![Package version](https://badge.fury.io/py/aiometer.svg)](https://pypi.org/project/aiometer)\n\n`aiometer` is a concurrency scheduling library compatible with `asyncio` and `trio` and inspired by [Trimeter](https://github.com/python-trio/trimeter). It makes it easier to execute lots of tasks concurrently while controlling concurrency limits (i.e. applying _[backpressure](https://lucumr.pocoo.org/2020/1/1/async-pressure/)_) and collecting results in a predictable manner.\n\n**Content**\n\n- [Example](#example)\n- [Features](#features)\n- [Installation](#installation)\n- [Usage](#usage)\n  - [Flow control](#flow-control)\n  - [Running tasks](#running-tasks)\n- [How To](#how-to)\n- [API Reference](#api-reference)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Example\n\nLet's use [HTTPX](https://github.com/encode/httpx) to make web requests concurrently...\n\n_Try this code interactively using [IPython](https://ipython.org/install.html)._\n\n```python\n>>> import asyncio\n>>> import functools\n>>> import random\n>>> import aiometer\n>>> import httpx\n>>>\n>>> client = httpx.AsyncClient()\n>>>\n>>> async def fetch(client, request):\n...     response = await client.send(request)\n...     # Simulate extra processing...\n...     await asyncio.sleep(2 * random.random())\n...     return response.json()[\"json\"]\n...\n>>> requests = [\n...     httpx.Request(\"POST\", \"https://httpbin.org/anything\", json={\"index\": index})\n...     for index in range(100)\n... ]\n...\n>>> # Send requests, and process responses as they're made available:\n>>> async with aiometer.amap(\n...     functools.partial(fetch, client),\n...     requests,\n...     max_at_once=10, # Limit maximum number of concurrently running tasks.\n...     max_per_second=5,  # Limit request rate to not overload the server.\n... ) as results:\n...     async for data in results:\n...         print(data)\n...\n{'index': 3}\n{'index': 4}\n{'index': 1}\n{'index': 2}\n{'index': 0}\n...\n>>> # Alternatively, fetch and aggregate responses into an (ordered) list...\n>>> jobs = [functools.partial(fetch, client, request) for request in requests]\n>>> results = await aiometer.run_all(jobs, max_at_once=10, max_per_second=5)\n>>> results\n[{'index': 0}, {'index': 1}, {'index': 2}, {'index': 3}, {'index': 4}, ...]\n```\n\n## Installation\n\n_This project is in beta and maturing. Be sure to pin any dependencies to the latest minor._\n\n```bash\npip install \"aiometer==0.5.*\"\n```\n\n## Features\n\n- Concurrency management and throttling helpers.\n- `asyncio` and `trio` support.\n- Fully type annotated.\n- 100% test coverage.\n\n## Usage\n\n### Flow control\n\nThe key highlight of `aiometer` is allowing you to apply flow control strategies in order to limit the degree of concurrency of your programs.\n\nThere are two knobs you can play with to fine-tune concurrency:\n\n- `max_at_once`: this is used to limit the maximum number of concurrently running tasks at any given time. (If you have 100 tasks and set `max_at_once=10`, then `aiometer` will ensure that no more than 10 run at the same time.)\n- `max_per_second`: this option limits the number of tasks spawned per second. This is useful to not overload I/O resources, such as servers that may have a rate limiting policy in place.\n\nExample usage:\n\n```python\n>>> import asyncio\n>>> import aiometer\n>>> async def make_query(query):\n...     await asyncio.sleep(0.05)  # Simulate a database request.\n...\n>>> queries = ['SELECT * from authors'] * 1000\n>>> # Allow at most 5 queries to run concurrently at any given time:\n>>> await aiometer.run_on_each(make_query, queries, max_at_once=5)\n...\n>>> # Make at most 10 queries per second:\n>>> await aiometer.run_on_each(make_query, queries, max_per_second=10)\n...\n>>> # Run at most 10 concurrent jobs, spawning new ones at least every 5 seconds:\n>>> async def job(id):\n...     await asyncio.sleep(10)  # A very long task.\n...\n>>> await aiometer.run_on_each(job, range(100),  max_at_once=10, max_per_second=0.2)\n```\n\n### Running tasks\n\n`aiometer` provides 4 different ways to run tasks concurrently in the form of 4 different run functions. Each function accepts all the options documented in [Flow control](#flow-control), and runs tasks in a slightly different way, allowing to address a variety of use cases. Here's a handy table for reference (see also the [API Reference](#api-reference)):\n\n| Entrypoint      | Use case                                       |\n| --------------- | ---------------------------------------------- |\n| `run_on_each()` | Execute async callbacks in any order.          |\n| `run_all()`     | Return results as an ordered list.             |\n| `amap()`        | Iterate over results as they become available. |\n| `run_any()`     | Return result of first completed function.     |\n\nTo illustrate the behavior of each run function, let's first setup a hello world async program:\n\n```python\n>>> import asyncio\n>>> import random\n>>> from functools import partial\n>>> import aiometer\n>>>\n>>> async def get_greeting(name):\n...     await asyncio.sleep(random.random())  # Simulate I/O\n...     return f\"Hello, {name}\"\n...\n>>> async def greet(name):\n...     greeting = await get_greeting(name)\n...     print(greeting)\n...\n>>> names = [\"Robert\", \"Carmen\", \"Lucas\"]\n```\n\nLet's start with `run_on_each()`. It executes an async function once for each item in a list passed as argument:\n\n```python\n>>> await aiometer.run_on_each(greet, names)\n'Hello, Robert!'\n'Hello, Lucas!'\n'Hello, Carmen!'\n```\n\nIf we'd like to get the list of greetings in the same order as `names`, in a fashion similar to [`Promise.all()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all), we can use `run_all()`:\n\n```python\n>>> await aiometer.run_all([partial(get_greeting, name) for name in names])\n['Hello, Robert', 'Hello, Carmen!', 'Hello, Lucas!']\n```\n\n`amap()` allows us to process each greeting as it becomes available (which means maintaining order is not guaranteed):\n\n```python\n>>> async with aiometer.amap(get_greeting, names) as greetings:\n...     async for greeting in greetings:\n...         print(greeting)\n'Hello, Lucas!'\n'Hello, Robert!'\n'Hello, Carmen!'\n```\n\nLastly, `run_any()` can be used to run async functions until the first one completes, similarly to [`Promise.any()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any):\n\n```python\n>>> await aiometer.run_any([partial(get_greeting, name) for name in names])\n'Hello, Carmen!'\n```\n\nAs a last fun example, let's use `amap()` to implement a no-threads async version of [sleep sort](https://rosettacode.org/wiki/Sorting_algorithms/Sleep_sort):\n\n```python\n>>> import asyncio\n>>> from functools import partial\n>>> import aiometer\n>>> numbers = [0.3, 0.1, 0.6, 0.2, 0.7, 0.5, 0.5, 0.2]\n>>> async def process(n):\n...     await asyncio.sleep(n)\n...     return n\n...\n>>> async with aiometer.amap(process, numbers) as results:\n...     sorted_numbers = [n async for n in results]\n...\n>>> sorted_numbers\n[0.1, 0.2, 0.2, 0.3, 0.5, 0.5, 0.6, 0.7]\n```\n\n## How To\n\n### Multiple parametrized values in `run_on_each` and `amap`\n\n`run_on_each` and `amap` only accept functions that accept a single positional argument (i.e. `(Any) -> Awaitable`).\n\nSo if you have a function that is parametrized by multiple values, you should refactor it to match this form.\n\nThis can generally be achieved like this:\n\n1. Build a proxy container type (eg. a `namedtuple`), eg `T`.\n2. Refactor your function so that its signature is now `(T) -> Awaitable`.\n3. Build a list of these proxy containers, and pass it to `aiometer`.\n\nFor example, assuming you have a function that processes X/Y coordinates...\n\n```python\nasync def process(x: float, y: float) -> None:\n    pass\n\nxs = list(range(100))\nys = list(range(100))\n\nfor x, y in zip(xs, ys):\n    await process(x, y)\n```\n\nYou could use it with `amap` by refactoring it like this:\n\n```python\nfrom typing import NamedTuple\n\n# Proxy container type:\nclass Point(NamedTuple):\n    x: float\n    y: float\n\n# Rewrite to accept a proxy as a single positional argument:\nasync def process(point: Point) -> None:\n    x = point.x\n    y = point.y\n    ...\n\nxs = list(range(100))\nys = list(range(100))\n\n# Build a list of proxy containers:\npoints = [Point(x, y) for x, y in zip(x, y)]\n\n# Use it:\nasync with aiometer.amap(process, points) as results:\n    ...\n```\n\n## API Reference\n\n### Common options\n\n* `max_at_once` (_Optional_, `int`): the maximum number of concurrently running tasks at any given time.\n* `max_per_second` (_Optional_, `int`): the maximum number of tasks spawned per second.\n\n### `aiometer.run_on_each()`\n\n**Signature**: _async_ aiometer.run_on_each(*async_fn*, *args*, *, *max_at_once=None*, *max_per_second=None*) -> *None*\n\nConcurrently run the equivalent of `async_fn(arg) for arg in args`. Does not return any value. To get return values back, use [`aiometer.run_all()`](#aiometerrun_all).\n\n### `aiometer.run_all()`\n\n**Signature**: _async_ aiometer.run_all(*async_fns*, *max_at_once=None*, *max_per_second=None*) -> *list*\n\nConcurrently run the `async_fns` functions, and return the list of results in the same order.\n\n### `aiometer.amap()`\n\n**Signature**: _async_ aiometer.amap(*async_fn*, *args*, *max_at_once=None*, *max_per_second=None*) -> *async iterator*\n\nConcurrently run the equivalent of `async_fn(arg) for arg in args`, and return an async iterator that yields results as they become available.\n\n### `aiometer.run_any()`\n\n**Signature**: _async_ aiometer.run_any(*async_fns*, *max_at_once=None*, *max_per_second=None*) -> *Any*\n\nConcurrently run the `async_fns` functions, and return the first available result.\n\n## Contributing\n\nSee [CONTRIBUTING.md](./CONTRIBUTING.md).\n\n## License\n\nMIT\n\n# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n\n## 0.5.0 - 2023-12-11\n\n### Removed\n\n- Drop support for Python 3.7, as it has reached EOL. (Pull #44)\n\n### Added\n\n- Add official support for Python 3.12. (Pull #44)\n- Add support for anyio 4. This allows catching exception groups using the native ExceptionGroup. On anyio 3.2+, anyio would throw its own ExceptionGroup type. Compatibility with anyio 3.2+ is retained. (Pull #43)\n\n## 0.4.0 - 2023-01-18\n\n### Removed\n\n- Drop support for Python 3.6, which has reached EOL. (Pull #38)\n\n### Added\n\n- Add official support for Python 3.10 and 3.11. (Pull #38)\n\n### Fixed\n\n- Relax version requirements for `typing_extensions` and address `mypy>=0.981` strict optional changes. (Pull #38)\n\n## 0.3.0 - 2021-07-06\n\n### Changed\n\n- Update `anyio` dependency to v3 (previously v1). (Pull #25)\n  - _NB: no API change, but dependency mismatches may occur. Be sure to port your codebase to anyio v3 before upgrading `aiometer`._\n\n### Added\n\n- Add support for Python 3.6 (installs the `contextlib2` backport library there). (Pull #26)\n- Officialize support for Python 3.9. (Pull #26)\n\n## 0.2.1 - 2020-03-26\n\n### Fixed\n\n- Improve robustness of the `max_per_second` implementation by using the generic cell rate algorithm (GCRA) instead of leaky bucket. (Pull #5)\n\n## 0.2.0 - 2020-03-22\n\n### Added\n\n- Add support for Python 3.7. (Pull #3)\n\n## 0.1.0 - 2020-03-21\n\n### Added\n\n- Add `run_on_each()`, `run_all()`, `amap()` and `run_any()`, with `max_at_once` and `max_per_second` options. (Pull #1)\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"","keywords":"","license":"MIT","maintainer":"","maintainer_email":"","name":"aiometer","package_url":"https://pypi.org/project/aiometer/","platform":null,"project_url":"https://pypi.org/project/aiometer/","project_urls":{"Homepage":"https://github.com/florimondmanca/aiometer"},"provides_extra":null,"release_url":"https://pypi.org/project/aiometer/0.5.0/","requires_dist":["anyio <5,>=3.2","exceptiongroup ; python_version < \"3.11\""],"requires_python":">=3.8","summary":"A Python concurrency scheduling library, compatible with asyncio and trio","version":"0.5.0","yanked":false,"yanked_reason":null},"last_serial":21010123,"releases":{"0.1.0":[{"comment_text":"","digests":{"blake2b_256":"80e75d5c1282b407664884401297f3fd90348bbae48afa35b98494da1a6ac465","md5":"026140757c287371abcfc0d3b8ba6c4a","sha256":"fa0f2828140b1e52082a62de8bf46f0b447f524d03aef2dd0baa59ea53a4964e"},"downloads":-1,"filename":"aiometer-0.1.0-py3-none-any.whl","has_sig":false,"md5_digest":"026140757c287371abcfc0d3b8ba6c4a","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":11086,"upload_time":"2020-03-21T22:16:05","upload_time_iso_8601":"2020-03-21T22:16:05.654994Z","url":"https://files.pythonhosted.org/packages/80/e7/5d5c1282b407664884401297f3fd90348bbae48afa35b98494da1a6ac465/aiometer-0.1.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b598060fa80243328725e2b3a1e244a8f499bc20d204c4bffe839140a5b7cf37","md5":"050249c3c8e45390ea575622272996c4","sha256":"253bafb546c1f1567feda824c5d2a01c2c54b6a4ef0c76c0d90c4a0bb15facc0"},"downloads":-1,"filename":"aiometer-0.1.0.tar.gz","has_sig":false,"md5_digest":"050249c3c8e45390ea575622272996c4","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":12738,"upload_time":"2020-03-21T22:16:09","upload_time_iso_8601":"2020-03-21T22:16:09.087374Z","url":"https://files.pythonhosted.org/packages/b5/98/060fa80243328725e2b3a1e244a8f499bc20d204c4bffe839140a5b7cf37/aiometer-0.1.0.tar.gz","yanked":false,"yanked_reason":null}],"0.2.0":[{"comment_text":"","digests":{"blake2b_256":"180d8298fd8eafe756b3f53e9a4182e8d8c547bd11539de01d2b58e9be708b54","md5":"cb902b79de7671f50fec60ef63873904","sha256":"e9c4a515ab8e894db85c7a2c7d59e8ecf6c3253e46143bad8a5edf3d48392561"},"downloads":-1,"filename":"aiometer-0.2.0-py3-none-any.whl","has_sig":false,"md5_digest":"cb902b79de7671f50fec60ef63873904","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":11204,"upload_time":"2020-03-22T12:00:01","upload_time_iso_8601":"2020-03-22T12:00:01.394626Z","url":"https://files.pythonhosted.org/packages/18/0d/8298fd8eafe756b3f53e9a4182e8d8c547bd11539de01d2b58e9be708b54/aiometer-0.2.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"f3b4b42c59ea2342c39393bf4d3f78e3926b1f93360deb3f1c8963558c47706d","md5":"a081b7d8b301e2fb59b69097bc216b72","sha256":"efb3ceafb55954c4c81c33246d7e4870e0680540b43aafa1016c31278d6c2961"},"downloads":-1,"filename":"aiometer-0.2.0.tar.gz","has_sig":false,"md5_digest":"a081b7d8b301e2fb59b69097bc216b72","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":12963,"upload_time":"2020-03-22T12:00:02","upload_time_iso_8601":"2020-03-22T12:00:02.856837Z","url":"https://files.pythonhosted.org/packages/f3/b4/b42c59ea2342c39393bf4d3f78e3926b1f93360deb3f1c8963558c47706d/aiometer-0.2.0.tar.gz","yanked":false,"yanked_reason":null}],"0.2.1":[{"comment_text":"","digests":{"blake2b_256":"213cff3c531b429bf909b44ef26b5e5c3edbb90fe97dd2327f74e9fe801d9a75","md5":"83ff553f5155ee0368a81173f8eb35f1","sha256":"6a6d9181032d4173d94a38f4bfe9dffa43874665c73f41539af4ae7147679cef"},"downloads":-1,"filename":"aiometer-0.2.1-py3-none-any.whl","has_sig":false,"md5_digest":"83ff553f5155ee0368a81173f8eb35f1","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":11335,"upload_time":"2020-03-26T19:07:31","upload_time_iso_8601":"2020-03-26T19:07:31.032313Z","url":"https://files.pythonhosted.org/packages/21/3c/ff3c531b429bf909b44ef26b5e5c3edbb90fe97dd2327f74e9fe801d9a75/aiometer-0.2.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c1fcda8f767c618a33b305bcab5218a0b6b4c70d826f50586dc9650f32b597da","md5":"5ab82d686f51d10a658270a807c21180","sha256":"379e4e5a01f4c4b9bc3200cd93cd17e9bbcd791d404a312eb331e47f7011fd53"},"downloads":-1,"filename":"aiometer-0.2.1.tar.gz","has_sig":false,"md5_digest":"5ab82d686f51d10a658270a807c21180","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":13254,"upload_time":"2020-03-26T19:07:32","upload_time_iso_8601":"2020-03-26T19:07:32.594817Z","url":"https://files.pythonhosted.org/packages/c1/fc/da8f767c618a33b305bcab5218a0b6b4c70d826f50586dc9650f32b597da/aiometer-0.2.1.tar.gz","yanked":false,"yanked_reason":null}],"0.3.0":[{"comment_text":"","digests":{"blake2b_256":"4afa1d586d14338ec3334afefbab4f04e0fc5fda9876752d516ff16963d9f2b1","md5":"2cc2a9abc41fa9148d4a6ec2b5dfcc3c","sha256":"1c3c6bb774d87105061a10c5e1eab5d70debae72d8a1c1ae0ebc84fb9bc172cc"},"downloads":-1,"filename":"aiometer-0.3.0-py3-none-any.whl","has_sig":false,"md5_digest":"2cc2a9abc41fa9148d4a6ec2b5dfcc3c","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":11485,"upload_time":"2021-07-06T22:00:27","upload_time_iso_8601":"2021-07-06T22:00:27.423209Z","url":"https://files.pythonhosted.org/packages/4a/fa/1d586d14338ec3334afefbab4f04e0fc5fda9876752d516ff16963d9f2b1/aiometer-0.3.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"88e0b3ef0d60659ef369e40e27afc038f8dd51da8b176d0ebd22d0e7f0d4a006","md5":"5663a65eb4bc9798904b50583678c0d8","sha256":"55df5af97ca91b10bcb92d6467cfb1cdfff2803733ea8078f7d7459ab28cac30"},"downloads":-1,"filename":"aiometer-0.3.0.tar.gz","has_sig":false,"md5_digest":"5663a65eb4bc9798904b50583678c0d8","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":14438,"upload_time":"2021-07-06T22:00:29","upload_time_iso_8601":"2021-07-06T22:00:29.394797Z","url":"https://files.pythonhosted.org/packages/88/e0/b3ef0d60659ef369e40e27afc038f8dd51da8b176d0ebd22d0e7f0d4a006/aiometer-0.3.0.tar.gz","yanked":false,"yanked_reason":null}],"0.4.0":[{"comment_text":"","digests":{"blake2b_256":"c38bd83c8a62da0a79be567e0fd0ddfb58198c2c43b15aaafc04d7fe48f636cb","md5":"7a39022aa940f20877e81f9cf496ab8c","sha256":"020cc80716565deeb091eb1c0c78ee9693ed5177f193f56ec253de9dde794b23"},"downloads":-1,"filename":"aiometer-0.4.0-py3-none-any.whl","has_sig":false,"md5_digest":"7a39022aa940f20877e81f9cf496ab8c","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7","size":11761,"upload_time":"2023-01-18T21:50:04","upload_time_iso_8601":"2023-01-18T21:50:04.510885Z","url":"https://files.pythonhosted.org/packages/c3/8b/d83c8a62da0a79be567e0fd0ddfb58198c2c43b15aaafc04d7fe48f636cb/aiometer-0.4.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"50b8f8da118db4218bab2875baf2dcc68db652d328dd74f743d77545a237d1cc","md5":"a94f28d48a6fbc249cf36fdbd5d55d92","sha256":"dfdd4c082d1dd03271216574ddaa9b0cd17bb0004f94992cc4c85fcbc1abfab5"},"downloads":-1,"filename":"aiometer-0.4.0.tar.gz","has_sig":false,"md5_digest":"a94f28d48a6fbc249cf36fdbd5d55d92","packagetype":"sdist","python_version":"source","requires_python":">=3.7","size":17596,"upload_time":"2023-01-18T21:50:06","upload_time_iso_8601":"2023-01-18T21:50:06.056369Z","url":"https://files.pythonhosted.org/packages/50/b8/f8da118db4218bab2875baf2dcc68db652d328dd74f743d77545a237d1cc/aiometer-0.4.0.tar.gz","yanked":false,"yanked_reason":null}],"0.5.0":[{"comment_text":"","digests":{"blake2b_256":"8d48bfed7b1373890a7946cd7523c125e6469a7add944712cb328be190032b0e","md5":"1c19284fa9876dc77c7ed3ec24609230","sha256":"57e54a067e6918504844610da23aabf6e179cb0f01104503b3db4bfb39f5e1f2"},"downloads":-1,"filename":"aiometer-0.5.0-py3-none-any.whl","has_sig":false,"md5_digest":"1c19284fa9876dc77c7ed3ec24609230","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":12316,"upload_time":"2023-12-11T19:51:57","upload_time_iso_8601":"2023-12-11T19:51:57.059279Z","url":"https://files.pythonhosted.org/packages/8d/48/bfed7b1373890a7946cd7523c125e6469a7add944712cb328be190032b0e/aiometer-0.5.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ca942aed63a1f34116be83cb07f7d5f74f9d85cf06a920076a94307ba2ba385a","md5":"d84394daa5f97faaabd62f403cf5abf8","sha256":"1d441ad3c16eaa56d438e5f9a2f9fbccdb29f6140fb36f9cb68183545ec48691"},"downloads":-1,"filename":"aiometer-0.5.0.tar.gz","has_sig":false,"md5_digest":"d84394daa5f97faaabd62f403cf5abf8","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":18256,"upload_time":"2023-12-11T19:51:58","upload_time_iso_8601":"2023-12-11T19:51:58.294169Z","url":"https://files.pythonhosted.org/packages/ca/94/2aed63a1f34116be83cb07f7d5f74f9d85cf06a920076a94307ba2ba385a/aiometer-0.5.0.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"8d48bfed7b1373890a7946cd7523c125e6469a7add944712cb328be190032b0e","md5":"1c19284fa9876dc77c7ed3ec24609230","sha256":"57e54a067e6918504844610da23aabf6e179cb0f01104503b3db4bfb39f5e1f2"},"downloads":-1,"filename":"aiometer-0.5.0-py3-none-any.whl","has_sig":false,"md5_digest":"1c19284fa9876dc77c7ed3ec24609230","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.8","size":12316,"upload_time":"2023-12-11T19:51:57","upload_time_iso_8601":"2023-12-11T19:51:57.059279Z","url":"https://files.pythonhosted.org/packages/8d/48/bfed7b1373890a7946cd7523c125e6469a7add944712cb328be190032b0e/aiometer-0.5.0-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"ca942aed63a1f34116be83cb07f7d5f74f9d85cf06a920076a94307ba2ba385a","md5":"d84394daa5f97faaabd62f403cf5abf8","sha256":"1d441ad3c16eaa56d438e5f9a2f9fbccdb29f6140fb36f9cb68183545ec48691"},"downloads":-1,"filename":"aiometer-0.5.0.tar.gz","has_sig":false,"md5_digest":"d84394daa5f97faaabd62f403cf5abf8","packagetype":"sdist","python_version":"source","requires_python":">=3.8","size":18256,"upload_time":"2023-12-11T19:51:58","upload_time_iso_8601":"2023-12-11T19:51:58.294169Z","url":"https://files.pythonhosted.org/packages/ca/94/2aed63a1f34116be83cb07f7d5f74f9d85cf06a920076a94307ba2ba385a/aiometer-0.5.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
