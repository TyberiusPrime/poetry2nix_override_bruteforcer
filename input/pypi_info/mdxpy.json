{"info":{"author":"","author_email":"","bugtrack_url":null,"classifiers":["Intended Audience :: Developers","License :: OSI Approved :: MIT License","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Programming Language :: Python :: Implementation :: CPython"],"description":"![Logo](./images/logo.png)\r\n\r\n\r\n## MDXpy\r\n\r\nA simple, yet elegant MDX library for TM1\r\n\r\n## Install\r\n\r\n    pip install mdxpy\r\n\r\n## Usage\r\n\r\nCreate MDX queries programmatically with the `Member`, `MdxTuple`, `MdxHierarchySet`, `MdxBuilder` classes.\r\n\r\nBenefits of using MDXpy over hacking raw MDX queries in your code\r\n- Faster to write\r\n- Requires less MDX knowledge\r\n- Eliminates syntax errors (e.g. forget `}`, `]`, `)` in a query) forever\r\n- Makes code more robust and easier to refactor\r\n- Escaping of `]` in object names is taken care of \r\n\r\n### Member\r\n\r\n`Member` is used in `MdxTuple` and `MdxHierarchySet`. \r\ncreate a `Member` with the static `Member.of(*args: str)` method.\r\n\r\n``` python\r\n>>> member = Member.of(\"Product\", \"Product1\")\r\n>>> print(member.unique_name)\r\n[PRODUCT].[PRODUCT].[PRODUCT1]\r\n\r\n>>> member = Member.of(\"Region\", \"ByGeography\", \"UK\")\r\n>>> print(member.unique_name)\r\n[REGION].[BYGEOGRAPHY].[UK]\r\n```\r\n\r\n### MdxTuple\r\n\r\nCreate a `MdxTuple` with the static `of(*args: Member)` method. The MDX expression of the tuple is generated with the `to_mdx` method.\r\n\r\n``` python\r\n>>> mdx_tuple = MdxTuple.of(Member.of(\"Product\", \"Product1\"), Member.of(\"Region\", \"US\"))\r\n\r\n>>> print(mdx_tuple.to_mdx())\r\n([PRODUCT].[PRODUCT].[PRODUCT1],[REGION].[REGION].[US])\r\n\r\n>>> mdx_tuple = MdxTuple.of(Member.of(\"Product\", \"ByType\", \"Product1\"), Member.of(\"Region\", \"ByGeography\", \"North America\"))\r\n\r\n>>> print(mdx_tuple.to_mdx())\r\n([PRODUCT].[BYTYPE].[PRODUCT1],[REGION].[BYGEOGRAPHY].[North America])\r\n\r\n```     \r\n\r\nyou can add a `Member` to a `MdxTuple`\r\n\r\n``` python\r\n>>> mdx_tuple = MdxTuple.of(Member.of(\"Product\", \"ByType\", \"Product1\"))\r\n\r\n>>> mdx_tuple.add_member(Member.of(\"Region\", \"ByGeography\", \"North America\"))\r\n\r\n>>> print(mdx_tuple.to_mdx())\r\n([PRODUCT].[BYTYPE].[PRODUCT1],[REGION].[BYGEOGRAPHY].[NORTHAMERICA])\r\n```\r\n\r\n### MdxHierarchySet\r\n\r\n`MdxHierarchySet` is created with any of the static methods on the `MdxHierarchySet` class. The `MDX` expression of the set is generated with the `to_mdx` method.\r\n\r\n``` python\r\n>>> mdx_set = MdxHierarchySet.tm1_subset_all(\"Product\")\r\n>>> print(mdx_set.to_mdx())\r\n{TM1SUBSETALL([Product].[Product])}\r\n\r\n>>> mdx_set = MdxHierarchySet.tm1_subset_to_set(\"Region\", \"By Geography\", \"Default\")\r\n>>> print(mdx_set.to_mdx())\r\n{TM1SUBSETTOSET([REGION].[BYGEOGRAPHY],'Default')}\r\n\r\n>>> mdx_set = MdxHierarchySet.all_leaves(\"Region\")\r\n>>> print(mdx_set.to_mdx())\r\n{TM1FILTERBYLEVEL({TM1SUBSETALL([REGION].[REGION])},0)}\r\n\r\n>>> mdx_set = MdxHierarchySet.members([Member.of(\"Region\", \"US\"), Member.of(\"Product\", \"Product1\")])\r\n>>> print(mdx_set.to_mdx())\r\n{[REGION].[REGION].[US],[PRODUCT].[PRODUCT].[PRODUCT1]}\r\n```\r\n\r\nFunctions on `MdxHierarchySet` can be concatenated to arbitrary length in a functional style:\r\n\r\n``` python\r\n>>> mdx_set = MdxHierarchySet.tm1_subset_all(\"Region\").filter_by_level(0).filter_by_pattern(\"I*\").tm1_sort()\r\n>>> print(mdx_set.to_mdx())\r\n{TM1SORT({TM1FILTERBYPATTERN({TM1FILTERBYLEVEL({TM1SUBSETALL([REGION].[REGION])},0)},'I*')},ASC)}\r\n```\r\n\r\n### MdxBuilder\r\n\r\nThe `MdxBuilder` is used to build MDX queries. `MdxHierarchySet` or `MdxTuple` are placed on the axes. Zero suppression can be switched on or off per axis. The actual `MDX` expression is generated with the `to_mdx` method. \r\n\r\n``` python\r\n>>> query = MdxBuilder.from_cube(\"Cube\").add_hierarchy_set_to_column_axis(MdxHierarchySet.all_leaves(\"Product\"))\r\n>>> print(query.to_mdx())\r\nSELECT {TM1FILTERBYLEVEL({TM1SUBSETALL([PRODUCT].[PRODUCT])},0)} ON 0\r\nFROM [CUBE] \r\n\r\n>>> query = MdxBuilder.from_cube(\"Cube\").add_hierarchy_set_to_column_axis(MdxHierarchySet.member(Member.of(\"Product\", \"Product1\")))\r\n>>> print(query.to_mdx())\r\nSELECT {[PRODUCT].[PRODUCT].[PRODUCT1]} ON 0\r\nFROM [CUBE] \r\n\r\n>>> query =  MdxBuilder.from_cube(\"Cube\").add_member_tuple_to_axis(0, Member.of(\"Product\", \"Product1\"), Member.of(\"Region\", \"EMEA\"))\r\n>>> print(query.to_mdx())\r\nSELECT\r\n{([PRODUCT].[PRODUCT].[PRODUCT1],[REGION].[REGION].[EMEA])} ON 0\r\nFROM [CUBE] \r\n\r\n>>> query = MdxBuilder.from_cube(\"Cube\").columns_non_empty().add_hierarchy_set_to_column_axis(MdxHierarchySet.member(Member.of(\"Product\", \"Product1\")))\r\n>>> print(query.to_mdx())\r\nSELECT\r\nNON EMPTY {[PRODUCT].[PRODUCT].[PRODUCT1]} ON 0 \r\nFROM [CUBE]\r\n```\r\n\r\nMDX queries can have any number of axes. Axis 0 _(=columns)_ must be defined.\r\n\r\n``` python\r\n>>> mdx = MdxBuilder.from_cube(\"Cube\") \\\r\n    .add_hierarchy_set_to_axis(0, MdxHierarchySet.member(Member.of(\"Region\", \"US\"))) \\\r\n    .add_hierarchy_set_to_axis(1, MdxHierarchySet.all_leaves(\"Product\")) \\\r\n    .add_hierarchy_set_to_axis(2, MdxHierarchySet.member(Member.of(\"Version\", \"Actual\"))) \\\r\n    .add_hierarchy_set_to_axis(3, MdxHierarchySet.tm1_subset_to_set(\"Time\", \"Time\", \"2020-Q1\")) \\\r\n    .to_mdx()\r\n\r\n>>> print(mdx)\r\nSELECT\r\n{[REGION].[REGION].[US]} ON 0,\r\n{TM1FILTERBYLEVEL({TM1SUBSETALL([PRODUCT].[PRODUCT])},0)} ON 1,\r\n{[VERSION].[VERSION].[ACTUAL]} ON 2,\r\n{TM1SUBSETTOSET([TIME].[TIME],'2020-Q1')} ON 3\r\nFROM [CUBE]\r\n```\r\n\r\nThe `CalculatedMember` class is used to define query-scoped calculated members. They are used with the `MdxBuilder` through the `with_member` function.\r\n\r\n``` python\r\n>>> mdx = MdxBuilder.from_cube(cube=\"Record Rating\").with_member(\r\n        CalculatedMember.avg(\r\n            dimension=\"Period\",\r\n            hierarchy=\"Period\",\r\n            element=\"AVG 2016\",\r\n            cube=\"Record Rating\",\r\n            mdx_set=MdxHierarchySet.children(member=Member.of(\"Period\", \"2016\")),\r\n            mdx_tuple=MdxTuple.of(Member.of(\"Chart\", \"Total Charts\"), Member.of(\"Record Rating Measure\", \"Rating\")))) \\\r\n        .add_hierarchy_set_to_row_axis(\r\n        MdxHierarchySet\r\n            .children(Member.of(\"Record\", \"Total Records\"))\r\n            .top_count(cube=\"Record Rating\", mdx_tuple=MdxTuple.of(Member.of(\"Period\", \"AVG 2016\")), top=5)) \\\r\n        .add_member_tuple_to_columns(Member.of(\"Period\", \"AVG 2016\")) \\\r\n        .where(Member.of(\"Chart\", \"Total Charts\"), Member.of(\"Record Rating Measure\", \"Rating\")) \\\r\n        .to_mdx()\r\n\r\n>>> print(mdx)\r\nWITH \r\nMEMBER [PERIOD].[PERIOD].[AVG2016] AS AVG({[PERIOD].[PERIOD].[2016].CHILDREN},[Record Rating].([CHART].[CHART].[TOTALCHARTS],[RECORDRATINGMEASURE].[RECORDRATINGMEASURE].[RATING]))\r\nSELECT\r\n{([PERIOD].[PERIOD].[AVG2016])} ON 0,\r\n{TOPCOUNT({[RECORD].[RECORD].[TOTALRECORDS].CHILDREN},5,[RECORDRATING].([PERIOD].[PERIOD].[AVG2016]))} ON 1\r\nFROM [RECORDRATING]\r\nWHERE ([CHART].[CHART].[TOTALCHARTS],[RECORDRATINGMEASURE].[RECORDRATINGMEASURE].[RATING])\r\n```\r\n\r\nThe `DimensionProperty` class is used to query attributes in conjunction with data. \r\nIt is used with the `MdxBuilder` through the `add_properties_to_row_axis`, `add_hierarchy_set_to_column_axis` functions.\r\n\r\n``` python\r\nfrom mdxpy import DimensionProperty, MdxHierarchySet, MdxBuilder, Member\r\n\r\nquery = MdxBuilder.from_cube(\"Sales\")\r\n\r\nquery = query.rows_non_empty()\r\nquery = query.add_hierarchy_set_to_row_axis(MdxHierarchySet.all_leaves(\"Product\"))\r\nquery = query.add_properties_to_row_axis(DimensionProperty.of(\"Product\", \"Description\"))\r\n\r\nquery = query.columns_non_empty()\r\nquery = query.add_hierarchy_set_to_column_axis(MdxHierarchySet.member(Member.of(\"Sales Measure\", \"Revenue\")))\r\n\r\nquery = query.where(Member.of(\"Year\", \"2022\"), Member.of(\"Region\", \"Switzerland\"))\r\n\r\nprint(query.to_mdx())\r\n\r\n>>> print(mdx)\r\nSELECT\r\nNON EMPTY {[salesmeasure].[salesmeasure].[revenue]} DIMENSION PROPERTIES MEMBER_NAME ON 0,\r\nNON EMPTY {TM1FILTERBYLEVEL({TM1SUBSETALL([product].[product])},0)} DIMENSION PROPERTIES [product].[product].[description] ON 1\r\nFROM [sales]\r\nWHERE ([year].[year].[2022],[region].[region].[switzerland])\r\n```\r\n\r\nTo see all samples checkout the `test.py` file\r\n\r\n## Supported MDX Functions\r\n\r\n- TM1SUBSETALL\r\n- MEMBERS\r\n- TM1SUBSETTOSET\r\n- DEFAULTMEMBER\r\n- PARENT\r\n- FIRSTCHILD\r\n- LASTCHILD\r\n- CHILDREN\r\n- ANCESTORS\r\n- ANCESTOR\r\n- DRILLDOWNLEVEL\r\n- FILTER\r\n- TM1FILTERBYPATTERN\r\n- TM1FILTERBYLEVEL\r\n- TM1SORT\r\n- HEAD\r\n- TAIL\r\n- SUBSET\r\n- TOPCOUNT\r\n- BOTTOMCOUNT\r\n- UNION\r\n- INTERSECT\r\n- EXCEPT\r\n- ORDER\r\n\r\n## Tests\r\n\r\nAll tests in `test.py`\r\n\r\n## Contribution\r\n\r\nContribution is welcome. If you find a bug or feel like you can contribute please fork the repository, update the code and then create a pull request so we can merge in the changes.\r\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/cubewise-code/mdxpy","keywords":"MDX,TM1,IBM Cognos TM1,Planning Analytics,PA,Cognos","license":"MIT-LICENSE","maintainer":"Marius Wirtz","maintainer_email":"MWirtz@cubewise.com","name":"mdxpy","package_url":"https://pypi.org/project/mdxpy/","platform":"any","project_url":"https://pypi.org/project/mdxpy/","project_urls":{"Homepage":"https://github.com/cubewise-code/mdxpy"},"provides_extra":null,"release_url":"https://pypi.org/project/mdxpy/1.3.2/","requires_dist":null,"requires_python":">=3.5","summary":"A simple, yet elegant MDX library for TM1","version":"1.3.2","yanked":false,"yanked_reason":null},"last_serial":19206326,"releases":{"0.1":[{"comment_text":"","digests":{"blake2b_256":"dd51c4800e139a38a7bb5ebbf326c9bdc601e1461edfa9e3a43448dc8a484bab","md5":"b6942678dacec240daeb34b405345592","sha256":"d556512450c9fdca83c3af78a5800b80887c4af0edacf444d2c657e66a77087d"},"downloads":-1,"filename":"mdxpy-0.1.tar.gz","has_sig":false,"md5_digest":"b6942678dacec240daeb34b405345592","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":11356,"upload_time":"2020-04-25T20:53:40","upload_time_iso_8601":"2020-04-25T20:53:40.646452Z","url":"https://files.pythonhosted.org/packages/dd/51/c4800e139a38a7bb5ebbf326c9bdc601e1461edfa9e3a43448dc8a484bab/mdxpy-0.1.tar.gz","yanked":false,"yanked_reason":null}],"0.2":[{"comment_text":"","digests":{"blake2b_256":"e43a0c6297c8855853535b2f452ce848bae658533b95fd270d59d28acd173965","md5":"0cd037bb34afc70794983ad7eedd7f61","sha256":"37a056df15a3a9462346ff088dd69daca8f810a4a473392e9a2dc0bcd3709fb9"},"downloads":-1,"filename":"mdxpy-0.2.tar.gz","has_sig":false,"md5_digest":"0cd037bb34afc70794983ad7eedd7f61","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":79399,"upload_time":"2020-05-09T16:23:48","upload_time_iso_8601":"2020-05-09T16:23:48.458240Z","url":"https://files.pythonhosted.org/packages/e4/3a/0c6297c8855853535b2f452ce848bae658533b95fd270d59d28acd173965/mdxpy-0.2.tar.gz","yanked":false,"yanked_reason":null}],"0.3":[{"comment_text":"","digests":{"blake2b_256":"314754b9c1ad3fbf1d73376a15486bb667faa823710c5f28fc9caee3ac44aed2","md5":"7ecca296917df35ffa9b5d978a581d93","sha256":"b322eb364e2f7f9d45021e3f3f6c6753a624930e2b7bd371ae513eebafb8c6d4"},"downloads":-1,"filename":"mdxpy-0.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"7ecca296917df35ffa9b5d978a581d93","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":">=3.5","size":9957,"upload_time":"2021-08-15T19:46:18","upload_time_iso_8601":"2021-08-15T19:46:18.033315Z","url":"https://files.pythonhosted.org/packages/31/47/54b9c1ad3fbf1d73376a15486bb667faa823710c5f28fc9caee3ac44aed2/mdxpy-0.3-py2.py3-none-any.whl","yanked":false,"yanked_reason":null}],"0.4":[{"comment_text":"","digests":{"blake2b_256":"cdd8c48931c30ac8988cce9c84e2a7667fdb00f313af84845f4ae2ed17bdbee0","md5":"bb0ecc8c46a5a76db9252da23ee97242","sha256":"5d1df40c3c10263e63296a3c295fb05b9b00dd1d8f41564242cb60c0e87918dd"},"downloads":-1,"filename":"mdxpy-0.4.tar.gz","has_sig":false,"md5_digest":"bb0ecc8c46a5a76db9252da23ee97242","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":81612,"upload_time":"2022-08-19T16:38:40","upload_time_iso_8601":"2022-08-19T16:38:40.904042Z","url":"https://files.pythonhosted.org/packages/cd/d8/c48931c30ac8988cce9c84e2a7667fdb00f313af84845f4ae2ed17bdbee0/mdxpy-0.4.tar.gz","yanked":false,"yanked_reason":null}],"1.0":[{"comment_text":"","digests":{"blake2b_256":"9f0c475f5a2f7b8eeebd99769411794e71f4db5c816a148335442f2527f83e5f","md5":"872589735865784a6ab3e28fd3581fc6","sha256":"5983ad120ae8dd0a2567c1ce8e522351755b1b4e1682dff077741bd0413c7c50"},"downloads":-1,"filename":"mdxpy-1.0.tar.gz","has_sig":false,"md5_digest":"872589735865784a6ab3e28fd3581fc6","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":82157,"upload_time":"2022-10-09T19:52:56","upload_time_iso_8601":"2022-10-09T19:52:56.022971Z","url":"https://files.pythonhosted.org/packages/9f/0c/475f5a2f7b8eeebd99769411794e71f4db5c816a148335442f2527f83e5f/mdxpy-1.0.tar.gz","yanked":false,"yanked_reason":null}],"1.1":[{"comment_text":"","digests":{"blake2b_256":"ca1cd7a916326c3f2dd8998e3b1f94ec993a4b40f525ad18254b39362ddb6a39","md5":"df8561af6b2894679fee0540240fa103","sha256":"a844d44e9a9d94df45865a7faadf308d663a323f9fa6f99fdcd9a674d8eb6997"},"downloads":-1,"filename":"mdxpy-1.1.tar.gz","has_sig":false,"md5_digest":"df8561af6b2894679fee0540240fa103","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":82919,"upload_time":"2022-12-06T17:06:39","upload_time_iso_8601":"2022-12-06T17:06:39.126909Z","url":"https://files.pythonhosted.org/packages/ca/1c/d7a916326c3f2dd8998e3b1f94ec993a4b40f525ad18254b39362ddb6a39/mdxpy-1.1.tar.gz","yanked":false,"yanked_reason":null}],"1.2":[{"comment_text":"","digests":{"blake2b_256":"4672e16ebcbfcf4af46cf03879f44e8e2b48220e024095ef3826b61dd63e05db","md5":"c66d0331f3e2274a81c5d40fd9351f4b","sha256":"f00c56027fc45dc79d934d0e045d43c58c85cec2524eab130fbbea3882e80b64"},"downloads":-1,"filename":"mdxpy-1.2.tar.gz","has_sig":false,"md5_digest":"c66d0331f3e2274a81c5d40fd9351f4b","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":83008,"upload_time":"2023-01-19T11:39:48","upload_time_iso_8601":"2023-01-19T11:39:48.737859Z","url":"https://files.pythonhosted.org/packages/46/72/e16ebcbfcf4af46cf03879f44e8e2b48220e024095ef3826b61dd63e05db/mdxpy-1.2.tar.gz","yanked":false,"yanked_reason":null}],"1.3":[{"comment_text":"","digests":{"blake2b_256":"5d51090e6a2260e3b50a78093eee80f1157bed79d7f3efed07dce6659ee0b713","md5":"41569b848cd3e125a4f18ce75340727f","sha256":"cdad24ad45b11e395c01d3dcc7f80b5e16430eba7ac7233b645c4794b7a1eea4"},"downloads":-1,"filename":"mdxpy-1.3.tar.gz","has_sig":false,"md5_digest":"41569b848cd3e125a4f18ce75340727f","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":83458,"upload_time":"2023-04-14T13:03:56","upload_time_iso_8601":"2023-04-14T13:03:56.519402Z","url":"https://files.pythonhosted.org/packages/5d/51/090e6a2260e3b50a78093eee80f1157bed79d7f3efed07dce6659ee0b713/mdxpy-1.3.tar.gz","yanked":false,"yanked_reason":null}],"1.3.1":[{"comment_text":"","digests":{"blake2b_256":"60ad5803adf30573335ab170edc58fb026d86909c890eef46cf8ed5c62450b91","md5":"1e3d6131d8cbfabc94a198d2dfff005d","sha256":"a9dc91e4b6bcf4dc1cf684525ce501154adb173320b3ef6fc5be864a0fe25d9f"},"downloads":-1,"filename":"mdxpy-1.3.1.tar.gz","has_sig":false,"md5_digest":"1e3d6131d8cbfabc94a198d2dfff005d","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":83444,"upload_time":"2023-04-19T16:52:45","upload_time_iso_8601":"2023-04-19T16:52:45.591339Z","url":"https://files.pythonhosted.org/packages/60/ad/5803adf30573335ab170edc58fb026d86909c890eef46cf8ed5c62450b91/mdxpy-1.3.1.tar.gz","yanked":false,"yanked_reason":null}],"1.3.2":[{"comment_text":"","digests":{"blake2b_256":"a5b86e622fda34bdc74a9c97959104e7364cd40c3ed78d0e43bfbb8597849a69","md5":"d3eec871fa4dcf361e74d887abe41447","sha256":"672bc7f7989a81180640fa56c4113bfb866e949248bd608cb79bfdf7c38f40ec"},"downloads":-1,"filename":"mdxpy-1.3.2.tar.gz","has_sig":false,"md5_digest":"d3eec871fa4dcf361e74d887abe41447","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":83562,"upload_time":"2023-08-07T13:57:50","upload_time_iso_8601":"2023-08-07T13:57:50.862632Z","url":"https://files.pythonhosted.org/packages/a5/b8/6e622fda34bdc74a9c97959104e7364cd40c3ed78d0e43bfbb8597849a69/mdxpy-1.3.2.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"a5b86e622fda34bdc74a9c97959104e7364cd40c3ed78d0e43bfbb8597849a69","md5":"d3eec871fa4dcf361e74d887abe41447","sha256":"672bc7f7989a81180640fa56c4113bfb866e949248bd608cb79bfdf7c38f40ec"},"downloads":-1,"filename":"mdxpy-1.3.2.tar.gz","has_sig":false,"md5_digest":"d3eec871fa4dcf361e74d887abe41447","packagetype":"sdist","python_version":"source","requires_python":">=3.5","size":83562,"upload_time":"2023-08-07T13:57:50","upload_time_iso_8601":"2023-08-07T13:57:50.862632Z","url":"https://files.pythonhosted.org/packages/a5/b8/6e622fda34bdc74a9c97959104e7364cd40c3ed78d0e43bfbb8597849a69/mdxpy-1.3.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
