{"info":{"author":"iRODS Consortium","author_email":"support@irods.org","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","License :: OSI Approved :: BSD License","Operating System :: POSIX :: Linux","Programming Language :: Python :: 2.7","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.4","Programming Language :: Python :: 3.5","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9"],"description":"Python iRODS Client (PRC)\n=========================\n\n[iRODS](https://www.irods.org) is an open source distributed data management system. This is a client API implemented in Python.\n\nCurrently supported:\n\n-   Python 2.7, 3.4 or newer\n-   Establish a connection to iRODS\n-   Authenticate via password, GSI, PAM\n-   iRODS connection over SSL\n-   Implement basic GenQueries (select columns and filtering)\n-   Support more advanced GenQueries with limits, offsets, and aggregations\n-   Query the collections and data objects within a collection\n-   Execute direct SQL queries\n-   Execute iRODS rules\n-   Support read, write, and seek operations for files\n-   Parallel PUT/GET data objects\n-   Create collections\n-   Rename collections\n-   Delete collections\n-   Create data objects\n-   Rename data objects\n-   Checksum data objects\n-   Delete data objects\n-   Register files and directories\n-   Query metadata for collections and data objects\n-   Add, edit, remove metadata\n-   Replicate data objects to different resource servers\n-   Connection pool management\n-   Implement GenQuery result sets as lazy queries\n-   Return empty result sets when CAT_NO_ROWS_FOUND is raised\n-   Manage permissions\n-   Manage users and groups\n-   Manage resources\n-   Unicode strings\n-   Ticket based access\n\nInstalling\n----------\n\nPRC requires Python 2.7 or 3.4+.\n\nCanonically, to install with pip:\n\n    pip install python-irodsclient\n\nor:\n\n    pip install git+https://github.com/irods/python-irodsclient.git[@branch|@commit|@tag]\n\nUninstalling\n------------\n\n    pip uninstall python-irodsclient\n\nHazard: Outdated Python\n-----------------------\n\nWith older versions of Python (as of this writing, the aforementioned\n2.7 and 3.4), we can take preparatory steps toward securing workable\nversions of pip and virtualenv by using these commands:\n\n    $ pip install --upgrade --user pip'<21.0'\n    $ python -m pip install --user virtualenv\n\nWe are then ready to use any of the following commands relevant to and\nrequired for the installation:\n\n    $ python -m virtualenv ... \n    $ python -m pip install ...\n\nEstablishing a (secure) connection\n----------------------------------\n\nOne way of starting a session is to pass iRODS credentials as keyword\narguments:\n\n```python\n>>> from irods.session import iRODSSession\n>>> with iRODSSession(host='localhost', port=1247, user='bob', password='1234', zone='tempZone') as session:\n...      # workload\n...\n>>>\n```\n\nIf you're an administrator acting on behalf of another user:\n\n```python\n>>> from irods.session import iRODSSession\n>>> with iRODSSession(host='localhost', port=1247, user='rods', password='1234', zone='tempZone', client_user='bob',\n           client_zone='possibly_another_zone') as session:\n...      # workload\n...\n>>>\n```\n\nIf no `client_zone` is provided, the `zone` parameter is used in its place.\n\nUsing environment files (including any SSL settings) in `~/.irods/`:\n\n```python\n>>> import os\n>>> import ssl\n>>> from irods.session import iRODSSession\n>>> try:\n...     env_file = os.environ['IRODS_ENVIRONMENT_FILE']\n... except KeyError:\n...     env_file = os.path.expanduser('~/.irods/irods_environment.json')\n...\n>>> ssl_settings = {} # Or, optionally: {'ssl_context': <user_customized_SSLContext>}\n>>> with iRODSSession(irods_env_file=env_file, **ssl_settings) as session:\n...     # workload\n...\n>>>\n```\n\nIn the above example, an SSL connection can be made even if no\n'ssl_context' argument is specified, in which case the Python client\ninternally generates its own SSLContext object to best match the iRODS\nSSL configuration parameters (such as\n\"irods_ssl_ca_certificate_file\", etc.) used to initialize the\niRODSSession. Those parameters can be given either in the environment\nfile, or in the iRODSSession constructor call as shown by the next\nexample.\n\nA pure Python SSL session (without a local `env_file` requires a few more things defined:\n\n```python\n>>> import ssl\n>>> from irods.session import iRODSSession\n>>> ssl_settings = {'client_server_negotiation': 'request_server_negotiation',\n...                'client_server_policy': 'CS_NEG_REQUIRE',\n...                'encryption_algorithm': 'AES-256-CBC',\n...                'encryption_key_size': 32,\n...                'encryption_num_hash_rounds': 16,\n...                'encryption_salt_size': 8,\n...                'ssl_context': ssl_context\n...                'ssl_verify_server': 'cert',\n...                'ssl_ca_certificate_file': '/etc/irods/ssl/irods.crt'\n... }\n```\n\nIf necessary, a user may provide a custom SSLContext object; although,\nas of release v1.1.6, this will rarely be required:\n\n```python\n>>> ssl_settings ['ssl_context'] = ssl.create_default_context(purpose=ssl.Purpose.SERVER_AUTH, # ... other options\n... )\n```\n\nAt this point, we are ready to instantiate and use the session:\n\n```python\n>>> with iRODSSession(host='irods-provider', port=1247, user='bob', password='1234', zone='tempZone', **ssl_settings) as session:\n...\t# workload\n```\n\nNote that the `irods_` prefix is unnecessary when providing\nthe `encryption_*` and `ssl_*` options\ndirectly to the constructor as keyword arguments, even though it is\nrequired when they are placed in the environment file.\n\nPAM logins\n----------\n\nStarting with v2.0.0, the python iRODS client is able to authenticate under PAM using the same file-based client environment as the\niCommands.\n\nCaveat for iRODS 4.3+: when upgrading from 4.2, the \"irods_authentication_scheme\" setting must be changed from \"pam\" to \"pam_password\" in\n`~/.irods/irods_environment.json` for all file-based client environments.\n\nMaintaining a connection\n------------------------\n\nThe default library timeout for a connection to an iRODS Server is 120\nseconds.\n\nThis can be overridden by changing the session `connection_timeout` immediately after creation of the\nsession object:\n\n```python\n>>> session.connection_timeout = 300\n```\n\nThis will set the timeout to five minutes for any associated\nconnections.\n\nSession objects and cleanup\n---------------------------\n\nWhen iRODSSession objects are kept as state in an application, spurious\nSYS_HEADER_READ_LEN_ERR errors can sometimes be seen in the\nconnected iRODS server's log file. This is frequently seen at program\nexit because socket connections are terminated without having been\nclosed out by the session object's cleanup() method.\n\nStarting with PRC Release 0.9.0, code has been included in the session\nobject's `__del__` method to call cleanup(), properly closing out\nnetwork connections. However, `__del__` cannot be relied to run under\nall circumstances (Python2 being more problematic), so an alternative\nmay be to call session.cleanup() on any session variable which might not\nbe used again.\n\nSimple PUTs and GETs\n--------------------\n\nWe can use the just-created session object to put files to (or get them\nfrom) iRODS.\n\n```python\n>>> logical_path = \"/{0.zone}/home/{0.username}/{1}\".format(session,\"myfile.dat\")\n>>> session.data_objects.put( \"myfile.dat\", logical_path)\n>>> session.data_objects.get( logical_path, \"/tmp/myfile.dat.copy\" )\n```\n\nNote that local file paths may be relative, but iRODS data objects must\nalways be referred to by their absolute paths. This is in contrast to\nthe `iput` and `iget` icommands, which keep track of the current working\ncollection (as modified by `icd`) for the unix shell.\n\nParallel Transfer\n-----------------\n\nStarting with release 0.9.0, data object transfers using put() and get()\nwill spawn a number of threads in order to optimize performance for\niRODS server versions 4.2.9+ and file sizes larger than a default\nthreshold value of 32 Megabytes.\n\nWorking with collections\n------------------------\n\n```python\n>>> coll = session.collections.get(\"/tempZone/home/rods\")\n\n>>> coll.id\n45798\n\n>>> coll.path\n/tempZone/home/rods\n\n>>> for col in coll.subcollections:\n>>>   print(col)\n<iRODSCollection /tempZone/home/rods/subcol1>\n<iRODSCollection /tempZone/home/rods/subcol2>\n\n>>> for obj in coll.data_objects:\n>>>   print(obj)\n<iRODSDataObject /tempZone/home/rods/file.txt>\n<iRODSDataObject /tempZone/home/rods/file2.txt>\n```\n\nCreate a new collection:\n\n```python\n>>> coll = session.collections.create(\"/tempZone/home/rods/testdir\")\n>>> coll.id\n45799\n```\n\nWorking with data objects (files)\n---------------------------------\n\nCreate a new data object:\n\n```python\n>>> obj = session.data_objects.create(\"/tempZone/home/rods/test1\")\n<iRODSDataObject /tempZone/home/rods/test1>\n```\n\nGet an existing data object:\n\n```python\n>>> obj = session.data_objects.get(\"/tempZone/home/rods/test1\")\n>>> obj.id 12345\n\n>>> obj.name\ntest1\n>>> obj.collection\n<iRODSCollection /tempZone/home/rods>\n\n>>> for replica in obj.replicas:\n...     print(replica.resource_name)\n...     print(replica.number)\n...     print(replica.path)\n...     print(replica.status)\n...\ndemoResc\n0\n/var/lib/irods/Vault/home/rods/test1\n1\n```\n\nUsing the put() method rather than the create() method will trigger different policy enforcement points (PEPs) on the server.\n\nPut an existing file as a new data object:\n\n```python\n>>> session.data_objects.put(\"test.txt\", \"/tempZone/home/rods/test2\")\n>>> obj2 = session.data_objects.get(\"/tempZone/home/rods/test2\")\n>>> obj2.id\n56789\n```\n\nSpecifying paths\n----------------\n\nPath strings for collection and data objects are usually expected to be\nabsolute in most contexts in the PRC. They must also be normalized to a\nform including single slashes separating path elements and no slashes at\nthe string's end. If there is any doubt that a path string fulfills\nthis requirement, the wrapper class `irods.path.iRODSPath` (a subclass of `str`) may be used to normalize it:\n\n    if not session.collections.exists( iRODSPath( potentially_unnormalized_path )): #....\n\nThe wrapper serves also as a path joiner; thus:\n\n    iRODSPath( zone, \"home\", user )\n\nmay replace:\n\n    \"/\".join([\"\", zone, \"home\", user])\n\n`iRODSPath` is available beginning with PRC release `v1.1.2`.\n\nReading and writing files\n-------------------------\n\nPRC provides [file-like\nobjects](http://docs.python.org/2/library/stdtypes.html#file-objects) for reading and writing files.\n\n```python\n>>> obj = session.data_objects.get(\"/tempZone/home/rods/test1\")\n>>> with obj.open('r+') as f:\n...   f.write('foonbarn')\n...   f.seek(0,0)\n...   for line in f:\n...      print(line)\n...\nfoo\nbar\n```\n\nAs of v1.1.9, there is also an auto-close configuration setting for data\nobjects, set to `False` by default, which may be assigned\nthe value `True` for guaranteed auto-closing of open data\nobject handles at the proper time.\n\nIn a small but illustrative example, the following Python session does\nnot require an explicit call to `f.close()`:\n\n```python\n>>> import irods.client_configuration as config, irods.test.helpers as helpers\n>>> config.data_objects.auto_close = True\n>>> session = helpers.make_session()\n>>> f = session.data_objects.open('/{0.zone}/home/{0.username}/new_object.txt'.format(session),'w')\n>>> f.write(b'new content.')\n```\n\nThis may be useful for Python programs in which frequent flushing of\nwrite updates to data objects is undesirable -- with descriptors on such\nobjects possibly being held open for indeterminately long lifetimes --\nyet the eventual application of those updates prior to the teardown of\nthe Python interpreter is required.\n\nThe current value of the setting is global in scope (i.e. applies to all\nsessions, whenever created) and is always consulted for the creation of\nany data object handle to govern that handle's cleanup behavior.\n\nPython iRODS Client Settings File\n---------------------------------\n\nAs of v1.1.9, Python iRODS client configuration can be saved in, and\nloaded from, a settings file.\n\nIf the settings file exists, each of its lines contains (a) a dotted\nname identifying a particular configuration setting to be assigned\nwithin the PRC, potentially changing its runtime behavior; and (b) the\nspecific value, in Python \"repr\"-style format, that should be assigned\ninto it.\n\nAn example follows:\n\n```\ndata_objects.auto_close True\n```\n\nNew dotted names may be created following the example of the one valid\nexample created thus far, `data_objects.auto_close]`,\ninitialized in `irods/client_configuration/__init__.py`.\nEach such name should correspond to a globally set value which the PRC\nroutinely checks when performing the affected library function.\n\nThe use of a settings file can be indicated, and the path to that file\ndetermined, by setting the environment variable:\n`PYTHON_IRODSCLIENT_CONFIGURATION_PATH`. If this variable\nis present but empty, this denotes use of a default settings file path\nof `~/.python-irodsclient`; if the variable's value is of\nnon-zero length, the value should be an absolute path to the settings\nfile whose use is desired. Also, if the variable is set, auto-load of\nsettings will be performed, meaning that the act of importing\n`irods` or any of its submodules will cause the automatic\nloading the settings from the settings file, assuming it exists.\n(Failure to find the file at the indicated path will be logged as a\nwarning.)\n\nSettings can also be saved and loaded manually using the `save()` and\n`load()` functions in the `irods.client_configuration`\nmodule. Each of these functions accepts an optional `file`\nparameter which, if set to a non-empty string, will override the\nsettings file path currently \"in force\" (i.e., the\nCONFIG_DEFAULT_PATH, as optionally overridden by the environment\nvariable PYTHON_IRODSCLIENT_CONFIGURATION_PATH).\n\nConfiguration settings may also be individually overridden by defining\ncertain environment variables. Here are relevant descriptions for each\none currently available, including the names of the environment\nvariables serving as overrides:\n\n-   Setting: Auto-close option for all data objects.\n    -   Dotted Name: `data_objects.auto_close`\n    -   Type: `bool`\n    -   Default Value: `False`\n    -   Environment Variable Override: `PYTHON_IRODSCLIENT_CONFIG__DATA_OBJECTS__AUTO_CLOSE`\n\n-   Setting: Number of hours to request for the new password entry's TTL (Time To Live) when auto-renewing PAM-authenticated sessions.\n    - Dotted Name: `legacy_auth.pam.time_to_live_in_hours`\n    - Type: `int`\n    - Default Value: `0` (Meaning: conform to server's default TTL value.)\n    - Environment Variable Override: `PYTHON_IRODSCLIENT_CONFIG__LEGACY_AUTH__PAM__TIME_TO_LIVE_IN_HOURS`\n\n-   Setting: Plaintext PAM password value, to be used when auto-renewing PAM-authenticated sessions because TTL has expired.\n    - Dotted Name: `legacy_auth.pam.password_for_auto_renew`\n    - Type: `str`\n    - Default Value: `\"\"` (Meaning: no password is set, and thus no automatic attempts will be made at auto-renewing PAM authentication.)\n    - Environment Variable Override: `PYTHON_IRODSCLIENT_CONFIG__LEGACY_AUTH__PAM__PASSWORD_FOR_AUTO_RENEW`.  (But note that use of the environment variable could pose a threat to password security.)\n\n-   Setting: Whether to write the (native encoded) new hashed password to the iRODS password file.  This step is only performed while auto-renewing PAM authenticated sessions.\n    - Dotted Name: `legacy_auth.pam.store_password_to_environment`\n    - Type: `bool`\n    - Default Value: `False`\n    - Environment Variable Override: `PYTHON_IRODSCLIENT_CONFIG__LEGACY_AUTH__PAM__STORE_PASSWORD_TO_ENVIRONMENT`\n\n-   Setting: Default choice of XML parser for all new threads.\n    -   Dotted Name: `connections.xml_parser_default`\n    -   Type: `str`\n    -   Default Value: `\"STANDARD_XML\"`\n    -   Possible Values: Any of `[\"STANDARD_XML\", \"QUASI_XML\", \"SECURE_XML\"]`\n    -   Environment Variable Override: `PYTHON_IRODSCLIENT_CONFIG__CONNECTIONS__XML_PARSER_DEFAULT`\n\nFor example, if `~/python_irodsclient` contains the line :\n\n```\nconnections.xml_parser_default        \"QUASI_XML\"\n```\n\nthen the session below illustrates the effect of defining the\nappropriate environment variable. Note the value stored in the variable\nmust be a valid input for `ast.literal_eval()`; that is, a\nprimitive Pythonic value - and quoted, for instance, if a string.\n\n```bash\n$ PYTHON_IRODSCLIENT_CONFIGURATION_PATH=\"\" \\\n  PYTHON_IRODSCLIENT_CONFIG__CONNECTIONS__XML_PARSER_DEFAULT=\"'SECURE_XML'\" \\\n  python -c \"import irods.message, irods.client_configuration as c; print (irods.message.default_XML_parser())\"\nXML_Parser_Type.SECURE_XML\n$ PYTHON_IRODSCLIENT_CONFIGURATION_PATH=\"\" \\\n  python -c \"import irods.message, irods.client_configuration as c; print (irods.message.default_XML_parser())\"\nXML_Parser_Type.QUASI_XML\n```\n\nComputing and Retrieving Checksums\n----------------------------------\n\nEach data object may be associated with a checksum by calling chksum()\non the object in question. Various behaviors can be elicited by passing\nin combinations of keywords (for a description of which, please consult\nthe [header documentation](https://github.com/irods/irods/blob/4-2-stable/lib/api/include/dataObjChksum.h).)\n\nAs with most other iRODS APIs, it is straightforward to specify keywords\nby adding them to an option dictionary:\n\n```python\n>>> data_object_1.chksum() # - computes the checksum if already in the catalog, otherwise computes and stores it\n...                        # (i.e. default behavior with no keywords passed in.)\n>>> from irods.manager.data_object_manager import Server_Checksum_Warning\n>>> import irods.keywords as kw\n>>> opts = { kw.VERIFY_CHKSUM_KW:'' }\n>>> try:\n...     data_object_2.chksum( **opts ) # - Uses verification option. (Does not auto-vivify a checksum field).\n...     # or:\n...     opts[ kw.NO_COMPUTE_KW ] = ''\n...     data_object_2.chksum( **opts ) # - Uses both verification and no-compute options. (Like `ichksum -K --no-compute`)\n... except Server_Checksum_Warning:\n...     print('some checksums are missing or wrong')\n```\n\nAdditionally, if a freshly created `irods.message.RErrorStack` instance is\ngiven, information can be returned and read by the client:\n\n```python\n>>> from irods.message import RErrorStack\n>>> r_err_stk = RErrorStack()\n>>> warn = None\n>>> try:   # Here, data_obj has one replica, not yet checksummed.\n...     data_obj.chksum( r_error = r_err_stk , **{kw.VERIFY_CHKSUM_KW:''} )\n... except Server_Checksum_Warning as exc:\n...     warn = exc\n>>> print(r_err_stk)\n[RError<message = u'WARNING: No checksum available for replica [0].', status = -862000 CAT_NO_CHECKSUM_FOR_REPLICA>]\n```\n\nWorking with metadata\n---------------------\n\nTo enumerate AVUs on an object. With no metadata attached, the result\nis an empty list:\n\n```python\n>>> from irods.meta import iRODSMeta\n>>> obj = session.data_objects.get(\"/tempZone/home/rods/test1\")\n>>> print(obj.metadata.items())\n[]\n```\n\nWe then add some metadata. Just as with the icommand equivalent \"imeta\nadd ...\", we can add multiple AVUs with the same name field:\n\n```python\n>>> obj.metadata.add('key1', 'value1', 'units1')\n>>> obj.metadata.add('key1', 'value2')\n>>> obj.metadata.add('key2', 'value3')\n>>> obj.metadata.add('key2', 'value4')\n>>> print(obj.metadata.items())\n[<iRODSMeta 13182 key1 value1 units1>, <iRODSMeta 13185 key2 value4 None>,\n<iRODSMeta 13183 key1 value2 None>, <iRODSMeta 13184 key2 value3 None>]\n```\n\nWe can also use Python's item indexing syntax to perform the equivalent\nof an \"imeta set \\...\", e.g. overwriting all AVUs with a name field\nof \"key2\" in a single update:\n\n```python\n>>> new_meta = iRODSMeta('key2','value5','units2')\n>>> obj.metadata\\[new_meta.name\\] = new_meta\n>>> print(obj.metadata.items())\n[<iRODSMeta 13182 key1 value1 units1>, <iRODSMeta 13183 key1 value2 None>,\n<iRODSMeta 13186 key2 value5 units2>]\n```\n\nNow, with only one AVU on the object with a name of \"key2\", *get_one*\nis assured of not throwing an exception:\n\n```python\n>>> print(obj.metadata.get_one('key2'))\n<iRODSMeta 13186 key2 value5 units2>\n```\n\nHowever, the same is not true of \"key1\":\n\n```python\n>>> print(obj.metadata.get_one('key1'))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/[...]/python-irodsclient/irods/meta.py\", line 41, in get_one\n    raise KeyError\nKeyError\n```\n\nFinally, to remove a specific AVU from an object:\n\n```python\n>>> obj.metadata.remove('key1', 'value1', 'units1')\n>>> print(obj.metadata.items())\n[<iRODSMeta 13186 key2 value5 units2>, <iRODSMeta 13183 key1 value2 None>]\n\nAlternately, this form of the `remove()` method can also be useful:\n\n```python\n>>> for avu in obj.metadata.items():\n...    obj.metadata.remove(avu)\n>>> print(obj.metadata.items())\n[]\n```\n\nIf we intended on deleting the data object anyway, we could have just\ndone this instead:\n\n```\n>>> obj.unlink(force=True)\n```\n\nBut notice that the force option is important, since a data object in\nthe trash may still have AVUs attached.\n\nAt the end of a long session of AVU add/manipulate/delete operations,\none should make sure to delete all unused AVUs. We can in fact use any\n`*Meta` data model in the queries below, since unattached AVUs are\nnot aware of the (type of) catalog object they once annotated:\n\n```python\n>>> from irods.models import (DataObjectMeta, ResourceMeta)\n>>> len(list( session.query(ResourceMeta) ))\n4\n>>> from irods.test.helpers import remove_unused_metadata\n>>> remove_unused_metadata(session)\n>>> len(list( session.query(ResourceMeta) ))\n0\n```\n\nWhen altering a fetched iRODSMeta, we must copy it first to avoid\nerrors, due to the fact the reference is cached by the iRODS object\nreference. A shallow copy is sufficient:\n\n```python\n>>> meta = album.metadata.items()[0]\n>>> meta.units\n'quid'\n>>> import copy; meta = copy.copy(meta); meta.units = 'pounds sterling'\n>>> album.metadata[ meta.name ] = meta\n```\n\nFortunately, as of PRC >= 1.1.4, we can simply do this instead:\n\n```python\n>>> album.metadata.set( meta )\n```\n\nIn versions of iRODS 4.2.12 and later, we can also do:\n\n```python\n>>> album.metadata.set( meta, \\*\\*{kw.ADMIN_KW: ''} )\n```\n\nor even:\n\n```python\n>>> album.metadata(admin = True)\\[meta.name\\] = meta\n```\n\nIn v1.1.5, the \"timestamps\" keyword is provided to enable the loading\nof create and modify timestamps for every AVU returned from the server:\n\n```python\n>>> avus = album.metadata(timestamps = True).items()\n>>> avus[0].create_time\ndatetime.datetime(2022, 9, 19, 15, 26, 7)\n```\n\nAtomic operations on metadata\n-----------------------------\n\nWith release 4.2.8 of iRODS, the atomic metadata API was introduced to\nallow a group of metadata add and remove operations to be performed\ntransactionally, within a single call to the server. This capability can\nbe leveraged in version 0.8.6 of the PRC.\n\nSo, for example, if 'obj' is a handle to an object in the iRODS\ncatalog (whether a data object, collection, user or storage resource),\nwe can send an arbitrary number of AVUOperation instances to be executed\ntogether as one indivisible operation on that object:\n\n```python\n>>> from irods.meta import iRODSMeta, AVUOperation\n>>> obj.metadata.apply_atomic_operations( AVUOperation(operation='remove', avu=iRODSMeta('a1','v1','these_units')),\n...                                       AVUOperation(operation='add', avu=iRODSMeta('a2','v2','those_units')),\n...                                       AVUOperation(operation='remove', avu=iRODSMeta('a3','v3')) \\# , ...\n... )\n```\n\nThe list of operations will applied in the order given, so that a\n\"remove\" followed by an \"add\" of the same AVU is, in effect, a\nmetadata \"set\" operation. Also note that a \"remove\" operation will\nbe ignored if the AVU value given does not exist on the target object at\nthat point in the sequence of operations.\n\nWe can also source from a pre-built list of AVUOperations using\nPython's `f(*args_list)` syntax. For example, this\nfunction uses the atomic metadata API to very quickly remove all AVUs\nfrom an object:\n\n```python\n>>> def remove_all_avus( Object ):\n...     avus_on_Object = Object.metadata.items()\n...     Object.metadata.apply_atomic_operations( *[AVUOperation(operation='remove', avu=i) for i in avus_on_Object] )\n```\n\nSpecial Characters\n------------------\n\nOf course, it is fine to put Unicode characters into your collection and\ndata object names. However, certain non-printable ASCII characters, and\nthe backquote character as well, have historically presented problems\n- especially for clients using iRODS's human readable XML protocol.\nConsider this small, only slighly contrived, application:\n\n```python\n    from irods.test.helpers import make_session\n\n    def create_notes( session, obj_name, content = u'' ):\n        get_home_coll = lambda ses: \"/{0.zone}/home/{0.username}\".format(ses)\n        path = get_home_coll(session) + \"/\" + obj_name\n        with session.data_objects.open(path,\"a\") as f:\n            f.seek(0, 2) # SEEK_END\n            f.write(content.encode('utf8'))\n        return session.data_objects.get(path)\n\n    with make_session() as session:\n\n        # Example 1 : exception thrown when name has non-printable character\n        try:\n            create_notes( session, \"lucky\\033.dat\", content = u'test' )\n        except:\n            pass\n\n        # Example 2 (Ref. issue: irods/irods #4132, fixed for 4.2.9 release of iRODS)\n        print(\n            create_notes( session, \"Alice's diary\").name  # note diff (' != ') in printed name\n        )\n```\n\nThis creates two data objects, but with less than optimal success. The\nfirst example object is created but receives no content because an\nexception is thrown trying to query its name after creation. In the\nsecond example, for iRODS 4.2.8 and before, a deficiency in packStruct\nXML protocol causes the backtick to be read back as an apostrophe, which\ncould create problems manipulating or deleting the object later.\n\nAs of PRC v1.1.0, we can mitigate both problems by switching in the\nQUASI_XML parser for the default one:\n\n```\n    from irods.message import (XML_Parser_Type, ET)\n    ET( XML_Parser_Type.QUASI_XML, session.server_version )\n```\n\nTwo dedicated environment variables may also be used to customize the\nPython client's XML parsing behavior via the setting of global defaults\nduring start-up.\n\nFor example, we can set the default parser to QUASI_XML, optimized for\nuse with version 4.2.8 of the iRODS server, in the following manner:\n\n```\n    Bash-Shell> export PYTHON_IRODSCLIENT_DEFAULT_XML=QUASI_XML PYTHON_IRODSCLIENT_QUASI_XML_SERVER_VERSION=4,2,8\n```\n\nOther alternatives for PYTHON_IRODSCLIENT_DEFAULT_XML are\n\"STANDARD_XML\" and \"SECURE_XML\". These two latter options denote\nuse of the xml.etree and defusedxml modules, respectively.\n\nOnly the choice of \"QUASI_XML\" is affected by the specification of a\nparticular server version.\n\nFinally, note that these global defaults, once set, may be overridden on\na per-thread basis using `ET(parser_type, server_version)`.\nWe can also revert the current thread's XML parser back to the global\ndefault by calling `ET(None)`.\n\nRule Execution\n--------------\n\nA simple example of how to execute an iRODS rule from the Python client\nis as follows. Suppose we have a rule file `native1.r`\nwhich contains a rule in native iRODS Rule Language:\n\n```\n    main() {\n        writeLine(\"*stream\",\n                  *X ++ \" squared is \" ++ str(double(*X)^2) )\n    }\n\n    INPUT *X=\"3\", *stream=\"serverLog\"\n    OUTPUT null\n```\n\nThe following Python client code will run the rule and produce the\nappropriate output in the irods server log:\n\n```\n    r = irods.rule.Rule( session, rule_file = 'native1.r')\n    r.execute()\n```\n\nWith release v1.1.1, not only can we target a specific rule engine\ninstance by name (which is useful when more than one is present), but we\ncan also use a file-like object for the `rule_file`\nparameter:\n\n```\n    Rule( session, rule_file = io.StringIO(u'''mainRule() { anotherRule(*x); writeLine('stdout',*x) }\\n'''\n                                           u'''anotherRule(*OUT) {*OUT='hello world!'}\\n\\n'''\n                                           u'''OUTPUT ruleExecOut\\n'''),\n          instance_name = 'irods_rule_engine_plugin-irods_rule_language-instance' )\n```\n\nIncidentally, if we wanted to change the `native1.r` rule\ncode print to stdout also, we could set the `INPUT`\nparameter, `*stream`, using the Rule constructor's\n`params` keyword argument. Similarly, we can change the\n`OUTPUT` parameter from `null` to\n`ruleExecOut`, to accommodate the output stream, via the\n`output` argument:\n\n```\n    r = irods.rule.Rule( session, rule_file = 'native1.r',\n               instance_name = 'irods_rule_engine_plugin-irods_rule_language-instance',\n               params={'*stream':'\"stdout\"'} , output = 'ruleExecOut' )\n    output = r.execute( )\n    if output and len(output.MsParam_PI):\n        buf = output.MsParam_PI[0].inOutStruct.stdoutBuf.buf\n        if buf: print(buf.rstrip(b'\\0').decode('utf8'))\n```\n\n(Changing the input value to be squared in this example is left as an\nexercise for the reader!)\n\nTo deal with errors resulting from rule execution failure, two\napproaches can be taken. Suppose we have defined this in the\n`/etc/irods/core.re` rule-base:\n\n```\n    rule_that_fails_with_error_code(*x) {\n      *y = (if (*x!=\"\") then int(*x) else 0)\n    # if (SOME_PROCEDURE_GOES_WRONG) {\n        if (*y < 0) { failmsg(*y,\"-- my error message --\"); }  #-> throws an error code of int(*x) in REPF\n        else { fail(); }                                       #-> throws FAIL_ACTION_ENCOUNTERED_ERR in REPF\n    # }\n    }\n```\n\nWe can run the rule thus:\n\n```python\n>>> Rule( session, body='rule_that_fails_with_error_code(\"\"), instance_name = 'irods_rule_engine_plugin-irods_rule_language-instance',\n...     ).execute( r_error = (r_errs:= irods.message.RErrorStack()) )\n```\n\nWhere we've used the Python 3.8 \"walrus operator\" for brevity. The\nerror will automatically be caught and translated to a returned-error\nstack:\n\n```python\n>>> pprint.pprint([vars(r) for r in r_errs])\n[{'raw_msg_': 'DEBUG: fail action encountered\\n'\n              'line 14, col 15, rule base core\\n'\n              '        else { fail(); }\\n'\n              '               ^\\n'\n              '\\n',\n  'status_': -1220000}]\n```\n\nNote, if a stringized negative integer is given , i.e. as a special fail\ncode to be thrown within the rule, we must add this code into a special\nparameter to have this automatically caught as well:\n\n```python\n>>> Rule( session, body='rule_that_fails_with_error_code(\"-2\")',instance_name = 'irods_rule_engine_plugin-irods_rule_language-instance'\n...     ).execute( acceptable_errors = ( FAIL_ACTION_ENCOUNTERED_ERR, -2),\n...                r_error = (r_errs := irods.message.RErrorStack()) )\n```\n\nBecause the rule is written to emit a custom error message via `failmsg()`\nin this case, the resulting r_error stack will now include that custom\nerror message as a substring:\n\n```python\n>>> pprint.pprint([vars(r) for r in r_errs])\n[{'raw_msg_': 'DEBUG: -- my error message --\\n'\n              'line 21, col 20, rule base core\\n'\n              '      if (*y < 0) { failmsg(*y,\"-- my error message --\"); }  '\n              '#-> throws an error code of int(*x) in REPF\\n'\n              '                    ^\\n'\n              '\\n',\n  'status_': -1220000}]\n```\n\nAlternatively, or in combination with the automatic catching of errors,\nwe may also catch errors as exceptions on the client side. For example,\nif the Python rule engine is configured, and the following rule is\nplaced in `/etc/irods/core.py`:\n\n```python\ndef python_rule(rule_args, callback, rei):\n#   if some operation fails():\n        raise RuntimeError\n```\n\nwe can trap the error thus:\n\n```python\ntry:\n    Rule( session, body = 'python_rule', instance_name = 'irods_rule_engine_plugin-python-instance' ).execute()\nexcept irods.exception.RULE_ENGINE_ERROR:\n    print('Rule execution failed!')\n    exit(1)\nprint('Rule execution succeeded!')\n```\n\nAs fail actions from native rules are not thrown by default (refer to\nthe help text for `Rule.execute`), if we anticipate these\nand prefer to catch them as exceptions, we can do it this way:\n\n```python\ntry:\n    Rule( session, body = 'python_rule', instance_name = 'irods_rule_engine_plugin-python-instance'\n         ).execute( acceptable_errors = () )\nexcept (irods.exception.RULE_ENGINE_ERROR,\n        irods.exception.FAIL_ACTION_ENCOUNTERED_ERR) as e:\n    print('Rule execution failed!')\n    exit(1)\nprint('Rule execution succeeded!')\n```\n\nFinally, keep in mind that rule code submitted through an\n`irods.rule.Rule` object is processed by the\nexec_rule_text function in the targeted plugin instance. This may be a\nlimitation for plugins not equipped to handle rule code in this way. In\na sort of middle-ground case, the iRODS Python Rule Engine Plugin is not\ncurrently able to handle simple rule calls and the manipulation of iRODS\ncore primitives (like simple parameter passing and variable expansion')\nas flexibly as the iRODS Rule Language.\n\nAlso, core.py rules may not be run directly (as is also true with\n`irule`) by other than a rodsadmin user pending the\nresolution of [this\nissue](https://github.com/irods/irods_rule_engine_plugin_python/issues/105).\n\n\nGeneral Queries\n---------------\n\n```python\n>>> import os\n>>> from irods.session import iRODSSession\n>>> from irods.models import Collection, DataObject\n>>>\n>>> env_file = os.path.expanduser('~/.irods/irods_environment.json')\n>>> with iRODSSession(irods_env_file=env_file) as session:\n...     query = session.query(Collection.name, DataObject.id, DataObject.name, DataObject.size)\n...\n...     for result in query:\n...             print('{}/{} id={} size={}'.format(result[Collection.name], result[DataObject.name], result[DataObject.id], result[DataObject.size]))\n...\n/tempZone/home/rods/manager/access_manager.py id=212665 size=2164\n/tempZone/home/rods/manager/access_manager.pyc id=212668 size=2554\n/tempZone/home/rods/manager/collection_manager.py id=212663 size=4472\n/tempZone/home/rods/manager/collection_manager.pyc id=212664 size=4464\n/tempZone/home/rods/manager/data_object_manager.py id=212662 size=10291\n/tempZone/home/rods/manager/data_object_manager.pyc id=212667 size=8772\n/tempZone/home/rods/manager/__init__.py id=212670 size=79\n/tempZone/home/rods/manager/__init__.pyc id=212671 size=443\n/tempZone/home/rods/manager/metadata_manager.py id=212660 size=4263\n/tempZone/home/rods/manager/metadata_manager.pyc id=212659 size=4119\n/tempZone/home/rods/manager/resource_manager.py id=212666 size=5329\n/tempZone/home/rods/manager/resource_manager.pyc id=212661 size=4570\n/tempZone/home/rods/manager/user_manager.py id=212669 size=5509\n/tempZone/home/rods/manager/user_manager.pyc id=212658 size=5233\n```\n\nQuery using other models:\n\n```python\n>>> from irods.column import Criterion\n>>> from irods.models import DataObject, DataObjectMeta, Collection, CollectionMeta\n>>> from irods.session import iRODSSession\n>>> import os\n>>> env_file = os.path.expanduser('~/.irods/irods_environment.json')\n>>> with iRODSSession(irods_env_file=env_file) as session:\n...    # by metadata\n...    # equivalent to 'imeta qu -C type like Project'\n...    results = session.query(Collection, CollectionMeta).filter( \\\n...        Criterion('=', CollectionMeta.name, 'type')).filter( \\\n...        Criterion('like', CollectionMeta.value, '%Project%'))\n...    for r in results:\n...        print(r[Collection.name], r[CollectionMeta.name], r[CollectionMeta.value], r[CollectionMeta.units])\n...\n('/tempZone/home/rods', 'type', 'Project', None)\n```\n\nBeginning with version 0.8.3 of PRC, the 'in' genquery operator is\nalso available:\n\n```python\n>>> from irods.models import Resource\n>>> from irods.column import In\n>>> [ resc[Resource.id]for resc in session.query(Resource).filter(In(Resource.name, ['thisResc','thatResc'])) ]\n[10037,10038]\n```\n\nQuery with aggregation(min, max, sum, avg, count):\n\n```python\n>>> with iRODSSession(irods_env_file=env_file) as session:\n...     query = session.query(DataObject.owner_name).count(DataObject.id).sum(DataObject.size)\n...     print(next(query.get_results()))\n{<irods.column.Column 411 D_OWNER_NAME>: 'rods', <irods.column.Column 407 DATA_SIZE>: 62262, <irods.column.Column 401 D_DATA_ID>: 14}\n```\n\nIn this case since we are expecting only one row we can directly call\n`query.execute()`:\n\n```python\n>>> with iRODSSession(irods_env_file=env_file) as session:\n...     query = session.query(DataObject.owner_name).count(DataObject.id).sum(DataObject.size)\n...     print(query.execute())\n+--------------+-----------+-----------+\n| D_OWNER_NAME | D_DATA_ID | DATA_SIZE |\n+--------------+-----------+-----------+\n| rods         | 14        | 62262     |\n+--------------+-----------+-----------+\n```\n\nFor a case-insensitive query, add a `case_sensitive=False`\nparameter to the query:\n\n```python\n>>> with iRODSSession(irods_env_file=env_file) as session:\n...     query = session.query(DataObject.name, case_sensitive=False).filter(Like(DataObject.name, \"%oBjEcT\"))\n...     print(query.all())\n+---------------------+\n| DATA_NAME           |\n+---------------------+\n| caseSENSITIVEobject |\n+---------------------+\n```\n\nSpecific Queries\n----------------\n\n```python\n>>> import os\n>>> from irods.session import iRODSSession\n>>> from irods.models import Collection, DataObject\n>>> from irods.query import SpecificQuery\n>>>\n>>> env_file = os.path.expanduser('~/.irods/irods_environment.json')\n>>> with iRODSSession(irods_env_file=env_file) as session:\n...     # define our query\n...     sql = \"select data_name, data_id from r_data_main join r_coll_main using (coll_id) where coll_name = '/tempZone/home/rods/manager'\"\n...     alias = 'list_data_name_id'\n...     columns = [DataObject.name, DataObject.id] # optional, if we want to get results by key\n...     query = SpecificQuery(session, sql, alias, columns)\n...\n...     # register specific query in iCAT\n...     _ = query.register()\n...\n...     for result in query:\n...             print('{} {}'.format(result[DataObject.name], result[DataObject.id]))\n...\n...     # delete specific query\n...     _ = query.remove()\n...\nuser_manager.pyc 212658\nmetadata_manager.pyc 212659\nmetadata_manager.py 212660\nresource_manager.pyc 212661\ndata_object_manager.py 212662\ncollection_manager.py 212663\ncollection_manager.pyc 212664\naccess_manager.py 212665\nresource_manager.py 212666\ndata_object_manager.pyc 212667\naccess_manager.pyc 212668\nuser_manager.py 212669\n__init__.py 212670\n__init__.pyc 212671\n```\n\nRecherché Queries\n-----------------\n\nIn some cases you might like to use a GenQuery operator not directly\noffered by this Python library, or even combine query filters in ways\nGenQuery may not directly support.\n\nAs an example, the code below finds metadata value fields\nlexicographically outside the range of decimal integers, while also\nrequiring that the data objects to which they are attached do not reside\nin the trash.\n\n```python\n>>> search_tuple = (DataObject.name , Collection.name ,\n...                 DataObjectMeta.name , DataObjectMeta.value)\n\n>>> # \"not like\" : direct instantiation of Criterion (operator in literal string)\n>>> not_in_trash = Criterion ('not like', Collection.name , '%/trash/%')\n\n>>> # \"not between\"( column, X, Y) := column < X OR column > Y (\"OR\" done via chained iterators)\n>>> res1 = session.query (* search_tuple).filter(not_in_trash).filter(DataObjectMeta.value < '0')\n>>> res2 = session.query (* search_tuple).filter(not_in_trash).filter(DataObjectMeta.value > '9' * 9999 )\n\n>>> chained_results = itertools.chain ( res1.get_results(), res2.get_results() )\n>>> pprint( list( chained_results ) )\n```\n\nInstantiating iRODS objects from query results\n----------------------------------------------\n\nThe General query works well for getting information out of the ICAT if\nall we're interested in is information representable with primitive\ntypes (i.e. object names, paths, and ID's, as strings or integers). But\nPython's object orientation also allows us to create object references\nto mirror the persistent entities (instances of *Collection*,\n*DataObject*, *User*, or *Resource*, etc.) inhabiting the ICAT.\n\n**Background:**\n\nCertain iRODS object types can be instantiated easily\nusing the session object's custom type managers, particularly if some\nparameter (often just the name or path) of the object is already known:\n\n```python\n>>> type(session.users)\n<class 'irods.manager.user_manager.UserManager'>\n>>> u = session.users.get('rods')\n>>> u.id\n10003\n```\n\nType managers are good for specific operations, including object\ncreation and removal:\n\n```python\n>>> session.collections.create('/tempZone/home/rods/subColln')\n>>> session.collections.remove('/tempZone/home/rods/subColln')\n>>> session.data_objects.create('/tempZone/home/rods/dataObj')\n>>> session.data_objects.unlink('/tempZone/home/rods/dataObj')\n```\n\nWhen we retrieve a reference to an existing collection using *get* :\n\n```python\n>>> c = session.collections.get('/tempZone/home/rods')\n>>> c\n<iRODSCollection 10011 rods>\n```\n\nwe have, in that variable *c*, a reference to an iRODS *Collection*\nobject whose properties provide useful information:\n\n```python\n>>> [ x for x in dir(c) if not x.startswith('__') ]\n['_meta', 'data_objects', 'id', 'manager', 'metadata', 'move', 'name', 'path', 'remove', 'subcollections', 'unregister', 'walk']\n>>> c.name\n'rods'\n>>> c.path\n'/tempZone/home/rods'\n>>> c.data_objects\n[<iRODSDataObject 10019 test1>]\n>>> c.metadata.items()\n[ <... list of AVUs attached to Collection c ... > ]\n```\n\nor whose methods can do useful things:\n\n```python\n>>> for sub_coll in c.walk(): print('---'); pprint( sub_coll )\n[ ...< series of Python data structures giving the complete tree structure below collection 'c'> ...]\n```\n\nThis approach of finding objects by name, or via their relations with\nother objects (ie \"contained by\", or in the case of metadata,\n\"attached to\"), is helpful if we know something about the location or\nidentity of what we're searching for, but we don't always have that\nkind of a-priori knowledge.\n\nSo, although we can (as seen in the last example) walk an\n*iRODSCollection* recursively to discover all subordinate collections\nand their data objects, this approach will not always be best for a\ngiven type of application or data discovery, especially in more advanced\nuse cases.\n\n**A Different Approach:**\n\nFor the PRC to be sufficiently powerful for general use, we'll often need at least:\n\n-   general queries, and\n-   the capabilities afforded by the PRC's object-relational mapping.\n\nSuppose, for example, we wish to enumerate all collections in the iRODS\ncatalog.\n\nAgain, the object managers are the answer, but they are now invoked\nusing a different scheme:\n\n```python\n>>> from irods.collection import iRODSCollection; from irods.models import Collection\n>>> all_collns = [ iRODSCollection(session.collections,result) for result in session.query(Collection) ]\n```\n\nFrom there, we have the ability to do useful work, or filtering based on\nthe results of the enumeration. And, because *all_collns* is an\niterable of true objects, we can either use Python's list\ncomprehensions or execute more catalog queries to achieve further aims.\n\nNote that, for similar system-wide queries of Data Objects (which, as it\nhappens, are inextricably joined to their parent Collection objects), a\nbit more finesse is required. Let us query, for example, to find all\ndata objects in a particular zone with an AVU that matches the following\ncondition:\n\n```\n    META_DATA_ATTR_NAME = \"irods::alert_time\" and META_DATA_ATTR_VALUE like '+0%'\n```\n\n```python\n>>> import irods.keywords\n>>> from irods.data_object import iRODSDataObject\n>>> from irods.models import DataObjectMeta, DataObject\n>>> from irods.column import Like\n>>> q = session.query(DataObject).filter( DataObjectMeta.name == 'irods::alert_time',\n                                          Like(DataObjectMeta.value, '+0%') )\n>>> zone_hint = \"\" # --> add a zone name in quotes to search another zone\n>>> if zone_hint: q = q.add_keyword( irods.keywords.ZONE_KW, zone_hint )\n>>> for res in q:\n...      colln_id = res [DataObject.collection_id]\n...      collObject = get_collection( colln_id, session, zone = zone_hint)\n...      dataObject = iRODSDataObject( session.data_objects, parent = collObject, results=[res])\n...      print( '{coll}/{data}'.format (coll = collObject.path, data = dataObject.name))\n```\n\nIn the above loop we have used a helper function, *get_collection*, to\nminimize the number of hits to the object catalog. Otherwise, me might\nfind within a typical application that some Collection objects are being\nqueried at a high rate of redundancy. *get_collection* can be\nimplemented thusly:\n\n```python\nimport collections  # of the Pythonic, not iRODS, kind\ndef makehash():\n    # see https://stackoverflow.com/questions/651794/whats-the-best-way-to-initialize-a-dict-of-dicts-in-python\n    return collections.defaultdict(makehash)\nfrom irods.collection import iRODSCollection\nfrom irods.models import Collection\ndef get_collection (Id, session, zone=None, memo = makehash()):\n    if not zone: zone = \"\"\n    c_obj = memo[session][zone].get(Id)\n    if c_obj is None:\n        q = session.query(Collection).filter(Collection.id==Id)\n        if zone != '': q = q.add_keyword( irods.keywords.ZONE_KW, zone )\n        c_id =  q.one()\n        c_obj = iRODSCollection(session, result = c_id)\n        memo[session][zone][Id] = c_obj\n    return c_obj\n```\n\nOnce instantiated, of course, any *iRODSDataObject*'s data to which we\nhave access permissions is available via its open() method.\n\nAs stated, this type of object discovery requires some extra study and\neffort, but the ability to search arbitrary iRODS zones (to which we are\nfederated and have the user permissions) is powerful indeed.\n\nTickets\n-------\n\nThe `irods.ticket.Ticket` class lets us issue \"tickets\"\nwhich grant limited permissions for other users to access our own data\nobjects (or collections of data objects). As with the iticket client,\nthe access may be either \"read\" or \"write\". The recipient of the\nticket could be a rodsuser, or even an anonymous user.\n\nBelow is a demonstration of how to generate a new ticket for access to a\nlogical path - in this case, say a collection containing 1 or more data\nobjects. (We assume the creation of the granting_session and\nreceiving_session for the users respectively for the users providing\nand consuming the ticket access.)\n\nThe user who wishes to provide an access may execute the following:\n\n```python\n>>> from irods.ticket import Ticket\n>>> new_ticket = Ticket (granting_session)\n>>> The_Ticket_String = new_ticket.issue('read', \n...     '/zone/home/my/collection_with_data_objects_for/somebody').string\n```\n\nat which point that ticket's unique string may be given to other users,\nwho can then apply the ticket to any existing session object in order to\ngain access to the intended object(s):\n\n```python\n>>> from irods.models import Collection, DataObject\n>>> ses = receiving_session\n>>> Ticket(ses, The_Ticket_String).supply()\n>>> c_result = ses.query(Collection).one()\n>>> c = iRODSCollection( ses.collections, c_result)\n>>> for dobj in (c.data_objects):\n...     ses.data_objects.get( dobj.path, '/tmp/' + dobj.name ) # download objects\n```\n\nIn this case, however, modification will not be allowed because the\nticket is for read only:\n\n```python\n>>> c.data_objects[0].open('w').write(  # raises\n...     b'new content')                 #  CAT_NO_ACCESS_PERMISSION\n```\n\nIn another example, we could generate a ticket that explicitly allows\n'write' access on a specific data object, thus granting other users\nthe permissions to modify as well as read it:\n\n```python\n>>> ses = iRODSSession( user = 'anonymous', password = '', host = 'localhost',\n                        port = 1247, zone = 'tempZone')\n>>> Ticket(ses, write_data_ticket_string ).supply()\n>>> d_result = ses.query(DataObject.name,Collection.name).one()\n>>> d_path = ( d_result[Collection.name] + '/' +\n...            d_result[DataObject.name] )\n>>> old_content = ses.data_objects.open(d_path,'r').read()\n>>> with tempfile.NamedTemporaryFile() as f:\n...     f.write(b'blah'); f.flush()\n...     ses.data_objects.put(f.name,d_path)\n```\n\nAs with iticket, we may set a time limit on the availability of a\nticket, either as a timestamp or in seconds since the epoch:\n\n```python\n>>> t=Ticket(ses); s = t.string\nvIOQ6qzrWWPO9X7\n>>> t.issue('read','/some/path')\n>>> t.modify('expiry','2021-04-01.12:34:56')  # timestamp assumed as UTC\n```\n\nTo check the results of the above, we could invoke this icommand\nelsewhere in a shell prompt:\n\n```\niticket ls vIOQ6qzrWWPO9X7\n```\n\nand the server should report back the same expiration timestamp.\n\nAnd, if we are the issuer of a ticket, we may also query, filter on, and\nextract information based on a ticket's attributes and catalog\nrelations:\n\n```python\n>>> from irods.models import TicketQuery\n>>> delay = lambda secs: int( time.time() + secs + 1)\n>>> Ticket(ses).issue('read','/path/to/data_object').modify(\n                      'expiry',delay(7*24*3600))             # lasts 1 week\n>>> Q = ses.query (TicketQuery.Ticket, TicketQuery.DataObject).filter(\n...                                                            TicketQuery.DataObject.name == 'data_object')\n>>> print ([ _[TicketQuery.Ticket.expiry_ts] for _ in Q ])\n['1636757427']\n```\n\nTracking and manipulating replicas of Data Objects\n--------------------------------------------------\n\nPutting together the techniques we've seen so far, it's not hard to write client code to accomplish\nuseful, common tasks.  Suppose, for instance, that a data object contains replicas on a given resource\nor resource hierarchy (the \"source\"), and we want those replicas \"moved\" to a second resource\n(the \"destination\").  This can be done by combining the replicate and trim operations, as in the following\ncode excerpt.\n\nWe'll assume, for our current purposes, that all pre-existing replicas are good (ie. they have a\n`status` attribute of `'1'`); and that the nodes in question are named `src` and `dest`,\nwith `src` being the root node of a resource hierarchy and `dest` just a simple storage node.\n\nThen we can accomplish the replica \"move\" thus:\n\n```python\n  path = '/path/to/data/object'\n  data = session.data_objects.get('/path/to/data/object')\n\n  # Replicate the data object to the destination.\n\n  data.replicate(**{kw.DEST_RESC_NAME_KW: 'dest'})\n\n  # Find and trim replicas on the source resource hierarchy.\n\n  replica_numbers = [r.number for r in d.replicas if r.resc_hier.startswith('src;')]\n  for number in replica_numbers:\n      session.data_objects.trim(path, **{kw.DATA_REPL_NUM:number, kw.COPIES_KW:1})\n```\n\nListing Users and Groups ; calculating Group Membership\n-------------------------------------------------------\n\niRODS tracks groups and users using two tables, R_USER_MAIN and\nR_USER_GROUP. Under this database schema, all \"user groups\" are also\nusers:\n\n```python\n>>> from irods.models import User, Group\n>>> from pprint import pprint\n>>> pprint(list((x[User.id], x[User.name]) for x in session.query(User)))\n[(10048, 'alice'),\n (10001, 'rodsadmin'),\n (13187, 'bobby'),\n (10045, 'collab'),\n (10003, 'rods'),\n (13193, 'empty'),\n (10002, 'public')]\n```\n\nBut it's also worth noting that the User.type field will be\n'rodsgroup' for any user ID that iRODS internally recognizes as a\n\"Group\":\n\n```python\n>>> groups = session.query(User).filter( User.type == 'rodsgroup' )\n\n>>> [x[User.name] for x in groups]\n['collab', 'public', 'rodsadmin', 'empty']\n```\n\nSince we can instantiate iRODSGroup and iRODSUser objects directly from\nthe rows of a general query on the corresponding tables, it is also\nstraightforward to trace out the groups' memberships:\n\n```python\n>>> from irods.user import iRODSUser, iRODSGroup\n>>> grp_usr_mapping = [ (iRODSGroup(session.groups, result), iRODSUser(session.users, result)) \\\n...                     for result in session.query(Group,User) ]\n>>> pprint( [ (x,y) for x,y in grp_usr_mapping if x.id != y.id ] )\n[(<iRODSGroup 10045 collab>, <iRODSUser 10048 alice rodsuser tempZone>),\n (<iRODSGroup 10001 rodsadmin>, <iRODSUser 10003 rods rodsadmin tempZone>),\n (<iRODSGroup 10002 public>, <iRODSUser 10003 rods rodsadmin tempZone>),\n (<iRODSGroup 10002 public>, <iRODSUser 10048 alice rodsuser tempZone>),\n (<iRODSGroup 10045 collab>, <iRODSUser 13187 bobby rodsuser tempZone>),\n (<iRODSGroup 10002 public>, <iRODSUser 13187 bobby rodsuser tempZone>)]\n```\n\n(Note that in general queries, fields cannot be compared to each other,\nonly to literal constants; thus the '!=' comparison in the Python list\ncomprehension.)\n\nFrom the above, we can see that the group 'collab' (with user ID\n10045) contains users 'bobby'(13187) and 'alice'(10048) but not\n'rods'(10003), as the tuple (10045,10003) is not listed. Group\n'rodsadmin'(10001) contains user 'rods'(10003) but no other users;\nand group 'public'(10002) by default contains all canonical users\n(those whose User.type is 'rodsadmin' or 'rodsuser'). The empty\ngroup ('empty') has no users as members, so it doesn't show up in our\nfinal list.\n\nGroup Administrator Capabilities\n--------------------------------\n\nWith v1.1.7, PRC acquires the full range of abilities possessed by the\nigroupadmin command.\n\nFirstly, a groupadmin may invoke methods to create groups, and may add\nusers to, or remove them from, any group to which they themselves\nbelong:\n\n```python\n>>> session.groups.create('lab')\n>>> session.groups.addmember('lab',session.username)  # allow self to administer group\n>>> session.groups.addmember('lab','otheruser')\n>>> session.groups.removemember('lab','otheruser')\n```\n\nIn addition, a groupadmin may also create accounts for new users and\nenable their logins by initializing a native password for them:\n\n```python\n>>> session.users.create_with_password('alice', 'change_me')\n```\n\niRODS Permissions (ACLs)\n------------------------\n\nThe `iRODSAccess` class offers a convenient dictionary\ninterface mapping iRODS permission strings to the corresponding integer\ncodes:\n\n```python\n>>> from irods.access import iRODSAccess\n>>> iRODSAccess.keys()\n['null', 'read_metadata', 'read_object', 'create_metadata', 'modify_metadata', 'delete_metadata', 'create_object', 'modify_object', 'delete_object', 'own']\n>>> WRITE = iRODSAccess.to_int('modify_object')\n```\n\nArmed with that, we can then query on all data objects with ACLs that\nallow our user to write them:\n\n```python\n>>> from irods.models import (DataObject, User, DataAccess)\n>>> data_objects_writable = list(session.query(DataObject, User, DataAccess).filter(User.name == session.username,  DataAccess.type >= WRITE))\n```\n\nFinally, we can also access the list of permissions available through a\ngiven session object via the `available_permissions`\nproperty. Note that -- in keeping with changes in iRODS server 4.3 --\nthe permissions list will be longer, as appropriate, for session objects\nconnected to the more recent servers; and also that the embedded spaces\nin some 4.2 permission strings will be replaced by underscores in 4.3\nand later.\n\n```python\n>>> session.server_version\n(4, 2, 11)\n>>> session.available_permissions.items()\n[('null', 1000), ('read object', 1050), ('modify object', 1120), ('own', 1200)]\n```\n\nGetting and setting permissions\n-------------------------------\n\nWe can find the ID's of all the collections writable (ie having\n\"modify\" ACL) by, but not owned by, alice (or even alice\\#otherZone):\n\n```python\n>>> from irods.models import Collection,CollectionAccess,CollectionUser,User\n>>> from irods.column import Like\n>>> q = session.query (Collection,CollectionAccess).filter(\n...                                 CollectionUser.name == 'alice',  # User.zone == 'otherZone', # zone optional\n...                                 Like(CollectionAccess.name, 'modify%') ) #defaults to current zone\n```\n\nIf we then want to downgrade those permissions to read-only, we can do\nthe following:\n\n```python\n>>> from irods.access import iRODSAccess\n>>> for c in q:\n...     session.acls.set( iRODSAccess('read', c[Collection.name], 'alice', # 'otherZone' # zone optional\n...     ))\n```\n\nA call to `session.acls.get(c)` -- with `c`\nbeing the result of\n`sessions.collections.get(c[Collection.name])` -- would\nthen verify the desired change had taken place (as well as list all ACLs\nstored in the catalog for that collection).\n\nOne last note on permissions: The older access manager,\n`<session>.permissions`, produced inconsistent results when\nthe `get()` method was invoked with the parameter\n`report_raw_acls` set (or defaulting) to\n`False`. Specifically, collections would exhibit the\n\"non-raw-ACL\" behavior of reporting individual member users'\npermissions as a by-product of group ACLs, whereas data objects would\nnot.\n\nIn release v1.1.6, we moved to correct this inconsistency by introducing\nthe synonym `<session>.acls` that acts almost identically\nlike `<session>.permissions`, except that the\n`<session>.acls.get(...)` method does not accept the\n`report_raw_acls` parameter. When we need to detect users'\npermissions independent of their access to an object via group\nmembership, this can be achieved with another query.\n\n`<session>.permissions` was therefore removed in v2.0.0\nin favor of `<session>.acls`.\n\nQuotas (v2.0.0)\n---------------\n\nQuotas may be set for a group:\n\n```python\nsession.groups.set_quota('my_group', 50000, resource = 'my_limited_resource')\n```\n\nor per user, prior to iRODS 4.3.0:\n\n```python\nsession.users.set_quota('alice', 100000)\n```\n\n(The default for the resource parameter is \"total\", denoting a general\nquota usage not bound to a particular resource.)\n\nThe Quota model is also available for queries. So, to determine the\nspace remaining for a certain group on a given resource:\n\n```python\nfrom irods.models import Quota\nsession.groups.calculate_usage()\ngroup, resource = ['my_group', 'my_limited_resource']\nspace_left_in_bytes = list(session.query(Quota.over).filter(Quota.user_id == session.groups.get(group).id,\n                                                            Quota.resc_id == session.resources.get(resource).id))[0][Quota.over] * -1\n```\n\nAnd, to remove all quotas for a given group, one might (as a rodsadmin)\ndo the following:\n\n```python\nfrom irods.models import Resource, Quota\nresc_map = dict([(x[Resource.id],x[Resource.name]) for x in sess.query(Resource)] + [(0,'total')])\ngroup = sess.groups.get('my_group')\nfor quota in sess.query(Quota).filter(Quota.user_id == group.id):\n    sess.groups.remove_quota(group.name, resource = resc_map[quota.resc_id])\n```\n\nManaging users\n--------------\n\nYou can create a user in the current zone (with an optional auth_str):\n\n```python\n>>> session.users.create('user', 'rodsuser', 'MyZone', auth_str)\n```\n\nIf you want to create a user in a federated zone, use:\n\n```python\n>>> session.users.create('user', 'rodsuser', 'OtherZone', auth_str)\n```\n\nAnd more ...\n------------\n\nAdditional code samples are available in the [test\ndirectory](https://github.com/irods/python-irodsclient/tree/main/irods/test)\n\nTesting\n=======\n\nSetting up and running tests\n----------------------------\n\nThe Python iRODS Client comes with its own suite of tests. Some amount\nof setting up may be necessary first:\n\n1.  Use `iinit` to specify the iRODS client environment.\n    For best results, point the client at a server running on the local\n    host.\n2.  Install the python-irodsclient along with the\n    `unittest unittest_xml_reporting` module or the older\n    `xmlrunner` equivalent.\n    -   for PRC versions 1.1.1 and later:\n        -   `pip install ./path-to-python-irodsclient-repo[tests]`\n            (when using a local Git repo); or,\n        -   `pip install python-irodsclient[tests]'>=1.1.1'`\n            (when installing directly from PyPI).\n    -   earlier releases (\\<= 1.1.0) will install the outdated\n        `xmlrunner` module automatically\n3.  Follow further instructions in the [test\n    directory](https://github.com/irods/python-irodsclient/tree/main/irods/test)\n\nTesting S3 parallel transfer\n----------------------------\n\nSystem requirements:\n\n    - Ubuntu 18 user with Docker installed.\n    - Local instance of iRODS server running.\n    - Logged in sudo privileges.\n\nRun a MinIO service:\n\n```\n$ docker run -d -p 9000:9000 -p 9001:9001 minio/minio server /data --console-address \":9001\"\n```\n\nSet up a bucket `s3://irods` under MinIO:\n\n```\n$ pip install awscli\n\n$ aws configure\nAWS Access Key ID [None]: minioadmin\nAWS Secret Access Key [None]: minioadmin\nDefault region name [None]:\nDefault output format [None]:\n\n$ aws --endpoint-url http://127.0.0.1:9000 s3 mb s3://irods\n```\n\nSet up s3 credentials for the iRODS s3 storage resource:\n\n```\n$ sudo su - irods -c \"/bin/echo -e 'minioadmin\\nminioadmin' >/var/lib/irods/s3-credentials\"\n$ sudo chown 600 /var/lib/irods/s3-credentials\n```\n\nCreate the s3 storage resource:\n\n```\n$ sudo apt install irods-resource-plugin-s3\n```\n\nAs the 'irods' service account user:\n\n```\n$ iadmin mkresc s3resc s3 $(hostname):/irods/ \\\n  \"S3_DEFAULT_HOSTNAME=localhost:9000;\"\\\n  \"S3_AUTH_FILE=/var/lib/irods/s3-credentials;\"\\\n  \"S3_REGIONNAME=us-east-1;\"\\\n  \"S3_RETRY_COUNT=1;\"\\\n  \"S3_WAIT_TIME_SEC=3;\"\\\n  \"S3_PROTO=HTTP;\"\\\n  \"ARCHIVE_NAMING_POLICY=consistent;\"\\\n  \"HOST_MODE=cacheless_attached\"\n\n$ dd if=/dev/urandom of=largefile count=40k bs=1k # create 40-megabyte test file\n\n$ pip install 'python-irodsclient>=1.1.2'\n\n$ python -c\"from irods.test.helpers import make_session\n            import irods.keywords as kw\n            with make_session() as sess:\n                sess.data_objects.put( 'largefile',\n                                       '/tempZone/home/rods/largeFile1',\n                                       **{kw.DEST_RESC_NAME_KW:'s3resc'} )\n                sess.data_objects.get( '/tempZone/home/rods/largeFile1',\n                                       '/tmp/largefile')\n```\n\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/irods/python-irodsclient","keywords":"irods","license":"BSD","maintainer":null,"maintainer_email":null,"name":"python-irodsclient","package_url":"https://pypi.org/project/python-irodsclient/","platform":null,"project_url":"https://pypi.org/project/python-irodsclient/","project_urls":{"Homepage":"https://github.com/irods/python-irodsclient"},"provides_extra":null,"release_url":"https://pypi.org/project/python-irodsclient/2.0.1/","requires_dist":["PrettyTable>=0.7.2","defusedxml","six>=1.10.0","futures; python_version == \"2.7\"","unittest-xml-reporting; extra == \"tests\""],"requires_python":null,"summary":"A python API for iRODS","version":"2.0.1","yanked":false,"yanked_reason":null},"last_serial":23006662,"releases":{"0.3.1":[{"comment_text":"","digests":{"blake2b_256":"5d467e94adb496fee3990696b31795bee49c1d81e70bd8edc17984a4a61907c2","md5":"0c9deb13e498730e23190f3fa90ef60a","sha256":"0963101b7c7d34e1d1026888c92ee0aaf26cdc7704f066a26c59c4f62b0c0580"},"downloads":-1,"filename":"python_irodsclient-0.3.1-py2-none-any.whl","has_sig":false,"md5_digest":"0c9deb13e498730e23190f3fa90ef60a","packagetype":"bdist_wheel","python_version":"py2","requires_python":null,"size":26603,"upload_time":"2014-09-17T19:46:30","upload_time_iso_8601":"2014-09-17T19:46:30.734700Z","url":"https://files.pythonhosted.org/packages/5d/46/7e94adb496fee3990696b31795bee49c1d81e70bd8edc17984a4a61907c2/python_irodsclient-0.3.1-py2-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"2ed63788211e9f93a593bb3e1882fc903758a93a1d97c9cb9a5a20a3154f2510","md5":"bdc0e9017a9860d24aba89479d1a3168","sha256":"12d88e08f66bab8ccdaa9744b69f8a879c21fe640cac7fe0bcb9521151caacd5"},"downloads":-1,"filename":"python-irodsclient-0.3.1.tar.gz","has_sig":false,"md5_digest":"bdc0e9017a9860d24aba89479d1a3168","packagetype":"sdist","python_version":"source","requires_python":null,"size":22964,"upload_time":"2014-09-17T19:46:33","upload_time_iso_8601":"2014-09-17T19:46:33.792140Z","url":"https://files.pythonhosted.org/packages/2e/d6/3788211e9f93a593bb3e1882fc903758a93a1d97c9cb9a5a20a3154f2510/python-irodsclient-0.3.1.tar.gz","yanked":false,"yanked_reason":null}],"0.4.0":[{"comment_text":"","digests":{"blake2b_256":"5d11f2944c3f907d188ec2221930f4afc7bb0077e023ef60b0899d6a3f578bd4","md5":"32dcf9b4e25266258b5bd4c5cc9e33e9","sha256":"c349ab40d94e44534a332504b8224a783ecf8d0a8bb390ffffb304f4ebacb7c0"},"downloads":-1,"filename":"python_irodsclient-0.4.0-py2-none-any.whl","has_sig":false,"md5_digest":"32dcf9b4e25266258b5bd4c5cc9e33e9","packagetype":"bdist_wheel","python_version":"py2","requires_python":null,"size":34719,"upload_time":"2014-09-17T20:44:16","upload_time_iso_8601":"2014-09-17T20:44:16.324202Z","url":"https://files.pythonhosted.org/packages/5d/11/f2944c3f907d188ec2221930f4afc7bb0077e023ef60b0899d6a3f578bd4/python_irodsclient-0.4.0-py2-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"cd5a28c9488e53f0cfcac4cc61d9d7a4f1d602040e92f8016e6ba628c6f7848e","md5":"55db8bfd332767de43cfcec13fc448e8","sha256":"dca5184f65580769a7b15f3ee8a42761e1a14d0ef2aeb778de9a2d7801f05706"},"downloads":-1,"filename":"python-irodsclient-0.4.0.tar.gz","has_sig":false,"md5_digest":"55db8bfd332767de43cfcec13fc448e8","packagetype":"sdist","python_version":"source","requires_python":null,"size":27477,"upload_time":"2014-09-17T20:44:18","upload_time_iso_8601":"2014-09-17T20:44:18.547789Z","url":"https://files.pythonhosted.org/packages/cd/5a/28c9488e53f0cfcac4cc61d9d7a4f1d602040e92f8016e6ba628c6f7848e/python-irodsclient-0.4.0.tar.gz","yanked":false,"yanked_reason":null}],"0.5.0rc1":[{"comment_text":"","digests":{"blake2b_256":"3cf9a1851903f9a8a54558bb9bc172dcb796e175a01fd62cfc2fdce2f8222952","md5":"90ece29fe5e79da61b5280e0dd802a5f","sha256":"20494846b0dc620637d2ea633e58847c6688e29aca8fdf7ef2cf05baf06e3f6a"},"downloads":-1,"filename":"python_irodsclient-0.5.0rc1-py2-none-any.whl","has_sig":false,"md5_digest":"90ece29fe5e79da61b5280e0dd802a5f","packagetype":"bdist_wheel","python_version":"py2","requires_python":null,"size":58211,"upload_time":"2016-08-15T16:05:12","upload_time_iso_8601":"2016-08-15T16:05:12.098804Z","url":"https://files.pythonhosted.org/packages/3c/f9/a1851903f9a8a54558bb9bc172dcb796e175a01fd62cfc2fdce2f8222952/python_irodsclient-0.5.0rc1-py2-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"2b3e331cef12394445537f9e4ccb271b20d9e6f852494f0080aae231dd5fe53e","md5":"6a0abeadd674bab050730b06aaaf2fef","sha256":"5eb62fe0df23226cab6842af093a284791e5f599de01535d32ede8fd90d802f4"},"downloads":-1,"filename":"python-irodsclient-0.5.0rc1.tar.gz","has_sig":false,"md5_digest":"6a0abeadd674bab050730b06aaaf2fef","packagetype":"sdist","python_version":"source","requires_python":null,"size":43489,"upload_time":"2016-08-15T16:05:19","upload_time_iso_8601":"2016-08-15T16:05:19.041884Z","url":"https://files.pythonhosted.org/packages/2b/3e/331cef12394445537f9e4ccb271b20d9e6f852494f0080aae231dd5fe53e/python-irodsclient-0.5.0rc1.tar.gz","yanked":false,"yanked_reason":null}],"0.6.0":[{"comment_text":"","digests":{"blake2b_256":"6add8863d5a98ec5d96629fc6779832dbd5f383fdf589fd3332be519ca94b287","md5":"d297ebd69fd8a7a6e664a3067dac420a","sha256":"042a1df5953a33e4bc0ff720f54333e0513c10006f39e1e8c8718a4c6c916e03"},"downloads":-1,"filename":"python_irodsclient-0.6.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"d297ebd69fd8a7a6e664a3067dac420a","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":83182,"upload_time":"2017-06-01T15:10:37","upload_time_iso_8601":"2017-06-01T15:10:37.568319Z","url":"https://files.pythonhosted.org/packages/6a/dd/8863d5a98ec5d96629fc6779832dbd5f383fdf589fd3332be519ca94b287/python_irodsclient-0.6.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"6eac7c35555b3cbb1662efe765ba33ec0d521bda700deac9b4fe35da4de3b904","md5":"33c47871017ba96c379f7f1e68fc74b7","sha256":"ca4fb5c390744420d2265043796a8fbb5f9ca1e3ac2c19e13e3072fc52161daf"},"downloads":-1,"filename":"python-irodsclient-0.6.0.tar.gz","has_sig":false,"md5_digest":"33c47871017ba96c379f7f1e68fc74b7","packagetype":"sdist","python_version":"source","requires_python":null,"size":70944,"upload_time":"2017-06-01T15:10:39","upload_time_iso_8601":"2017-06-01T15:10:39.320563Z","url":"https://files.pythonhosted.org/packages/6e/ac/7c35555b3cbb1662efe765ba33ec0d521bda700deac9b4fe35da4de3b904/python-irodsclient-0.6.0.tar.gz","yanked":false,"yanked_reason":null}],"0.7.0":[{"comment_text":"","digests":{"blake2b_256":"ccb39c6e9a66aba187699246f143880f8be35f5e9368d44a022a0cb88c54919b","md5":"ad8ff4a2e1004e9856114b17dead2ad7","sha256":"5e43a28c23223f5c37669f24dfb042adf7a078d0f92b48d2d04f13325d5f311b"},"downloads":-1,"filename":"python_irodsclient-0.7.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"ad8ff4a2e1004e9856114b17dead2ad7","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":91863,"upload_time":"2017-12-15T16:53:16","upload_time_iso_8601":"2017-12-15T16:53:16.094215Z","url":"https://files.pythonhosted.org/packages/cc/b3/9c6e9a66aba187699246f143880f8be35f5e9368d44a022a0cb88c54919b/python_irodsclient-0.7.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"be0ff9226ef5da51d7939e2e90bf2c3ff694700b5643d683d50c7f7c211bd052","md5":"65dc092f82810cd61122fa0dfa027cda","sha256":"81dd6718722c357b37dfd197f6d7b51f40adc52048dd2adfc9b53846c1f1a39c"},"downloads":-1,"filename":"python-irodsclient-0.7.0.tar.gz","has_sig":false,"md5_digest":"65dc092f82810cd61122fa0dfa027cda","packagetype":"sdist","python_version":"source","requires_python":null,"size":80045,"upload_time":"2017-12-15T16:53:17","upload_time_iso_8601":"2017-12-15T16:53:17.549768Z","url":"https://files.pythonhosted.org/packages/be/0f/f9226ef5da51d7939e2e90bf2c3ff694700b5643d683d50c7f7c211bd052/python-irodsclient-0.7.0.tar.gz","yanked":false,"yanked_reason":null}],"0.7.0rc1":[{"comment_text":"","digests":{"blake2b_256":"2a5858a1d21fbcae234bd51368600cf5ce9ef56c4e5d358d927b41f9e1e78d0d","md5":"961a3aade4c78d11ae7d1553b29bbeec","sha256":"1044b22cfe32de51365bd5435ce261cdfb144fb5718bf86314b0d87f3e9a2ac9"},"downloads":-1,"filename":"python_irodsclient-0.7.0rc1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"961a3aade4c78d11ae7d1553b29bbeec","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":91867,"upload_time":"2017-12-07T16:05:48","upload_time_iso_8601":"2017-12-07T16:05:48.025815Z","url":"https://files.pythonhosted.org/packages/2a/58/58a1d21fbcae234bd51368600cf5ce9ef56c4e5d358d927b41f9e1e78d0d/python_irodsclient-0.7.0rc1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c662498789c81b2ca231d0bb4f943749ae4f247cb872ac1412c42827e907b96c","md5":"ccfba7e5a24a1627188fe747ece4f102","sha256":"9e865f0b56aceda36809c158c11bfa479af1622f25e0e09eeebdc5bbf54e216b"},"downloads":-1,"filename":"python-irodsclient-0.7.0rc1.tar.gz","has_sig":false,"md5_digest":"ccfba7e5a24a1627188fe747ece4f102","packagetype":"sdist","python_version":"source","requires_python":null,"size":79950,"upload_time":"2017-12-07T16:05:50","upload_time_iso_8601":"2017-12-07T16:05:50.342870Z","url":"https://files.pythonhosted.org/packages/c6/62/498789c81b2ca231d0bb4f943749ae4f247cb872ac1412c42827e907b96c/python-irodsclient-0.7.0rc1.tar.gz","yanked":false,"yanked_reason":null}],"0.7.0rc2":[{"comment_text":"","digests":{"blake2b_256":"8d531e69b848b50d90cafc9a2fc2f9db35d97cef3a20571e8fadbd9a3b538802","md5":"dfa1e0a37fa4403ed33a7577dd260cb7","sha256":"52a6226071d160f96f8c3f0337d8fa972f170ca816574b0e948435cf49cf3c8d"},"downloads":-1,"filename":"python_irodsclient-0.7.0rc2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"dfa1e0a37fa4403ed33a7577dd260cb7","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":91910,"upload_time":"2017-12-08T21:24:05","upload_time_iso_8601":"2017-12-08T21:24:05.175234Z","url":"https://files.pythonhosted.org/packages/8d/53/1e69b848b50d90cafc9a2fc2f9db35d97cef3a20571e8fadbd9a3b538802/python_irodsclient-0.7.0rc2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"89d4a9ed96911d2b848bab1f1ca9f78df19027e95f48e21ccadc447790650d7d","md5":"a51ef649b9d90f940395e25f8d3645c9","sha256":"88ed1574230b504b919caa5077923dca19707e0822cd497a99c1567011e3ba54"},"downloads":-1,"filename":"python-irodsclient-0.7.0rc2.tar.gz","has_sig":false,"md5_digest":"a51ef649b9d90f940395e25f8d3645c9","packagetype":"sdist","python_version":"source","requires_python":null,"size":80043,"upload_time":"2017-12-08T21:24:06","upload_time_iso_8601":"2017-12-08T21:24:06.515778Z","url":"https://files.pythonhosted.org/packages/89/d4/a9ed96911d2b848bab1f1ca9f78df19027e95f48e21ccadc447790650d7d/python-irodsclient-0.7.0rc2.tar.gz","yanked":false,"yanked_reason":null}],"0.8.0":[{"comment_text":"","digests":{"blake2b_256":"b9d91a0e85b6962be65aff904b88001c38d1cc12be61e7f75ae32955467defd3","md5":"b371724391052014ddc36aa033742f8a","sha256":"ecd6dd2a6b08ee469538412d52bb70211c32c3553c4c309e93ad3af2f4786e8a"},"downloads":-1,"filename":"python_irodsclient-0.8.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"b371724391052014ddc36aa033742f8a","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":90476,"upload_time":"2018-05-03T16:54:46","upload_time_iso_8601":"2018-05-03T16:54:46.202301Z","url":"https://files.pythonhosted.org/packages/b9/d9/1a0e85b6962be65aff904b88001c38d1cc12be61e7f75ae32955467defd3/python_irodsclient-0.8.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3453bff0d6a5d66229946a85cb66cef801caa546343ca306f87bb08847434b64","md5":"8afe3398dd18c20a99b87d7324cb92bb","sha256":"84939b2a2427a68d837c01fbbde20608d0be2d74679f7d1458e911fed80e197e"},"downloads":-1,"filename":"python-irodsclient-0.8.0.tar.gz","has_sig":false,"md5_digest":"8afe3398dd18c20a99b87d7324cb92bb","packagetype":"sdist","python_version":"source","requires_python":null,"size":82846,"upload_time":"2018-05-03T16:54:47","upload_time_iso_8601":"2018-05-03T16:54:47.626104Z","url":"https://files.pythonhosted.org/packages/34/53/bff0d6a5d66229946a85cb66cef801caa546343ca306f87bb08847434b64/python-irodsclient-0.8.0.tar.gz","yanked":false,"yanked_reason":null}],"0.8.1":[{"comment_text":"","digests":{"blake2b_256":"036f3b0950c9ab26a1d05e357b7be2e45795d105f9a0b3af538aa6155a36c13b","md5":"347b07fa53b8fef2e4a6d3cbde20380a","sha256":"509b2e22e5d1a552ae3d59d519b6ddf8544ee5280051990fe44b2e6d41d7650f"},"downloads":-1,"filename":"python_irodsclient-0.8.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"347b07fa53b8fef2e4a6d3cbde20380a","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":90605,"upload_time":"2018-09-27T03:30:43","upload_time_iso_8601":"2018-09-27T03:30:43.180565Z","url":"https://files.pythonhosted.org/packages/03/6f/3b0950c9ab26a1d05e357b7be2e45795d105f9a0b3af538aa6155a36c13b/python_irodsclient-0.8.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"85c865fad8d793913f20b9e6282e661f0bffd8aac9b9b14680e349e46938becd","md5":"bf8c9a20e36be3151efa4b0820266750","sha256":"6e73d49970b263c988917af681780a2e795a51a59379d278cc8c30fb071f2685"},"downloads":-1,"filename":"python-irodsclient-0.8.1.tar.gz","has_sig":false,"md5_digest":"bf8c9a20e36be3151efa4b0820266750","packagetype":"sdist","python_version":"source","requires_python":null,"size":83293,"upload_time":"2018-09-27T03:30:45","upload_time_iso_8601":"2018-09-27T03:30:45.262856Z","url":"https://files.pythonhosted.org/packages/85/c8/65fad8d793913f20b9e6282e661f0bffd8aac9b9b14680e349e46938becd/python-irodsclient-0.8.1.tar.gz","yanked":false,"yanked_reason":null}],"0.8.2":[{"comment_text":"","digests":{"blake2b_256":"80025abc8dba9c1654e3a53ac9cda288c5d580bbdcf5cd62e1493314e75661b4","md5":"d816d257c363a76e69053d2df4776f72","sha256":"69e1e3f19e29a6554c517753c04e48c0d4725281c9a03dad9b7c749129b8834f"},"downloads":-1,"filename":"python_irodsclient-0.8.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"d816d257c363a76e69053d2df4776f72","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":97020,"upload_time":"2019-11-13T14:54:41","upload_time_iso_8601":"2019-11-13T14:54:41.268791Z","url":"https://files.pythonhosted.org/packages/80/02/5abc8dba9c1654e3a53ac9cda288c5d580bbdcf5cd62e1493314e75661b4/python_irodsclient-0.8.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"a572f5df7de08df20e94130280dc8b8bad2f65c1047c792ed47c09bda48e2ae9","md5":"6ee6ad5fb537c51912442044b4e8acb7","sha256":"e77c345bea028c748047656f35f576210528b1332087b5f0a7e2ddd179301447"},"downloads":-1,"filename":"python-irodsclient-0.8.2.tar.gz","has_sig":false,"md5_digest":"6ee6ad5fb537c51912442044b4e8acb7","packagetype":"sdist","python_version":"source","requires_python":null,"size":88484,"upload_time":"2019-11-13T14:54:43","upload_time_iso_8601":"2019-11-13T14:54:43.156511Z","url":"https://files.pythonhosted.org/packages/a5/72/f5df7de08df20e94130280dc8b8bad2f65c1047c792ed47c09bda48e2ae9/python-irodsclient-0.8.2.tar.gz","yanked":false,"yanked_reason":null}],"0.8.3":[{"comment_text":"","digests":{"blake2b_256":"fd2734bcd60821ae64f83162cbb4150d68c85bb0403ef2f8682141465d79a490","md5":"9ee839d24b2c84142e55caddc018d053","sha256":"0dafb23efcf824bcab9f213b3ebf9ab9eaf9c409057f040ae8743928a01e2a3a"},"downloads":-1,"filename":"python_irodsclient-0.8.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"9ee839d24b2c84142e55caddc018d053","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":103871,"upload_time":"2020-06-05T03:32:27","upload_time_iso_8601":"2020-06-05T03:32:27.121878Z","url":"https://files.pythonhosted.org/packages/fd/27/34bcd60821ae64f83162cbb4150d68c85bb0403ef2f8682141465d79a490/python_irodsclient-0.8.3-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"85bee56cf2789fb205591325ef59ba96e393db9937d045e34e054d27585fa042","md5":"6486b52a3b70534a0744e74b8688d31e","sha256":"5afb6105e4ed01ac40cc8c418d754d2058e1308ae90549fcde13a09d0fd27952"},"downloads":-1,"filename":"python-irodsclient-0.8.3.tar.gz","has_sig":false,"md5_digest":"6486b52a3b70534a0744e74b8688d31e","packagetype":"sdist","python_version":"source","requires_python":null,"size":103918,"upload_time":"2020-06-05T03:32:28","upload_time_iso_8601":"2020-06-05T03:32:28.659329Z","url":"https://files.pythonhosted.org/packages/85/be/e56cf2789fb205591325ef59ba96e393db9937d045e34e054d27585fa042/python-irodsclient-0.8.3.tar.gz","yanked":false,"yanked_reason":null}],"0.8.4":[{"comment_text":"","digests":{"blake2b_256":"8da2bf0bac08d9438549816b5efecfbc9f499dd10db86615b195eab3ac729ae9","md5":"7af0c34e4ca1f95f2cd83679d8168ae6","sha256":"00445b43f7f052a17009886988e32d06e7c61842f0c90b5b4d1d1116c32e46f2"},"downloads":-1,"filename":"python_irodsclient-0.8.4-py2.py3-none-any.whl","has_sig":false,"md5_digest":"7af0c34e4ca1f95f2cd83679d8168ae6","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":112974,"upload_time":"2020-10-19T20:27:23","upload_time_iso_8601":"2020-10-19T20:27:23.306502Z","url":"https://files.pythonhosted.org/packages/8d/a2/bf0bac08d9438549816b5efecfbc9f499dd10db86615b195eab3ac729ae9/python_irodsclient-0.8.4-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e82f2c8308aaabea44dbbe65f471daadac18786bc8737863ddae2fcf0c68eded","md5":"3370da610b8f7e3c5719b82cc99437a2","sha256":"dbb5e829753af126a020bcc8069fe851511f3eda2796204d32bb5e3521316393"},"downloads":-1,"filename":"python-irodsclient-0.8.4.tar.gz","has_sig":false,"md5_digest":"3370da610b8f7e3c5719b82cc99437a2","packagetype":"sdist","python_version":"source","requires_python":null,"size":112382,"upload_time":"2020-10-19T20:27:25","upload_time_iso_8601":"2020-10-19T20:27:25.090782Z","url":"https://files.pythonhosted.org/packages/e8/2f/2c8308aaabea44dbbe65f471daadac18786bc8737863ddae2fcf0c68eded/python-irodsclient-0.8.4.tar.gz","yanked":false,"yanked_reason":null}],"0.8.5":[{"comment_text":"","digests":{"blake2b_256":"456068be54f22f59aa51b052be468a18b48d7faed6290514c91690709576dbbd","md5":"fea692a1ee5fcb737249a8cb1a9bb1b4","sha256":"974c57b46f99281787844f9e4824534c460fcaad1eb2fa1b01adbb9ecc2d6897"},"downloads":-1,"filename":"python_irodsclient-0.8.5-py2.py3-none-any.whl","has_sig":false,"md5_digest":"fea692a1ee5fcb737249a8cb1a9bb1b4","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":113179,"upload_time":"2020-11-10T20:29:12","upload_time_iso_8601":"2020-11-10T20:29:12.006468Z","url":"https://files.pythonhosted.org/packages/45/60/68be54f22f59aa51b052be468a18b48d7faed6290514c91690709576dbbd/python_irodsclient-0.8.5-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"b0a64bb0941a91f2aaba4a1d08ff185ecc37aba28dec6b3ca18d1788ca40313c","md5":"9b6f26204e1a72c060daed8da37be64f","sha256":"e42d1ffe846389cdf4a80adb7cd700f3f28f20751b5df8aa2986759036010e0e"},"downloads":-1,"filename":"python-irodsclient-0.8.5.tar.gz","has_sig":false,"md5_digest":"9b6f26204e1a72c060daed8da37be64f","packagetype":"sdist","python_version":"source","requires_python":null,"size":112629,"upload_time":"2020-11-10T20:29:13","upload_time_iso_8601":"2020-11-10T20:29:13.571963Z","url":"https://files.pythonhosted.org/packages/b0/a6/4bb0941a91f2aaba4a1d08ff185ecc37aba28dec6b3ca18d1788ca40313c/python-irodsclient-0.8.5.tar.gz","yanked":false,"yanked_reason":null}],"0.8.6":[{"comment_text":"","digests":{"blake2b_256":"90b0498508e150769f9a014b19cebc941366541adc7cc4548002498672b5134e","md5":"5d9b4dd216f1808d3275ecfe7281b2af","sha256":"24e87eb04ce422b01a3f0e0bab2c116ef9d99e6fe643a8ad9bdde67927806876"},"downloads":-1,"filename":"python_irodsclient-0.8.6-py2.py3-none-any.whl","has_sig":false,"md5_digest":"5d9b4dd216f1808d3275ecfe7281b2af","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":119294,"upload_time":"2021-01-23T02:50:14","upload_time_iso_8601":"2021-01-23T02:50:14.964425Z","url":"https://files.pythonhosted.org/packages/90/b0/498508e150769f9a014b19cebc941366541adc7cc4548002498672b5134e/python_irodsclient-0.8.6-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e080f67b11f559e6c39c67cf0b7c6fcc8e8d4603b3e22740ffa147548ef7ee98","md5":"200fed40d0f4d29c626d3398c291a545","sha256":"9a9ea40fdfc92902d9b79eb85f2eb89e7848d21500e1f3ee8246563a121f07c0"},"downloads":-1,"filename":"python-irodsclient-0.8.6.tar.gz","has_sig":false,"md5_digest":"200fed40d0f4d29c626d3398c291a545","packagetype":"sdist","python_version":"source","requires_python":null,"size":122226,"upload_time":"2021-01-23T02:50:16","upload_time_iso_8601":"2021-01-23T02:50:16.663483Z","url":"https://files.pythonhosted.org/packages/e0/80/f67b11f559e6c39c67cf0b7c6fcc8e8d4603b3e22740ffa147548ef7ee98/python-irodsclient-0.8.6.tar.gz","yanked":false,"yanked_reason":null}],"0.9.0":[{"comment_text":"","digests":{"blake2b_256":"224bb777137b6cdd20ea5182f85e4d6a263cfd40c981e5157c16d4ce1e915761","md5":"22b9db8de30d09be001f3ce179edab0c","sha256":"a44440ff68c7b901c5db8cf560959a253cedb089e4c9fa90dd20c2bb530511d6"},"downloads":-1,"filename":"python_irodsclient-0.9.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"22b9db8de30d09be001f3ce179edab0c","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":138307,"upload_time":"2021-05-15T01:49:57","upload_time_iso_8601":"2021-05-15T01:49:57.089697Z","url":"https://files.pythonhosted.org/packages/22/4b/b777137b6cdd20ea5182f85e4d6a263cfd40c981e5157c16d4ce1e915761/python_irodsclient-0.9.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"e334ee6871a58ef21d36f88fab72f3bec4cee13b6d2f42b91c386f782348a983","md5":"3d1a6170f5a0a81116c0fc0278478a68","sha256":"57fa9454f2d3deca24ed463a4abee8f29b68f65b0068e8351276a059b687cdaf"},"downloads":-1,"filename":"python-irodsclient-0.9.0.tar.gz","has_sig":false,"md5_digest":"3d1a6170f5a0a81116c0fc0278478a68","packagetype":"sdist","python_version":"source","requires_python":null,"size":141305,"upload_time":"2021-05-15T01:49:58","upload_time_iso_8601":"2021-05-15T01:49:58.478787Z","url":"https://files.pythonhosted.org/packages/e3/34/ee6871a58ef21d36f88fab72f3bec4cee13b6d2f42b91c386f782348a983/python-irodsclient-0.9.0.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0":[{"comment_text":"","digests":{"blake2b_256":"cdb51212e29439634378e810ad5e9ba5202862aba038624f8bc679217ce01923","md5":"2c5b60c2868dffddf7f87653511fac6b","sha256":"9e2c727232857645ee8cd9175aa304793a32644a7748c79e0229dd33d787864a"},"downloads":-1,"filename":"python_irodsclient-1.0.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"2c5b60c2868dffddf7f87653511fac6b","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":138704,"upload_time":"2021-06-03T02:36:03","upload_time_iso_8601":"2021-06-03T02:36:03.753551Z","url":"https://files.pythonhosted.org/packages/cd/b5/1212e29439634378e810ad5e9ba5202862aba038624f8bc679217ce01923/python_irodsclient-1.0.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1dd78e3032b5bb03635b21f740d5281f2834a02fafc61022b16aa3e9b6a15631","md5":"f1ae0fb1fc78f1f6b9ac27e0f46039d4","sha256":"95e5cb270f5a28a14afde5030684db17fb04678a07a36aeed09e5a365d96b1d5"},"downloads":-1,"filename":"python-irodsclient-1.0.0.tar.gz","has_sig":false,"md5_digest":"f1ae0fb1fc78f1f6b9ac27e0f46039d4","packagetype":"sdist","python_version":"source","requires_python":null,"size":142315,"upload_time":"2021-06-03T02:36:05","upload_time_iso_8601":"2021-06-03T02:36:05.634831Z","url":"https://files.pythonhosted.org/packages/1d/d7/8e3032b5bb03635b21f740d5281f2834a02fafc61022b16aa3e9b6a15631/python-irodsclient-1.0.0.tar.gz","yanked":false,"yanked_reason":null}],"1.1.0":[{"comment_text":"","digests":{"blake2b_256":"b2fd521571e216cdc5110fd34b69583a866f75e2f3c353dbd4d449820941ce19","md5":"1604eb710f549fa433ee46d401f1bbeb","sha256":"1ea1f6b6b5aa78768be5caf6393ce834c5ab3bec372fefd1f66abe2a7eb1e89c"},"downloads":-1,"filename":"python_irodsclient-1.1.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"1604eb710f549fa433ee46d401f1bbeb","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":164856,"upload_time":"2022-01-20T21:36:06","upload_time_iso_8601":"2022-01-20T21:36:06.701392Z","url":"https://files.pythonhosted.org/packages/b2/fd/521571e216cdc5110fd34b69583a866f75e2f3c353dbd4d449820941ce19/python_irodsclient-1.1.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"95c235751377f776ab9e0c1c2f39bc6d5e07d3bb9723700ea3451c562639cf00","md5":"22fa27291d302027086fcf07dd23a690","sha256":"d360e9030111d4fea5ee9ce760f66f5efe36b855594c5d3d36cf395d900320d3"},"downloads":-1,"filename":"python-irodsclient-1.1.0.tar.gz","has_sig":false,"md5_digest":"22fa27291d302027086fcf07dd23a690","packagetype":"sdist","python_version":"source","requires_python":null,"size":176592,"upload_time":"2022-01-20T21:36:08","upload_time_iso_8601":"2022-01-20T21:36:08.794177Z","url":"https://files.pythonhosted.org/packages/95/c2/35751377f776ab9e0c1c2f39bc6d5e07d3bb9723700ea3451c562639cf00/python-irodsclient-1.1.0.tar.gz","yanked":false,"yanked_reason":null}],"1.1.1":[{"comment_text":"","digests":{"blake2b_256":"ca20f5e3669579d605ff7e6205d078b080c62d720e250d38c22c037d080cbdf2","md5":"210f0b97b3a0ab45648f808090d0b3ab","sha256":"a7f45738ee870defe141b39c0474b76e2ff1b3b459e537276d36a077595073e4"},"downloads":-1,"filename":"python_irodsclient-1.1.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"210f0b97b3a0ab45648f808090d0b3ab","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":166403,"upload_time":"2022-01-31T15:29:49","upload_time_iso_8601":"2022-01-31T15:29:49.438222Z","url":"https://files.pythonhosted.org/packages/ca/20/f5e3669579d605ff7e6205d078b080c62d720e250d38c22c037d080cbdf2/python_irodsclient-1.1.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"4b8cace8443ae596d68243e319808b1985d457b9c8f3efe3b6a11511b57a2cb7","md5":"def886ae5390c8ffbb47d74c12569fcb","sha256":"dfaefec134f4784eff8ed8a66494e65ea1d742639bf9dca667aab8c48e1fcf92"},"downloads":-1,"filename":"python-irodsclient-1.1.1.tar.gz","has_sig":false,"md5_digest":"def886ae5390c8ffbb47d74c12569fcb","packagetype":"sdist","python_version":"source","requires_python":null,"size":179095,"upload_time":"2022-01-31T15:29:51","upload_time_iso_8601":"2022-01-31T15:29:51.612180Z","url":"https://files.pythonhosted.org/packages/4b/8c/ace8443ae596d68243e319808b1985d457b9c8f3efe3b6a11511b57a2cb7/python-irodsclient-1.1.1.tar.gz","yanked":false,"yanked_reason":null}],"1.1.2":[{"comment_text":"","digests":{"blake2b_256":"8838fe3100e2ccfb5d3aab52863ba6d43354d2ebc13e203d75bde8949f7ab3e0","md5":"f12f8c9e203ea3cbed1fac79adfa30a0","sha256":"beb5e43db1dc662fd4c906189abe6db94e72e14a6cb95445c4e1d17453b0e22f"},"downloads":-1,"filename":"python_irodsclient-1.1.2-py2.py3-none-any.whl","has_sig":false,"md5_digest":"f12f8c9e203ea3cbed1fac79adfa30a0","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":177124,"upload_time":"2022-03-16T02:11:24","upload_time_iso_8601":"2022-03-16T02:11:24.643028Z","url":"https://files.pythonhosted.org/packages/88/38/fe3100e2ccfb5d3aab52863ba6d43354d2ebc13e203d75bde8949f7ab3e0/python_irodsclient-1.1.2-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"275e2ac0af9c613ced30e301ee171de323e2db85fdea1de927acfa07b2067150","md5":"dc73da477a5151779cb485b26b6265df","sha256":"82a604a6576876df8417c049ba676df81a1d435a0895c25385d37549a303b7e7"},"downloads":-1,"filename":"python-irodsclient-1.1.2.tar.gz","has_sig":false,"md5_digest":"dc73da477a5151779cb485b26b6265df","packagetype":"sdist","python_version":"source","requires_python":null,"size":192327,"upload_time":"2022-03-16T02:11:26","upload_time_iso_8601":"2022-03-16T02:11:26.946369Z","url":"https://files.pythonhosted.org/packages/27/5e/2ac0af9c613ced30e301ee171de323e2db85fdea1de927acfa07b2067150/python-irodsclient-1.1.2.tar.gz","yanked":false,"yanked_reason":null}],"1.1.3":[{"comment_text":"","digests":{"blake2b_256":"70746d9e9fb9e59cead45a32eb702d8492aa19d0dcf3d89573b5cb8393e22882","md5":"b013c149d411bdc479f4414494e805e5","sha256":"c093d4dd3f980a78145f6c882acc0cd296fbce110d9f0c7f42852d624e3385fe"},"downloads":-1,"filename":"python_irodsclient-1.1.3-py2.py3-none-any.whl","has_sig":false,"md5_digest":"b013c149d411bdc479f4414494e805e5","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":177080,"upload_time":"2022-04-08T02:42:51","upload_time_iso_8601":"2022-04-08T02:42:51.652953Z","url":"https://files.pythonhosted.org/packages/70/74/6d9e9fb9e59cead45a32eb702d8492aa19d0dcf3d89573b5cb8393e22882/python_irodsclient-1.1.3-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"41c8e78c6abe20b67ee656bb532585beb69343077fc7096742d2a8873ce8aff2","md5":"50f8cecf36cd37e6cafb9fe449c702e2","sha256":"db1d58c3b2be8ebd970d966a7ed5d3ef2788937da6462ee40e3f243ed1b31fae"},"downloads":-1,"filename":"python-irodsclient-1.1.3.tar.gz","has_sig":false,"md5_digest":"50f8cecf36cd37e6cafb9fe449c702e2","packagetype":"sdist","python_version":"source","requires_python":null,"size":192332,"upload_time":"2022-04-08T02:42:53","upload_time_iso_8601":"2022-04-08T02:42:53.379666Z","url":"https://files.pythonhosted.org/packages/41/c8/e78c6abe20b67ee656bb532585beb69343077fc7096742d2a8873ce8aff2/python-irodsclient-1.1.3.tar.gz","yanked":false,"yanked_reason":null}],"1.1.4":[{"comment_text":"","digests":{"blake2b_256":"3f6c4c845b797d13773fa98ca2267b5c050d447c57d47ad24e2c1c03f5f8f671","md5":"f052776f35b6e9c5c00cac19a09bc70b","sha256":"6f6a9f75608ccbd71eb1756b7e6b42e0ba6c71ebc7aa3a19a69c71be016fe82a"},"downloads":-1,"filename":"python_irodsclient-1.1.4-py2.py3-none-any.whl","has_sig":false,"md5_digest":"f052776f35b6e9c5c00cac19a09bc70b","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":179472,"upload_time":"2022-06-29T20:43:38","upload_time_iso_8601":"2022-06-29T20:43:38.159978Z","url":"https://files.pythonhosted.org/packages/3f/6c/4c845b797d13773fa98ca2267b5c050d447c57d47ad24e2c1c03f5f8f671/python_irodsclient-1.1.4-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"1055d2935350f0f024536de313d2937a72d06986bbd8da0bce6d50dedb74832a","md5":"f8b823b204ad6e8cb98f448e26b0da60","sha256":"f427699739911042dc35a7fbd92f7ba87db9fad3977423c2fa2ab61a0ffebe43"},"downloads":-1,"filename":"python-irodsclient-1.1.4.tar.gz","has_sig":false,"md5_digest":"f8b823b204ad6e8cb98f448e26b0da60","packagetype":"sdist","python_version":"source","requires_python":null,"size":195511,"upload_time":"2022-06-29T20:43:40","upload_time_iso_8601":"2022-06-29T20:43:40.056176Z","url":"https://files.pythonhosted.org/packages/10/55/d2935350f0f024536de313d2937a72d06986bbd8da0bce6d50dedb74832a/python-irodsclient-1.1.4.tar.gz","yanked":false,"yanked_reason":null}],"1.1.5":[{"comment_text":"","digests":{"blake2b_256":"adcd592c4df3f9772dbb6d8dcbaa388554e21d3db059ad4660bfb3dc705e9dab","md5":"7b5bdf4bba6088d9edac865681a8b6a8","sha256":"4665d9ef6837054f3526a8fc183f89cd14a26865d24c38de2a111c6920cdb510"},"downloads":-1,"filename":"python_irodsclient-1.1.5-py2.py3-none-any.whl","has_sig":false,"md5_digest":"7b5bdf4bba6088d9edac865681a8b6a8","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":181046,"upload_time":"2022-09-21T19:43:16","upload_time_iso_8601":"2022-09-21T19:43:16.533362Z","url":"https://files.pythonhosted.org/packages/ad/cd/592c4df3f9772dbb6d8dcbaa388554e21d3db059ad4660bfb3dc705e9dab/python_irodsclient-1.1.5-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"a553f62829a28bb7ba54a43699580ad3b7fbdc2fda4084e49b935416cf8f4bf9","md5":"264fc293de56a9a8acf53ad53f61d8db","sha256":"7b8b4bdc4610193d1e58ebd3fc04be58cd471d7155780eab36a5b3c68d6ec182"},"downloads":-1,"filename":"python-irodsclient-1.1.5.tar.gz","has_sig":false,"md5_digest":"264fc293de56a9a8acf53ad53f61d8db","packagetype":"sdist","python_version":"source","requires_python":null,"size":196937,"upload_time":"2022-09-21T19:43:19","upload_time_iso_8601":"2022-09-21T19:43:19.494984Z","url":"https://files.pythonhosted.org/packages/a5/53/f62829a28bb7ba54a43699580ad3b7fbdc2fda4084e49b935416cf8f4bf9/python-irodsclient-1.1.5.tar.gz","yanked":false,"yanked_reason":null}],"1.1.6":[{"comment_text":"","digests":{"blake2b_256":"c373f52f383e3751be833ddf8ad56e45009d9b4a7e37e7363163970c0bd122a5","md5":"6c6da8cd189f226bd2f55a3898a2e91b","sha256":"6bfb179932f0ef22ac4ef11d23d155ca1bde1c820f804cd1938a6ac05057f055"},"downloads":-1,"filename":"python_irodsclient-1.1.6-py2.py3-none-any.whl","has_sig":false,"md5_digest":"6c6da8cd189f226bd2f55a3898a2e91b","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":190903,"upload_time":"2023-01-19T03:04:22","upload_time_iso_8601":"2023-01-19T03:04:22.504773Z","url":"https://files.pythonhosted.org/packages/c3/73/f52f383e3751be833ddf8ad56e45009d9b4a7e37e7363163970c0bd122a5/python_irodsclient-1.1.6-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"dcbf55342098ac5ae44950eddd85460377e4e2f0b121621f67dffe1de266db7c","md5":"d8bd7113fc8c857a712386615da6d42f","sha256":"d78c367d050f7668825dbf1c5ded6e35a7f33fd8af08fd6084fe438e5dc275d6"},"downloads":-1,"filename":"python-irodsclient-1.1.6.tar.gz","has_sig":false,"md5_digest":"d8bd7113fc8c857a712386615da6d42f","packagetype":"sdist","python_version":"source","requires_python":null,"size":207490,"upload_time":"2023-01-19T03:04:24","upload_time_iso_8601":"2023-01-19T03:04:24.361522Z","url":"https://files.pythonhosted.org/packages/dc/bf/55342098ac5ae44950eddd85460377e4e2f0b121621f67dffe1de266db7c/python-irodsclient-1.1.6.tar.gz","yanked":false,"yanked_reason":null}],"1.1.7":[{"comment_text":"","digests":{"blake2b_256":"f03432484747a1e448ef16368bc18bea2e166eca55ba09289a18d29d435b6af8","md5":"d21decc850c8c1aa62748c3c0144d219","sha256":"7def1c09a88398f2d1f081f49a91c0ce3631e7020bed6339ca059714a9a91451"},"downloads":-1,"filename":"python_irodsclient-1.1.7-py2.py3-none-any.whl","has_sig":false,"md5_digest":"d21decc850c8c1aa62748c3c0144d219","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":195546,"upload_time":"2023-03-28T18:17:21","upload_time_iso_8601":"2023-03-28T18:17:21.909170Z","url":"https://files.pythonhosted.org/packages/f0/34/32484747a1e448ef16368bc18bea2e166eca55ba09289a18d29d435b6af8/python_irodsclient-1.1.7-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"17cc3f52acf433fc6211e85c59818026a11848462459dd30b7816ded07760752","md5":"c224742a91157ee0ec5923528f62fe03","sha256":"d4f63201292edd36741379031b637fa84e74d0947b9a5ea25b962ec2bb1d6786"},"downloads":-1,"filename":"python-irodsclient-1.1.7.tar.gz","has_sig":false,"md5_digest":"c224742a91157ee0ec5923528f62fe03","packagetype":"sdist","python_version":"source","requires_python":null,"size":215451,"upload_time":"2023-03-28T18:17:24","upload_time_iso_8601":"2023-03-28T18:17:24.685374Z","url":"https://files.pythonhosted.org/packages/17/cc/3f52acf433fc6211e85c59818026a11848462459dd30b7816ded07760752/python-irodsclient-1.1.7.tar.gz","yanked":false,"yanked_reason":null}],"1.1.8":[{"comment_text":"","digests":{"blake2b_256":"83b2bd7fc36926ad7cf8a6fcb390902479c6fd18620b4360a377f402d2c8a8da","md5":"e2117253bdafe450604c469614118074","sha256":"6e8aaec63acf335194ede5f1e7e8e0790079c1be34d059a7d7998c64ffbe3455"},"downloads":-1,"filename":"python_irodsclient-1.1.8-py2.py3-none-any.whl","has_sig":false,"md5_digest":"e2117253bdafe450604c469614118074","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":199150,"upload_time":"2023-05-18T18:14:06","upload_time_iso_8601":"2023-05-18T18:14:06.141045Z","url":"https://files.pythonhosted.org/packages/83/b2/bd7fc36926ad7cf8a6fcb390902479c6fd18620b4360a377f402d2c8a8da/python_irodsclient-1.1.8-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"eec583ba1f4373fcaf8318342a86415a78d73b540052d18ebd2fde9e20b4502b","md5":"2e71576b13eb5613ecf3c13853c851c4","sha256":"7c902a50e73e40a11bb8f09afdfb4f96f8ddec5bea186b80343357cbfea2c961"},"downloads":-1,"filename":"python-irodsclient-1.1.8.tar.gz","has_sig":false,"md5_digest":"2e71576b13eb5613ecf3c13853c851c4","packagetype":"sdist","python_version":"source","requires_python":null,"size":218983,"upload_time":"2023-05-18T18:14:09","upload_time_iso_8601":"2023-05-18T18:14:09.492191Z","url":"https://files.pythonhosted.org/packages/ee/c5/83ba1f4373fcaf8318342a86415a78d73b540052d18ebd2fde9e20b4502b/python-irodsclient-1.1.8.tar.gz","yanked":false,"yanked_reason":null}],"1.1.9":[{"comment_text":"","digests":{"blake2b_256":"d11a4513c15d80a887dfec3a823f29a89565712750684b15c9e185cd04fe8604","md5":"31c5ea94fa09113ab6f8f6644745d5c0","sha256":"64f6843191ba5e20b83b7cf7ba41e4d2478051cbfc8093c04d8d2ec85cba7938"},"downloads":-1,"filename":"python_irodsclient-1.1.9-py2.py3-none-any.whl","has_sig":false,"md5_digest":"31c5ea94fa09113ab6f8f6644745d5c0","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":213981,"upload_time":"2023-10-13T19:59:14","upload_time_iso_8601":"2023-10-13T19:59:14.527071Z","url":"https://files.pythonhosted.org/packages/d1/1a/4513c15d80a887dfec3a823f29a89565712750684b15c9e185cd04fe8604/python_irodsclient-1.1.9-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"3e650479806874841cce427f5b292600a1a386ba43c7426651ed8f334c67591b","md5":"36d43ad54e9a1e1d7070e3050f00592e","sha256":"e3e304359bcf3374c5e95fc9f313d32d1b9238576725e40ec803b9eec7ee8c67"},"downloads":-1,"filename":"python-irodsclient-1.1.9.tar.gz","has_sig":false,"md5_digest":"36d43ad54e9a1e1d7070e3050f00592e","packagetype":"sdist","python_version":"source","requires_python":null,"size":235325,"upload_time":"2023-10-13T19:59:16","upload_time_iso_8601":"2023-10-13T19:59:16.504009Z","url":"https://files.pythonhosted.org/packages/3e/65/0479806874841cce427f5b292600a1a386ba43c7426651ed8f334c67591b/python-irodsclient-1.1.9.tar.gz","yanked":false,"yanked_reason":null}],"2.0.0":[{"comment_text":"","digests":{"blake2b_256":"827df1a190e8080892f4d0b95f66c115496f68877c4c07e24082a43b0abc4414","md5":"43b302861348766753855d48885e196f","sha256":"693ebc0c2ab4489ab57a15a08899884be2ff6883bbbebd35f9a1e735bf01e6be"},"downloads":-1,"filename":"python_irodsclient-2.0.0-py2.py3-none-any.whl","has_sig":false,"md5_digest":"43b302861348766753855d48885e196f","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":222670,"upload_time":"2024-02-12T20:04:37","upload_time_iso_8601":"2024-02-12T20:04:37.952051Z","url":"https://files.pythonhosted.org/packages/82/7d/f1a190e8080892f4d0b95f66c115496f68877c4c07e24082a43b0abc4414/python_irodsclient-2.0.0-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"94607eb0c70e48216251b642b49110039c36b4bc8b7b7277d0e41e03ad891115","md5":"ea875fc6b2892dd1021fd67b2f2ee93c","sha256":"4b9de7534c1eeecea4f0d875205cfdc73f7310693748e098b4a3b58c3d781883"},"downloads":-1,"filename":"python-irodsclient-2.0.0.tar.gz","has_sig":false,"md5_digest":"ea875fc6b2892dd1021fd67b2f2ee93c","packagetype":"sdist","python_version":"source","requires_python":null,"size":245771,"upload_time":"2024-02-12T20:04:39","upload_time_iso_8601":"2024-02-12T20:04:39.649595Z","url":"https://files.pythonhosted.org/packages/94/60/7eb0c70e48216251b642b49110039c36b4bc8b7b7277d0e41e03ad891115/python-irodsclient-2.0.0.tar.gz","yanked":false,"yanked_reason":null}],"2.0.1":[{"comment_text":"","digests":{"blake2b_256":"33bbd6adec2e95c5cb3b14ae159b43e0a99e8d3991739dc75829f5337fad5645","md5":"2322254887ab3317f85afb87a730fad5","sha256":"5c1da14d6f9d0137ddd49b3ff2be951a0f77d649df70336898f0d3bf215553ad"},"downloads":-1,"filename":"python_irodsclient-2.0.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"2322254887ab3317f85afb87a730fad5","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":224300,"upload_time":"2024-04-30T18:39:03","upload_time_iso_8601":"2024-04-30T18:39:03.168142Z","url":"https://files.pythonhosted.org/packages/33/bb/d6adec2e95c5cb3b14ae159b43e0a99e8d3991739dc75829f5337fad5645/python_irodsclient-2.0.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"943f8c869c0a09fa28adb65f5543190f34b42ae98f8b7add3dbafdbcdf66dfac","md5":"65c6f633817106b7861ee9dc5d6ad9bb","sha256":"5f312f5ee8c8b82288ab94fe0c5cb674193f4d4cd8cf2c38fc4505713d786ea4"},"downloads":-1,"filename":"python-irodsclient-2.0.1.tar.gz","has_sig":false,"md5_digest":"65c6f633817106b7861ee9dc5d6ad9bb","packagetype":"sdist","python_version":"source","requires_python":null,"size":247972,"upload_time":"2024-04-30T18:39:05","upload_time_iso_8601":"2024-04-30T18:39:05.751466Z","url":"https://files.pythonhosted.org/packages/94/3f/8c869c0a09fa28adb65f5543190f34b42ae98f8b7add3dbafdbcdf66dfac/python-irodsclient-2.0.1.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"33bbd6adec2e95c5cb3b14ae159b43e0a99e8d3991739dc75829f5337fad5645","md5":"2322254887ab3317f85afb87a730fad5","sha256":"5c1da14d6f9d0137ddd49b3ff2be951a0f77d649df70336898f0d3bf215553ad"},"downloads":-1,"filename":"python_irodsclient-2.0.1-py2.py3-none-any.whl","has_sig":false,"md5_digest":"2322254887ab3317f85afb87a730fad5","packagetype":"bdist_wheel","python_version":"py2.py3","requires_python":null,"size":224300,"upload_time":"2024-04-30T18:39:03","upload_time_iso_8601":"2024-04-30T18:39:03.168142Z","url":"https://files.pythonhosted.org/packages/33/bb/d6adec2e95c5cb3b14ae159b43e0a99e8d3991739dc75829f5337fad5645/python_irodsclient-2.0.1-py2.py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"943f8c869c0a09fa28adb65f5543190f34b42ae98f8b7add3dbafdbcdf66dfac","md5":"65c6f633817106b7861ee9dc5d6ad9bb","sha256":"5f312f5ee8c8b82288ab94fe0c5cb674193f4d4cd8cf2c38fc4505713d786ea4"},"downloads":-1,"filename":"python-irodsclient-2.0.1.tar.gz","has_sig":false,"md5_digest":"65c6f633817106b7861ee9dc5d6ad9bb","packagetype":"sdist","python_version":"source","requires_python":null,"size":247972,"upload_time":"2024-04-30T18:39:05","upload_time_iso_8601":"2024-04-30T18:39:05.751466Z","url":"https://files.pythonhosted.org/packages/94/3f/8c869c0a09fa28adb65f5543190f34b42ae98f8b7add3dbafdbcdf66dfac/python-irodsclient-2.0.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
