{"info":{"author":"http://github.com/Pebaz","author_email":"","bugtrack_url":null,"classifiers":[],"description":"\n<p align=\"center\"><img width=200px src=\"https://raw.githubusercontent.com/Pebaz/Nimporter/master/nimporter-logo.png\"></p>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n![License](https://img.shields.io/github/license/Pebaz/Nimporter)\n![Version](https://img.shields.io/pypi/v/nimporter)\n![Downloads each Month](https://img.shields.io/pypi/dm/Nimporter)\n![Wheel Supported](https://img.shields.io/pypi/wheel/Nimporter)\n\n# Nimporter\n\nCompile [Nim](<https://nim-lang.org/>) extensions for Python on import automatically!\n\n## What is Nimporter\n\n> With Nimporter, you can simply import Nim source code files *as if they\nwere Python modules*, and use them seamlessly with Python code.\n\n## Possible Benefits\n\n * Performance: Nim compiles to C\n * Reduce cloud computing costs without writing C\n * Leverage both language's ecosystems: [Python](https://pypi.org/) for breadth,\n [Nim](https://nimble.directory/) for performance.\n * Seamless integration with existing Nim code by using the\n   [Nimpy](https://github.com/yglukhov/nimpy) library.\n * Very low effort to create high-performance Python extensions using Nim.\n * 100% transparent to end users (doesn't require Nim compiler).\n\n## Installation\n\n```bash\n$ pip install nimporter\n```\n\nDependencies:\n\n 1. [Nim Compiler](<https://nim-lang.org/install.html>) (for compiling Nim\n source files)\n 2. [Nimpy library](https://github.com/yglukhov/nimpy) (Installed automatically)\n 3. [Nimporter library](https://github.com/Pebaz/nimporter) (distributed\n libraries will need access to Nimporter).\n\nNimporter can work seamlessly when Nim is installed via\n[Choosenim](https://nim-lang.org/install_unix.html#installation-using-choosenim)\nor manually. No additional configuration is necessary once installed since\nNimporter can find the Nim standard library and install\n[Nimpy library](https://github.com/yglukhov/nimpy) if Nimble is on your path.\n\n## About\n\nNimporter provides an official way to develop applications and libraries that\nmake use of Nim code for achieving higher performance.\n\nIt does this by providing a way to directly import Nim code and have it be\ncompiled at runtime. However, unlink Cython, this will not proliferate your\ndevelopment environment and require adding bunches of exceptions to your\n`.gitignore` file.\n\nAll artifacts are stored in their respective `__pycache__` directories. Builds\nare cached so that subsequent imports do not trigger a rebuild.\n\nNimporter allows you to treat Nim files exactly like Python modules. This means\nthat namespacing is maintained for package heirarchies.\n\nHere is a quick example of how to directly import Nim code:\n\n**nim_math.nim**\n\n```nim\nimport nimpy\n\nproc add(a: int, b: int): int {.exportpy.} =\n    return a + b\n```\n\n**Python file in same directory**\n\n```python\n# Nimporter is needed prior to importing any Nim code\nimport nimporter, nim_math\n\nprint(nim_math.add(2, 4))  # 6\n```\n\nDoes Nimporter support single-file Nim modules only? No, Nimporter allows you to\ntreat an entire Nim project as a single module. The project must contain a\n`.nimble` file that is used to build the project into a single library. Since\n`.nimble` files are supported, this means that they can rely on Nim dependencies\nand still be imported and compiled at runtime.\n\nHave a complex build requirement that would normally entail tweaking Nim\ncompiler switches for each supported platform? Nimporter fully supports adding\n`*.nim.cfg` or `*.nims` files for libraries that need to customize the CLI flags for any\nplatform seamlessly for both developing and bundling extensions.\n\nSince Nimporter relies on [Nimpy](https://github.com/yglukhov/nimpy) for Nim <->\nPython interaction, it is a required dependency during development for every\nmodule and library. Nimporter ensures that this is installed prior to every\ncompilation so that users do not have a separate `nimble install nimpy` step.\n\nAdditionally, for users who do not have access or are not interested in\ninstalling a Nim compiler, Nimporter makes distribution effortless.\n\nAfter creating an entire project with many Python and Nim modules/libraries in a\ndeeply-nested package heirarchy, Nimporter allows you to bundle all of this into\na single wheel just as you would with Python.\n\nTo do this, you need to add a single line to your `setup.py`:\n\n```python\nfrom setuptools import setup\nimport nimporter\n\nsetup(\n    ...,\n\n    # This is all the effort required to bundle all Nim modules/libraries\n    ext_modules=nimporter.build_nim_extensions()\n)\n```\n\n> Please note that the official distribution mechanism only requires a single\nline of code.\n\nAdditionally, all namespaces are preserved in the built extensions and end-users\ncan merely install the resulting wheel containing the binary artifacts without\ncompiling on the target machine.\n\nIn summary, Nimporter is a library that allows you to use Nim along with Python\neffortlessly by exposing two very simple APIs:\n\n```python\nimport nimporter  # Required prior to any Nim module import\n\n# 1. Import Nim code directly\nimport my_nim_module\n\n# 2. Find, build, and bundle all Nim extensions automatically\nnimporter.build_nim_extensions()\n```\n\n*How much simpler could it possibly get?*\n\n## Documentation\n\nFor tutorials, advanced usage, and more, head over to the\n[Wiki](<https://github.com/Pebaz/nimporter/wiki>).\n\nGenerated documentation can be found\n[here](https://pebaz.github.io/nimporter/index.html).\n\nFor a bunch of little examples, look in the `examples/` directory. For more\nrigorous examples testing every feature of Nimporter, you can take a look at the\nfiles within the `tests/` directory.\n\n## Suggested Project Structure\n\nAlthough there are lots of ways that Nimporter can integrate into new and\nexisting applications, here is how to reduce issues arising from unstructured\nusage:\n\n```bash\nProject/\n    # Not required if you use `nimporter compile` but highly recommended\n    setup.py\n    main_package_name/\n        some_file.py\n        calculator.nim  # Directly imported as if it was written in Python\n        some_python_package/\n            something1.py\n            something2.py\n        # some_nim_library is used as a single Python module\n        # Can be directly imported but supports dependencies and custom switches\n        some_nim_library/  # Allows the use of .nim.cfg, .nims and .nimble\n            some_nim_library.nimble  # Dependency info\n            some_nim_file1.nim\n            some_nim_file2.nim\n        other_python_files.py\n        other_nim_files.nim\n        # Python and Nim code can coexist right next to each other\n```\n\nIt is not recommended to split your Nim code and your Python code. The entire\npoint of Nimporter was to allow close cooperation between these two languages.\n\n> The suggested (not imposed) project structure is to place a lone Nim file\nwithin a Python package. If your Nim file requires any other dependencies other\nthan `nimpy`, you *must* place your Nim file into a folder of the same name with\na Nimble file of the same name with the dependencies listed out.\n\n**To recap**\n\n```bash\nProject/\n    (setup.py)\n    main_package_name/\n        some_file.py\n        nim_ext_with_no_dependencies.nim\n        some_other_file.py\n        nim_ext_requiring_dependencies/\n            # List your dependencies here\n            nim_ext_requiring_dependencies.nimble\n            # Must be named the same as the folder\n            nim_ext_requiring_dependencies.nim\n            # Can be used to customize Nim compiler switches per platform\n            nim_ext_requiring_dependencies.nim.cfg\n            # You can have `nim_ext_requiring_dependencies.nim` import other\n            # Nim code as well\n            other_necessary_nim_files.nim\n```\n\nFor several examples of how to structure a project, look in the `tests/` folder.\n\n## Compiler Switches using `*.nim.cfg` or `*.nims`\n\n---\n**DEPRECATION NOTICE**\n\nThe use of the file `switches.py` for specifying compiler flags has been deprecated in favour of\n`*.nim.cfg` or `*.nims` configuration files.\n\n---\n\nFor Nim extension libraries only (a folder, nimble file, and Nim file of the\nsame name), you can place a file called `*.nim.cfg` or `*.nims` to\ncustomize what flags get passed to the Nim compiler when it compiles that\nextension. For examples on how to do this, please look in the `tests/` folder.\nFor documentation on the Nim compiler configuration files,\nplease look [here](https://nim-lang.org/docs/nimc.html#compiler-usage-configuration-files).\n\n### Increasing Speed by using the `-d:danger` flag\n\nSince this flag is one that is desirable for Nim extension modules/libraries\nalike, you can request that it be used during compilation by adding\n`danger=True` to `build_nim_extensions()`. For example:\n\n```python\nfrom setuptools import setup\nimport nimporter\n\nsetup(\n    ...\n    ext_modules=nimporter.build_nim_extensions(danger=True)\n)\n```\n\n## Distributing Libraries Using Nimporter\n\nNimporter supports two methods of distribution:\n\n* Source\n* Binary (Wheel)\n\nIf your library makes use of Nimporter for integrating Nim code, you will need\nto include it with your dependency list. Even for binary distributions which\ncompile each extension to prevent compilation on the end-users machine.\n\n### Binary Distributions\n\nBinary (wheel) distributions allow you to forego compilation of Nim source files\non the end user's machine. This has enormous benefit and can be accomplished\nvery easily by adding the following line to your `setup.py` file:\n\n```python\n...\nimport nimporter\n\nsetup(\n    ...,                                          # Keep your existing arguments\n    ext_modules=nimporter.build_nim_extensions()  # Recurse+build Nim extensions\n)\n```\n\nTo create the binary distribution:\n\n```bash\n$ python setup.py bdist_wheel\n```\n\nWhen installing via Pip, the appropriate wheel version will be selected,\ndownloaded, and installed, all without requiring users to install a Nim\ncompiler.\n\n> Special note for Linux users: Unfortunately, PyPi will not allow you to upload\njust any Linux wheel. There is a special compilation process that can be\nexplained [here](https://github.com/pypa/manylinux). Interestingly enough, I got\naround this by simply renaming the resulting Linux build according to the\n**manylinux1** naming convention. You can see my solution in the\n`examples/github_actions_template.yml` file for the `build-linux` job. I expect\nthat there could be many downsides of using this hack but it worked for me on 2\ndifferent Linux platforms.\n\n### Source Distributions\n\nSource distributions allow users to bundle Nim files so that end-users can\ncompile them upon import just how they would during normal development.\n\nThe only supported way of providing a source distribution is to bundle the Nim\nfiles along with the Python source files.\n\nTo do this, add these lines to your `setup.py` file:\n\n```python\nsetup(\n    ...,                            # Keep your existing arguments\n    package_data={'': ['*.nim*']},  # Distribute *.nim & *.nim.cfg source files\n    # include_package_data=True,    # <- This line cannot work with package_data\n    setup_requires = [\n        \"choosenim_install\", # Optional. Auto-installs Nim compiler\n         ],\n    install_requires=[\n        'nimporter',  # Must depend on Nimporter\n        ]\n)\n```\n\nTo create the source distribution:\n\n```bash\n$ python setup.py sdist\n```\n\nWhen installing via Pip and a binary distribution (wheel) cannot be found for a\ngiven platform, the source distribution will be installed which will include the\nbundled Nim source files. When the library is imported on the end-users's\nmachine, Nimporter compiles all of the Nim files as they are imported\ninternally which will cause a small delay to account for compilation. When the\nlibrary is subsequently imported, no compilation is necessary so imports are\nextremely fast.\n\n### Publish Build Artifacts to PyPi Automatically\n\nSince binary distributions allow Nimporter libraries to be distributed without\nrequiring a Nim compiler, they are the recommended packaging type. However,\nbuilding for each platform can be tedious.\n\nFor a dead-simple way to publish Windows, MacOS, and Linux wheels to PyPi\nautomatically, use the `github_actions_template.yml` template found in the\n`examples/` directory. This template integrates with your repository's GitHub\nActions runner to build, package, and deploy your library on Windows, MacOS, and\nLinux automatically when you create a new \"Release\" is created.\n\n### Usage with Docker\n\nNimporter can easily be used within a Docker container. To prevent the need for\na Nim compiler toolchain to be installed into the container to run Nim code, you\ncan pre-compile all of your extensions and copy the resulting artifacts into the\ncontainer. This process is roughly as follows:\n\n1. Create a project that uses Python and Nim\n2. Run `nimporter compile` to recursively-compile all extensions in the project\n3. Ensure that in your Dockerfile that the `__pycache__` directories are\n   included as they will contain the Nim shared objects as well as the Nimporter\n   hash files to prevent a recompilation.\n\n## Nimporter Command Line Interface\n\nNimporter provides a CLI that you can use to easily clean all cached build and\nhash files from your project recursively. This can be very useful for debugging\nsituations arising from stale builds.\n\nUsage example:\n\n```bash\n# Recursively removes all hashes and cached builds\n$ nimporter clean\n```\n\nAdditionally, the CLI can also be used like a compiler to produce a binary\nextension (`.pyd` and `.so`) from a given Nim file.\n\n```bash\n# Stores build in __pycache__\n# Can be imported by first importing nimporter\n$ nimporter build file.nim\n\n# Stores build in current dir\n$ nimporter build file.nim --dest .\n\n# Same 2 examples but for Nim libraries\n$ nimporter build mylib\n$ nimporter build mylib --dest .\n\n# Although you can specify a Nim library's source file, please don't\n$ nimporter build mylib/mylib.nim\n```\n\nThe Nimporter CLI can also precompile all extensions within a project without\nneeding to run the project. This is useful in situations where you do not want\nto package your application using a `setup.py` (such as a zip file) or for use\nwithin Docker containers.\n\n```bash\n# Recursively compile all Nim extension modules and libraries:\n$ nimporter compile\n```\n\nFinally, the CLI has provisions for quickly bundling your project into a source\nor binary distribution:\n\n```bash\n# Bundles your code into a wheel (look in dist/)\n$ nimporter bundle bin\n\n# Bundles your code into a source archive (look in dist/)\n$ nimporter bundle src\n```\n\nIf you do not have a `setup.py` in your current directory, the CLI will generate\none for you but you will have to edit it to make sure that all of your code is\nincluded in the resulting package. You can look\n[here](https://github.com/navdeep-G/setup.py) for an excellent tutorial on how\nto use `setup.py`.\n\n## Code Quality\n\nThere are ***44 unit tests*** and ***5 integration tests*** to make sure that\nNimporter performs as advertised.\n\nIn addition, Nimporter has ***94% code coverage*** so a host of bugs have already been\ncaught and dealt with in a manner befitting their wretched existence.\n\nLastly, it has been tested and fully supported on these platforms:\n\n* **Windows 10**\n* **MacOS Mojave**\n* **Linux**\n\n> Just for fun, I got out my Windows laptop, Mac, and SSHed into a Linux box on\nAWS. I then ran the test suite on all 3 platforms simultaneously. ;)\n\nNimporter likely works on a bunch of other platforms but I cannot justify the\ntime required to test them at this point.\n\n### Running The Tests\n\nTo run these on your local machine, you will need to install a Nim compiler.\n\nThis example will assume you are cloning the GitHub reposotory.\n\n```bash\n$ git clone https://github.com/Pebaz/Nimporter\n$ cd Nimporter\n$ pip install -r requirements_dev.txt\n$ pip install .  # Nimporter is needed for the integration tests\n$ pytest --cov=. --cov-report=html tests\n```\n\n## How Does Nimporter Work?\n\nNimporter provides essentially two capabilities:\n\n* The ability to directly import Nim code\n* The ability to bundle Python-compatible extensions for any supported platform\n\nThe way it accomplishes the ability to import Nim code is by adding two custom\nimporters to the Python import machinery. This is why it is required to import\nNimporter before importing any Nim code because the Python import machinery must\nbe amended with the custom importers.\n\nThe first one is for the ability to search and import Nim modules. When a Nim\nmodule is found, Nimporter first looks in the `__pycache__` directory to see if\nthere is already a built version of the module. If there is not, it builds a new\none and stores it in the `__pycache__` directory.\n\nIf one is found, it could be stale meaning the Nim file could have been modified\nsince it was built. To keep track of this, a hash of the source file is also\nkept in the `__pycache__` directory and is consulted whenever there is a\npossibility that a stale build could be imported.\n\nWhen a Nim module and a Python module have the same name and reside in the same\nfolder, the Python module is given precedence. *Please don't do this.*\n\nThe second custom importer has the exact same purpose of the first one except it\nis used to import Nim extension libraries. A library is any folder within a\nPython project that contains a `<lib name>.nim` and a `<lib name>.nimble` file.\n\nThese files mark that the folder should be treated as one unit. It also makes it\nso that Nimble dependencies can be installed.\n\nAs for the second capability, Nimporter helps you bundle and distribute Nim code\nas part of a binary distribution extremely easily.\n\nThe way it works is by iterating through your entire project and identifying any\nNim module and Nim library that it finds and compiling them to C using a feature\nof Nim that specifically supports this.\n\nWhy compile to C? Because Python already has extensive infrastructure to support\nthe compilation and distribution of C extensions.\n\nOnce each Nim module and library is compiled to C, Python deals with them the\nexact same way as a typical C extension. These extensions are then bundled into\nthe resulting binary distribution and can be uploaded to PyPi or similar.\n\nAre source distributions supported? Yes and no. They are officially supported\nfor bundling the Nim source files themselves into the archive, but not the C\nsource files. Although the C source files would be a better alternative, the C\nfiles generated by Nim are platform specific, so they would only be of use to\nusers on the same exact platform and architecture. This is why the official way\nof distributing Nimporter libraries is by creating binary wheels.\n\n## State Of The Project\n\nI have implemented all of the features that I wanted to add at this time. I made\nsure to validate the effectiveness of each feature with the unit and integration\ntests. This project should be considered \"done\" and will receive no further\nenhancements except for bug fixes and patches. You can submit a bug report on\nNimporter's [GitHub Issues](https://github.com/Pebaz/nimporter/issues) page.\n\n## Contributing\n\nAlthough I would not seek to add any new features to Nimporter, there may exist\ncertain modifications that would enhance the effectiveness of Nimporter's core\nfeatures. Pull requests are welcome, especially for fixing bugs.\n\n## Special Thanks\n\nNimporter would not be possible without\n[Nimpy](https://github.com/yglukhov/nimpy). Thank you\n[Yuriy Glukhov](https://github.com/yglukhov) for making this project possible!\n\n## Stargazers Over Time\n\n[![Stargazers Over Time](https://starchart.cc/Pebaz/nimporter.svg)](https://starchart.cc/Pebaz/nimporter)\n\n> Made using <https://starchart.cc/>\n\n\n","description_content_type":"text/markdown","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"http://github.com/Pebaz/Nimporter","keywords":"","license":"MIT","maintainer":"","maintainer_email":"","name":"nimporter","package_url":"https://pypi.org/project/nimporter/","platform":"","project_url":"https://pypi.org/project/nimporter/","project_urls":{"Homepage":"http://github.com/Pebaz/Nimporter"},"provides_extra":null,"release_url":"https://pypi.org/project/nimporter/1.1.0/","requires_dist":null,"requires_python":"","summary":"Compile Nim extensions for Python when imported!","version":"1.1.0","yanked":false,"yanked_reason":null},"last_serial":13822655,"releases":{"0.1.1":[{"comment_text":"","digests":{"blake2b_256":"4a10bb406e3b5ee46ccfb4c19b0f911f3e57fc5ff73e3632d3c237b0bfce203f","md5":"6a84d256f95e056557d5b66d6f73b91e","sha256":"99ab173f709d22c092bd6d7868f3d4eddfd6d7b389acfabb5ce26bfe35442d36"},"downloads":-1,"filename":"nimporter-0.1.1.tar.gz","has_sig":false,"md5_digest":"6a84d256f95e056557d5b66d6f73b91e","packagetype":"sdist","python_version":"source","requires_python":null,"size":4699,"upload_time":"2019-12-13T19:19:08","upload_time_iso_8601":"2019-12-13T19:19:08.284158Z","url":"https://files.pythonhosted.org/packages/4a/10/bb406e3b5ee46ccfb4c19b0f911f3e57fc5ff73e3632d3c237b0bfce203f/nimporter-0.1.1.tar.gz","yanked":false,"yanked_reason":null}],"0.1.2":[{"comment_text":"","digests":{"blake2b_256":"5a2e183cdc808fc270f3810b48c0514025253ab66abb78acc8c2266d1b8fefb5","md5":"9ff5618d8bddb29cf85946aeff680ae7","sha256":"74b31b1145049a7cf4ac4bec57d1870b24442d5b92110c821a0249a2bd62f487"},"downloads":-1,"filename":"nimporter-0.1.2.tar.gz","has_sig":false,"md5_digest":"9ff5618d8bddb29cf85946aeff680ae7","packagetype":"sdist","python_version":"source","requires_python":null,"size":4948,"upload_time":"2019-12-13T19:35:53","upload_time_iso_8601":"2019-12-13T19:35:53.726439Z","url":"https://files.pythonhosted.org/packages/5a/2e/183cdc808fc270f3810b48c0514025253ab66abb78acc8c2266d1b8fefb5/nimporter-0.1.2.tar.gz","yanked":false,"yanked_reason":null}],"0.1.3":[{"comment_text":"","digests":{"blake2b_256":"5913ccdd423254da10e88e883e92101e59b18dfc3bf6df8ad3540882ec5f2ab6","md5":"29a2260e99bf20b0cd77a55e0dfbf708","sha256":"b4c6a3f6194198db7f236034d7a4c3c2397760ed00a8db3907dfdc3e0226ea10"},"downloads":-1,"filename":"nimporter-0.1.3.tar.gz","has_sig":false,"md5_digest":"29a2260e99bf20b0cd77a55e0dfbf708","packagetype":"sdist","python_version":"source","requires_python":null,"size":5318,"upload_time":"2019-12-18T02:44:15","upload_time_iso_8601":"2019-12-18T02:44:15.343380Z","url":"https://files.pythonhosted.org/packages/59/13/ccdd423254da10e88e883e92101e59b18dfc3bf6df8ad3540882ec5f2ab6/nimporter-0.1.3.tar.gz","yanked":false,"yanked_reason":null}],"0.1.4":[{"comment_text":"","digests":{"blake2b_256":"bbe47e8144757d4c88d2a2106b15fb1f8d063949b7348b49f2f335a220454bd1","md5":"23a40e55e2147759c57ef546079a75bb","sha256":"b46d42976f02b5c248cdf8edca37990d442af5ec86f3fa14961596285fc55f0a"},"downloads":-1,"filename":"nimporter-0.1.4.tar.gz","has_sig":false,"md5_digest":"23a40e55e2147759c57ef546079a75bb","packagetype":"sdist","python_version":"source","requires_python":null,"size":5417,"upload_time":"2019-12-21T00:17:22","upload_time_iso_8601":"2019-12-21T00:17:22.950363Z","url":"https://files.pythonhosted.org/packages/bb/e4/7e8144757d4c88d2a2106b15fb1f8d063949b7348b49f2f335a220454bd1/nimporter-0.1.4.tar.gz","yanked":false,"yanked_reason":null}],"0.1.5":[{"comment_text":"","digests":{"blake2b_256":"12c0c25a2d28dd717e7482f001ec7cf8d74d2d65a87509d83faf6be1185e281c","md5":"00749808c1c57ac3ecee902fd43518f8","sha256":"f0fa687d4ba1f54df538389a143b545bc8ce3e5c0a9ef7e92ebc27266b56c6e4"},"downloads":-1,"filename":"nimporter-0.1.5.tar.gz","has_sig":false,"md5_digest":"00749808c1c57ac3ecee902fd43518f8","packagetype":"sdist","python_version":"source","requires_python":null,"size":5558,"upload_time":"2019-12-26T15:21:22","upload_time_iso_8601":"2019-12-26T15:21:22.989020Z","url":"https://files.pythonhosted.org/packages/12/c0/c25a2d28dd717e7482f001ec7cf8d74d2d65a87509d83faf6be1185e281c/nimporter-0.1.5.tar.gz","yanked":false,"yanked_reason":null}],"1.0.0":[{"comment_text":"","digests":{"blake2b_256":"21998d27e6d7b8a872aeef4b806f0a888116f985e40e0edc18b142e2c93b4926","md5":"63d63b07d3e43c9b864c43cfa4dd1343","sha256":"cf7dd5d00b6dd6275657df26a398b6d436e385ee1539c558c0bf80ced64636a7"},"downloads":-1,"filename":"nimporter-1.0.0.tar.gz","has_sig":false,"md5_digest":"63d63b07d3e43c9b864c43cfa4dd1343","packagetype":"sdist","python_version":"source","requires_python":null,"size":19720,"upload_time":"2020-04-11T15:43:34","upload_time_iso_8601":"2020-04-11T15:43:34.404996Z","url":"https://files.pythonhosted.org/packages/21/99/8d27e6d7b8a872aeef4b806f0a888116f985e40e0edc18b142e2c93b4926/nimporter-1.0.0.tar.gz","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c6b8f1d46925e1bbfb3a3e260059a34ba38d9d1f2559f892eeb88ae525096aa0","md5":"289f0584c18e83ce9ec9ec4ed265614b","sha256":"b51d534fcf369009f96441837469dcdc512f06838082ce150a1cccd62427244c"},"downloads":-1,"filename":"nimporter-1.0.post1-py3-none-any.whl","has_sig":false,"md5_digest":"289f0584c18e83ce9ec9ec4ed265614b","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":18922,"upload_time":"2020-04-11T15:42:32","upload_time_iso_8601":"2020-04-11T15:42:32.788067Z","url":"https://files.pythonhosted.org/packages/c6/b8/f1d46925e1bbfb3a3e260059a34ba38d9d1f2559f892eeb88ae525096aa0/nimporter-1.0.post1-py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.0.1":[{"comment_text":"","digests":{"blake2b_256":"5d85e6f9c815dc7f6e5dbdb6832715262b425c5630a5df878e824ad4b54a9fcf","md5":"f93cd1591ab3b39bbbdee2cdd870bc53","sha256":"de02f2f26dcd02c0f25e1d61ca95fb1be0a35c3c13344ad59b6bf0520fbe7483"},"downloads":-1,"filename":"nimporter-1.0.1.post1-py3-none-any.whl","has_sig":false,"md5_digest":"f93cd1591ab3b39bbbdee2cdd870bc53","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":21494,"upload_time":"2020-05-27T16:28:46","upload_time_iso_8601":"2020-05-27T16:28:46.003493Z","url":"https://files.pythonhosted.org/packages/5d/85/e6f9c815dc7f6e5dbdb6832715262b425c5630a5df878e824ad4b54a9fcf/nimporter-1.0.1.post1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"18d31b6b5bf95acedcf9f29161cc47f4491e9fc6d6525e2eff1b1eb8878a6fe4","md5":"4e76e394f8995b25946eb53858ef265d","sha256":"997bdacb498722fc64bdd990d67e2d096426a5901a875bec185d7bc2e37091a9"},"downloads":-1,"filename":"nimporter-1.0.1.post1.tar.gz","has_sig":false,"md5_digest":"4e76e394f8995b25946eb53858ef265d","packagetype":"sdist","python_version":"source","requires_python":null,"size":22784,"upload_time":"2020-05-27T16:27:48","upload_time_iso_8601":"2020-05-27T16:27:48.254481Z","url":"https://files.pythonhosted.org/packages/18/d3/1b6b5bf95acedcf9f29161cc47f4491e9fc6d6525e2eff1b1eb8878a6fe4/nimporter-1.0.1.post1.tar.gz","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d28125fae83fe6c28d9b2e0830cdbdb957cce69096ce35bc05db0b0906152e0c","md5":"2a21baa3375dba941460253257f831cd","sha256":"ad7b58ec02e691855669c79e069552ad1f860523a6986c997d2b39a925a91fd7"},"downloads":-1,"filename":"nimporter-1.0.1-py3-none-any.whl","has_sig":false,"md5_digest":"2a21baa3375dba941460253257f831cd","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":20834,"upload_time":"2020-04-19T18:22:47","upload_time_iso_8601":"2020-04-19T18:22:47.474904Z","url":"https://files.pythonhosted.org/packages/d2/81/25fae83fe6c28d9b2e0830cdbdb957cce69096ce35bc05db0b0906152e0c/nimporter-1.0.1-py3-none-any.whl","yanked":false,"yanked_reason":null}],"1.0.2":[{"comment_text":"","digests":{"blake2b_256":"ba5aad684d7428eec23523901e1d5e487b88685ab86c2376ed9be1ce2e700fe6","md5":"a098b26c3ab4a3c91a7eff2f423ffc09","sha256":"21430c71a06d683cbfb1831c9957528dd47eab91416d368eb37362103b89869e"},"downloads":-1,"filename":"nimporter-1.0.2-py3-none-any.whl","has_sig":false,"md5_digest":"a098b26c3ab4a3c91a7eff2f423ffc09","packagetype":"bdist_wheel","python_version":"py3","requires_python":null,"size":22493,"upload_time":"2020-07-23T15:39:44","upload_time_iso_8601":"2020-07-23T15:39:44.427409Z","url":"https://files.pythonhosted.org/packages/ba/5a/ad684d7428eec23523901e1d5e487b88685ab86c2376ed9be1ce2e700fe6/nimporter-1.0.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"5be814745aec3399c882e025042e2a7255b27eaae25b35432bd8c55514c4731d","md5":"c434f5529fbe470129cf51db9bd38d75","sha256":"5beb534ce4563b61a2fe9278575a99c85480439828206dbbbbe242982dfb9db8"},"downloads":-1,"filename":"nimporter-1.0.2.tar.gz","has_sig":false,"md5_digest":"c434f5529fbe470129cf51db9bd38d75","packagetype":"sdist","python_version":"source","requires_python":null,"size":23883,"upload_time":"2020-07-23T15:39:45","upload_time_iso_8601":"2020-07-23T15:39:45.731728Z","url":"https://files.pythonhosted.org/packages/5b/e8/14745aec3399c882e025042e2a7255b27eaae25b35432bd8c55514c4731d/nimporter-1.0.2.tar.gz","yanked":false,"yanked_reason":null}],"1.0.3":[{"comment_text":"","digests":{"blake2b_256":"cd66bc0aab99b5ee916b928da7addc29b98823dbe62891e2632ef513a34e4658","md5":"61bec39be2a13da8282f92080154c725","sha256":"d24731b844b0d5ea88e4c126d8772f897fa4de3c7cbb3a8b93fa79c1194c83a6"},"downloads":-1,"filename":"nimporter-1.0.3.tar.gz","has_sig":false,"md5_digest":"61bec39be2a13da8282f92080154c725","packagetype":"sdist","python_version":"source","requires_python":null,"size":24088,"upload_time":"2021-02-14T18:16:24","upload_time_iso_8601":"2021-02-14T18:16:24.716393Z","url":"https://files.pythonhosted.org/packages/cd/66/bc0aab99b5ee916b928da7addc29b98823dbe62891e2632ef513a34e4658/nimporter-1.0.3.tar.gz","yanked":false,"yanked_reason":null}],"1.0.4":[{"comment_text":"","digests":{"blake2b_256":"783dbfce561d21dbbd95b5e6f488dd54560da9861758a41045dc0538b3dcfa3a","md5":"3feaab930319f669137241eeedbb3da3","sha256":"6e75261df9f352f4e71f498cd49be49674516ecafee393972235e2014521a168"},"downloads":-1,"filename":"nimporter-1.0.4.tar.gz","has_sig":false,"md5_digest":"3feaab930319f669137241eeedbb3da3","packagetype":"sdist","python_version":"source","requires_python":null,"size":24287,"upload_time":"2021-02-14T20:48:01","upload_time_iso_8601":"2021-02-14T20:48:01.194770Z","url":"https://files.pythonhosted.org/packages/78/3d/bfce561d21dbbd95b5e6f488dd54560da9861758a41045dc0538b3dcfa3a/nimporter-1.0.4.tar.gz","yanked":false,"yanked_reason":null}],"1.1.0":[{"comment_text":"","digests":{"blake2b_256":"963cded65fcf69a8a487be84f96ab3072bfd4133ec40617ab60421f87c9684f5","md5":"1af9496e0f3dd0a0c82c7e397663251c","sha256":"d119d6eb35eb713cd483324ec919f3bf8269eef48c770e6d6549f6e34b4689c8"},"downloads":-1,"filename":"nimporter-1.1.0.tar.gz","has_sig":false,"md5_digest":"1af9496e0f3dd0a0c82c7e397663251c","packagetype":"sdist","python_version":"source","requires_python":null,"size":24349,"upload_time":"2021-11-05T22:16:42","upload_time_iso_8601":"2021-11-05T22:16:42.210450Z","url":"https://files.pythonhosted.org/packages/96/3c/ded65fcf69a8a487be84f96ab3072bfd4133ec40617ab60421f87c9684f5/nimporter-1.1.0.tar.gz","yanked":false,"yanked_reason":null}],"2.0.0":[{"comment_text":"","digests":{"blake2b_256":"835d661007945051dcb6d1b5005d02b847f246ef0cd1eb78c433fba85c95ce47","md5":"8a092b601e9b3714fe08319253d96821","sha256":"dbb992cf4b6d4c5b423402c969e53657d936e1452eefb16da255f78e2a1a9f8f"},"downloads":-1,"filename":"nimporter-2.0.0.tar.gz","has_sig":false,"md5_digest":"8a092b601e9b3714fe08319253d96821","packagetype":"sdist","python_version":"source","requires_python":null,"size":29349,"upload_time":"2022-03-26T08:37:25","upload_time_iso_8601":"2022-03-26T08:37:25.708674Z","url":"https://files.pythonhosted.org/packages/83/5d/661007945051dcb6d1b5005d02b847f246ef0cd1eb78c433fba85c95ce47/nimporter-2.0.0.tar.gz","yanked":true,"yanked_reason":"This is a Release Candidate, not the final release. It got accidentally uploaded."}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"963cded65fcf69a8a487be84f96ab3072bfd4133ec40617ab60421f87c9684f5","md5":"1af9496e0f3dd0a0c82c7e397663251c","sha256":"d119d6eb35eb713cd483324ec919f3bf8269eef48c770e6d6549f6e34b4689c8"},"downloads":-1,"filename":"nimporter-1.1.0.tar.gz","has_sig":false,"md5_digest":"1af9496e0f3dd0a0c82c7e397663251c","packagetype":"sdist","python_version":"source","requires_python":null,"size":24349,"upload_time":"2021-11-05T22:16:42","upload_time_iso_8601":"2021-11-05T22:16:42.210450Z","url":"https://files.pythonhosted.org/packages/96/3c/ded65fcf69a8a487be84f96ab3072bfd4133ec40617ab60421f87c9684f5/nimporter-1.1.0.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
