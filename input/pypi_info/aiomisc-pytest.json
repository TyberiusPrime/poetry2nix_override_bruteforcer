{"info":{"author":"Dmitry Orlov","author_email":"me@mosquito.su","bugtrack_url":null,"classifiers":["Environment :: Plugins","Framework :: Pytest","Intended Audience :: Developers","License :: OSI Approved :: Apache Software License","License :: OSI Approved :: MIT License","Natural Language :: English","Operating System :: MacOS","Operating System :: Microsoft","Operating System :: POSIX","Programming Language :: Python :: 3","Programming Language :: Python :: 3 :: Only","Programming Language :: Python :: 3.10","Programming Language :: Python :: 3.11","Programming Language :: Python :: 3.12","Programming Language :: Python :: 3.8","Programming Language :: Python :: 3.9","Topic :: Software Development","Topic :: Software Development :: Libraries"],"description":"aiomisc pytest plugin\n=====================\n\nThis package contains a plugin for pytest.\n\n## Basic usage\n\nSimple usage example:\n\n```python\nasync def test_sample(event_loop):\n    f = event_loop.crete_future()\n    event_loop.call_soon(f.set_result, True)\n    assert await f\n```\n\nasynchronous fixture example:\n\n\n```python\n\nimport asyncio\nimport pytest\n\n\n@pytest.fixture\nasync def my_fixture(loop):\n    await asyncio.sleep(0)\n\n    # Requires python 3.6+\n    yield\n```\n\nIn case you have to save an instance of an async fixture between tests,\nthe wrong solution is just changing the fixture scope.\nBut why it wouldn't work? That's because, in the base scenario, the `loop`\nfixture creates a new event loop instance per test which will be closed after\ntest teardown. When you have to use an async fixture any caller of\n`asyncio.get_event_loop()` will get the current event loop instance which\nwill be closed and the next test will run in another event loop.\nSo the solution is to redefine the `loop` fixture with the required scope\nand custom fixture with the required scope.\n\n```python\nimport asyncio\nimport pytest\nfrom aiomisc import entrypoint\n\n\n@pytest.fixture(scope='module')\ndef loop():\n    with entrypoint() as loop:\n        asyncio.set_event_loop(loop)\n        yield loop\n\n\n@pytest.fixture(scope='module')\nasync def sample_fixture(loop):\n    yield 1\n\n\nLOOP_ID = None\n\n\nasync def test_using_fixture(sample_fixture):\n    global LOOP_ID\n    LOOP_ID = id(asyncio.get_event_loop())\n    assert sample_fixture == 1\n\n\nasync def test_not_using_fixture(loop):\n    assert id(loop) == LOOP_ID\n```\n\n## pytest markers\n\nPackage contains some useful markers for pytest:\n\n* `catch_loop_exceptions` - uncaught event loop exceptions will failling test.\n* `forbid_get_event_loop` - forbids call `asyncio.get_event_loop`\n  during test case.\n\n```python\nimport asyncio\nimport pytest\n\n\n@pytest.mark.forbid_get_event_loop\nasync def test_with_get_loop():\n    def switch_context():\n        loop = asyncio.get_event_loop()\n        future = loop.create_future()\n        loop.call_soon(future.set_result, True)\n        return future\n\n    with pytest.raises(Exception):\n        await switch_context()\n\n\n# Test will be failed\n@pytest.mark.catch_loop_exceptions\nasync def test_with_errors(loop):\n    async def fail():\n        # switch context\n        await asyncio.sleep(0)\n        raise Exception()\n\n    loop.create_task(fail())\n    await asyncio.sleep(0.1)\n    return\n```\n\n## Passing default context\n\n```python\nimport pytest\n\n@pytest.fixture\ndef default_context():\n    return {\n        'foo': 'bar',\n        'bar': 'foo',\n    }\n```\n\n## Testing services\n\nRedefine `services` fixture in your test module:\n\n```python\nimport aiomisc\nimport pytest\n\n\nclass SimpleServie(aiomisc.Service):\n    async def start(self) -> None:\n        pass\n\n    \n@pytest.fixture\ndef services():\n    return [SimpleServie()]\n```\n\n## Event loop policy overriding\n\n```python\nimport asyncio\nimport pytest\nimport tokio\nimport uvloop\n\npolicy_ids = ('uvloop', 'asyncio', 'tokio')\npolicies = (uvloop.EventLoopPolicy(),\n            asyncio.DefaultEventLoopPolicy(),\n            tokio.EventLoopPolicy())\n\n@pytest.fixture(params=policies, ids=policy_ids)\ndef event_loop_policy(request):\n    return request.param\n```\n\n## Thread pool overriding\n\n```python\nimport pytest\nfrom aiomisc.thread_pool import ThreadPoolExecutor\nimport concurrent.futures\n\nthread_pool_ids = ('aiomisc pool', 'default pool')\nthread_pool_implementation = (ThreadPoolExecutor,\n                              concurrent.futures.ThreadPoolExecutor)\n\n\n@pytest.fixture(params=thread_pool_implementation, ids=thread_pool_ids)\ndef thread_pool_executor(request):\n    return request.param\n```\n\n## entrypoint arguments\n\n```python\nimport pytest\n\n@pytest.fixture\ndef entrypoint_kwargs() -> dict:\n    return dict(log_config=False)\n```\n\n## aiohttp test client\n\n\n```python\n\nimport pytest\nfrom myapp.services.rest import REST\n\n\n@pytest.fixture\ndef rest_port(aiomisc_unused_port_factory):\n    return aiomisc_unused_port_factory()\n\n\n@pytest.fixture\ndef rest_service(rest_port):\n    return REST(port=rest_port)\n\n\n@pytest.fixture\ndef services(rest_service):\n    return [rest_service]\n\n\n@pytest.fixture\ndef api_client(api_service):\n    test_srv = TestServer(\n        app=rest_service.app,\n        port=arguments.port,\n    )\n\n    return TestClient(test_srv)\n\n...\n```\n\n\n## TCPProxy\n\nSimple TCP proxy for emulate network problems. Available as fixture `tcp_proxy`\n\n\nExamples:\n\n```python\nimport asyncio\nimport time\n\nimport pytest\n\nimport aiomisc\n\n\nclass EchoServer(aiomisc.service.TCPServer):\n    async def handle_client(\n            self, reader: asyncio.StreamReader,\n            writer: asyncio.StreamWriter\n    ):\n        chunk = await reader.read(65534)\n        while chunk:\n            writer.write(chunk)\n            chunk = await reader.read(65534)\n\n        writer.close()\n        await writer.wait_closed()\n\n\n@pytest.fixture()\ndef server_port(aiomisc_unused_port_factory) -> int:\n    return aiomisc_unused_port_factory()\n\n\n@pytest.fixture()\ndef services(server_port, localhost):\n    return [EchoServer(port=server_port, address=localhost)]\n\n\n@pytest.fixture()\nasync def proxy(tcp_proxy, localhost, server_port):\n    async with tcp_proxy(localhost, server_port) as proxy:\n        yield proxy\n\n\nasync def test_proxy_client_close(proxy):\n    reader, writer = await proxy.create_client()\n    payload = b\"Hello world\"\n\n    writer.write(payload)\n    response = await asyncio.wait_for(reader.read(1024), timeout=1)\n\n    assert response == payload\n\n    assert not reader.at_eof()\n    await proxy.disconnect_all()\n\n    assert await asyncio.wait_for(reader.read(), timeout=1) == b\"\"\n    assert reader.at_eof()\n\n\nasync def test_proxy_client_slow(proxy):\n    read_delay = 0.1\n    write_delay = 0.2\n\n    # Emulation of asymmetric and slow ISP\n    with proxy.slowdown(read_delay, write_delay):\n        reader, writer = await proxy.create_client()\n        payload = b\"Hello world\"\n\n        delta = -time.monotonic()\n\n        writer.write(payload)\n        await asyncio.wait_for(reader.read(1024), timeout=2)\n\n        delta += time.monotonic()\n\n        assert delta >= read_delay + write_delay\n\n\nasync def test_proxy_client_with_processor(proxy):\n    processed_request = b\"Never say hello\"\n\n    # Patching protocol functions\n    proxy.set_content_processors(\n        # Process data from client to server\n        lambda _: processed_request,\n\n        # Process data from server to client\n        lambda chunk: chunk[::-1],\n    )\n\n    reader, writer = await proxy.create_client()\n    writer.write(b'nevermind')\n\n    response = await reader.read(16)\n\n    assert response == processed_request[::-1]\n```\n","description_content_type":"text/markdown","docs_url":null,"download_url":null,"downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":null,"keywords":"pytest, aiomisc","license":"MIT","maintainer":null,"maintainer_email":null,"name":"aiomisc-pytest","package_url":"https://pypi.org/project/aiomisc-pytest/","platform":null,"project_url":"https://pypi.org/project/aiomisc-pytest/","project_urls":null,"provides_extra":null,"release_url":"https://pypi.org/project/aiomisc-pytest/1.2.1/","requires_dist":["pytest==8.2.0","aiomisc>=17"],"requires_python":"<4.0,>=3.8","summary":"pytest integration for aiomisc","version":"1.2.1","yanked":false,"yanked_reason":null},"last_serial":23083056,"releases":{"1.1.1":[{"comment_text":"","digests":{"blake2b_256":"b3297dec6ad68ba9177b293cd2fe16fa049e58cf20ed51b9706b3aabb70d1683","md5":"b5fcc081df6af9974fc613bbbd3c3a01","sha256":"c07251f79c936c85c7589429f43c728cf1a34b80c0089b268f2cfa6186e77020"},"downloads":-1,"filename":"aiomisc_pytest-1.1.1-py3-none-any.whl","has_sig":false,"md5_digest":"b5fcc081df6af9974fc613bbbd3c3a01","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":10620,"upload_time":"2023-02-16T13:53:21","upload_time_iso_8601":"2023-02-16T13:53:21.013452Z","url":"https://files.pythonhosted.org/packages/b3/29/7dec6ad68ba9177b293cd2fe16fa049e58cf20ed51b9706b3aabb70d1683/aiomisc_pytest-1.1.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"056f44856a298f2b0a186f8c5f0912b3142f382444b317a5d006ad2659dedf4b","md5":"0b76b1849a4ff55c5fd97dd58d53b86c","sha256":"2c378c41b078c0576027de6bf7fbc537a7e69285d23eaf4d45738d5d0de56dd3"},"downloads":-1,"filename":"aiomisc_pytest-1.1.1.tar.gz","has_sig":false,"md5_digest":"0b76b1849a4ff55c5fd97dd58d53b86c","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":12044,"upload_time":"2023-02-16T13:53:22","upload_time_iso_8601":"2023-02-16T13:53:22.617301Z","url":"https://files.pythonhosted.org/packages/05/6f/44856a298f2b0a186f8c5f0912b3142f382444b317a5d006ad2659dedf4b/aiomisc_pytest-1.1.1.tar.gz","yanked":false,"yanked_reason":null}],"1.1.2":[{"comment_text":"","digests":{"blake2b_256":"dee1c8d40f588c4a2dd656edb0412c5ee85f8fb86bc012709c47811a63541dbe","md5":"4b1780d570cc6ba6a687d2964be0ae21","sha256":"3519cb40a6ce245c26e18f3a77e43979d0d3675d59fa27757f17d09a16b4cc04"},"downloads":-1,"filename":"aiomisc_pytest-1.1.2-py3-none-any.whl","has_sig":false,"md5_digest":"4b1780d570cc6ba6a687d2964be0ae21","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.7,<4.0","size":10616,"upload_time":"2024-03-11T14:24:07","upload_time_iso_8601":"2024-03-11T14:24:07.783292Z","url":"https://files.pythonhosted.org/packages/de/e1/c8d40f588c4a2dd656edb0412c5ee85f8fb86bc012709c47811a63541dbe/aiomisc_pytest-1.1.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"590db4fb919be85c580a06e201aab21b03526fc00d04a96ed5b7875147cf52fc","md5":"5fde3a45968ae058141e1228d33d929e","sha256":"6636b470d16b9fa99416564eb7302d049fc69f6eda903e7da97ea9f3ccad0fac"},"downloads":-1,"filename":"aiomisc_pytest-1.1.2.tar.gz","has_sig":false,"md5_digest":"5fde3a45968ae058141e1228d33d929e","packagetype":"sdist","python_version":"source","requires_python":">=3.7,<4.0","size":11622,"upload_time":"2024-03-11T14:24:09","upload_time_iso_8601":"2024-03-11T14:24:09.495468Z","url":"https://files.pythonhosted.org/packages/59/0d/b4fb919be85c580a06e201aab21b03526fc00d04a96ed5b7875147cf52fc/aiomisc_pytest-1.1.2.tar.gz","yanked":false,"yanked_reason":null}],"1.2.1":[{"comment_text":"","digests":{"blake2b_256":"5fc4929aae141513874973722d80f3fb6017ecae3d361cbae4ed9589adb029a2","md5":"9b559d477998f7182ff1c7f786274113","sha256":"24a3802f0b794625a6bce0032f840c5e643e6f075c8a448297f1e92789c38736"},"downloads":-1,"filename":"aiomisc_pytest-1.2.1-py3-none-any.whl","has_sig":false,"md5_digest":"9b559d477998f7182ff1c7f786274113","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":10605,"upload_time":"2024-05-06T20:17:59","upload_time_iso_8601":"2024-05-06T20:17:59.385105Z","url":"https://files.pythonhosted.org/packages/5f/c4/929aae141513874973722d80f3fb6017ecae3d361cbae4ed9589adb029a2/aiomisc_pytest-1.2.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d58ee2bdb147941e4df8f3451679a0135968657b016c04025a6bb561aec53838","md5":"9d0b1e9a6e6a00d0e0be26a5c448d347","sha256":"e2658fefb4770a85fe5e1a13e816f142dc6920da5d99ea338d852c7a035f3325"},"downloads":-1,"filename":"aiomisc_pytest-1.2.1.tar.gz","has_sig":false,"md5_digest":"9d0b1e9a6e6a00d0e0be26a5c448d347","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":11622,"upload_time":"2024-05-06T20:18:00","upload_time_iso_8601":"2024-05-06T20:18:00.559293Z","url":"https://files.pythonhosted.org/packages/d5/8e/e2bdb147941e4df8f3451679a0135968657b016c04025a6bb561aec53838/aiomisc_pytest-1.2.1.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"5fc4929aae141513874973722d80f3fb6017ecae3d361cbae4ed9589adb029a2","md5":"9b559d477998f7182ff1c7f786274113","sha256":"24a3802f0b794625a6bce0032f840c5e643e6f075c8a448297f1e92789c38736"},"downloads":-1,"filename":"aiomisc_pytest-1.2.1-py3-none-any.whl","has_sig":false,"md5_digest":"9b559d477998f7182ff1c7f786274113","packagetype":"bdist_wheel","python_version":"py3","requires_python":"<4.0,>=3.8","size":10605,"upload_time":"2024-05-06T20:17:59","upload_time_iso_8601":"2024-05-06T20:17:59.385105Z","url":"https://files.pythonhosted.org/packages/5f/c4/929aae141513874973722d80f3fb6017ecae3d361cbae4ed9589adb029a2/aiomisc_pytest-1.2.1-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"d58ee2bdb147941e4df8f3451679a0135968657b016c04025a6bb561aec53838","md5":"9d0b1e9a6e6a00d0e0be26a5c448d347","sha256":"e2658fefb4770a85fe5e1a13e816f142dc6920da5d99ea338d852c7a035f3325"},"downloads":-1,"filename":"aiomisc_pytest-1.2.1.tar.gz","has_sig":false,"md5_digest":"9d0b1e9a6e6a00d0e0be26a5c448d347","packagetype":"sdist","python_version":"source","requires_python":"<4.0,>=3.8","size":11622,"upload_time":"2024-05-06T20:18:00","upload_time_iso_8601":"2024-05-06T20:18:00.559293Z","url":"https://files.pythonhosted.org/packages/d5/8e/e2bdb147941e4df8f3451679a0135968657b016c04025a6bb561aec53838/aiomisc_pytest-1.2.1.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
