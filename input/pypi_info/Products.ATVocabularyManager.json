{"info":{"author":"BlueDynamics Alliance","author_email":"dev@bluedynamics.com","bugtrack_url":null,"classifiers":["Framework :: Plone","Framework :: Plone :: 3.3","Framework :: Plone :: 4.0","Framework :: Plone :: 4.1","Framework :: Plone :: 4.2","Framework :: Plone :: 4.3","Framework :: Plone :: 5.0","Framework :: Zope2","Programming Language :: Python"],"description":"Introduction\n============\n\nATVocabularyManager: a vocabulary managing portal tool for Plone\n\n.. contents::\n\n.. image:: https://secure.travis-ci.org/collective/Products.ATVocabularyManager.png\n    :target: http://travis-ci.org/collective/Products.ATVocabularyManager\n\nOverview\n========\n\n- ATVocabularyManager offers central through the Plone management of\n  dynamic vocabularies.\n\n- This product is based on Archetypes and made to work with Archetypes as well\n  as with other Products. It is intended use is within Archetypes Fields.\n  Using it as a vocabulary provider for CMFMetadata worked out fine too. \n  Integration with different other products will work as well.\n\n- to use a managed vocabulary simply add the term\n  ``vocabulary = NamedVocabulary(\"myvocabulary\")`` to the fields of your\n  Archetypes Schema, import NamedVocabulary from this Product and create\n  your vocabulary with id myvocabulary in 'portal_vocabularies' tool\n  (available through Plone Site-Setup).\n  NamedVocabulary accepts two extra arguments:\n\n    - ``empty_first_item``, needs a boolean for getting an empty item on top of the list, defaults to False;\n    - ``custom_empty_first_item``, needs a list of tuple containing a custom first item, defaults to None.\n\n- ATVocabularyManager supports:\n\n  simple flat key \n     value vocabularies\n\n  tree like \n     hierachical vocabularies (see Limitations)\n\n  IMS Vocabulary Definition Exchange Format (VDEX) aware vocabularies\n     with XML Import and Export. VDEX is i18n-aware by its nature and does \n     not need LinguaPlone!\n\n  Vocabularies are pluggable types. \n     ATVocabularyManager is prepared for extension with your special \n     vocabulary type. ArchGenXML will help you here.\n     Each vocabulary term needs to be an CMF aware content type. Reuse normal\n     rich content as a vocabularies.\n\nArchGenXML 1.4+ code-generator does full integration of ATVocabularyManager:\nvia tagged value defined named vocabularies are registered transparently,\nVDEX-XML files are imported at install-time, stub vocabularies are created\nat install time and custom types are registered by just providing appropriate\nstereotypes.\n\nATVM is Linguaplone compatible (only tested with SimpleVocabulary, and \nTreeVocabulary). Add a simple vocabulary with some items, install and configure \nLinguaplone, translate the vocabulary to the language(s) of your choice, \ntranslate every item to the language(s) of your choice. NamedVocabulary() will \nreturn the vocabulary as usual, the keys will stay the same disregarding \nlanguage settings, the values will show in the currently selected language.\nVDEX vocabularies are not using LinguaPlone, but are i18n-aware (imo much \nbetter than  everything else).\n\nYou can do hierachy-aware searches on treevocabularies (for more information on \nthis see doc/search_treevocabulary.txt) attention: curently certain changes in \nthe term hierachy require a catalog rebuild (see Limitations).\n\n\nInstallation\n============\n\nThis addon can be installed has any other addons. please follow official\ndocumentation_\n\n.. _documentation: http://plone.org/documentation/kb/installing-add-ons-quick-how-to\n\nTo speed up ATVocabularyManager you might want to associate it with a\nCache-Manager.\n\n\nDependencies\n------------\n\n- Products.Archetypes\n- imsvdex\n- [Products.Linguaplone] optional\n\n\nLimitations\n===========\n\nTreeVocabulary catalog updates\n    If you are using the hierachy-aware catalog search support of \n    tree-vocabularies you need to rebuild the uid_catalog and portal_catalog \n    if you move a vocabularyterm that has other terms below it.\n\nCreation/Edit of VDEX TTW is difficult. \n    Take an editor of your choice, create the vocab and upload it or help \n    writing an UI.\n\n\nKnown Bugs\n==========\n\n- Check the issue-tracker: https://github.com/collective/Products.ATVocabularyManager/issues\n  Feel free to add bugs in here!\n\n\nSupport\n=======\nUsally the authors are offering professional support. The classical well-working \ncommunity support is found at the mailing-lists and IRC-channels announced at\nplone.org:http://plone.org\n\n\nCopyright / License\n===================\n\nProducts.ATVocabularyManager is under a BSD-like Licence.\n\n\nProducts.ATVocabularyManager is copyright by\n\n- Jens Klein <jens.klein@bluedynamics.com> and the respective authors\n\n- 2010-2011 by BlueDynamics Alliance, Austria, Germany, Switzerland\n\n- 2007-2008 by BlueDynamics Alliance, Klein & Partner KEG, Austria\n\n- 2004-2009 by BlueDynamics Alliance, Klein & Partner KG, Austria\n  and parts eduplone Open Source Business Network EEIG, Austria\n\n\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\t\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following \n      disclaimer in the documentation and/or other materials provided \n      with the distribution. \n    * Neither the name of ATVocabularyManager nor the names of its \n      contributors may be used to endorse or promote products derived \n      from this software without specific prior written permission. \n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n\nCredits\n=======\n\nSeveral parts code was created for the ZUCCARO project.\nZUCCARO (Zope-based Universally Configurable Classes for Academic\nResearch Online) is a database framework for the Humanities developed\nby the Bibliotheca Hertziana, Max Planck Institute for Art History\nFor further information: \"zuccaro.biblhertz.it\":http://zuccaro.biblhertz.it/\n\nPeople\n------\n\n- Jens Klein <jens@bluedynamics.com> (author)\n- fRiSi <harald.webmeisterei.com>\n- gotcha <gotcha@bubblenet.be>\n- jensens <jens@bluedynamics.com>\n- naro <novotny.radim@gmail.com>\n- rocky <rocky@serverzen.com>\n- thet <raggam-nl@adm.at>\n- Wouter Vanden Hove, <wouter@wvhconsulting.org>\n- Paul J Stevens, <paul@nfg.nl>\n- JeanMichel FRANCOIS, <toutpt@gmail.com>\n- andrewburkhalter -  <andrewb@onenw.org>\n- Mathieu Le Marec - Pasquet (kiorky), <kiorky@cryptelium.net>\n\nTODO\n====\n\nTasks\n-----\n\n- create an issue: simplevocabs do not get alphabetically ordered,\n  nore do they use the order defined by getObjectPositionInParent\n  (see issue #4)\n\n- drop the try\n  from Products.Archetypes.interfaces.vocabulary import IVocabularyTerm\n\n- we should add the parameter 'lang' to IVocabularyTerm.getTermValue\n  [jens] agrees, but we should make it optional (normally translations should happen transparently)\n\n- move getTermPath to separate hierarchicalvocabulary interface?\n  [hf] this would allow us to differentiate hierarchical vocabularies by their interface\n  we'd should to make namedvocbaulary.getKeyPathForTerms aware of this too then.\n\n- (missing in alias) mark methods getVocabularyValue and getVocabularyKey as deprecated\n  and use the methods getTermValue and getTermKey instead\n  [jens] XXX\n\n- use zope3 interfaces for terms\n  useful for example in NamedVocabulary.getKeyPathForTerms (see comment there)\n\n- resolve TODOs (XXX, FIXME) marked in the code ;-)\n\n\nIdeas for features\n------------------\n\n\nselection-depth\n+++++++++++++++\n\nbasic idea:\n    fields can specify selection depth (0 unlimited, 1 first level, 2 seconde level, etc)\n    that gets displayed in the Displaylist.\n\nwhy do we need that:\n    if a certain field does not need the fine-grained selection possibilities\n    a vocabulary offers, no new vocabulary has to be defined.\n\n\nvariable displaylists\n+++++++++++++++++++++\n\nbasic idea:\n\tfield can specify which attribute of the vocabularyterms is used for the\n\tdisplaylist.\n\nwhy could we need that:\n\tin certain cases the same vocabulary is needed, but another field or field\n\tcombination should be used for display in the selection.\n\nrisks/drawbacks:\n\tmore complicated handling of cached displaylists (different dictionaries have\n\tto be handeled, not just one)\n\n\ncaching displaylists\n++++++++++++++++++++\n\nbasic idea:\n    caching of displaylists and vocabularydicts using ZCacheable (the only thing we'd\n    have to care about is invalidating the cache when a term gets moved or changed)\n\nwhy do we need that:\n    fetching vocabulary displaylists costs a lot.\n    at the moment the displaylist for the whole vocab gets fetched\n    everytime a content type that uses the vocabulary is edited and even VIEWED!\n\n\n[jens] will implement this for the vdex vocabulary in the near future: DONE\n       open tasks: Invalidate cache after upload of a vdex.\n                   (Auto?)-Assign to a ram-cache-manager.\n\n\n\ngeneric setup support\n+++++++++++++++++++++\n\nbasic idea\n    vdex already can be ex and imported to xml. we shoud realize it for simple \n    and term too \n    [jens] decision needed: use vdex, some own xml or better atxml from marshall \n    or just simple Excel importable CSV?)\n    Jens decision is: vdex (implemented import) or csv (todo).\n\n\nmixins\n++++++\n    common hierarchic functionality of vdex and tree and possibly other types\n    should be coded in a mixin.\n    code and test once, use everywhere\n\n\ncatalog updates\n+++++++++++++++\n\ncurrent limitation:\n\n    every change on the structure of a vocabulary\n    (eg: moving a term up the hierarchy)\n    has to trigger not only the invalidation of the cache but also\n    the reindexing of all terms down the hierarchy\n    (uid_catalog search on getTermUidPath,\n    catalog.manage_reindexIndex(ids=('getTermUidPath',)))\n\n    currently this is a limitation of treevocabulary.\n    vdex dont need to get cataloged\n\n\nneed to reindex objects in uid_catalog and portal_catalog:\n    Which method do we need to hook?\n\n\nin portal_catalog for indexes used by content types\n    the worse problem is to reindex the objects that define custom indexes on their path-methods.\n    we don't know which catalog they use (could be portal_catalog, but also any other)\n\n    brainstorming:\n\n      - store catalog and index in vocab or the atvmtool\n      - provide a hook somewhere that can be implemented\n      - maybe use references instead of text-linefields to be able to find out which content uses a certain term.\n\nSimple Vocabulary\n=================\n\nSimple vocabularies are flat vocabularies.\n\n\nCreating a simple vocabulary\n----------------------------\n\nSimpleVocabularies can be created in the vocabulary library:\n\n  >>> portal = layer['portal']\n  >>> from Products.CMFCore.utils import getToolByName\n  >>> atvm = getToolByName(portal, 'portal_vocabularies')\n\n  >>> from plone.app.testing import TEST_USER_ID, setRoles\n  >>> setRoles(layer['portal'], TEST_USER_ID, ['Manager'])\n  >>> _ = atvm.invokeFactory('SimpleVocabulary', 'testvocab', title=\"test vocabulary\")\n\nYou can fetch a vocabulary calling ``getVocabularyByName`` on\nthe vocabulary library\n\n  >>> simple = atvm.getVocabularyByName('testvocab')\n  >>> simple\n  <SimpleVocabulary at /plone/portal_vocabularies/testvocab>\n  >>> simple.Title()\n  'test vocabulary'\n\n\nCreating simple vocabulary terms\n--------------------------------\n\nSimple vocabularies can only contain SimpleVocabularyTerms.\n\n  >>> simple.allowedContentTypes()\n  [<FactoryTypeInformation at /plone/portal_types/SimpleVocabularyTerm>]\n\n\nYou can add terms using ``invokeFactory`` or the method\n``addTerm``::\n\n  >>> _ = simple.invokeFactory('SimpleVocabularyTerm', 'term1')\n  >>> simple.addTerm('term2', 'first time')\n  True\n\naddTerm can ignore duplicate keys, and returns whether adding\nhas been successfull.\n\n  >>> simple.addTerm('term2', 'second time', silentignore=True)\n  False\n  >>> simple.getDisplayList(portal)\n  <DisplayList [('term1', ''), ('term2', 'first time')] at ...>\n\n\n\nBatch creation\n++++++++++++++\n\nFor creating simple vocabularies in python code you can use \na convenience method atvm provides for you:\n\n  >>> from Products.ATVocabularyManager.utils.vocabs import createSimpleVocabs\n  \nThis needs to be fed with a dictionary in the following format::\n\n  >>> testvocabs = {}\n  >>> testvocabs['sorting'] = (\n  ...     ('c', u'Alpha'),\n  ...     ('a', u'Zeppelin'),\n  ...     ('y', u'Charly'))\n  >>> createSimpleVocabs(atvm, testvocabs)\n  >>> sorting = atvm.getVocabularyByName('sorting')\n  >>> sorting.contentIds()\n  ['c', 'a', 'y']\n\n\n\nSorting\n-------\n\nYou can define the sort order of the vocabularyterms within a\nsimplevocabulary by choosing one of the values in `Sort method`.\n\nThe default sort order is alphabetically by Vales (Title)::\n\n  >>> sorting.getField('sortMethod').vocabulary.keys()\n  ['getObjPositionInParent', 'lexicographic_values', 'lexicographic_keys']\n  >>> sorting.getSortMethod()\n  'lexicographic_values'\n\n\nSorting by Values\n\n  >>> sorting.getDisplayList(portal)\n  <DisplayList [('c', 'Alpha'), ('y', 'Charly'), ('a', 'Zeppelin')] at ...>\n\nSorting by keys\n\n  >>> from Products.ATVocabularyManager.config import SORT_METHOD_LEXICO_KEYS\n  >>> sorting.setSortMethod(SORT_METHOD_LEXICO_KEYS)\n  >>> sorting.getDisplayList(portal)\n  <DisplayList [('a', 'Zeppelin'), ('c', 'Alpha'), ('y', 'Charly')] at ...>\n\nSorting by folder position\n\n  >>> sorting.listFolderContents()\n  [<SimpleVocabularyTerm .../sorting/c>, <SimpleVocabularyTerm .../sorting/a>, <SimpleVocabularyTerm .../sorting/y>]\n  >>> from Products.ATVocabularyManager.config import SORT_METHOD_FOLDER_ORDER\n  >>> sorting.setSortMethod(SORT_METHOD_FOLDER_ORDER)\n  >>> sorting.getDisplayList(portal)\n  <DisplayList [('c', 'Alpha'), ('a', 'Zeppelin'), ('y', 'Charly')] ...>\n\n\nLinguaplone Support\n-------------------\n\nSimple vocabularies have full Linguaplone Support, but also work\nw/o having Linguaplone installed::\n\n  >>> if portal.portal_quickinstaller.isProductInstalled('LinguaPlone'):\n  ...    portal.portal_quickinstaller.uninstallProducts(['LinguaPlone'])\n  >>> portal.portal_quickinstaller.isProductInstalled('LinguaPlone')\n  False\n\nIf Linguaplone is not installed, our vocabulary works\nwithout causing troubles\n\n  >>> from plone import api\n  >>> atvm = api.portal.get_tool(name='portal_vocabularies')\n  >>> createTestVocabulary(atvm)\n  >>> vocab = atvm.teststates\n  >>> dict(vocab.getVocabularyDict(vocab))\n  {'ger': 'Germany', 'fin': 'Finland', 'aut': 'Austria', 'nor': 'Norway'}\n\n\nIf Linguaplone is installed, the simplevocabulary is fully\nsupporting translated vocabularyterms:\n\nXXX go on porting the tests/testSimpleVocabulary testTranslations here\n\n\nSorting\n+++++++\n\nAlso sorting on translated vocabularies works as excepted:\nXXX write tests for the following \n\n* keys are the same for every language, so sorting by key should result in the same order in every language\n\n* sorting on title might result in completely differnt order\n\n* sorting on position in folder might be differnt to, since translations have their separate order\n\n\n\nSearches on hierarchical vocabularies\n=====================================\n\nThis tests demonstrates how ATVM enables you to make your contenttype\nsearchable using a treevocabulary field.\n\nimagine the following vocabulary:\n\n engine-type\n\n   * electrical\n   * mechanical\n\n     * otto engine\n     * diesel engine\n\na search for engine==mechanical should return all entries\nfor otto and diesel engines\n\nYou can skip this tutorial if you are no developer and simply\nwant to learn how to do hierarchy-aware searches on your content type.\nThis is demonstrated in the Product ATVocabularyManagerExample_\n\n.. _ATVocabularyManagerExample: https://svn.plone.org/svn/archetypes/ATVocabularyManagerExample/trunk\n\n\n\nSetup Vocabulary\n----------------\n\nlet's create our vocabulary using the utility methods\nprovided by ATVM::\n\n\n  >>> from Products.CMFCore.utils import getToolByName\n  >>> portal = layer['portal']\n  >>> atvm = getToolByName(portal, 'portal_vocabularies')\n  >>> from Products.ATVocabularyManager.utils.vocabs import createHierarchicalVocabs\n\n  >>> dictionary = {\n  ...     ('electrical', 'electrical engines'): {},\n  ...     ('mechanical', 'mechanial engines'): {\n  ...        ('otto', 'ottomotor'): {},\n  ...        ('diesel', 'diesel engine'): {}\n  ...     }\n  ... }  \n  >>> hierarchicalVocabs = {}\n  >>> hierarchicalVocabs[('enginetypes', 'Diffetent types of engines')] = dictionary\n  >>> from plone.app.testing import TEST_USER_ID, setRoles\n  >>> setRoles(layer['portal'], TEST_USER_ID, ['Manager'])\n  >>> createHierarchicalVocabs(atvm, hierarchicalVocabs)\n\n\n\nnow we've got our vocabulary available::\n\n  >>> engines = atvm.getVocabularyByName('enginetypes')\n  >>> engines\n  <TreeVocabulary at /plone/portal_vocabularies/enginetypes>\n\n\n\nBackground Information\n----------------------\n\nThis small section tells you how ATMV achieves that an ottomotor is\nrecognized as a mechanical engine too.\n\n\nThe key of a vocabulary term is the UID of the canonical object\n(in case the vocabulary is translated into different languages)\nand can be obtained using the method ``getTermKey``\n\n  >>> ottomotor = engines.mechanical.otto\n  >>> ottomotor.getTermKey() == ottomotor.UID()\n  True\n\n\nA ``TreeVocabularyTerm`` implements the method ``getTermKeyPath``\nthat returns a list of vocabularyterm-keys of the term itself\nand all the terms in the hierarchy above it.\n\n  >>> ottoPath = ottomotor.getTermKeyPath()\n  >>> engines.mechanical.getTermKey() in ottoPath\n  True\n\n\n\nEach VocabularyTerm is indexed using a KeywordIndex on\n``getTermKeyPath`` in uid_catalog.\n\nThe keypath is is available as a metadata-column in uid_catalog,\nso it can be fetched for via a catalog query without invoking real objects.\n\nour ottomotor term can be found searching for the ottomotor uid::\n\n  >>> uid_catalog = getToolByName(portal, 'uid_catalog')\n  >>> uid_catalog(getTermKeyPath=ottomotor.UID())[0].getObject()\n  <TreeVocabularyTerm at .../enginetypes/mechanical/otto>\n\na search for a machanical engine returns 3 vocabularies:\nthe ottomotor, the dieselengine and the term for mechanicalengine too::\n\n  >>> result = uid_catalog(getTermKeyPath=engines.mechanical.UID())\n  >>> [brain.id for brain in result]\n  ['mechanical', 'diesel', 'otto']\n\n\na change in the hierarchy of our vocabulary will reindex all vocabularies\nbelow the changed term.\n\n  XXX make new term below engines: 'fossil'' and move\n  mechanical there. after that the otto and diesel\n  should be available under fossil too\n\n\n\nMake your content type searchable\n---------------------------------\n\nTo be able to search for content types assiciated to terms\nnot only directly but also down the hierarchy we need to index\nour object under the TermKeyPath(s) of the associated vocabularyterm(s).\n\nATVM provides a fast implemented utility method for this purpose\nthat is working only on the catalog.\n\nYou can utilize ``getKeyPathForTerms`` in ``NamedVocabulary``::\n\n  >>> from Products.ATVocabularyManager import NamedVocabulary\n  >>> nv = NamedVocabulary('engines')\n  >>> keyPath = nv.getKeyPathForTerms(portal, ottomotor.getTermKey())\n  >>> engines.mechanical.getTermKey() in keyPath\n  True\n  >>> ottomotor.getTermKey() in keyPath\n  True\n\n\nAll you need to do is to implement a method that uses the\n``getKeyPathForTerms`` method and define it as index method::\n\n  # .. somewhere in the schemadefinition\n\n  ReferenceField(\n    name='myfield',\n    widget=...\n    vocabulary=NamedVocabulary(\"\"\"myvocab\"\"\"),\n    index=\"KeywordIndex\",\n    index_method=\"someIndexMethod\"\n  ),\n\n  # .. somewhere in your content type definition\n\n  define someIndexMethod(self):\n    \"\"\"used to index myfield\n    \"\"\"\n    # all we have to know is the field name of the field this\n    # index method belongs to\n    fieldName = 'myfield'\n\n    # the following code need not be touched\n    termUID = self.getField(fieldName).get(self)\n    return self.getField(fieldName).vocabulary.getKeyPathForTerms(self, termUID)\n\n\n\nSee ATVocabularyManagerExample_ for a more detailed explanation how\nto use ATVocabularyManager  in your content type.\n\n\n_ATVocabularyManagerExample: https://svn.plone.org/svn/archetypes/ATVocabularyManagerExample/\n\nChangelog\n=========\n\n1.6.7 (2015-07-30)\n------------------\n\n- Fix crash and cleanup in SimpleVocabulary when editing untranslated canonical \n  content\n  [pjstevns]\n\n- Extend tests on translated SimpleVocabulary and fix regressions\n  [pjstevns]\n\n- return preferred language if lp and item is lang neutral\n  [agitator]\n\n- Plone5 compatibility\n  [tomgross]\n\n- Added interfaces for all vocabularies and terms\n  [tomgross]\n\n1.6.6 (2014-02-06)\n------------------\n\n- Nothing changed yet.\n\n\n1.6.5 (2014-02-06)\n------------------\n\n- Fix simplevocabulary_view folder actions by including p.protect.authenticator\n  in form.\n  [tmog]\n\n- Fix vocabularytool_view folder actions by including p.protect.authenticator\n  in form.\n  [alecghica]\n\n- Fixed vocabularytool_view folder actions buttons display by passing title\n  instead of name\n  [ichim-david]\n\n- Append nothing to tabsindex expression in order to avoid errors for Plone 4.x\n  [ichim-david]\n\n- Added an ignored, optional id to the __init__ of portal_vocabularies, to make it\n  possible to import it from GenericSetup. [regebro]\n\n- Fix SimpleVocabulary sorting issue: sometimes order in folder were ignored\n  [keul]\n\n1.6.4 (2013-03-26)\n------------------\n\n- Fixed simplevocabulary_view and set as default view for SimpleVocabulary\n  and SortedSimpleVocabulary [petschki]\n\n- Add 'empty_first_item' and 'custom_empty_first_item' extra params to NamedVocabulary\n  for getting empty item on top of the display list [simahawk]\n\n- Compatibility with plone 4.3 [kiorky]\n\n\n1.6.3 (2013-01-16)\n------------------\n\n- Add and update some files to support a stand-alone buildout. [pjstevns]\n\n- Update and cleanup the test code for PEP8 and pyflakes, fix deprecation\n  warnings, remove ZopeTestCase. [pjstevns]\n\n- Update the content-types for current Plone practice (GS, FTI). This\n  probably makes things compatible with plone4+ only. [pjstevns]\n\n- Bind Content-types to Default workflow. [pjstevns]\n\n- Removed long deprecated \"Properties\" tab in types [keul]\n\n- Refactoring of the i18n structure (new translations, and no more needs of a\n  manual.pot file) [keul]\n\n- Added italian translation [keul]\n\n- Removed old-styles Zope2 interfaces [keul]\n\n- Move old i18n folder to current locales [toutpt]\n\n- Add fetchValuePathFromVDict to get path in tree vocabulary [toutpt]\n\n- Extract install_requires to separate variable. [pjstevns]\n\n\n1.6.2 (2012-03-22)\n------------------\n\n- Avoid breaking the import of \\*.zexp-files when an vocabularies don't exist\n  anymore, but instantiated object still exist in the import-file.\n  [WouterVH]\n\n- Added field 'showTermPath' for vdex vocabularies, to manually turn of the\n  term path. [jensens] [hpeteragitator]\n\n- Added field 'showLeafsOnly' for vdex vocabularies, to change if only the leaf\n  of the vocabulary tree can be selected. [jensens] [hpeteragitator]\n\n- Refactored getDisplayList for vdex vocabularies [jensens] [hpeteragitator]\n\n- Run i18ndude and updated german translations [hpeteragitator]\n\n- Let createSimpleVocabs accept dictionary keys as tuples of (id, title) (like\n  createHierarchicalVocabs already does), to enable one to give the vocabulary\n  a title.\n  [jcbrand]\n\n\n1.6.1 (2011-05-02)\n------------------\n\n- Avoid deprecation warnings [WouterVH]\n\n- Update metadata-files and folder-structure to current conventions. [WouterVH]\n\n- Add `z3c.autoinclude` entry point for automatic ZCML loading in Plone 3.3+.\n  [WouterVH]\n\n- Add MANIFEST.in to include top-level \\*.txt-files. [WouterVH]\n\n\n1.6 - 2011-02-22\n----------------\n\n- Don't fetch version and shortdesc from metadata.xml - this is wrong. [jensens]\n\n\n1.6.0a2 - 2011-02-18\n--------------------\n\n- Changed method of dermining if LinguaPlone is installed. Asking QI does not\n  work in Plone4. [naro]\n\n- Added some missing dependencies, and a new extra section to setup.py.\n  This helps to get a simple buildout cfg for testing against plone4. [do3cc]\n\n- Added some sleeps between installs in the tests, else genericsetup\n  creates ids twice, and fails. [do3cc]\n\n- Temporary deactivated two checks in the tests. With\n  Products.CMFQuickInstaller>=3.0.3, the portal_vocabularies don't get\n  deleted during uninstall. [do3cc]\n\n- Restructured test setup, since call semantics changed. [do3cc]\n\n\n1.6.0a1 - 2010-07-16\n--------------------\n\n- Fixed deprecated API call to registerType without Package Name. Works now for\n  Plone4. [thet]\n\n- Added Products.LinguaPlone as test dependency to extras_require and begun\n  fixing tests. [thet]\n\n- Removed old slow VDEX implementation; added stub for import/export of vocabs\n  with generixsetup; added support for vdex import with genericsetup. [jensens]\n\n\n1.4.2 - 2008-06-04\n------------------\n\n- Added spanish translations provided by Diego Municio\n  Cfr. http://plone.org/products/atvocabularymanager/issues/39.\n\n- Merged in Duke's patch for multilingual csv import for simple vocabularies.\n  Cfr. http://plone.org/products/atvocabularymanager/issues/53. [fRiSi]\n\n- Fixed test setup so ATVM is set up using the new GS profile added by naro.\n  (tested with plone 3.1.1 buildout)\n  this fixes http://plone.org/products/atvocabularymanager/issues/52\n\n- Got rid of tests.framework. [fRiSi]\n\n- Added imsvdex as a required dependency in setup.py which makes it unnecessary\n  to ``easy_install imsvdex`` for people using buildout. [fRiSi]\n\n- Added GenericSetup profile, removed Install.py. [naro]\n\n\nbefore 1.4\n----------\n\n- Workaround for  #46 Upload from Windows/IE creates wrong ID. [jensens]\n\n- Made new VdexFileVocabulary as default for upload form. [jensens]\n\n- Add alternative vdex vocabulary, much faster. [jensens]\n\n- Added convinience method to vocabulary library (tool) which returns\n  a dictionary with key=vocbaulary id and value=title of vocabulary (language\n  aware. [jensens]\n\n- Added convinience function to make it easier to fetch a value from a\n  vocabulary dictionary (utils.vocabs.fetchValueByKeyFromVocabularyDict). [jensens]\n\n- Adding css handles to various elements of portal_vocabulary user\n  interface, so that if desired, one can easily dumb down the user\n  interface for less technical clients with css, but not override the template\n  [andrewburkhalter]\n\n- Language negotation to make sure the cache is language aware. [jensens]\n\n- In types/simple/vocabulary.py, applied patch of issue #4\n  (sorting of simple vocabularies) [fRiSi]\n\n- In doc/simplevocabulary.txt, add doctest testing the sorting of simplevocabularies\n  sorting might not yet work with translated vocabularies. I added a section to\n  test this, but did not yet write the tests there. [fRiSi]\n\n- event.py, configure.zcml, interfaces.py, types/simple/term.py. [rocky]\n\n- \"renamed events\" are now fired when the title of any term is updated. [rocky]\n\n- \"deleted events\" are now fired when a term is deleted from a\n  vocabulary; this particular feature will only work when running on\n  Zope 2.9 or higher (note: this doesn't make ATVM dependent on Zope 2.9)\n  [rocky]\n\n- types/tree/vocabulary.py, types/simple/vocabulary.py\n  replaced ``if not instance is None:`` with a try-except.\n  if you are on a type that is not linguaplone enabled,\n  and using a vocabulary you got an error when creating an\n  object of this type because getLanguage raised an AttributeError. [fRiSi]\n\n- types/tree/term.py\n  to fix http://plone.org/products/atvocabularymanager/issues/26\n  in the meantime i solved the problem with the \"hack solution\"\n  to take away the IVocabulary interface from the term that is\n  extending the vocabulary. [fRiSi]\n  (see the issue above for more information.)\n\n- Makefile\n  added a new target `clean` that removes stale pyc files and ``-~`` backup\n  files [fRiSi]\n\n- namedvocabulary.py used to not add the keypath of a term if the search for a\n  term uid in uid-catalog returned more than one value. proceeding and just taking\n  the first result is better than silently ignoring the path for this item. [fRiSi]\n\n- In Extensions/Install.py, did a cleaner check for BadRequest Error in case the tool already\n  existed at install time (also added basic tests for installing/uninstalling/and\n  reinstalling the product. [fRiSi]\n\n- In Extensions/Install.py, self.portal.portal_properties.navtree_properties.metaTypesNotToList\n  is a tuple by default (on a freshly created plonesite)\n  ATVM creates a list at installation time and removes the tool from this list at\n  uninstallation. If other products get installed between installing\n  and uninstalling, they possibly change metaTypesNotToList back to a tuple again.\n  changed the installer and uninstaller to operate on and return a tuple here.\n  (should fix http://plone.org/products/atvocabularymanager/issues/10) [fRiSi]\n\n- tests/testATVocabularyManager.py\n  tests for the installation and uninstallation of the product.\n  agreed with jens that we could do a zexp of the vocabularies at uninstallation\n  in case this was done by accident.\n  (http://plone.org/products/atvocabularymanager/issues/22/) [fRiSi]\n\n- types/simple/term.py: removed bug, which stops me from adding new terms. [jensens]\n\n- In types/simple/term.py, SimpleVocabularyTerms now return the canoncial's id\n  as key. This differs from the current behaviour but is essential for translated\n  vocabularies. [fRiSi]\n\n- In types/simple/term.py,getTermKeyPath now returns a list containing the key of\n  the term, not it's uid. This is consistent with the interface. [fRiSi]\n\n- types/simple/vocabulary.py, types/tree/vocabulary.py\n  GetVocabularyDict now uses instance.getLanguage in favour of\n  portal_lanuages.getPreferredLanguage (otherwhise passing instance would be\n  useless in most cases)\n\n- tests/testSimpleVocabulary.py: Added a test that checks if translations return\n  the same key and if dictionaries are translated.\n\n- backports.py\n\n  - Improved the docstrings to be more explicit.\n\n  - getTermKey now states that all translations of a term\n    have the same key.\n\n  - getTermValue: now has an optional ``lang`` parameter\n    making ``--kwargs`` needless.\n\n\n- Add sorted simple vocabulary [gotcha]\n\n- Run i18ndude and update fr and nl [gotcha]\n\n\n- Merged branch supporting catalog searches on hierarchical vocabularies to trunk\n  (https://svn.plone.org/svn/archetypes/ATVocabularyManager/branches/treevocab-frisi)\n  [fRiSi]\n\n- Merged current trunk into this branch. [fRiSi]\n\n- Utils/vocabs.py\n  utility methods for batch creating vocabularies.[fRiSi]\n\n- types/simple/term.py types/tree/term.py\n  Marked methods getVocabularyValue and getVocabularyKey as deprecated and used those\n  defined in IVocabularyTerm to make terms implement their interface. [fRiSi]\n\n- types/tree/vocabulary.py types/simple/vocabulary.py\n  Improved linguaplone support and also added a testcase. [fRiSi]\n\n- tests/testTreeVocabulary.py\n  Testing if treevocabulary is linguaplone aware. [fRiSi]\n\n- doc/search_treevocabulary.txt: A doctest explaining how ATVM performs searches\n  on hierarchical vocabularies, and how to enable them for your content type.\n  [fRiSi]\n\n- Added dutch translations, thanks to Atopia. [jladage]\n\n- AllowedTypesByIface is broken, it seems - adding manual override to fix this\n  in ATVM. [optilude]\n\n- Removed workflows from ATVM types on installation. [ferri]\n\n- Added brazilian portuguese translation and portal_vocabularies title i18n\n  support. [ferri]\n\n- Added i18n and Czech translation. [naro]\n\n- Uncommented code in Install.py to make portal_vocabularylib not show in the\n  navigation tree. [panjunyong]\n\n- Use StringWidget instead of IDWidget for Simple vocaublary term. [panjunyong]","description_content_type":null,"docs_url":null,"download_url":"UNKNOWN","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"dynamic":null,"home_page":"https://github.com/collective/Products.ATVocabularyManager","keywords":"Plone Vocabulary Manager Zope IMS VDEX Tree Taxonomy Onthology","license":"UNKNOWN","maintainer":null,"maintainer_email":null,"name":"Products.ATVocabularyManager","package_url":"https://pypi.org/project/Products.ATVocabularyManager/","platform":"UNKNOWN","project_url":"https://pypi.org/project/Products.ATVocabularyManager/","project_urls":{"Download":"UNKNOWN","Homepage":"https://github.com/collective/Products.ATVocabularyManager"},"provides_extra":null,"release_url":"https://pypi.org/project/Products.ATVocabularyManager/1.6.7/","requires_dist":null,"requires_python":null,"summary":"Vocabulary library Plone. Central, Pluggable, TTW, with IMS VDEX Support","version":"1.6.7","yanked":false,"yanked_reason":null},"last_serial":1656552,"releases":{"1.4.1":[{"comment_text":"","digests":{"blake2b_256":"f366aaddbed13c852f1298e442f9200e33b73cdf09822d38df096fe58e292f08","md5":"2c984f50e64ff2718894f7cbe282de51","sha256":"59a3568a2fef6df5c6e12c63ed0e9be99043309eb8f3cfaff8c1c59bf5d77c11"},"downloads":-1,"filename":"Products.ATVocabularyManager-1.4.1-py2.4.egg","has_sig":false,"md5_digest":"2c984f50e64ff2718894f7cbe282de51","packagetype":"bdist_egg","python_version":"2.4","requires_python":null,"size":183857,"upload_time":"2008-05-14T14:22:06","upload_time_iso_8601":"2008-05-14T14:22:06Z","url":"https://files.pythonhosted.org/packages/f3/66/aaddbed13c852f1298e442f9200e33b73cdf09822d38df096fe58e292f08/Products.ATVocabularyManager-1.4.1-py2.4.egg","yanked":false,"yanked_reason":null}],"1.4.2":[{"comment_text":"","digests":{"blake2b_256":"f70b9c3e72093d45979c5026bf5ae82622b99eb075c1e657e37e8a36a630dd80","md5":"be8cc766860966fdbfdf55cd8d391d98","sha256":"15f881fdde6c4e3bc6a919fb238d88c72aa65dbfb40c63a36624a2cac201f708"},"downloads":-1,"filename":"Products.ATVocabularyManager-1.4.2-py2.4.egg","has_sig":false,"md5_digest":"be8cc766860966fdbfdf55cd8d391d98","packagetype":"bdist_egg","python_version":"2.4","requires_python":null,"size":198383,"upload_time":"2008-06-04T15:33:30","upload_time_iso_8601":"2008-06-04T15:33:30Z","url":"https://files.pythonhosted.org/packages/f7/0b/9c3e72093d45979c5026bf5ae82622b99eb075c1e657e37e8a36a630dd80/Products.ATVocabularyManager-1.4.2-py2.4.egg","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"blake2b_256":"c36c1b5c0b614dc64bc5eacf47271bc2e03f9230e9b18097b4ff24bbb014a1e0","md5":"38a9738d93ee255accc76dbb69703bec","sha256":"80ec14ca43547564fccf18083c434bf858d14dcf2a71cd1d889606e243f39743"},"downloads":-1,"filename":"Products.ATVocabularyManager-1.4.2.tar.gz","has_sig":false,"md5_digest":"38a9738d93ee255accc76dbb69703bec","packagetype":"sdist","python_version":"source","requires_python":null,"size":68675,"upload_time":"2008-06-04T15:33:24","upload_time_iso_8601":"2008-06-04T15:33:24Z","url":"https://files.pythonhosted.org/packages/c3/6c/1b5c0b614dc64bc5eacf47271bc2e03f9230e9b18097b4ff24bbb014a1e0/Products.ATVocabularyManager-1.4.2.tar.gz","yanked":false,"yanked_reason":null}],"1.5.0":[{"comment_text":"","digests":{"blake2b_256":"1136822b37eee868be8a38b8ae303c807e214f1237b4c37833d2ccc40b6d5172","md5":"fa6e19665d01b932154ce5148d1d1c7e","sha256":"56f72f94eb51322f14da79978b6c32b0b6e071a0620de854df2e96506d98d336"},"downloads":-1,"filename":"Products.ATVocabularyManager-1.5.0.tar.gz","has_sig":false,"md5_digest":"fa6e19665d01b932154ce5148d1d1c7e","packagetype":"sdist","python_version":"source","requires_python":null,"size":64306,"upload_time":"2010-02-13T14:32:25","upload_time_iso_8601":"2010-02-13T14:32:25.568557Z","url":"https://files.pythonhosted.org/packages/11/36/822b37eee868be8a38b8ae303c807e214f1237b4c37833d2ccc40b6d5172/Products.ATVocabularyManager-1.5.0.tar.gz","yanked":false,"yanked_reason":null}],"1.5.1":[{"comment_text":"","digests":{"blake2b_256":"9f8533f8ad7b6df3a4e8d77df5132d509dddb589e427cf8a280673b240031c8d","md5":"ac49ce9d9cdd4b19fd514c6555fe22ec","sha256":"9868edad3df40756008c36630c7cb0e1b7ff8227836d9e6d3f865005bb4f67f0"},"downloads":-1,"filename":"Products.ATVocabularyManager-1.5.1.tar.gz","has_sig":false,"md5_digest":"ac49ce9d9cdd4b19fd514c6555fe22ec","packagetype":"sdist","python_version":"source","requires_python":null,"size":61606,"upload_time":"2011-05-16T15:53:58","upload_time_iso_8601":"2011-05-16T15:53:58.807089Z","url":"https://files.pythonhosted.org/packages/9f/85/33f8ad7b6df3a4e8d77df5132d509dddb589e427cf8a280673b240031c8d/Products.ATVocabularyManager-1.5.1.tar.gz","yanked":false,"yanked_reason":null}],"1.6":[{"comment_text":"","digests":{"blake2b_256":"434d85a232e9d0c40ad64cdfb4a4d2815f390f1a51fcb6f8f7ce9e8122a9e4d8","md5":"2a5134bc462994c08d406c321f87b629","sha256":"1efa9cee7045e9042d77673ddce08d95bf59fe712458a01b004d3413272586b1"},"downloads":-1,"filename":"Products.ATVocabularyManager-1.6.tar.gz","has_sig":false,"md5_digest":"2a5134bc462994c08d406c321f87b629","packagetype":"sdist","python_version":"source","requires_python":null,"size":65440,"upload_time":"2011-02-22T12:24:32","upload_time_iso_8601":"2011-02-22T12:24:32.494663Z","url":"https://files.pythonhosted.org/packages/43/4d/85a232e9d0c40ad64cdfb4a4d2815f390f1a51fcb6f8f7ce9e8122a9e4d8/Products.ATVocabularyManager-1.6.tar.gz","yanked":false,"yanked_reason":null}],"1.6.0a1":[{"comment_text":"","digests":{"blake2b_256":"6f25190b9acf8365de16e139a99d809ec18df49e0587892b2256f2aea086c5d6","md5":"890580c22f62dffa0e7bb92b373002d4","sha256":"518ac81f776a42014322b1f369c2d0b9820f0ff4e0b1638f52d677206068d697"},"downloads":-1,"filename":"Products.ATVocabularyManager-1.6.0a1.tar.gz","has_sig":false,"md5_digest":"890580c22f62dffa0e7bb92b373002d4","packagetype":"sdist","python_version":"source","requires_python":null,"size":63651,"upload_time":"2010-07-16T13:04:23","upload_time_iso_8601":"2010-07-16T13:04:23.294170Z","url":"https://files.pythonhosted.org/packages/6f/25/190b9acf8365de16e139a99d809ec18df49e0587892b2256f2aea086c5d6/Products.ATVocabularyManager-1.6.0a1.tar.gz","yanked":false,"yanked_reason":null}],"1.6.0a2":[{"comment_text":"","digests":{"blake2b_256":"802efe1deaa89c33c523112f2b291958262be5c31592aa6c7c623e9c7538beb7","md5":"98b300f47d21f78f5b3db75440455d04","sha256":"04f1a321030bcfcf69a798fe9381c89a92ca50c2a1a602d087a2c6c15dabbc56"},"downloads":-1,"filename":"Products.ATVocabularyManager-1.6.0a2.tar.gz","has_sig":false,"md5_digest":"98b300f47d21f78f5b3db75440455d04","packagetype":"sdist","python_version":"source","requires_python":null,"size":65526,"upload_time":"2011-02-18T21:42:48","upload_time_iso_8601":"2011-02-18T21:42:48.862417Z","url":"https://files.pythonhosted.org/packages/80/2e/fe1deaa89c33c523112f2b291958262be5c31592aa6c7c623e9c7538beb7/Products.ATVocabularyManager-1.6.0a2.tar.gz","yanked":false,"yanked_reason":null}],"1.6.1":[{"comment_text":"","digests":{"blake2b_256":"ef3f9b756fe49860b8b1e07ab454ad2db1eff5f1d284d1385ea4c79a7990f35e","md5":"7341bd25294e0ec1b3e4236a60ecee38","sha256":"f0b8b6cfae9916f04932fb2bcbf7ff010f880e7b026dfe4850f82e26a9bf2129"},"downloads":-1,"filename":"Products.ATVocabularyManager-1.6.1.tar.gz","has_sig":false,"md5_digest":"7341bd25294e0ec1b3e4236a60ecee38","packagetype":"sdist","python_version":"source","requires_python":null,"size":78407,"upload_time":"2011-05-02T14:49:53","upload_time_iso_8601":"2011-05-02T14:49:53.688880Z","url":"https://files.pythonhosted.org/packages/ef/3f/9b756fe49860b8b1e07ab454ad2db1eff5f1d284d1385ea4c79a7990f35e/Products.ATVocabularyManager-1.6.1.tar.gz","yanked":false,"yanked_reason":null}],"1.6.2":[{"comment_text":"","digests":{"blake2b_256":"25384d67a32164c47281d1938356165579ae150c6744e5bcdc62ce5af2de54b7","md5":"672512e49a4f061cda574627c2856e90","sha256":"16d323a1986badef6fdca3be8fb2c9afbdd74ab66fc45036e395284ed285743b"},"downloads":-1,"filename":"Products.ATVocabularyManager-1.6.2.zip","has_sig":false,"md5_digest":"672512e49a4f061cda574627c2856e90","packagetype":"sdist","python_version":"source","requires_python":null,"size":146039,"upload_time":"2012-03-22T16:10:38","upload_time_iso_8601":"2012-03-22T16:10:38.659775Z","url":"https://files.pythonhosted.org/packages/25/38/4d67a32164c47281d1938356165579ae150c6744e5bcdc62ce5af2de54b7/Products.ATVocabularyManager-1.6.2.zip","yanked":false,"yanked_reason":null}],"1.6.3":[{"comment_text":"","digests":{"blake2b_256":"eb1b34aad403262d7565e2cfb5bd21bb95c2bcd2428ff3fb4400604e7b6b98b5","md5":"dea8d4fce25d8b94039ce8049beae937","sha256":"6449a52e2a9f251454181944f497bd20dac1e7df5e36f97f26f4665c950a6afb"},"downloads":-1,"filename":"Products.ATVocabularyManager-1.6.3.zip","has_sig":false,"md5_digest":"dea8d4fce25d8b94039ce8049beae937","packagetype":"sdist","python_version":"source","requires_python":null,"size":151742,"upload_time":"2013-01-16T12:53:50","upload_time_iso_8601":"2013-01-16T12:53:50.723172Z","url":"https://files.pythonhosted.org/packages/eb/1b/34aad403262d7565e2cfb5bd21bb95c2bcd2428ff3fb4400604e7b6b98b5/Products.ATVocabularyManager-1.6.3.zip","yanked":false,"yanked_reason":null}],"1.6.4":[{"comment_text":"","digests":{"blake2b_256":"4650e4006ee3142e8f1f211554e24c7c354ac318b3e6ffdcb2ff956bd5498279","md5":"6156e0cbcb88affefa522384e535c12f","sha256":"f8c6618d9ef0e95330f1b00e90a084768e008e06339b1c3b81d927c1f1e7c878"},"downloads":-1,"filename":"Products.ATVocabularyManager-1.6.4.zip","has_sig":false,"md5_digest":"6156e0cbcb88affefa522384e535c12f","packagetype":"sdist","python_version":"source","requires_python":null,"size":181126,"upload_time":"2013-03-26T13:51:42","upload_time_iso_8601":"2013-03-26T13:51:42.174002Z","url":"https://files.pythonhosted.org/packages/46/50/e4006ee3142e8f1f211554e24c7c354ac318b3e6ffdcb2ff956bd5498279/Products.ATVocabularyManager-1.6.4.zip","yanked":false,"yanked_reason":null}],"1.6.5":[{"comment_text":"","digests":{"blake2b_256":"8136c64450c91340c3ad499ad7e559d02f2c797ab1156e177c633245c0f806ef","md5":"5f48d3a9d0788155d627540741d15fe6","sha256":"05b98e9f54a75995f1fb4777a848e01f71f931d7bbeb203fbb21d7790dcd7f84"},"downloads":-1,"filename":"Products.ATVocabularyManager-1.6.5.zip","has_sig":false,"md5_digest":"5f48d3a9d0788155d627540741d15fe6","packagetype":"sdist","python_version":"source","requires_python":null,"size":181766,"upload_time":"2014-02-06T21:57:19","upload_time_iso_8601":"2014-02-06T21:57:19.497447Z","url":"https://files.pythonhosted.org/packages/81/36/c64450c91340c3ad499ad7e559d02f2c797ab1156e177c633245c0f806ef/Products.ATVocabularyManager-1.6.5.zip","yanked":false,"yanked_reason":null}],"1.6.6":[{"comment_text":"","digests":{"blake2b_256":"65d26d16db906ad5e00ca9defe65ebe11d82ee01234a03d20b8a4d6dd6f83b84","md5":"74b7bc310cd8d06b4f5ca74a0438c5dd","sha256":"37666497c854f890c43373c01714d53d48c2722b8b320ff408e825b536653e9e"},"downloads":-1,"filename":"Products.ATVocabularyManager-1.6.6.zip","has_sig":false,"md5_digest":"74b7bc310cd8d06b4f5ca74a0438c5dd","packagetype":"sdist","python_version":"source","requires_python":null,"size":182102,"upload_time":"2014-02-06T22:03:35","upload_time_iso_8601":"2014-02-06T22:03:35.325999Z","url":"https://files.pythonhosted.org/packages/65/d2/6d16db906ad5e00ca9defe65ebe11d82ee01234a03d20b8a4d6dd6f83b84/Products.ATVocabularyManager-1.6.6.zip","yanked":false,"yanked_reason":null}],"1.6.7":[{"comment_text":"","digests":{"blake2b_256":"89ae661b19b077658ec0908f7161ce65ff3a8b7f77653eedb8baeec34a6daadb","md5":"5717360c71c4045af48802aad96494cf","sha256":"4b675ee03ee4d8b51ca485fe163dcd174fb409197042670d1d9a0bb283a77426"},"downloads":-1,"filename":"Products.ATVocabularyManager-1.6.7.tar.gz","has_sig":false,"md5_digest":"5717360c71c4045af48802aad96494cf","packagetype":"sdist","python_version":"source","requires_python":null,"size":91956,"upload_time":"2015-07-30T11:29:26","upload_time_iso_8601":"2015-07-30T11:29:26.300978Z","url":"https://files.pythonhosted.org/packages/89/ae/661b19b077658ec0908f7161ce65ff3a8b7f77653eedb8baeec34a6daadb/Products.ATVocabularyManager-1.6.7.tar.gz","yanked":false,"yanked_reason":null}]},"urls":[{"comment_text":"","digests":{"blake2b_256":"89ae661b19b077658ec0908f7161ce65ff3a8b7f77653eedb8baeec34a6daadb","md5":"5717360c71c4045af48802aad96494cf","sha256":"4b675ee03ee4d8b51ca485fe163dcd174fb409197042670d1d9a0bb283a77426"},"downloads":-1,"filename":"Products.ATVocabularyManager-1.6.7.tar.gz","has_sig":false,"md5_digest":"5717360c71c4045af48802aad96494cf","packagetype":"sdist","python_version":"source","requires_python":null,"size":91956,"upload_time":"2015-07-30T11:29:26","upload_time_iso_8601":"2015-07-30T11:29:26.300978Z","url":"https://files.pythonhosted.org/packages/89/ae/661b19b077658ec0908f7161ce65ff3a8b7f77653eedb8baeec34a6daadb/Products.ATVocabularyManager-1.6.7.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[]}
